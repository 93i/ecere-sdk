.PHONY: objdir targetdir

# CONTENT

MODULE = ecc

OBJ = obj/bootstrap/

RES = 

TARGET_TYPE = executable

CONSOLE = -mconsole

TARGET = $(OBJ)$(MODULE).main.c

# CROSS-PLATFORM MAGIC

include ../../include.mk

COBJECTS = $(OBJ)ecc.c

SYMBOLS = $(OBJ)ecc.sym

IMPORTS = $(OBJ)ecc.imp

SOURCES = ecc.ec

# TOOLCHAIN

CPP := cpp
CC := gcc
ECP := ecp
ECC := ecc
ECS := ecs
EAR := ear
LD := gcc
AR := ar
STRIP := strip
UPX := upx

# FLAGS

CFLAGS = -fmessage-length=0 -O2 -ffast-math -m32 $(FVISIBILITY) $(FPIC) -w \
	 -DECERE_STATIC

CECFLAGS =

ECFLAGS = -nolinenumbers

OFLAGS = -m32 \
	 -LC:/Program\ Files/ECERE\ SDK/bin \
	 -L../../ecere/obj/bootstrap \
	 -L../libec/obj/bootstrap

LIBS = -lecereBootstrap -lecBootstrap $(SHAREDLIB) $(EXECUTABLE) $(LINKOPT)

UPXFLAGS = -9

# PLATFORM-SPECIFIC OPTIONS

ifdef LINUX

LIBS += -lm -ldl

endif

# TARGETS

all: objdir targetdir $(TARGET)

objdir:
	$(if $(wildcard $(OBJ)),,$(call mkdirq,$(OBJ)))

$(OBJ)$(MODULE).main.ec: $(SYMBOLS) $(COBJECTS)
	$(ECS) -console $(ECSLIBOPT) $(SYMBOLS) $(IMPORTS) -symbols obj/bootstrap -o $(OBJ)$(MODULE).main.ec

$(OBJ)$(MODULE).main.c: $(OBJ)$(MODULE).main.ec
	$(ECP) $(CECFLAGS) $(ECFLAGS) $(CFLAGS) -c $(OBJ)$(MODULE).main.ec -o $(OBJ)$(MODULE).main.sym -symbols $(OBJ)
	$(ECC) $(CECFLAGS) $(ECFLAGS) $(CFLAGS) -c $(OBJ)$(MODULE).main.ec -o $(OBJ)$(MODULE).main.c -symbols $(OBJ)

$(TARGET): $(SOURCES) $(SYMBOLS) $(OBJ)$(MODULE).main.ec $(OBJ)$(MODULE).main.c

# SYMBOL RULES

$(OBJ)ecc.sym: ecc.ec
	$(ECP) $(CECFLAGS) $(ECFLAGS) $(CFLAGS) -c ecc.ec -o $(OBJ)ecc.sym

# C OBJECT RULES

$(OBJ)ecc.c: ecc.ec $(OBJ)ecc.sym | $(SYMBOLS)
	$(ECC) $(CECFLAGS) $(ECFLAGS) $(CFLAGS) -c ecc.ec -o $(OBJ)ecc.c -symbols $(OBJ)

update:
	$(call cpq,$(COBJECTS) $(TARGET),../bootstrap/ecc/bootstrap)

clean: objdir targetdir
	$(call rmq,$(OBJ)$(MODULE).main.c $(OBJ)$(MODULE).main.ec $(OBJ)$(MODULE).main$(I) $(OBJ)$(MODULE).main$(S) $(TARGET))
	$(call rmq,$(OBJECTS))
	$(call rmq,$(COBJECTS))
	$(call rmq,$(IMPORTS))
	$(call rmq,$(SYMBOLS))

distclean: clean
	$(call rmdirq,$(OBJ))

