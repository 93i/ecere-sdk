/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING   "eC expects all declarations to precede statements in the block (C89 style)\n"

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 107 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     LONG = 294,
     SIGNED = 295,
     UNSIGNED = 296,
     FLOAT = 297,
     DOUBLE = 298,
     CONST = 299,
     VOLATILE = 300,
     VOID = 301,
     VALIST = 302,
     STRUCT = 303,
     UNION = 304,
     ENUM = 305,
     ELLIPSIS = 306,
     CASE = 307,
     DEFAULT = 308,
     IF = 309,
     SWITCH = 310,
     WHILE = 311,
     DO = 312,
     FOR = 313,
     GOTO = 314,
     CONTINUE = 315,
     BREAK = 316,
     RETURN = 317,
     IFX = 318,
     ELSE = 319,
     CLASS = 320,
     THISCLASS = 321,
     CLASS_NAME = 322,
     PROPERTY = 323,
     SETPROP = 324,
     GETPROP = 325,
     NEWOP = 326,
     RENEW = 327,
     DELETE = 328,
     EXT_DECL = 329,
     EXT_STORAGE = 330,
     IMPORT = 331,
     DEFINE = 332,
     VIRTUAL = 333,
     ATTRIB = 334,
     PUBLIC = 335,
     PRIVATE = 336,
     TYPED_OBJECT = 337,
     ANY_OBJECT = 338,
     _INCREF = 339,
     EXTENSION = 340,
     ASM = 341,
     TYPEOF = 342,
     WATCH = 343,
     STOPWATCHING = 344,
     FIREWATCHERS = 345,
     WATCHABLE = 346,
     CLASS_DESIGNER = 347,
     CLASS_NO_EXPANSION = 348,
     CLASS_FIXED = 349,
     ISPROPSET = 350,
     CLASS_DEFAULT_PROPERTY = 351,
     PROPERTY_CATEGORY = 352,
     CLASS_DATA = 353,
     CLASS_PROPERTY = 354,
     SUBCLASS = 355,
     NAMESPACE = 356,
     NEW0OP = 357,
     RENEW0 = 358,
     VAARG = 359,
     DBTABLE = 360,
     DBFIELD = 361,
     DBINDEX = 362,
     DATABASE_OPEN = 363,
     ALIGNOF = 364,
     ATTRIB_DEP = 365,
     __ATTRIB = 366,
     BOOL = 367,
     _BOOL = 368,
     _COMPLEX = 369,
     _IMAGINARY = 370,
     RESTRICT = 371,
     THREAD = 372
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 37 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 305 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 330 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  295
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   41143

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  143
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  261
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1337
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2219

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   372

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   137,     2,     2,   131,   139,   134,     2,
     121,   122,   118,   135,   126,   136,   129,   138,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   130,   124,
     119,   125,   120,   142,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   132,     2,   133,   140,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   128,   141,   127,   123,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   188,   191,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   959,   966,   973,   979,   985,   992,
     999,  1005,  1011,  1019,  1027,  1034,  1041,  1049,  1057,  1064,
    1071,  1076,  1082,  1087,  1094,  1099,  1101,  1103,  1105,  1107,
    1111,  1114,  1116,  1119,  1122,  1125,  1127,  1132,  1137,  1141,
    1146,  1151,  1155,  1159,  1162,  1165,  1170,  1175,  1179,  1184,
    1188,  1192,  1195,  1198,  1200,  1205,  1210,  1214,  1219,  1224,
    1228,  1232,  1235,  1238,  1243,  1248,  1252,  1257,  1261,  1265,
    1268,  1271,  1273,  1275,  1279,  1283,  1285,  1287,  1291,  1295,
    1298,  1301,  1304,  1307,  1310,  1315,  1318,  1323,  1329,  1335,
    1340,  1343,  1348,  1350,  1352,  1354,  1356,  1358,  1360,  1362,
    1364,  1366,  1368,  1370,  1372,  1374,  1379,  1381,  1385,  1389,
    1393,  1397,  1401,  1405,  1407,  1411,  1415,  1419,  1423,  1425,
    1429,  1433,  1437,  1441,  1444,  1446,  1449,  1453,  1457,  1461,
    1465,  1469,  1473,  1477,  1479,  1483,  1487,  1491,  1495,  1499,
    1503,  1507,  1511,  1513,  1517,  1521,  1525,  1529,  1531,  1535,
    1539,  1543,  1547,  1549,  1553,  1557,  1561,  1565,  1567,  1571,
    1575,  1577,  1581,  1585,  1587,  1593,  1599,  1605,  1611,  1617,
    1623,  1629,  1635,  1641,  1647,  1653,  1659,  1665,  1671,  1677,
    1683,  1685,  1689,  1693,  1697,  1701,  1705,  1709,  1713,  1717,
    1719,  1721,  1723,  1725,  1727,  1729,  1731,  1733,  1735,  1737,
    1739,  1741,  1745,  1749,  1752,  1754,  1758,  1762,  1764,  1766,
    1769,  1772,  1776,  1780,  1784,  1788,  1792,  1796,  1800,  1802,
    1805,  1808,  1812,  1816,  1820,  1824,  1828,  1832,  1836,  1839,
    1842,  1845,  1848,  1852,  1855,  1861,  1868,  1875,  1879,  1882,
    1888,  1890,  1892,  1894,  1896,  1898,  1903,  1905,  1909,  1913,
    1917,  1921,  1925,  1929,  1931,  1935,  1939,  1943,  1947,  1949,
    1953,  1957,  1961,  1965,  1967,  1970,  1974,  1978,  1982,  1986,
    1990,  1994,  1998,  2000,  2004,  2008,  2012,  2016,  2020,  2024,
    2028,  2032,  2034,  2038,  2042,  2046,  2050,  2052,  2056,  2060,
    2064,  2068,  2070,  2074,  2078,  2082,  2086,  2088,  2092,  2096,
    2098,  2102,  2106,  2108,  2114,  2120,  2126,  2132,  2137,  2142,
    2147,  2152,  2158,  2164,  2170,  2176,  2181,  2186,  2191,  2196,
    2202,  2208,  2214,  2220,  2226,  2232,  2238,  2244,  2248,  2252,
    2255,  2258,  2260,  2264,  2268,  2272,  2276,  2278,  2281,  2285,
    2289,  2292,  2295,  2298,  2300,  2303,  2307,  2311,  2313,  2315,
    2317,  2319,  2321,  2323,  2325,  2327,  2329,  2331,  2333,  2335,
    2337,  2339,  2341,  2343,  2345,  2349,  2353,  2355,  2359,  2362,
    2364,  2367,  2370,  2373,  2378,  2383,  2387,  2391,  2396,  2402,
    2407,  2414,  2421,  2426,  2432,  2437,  2444,  2451,  2454,  2457,
    2460,  2466,  2470,  2476,  2483,  2489,  2497,  2505,  2514,  2523,
    2531,  2539,  2543,  2547,  2551,  2556,  2560,  2566,  2572,  2574,
    2576,  2578,  2580,  2582,  2584,  2586,  2588,  2590,  2593,  2595,
    2597,  2599,  2601,  2603,  2605,  2607,  2609,  2611,  2613,  2615,
    2617,  2619,  2621,  2623,  2625,  2630,  2635,  2640,  2642,  2644,
    2646,  2648,  2650,  2652,  2654,  2656,  2658,  2660,  2662,  2664,
    2666,  2668,  2670,  2672,  2674,  2676,  2678,  2680,  2682,  2684,
    2686,  2688,  2690,  2692,  2694,  2699,  2704,  2709,  2711,  2713,
    2716,  2719,  2723,  2729,  2732,  2736,  2742,  2748,  2754,  2756,
    2760,  2763,  2766,  2770,  2774,  2777,  2781,  2785,  2790,  2794,
    2798,  2802,  2806,  2810,  2814,  2819,  2824,  2829,  2831,  2833,
    2838,  2842,  2845,  2849,  2853,  2857,  2861,  2865,  2869,  2873,
    2877,  2881,  2885,  2889,  2893,  2895,  2897,  2899,  2902,  2904,
    2907,  2909,  2912,  2914,  2917,  2919,  2922,  2924,  2927,  2929,
    2932,  2934,  2937,  2939,  2942,  2944,  2947,  2949,  2952,  2954,
    2957,  2959,  2962,  2964,  2967,  2969,  2972,  2974,  2977,  2979,
    2982,  2984,  2987,  2989,  2992,  2994,  2997,  2999,  3002,  3004,
    3007,  3009,  3012,  3014,  3017,  3019,  3022,  3024,  3027,  3029,
    3031,  3033,  3036,  3038,  3041,  3043,  3046,  3048,  3051,  3056,
    3062,  3064,  3066,  3068,  3071,  3073,  3076,  3078,  3081,  3083,
    3086,  3091,  3097,  3099,  3102,  3104,  3107,  3109,  3112,  3114,
    3117,  3119,  3122,  3124,  3127,  3132,  3138,  3140,  3143,  3145,
    3148,  3150,  3153,  3155,  3158,  3160,  3163,  3165,  3168,  3173,
    3179,  3183,  3187,  3189,  3193,  3197,  3201,  3205,  3207,  3209,
    3211,  3216,  3221,  3226,  3230,  3235,  3240,  3245,  3249,  3251,
    3255,  3260,  3264,  3269,  3274,  3279,  3284,  3288,  3291,  3295,
    3299,  3303,  3307,  3310,  3313,  3316,  3320,  3325,  3327,  3329,
    3332,  3336,  3340,  3344,  3348,  3351,  3354,  3357,  3361,  3366,
    3368,  3370,  3372,  3374,  3376,  3381,  3383,  3385,  3387,  3389,
    3391,  3393,  3395,  3397,  3399,  3404,  3406,  3409,  3413,  3420,
    3426,  3430,  3435,  3438,  3442,  3446,  3450,  3454,  3459,  3464,
    3469,  3472,  3476,  3480,  3484,  3489,  3494,  3498,  3503,  3506,
    3510,  3514,  3518,  3523,  3528,  3530,  3533,  3536,  3540,  3542,
    3544,  3547,  3550,  3554,  3556,  3558,  3561,  3564,  3568,  3570,
    3573,  3577,  3580,  3583,  3585,  3588,  3592,  3595,  3597,  3600,
    3604,  3608,  3610,  3613,  3617,  3621,  3623,  3626,  3630,  3634,
    3636,  3639,  3643,  3647,  3649,  3652,  3656,  3660,  3662,  3666,
    3671,  3673,  3678,  3681,  3687,  3691,  3693,  3695,  3697,  3699,
    3701,  3703,  3707,  3711,  3714,  3717,  3719,  3721,  3725,  3728,
    3732,  3734,  3738,  3742,  3746,  3750,  3754,  3756,  3759,  3763,
    3767,  3769,  3772,  3774,  3777,  3780,  3783,  3786,  3790,  3792,
    3794,  3798,  3802,  3804,  3808,  3813,  3817,  3822,  3826,  3830,
    3835,  3839,  3844,  3846,  3850,  3854,  3859,  3863,  3867,  3871,
    3876,  3878,  3882,  3886,  3890,  3894,  3898,  3900,  3904,  3907,
    3909,  3911,  3913,  3915,  3917,  3920,  3922,  3924,  3926,  3928,
    3931,  3934,  3937,  3939,  3941,  3943,  3945,  3947,  3950,  3952,
    3954,  3959,  3967,  3969,  3973,  3974,  3981,  3990,  4001,  4014,
    4023,  4034,  4045,  4051,  4059,  4069,  4081,  4089,  4099,  4109,
    4113,  4118,  4123,  4127,  4131,  4135,  4140,  4145,  4149,  4153,
    4157,  4162,  4167,  4171,  4174,  4178,  4181,  4185,  4190,  4195,
    4199,  4203,  4205,  4207,  4209,  4211,  4213,  4216,  4220,  4223,
    4226,  4229,  4233,  4237,  4240,  4246,  4253,  4256,  4259,  4262,
    4265,  4268,  4271,  4273,  4276,  4279,  4283,  4285,  4288,  4290,
    4293,  4296,  4298,  4301,  4304,  4307,  4310,  4313,  4316,  4318,
    4320,  4323,  4326,  4328,  4330,  4333,  4336,  4338,  4341,  4344,
    4346,  4349,  4351,  4354,  4357,  4363,  4369,  4377,  4385,  4391,
    4397,  4401,  4404,  4410,  4415,  4420,  4428,  4435,  4442,  4448,
    4456,  4463,  4468,  4476,  4486,  4490,  4495,  4500,  4506,  4512,
    4519,  4527,  4534,  4541,  4547,  4553,  4558,  4562,  4565,  4567,
    4570,  4575,  4579,  4585,  4590,  4594,  4597,  4600,  4603,  4607,
    4611,  4615,  4619,  4622,  4625,  4627,  4629,  4634,  4638,  4643,
    4647,  4651,  4654,  4659,  4663,  4668,  4672,  4676,  4679,  4681,
    4684,  4686,  4688,  4691,  4693,  4696,  4700,  4704,  4706,  4709,
    4712,  4715,  4719,  4724,  4729,  4732,  4735,  4738,  4741,  4743,
    4746,  4748,  4751,  4753,  4756,  4759,  4761,  4764,  4766,  4769,
    4772,  4775,  4778,  4780,  4783,  4786,  4790,  4792,  4794,  4795,
    4802,  4809,  4815,  4820,  4822,  4825,  4828,  4830,  4834,  4838,
    4843,  4845,  4847,  4850,  4853,  4860,  4867,  4874
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     393,     0,    -1,   215,   118,    -1,   215,   119,    -1,   148,
      -1,   215,   215,    -1,    28,    -1,    28,    -1,   146,    -1,
     146,   119,   209,   120,    -1,   146,   119,   209,    11,    -1,
     302,   337,    -1,   335,    -1,   302,   121,   122,    -1,   123,
     302,   121,   122,    -1,    78,   302,   337,    -1,    78,   335,
      -1,   302,   338,    -1,   336,    -1,    78,   302,   338,    -1,
      78,   336,    -1,   149,   377,    -1,   152,   377,    -1,   152,
     124,    -1,   150,   377,    -1,   151,   377,    -1,   149,   124,
      -1,   149,   327,   124,    -1,   149,   378,    -1,   153,    -1,
     152,   378,    -1,   154,    -1,   154,   124,    -1,   301,   337,
      -1,   301,   339,    -1,   301,   338,    -1,   157,   377,    -1,
     157,   378,    -1,   158,    -1,   157,    -1,   223,   125,   342,
      -1,   342,    -1,   223,   125,   343,    -1,   223,   125,     1,
      -1,   343,    -1,   161,    -1,   163,   126,   161,    -1,   164,
     126,   161,    -1,   162,    -1,   163,   126,   162,    -1,   164,
     126,   162,    -1,   163,   126,     1,    -1,   164,   126,     1,
      -1,   126,    -1,   163,   124,    -1,   164,   124,    -1,   165,
      -1,   159,    -1,   168,   165,    -1,   168,   159,    -1,   166,
     165,    -1,   166,   159,    -1,   168,   124,    -1,   166,   124,
      -1,   124,    -1,   166,    -1,   163,    -1,   166,   163,    -1,
     168,   163,    -1,   160,    -1,   167,   160,    -1,   168,   160,
      -1,   166,   160,    -1,   166,   164,    -1,   164,    -1,   163,
       1,    -1,   170,   127,    -1,   170,     1,   127,    -1,   301,
     215,   128,   168,    -1,   301,   215,   128,   167,     1,    -1,
     301,   215,   128,   167,    -1,   301,   215,   128,    -1,   301,
     215,   128,     1,    -1,   172,   127,    -1,   172,     1,   127,
      -1,   302,   215,   128,   168,    -1,   302,   215,   128,   167,
       1,    -1,   302,   215,   128,   167,    -1,   302,   215,   128,
      -1,   302,   215,   128,     1,    -1,   303,   215,   128,   167,
     127,    -1,   303,   215,   128,   168,   127,    -1,   303,   215,
     128,   127,    -1,   175,   127,    -1,   175,     1,   127,    -1,
     148,   128,   167,    -1,   215,   128,   167,    -1,   148,   128,
     168,    -1,   148,   128,    -1,   148,   128,   167,     1,    -1,
     148,   128,     1,    -1,   215,   128,   168,    -1,   215,   128,
      -1,   215,   128,   167,     1,    -1,   215,   128,     1,    -1,
     177,   127,    -1,   177,     1,   127,    -1,   128,   168,    -1,
     128,   167,     1,    -1,   128,     1,    -1,   128,    -1,   128,
     167,    -1,   223,   125,   342,    -1,   223,   125,   343,    -1,
     223,   125,     1,    -1,   223,     1,    -1,   178,    -1,   180,
     126,   178,    -1,   181,   126,   178,    -1,   179,    -1,   180,
     126,   179,    -1,   181,   126,   179,    -1,   180,     1,    -1,
      68,   307,   215,   128,    -1,    68,   307,   331,   215,   128,
      -1,    68,   307,   128,    -1,    68,   307,   331,   128,    -1,
      68,     1,   128,    -1,   182,    -1,   183,    69,   377,    -1,
     183,    70,   377,    -1,   183,    95,   377,    -1,   183,    91,
      -1,   183,    97,   217,    -1,   183,   127,    -1,    99,   307,
     215,   128,    -1,    99,   307,   331,   215,   128,    -1,    99,
     307,   128,    -1,    99,   307,   331,   128,    -1,    99,     1,
     128,    -1,   185,    -1,   186,    69,   377,    -1,   186,    70,
     377,    -1,   186,   127,    -1,   215,    -1,   188,   215,    -1,
     188,   377,    -1,    73,   377,    -1,   189,    -1,   190,   189,
      -1,    88,   121,   188,   122,   377,    -1,    88,   121,   244,
     122,   128,   190,   127,    -1,   244,   129,    88,   121,   244,
     122,   128,   190,   127,    -1,    89,   121,   244,   126,   188,
     122,    -1,   244,   129,    89,   121,   244,   126,   188,   122,
      -1,    89,   121,   244,   122,    -1,   244,   129,    89,   121,
     244,   122,    -1,    90,    -1,    90,   188,    -1,   223,   129,
      90,    -1,   244,   129,    90,   188,    -1,   196,   124,    -1,
     180,   124,    -1,   155,    -1,   184,    -1,   365,   155,    -1,
     365,   184,    -1,   187,    -1,    91,    -1,    93,    -1,    94,
      -1,    99,   121,   215,   122,   125,   342,   124,    -1,   124,
      -1,   365,   130,    -1,   365,   121,   215,   122,    -1,   156,
      -1,   302,    -1,   302,   289,    -1,   365,   302,   289,    -1,
     365,   302,    -1,   365,   174,    -1,   365,   171,    -1,    98,
     302,   289,    -1,   191,    -1,    92,   215,    -1,    92,   148,
      -1,    96,   215,    -1,   174,    -1,   171,    -1,   180,    -1,
     172,     1,    -1,   175,     1,    -1,   365,   156,    -1,   365,
     172,     1,    -1,   365,   175,     1,    -1,   181,    -1,   195,
      -1,   197,   195,    -1,   198,   195,    -1,   196,    -1,   197,
       1,    -1,   198,     1,    -1,   197,   196,    -1,   198,   196,
      -1,   302,    -1,   302,   331,    -1,   302,    -1,   302,   331,
      -1,    65,   215,    -1,    65,   215,   125,   200,    -1,    65,
     215,   130,   199,    -1,    65,   215,   130,   199,   125,   200,
      -1,    65,   147,    -1,    65,   147,   125,   200,    -1,    65,
     147,   130,   199,    -1,    65,   147,   130,   199,   125,   200,
      -1,   215,    -1,   215,    -1,   215,   125,   202,    -1,   234,
      -1,   302,   215,   125,   204,    -1,   302,   331,   215,   125,
     204,    -1,   201,    -1,   203,    -1,   205,    -1,   206,    -1,
     207,   126,   206,    -1,   204,    -1,   202,    -1,   200,    -1,
     215,   125,   204,    -1,   215,   125,   202,    -1,   215,   125,
     200,    -1,   208,    -1,   209,   126,   208,    -1,    65,    -1,
     210,   215,    -1,   210,   146,    -1,   215,   210,   215,    -1,
     215,   210,   146,    -1,   210,   215,   119,   207,   120,    -1,
     210,   146,   119,   207,   120,    -1,   215,   210,   215,   119,
     207,   120,    -1,   215,   210,   146,   119,   207,   120,    -1,
     214,   127,    -1,   213,   124,    -1,   211,   128,   127,    -1,
     213,   128,   127,    -1,   210,   215,   124,    -1,   210,   145,
     124,    -1,   211,   130,   306,    -1,   211,   128,   198,    -1,
     213,   128,   198,    -1,   211,   128,   197,    -1,   213,   128,
     197,    -1,   211,   128,     1,    -1,   213,   128,     1,    -1,
       3,    -1,   219,    -1,   121,   246,   122,    -1,   388,    -1,
     131,   388,    -1,   131,   388,   129,   388,    -1,     4,    -1,
     215,    -1,   174,    -1,    85,   121,   377,   122,    -1,    85,
     121,   246,   122,    -1,    85,   121,   349,   122,   340,    -1,
      85,   121,   349,   122,   121,   349,   122,   340,    -1,   218,
     215,    -1,   218,    -1,   217,    -1,   121,   122,    -1,    71,
     309,   332,   132,   268,   133,    -1,    71,   309,   332,   132,
     269,   133,    -1,    71,   309,   132,   268,   133,    -1,    71,
     309,   132,   269,   133,    -1,   102,   309,   332,   132,   268,
     133,    -1,   102,   309,   332,   132,   269,   133,    -1,   102,
     309,   132,   268,   133,    -1,   102,   309,   132,   269,   133,
      -1,    72,   268,   308,   332,   132,   268,   133,    -1,    72,
     268,   308,   332,   132,   269,   133,    -1,    72,   268,   308,
     132,   268,   133,    -1,    72,   268,   308,   132,   269,   133,
      -1,   103,   268,   308,   332,   132,   268,   133,    -1,   103,
     268,   308,   332,   132,   269,   133,    -1,   103,   268,   308,
     132,   268,   133,    -1,   103,   268,   308,   132,   269,   133,
      -1,    65,   121,   301,   122,    -1,    65,   121,   301,   331,
     122,    -1,    65,   121,   215,   122,    -1,   104,   121,   244,
     126,   349,   122,    -1,    98,   121,   215,   122,    -1,   400,
      -1,   401,    -1,   402,    -1,   403,    -1,   132,   225,   133,
      -1,   132,   133,    -1,   176,    -1,   177,     1,    -1,   121,
     246,    -1,   121,   266,    -1,   216,    -1,   223,   132,   246,
     133,    -1,   223,   132,   266,   133,    -1,   223,   121,   122,
      -1,   223,   121,   225,   122,    -1,   223,   121,   226,   122,
      -1,   223,   129,   215,    -1,   223,     7,   215,    -1,   223,
       8,    -1,   223,     9,    -1,   248,   132,   246,   133,    -1,
     248,   132,   266,   133,    -1,   248,   121,   122,    -1,   248,
     121,   225,   122,    -1,   248,   129,   215,    -1,   248,     7,
     215,    -1,   248,     8,    -1,   248,     9,    -1,   219,    -1,
     224,   132,   246,   133,    -1,   224,   132,   266,   133,    -1,
     224,   121,   122,    -1,   224,   121,   225,   122,    -1,   224,
     121,   226,   122,    -1,   224,   129,   215,    -1,   224,     7,
     215,    -1,   224,     8,    -1,   224,     9,    -1,   249,   132,
     246,   133,    -1,   249,   132,   266,   133,    -1,   249,   121,
     122,    -1,   249,   121,   225,   122,    -1,   249,   129,   215,
      -1,   249,     7,   215,    -1,   249,     8,    -1,   249,     9,
      -1,   244,    -1,   220,    -1,   225,   126,   244,    -1,   225,
     126,   220,    -1,   265,    -1,   221,    -1,   225,   126,   265,
      -1,   225,   126,   221,    -1,   225,   126,    -1,     8,   228,
      -1,     9,   228,    -1,   230,   231,    -1,   230,   220,    -1,
       6,   121,   228,   122,    -1,     6,   229,    -1,     6,   121,
     350,   122,    -1,     6,   121,    65,   145,   122,    -1,     6,
     121,    65,   144,   122,    -1,   109,   121,   228,   122,    -1,
     109,   229,    -1,   109,   121,   350,   122,    -1,   227,    -1,
     223,    -1,   227,    -1,   224,    -1,   134,    -1,   118,    -1,
     135,    -1,   136,    -1,   123,    -1,   137,    -1,    73,    -1,
      84,    -1,   228,    -1,   121,   349,   122,   231,    -1,   231,
      -1,   232,   118,   231,    -1,   232,   138,   231,    -1,   232,
     139,   231,    -1,   254,   118,   231,    -1,   254,   138,   231,
      -1,   254,   139,   231,    -1,   232,    -1,   233,   135,   232,
      -1,   233,   136,   232,    -1,   255,   135,   232,    -1,   255,
     136,   232,    -1,   233,    -1,   234,    10,   233,    -1,   234,
      11,   233,    -1,   256,    10,   233,    -1,   256,    11,   233,
      -1,   236,   119,    -1,   234,    -1,   235,   234,    -1,   236,
     120,   234,    -1,   236,    12,   234,    -1,   236,    13,   234,
      -1,   257,   119,   234,    -1,   257,   120,   234,    -1,   257,
      12,   234,    -1,   257,    13,   234,    -1,   236,    -1,   237,
      14,   236,    -1,   237,    15,   236,    -1,   258,    14,   236,
      -1,   258,    15,   236,    -1,   237,    14,   220,    -1,   237,
      15,   220,    -1,   258,    14,   220,    -1,   258,    15,   220,
      -1,   237,    -1,   238,   134,   237,    -1,   259,   134,   237,
      -1,   238,   134,   220,    -1,   259,   134,   220,    -1,   238,
      -1,   239,   140,   238,    -1,   260,   140,   238,    -1,   239,
     140,   220,    -1,   260,   140,   220,    -1,   239,    -1,   240,
     141,   239,    -1,   261,   141,   239,    -1,   240,   141,   220,
      -1,   261,   141,   220,    -1,   240,    -1,   241,    16,   240,
      -1,   262,    16,   240,    -1,   241,    -1,   242,    17,   241,
      -1,   263,    17,   241,    -1,   242,    -1,   242,   142,   246,
     130,   243,    -1,   242,   142,   266,   130,   243,    -1,   263,
     142,   246,   130,   243,    -1,   263,   142,   266,   130,   243,
      -1,   242,   142,   247,   130,   243,    -1,   242,   142,   267,
     130,   243,    -1,   263,   142,   247,   130,   243,    -1,   263,
     142,   267,   130,   243,    -1,   242,   142,   246,   130,   220,
      -1,   242,   142,   266,   130,   220,    -1,   263,   142,   246,
     130,   220,    -1,   263,   142,   266,   130,   220,    -1,   242,
     142,   247,   130,   220,    -1,   242,   142,   267,   130,   220,
      -1,   263,   142,   247,   130,   220,    -1,   263,   142,   267,
     130,   220,    -1,   243,    -1,   228,   245,   244,    -1,   251,
     245,   244,    -1,   243,   245,   244,    -1,   264,   245,   244,
      -1,   228,   245,   220,    -1,   251,   245,   220,    -1,   243,
     245,   220,    -1,   264,   245,   220,    -1,   125,    -1,    18,
      -1,    19,    -1,    20,    -1,    21,    -1,    22,    -1,    23,
      -1,    24,    -1,    25,    -1,    26,    -1,    27,    -1,   244,
      -1,   246,   126,   244,    -1,   266,   126,   244,    -1,   266,
     122,    -1,   220,    -1,   246,   126,   220,    -1,   266,   126,
     220,    -1,   222,    -1,     1,    -1,   223,     1,    -1,   175,
       1,    -1,   223,     7,     1,    -1,   248,     7,     1,    -1,
     223,   121,   225,    -1,   223,   121,   226,    -1,   223,   129,
       1,    -1,   248,   121,   226,    -1,   248,   129,     1,    -1,
       1,    -1,   224,     1,    -1,   175,     1,    -1,   224,     7,
       1,    -1,   249,     7,     1,    -1,   224,   121,   225,    -1,
     224,   121,   226,    -1,   224,   129,     1,    -1,   249,   121,
     226,    -1,   249,   129,     1,    -1,     8,   251,    -1,     9,
     251,    -1,   230,   253,    -1,   230,   221,    -1,     6,   121,
     251,    -1,     6,   252,    -1,     6,   121,   350,   122,     1,
      -1,     6,   121,    65,   145,   122,     1,    -1,     6,   121,
      65,   144,   122,     1,    -1,   109,   121,   251,    -1,   109,
     252,    -1,   109,   121,   350,   122,     1,    -1,   250,    -1,
     248,    -1,   250,    -1,   249,    -1,   251,    -1,   121,   349,
     122,   253,    -1,   253,    -1,   232,   118,   253,    -1,   232,
     138,   253,    -1,   232,   139,   253,    -1,   254,   118,   253,
      -1,   254,   138,   253,    -1,   254,   139,   253,    -1,   254,
      -1,   233,   135,   254,    -1,   233,   136,   254,    -1,   255,
     135,   254,    -1,   255,   136,   254,    -1,   255,    -1,   234,
      10,   255,    -1,   234,    11,   255,    -1,   256,    10,   255,
      -1,   256,    11,   255,    -1,   256,    -1,   235,   256,    -1,
     236,   120,   256,    -1,   236,    12,   256,    -1,   236,    13,
     256,    -1,   257,   119,   256,    -1,   257,   120,   256,    -1,
     257,    12,   256,    -1,   257,    13,   256,    -1,   257,    -1,
     237,    14,   257,    -1,   237,    15,   257,    -1,   258,    14,
     257,    -1,   258,    15,   257,    -1,   237,    14,   221,    -1,
     237,    15,   221,    -1,   258,    14,   221,    -1,   258,    15,
     221,    -1,   258,    -1,   238,   134,   258,    -1,   259,   134,
     258,    -1,   238,   134,   221,    -1,   259,   134,   221,    -1,
     259,    -1,   239,   140,   259,    -1,   260,   140,   259,    -1,
     239,   140,   221,    -1,   260,   140,   221,    -1,   260,    -1,
     240,   141,   260,    -1,   261,   141,   260,    -1,   240,   141,
     221,    -1,   261,   141,   221,    -1,   261,    -1,   241,    16,
     261,    -1,   262,    16,   261,    -1,   262,    -1,   242,    17,
     262,    -1,   263,    17,   262,    -1,   263,    -1,   242,   142,
     246,   130,   263,    -1,   242,   142,   266,   130,   263,    -1,
     263,   142,   246,   130,   263,    -1,   263,   142,   266,   130,
     263,    -1,   242,   142,   246,   130,    -1,   242,   142,   266,
     130,    -1,   263,   142,   246,   130,    -1,   263,   142,   266,
     130,    -1,   242,   142,   247,   130,   263,    -1,   242,   142,
     267,   130,   263,    -1,   263,   142,   247,   130,   263,    -1,
     263,   142,   267,   130,   263,    -1,   242,   142,   247,   130,
      -1,   242,   142,   267,   130,    -1,   263,   142,   247,   130,
      -1,   263,   142,   267,   130,    -1,   242,   142,   246,   130,
     221,    -1,   242,   142,   266,   130,   221,    -1,   263,   142,
     246,   130,   221,    -1,   263,   142,   266,   130,   221,    -1,
     242,   142,   247,   130,   221,    -1,   242,   142,   267,   130,
     221,    -1,   263,   142,   247,   130,   221,    -1,   263,   142,
     267,   130,   221,    -1,   242,   142,   130,    -1,   263,   142,
     130,    -1,   242,   142,    -1,   263,   142,    -1,   264,    -1,
     228,   245,   265,    -1,   251,   245,   265,    -1,   228,   245,
     221,    -1,   251,   245,   221,    -1,   265,    -1,   244,     1,
      -1,   246,   126,   265,    -1,   266,   126,   265,    -1,   246,
     246,    -1,   266,   246,    -1,   246,   266,    -1,   221,    -1,
     220,     1,    -1,   246,   126,   221,    -1,   266,   126,   221,
      -1,   243,    -1,   264,    -1,    29,    -1,    30,    -1,    31,
      -1,   117,    -1,    32,    -1,    33,    -1,   116,    -1,    29,
      -1,    30,    -1,    31,    -1,   117,    -1,    32,    -1,    33,
      -1,   116,    -1,   215,    -1,   215,   125,   268,    -1,   215,
     125,   269,    -1,   272,    -1,   273,   126,   272,    -1,   273,
     126,    -1,    50,    -1,   274,   215,    -1,   274,   148,    -1,
     277,   127,    -1,   274,   215,   128,   127,    -1,   274,   148,
     128,   127,    -1,   274,   128,   273,    -1,   274,   128,     1,
      -1,   274,   215,   128,   273,    -1,   274,   215,   128,   273,
       1,    -1,   274,   215,   128,     1,    -1,   274,   215,   128,
     273,   124,   197,    -1,   274,   215,   128,   273,   124,   198,
      -1,   274,   148,   128,   273,    -1,   274,   148,   128,   273,
       1,    -1,   274,   148,   128,     1,    -1,   274,   148,   128,
     273,   124,   197,    -1,   274,   148,   128,   273,   124,   198,
      -1,   274,   215,    -1,   274,   148,    -1,   280,   127,    -1,
     278,   130,   306,   128,   127,    -1,   278,   128,   127,    -1,
     278,   130,   306,   128,   273,    -1,   278,   130,   306,   128,
     273,     1,    -1,   278,   130,   306,   128,     1,    -1,   278,
     130,   306,   128,   273,   124,   197,    -1,   278,   130,   306,
     128,   273,   124,   198,    -1,   278,   130,   306,   128,   273,
       1,   124,   197,    -1,   278,   130,   306,   128,   273,     1,
     124,   198,    -1,   278,   130,   306,   128,     1,   124,   197,
      -1,   278,   130,   306,   128,     1,   124,   198,    -1,   274,
     128,   273,    -1,   274,   128,     1,    -1,   278,   128,   273,
      -1,   278,   128,   273,     1,    -1,   278,   128,     1,    -1,
     278,   128,   273,   124,   197,    -1,   278,   128,   273,   124,
     198,    -1,   279,    -1,   296,    -1,   280,    -1,   297,    -1,
     322,    -1,    44,    -1,    45,    -1,   283,    -1,   284,    -1,
     285,   284,    -1,    46,    -1,    34,    -1,    35,    -1,    36,
      -1,    37,    -1,    38,    -1,    47,    -1,    39,    -1,    42,
      -1,    43,    -1,    40,    -1,    41,    -1,    85,    -1,   293,
      -1,   275,    -1,   145,    -1,    87,   121,   244,   122,    -1,
     100,   121,   145,   122,    -1,   100,   121,   215,   122,    -1,
      66,    -1,    82,    -1,    83,    -1,   113,    -1,   112,    -1,
     114,    -1,   115,    -1,    46,    -1,    34,    -1,    35,    -1,
      36,    -1,    37,    -1,    38,    -1,    47,    -1,    39,    -1,
      42,    -1,    43,    -1,    40,    -1,    41,    -1,    85,    -1,
     293,    -1,   275,    -1,   148,    -1,   113,    -1,   112,    -1,
     114,    -1,   115,    -1,    87,   121,   244,   122,    -1,   100,
     121,   145,   122,    -1,   100,   121,   215,   122,    -1,    66,
      -1,   339,    -1,   339,   327,    -1,   130,   268,    -1,   339,
     130,   268,    -1,   339,   130,   268,   130,   268,    -1,   130,
     269,    -1,   339,   130,   269,    -1,   339,   130,   268,   130,
     269,    -1,   339,   130,   269,   130,   269,    -1,   339,   130,
     269,   130,   268,    -1,   288,    -1,   289,   126,   288,    -1,
     298,   215,    -1,   298,   146,    -1,   298,   322,   215,    -1,
     298,   322,   146,    -1,   292,   127,    -1,   290,   128,   127,
      -1,   298,   128,   127,    -1,   298,   322,   128,   127,    -1,
     290,   128,   197,    -1,   290,   128,   198,    -1,   290,   128,
       1,    -1,   298,   128,   197,    -1,   298,   128,   198,    -1,
     298,   128,     1,    -1,   298,   322,   128,   197,    -1,   298,
     322,   128,   198,    -1,   298,   322,   128,     1,    -1,   290,
      -1,   290,    -1,   290,   119,   207,   120,    -1,   294,   130,
     306,    -1,   297,   127,    -1,   295,   128,   127,    -1,   294,
     128,   127,    -1,   298,   128,   127,    -1,   295,   128,   197,
      -1,   295,   128,   198,    -1,   295,   128,     1,    -1,   294,
     128,   197,    -1,   294,   128,   198,    -1,   294,   128,     1,
      -1,   298,   128,   197,    -1,   298,   128,   198,    -1,   298,
     128,     1,    -1,    48,    -1,    49,    -1,   284,    -1,   299,
     284,    -1,   286,    -1,   299,   286,    -1,   276,    -1,   299,
     276,    -1,   291,    -1,   299,   291,    -1,   284,    -1,   300,
     284,    -1,   286,    -1,   300,   286,    -1,   144,    -1,   300,
     144,    -1,   276,    -1,   300,   276,    -1,   291,    -1,   300,
     291,    -1,   270,    -1,   301,   270,    -1,   284,    -1,   301,
     284,    -1,   287,    -1,   301,   287,    -1,   276,    -1,   301,
     276,    -1,   291,    -1,   301,   291,    -1,   270,    -1,   302,
     270,    -1,   284,    -1,   302,   284,    -1,   286,    -1,   302,
     286,    -1,   144,    -1,   302,   144,    -1,   291,    -1,   302,
     291,    -1,   276,    -1,   302,   276,    -1,   271,    -1,   303,
     271,    -1,   284,    -1,   303,   284,    -1,   286,    -1,   303,
     286,    -1,   144,    -1,   303,   144,    -1,   281,    -1,   303,
     281,    -1,   282,    -1,   303,   282,    -1,    81,    -1,    80,
      -1,   270,    -1,   305,   270,    -1,   284,    -1,   305,   284,
      -1,   287,    -1,   305,   287,    -1,   215,    -1,   305,   215,
      -1,   215,   119,   209,   120,    -1,   305,   215,   119,   209,
     120,    -1,   305,    -1,   298,    -1,   270,    -1,   307,   270,
      -1,   284,    -1,   307,   284,    -1,   287,    -1,   307,   287,
      -1,   215,    -1,   307,   215,    -1,   215,   119,   209,   120,
      -1,   307,   215,   119,   209,   120,    -1,   270,    -1,   308,
     270,    -1,   284,    -1,   308,   284,    -1,   287,    -1,   308,
     287,    -1,   291,    -1,   308,   291,    -1,   276,    -1,   308,
     276,    -1,   215,    -1,   308,   215,    -1,   215,   119,   209,
     120,    -1,   308,   215,   119,   209,   120,    -1,   270,    -1,
     309,   270,    -1,   284,    -1,   309,   284,    -1,   287,    -1,
     309,   287,    -1,   291,    -1,   309,   291,    -1,   276,    -1,
     309,   276,    -1,   215,    -1,   309,   215,    -1,   215,   119,
     209,   120,    -1,   309,   215,   119,   209,   120,    -1,   311,
     126,     1,    -1,   310,   126,     1,    -1,   215,    -1,   311,
     126,   215,    -1,   310,   126,   215,    -1,   353,   126,   215,
      -1,   354,   126,   215,    -1,   313,    -1,   146,    -1,    37,
      -1,   146,   132,   268,   133,    -1,   146,   132,   269,   133,
      -1,   146,   132,   145,   133,    -1,   146,   132,   133,    -1,
     312,   132,   268,   133,    -1,   312,   132,   269,   133,    -1,
     312,   132,   145,   133,    -1,   312,   132,   133,    -1,   215,
      -1,   121,   333,   122,    -1,   121,   322,   333,   122,    -1,
     121,   334,   122,    -1,   121,   322,   334,   122,    -1,   313,
     132,   268,   133,    -1,   313,   132,   269,   133,    -1,   313,
     132,   145,   133,    -1,   313,   132,   133,    -1,   313,   121,
      -1,   314,   355,   122,    -1,   314,   356,   122,    -1,   314,
     311,   122,    -1,   314,   310,   122,    -1,   314,   122,    -1,
     314,   310,    -1,   314,     1,    -1,   314,   353,   121,    -1,
     314,   302,   215,   121,    -1,   315,    -1,   313,    -1,   312,
     121,    -1,   318,   355,   122,    -1,   318,   356,   122,    -1,
     318,   311,   122,    -1,   318,   310,   122,    -1,   318,   122,
      -1,   318,   310,    -1,   318,     1,    -1,   318,   353,   121,
      -1,   318,   302,   215,   121,    -1,   319,    -1,   312,    -1,
      74,    -1,    75,    -1,   327,    -1,    86,   121,   388,   122,
      -1,    79,    -1,   110,    -1,   111,    -1,     3,    -1,    28,
      -1,    75,    -1,    74,    -1,    44,    -1,   324,    -1,   324,
     121,   246,   122,    -1,   325,    -1,   326,   325,    -1,   326,
     126,   325,    -1,   323,   121,   121,   326,   122,   122,    -1,
     323,   121,   121,   122,   122,    -1,   121,   331,   122,    -1,
     121,   322,   331,   122,    -1,   132,   133,    -1,   132,   268,
     133,    -1,   132,   269,   133,    -1,   132,   145,   133,    -1,
     328,   132,   133,    -1,   328,   132,   268,   133,    -1,   328,
     132,   145,   133,    -1,   328,   132,   269,   133,    -1,   121,
     122,    -1,   121,   355,   122,    -1,   121,   356,   122,    -1,
     328,   121,   122,    -1,   328,   121,   355,   122,    -1,   328,
     121,   356,   122,    -1,   121,   332,   122,    -1,   121,   322,
     332,   122,    -1,   121,   122,    -1,   121,   355,   122,    -1,
     121,   356,   122,    -1,   329,   121,   122,    -1,   329,   121,
     355,   122,    -1,   329,   121,   356,   122,    -1,   118,    -1,
     118,   285,    -1,   118,   330,    -1,   118,   285,   330,    -1,
     330,    -1,   328,    -1,   330,   328,    -1,   322,   330,    -1,
     322,   330,   328,    -1,   330,    -1,   329,    -1,   330,   329,
      -1,   322,   330,    -1,   322,   330,   329,    -1,   317,    -1,
     330,   317,    -1,   322,   330,   317,    -1,   333,   322,    -1,
     339,   322,    -1,   321,    -1,   330,   321,    -1,   322,   330,
     321,    -1,   334,   322,    -1,   315,    -1,   330,   315,    -1,
     322,   330,   315,    -1,   330,   322,   315,    -1,   316,    -1,
     330,   316,    -1,   322,   330,   316,    -1,   330,   322,   316,
      -1,   319,    -1,   330,   319,    -1,   322,   330,   319,    -1,
     330,   322,   319,    -1,   320,    -1,   330,   320,    -1,   322,
     330,   320,    -1,   330,   322,   320,    -1,   312,    -1,   330,
     312,    -1,   322,   330,   312,    -1,   330,   322,   312,    -1,
     244,    -1,   128,   344,   127,    -1,   128,   344,   126,   127,
      -1,   265,    -1,   128,   344,   127,     1,    -1,   128,   344,
      -1,   128,   344,   126,   127,     1,    -1,   128,   344,   126,
      -1,   243,    -1,   220,    -1,   264,    -1,   221,    -1,   340,
      -1,   341,    -1,   344,   126,   340,    -1,   344,   126,   341,
      -1,   344,   340,    -1,   344,   341,    -1,   333,    -1,   334,
      -1,   333,   125,   340,    -1,   333,     1,    -1,   333,   125,
     341,    -1,   345,    -1,   347,   126,   345,    -1,    37,   126,
     345,    -1,    38,   126,   345,    -1,   146,   126,   345,    -1,
     348,   126,   345,    -1,   346,    -1,   345,     1,    -1,   347,
     126,   346,    -1,   348,   126,   346,    -1,   299,    -1,   299,
     331,    -1,   300,    -1,   300,   331,    -1,   302,   334,    -1,
     302,   331,    -1,   302,   134,    -1,   302,   134,   334,    -1,
     302,    -1,    65,    -1,   302,   334,     1,    -1,   302,   331,
       1,    -1,   351,    -1,   353,   126,   351,    -1,   353,     1,
     126,   351,    -1,   354,   126,   351,    -1,   354,     1,   126,
     351,    -1,     1,   126,   351,    -1,   311,   126,   351,    -1,
     311,     1,   126,   351,    -1,   310,   126,   351,    -1,   310,
       1,   126,   351,    -1,   352,    -1,   353,   126,   352,    -1,
     354,   126,   352,    -1,   354,     1,   126,   352,    -1,     1,
     126,   352,    -1,   311,   126,   352,    -1,   310,   126,   352,
      -1,   310,     1,   126,   352,    -1,   353,    -1,   353,   126,
      51,    -1,   354,   126,    51,    -1,   311,   126,    51,    -1,
     310,   126,    51,    -1,     1,   126,    51,    -1,   354,    -1,
     353,   126,     1,    -1,   354,     1,    -1,   362,    -1,   327,
      -1,   377,    -1,   124,    -1,   130,    -1,   246,   124,    -1,
     380,    -1,   382,    -1,   384,    -1,   361,    -1,   194,   124,
      -1,   193,   124,    -1,   192,   124,    -1,   363,    -1,   383,
      -1,   378,    -1,   381,    -1,   385,    -1,   384,     1,    -1,
     266,    -1,   388,    -1,   388,   121,   244,   122,    -1,   132,
     215,   133,   388,   121,   244,   122,    -1,   359,    -1,   360,
     126,   359,    -1,    -1,    86,   284,   121,   388,   122,   124,
      -1,    86,   284,   121,   388,   130,   360,   122,   124,    -1,
      86,   284,   121,   388,   130,   360,   130,   360,   122,   124,
      -1,    86,   284,   121,   388,   130,   360,   130,   360,   130,
     360,   122,   124,    -1,    86,   284,   121,   388,     3,   360,
     122,   124,    -1,    86,   284,   121,   388,     3,   360,   130,
     360,   122,   124,    -1,    86,   284,   121,   388,   130,   360,
       3,   360,   122,   124,    -1,    86,   121,   388,   122,   124,
      -1,    86,   121,   388,   130,   360,   122,   124,    -1,    86,
     121,   388,   130,   360,   130,   360,   122,   124,    -1,    86,
     121,   388,   130,   360,   130,   360,   130,   360,   122,   124,
      -1,    86,   121,   388,     3,   360,   122,   124,    -1,    86,
     121,   388,     3,   360,   130,   360,   122,   124,    -1,    86,
     121,   388,   130,   360,     3,   360,   122,   124,    -1,   215,
     130,   357,    -1,    52,   268,   130,   357,    -1,    52,   269,
     130,   357,    -1,    52,   130,   357,    -1,    53,   130,   357,
      -1,   215,   130,   366,    -1,    52,   268,   130,   366,    -1,
      52,   269,   130,   366,    -1,    52,   130,   366,    -1,    53,
     130,   366,    -1,   215,   130,   358,    -1,    52,   268,   130,
     358,    -1,    52,   269,   130,   358,    -1,    52,   130,   358,
      -1,    52,   130,    -1,    53,   130,   358,    -1,    53,   130,
      -1,   215,   130,   369,    -1,    52,   268,   130,   369,    -1,
      52,   269,   130,   369,    -1,    52,   130,   369,    -1,    53,
     130,   369,    -1,    80,    -1,    81,    -1,    53,    -1,    80,
      -1,    81,    -1,   301,   124,    -1,   301,   347,   124,    -1,
     169,   124,    -1,   369,   124,    -1,   303,   124,    -1,   303,
     347,   124,    -1,   304,   347,   124,    -1,   173,   124,    -1,
      77,   215,   125,   243,   124,    -1,    31,    77,   215,   125,
     243,   124,    -1,   303,     1,    -1,   301,     1,    -1,   369,
       1,    -1,   170,     1,    -1,   169,     1,    -1,   301,   348,
      -1,   366,    -1,   370,   366,    -1,   371,   366,    -1,   370,
       1,   124,    -1,   369,    -1,   370,   369,    -1,   357,    -1,
     372,   357,    -1,   373,   357,    -1,   358,    -1,   372,   358,
      -1,   373,   358,    -1,   372,   366,    -1,   373,   366,    -1,
     372,   369,    -1,   373,   369,    -1,   372,    -1,   370,    -1,
     370,   372,    -1,   371,   372,    -1,   373,    -1,   371,    -1,
     370,   373,    -1,   371,   373,    -1,   128,    -1,   378,   127,
      -1,   376,   375,    -1,   376,    -1,   376,   374,    -1,   124,
      -1,   246,   124,    -1,   266,   124,    -1,    54,   121,   246,
     122,   357,    -1,    54,   121,   266,   122,   357,    -1,    54,
     121,   246,   122,   357,    64,   357,    -1,    54,   121,   266,
     122,   357,    64,   357,    -1,    55,   121,   246,   122,   357,
      -1,    55,   121,   266,   122,   357,    -1,    54,   121,   266,
      -1,   380,     1,    -1,    56,   121,   246,   122,   357,    -1,
      56,   121,   266,   357,    -1,    56,   121,   122,   357,    -1,
      57,   357,    56,   121,   246,   122,   124,    -1,    57,   357,
      56,   121,   266,   124,    -1,    58,   121,   379,   379,   122,
     357,    -1,    58,   121,   379,   122,   357,    -1,    58,   121,
     379,   379,   246,   122,   357,    -1,    58,   121,   379,   379,
     266,   357,    -1,    58,   121,   122,   357,    -1,    58,   121,
     215,   130,   246,   122,   357,    -1,    58,   121,   215,   130,
     246,   124,   246,   122,   357,    -1,    58,   121,     1,    -1,
      58,   121,   266,     1,    -1,    58,   121,   379,     1,    -1,
      58,   121,   379,   266,     1,    -1,    58,   121,   379,   379,
     266,    -1,    58,   121,   379,   379,   122,   358,    -1,    58,
     121,   379,   379,   246,   122,   358,    -1,    58,   121,   379,
     379,   266,   358,    -1,    57,   357,    56,   121,   246,   122,
      -1,    57,   357,    56,   121,   246,    -1,    57,   357,    56,
     121,   266,    -1,    57,   357,    56,   121,    -1,    57,   357,
      56,    -1,    57,   357,    -1,    57,    -1,    56,     1,    -1,
      56,   121,   122,     1,    -1,    56,   121,   266,    -1,    56,
     121,   246,   122,   358,    -1,    56,   121,   266,   358,    -1,
      59,   215,   124,    -1,    60,   124,    -1,    61,   124,    -1,
      62,   124,    -1,    62,   246,   124,    -1,    62,   266,   124,
      -1,    62,   220,   124,    -1,    62,   221,   124,    -1,    62,
     266,    -1,    62,   221,    -1,    62,    -1,    59,    -1,   303,
     335,   370,   377,    -1,   303,   335,   377,    -1,   303,   337,
     370,   377,    -1,   303,   337,   377,    -1,   335,   370,   377,
      -1,   335,   377,    -1,   303,   335,   370,   378,    -1,   303,
     335,   378,    -1,   303,   337,   370,   378,    -1,   303,   337,
     378,    -1,   335,   370,   378,    -1,   335,   378,    -1,     5,
      -1,   388,     5,    -1,   386,    -1,   212,    -1,   303,   212,
      -1,   367,    -1,    76,   388,    -1,    76,    31,   388,    -1,
      76,   215,   388,    -1,   124,    -1,   364,   386,    -1,   364,
     212,    -1,   364,   367,    -1,   364,    76,   388,    -1,   364,
      76,    31,   388,    -1,   364,    76,   215,   388,    -1,   364,
     130,    -1,    31,   130,    -1,   101,   215,    -1,   101,   148,
      -1,   394,    -1,   364,   394,    -1,   214,    -1,   303,   214,
      -1,   387,    -1,   364,   214,    -1,   364,   387,    -1,   368,
      -1,   364,   368,    -1,   390,    -1,   392,   390,    -1,   391,
     390,    -1,   392,     1,    -1,   391,     1,    -1,   389,    -1,
     392,   389,    -1,   391,   212,    -1,   391,   364,   212,    -1,
     392,    -1,   391,    -1,    -1,   105,   388,   215,   128,   399,
     127,    -1,   105,   388,   148,   128,   399,   127,    -1,   105,
     388,   128,   399,   127,    -1,   302,   215,   388,   124,    -1,
     215,    -1,   120,   215,    -1,   119,   215,    -1,   396,    -1,
     397,   126,   396,    -1,   107,   397,   124,    -1,   107,   397,
     215,   124,    -1,   395,    -1,   398,    -1,   399,   395,    -1,
     399,   398,    -1,   108,   121,   244,   126,   244,   122,    -1,
     106,   121,   388,   126,   215,   122,    -1,   107,   121,   388,
     126,   215,   122,    -1,   105,   121,   388,   122,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   279,   279,   308,   367,   368,   468,   472,   475,   476,
     477,   526,   528,   533,   538,   543,   545,   550,   552,   557,
     559,   564,   566,   568,   570,   572,   576,   580,   593,   595,
     597,   599,   601,   607,   609,   614,   619,   624,   626,   628,
     633,   634,   638,   639,   650,   654,   655,   657,   662,   663,
     665,   668,   680,   691,   710,   712,   717,   718,   719,   720,
     721,   722,   723,   724,   737,   741,   742,   743,   744,   748,
     749,   750,   751,   752,   753,   754,   758,   760,   765,   767,
     769,   771,   773,   803,   805,   810,   812,   814,   816,   818,
     847,   849,   851,   856,   858,   863,   865,   869,   871,   873,
     875,   880,   883,   886,   889,   954,   956,   961,   963,   965,
     967,   969,  1000,  1004,  1005,  1006,  1010,  1011,  1012,  1016,
    1017,  1018,  1019,  1023,  1026,  1029,  1032,  1035,  1040,  1041,
    1043,  1045,  1047,  1049,  1054,  1058,  1061,  1064,  1067,  1070,
    1075,  1076,  1078,  1083,  1087,  1089,  1094,  1096,  1101,  1103,
    1108,  1113,  1115,  1120,  1122,  1124,  1126,  1131,  1133,  1135,
    1137,  1142,  1143,  1144,  1145,  1146,  1147,  1148,  1149,  1150,
    1151,  1152,  1154,  1155,  1157,  1161,  1164,  1165,  1166,  1167,
    1168,  1169,  1170,  1171,  1172,  1173,  1174,  1175,  1176,  1177,
    1179,  1180,  1184,  1185,  1186,  1190,  1194,  1195,  1196,  1200,
    1201,  1202,  1203,  1204,  1208,  1209,  1221,  1222,  1226,  1227,
    1228,  1229,  1230,  1231,  1232,  1233,  1237,  1241,  1242,  1246,
    1254,  1255,  1259,  1260,  1261,  1265,  1266,  1270,  1271,  1272,
    1273,  1274,  1275,  1315,  1316,  1320,  1328,  1329,  1337,  1338,
    1340,  1341,  1350,  1351,  1355,  1362,  1369,  1375,  1382,  1388,
    1397,  1404,  1410,  1416,  1422,  1428,  1434,  1445,  1450,  1451,
    1456,  1457,  1458,  1462,  1466,  1467,  1468,  1469,  1470,  1471,
    1472,  1485,  1486,  1487,  1488,  1489,  1490,  1491,  1492,  1493,
    1494,  1495,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,
    1504,  1505,  1506,  1507,  1509,  1510,  1511,  1512,  1513,  1515,
    1516,  1520,  1524,  1528,  1529,  1533,  1535,  1536,  1537,  1538,
    1539,  1540,  1541,  1542,  1543,  1545,  1546,  1547,  1548,  1549,
    1550,  1551,  1552,  1556,  1558,  1559,  1560,  1561,  1562,  1563,
    1564,  1565,  1566,  1568,  1569,  1570,  1571,  1572,  1573,  1574,
    1575,  1579,  1580,  1581,  1582,  1586,  1587,  1588,  1589,  1590,
    1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,  1604,
    1605,  1606,  1610,  1611,  1615,  1616,  1620,  1621,  1622,  1623,
    1624,  1625,  1626,  1627,  1631,  1632,  1636,  1637,  1638,  1639,
    1640,  1641,  1642,  1646,  1647,  1648,  1649,  1650,  1654,  1655,
    1656,  1657,  1658,  1662,  1670,  1671,  1672,  1673,  1674,  1675,
    1676,  1677,  1678,  1682,  1683,  1684,  1685,  1686,  1688,  1689,
    1690,  1691,  1695,  1696,  1697,  1699,  1700,  1704,  1705,  1706,
    1708,  1709,  1713,  1714,  1715,  1717,  1718,  1722,  1723,  1724,
    1728,  1729,  1730,  1734,  1735,  1736,  1737,  1738,  1740,  1741,
    1742,  1743,  1745,  1746,  1747,  1748,  1750,  1751,  1752,  1753,
    1757,  1758,  1759,  1760,  1761,  1763,  1764,  1765,  1766,  1770,
    1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,  1780,
    1784,  1785,  1786,  1787,  1791,  1792,  1793,  1797,  1798,  1799,
    1800,  1802,  1803,  1805,  1806,  1811,  1813,  1818,  1822,  1823,
    1824,  1826,  1827,  1829,  1830,  1835,  1837,  1842,  1846,  1847,
    1848,  1849,  1850,  1851,  1852,  1853,  1854,  1855,  1856,  1857,
    1861,  1862,  1866,  1867,  1872,  1873,  1877,  1878,  1879,  1880,
    1881,  1882,  1883,  1887,  1888,  1892,  1896,  1900,  1907,  1908,
    1909,  1910,  1911,  1915,  1916,  1967,  1968,  1969,  1970,  1971,
    1972,  1973,  1977,  1978,  1979,  1980,  1981,  1988,  1989,  1990,
    1991,  1995,  1996,  1997,  1999,  2000,  2004,  2005,  2006,  2008,
    2009,  2013,  2014,  2015,  2017,  2018,  2022,  2023,  2024,  2028,
    2029,  2030,  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,
    2042,  2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,  2053,
    2054,  2055,  2056,  2058,  2059,  2060,  2061,  2063,  2070,  2074,
    2078,  2085,  2086,  2090,  2095,  2096,  2100,  2101,  2102,  2103,
    2109,  2110,  2111,  2115,  2116,  2117,  2118,  2122,  2124,  2128,
    2129,  2130,  2131,  2132,  2133,  2134,  2138,  2139,  2140,  2141,
    2142,  2143,  2144,  2148,  2149,  2150,  2154,  2155,  2156,  2160,
    2164,  2165,  2169,  2170,  2171,  2175,  2176,  2178,  2179,  2180,
    2181,  2182,  2184,  2185,  2186,  2187,  2188,  2192,  2193,  2197,
    2198,  2199,  2203,  2204,  2205,  2206,  2207,  2208,  2209,  2210,
    2211,  2213,  2214,  2216,  2217,  2218,  2219,  2220,  2224,  2225,
    2229,  2230,  2234,  2238,  2239,  2240,  2245,  2246,  2250,  2251,
    2252,  2253,  2254,  2255,  2256,  2257,  2258,  2259,  2260,  2261,
    2262,  2263,  2264,  2265,  2266,  2267,  2268,  2269,  2270,  2271,
    2272,  2273,  2274,  2275,  2279,  2280,  2281,  2282,  2283,  2284,
    2285,  2286,  2287,  2288,  2289,  2290,  2291,  2292,  2293,  2294,
    2295,  2296,  2297,  2298,  2299,  2300,  2301,  2302,  2308,  2310,
    2312,  2314,  2316,  2318,  2320,  2322,  2324,  2326,  2331,  2332,
    2336,  2342,  2348,  2355,  2365,  2366,  2367,  2368,  2372,  2373,
    2374,  2376,  2377,  2378,  2380,  2381,  2382,  2386,  2390,  2398,
    2407,  2416,  2417,  2419,  2420,  2424,  2431,  2438,  2441,  2454,
    2468,  2471,  2473,  2475,  2480,  2481,  2485,  2486,  2487,  2488,
    2489,  2490,  2491,  2492,  2496,  2497,  2498,  2499,  2500,  2501,
    2502,  2503,  2504,  2505,  2509,  2510,  2511,  2512,  2513,  2514,
    2515,  2516,  2517,  2518,  2522,  2523,  2524,  2525,  2526,  2527,
    2528,  2529,  2530,  2531,  2532,  2533,  2537,  2538,  2539,  2540,
    2541,  2542,  2543,  2544,  2545,  2546,  2550,  2551,  2555,  2556,
    2557,  2558,  2559,  2560,  2561,  2562,  2563,  2565,  2567,  2585,
    2603,  2604,  2608,  2609,  2610,  2611,  2612,  2613,  2614,  2615,
    2616,  2634,  2651,  2652,  2653,  2654,  2655,  2656,  2657,  2658,
    2659,  2660,  2661,  2662,  2663,  2681,  2698,  2699,  2700,  2701,
    2702,  2703,  2704,  2705,  2706,  2707,  2708,  2709,  2710,  2728,
    2745,  2746,  2750,  2751,  2752,  2753,  2754,  2758,  2759,  2766,
    2768,  2777,  2786,  2795,  2804,  2805,  2806,  2807,  2811,  2812,
    2813,  2814,  2815,  2816,  2817,  2818,  2819,  2823,  2827,  2828,
    2829,  2830,  2831,  2836,  2845,  2854,  2863,  2877,  2878,  2883,
    2887,  2888,  2889,  2890,  2891,  2896,  2905,  2914,  2923,  2937,
    2938,  2987,  2988,  2989,  2990,  3002,  3003,  3004,  3009,  3010,
    3011,  3012,  3013,  3017,  3018,  3022,  3023,  3024,  3028,  3029,
    3033,  3034,  3035,  3036,  3037,  3038,  3039,  3040,  3041,  3042,
    3043,  3044,  3045,  3046,  3047,  3048,  3052,  3053,  3054,  3055,
    3056,  3057,  3058,  3059,  3063,  3064,  3065,  3066,  3070,  3071,
    3072,  3073,  3074,  3078,  3079,  3080,  3081,  3082,  3086,  3087,
    3089,  3091,  3093,  3098,  3099,  3101,  3103,  3108,  3109,  3110,
    3111,  3115,  3116,  3117,  3118,  3122,  3123,  3124,  3125,  3129,
    3130,  3131,  3132,  3136,  3137,  3138,  3139,  3143,  3144,  3145,
    3161,  3162,  3163,  3164,  3177,  3193,  3194,  3199,  3200,  3204,
    3205,  3206,  3207,  3210,  3211,  3215,  3216,  3217,  3221,  3225,
    3229,  3230,  3231,  3232,  3233,  3242,  3251,  3252,  3253,  3254,
    3258,  3259,  3263,  3264,  3269,  3270,  3271,  3272,  3273,  3274,
    3293,  3294,  3298,  3299,  3300,  3301,  3302,  3303,  3305,  3306,
    3307,  3308,  3312,  3313,  3314,  3315,  3316,  3318,  3319,  3320,
    3324,  3325,  3326,  3327,  3328,  3329,  3333,  3334,  3335,  3340,
    3341,  3342,  3343,  3344,  3345,  3346,  3347,  3348,  3349,  3350,
    3351,  3352,  3356,  3357,  3358,  3359,  3360,  3361,  3362,  3366,
    3367,  3368,  3372,  3373,  3374,  3378,  3379,  3380,  3381,  3383,
    3384,  3385,  3387,  3388,  3389,  3390,  3392,  3393,  3394,  3398,
    3399,  3400,  3401,  3402,  3404,  3405,  3406,  3407,  3408,  3412,
    3413,  3414,  3415,  3416,  3417,  3418,  3420,  3421,  3422,  3423,
    3424,  3428,  3429,  3430,  3434,  3435,  3439,  3440,  3441,  3442,
    3446,  3447,  3448,  3450,  3451,  3452,  3456,  3460,  3461,  3463,
    3464,  3465,  3469,  3470,  3471,  3472,  3476,  3477,  3481,  3482,
    3483,  3487,  3488,  3489,  3490,  3491,  3492,  3493,  3497,  3498,
    3499,  3500,  3504,  3505,  3506,  3507,  3511,  3515,  3519,  3521,
    3524,  3530,  3531,  3532,  3536,  3537,  3538,  3539,  3540,  3541,
    3545,  3546,  3550,  3551,  3552,  3554,  3555,  3557,  3558,  3559,
    3560,  3561,  3563,  3564,  3568,  3569,  3570,  3571,  3575,  3576,
    3577,  3578,  3580,  3581,  3582,  3583,  3584,  3585,  3586,  3589,
    3593,  3594,  3598,  3599,  3603,  3604,  3605,  3606,  3607,  3608,
    3609,  3610,  3614,  3615,  3616,  3617,  3623,  3624,  3626,  3627,
    3630,  3631,  3634,  3635,  3636,  3637,  3638,  3639,  3643,  3644,
    3656,  3657,  3660,  3663,  3665,  3666,  3667,  3677,  3679,  3680,
    3682,  3683,  3684,  3685,  3695,  3696,  3697,  3698,  3699,  3700,
    3704,  3705,  3713,  3715,  3716,  3718,  3720,  3724,  3725,  3726,
    3727,  3728,  3732,  3733,  3734,  3736,  3741,  3742,  3743,  3747,
    3748,  3749,  3753,  3757,  3758,  3759,  3763,  3764,  3768,  3769,
    3773,  3774,  3775,  3776,  3780,  3784,  3788,  3792
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "LONG", "SIGNED", "UNSIGNED", "FLOAT",
  "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST", "STRUCT", "UNION",
  "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH", "WHILE", "DO",
  "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX", "ELSE", "CLASS",
  "THISCLASS", "CLASS_NAME", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "BOOL",
  "_BOOL", "_COMPLEX", "_IMAGINARY", "RESTRICT", "THREAD", "'*'", "'<'",
  "'>'", "'('", "')'", "'~'", "';'", "'='", "','", "'}'", "'{'", "'.'",
  "':'", "'$'", "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'", "'%'",
  "'^'", "'|'", "'?'", "$accept", "guess_type", "type", "base_strict_type",
  "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "simple_postfix_expression", "argument_expression_list",
  "argument_expression_list_error", "common_unary_expression",
  "unary_expression", "simple_unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "simple_postfix_expression_error", "common_unary_expression_error",
  "unary_expression_error", "simple_unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    42,    60,
      62,    40,    41,   126,    59,    61,    44,   125,   123,    46,
      58,    36,    91,    93,    38,    43,    45,    33,    47,    37,
      94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   143,   144,   144,   145,   145,   146,   147,   148,   148,
     148,   149,   149,   150,   151,   152,   152,   153,   153,   154,
     154,   155,   155,   155,   155,   155,   155,   155,   156,   156,
     156,   156,   156,   157,   157,   158,   159,   160,   160,   160,
     161,   161,   162,   162,   162,   163,   163,   163,   164,   164,
     164,   164,   164,   164,   165,   165,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   167,   167,   167,   167,   168,
     168,   168,   168,   168,   168,   168,   169,   169,   170,   170,
     170,   170,   170,   171,   171,   172,   172,   172,   172,   172,
     173,   173,   173,   174,   174,   175,   175,   175,   175,   175,
     175,   175,   175,   175,   175,   176,   176,   177,   177,   177,
     177,   177,   178,   179,   179,   179,   180,   180,   180,   181,
     181,   181,   181,   182,   182,   182,   182,   182,   183,   183,
     183,   183,   183,   183,   184,   185,   185,   185,   185,   185,
     186,   186,   186,   187,   188,   188,   189,   189,   190,   190,
     191,   192,   192,   193,   193,   193,   193,   194,   194,   194,
     194,   195,   195,   195,   195,   195,   195,   195,   195,   195,
     195,   195,   195,   195,   195,   196,   196,   196,   196,   196,
     196,   196,   196,   196,   196,   196,   196,   196,   196,   196,
     196,   196,   196,   196,   196,   196,   197,   197,   197,   198,
     198,   198,   198,   198,   199,   199,   200,   200,   201,   201,
     201,   201,   201,   201,   201,   201,   202,   203,   203,   204,
     205,   205,   206,   206,   206,   207,   207,   208,   208,   208,
     208,   208,   208,   209,   209,   210,   211,   211,   211,   211,
     211,   211,   211,   211,   212,   212,   212,   212,   212,   212,
     213,   214,   214,   214,   214,   214,   214,   215,   216,   216,
     217,   217,   217,   218,   219,   219,   219,   219,   219,   219,
     219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
     219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
     219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
     219,   220,   221,   222,   222,   223,   223,   223,   223,   223,
     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
     223,   223,   223,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   225,   225,   225,   225,   226,   226,   226,   226,   226,
     227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
     227,   227,   228,   228,   229,   229,   230,   230,   230,   230,
     230,   230,   230,   230,   231,   231,   232,   232,   232,   232,
     232,   232,   232,   233,   233,   233,   233,   233,   234,   234,
     234,   234,   234,   235,   236,   236,   236,   236,   236,   236,
     236,   236,   236,   237,   237,   237,   237,   237,   237,   237,
     237,   237,   238,   238,   238,   238,   238,   239,   239,   239,
     239,   239,   240,   240,   240,   240,   240,   241,   241,   241,
     242,   242,   242,   243,   243,   243,   243,   243,   243,   243,
     243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
     244,   244,   244,   244,   244,   244,   244,   244,   244,   245,
     245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
     246,   246,   246,   246,   247,   247,   247,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   249,   249,
     249,   249,   249,   249,   249,   249,   249,   249,   250,   250,
     250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
     251,   251,   252,   252,   253,   253,   254,   254,   254,   254,
     254,   254,   254,   255,   255,   255,   255,   255,   256,   256,
     256,   256,   256,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   258,   258,   258,   258,   258,   258,   258,   258,
     258,   259,   259,   259,   259,   259,   260,   260,   260,   260,
     260,   261,   261,   261,   261,   261,   262,   262,   262,   263,
     263,   263,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   264,   264,   264,   264,   264,   264,   264,   264,   264,
     264,   265,   265,   265,   265,   265,   266,   266,   266,   266,
     266,   266,   266,   267,   267,   267,   267,   268,   269,   270,
     270,   270,   270,   270,   270,   270,   271,   271,   271,   271,
     271,   271,   271,   272,   272,   272,   273,   273,   273,   274,
     275,   275,   276,   276,   276,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   278,   278,   279,
     279,   279,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   281,   281,
     282,   282,   283,   284,   284,   284,   285,   285,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   287,   287,   287,   287,   287,   287,
     287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
     287,   287,   287,   287,   287,   287,   287,   287,   288,   288,
     288,   288,   288,   288,   288,   288,   288,   288,   289,   289,
     290,   290,   290,   290,   291,   291,   291,   291,   292,   292,
     292,   292,   292,   292,   292,   292,   292,   293,   294,   294,
     295,   296,   296,   296,   296,   297,   297,   297,   297,   297,
     297,   297,   297,   297,   298,   298,   299,   299,   299,   299,
     299,   299,   299,   299,   300,   300,   300,   300,   300,   300,
     300,   300,   300,   300,   301,   301,   301,   301,   301,   301,
     301,   301,   301,   301,   302,   302,   302,   302,   302,   302,
     302,   302,   302,   302,   302,   302,   303,   303,   303,   303,
     303,   303,   303,   303,   303,   303,   304,   304,   305,   305,
     305,   305,   305,   305,   305,   305,   305,   305,   305,   305,
     306,   306,   307,   307,   307,   307,   307,   307,   307,   307,
     307,   307,   308,   308,   308,   308,   308,   308,   308,   308,
     308,   308,   308,   308,   308,   308,   309,   309,   309,   309,
     309,   309,   309,   309,   309,   309,   309,   309,   309,   309,
     310,   310,   311,   311,   311,   311,   311,   312,   312,   312,
     312,   312,   312,   312,   312,   312,   312,   312,   313,   313,
     313,   313,   313,   313,   313,   313,   313,   314,   315,   315,
     315,   315,   315,   316,   316,   316,   316,   317,   317,   318,
     319,   319,   319,   319,   319,   320,   320,   320,   320,   321,
     321,   322,   322,   322,   322,   323,   323,   323,   324,   324,
     324,   324,   324,   325,   325,   326,   326,   326,   327,   327,
     328,   328,   328,   328,   328,   328,   328,   328,   328,   328,
     328,   328,   328,   328,   328,   328,   329,   329,   329,   329,
     329,   329,   329,   329,   330,   330,   330,   330,   331,   331,
     331,   331,   331,   332,   332,   332,   332,   332,   333,   333,
     333,   333,   333,   334,   334,   334,   334,   335,   335,   335,
     335,   336,   336,   336,   336,   337,   337,   337,   337,   338,
     338,   338,   338,   339,   339,   339,   339,   340,   340,   340,
     341,   341,   341,   341,   341,   342,   342,   343,   343,   344,
     344,   344,   344,   344,   344,   345,   345,   345,   346,   346,
     347,   347,   347,   347,   347,   347,   348,   348,   348,   348,
     349,   349,   350,   350,   351,   351,   351,   351,   351,   351,
     352,   352,   353,   353,   353,   353,   353,   353,   353,   353,
     353,   353,   354,   354,   354,   354,   354,   354,   354,   354,
     355,   355,   355,   355,   355,   355,   356,   356,   356,   357,
     357,   357,   357,   357,   357,   357,   357,   357,   357,   357,
     357,   357,   358,   358,   358,   358,   358,   358,   358,   359,
     359,   359,   360,   360,   360,   361,   361,   361,   361,   361,
     361,   361,   361,   361,   361,   361,   361,   361,   361,   362,
     362,   362,   362,   362,   362,   362,   362,   362,   362,   363,
     363,   363,   363,   363,   363,   363,   363,   363,   363,   363,
     363,   364,   364,   364,   365,   365,   366,   366,   366,   366,
     367,   367,   367,   367,   367,   367,   368,   369,   369,   369,
     369,   369,   370,   370,   370,   370,   371,   371,   372,   372,
     372,   373,   373,   373,   373,   373,   373,   373,   374,   374,
     374,   374,   375,   375,   375,   375,   376,   377,   378,   378,
     378,   379,   379,   379,   380,   380,   380,   380,   380,   380,
     381,   381,   382,   382,   382,   382,   382,   382,   382,   382,
     382,   382,   382,   382,   383,   383,   383,   383,   383,   383,
     383,   383,   383,   383,   383,   383,   383,   383,   383,   383,
     383,   383,   383,   383,   384,   384,   384,   384,   384,   384,
     384,   384,   385,   385,   385,   385,   386,   386,   386,   386,
     386,   386,   387,   387,   387,   387,   387,   387,   388,   388,
     389,   389,   389,   389,   389,   389,   389,   389,   389,   389,
     389,   389,   389,   389,   389,   389,   389,   389,   389,   389,
     390,   390,   390,   390,   390,   390,   390,   391,   391,   391,
     391,   391,   392,   392,   392,   392,   393,   393,   393,   394,
     394,   394,   395,   396,   396,   396,   397,   397,   398,   398,
     399,   399,   399,   399,   400,   401,   402,   403
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     2,     6,     6,     5,     5,     6,     6,
       5,     5,     7,     7,     6,     6,     7,     7,     6,     6,
       4,     5,     4,     6,     4,     1,     1,     1,     1,     3,
       2,     1,     2,     2,     2,     1,     4,     4,     3,     4,
       4,     3,     3,     2,     2,     4,     4,     3,     4,     3,
       3,     2,     2,     1,     4,     4,     3,     4,     4,     3,
       3,     2,     2,     4,     4,     3,     4,     3,     3,     2,
       2,     1,     1,     3,     3,     1,     1,     3,     3,     2,
       2,     2,     2,     2,     4,     2,     4,     5,     5,     4,
       2,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     1,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     2,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     5,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     1,     3,     3,     1,     1,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     1,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       2,     2,     3,     2,     5,     6,     6,     3,     2,     5,
       1,     1,     1,     1,     1,     4,     1,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     1,
       3,     3,     1,     5,     5,     5,     5,     4,     4,     4,
       4,     5,     5,     5,     5,     4,     4,     4,     4,     5,
       5,     5,     5,     5,     5,     5,     5,     3,     3,     2,
       2,     1,     3,     3,     3,     3,     1,     2,     3,     3,
       2,     2,     2,     1,     2,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     1,     3,     2,     1,
       2,     2,     2,     4,     4,     3,     3,     4,     5,     4,
       6,     6,     4,     5,     4,     6,     6,     2,     2,     2,
       5,     3,     5,     6,     5,     7,     7,     8,     8,     7,
       7,     3,     3,     3,     4,     3,     5,     5,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     4,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     4,     4,     1,     1,     2,
       2,     3,     5,     2,     3,     5,     5,     5,     1,     3,
       2,     2,     3,     3,     2,     3,     3,     4,     3,     3,
       3,     3,     3,     3,     4,     4,     4,     1,     1,     4,
       3,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     1,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       3,     3,     1,     3,     3,     3,     3,     1,     1,     1,
       4,     4,     4,     3,     4,     4,     4,     3,     1,     3,
       4,     3,     4,     4,     4,     4,     3,     2,     3,     3,
       3,     3,     2,     2,     2,     3,     4,     1,     1,     2,
       3,     3,     3,     3,     2,     2,     2,     3,     4,     1,
       1,     1,     1,     1,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     2,     3,     6,     5,
       3,     4,     2,     3,     3,     3,     3,     4,     4,     4,
       2,     3,     3,     3,     4,     4,     3,     4,     2,     3,
       3,     3,     4,     4,     1,     2,     2,     3,     1,     1,
       2,     2,     3,     1,     1,     2,     2,     3,     1,     2,
       3,     2,     2,     1,     2,     3,     2,     1,     2,     3,
       3,     1,     2,     3,     3,     1,     2,     3,     3,     1,
       2,     3,     3,     1,     2,     3,     3,     1,     3,     4,
       1,     4,     2,     5,     3,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     2,     1,     1,     3,     2,     3,
       1,     3,     3,     3,     3,     3,     1,     2,     3,     3,
       1,     2,     1,     2,     2,     2,     2,     3,     1,     1,
       3,     3,     1,     3,     4,     3,     4,     3,     3,     4,
       3,     4,     1,     3,     3,     4,     3,     3,     3,     4,
       1,     3,     3,     3,     3,     3,     1,     3,     2,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     2,
       2,     2,     1,     1,     1,     1,     1,     2,     1,     1,
       4,     7,     1,     3,     0,     6,     8,    10,    12,     8,
      10,    10,     5,     7,     9,    11,     7,     9,     9,     3,
       4,     4,     3,     3,     3,     4,     4,     3,     3,     3,
       4,     4,     3,     2,     3,     2,     3,     4,     4,     3,
       3,     1,     1,     1,     1,     1,     2,     3,     2,     2,
       2,     3,     3,     2,     5,     6,     2,     2,     2,     2,
       2,     2,     1,     2,     2,     3,     1,     2,     1,     2,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       2,     2,     1,     1,     2,     2,     1,     2,     2,     1,
       2,     1,     2,     2,     5,     5,     7,     7,     5,     5,
       3,     2,     5,     4,     4,     7,     6,     6,     5,     7,
       6,     4,     7,     9,     3,     4,     4,     5,     5,     6,
       7,     6,     6,     5,     5,     4,     3,     2,     1,     2,
       4,     3,     5,     4,     3,     2,     2,     2,     3,     3,
       3,     3,     2,     2,     1,     1,     4,     3,     4,     3,
       3,     2,     4,     3,     4,     3,     3,     2,     1,     2,
       1,     1,     2,     1,     2,     3,     3,     1,     2,     2,
       2,     3,     4,     4,     2,     2,     2,     2,     1,     2,
       1,     2,     1,     2,     2,     1,     2,     1,     2,     2,
       2,     2,     1,     2,     2,     3,     1,     1,     0,     6,
       6,     5,     4,     1,     2,     2,     1,     3,     3,     4,
       1,     1,     2,     2,     6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1318,   257,     6,   626,   627,   628,   630,   631,   689,   690,
     691,   692,   693,   695,   698,   699,   696,   697,   683,   684,
     688,   694,   784,   785,   639,  1163,   235,   707,   941,   942,
       0,     0,   945,  1161,  1162,   708,   709,   700,     0,     0,
       0,     0,     0,   946,   947,   711,   710,   712,   713,   632,
     629,   984,     0,  1287,   832,   703,     8,     4,     0,     0,
       0,  1281,     0,  1300,   908,   826,     0,   702,     0,   678,
     680,   834,   836,   685,   828,   830,   767,   701,     0,     0,
     679,   681,     0,     0,     0,     0,     0,  1007,   682,     0,
     943,     0,     0,     0,  1283,  1305,  1280,  1302,  1312,  1307,
       0,     0,     0,  1298,     0,  1295,  1278,     0,     0,  1284,
       0,     0,     0,     0,  1297,  1296,     0,   686,   985,   682,
     986,   899,   898,   908,   940,   897,   927,   998,     0,   939,
    1003,     0,     0,     0,     0,     0,     0,  1173,     0,   237,
     236,     0,     0,   245,     0,   244,     2,     3,     0,     5,
       0,   641,   640,     0,     0,   659,     0,     0,     0,     0,
     771,     0,   751,   750,     0,  1176,   628,   692,   693,  1170,
     833,     8,  1282,  1301,   908,   827,   835,   837,   829,   831,
    1007,  1015,   682,     0,     0,  1046,     0,     0,     0,  1056,
       0,     0,   899,     0,   898,     0,     0,   917,     0,     0,
     619,   620,   621,   623,   624,  1069,   625,   622,   922,   820,
     892,   814,     0,   824,     0,   816,   818,   767,   822,     0,
       0,  1068,     0,     0,  1072,  1082,     0,     0,     0,     0,
       0,     0,  1008,     0,   715,   716,   717,   718,   719,   721,
     724,   725,   722,   723,   714,   720,   737,   726,     0,     0,
     731,   730,   732,   733,  1206,   729,     0,     0,   804,   728,
     810,   806,   808,   812,   727,     0,  1182,     0,     0,     0,
       0,  1271,  1277,   628,     0,  1294,  1289,  1303,     0,  1290,
    1306,  1288,  1304,  1299,  1311,  1314,     0,     0,     0,     0,
       0,  1309,  1310,  1313,  1308,     1,     0,  1285,  1286,  1279,
       0,     0,   478,   263,     0,     0,     0,     0,     0,     0,
     372,   373,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   367,     0,   370,     0,     0,   366,   368,   369,
     371,     0,   265,     0,   264,   305,   272,   271,   258,   477,
       0,   362,   374,     0,   376,   383,   388,   394,     0,   403,
     412,   417,   422,   427,   430,   433,   450,     0,   511,   510,
     514,   516,   523,   528,   533,   542,   551,   556,   561,   566,
     569,   572,     0,   260,   295,   296,   297,   298,     0,     0,
       0,     0,     0,   687,   987,     0,   929,     0,   934,     0,
       0,     0,     0,     0,     0,     0,   940,   999,  1004,     0,
     909,  1001,   911,  1006,  1002,   700,     4,   229,   228,   227,
     233,     0,   264,   374,   219,   514,     0,   206,   249,     0,
       0,   248,   255,     0,     0,  1164,  1165,     0,   168,     0,
     169,   170,     0,     0,     0,     0,     0,   172,   246,     0,
       0,     0,     0,    29,    31,   163,   175,   188,     0,   187,
       0,   116,   119,     0,   195,   128,     0,   164,   140,     0,
     167,   183,   196,   199,     0,     0,   264,     0,     0,   176,
       0,  1011,   682,     0,    12,    18,     0,   839,   838,   846,
     840,     0,   842,   844,   767,   851,   850,   250,   256,   247,
       0,     0,   239,   238,   672,   633,   636,   671,   675,   661,
       0,     0,     0,   222,   223,   224,   225,     0,   217,     0,
     780,   773,     0,     0,   770,   777,   772,     0,     0,   783,
     774,     0,     0,   753,   752,     0,     0,     0,     0,     0,
    1008,  1016,     0,  1048,     0,     0,  1267,  1273,     0,  1269,
    1275,  1057,  1171,     0,     0,     0,  1172,   916,     0,   264,
     617,   618,     0,     0,     0,     0,   641,   640,   642,     0,
     754,     0,     0,   692,     0,     0,  1066,   821,     8,   908,
     815,   825,   817,   819,   823,   940,   897,   682,   989,   988,
       0,     0,     0,   921,     0,     0,   920,     0,     0,     0,
    1098,     0,   918,   919,  1009,     0,  1010,     0,     0,  1180,
    1168,  1179,    76,  1177,   718,   719,  1166,   908,   805,   811,
     807,   809,   813,   682,     0,  1181,  1178,  1169,     0,  1183,
       0,  1270,  1276,  1184,     0,     0,     0,     0,     0,     0,
       0,     0,  1265,     0,     0,     0,   726,     0,     0,     0,
     157,  1102,  1103,   729,     0,     0,     0,   264,     0,   374,
       0,     0,   514,   601,   606,     0,  1100,  1188,  1191,  1108,
    1099,  1112,     0,     0,     0,     0,  1210,  1208,  1101,  1114,
       0,  1115,  1106,  1113,     0,  1116,  1207,     0,     0,  1291,
     908,     0,     0,     0,  1301,     0,   897,  1015,   682,     0,
       0,     0,     0,  1277,  1315,     0,     0,   433,     0,     0,
     944,   488,     0,     0,   323,     0,   364,   355,   513,   512,
     503,     0,   350,   498,   351,   499,     0,   886,   876,   884,
     878,   880,   882,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   360,   508,   273,     0,     0,
       0,   790,   786,   788,   792,  1060,     0,   261,     0,   300,
     301,     0,   342,     0,   341,     0,   480,    93,     0,   270,
     479,     0,   313,   314,     0,     0,     0,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   459,     0,     0,
     353,   501,   352,   500,     0,     0,     0,     0,     0,     0,
       0,   395,   534,     0,     0,   393,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   704,     0,   321,   322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   705,   706,     0,     0,     0,  1330,
    1331,     0,     0,     0,   903,     0,     0,     0,   907,     0,
       0,     0,   933,   932,   930,   931,   940,   999,  1004,   910,
     912,  1026,    10,     9,     0,     0,     0,   682,   988,   207,
       0,     0,   264,   206,     0,     0,   858,   852,   854,   856,
       0,     0,     0,    16,    20,     0,   185,   184,   186,     0,
       0,     0,     0,   367,     0,   264,     0,    26,     0,    21,
      28,    24,     0,    25,    23,    22,    30,    32,   190,    83,
     191,   122,   162,     0,     0,     0,     0,   132,     0,     0,
     134,     0,     0,   143,   161,   200,   197,   202,   201,   198,
     203,   115,     0,     0,     0,   908,   748,   177,  1023,     0,
    1019,   682,     0,    11,    17,   738,   924,  1068,     0,     0,
       0,  1012,     0,     0,   173,   165,   192,   181,     0,   180,
       0,   166,   908,   179,     0,   641,   640,   847,   841,   843,
     845,     0,     0,     0,   638,   674,     0,     0,     7,   212,
     208,   769,     0,     0,     0,     0,  1045,  1052,  1053,  1054,
      64,    53,    92,    39,    38,    57,    69,    45,    48,     0,
      74,    56,     0,     0,     0,  1036,  1038,     0,  1035,  1037,
       0,    41,    44,   940,  1009,  1000,  1017,  1005,  1026,  1018,
       0,  1027,  1030,  1047,  1049,  1266,  1272,  1268,  1274,  1051,
    1058,  1055,  1059,   915,   913,   914,  1095,  1077,  1086,   646,
     645,     0,     0,   478,   755,     0,     0,   478,   756,     0,
       0,     0,   970,   908,     0,     0,   682,   988,     0,     0,
       0,   962,     0,     0,     0,     0,     0,  1067,   991,     0,
       0,   990,  1071,  1070,     0,   891,  1094,   894,  1080,  1088,
       0,   890,  1093,   893,  1078,  1087,     0,  1097,  1091,   895,
    1073,  1083,     0,  1092,   896,  1075,  1084,   948,   949,   952,
     951,   950,     0,   953,   955,     0,     0,     0,     0,    77,
       0,  1167,  1185,     0,     0,     0,     0,     0,     0,  1249,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     264,     0,  1100,  1247,  1105,  1107,     0,     0,  1255,  1256,
    1257,     0,  1263,     0,     0,     0,     0,     0,     0,   158,
     144,  1111,  1110,  1109,     0,     0,     0,   607,     0,  1104,
       0,     0,     0,     0,   473,     0,     0,   478,     0,     0,
       0,     0,  1189,  1192,  1194,     0,  1190,  1193,  1195,     0,
    1221,  1117,  1292,  1293,   237,   236,     0,     0,     0,  1016,
       0,     0,  1273,     0,  1275,  1276,     0,     0,  1174,     0,
       0,   798,   264,     0,   502,   800,   794,   796,   802,  1062,
       0,   490,   489,     0,   331,   332,     0,     0,     0,     0,
     339,   340,     0,     0,     0,     0,     0,     0,     0,     0,
     887,   877,   885,   879,   881,   883,   682,   994,   993,     0,
     872,   862,   870,   864,   866,   868,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     507,     0,   259,     0,   791,   787,   789,   793,  1061,     0,
       0,   478,     0,     0,     0,   105,     0,   299,   478,     0,
       0,    94,   478,     0,     0,   481,   312,   308,   346,   483,
     484,   345,   485,   311,     0,     0,   455,   451,   302,   377,
     517,   378,   518,   379,   519,   384,   524,   385,   525,   389,
     529,   390,   530,   397,   536,   398,   537,   396,   535,   408,
     547,   404,   543,   409,   548,   405,   544,   415,   554,   413,
     552,   420,   559,   418,   557,   425,   564,   423,   562,   428,
     567,   431,   570,   597,     0,   613,     0,     0,     0,     0,
     457,   453,   482,   320,   317,     0,   486,   487,   319,     0,
       0,   456,   452,   380,   520,   381,   521,   382,   522,   386,
     526,   387,   527,   391,   531,   392,   532,   401,   540,   402,
     541,   399,   538,   400,   539,   410,   549,   406,   545,   411,
     550,   407,   546,   416,   555,   414,   553,   421,   560,   419,
     558,   426,   565,   424,   563,   429,   568,   432,   571,   598,
       0,     0,     0,     0,   458,   454,     0,     0,  1323,  1326,
       0,     0,  1321,  1332,  1333,     0,     0,   902,   900,   901,
     906,   904,   905,   234,   232,   231,   230,   264,   682,   991,
     241,     0,   207,   240,   127,     0,   125,   859,   853,   855,
     857,     0,   682,     0,    15,    19,     0,   182,  1023,   682,
       0,   139,     0,   137,   859,     0,   264,   682,     0,    27,
      84,   117,   120,   118,   121,   129,   130,   131,   133,   141,
     142,   114,   112,   113,    13,   740,   743,     0,     0,   936,
    1068,     0,     0,     0,  1024,  1020,     0,     0,   739,   908,
     925,  1013,  1014,   908,   193,   194,   178,     0,     0,     0,
       0,   634,   635,   637,     0,     0,   664,   660,     0,     0,
       0,     0,     0,   226,   218,   216,     0,     0,     0,    36,
      37,    75,    54,     0,    55,     0,    63,    61,    72,    67,
      73,    60,    90,    39,    70,    62,    91,    59,    71,    68,
       0,    58,     0,   718,    33,    35,    34,  1039,  1040,     0,
     654,   644,     0,   649,   643,     0,   478,   757,     0,     0,
       0,   988,     0,   960,   971,   972,   965,   963,   964,     0,
     992,   973,     0,     0,   966,     0,     0,     0,  1081,  1089,
    1068,  1079,  1074,  1076,  1085,   959,     0,     0,     0,   956,
     734,   735,   736,   478,     0,     0,  1142,  1152,  1147,     0,
       0,     0,  1143,  1154,  1148,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1246,  1234,     0,  1211,   264,
       0,     0,     0,  1254,  1260,  1261,  1258,  1259,     0,     0,
       0,     0,   145,  1139,  1149,  1144,     0,   159,   604,   602,
       0,     0,     0,   471,   608,   605,   603,   472,   609,     0,
    1017,  1272,  1274,  1175,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   354,   799,   801,   795,   797,   803,
    1063,     0,   491,   330,   326,   493,   494,   495,   329,     0,
       0,   492,   338,   335,     0,   496,   497,   337,     0,     0,
     292,   290,     0,     0,   978,   682,     0,     0,     0,     0,
       0,     0,   996,     0,   995,     0,     0,     0,   873,   863,
     871,   865,   867,   869,     0,   267,     0,   266,   294,     0,
       0,     0,     0,     0,     0,  1337,     0,     0,     0,   359,
       0,   375,   515,   262,   108,   106,   344,   343,    99,   103,
     309,     0,   310,   306,   307,   614,     0,     0,     0,     0,
       0,     0,   318,   315,   316,     0,     0,     0,     0,  1325,
    1324,  1328,     0,     0,     0,  1320,  1319,     0,   988,   218,
       0,     0,   123,   126,     0,     0,     0,     0,     0,  1024,
       0,   135,   138,     0,    14,   478,     0,     0,   749,     0,
     908,   937,  1025,  1021,  1022,   741,   744,   926,   174,   848,
       0,   243,   242,     0,   663,     0,   213,   214,   204,   209,
     210,   220,     0,     0,    51,    46,    49,    52,    47,    50,
      37,    43,    40,    42,     0,     0,  1043,  1044,   653,     0,
     648,     0,   991,   990,   961,   974,   975,   968,   967,   969,
    1065,  1064,     0,   958,   957,    79,  1140,  1150,  1145,     0,
    1141,  1151,  1146,     0,     0,     0,     0,     0,  1250,  1224,
       0,     0,  1223,  1253,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1231,     0,  1212,  1235,  1213,
    1236,     0,     0,     0,  1124,   944,  1124,     0,     0,   155,
       0,     0,     0,   160,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   504,   327,   328,   324,   325,   336,
     333,   334,   291,   888,     0,   993,     0,   976,   979,   980,
     276,   277,     0,   997,   981,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   268,   280,   281,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   509,   348,   347,
     475,   615,   442,   589,   434,   573,   446,   593,   438,   581,
     476,   616,   443,   590,   435,   574,   447,   594,   439,   582,
     444,   591,   436,   575,   448,   595,   440,   583,   445,   592,
     437,   576,   449,   596,   441,   584,  1327,  1329,  1322,   860,
       0,   124,   150,  1025,     0,   136,    86,   938,     0,     0,
     849,     0,     0,     0,     0,     0,     0,   205,     0,   221,
       0,     0,  1041,  1042,  1031,     0,     0,     0,     0,   954,
    1214,  1215,  1218,  1219,  1222,  1252,     0,     0,     0,     0,
       0,     0,     0,  1228,  1237,     0,     0,     0,     0,  1122,
       0,  1119,  1132,     0,  1124,     0,  1124,     0,     0,     0,
       0,   506,   505,   995,   977,   889,   982,   983,   274,   275,
     874,   284,   285,     0,     0,     0,     0,   278,   279,   288,
     289,     0,     0,   293,  1335,  1336,  1334,   861,     0,   742,
     745,   747,   746,     0,     0,   215,   211,     0,  1028,  1033,
       0,     0,     0,     0,     0,     0,     0,  1242,  1226,     0,
       0,  1227,  1239,     0,  1230,  1241,     0,     0,     0,  1124,
       0,  1124,     0,  1124,     0,  1125,     0,     0,     0,   148,
       0,   153,     0,   156,     0,   875,   282,   283,     0,   286,
     287,   171,  1029,  1216,  1217,     0,     0,  1225,  1232,     0,
    1229,  1240,     0,  1136,  1123,     0,     0,     0,  1133,     0,
       0,  1124,  1124,     0,  1124,   147,   146,   151,   149,     0,
       0,   375,   515,   269,     0,     0,     0,  1120,     0,     0,
    1124,  1129,     0,     0,  1126,     0,     0,   154,  1233,     0,
    1137,  1138,  1134,     0,     0,     0,     0,  1124,   152,     0,
       0,  1130,  1131,  1127,     0,  1121,  1135,     0,  1128
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   209,    55,    56,   979,   331,   439,   440,   441,   442,
     443,   444,   445,   446,   993,   994,   995,   996,   997,   998,
     999,  1000,  1001,  1002,  1003,  1004,   256,   257,   447,   448,
      58,   332,   333,   750,   779,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,  2138,  2139,  2140,   461,   644,
     645,   646,   462,   463,   464,   465,  1827,   407,   503,   408,
     504,   409,   505,   506,   871,   410,   411,    59,    60,    61,
      62,    63,   334,   335,   336,   337,   338,  1005,  1006,   339,
     340,   705,   753,  1290,   341,   649,   707,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   738,   833,   651,  1347,   358,   708,   359,   652,   710,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   653,   654,  1131,  1349,   552,   553,   211,    65,   496,
     497,   212,    67,   213,   214,    68,    69,    70,    71,    72,
      73,   215,   118,   216,   262,   936,   937,   217,   218,   219,
      77,    78,    79,    80,    81,   220,   745,  1209,   265,   469,
      83,    84,   486,   487,   881,  1246,   723,  1054,  1055,   124,
      85,   470,    87,   471,   127,   128,   129,   940,   130,   119,
      89,  1103,  1104,  1105,    90,   578,  1237,   473,   580,  1239,
     133,   185,   474,   475,   187,   944,   135,  1023,  1558,  1011,
    1012,  1559,   188,   189,   190,   191,   746,  1210,   224,   225,
     226,   227,   228,   229,   657,   658,  2059,  2060,   659,   660,
     661,    93,   476,   266,    94,    95,   267,   268,   269,   664,
     665,   666,   667,   270,   668,   902,  1642,  1134,   671,   672,
     673,  1135,   675,    96,    97,   373,    98,    99,   100,   101,
     102,   103,   839,  1419,  1420,   840,   841,   374,   375,   376,
     377
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -2030
static const int yypact[] =
{
   37932, -2030, -2030, -2030, -2030,    61, -2030, -2030, -2030, -2030,
   -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030,
   -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030,
     965,   109, -2030, -2030, -2030, -2030, -2030, -2030,    18,   233,
     252,   892,   337, -2030, -2030, -2030, -2030, -2030, -2030, -2030,
   -2030,  2307,  3038, -2030, -2030, -2030,   121, -2030,   264,   892,
     787, -2030,  1124,   312,  1075, -2030,   270, -2030,  1080, -2030,
     376, -2030, -2030, -2030, -2030, -2030,   924, -2030,  1111,   280,
   -2030,   410,  1867, 37540,  1883,   254, 38224, -2030,   434,   439,
   -2030,  1692, 40825, 36228, -2030, -2030, -2030, -2030, -2030, -2030,
   38035, 37241,   578, -2030,   109, -2030, -2030,   337,   337,   590,
     517,   337, 29705,   892, -2030, -2030,   626, -2030,  2307, -2030,
   -2030, -2030,   513, -2030,   551,  1126, -2030, -2030, 38319, -2030,
   -2030,  3038,  2815,  1861,  2155,  2392, 24072, -2030,   562,   222,
     318, 30800, 40450, -2030, 30925, -2030, -2030, -2030,   892, -2030,
    1391,  1331,  1351,   162, 40450, -2030, 40180, 31050, 40450, 31175,
   -2030, 31300, -2030, -2030,   892, -2030, -2030,   949,   568, -2030,
   -2030,  1025, -2030,   312,   612, -2030, -2030, -2030, -2030, -2030,
    1287,  1965,   434,  2815,  1603,  2392, 40825, 40825,   380, -2030,
    1438,   592,   631,   568,  1011,   434,  1441, -2030, 28245,   692,
   -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030,
     729, -2030,   335, -2030,   694, -2030, -2030,   610, -2030,   718,
    2260, 35377,   352,   373, -2030, -2030,   470,   499,   747,   780,
     300,   803, -2030,   300, -2030, -2030, -2030, -2030, -2030, -2030,
   -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030,   852,   881,
   -2030, -2030, -2030, -2030, -2030, -2030,   119,    77, -2030, -2030,
   -2030, -2030, -2030, -2030, -2030, 37736, -2030, 17878,  6864, 41026,
   18016, -2030,   824,   940,  1209, -2030, -2030,   312, 37638, -2030,
   -2030, -2030, -2030, -2030, -2030, -2030,   376,   410, 38794, 40825,
   39076, -2030, -2030, -2030, -2030, -2030,   884,   590,   590, -2030,
   29705,   282, -2030, -2030, 29778, 29851, 29851,   941, 40630, 29705,
   -2030, -2030,  1010,  1020, 40630, 29705,  1044,  1053,  1063,  1078,
    1099, 29924, -2030,  7396, -2030,   337, 25690, -2030, -2030, -2030,
   -2030,  1104, -2030,   133,  1121, -2030, -2030,   109, -2030, -2030,
   12702, -2030,  1534, 28318, -2030,  1132,    52,   271, 29705,   899,
     972,  1123,  1140,  1154,  1248,   185,  1534,  1185,   691, -2030,
    1534, -2030,  1182,   952,  1519,  1047,  1409,  1170,  1195,  1181,
    1334,   191,  1534,   590, -2030, -2030, -2030, -2030,  1223,   236,
   40270,  1246,  1281, -2030, -2030, 28391, -2030, 28464, -2030,   633,
     657,  1311,  1314,  2815,  2341,  2604,   551, -2030, -2030,   903,
   -2030, -2030, -2030, -2030, -2030,  1010,  1104, -2030, -2030, -2030,
   -2030,   764,  1147, -2030,   271, -2030,  1519, 35493, -2030, 24193,
   40180, -2030,   947, 39910, 39170, -2030, -2030,  1333, -2030,   892,
   -2030, -2030,   109, 39358, 38982, 10068, 40540, -2030, -2030,  1068,
    1361,  1361,  1169, -2030,  1362, -2030, -2030, -2030,   174,   796,
     180, -2030, -2030, 30167,  1366, -2030,  1215, -2030, -2030,   853,
   -2030, -2030, -2030,  1371, 30300, 30425,   666,   240,   691, 36434,
   38414, -2030,   434,  1692, -2030, -2030, 36331, -2030, -2030,  1388,
   -2030,   892, -2030, -2030, -2030,  2146, 40630, -2030,   947, -2030,
   30550, 30675,  1393,  1399, -2030,  1398, -2030,  1410, -2030, -2030,
    3602,  1442,  1004, -2030, -2030, -2030, -2030,  1033,   663, 35493,
     728, -2030, 31425, 31550, -2030,   728, -2030, 31675, 31800,   728,
   -2030, 31925, 32050, -2030, -2030,  3038,  3038,  3038, 22291,   903,
    1287,  1965,   903, -2030, 28537,  6864, -2030,   824,  6864, -2030,
     824, -2030, -2030,  3038,  3038,   903, -2030, -2030,  1417,   126,
   -2030, -2030,  1440,  1445, 40000,  1586,  1455,  1477, -2030, 32175,
   -2030, 32300,   560, -2030, 35167, 28610,  3038, -2030,  1633,   729,
   -2030, -2030, -2030, -2030, -2030,   551,  1462,   434,   665,   148,
     234,   918,  1482, -2030, 39640,  1498, -2030, 39730,  1502, 39820,
    1505, 40090, -2030, -2030, -2030,  1321, -2030, 29705,   892, -2030,
   -2030,  1508, -2030, -2030,   949,   568, -2030,  1518, -2030, -2030,
   -2030, -2030, -2030,   434,  1467,   592, -2030, -2030,  1516, -2030,
   18154, -2030,   824, -2030,   202, 28683,  1523,  1536,  1549,    93,
   18292,  1560,   109,  1561,  1564, 18430,  1010,  1828,  1582,  1594,
     109, -2030, -2030,  1104,  1596,  1598,  1600,  1468, 16209,  1534,
   16636, 25763,  1534,  1534, -2030, 16774, 37834, -2030, -2030, -2030,
   -2030, -2030, 18568, 18706, 18844, 18982, -2030, -2030, -2030,   824,
   19120, -2030, -2030, -2030, 19258, -2030, -2030,   337,   337,   590,
     830,   892,  1473,  1605, -2030,   551,   254, -2030,   434,  2815,
   40825, 40825,  6864, -2030, -2030, 38888, 29705,   409,  1611,   426,
   -2030, -2030, 24314,   193, -2030, 13046, -2030, -2030,   879, -2030,
   -2030, 28756, -2030, -2030, -2030, -2030, 40630,  1620, -2030, -2030,
   -2030, -2030, -2030, 35808, 40630, 24451,   109, 35913, 40630, 29705,
     337,   337,   337, 29705, 24572, -2030, -2030, -2030, 13206, 13349,
   13492, -2030, -2030, -2030, -2030,  7234,  1621,   572, 22428, -2030,
   -2030,   212, -2030,   781, -2030, 22565,  1610, -2030, 22702, -2030,
   -2030,  1614, -2030, -2030, 25836,  1615, 29705, -2030, -2030, -2030,
   -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030, 28318,   216,
   -2030, -2030, -2030, -2030, 29705, 29705, 29705, 29705, 29705, 29705,
   29705,   271,  1519, 29705, 29705, -2030, 29705, 28318, 28318, 28318,
   28318, 28318, 29705, 29705, 13635, 28318, -2030,  1618, -2030, -2030,
   25909,  1626, 29705, 28318, 29705, 29705, 29705, 29705, 29705, 29705,
   29705, 29705, 29705, 29705, 29705, 28318, 28318, 28318, 28318, 28318,
   29705, 29705, 13778, 28318, -2030, -2030,   736,   729, 40540, -2030,
   -2030,  9393, 40270, 40270, -2030,  1631,  1643,  1648, -2030,  1650,
    1654,  1656, -2030, -2030, -2030, -2030,   551, -2030, -2030, -2030,
   -2030,  1622, -2030, -2030, 24072, 24072, 35272,   434,   846, -2030,
     689,  1189,  1258, 35493,  1212,  1665,  1669, -2030, -2030, -2030,
    2146, 35598, 39264, -2030, -2030,   109, -2030, -2030, -2030, 36537,
    1666,   109, 35703,  2057, 24709,  1711, 39452, -2030,  1668, -2030,
     824, -2030,   824, -2030, -2030, -2030,   824, -2030,  1674, -2030,
    1056, -2030, -2030,  2271,  2271,  1361,  1361, -2030,  1361,    87,
   -2030,  1361,  1361, -2030, -2030,  1005, -2030,  1371,  1005, -2030,
    1371,  1089, 28829,  2637, 29705,   847, -2030,  1678,   551, 38509,
   -2030,   434,  2815, -2030, -2030,   937,   692, 35377, 30034,   394,
     300, -2030,   300,  3038, -2030, -2030, -2030, -2030,   256, -2030,
     265, -2030,   666, 36434, 24072, -2030, -2030,  1686, -2030, -2030,
   -2030, 40180, 40180, 29705,   109, -2030, 34800,   170, -2030,   475,
     908, -2030, 40180,   109,   880,   109,  1630, -2030, -2030, -2030,
   -2030, -2030, -2030,  1361, -2030, -2030, -2030, -2030, -2030, 36640,
    1512, -2030, 22839, 40926, 22976, -2030, -2030, 16351, -2030, -2030,
   39546, -2030, -2030,   551,  1287, -2030,  1965, -2030,   551, -2030,
   28537, -2030, -2030, -2030, -2030, -2030,   824, -2030,   824, -2030,
   -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030,
    1410,   192,   274,  1679, -2030, 32425, 32550,  1680, -2030, 32675,
   32800, 32925, -2030,   603,   196,   449,  1353,  1569,  1687,  1690,
    1695, -2030,  1675,  1691,  1693,   434,   903,  2392,   148, 38604,
   28902,   665, -2030, -2030, 40360, -2030, -2030,   729, -2030, -2030,
   40360, -2030, -2030,   729, -2030, -2030, 40360, -2030, -2030,   729,
   -2030, -2030, 40360, -2030,   729, -2030, -2030, -2030, -2030, -2030,
   -2030, -2030,  1705,  1708, -2030,  1466,  1716,  1718,   413, -2030,
   23113, -2030, -2030, 19396,  1712,  1713, 19534, 29705, 29705, -2030,
   28975, 29048,  1714,  1720,  1729, 24979,  1732,   109, 25982,  2168,
    1517, 26055, -2030,  1798, -2030, -2030, 26128,  1731, -2030, -2030,
   -2030,  1736,  1739, 26201, 16912,   337,  1743, 29705, 29705,   109,
   -2030, -2030, -2030, -2030, 22017,   826, 28318, -2030,  1524, -2030,
   29705, 13921, 14064, 28318, -2030, 29705, 14207,  1516, 19672, 19810,
   19948, 20086, -2030, -2030, -2030, 20224, -2030, -2030, -2030, 20362,
   -2030, -2030,   590,   590,  1752,  1759, 34924, 35048,   903, -2030,
     903,  6864, -2030,  6864, -2030, -2030,  1755, 28318, -2030, 28318,
     978, -2030,   666,  1760, -2030, -2030, -2030, -2030, -2030,  7234,
    1761,  1610, -2030,  1655, -2030, -2030, 26274,  1660, 29705,  1663,
   -2030, -2030, 26347,  1664, 29705,  1766, 40720, 24072, 38129, 29705,
    1762, -2030, -2030, -2030, -2030, -2030,   434,  1769,  1770,  1764,
    1773, -2030, -2030, -2030, -2030, -2030, 36018, 26420,  1772,  1775,
    1776, 29705,  1767, 36123,  1774,   366,    97,   141,  1779,  1787,
   -2030,  1790, -2030,   109, -2030, -2030, -2030, -2030, -2030, 29705,
     337,   275, 36740, 23250,  1788, -2030, 28318, -2030,   301, 36840,
   23387, -2030,   303, 36940, 23524, -2030, -2030, -2030, -2030,  1207,
    1794, -2030, -2030, -2030, 26493,  7593, -2030, -2030,  1788, -2030,
   -2030, -2030, -2030, -2030, -2030,  1132,  1182,  1132,  1182,    52,
     952,    52,   952,   271,  1519,   271,  1519,   271,  1519, -2030,
   -2030,   899,  1047, -2030, -2030,   899,  1047, -2030, -2030,   972,
    1409, -2030, -2030,  1123,  1170, -2030, -2030,  1140,  1195,  1154,
    1181,  1248,  1334, -2030,    79, -2030, 26566,  1789,  8403,  1796,
   -2030, -2030, -2030, -2030, -2030,  1309, -2030, -2030, -2030, 26639,
    8783, -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030,  1132,
    1182,  1132,  1182,    52,   952,    52,   952,   271,  1519,   271,
    1519,   271,  1519,   271,  1519, -2030, -2030,   899,  1047, -2030,
   -2030,   899,  1047, -2030, -2030,   972,  1409, -2030, -2030,  1123,
    1170, -2030, -2030,  1140,  1195,  1154,  1181,  1248,  1334, -2030,
   26712,  1797,  9712,  1799, -2030, -2030,   109,   109, -2030, -2030,
     753,  1079, -2030, -2030, -2030, 37340, 37440, -2030, -2030, -2030,
   -2030, -2030, -2030, -2030, -2030, -2030, -2030,   648,  2537,   846,
   -2030, 24072,   109, -2030, -2030, 24072, -2030,   634, -2030, -2030,
   -2030,   474,   434,  2815, -2030, -2030,   435,  1678,  1622,   434,
    2815, -2030,  1795, -2030,   998,   511,  1028,  3038,  1802, -2030,
   -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030, -2030,
   -2030,  4374, -2030, -2030, -2030, -2030, -2030, 23661,  1289,   692,
   35377, 21880,   593,   903,   551, -2030,   903, 29705, -2030,   991,
   -2030, -2030, -2030,  1806,  1674,  1610,  1678,  1214, 24072,  1221,
    1259, -2030, -2030, -2030, 33050, 33175,  1807, -2030,  4700, 40540,
   40540, 40540, 40540, -2030, -2030, -2030, 29705,  1793, 29121, -2030,
     824, -2030, -2030, 29194, -2030, 29267, -2030, -2030, -2030,  1547,
    1512, -2030, -2030,  1361, -2030, -2030, -2030, -2030, -2030,  1547,
    1512, -2030, 29340,  4543, -2030, -2030, -2030, -2030, -2030, 20500,
   -2030, -2030,   221, -2030, -2030,   412,  1816, -2030, 33300, 33425,
     434,  1569,  1822, -2030, -2030, -2030, -2030, -2030, -2030,   903,
     665, -2030,  1842,  1848, -2030,  1817,  1840,  1843, -2030, -2030,
   35377, -2030, -2030, -2030, -2030, -2030, 29705,  1858,  1472, -2030,
   -2030, -2030, -2030,   324, 37040, 23798, -2030, -2030, -2030, 20638,
   22017, 22017, -2030, -2030, -2030, 20776, 26785, 17050, 26858, 26931,
   25070, 27004, 17188, 22154,  1854,  1855, 22154, 29705, 29413,  1933,
   27077,  1739, 10594,   337, 22154,  1871, 12149, 24979, -2030,  1568,
   27150, 11660, 27223, -2030, -2030, -2030, -2030, -2030,   112,   337,
    1874,  1324, -2030, -2030, -2030, -2030, 20914, -2030, -2030, -2030,
    1876,  1877,   109, -2030, -2030, -2030, -2030, -2030, -2030, 40180,
   -2030, -2030, -2030, -2030, 27296,  1869, 11237,  1870, 27369,  1872,
   12332,  1873,  1891,  1892, -2030, -2030, -2030, -2030, -2030, -2030,
   -2030, 14350, -2030, -2030, -2030,  1358,  1893, -2030, -2030, 27442,
   12851, -2030, -2030, -2030,  1365, -2030, -2030, -2030, 27515, 25252,
   -2030, -2030,  1894,  1262, -2030,  2806,  1895,  1896,  1897,  1887,
    1898, 24072,  1770, 38699,  1769, 29705, 24072, 29705,  1908, -2030,
   -2030, -2030, -2030, -2030,  1900, -2030, 29486, -2030, -2030,  1901,
    1909, 29705, 29705,  1911,  9130, -2030,   109,   109, 29705, -2030,
   14493, -2030, -2030,   590, -2030, -2030, -2030, -2030, -2030, -2030,
   -2030, 14636, -2030, -2030, -2030, -2030, 28318, 14779, 14922, 28318,
   15065, 15208, -2030, -2030, -2030, 15351, 15494, 15637, 15780, -2030,
   -2030, -2030,   736,  1906,   580, -2030, -2030,   434,   846,  2034,
    1267, 24072, -2030, -2030,  1905,   903,   903,  1361,   903,  1622,
    1924, -2030, -2030,  1922, -2030,   331, 37140, 23935, -2030,   434,
    1027, -2030,   551, -2030, -2030,  1923,  1926, -2030, -2030, -2030,
    1329, -2030, -2030, 34800,  1928, 34800, -2030,  1929, 35493, -2030,
    1934, -2030, 29705, 28537,  2821, -2030, -2030,  2821, -2030, -2030,
   -2030,  2821, -2030, -2030, 21052, 21190, -2030, -2030, -2030, 34800,
   -2030, 34800,   148,   665, -2030, -2030, -2030, -2030, -2030, -2030,
   -2030,  2392, 27588, -2030, -2030, -2030, -2030, -2030, -2030, 21328,
   -2030, -2030, -2030, 21466, 24979, 24797, 24979, 24797, 16493, -2030,
   25161, 17326, -2030, -2030, 22154, 22154, 27661, 24979, 27734, 24888,
    1941, 25325, 27807,   116, 21604, -2030, 29705, -2030, 16493, -2030,
   12149, 24979, 25398, 29559,    34,  1939,    34,   281,  1938, -2030,
     109, 29705, 29705,   109, 28318, 28318, 28318, 28318, 28318, 28318,
   28318, 28318, 15923, 16066, -2030, -2030, -2030, -2030, -2030, -2030,
   -2030, -2030, -2030, -2030,   434,  1770,  1948, -2030, -2030, -2030,
   -2030, -2030,  1342,  1769, -2030,  1949,  1950,  1940,  1945,  1352,
    1951,  1953, 24072, 29705,  7396, -2030, -2030, -2030,  1954,  1955,
    1957,  1959, 29705,  1952,  1971,  1973,  1974, -2030, -2030, -2030,
   -2030, -2030, -2030, -2030, -2030,   426, -2030, -2030, -2030,   426,
   -2030, -2030, -2030, -2030, -2030,   426, -2030, -2030, -2030,   426,
   -2030, -2030, -2030,   426, -2030, -2030, -2030,   426, -2030, -2030,
   -2030,   426, -2030, -2030, -2030,   426, -2030, -2030, -2030, -2030,
    1356, -2030, -2030,  1622, 28318, -2030, -2030, -2030, 29705, 29705,
   -2030, 33550, 33675, 34800, 33800, 33925, 40540, -2030, 40540, -2030,
   25471, 21742, -2030, -2030, -2030, 34050, 34175, 34300, 34425, -2030,
    2033,  2035, -2030, -2030, -2030, -2030, 24979, 29705, 29632,  1939,
   17464, 17602, 25544, -2030, 16493, 25161, 27880, 17740,   109, -2030,
    1050,    28, -2030,   142,    34,  1982,    34,   671,   611,  1976,
    1375, -2030, -2030,  1769, -2030, -2030, -2030, -2030, -2030, -2030,
   -2030, -2030, -2030,  1357,  1975,  1979,  1987, -2030, -2030, -2030,
   -2030,  1980,  1984, -2030, -2030, -2030, -2030, -2030,  1994, -2030,
   -2030, -2030, -2030, 34550, 34675, -2030, -2030, 27953, -2030, -2030,
   24979, 24979, 28026, 25617, 24979, 28099, 24888,  1996, -2030, 24979,
   29705, -2030, -2030, 25161, -2030, -2030,  1988,  1998,    34,    34,
   29705,    34,  2001,    34,  1201, -2030,   288,  1361,   516, -2030,
     579, -2030,  2000, -2030,   109, -2030, -2030, -2030, 29121, -2030,
   -2030, -2030, -2030, -2030, -2030,  1996, 24979, -2030, -2030, 28172,
   -2030, -2030,   337, -2030, -2030,  1376,  2004,  1387, -2030,  1292,
    2005,    34,    34,  2011,    34, -2030, -2030, -2030, -2030,   671,
     638, -2030, -2030, -2030, 24979,   569,  2015, -2030,  2021,  2029,
      34, -2030,  1413,  1422, -2030,  1322,   668, -2030, -2030, 29705,
   -2030, -2030, -2030,  1423,  2036,  2037,  2038,    34, -2030,  2024,
    2040, -2030, -2030, -2030,  1454, -2030, -2030,  2042, -2030
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2030,  2308,   111,  9961, -2030,  2041, -2030, -2030, -2030, -2030,
   -2030, -2030,  1661,  1682,  -987, -2030,  -949,  -967,   164,   167,
    -944,  -914,  -812, -2030,  -685,  -586, -2030, -2030,  1683,  1694,
   -2030,  1920,   769, -2030,  -158,   629,   798, -2030, -2030, -2030,
   -2030,  1696, -2030, -2030, -2030,  -627, -2029,    -6, -2030, -2030,
   -2030, -2030,  1469,  2022,  -115,   -72,   654,  -851, -2030,  -848,
   -2030,  -844, -2030,  1196,  -137,  1323,  -859,   -52,  1904,    25,
    1913,    40,     0, -2030,  1270, -2030,  -197,  7617,  3465, -2030,
    6049, -2030,  -609,  -767,   305,  3622,  1865, -2030,  -332,   -40,
     417,   339, -2030,   418,  -690,  -150,   -21,   -13,   138,   -84,
    9343,  4898,  -285,  9171,  -792,  1804, -2030,   488,  4683,  1884,
    -244,   172,   436,   710,   604,   130,   227,   290,   293,   297,
      91,  5193,  -453,  7400,  -737,   959,  2013, 10739,   -73,  1220,
    -133,  2407, 11316,  8401, -2030, -2030, -2030,   -38,   -59,   -51,
   -2030,  7106, -2030,   713,  2301,   716,  -507,  2588,  9047, -2030,
   11385, -2030, -2030, -2030,   -35,  2661, -2030, -2030,  2054,  3616,
      10, -2030, -2030,  1427,  1777,  1478,  1902,   -80,   -61,  6296,
    8794,  3052,  5799,  -394,  -114,  -258,   179,  -920,    54,  3292,
   -2030, -2030, -1067, -2030,  4103,  -534, -1215,  7759,  -265,  -700,
     -33,   258,   106,  1783,   -92,  -867,  -462,  -906,  -525,  -929,
    -924,   375,   827,  1106,   -37,  1958,  -724,  1480,  -407,  -328,
    -442, -2030,  -124,  -123,  4255,   357,    89,  -835, -2030, -2030,
   -2030,  2115, -2030,  3008,  2126,   -39,  3130,  -110,  1963,  1069,
    1087, -2030, -2030, -2030,   -90,   108, -1574,   189, -2030, -2030,
   -2030,   235, -2030,  2129,   -19,    19,  2123,  1672, -2030, -2030,
   -2030,  2142,  -815,   456, -2030,  -807,   932, -2030, -2030, -2030,
   -2030
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1318
static const yytype_int16 yytable[] =
{
      64,  1248,   271,  1482,   391,   392,   222,   945,  1483,  1024,
     175,   782,   148,  1149,  1434,  1455,  1543,  1435,   397,   507,
     500,  1436,  1495,  1724,   176,   223,  1423,  1252,   949,   490,
     108,   110,   177,   299,  1424,  1538,  1544,  1548,  1599,   106,
    1411,   115,   512,  1356,   517,  1071,   521,   196,   389,   109,
     184,   184,   123,  1537,   280,  1547,  1892,   778,  1539,   140,
    1549,   116,   286,  1272,   149,   287,   152,   390,  1903,   397,
    1279,   805,   491,  1283,   282,   813,   535,   538,   601,   951,
    1765,  1022,   163,   174,   123,   513,   210,   518,  1540,   522,
    1550,   123,   106,    64,  1119,  1413,   536,   539,   394,   783,
      64,    64,   299,   278,   296,  1507,    92,   704,   172,  1329,
     288,  2178,     1,   379,  1557,  1904,   382,   299,   276,  1904,
     599,   299,   148,   173,   704,   285,   297,   298,   210,     1,
     301,   123,   123,   277,   756,  1524,   412,  1395,   104,   111,
     149,   466,   479,  1555,   466,  2131,   299,  1037,   493,  2130,
     495,     1,   869,   495,   479,  1289,   508,   466,   479,   466,
     662,   466,  1273,   498,   524,     1,  2058,  2178,   751,  1280,
     138,  1516,  1284,     1,   149,   908,     2,  1078,   621,   692,
    1084,   910,  1090,   123,  1095,   121,   398,   787,   788,   186,
    1541,   105,  1551,  1560,  1211,     1,   691,   582,   549,    92,
     272,  1355,   803,   616,   602,   175,   289,    92,   831,  -474,
     149,   939,   557,  1274,  1120,   175,   697,  1298,   325,   176,
     163,   569,  1848,  1746,   378,   697,  1038,   177,   614,   176,
     123,   697,   184,   123,  1905,  1072,   681,   398,  2049,     1,
     136,   931,  1906,   600,   985,   184,  1906,   761,   762,   763,
     286,   280,   286,   287,   758,   287,  1079,  1504,  1456,  1085,
     757,  1091,   181,  1096,  2132,   607,  1505,  1747,  2128,   564,
     647,   282,  2133,     1,   678,  1563,  -109,     1,   680,   857,
     565,   789,   790,   874,  2064,  1543,   299,   299,    64,   499,
      64,  2172,  1543,   679,   537,   540,  1543,  1517,     2,  1058,
     695,   909,  -100,     1,  -104,  1544,  1548,   757,   717,   548,
     134,  1291,  1544,  1548,   717,   694,  1544,  1548,  2048,  1561,
     757,     1,   584,   549,  1547,   -82,   617,   804,   684,  1549,
     277,  1547,   -89,   832,  1071,  1547,  1549,   759,     1,  1275,
    1549,   419,   106,  1275,   747,  1849,    -8,   974,  -652,   899,
     901,   903,   905,   582,   112, -1065, -1065,  1291,   835,  1550,
   -1065,   764,   531,     2,  1156,   932,  1550,  1163,  1713,   765,
    1550,   299,   766,   113,   585,   197,   622,   943,   669,   149,
     837,   541,  1457,   909,   186,   549,   198,   549,   137,   395,
     948,   699,   757,   123,   690,   588,   289,   693,   150,   123,
     699,  1564,  -109,  2065,   700,  1675,   699,  1679,   159,   223,
    2173,  2066,   149,  1850,  2128,  1015,     1,   837,  2174,   872,
     508,    52,  1040,   876,   569,  1604,   803,   945,  -100,   887,
    -104,  1015,   888,   837,   876,   895,   837,   420,     1,   145,
    1059,  1060,   421,   831,  1045,  1025,  1049,   858,  1027,  1696,
     585,   -82,  1299,  1301,  1303,  1705,  1506,   181,   -89,   670,
    1677,  1551,  1681,   555,   466,   466,   149,   687,  1551,   935,
     210,   588,  1551,   123,   583,   414,   962,     1,   584,   581,
    1268,   966,  1363,  1365,  1367,   163,   967,  1046,  1745,  1050,
     466,   466,   986,   986,   986,   586,   845,  1492,   849,   587,
     590,   945,   980,   155, -1050,   674, -1050,  1943,   149,   984,
     184,   184,   466,   466,     1,  1500, -1090,   466,   466,     1,
     589,   466,   466,  1071,  1605,   123,   123,   123,  1716,   123,
     883,  1864,   123,  1495,  1580,  1602,  1851,   160,   974,  -647,
    1300,  1302,  1304,   123,   123,   123,  1734,   900,  1556,   149,
     906,  1197,    51,  1743,   837,   495,  1501,  1797,  1502,   466,
     231,   466,   524,     1,  1053,   549,   123,  1022,  1199,   149,
    1364,  1366,  1368,  1813,   299,   587,  1814,   299,   295,   123,
    1191,  1193,     1,  1017,  1077,   299,  1790,  1083,     2,  1089,
    1434,  1094, -1090,  1789,   588,   299,   589,  1436,  1108,  1017,
    1519,  1058,  1793,   691,  -892,  1520,     1,  1695,  1442,   706,
    1423,  1423,   697,  1704,     1,     1,  1451,  1543,  1424,  1424,
     751, -1096,   175,  1842,   939,   591,   706,  1465,  1843,     1,
    1130,   299,  1137,   398,   582,  1249,   176,  1544,  1548,  1802,
    1150,     1,   300,  1026,   254,   385,  1028,   751,   687,  1820,
    1333,     1,  2137,  1846,     2,   751,  1547,   286,   585,  -216,
     287,  1549,   647,   647,   647,   647,     1,  1588,  1826,     1,
    1829,     1,   386,  1591,     1,   751,  1062,    26,  1399,  1592,
     149,  1185,  1831,   387,   939,  1593,   418,   791,  1051,   123,
    2199,  1550,     1,   134,   526,   569,  1182,  1183,   807,   808,
     809,  1270,  1202,  1659,  2008,   939,  2177,  1664,  1016,  1107,
    1666,  1019,  1668,    75,  1811, -1090,  1225,   978,   544,   589,
    2073,   146,   147,  1230,  1240,   549,  1250,  1230,  1240,  -892,
     146,   147,     1,  2141,  1202,  -478,  -478,  -478,   559,     1,
     528,  2137,  1059,  1060,  2137,  1263,  1589,  1305,  1307,  1255,
    1256,  1257,   939,  1791,   380,   852,     1,   525,   414,   584,
    2197,  1286,  1792,  1291,  1594,  1293,   146,   147,  -216,  1291,
     669,   669,   669,   669,  -216,   862,   758,  1369,  1371,   853,
    1337,   146,   147,   587,   146,   147,  1069,   699,   983,  1339,
    1454,  1572,   709,  1551,   758,  2208,   179,  1070,  1192,  1194,
    1195,   690,  1806,  -265,  -265,  -265,    75,  1353,  1403,   709,
     716,  1358,   810,    75,    75,   391,   392,  1405,   554,  1543,
     811,   558,   134,   812,  1067,  1475,  1476,  1292,  1477,     1,
    1955,  1479,  1480,     1,  1509,  1510,  1418,   149,  1421,  1544,
    1548,   837,   837,   837,  1518,   560,   416,   146,   147,  -478,
       1,   670,   670,   670,   670,  1416,  1417,  -478,  1547,  1491,
    -478,  1514,  1942,  1549,   412,  1437,   210,  1949,  1189,   592,
     980,   943,   149,   984,   687,  1813,  1814,  1781,   390,  1782,
     163,  1447,   569,     1,   863,  1150,  1219,  1220,  1221,   569,
     864,  1462,  1464,  1550,  1466,     1,   837,   674,   674,   674,
     674,  1807,   593,  1529,  1515,  1580,     1,  1276,  1562,  1565,
     450,   793,   794,   450,  1277,   141,  1657,   142,  1554,  1073,
       2,  -265,   921,   922,   595,  -265,   450,  1557,   450,  1330,
     450,     2,  2010,   123,   573,   149,  1568,  1751,  2032,   210,
     121,  1341,   123,   397,  1690,  1582,  1583,  1499,   146,   147,
     123,   676,   123,  1503,  -478,  -478,  -478,  1396,   528,  1306,
    1308,  1712,   149,   935,   412,   146,   147,   866,     1,  1407,
     106,   508,   508,   597,   495,  1487,   466,   495,   565,  1569,
     923,     1,   508,  1525,   149,  1527,   797,   798,  2029,  1370,
    1372,   179,    28,    29,     1,  1551,   107,    32,   146,   147,
    1222,   179,   598,    75,    38,  1526,     2,     1,  1223,   696,
     123,  1224,  -478,  -478,  -478,  1936,    32,   104,   795,   796,
    1963,  1173,  1177,   394,    52,  1752,   945,  1334,    43,    44,
       1,     1,   978,  1521,  1847,  1913,   743,  1853,  1522, -1064,
   -1064,   495,   495,   156, -1064,   466,   466,    43,    44,   466,
     466,   466,  -768,   149,  -768,  1400,   123,   123,   792,   821,
     822,   687,   716,  -480,  -480,  -480,   123,  1497,   123,   210,
     549,  2063,   490,   703,   837,   525,  -478,   149,     1,  -478,
     837,  -899,     1,   149,   106,  2098,   837,   817,   818,   149,
     703,  1338,   837,  2083,   149,  1340,  -479,  -479,  -479,   716,
    1342,  1530,  -908,  -908,  1717,  1718,  1022,  -908,   149,   146,
     147,   398,  1817,   647,  -908,   491,   647,  1791,   751,  1404,
     398,  1189,  1017,  1406,  1846,  1130,  1801,  1137,  1408,   416,
     573,   725,  1313,  1315,  -478,  1317,  1639,   527,  -908,  -908,
      26,   726,   687,   385,   136,   146,   147,    32,  2017,  1652,
       1,   527,   134,   981,   647,  1293,   758,   385,  -216,   982,
    1377,  1379,  1381,  1383,  1648,   729,   823,   824,   647,   647,
     647,   647,  2127,  1572,   730,  2105,  2128,  2106,    43,    44,
    2129,  1585,   573,  1281,   731,  -480,   466,   466,   123,   687,
     123,   134,   897,   146,   147,   939,   254,   146,   147,   732,
     837,  2032,   149,   414,   414,   581,  1309,  1311,   153,   837,
     154,   134,     1,  1693,   106,  1321,  1325,  1698,  -479,  1702,
     733,   669,   573,  1707,   669,  1310,  1312,   412,   210,  2134,
    2086,  2136,   755,   450,   450,   939,  1373,  1375,   939,   157,
     677,   158,  2183,  1387,  1391,   960,  1728,   197,   143,   758,
     784,  -928,   144,  1728,  1853,  1374,  1376,   799,   198,   450,
     450,     1,   669,   149,   802,   146,   147,  -216,   724,  -216,
     785,   786,   865,  -216,   728,   758,   669,   669,   669,   669,
     800,   450,   450,  2068,   915,   916,   450,   450,  -927,  1753,
     450,   450,     1,   904,  2165,   801,  2167,   254,  2169,  1671,
     814,  1672,   670,   414,   827,   670,   917,   806,  1969,  1440,
     918,  1683,   919,  1664,   395,   982,  1668,     2,  1580,  2033,
     815,   816,   829,  2170,  1097,  1860,   121,  2128,   450,  1760,
     450,  2171,  1443,  1761,  1819,   828,  2192,  2193,   982,  2195,
     864,  1821,   920,   670,   846,   834,   850,   982,   674,  1098,
     830,   674,   987,   988,   989,  2203,     1,   670,   670,   670,
     670,  -927,  -927,    28,    29,  1099,  -927,  1670,    32,  1019,
    1029,  1031,  2214,  -927,   842,    38,   146,   147,  -216,  1822,
    1022,     2,  1933,  1441,  -216,   982,   758,  2009,   864,   674,
     121,  1022,   494,   864,     1,  1100,  1101,  -927,  -927,    43,
      44,  1322,  1326,   674,   674,   674,   674,    51,   179,   843,
      52,  -927,  -927,  -927,  2189,  1207,  1779,  1780,  2128,   934,
    1783,   149,  2190,   825,   826,   837,   837,    28,    29,  1388,
    1392,  1772,    32,   854,   394,  1761,   855,   149,   743,    38,
    1784,  1437,  1527,  1102,  2206,   412,  1909,  1207,  2128,  2020,
    1910,  1794,  2207,   123,   885,   864,  1652,   857,  1266,  -658,
     123,  -658,  2075,    43,    44,  1803,   149,   123,   864,  1097,
    1607,    51,  2080,  1613,   564,  1097,  2097,  2145,   864,  -657,
    1925,  -657,   864,   864,  1761,   565,   907,  1929,   123,   254,
    1810,  1761,   914,   123,  1098,   924,   123,  2143,  2186,   149,
    1098,  2144,  2128,  1314,  1316,  1847,  1318,   964,   412,  2188,
    1099,  1654,   971,  2128,   466,   466,  1099,  2180,   972,   837,
     837,   837,   837,   973,  1063,  1173,  1177,  1173,  1177,   819,
     820,  1378,  1380,  1382,  1384,  2204,   974,   939,   939,  2128,
    1100,  1101,  1471,  1473,  2205,  2210,  1100,  1101,  2128,  2128,
    1033,   573,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   542,  2027,   543,   546,   414,   543,   466,   466,
     977,   123,     1,  1034,   416,   416,  2217,  1022,  1035,   123,
    2128,   501,  2033,  1041,  1114,   514,   573,  1039,  1597,     1,
     569,  1111,  1598,   543,   198,   573,   758,     2,  1154,  1945,
    1946,  1186,   573,   142,   533,  1042,   121,   743,  1074,   573,
     647,   647,  1660,  1661,  1662,  1285,  1292,     1,     1,  1352,
    1130,     1,   647,  1130,  1080,   858,  1130,  1357,  1086,     1,
    1639,  1092,  1189,  1017,  1130,  1109,  1534,  1130,  1535,  -898,
    1112,  -898,  -898,    28,    29,   758,  1110,  1634,    32,  1030,
    1032,  1840,  1893,  1116,  1022,    38,  1692,  1117,     1,   777,
     573,  1697,  1150,     1,  1701,  1706,     1,     1,  1907,   508,
    1118,  1532,  1670,  1533,   416,  1019,   573,    28,    29,    43,
      44,  1136,    32,   697,   697,  1138,   697,   697,  1139,    38,
     564,   697,   697,   697,   697,     1,   758,  1835,  1896,  1838,
    1836,   565,  1839,  1147,    28,    29,  -898,  2012,  2021,    32,
    2024,  1472,  1474,    43,    44,  1148,    38,  -898,   669,   669,
    1151,   412,  1152,   210,  1153,   395,   412, -1045,   534, -1045,
     669,  1168,  1170,  1187,  2035,  1198,  2037,  1281,  1015,  1227,
      43,    44,  -898,  1269,  1263,   450,  1964,  1965,   581,  1169,
    1171,  2022,   136,  2025,   387,  1528,   751,   751,   751,   751,
     751,   751,   751,   751,  1427,   385,    28,    29,  -898,  -898,
    -898,    32,   291,   294,  1425,  1426,  1428,  2036,    38,  2038,
     414,  1429,  1418,  1430,   414,  -908,  -908,  1431,  1445,  1432,
    -908,   412,  1469,  1444,  1461,   123,   123,  -908,   123,   670,
     670,  1470,    43,    44,  1488,  1508,  -760,  -763,  1576,  1573,
     149,   670,  1574,    52,   450,   450,  2181,  1575,   450,   450,
     450,  -908,  -908,   466,  1577,   466,  1578,  1595,   837,  1596,
     697,   697,   697,   697,   697,   697,   697,   697,  1600,   758,
    1601,  1627,  1610,  1611,  1626,   674,   674,   414,  1861,   466,
    1628,   466,   123,  1630,  1635,  1643,   751,   674,  1975,  1979,
    1644,  1985,  1989,  1645,  1649,   414,  1993,  1997,  2001,  2005,
       1,  1669,    18,    19,  1130,  1130,  1130,  1130,   420,  1673,
     647,  1721,  1684,  1691,  1130,  1130,     1,  1130,  1710,  1130,
    1723,  1228,  1726,  1485,  1736,     2,  1725,  1737,  1738,  1741,
    1744,  1130,    28,    29,  2182,  1748,  1017,    32,  2103,  1749,
    1150,     2,  1750,  1652,    38,  1755,  1762,  1800,  1832,  1768,
     192,   193,  1688,  2061,  1804,  2061,  1771,  1776,  1818,  1778,
     697,  1823,  1511,   926,   929,    28,    29,   416,    43,    44,
      32,    28,    29,  -766,  1854,   468,    32,    38,   468,  1145,
    1857,  2104,   412,    38,   549,   450,   450,    28,    29,   926,
     929,   468,    32,   468,  1855,   468,  -939,  1867,  1871,    38,
    1856,    43,    44,  1858,  1670,  1019,  1859,    43,    44,  1883,
    1863,   926,   929,   400,  1884,  1885,   926,   929,   669,  1890,
     926,   929,  1894,    43,    44,   161,  1908,  1911,  1912,  1915,
    1917,    51,  1919,  1921,    52,   699,   699,   699,   699,   699,
     699,   699,   699,  1922,  1923,  1926,  1932,  1937,  1938,  1939,
    1940,   466,   466,   466,   466,   466,   837,  1952,   837,  1586,
    2007,  1941,  1953,  2011,  1956,   466,   466,   466,   466,  -939,
    -939,    57,  1957,  1962,  -939,  -231,  1130,  2175,  2176,  2014,
    2015,  -939,  2023,  2018,  2026,   647,  2019,   647,  2126,  2028,
     414,   449,  2047,  2062,   449,   414,  2067,  1150,  1652,   670,
    2074,  2076,  2077,  2078,  2093,  -939,  -939,   449,  2079,   449,
    1624,   449,   114,  2061,  2081,  2061,  2082,  2087,  2088,  -939,
    2089,  -939,  2090,  2094,  -984,  2095,  2096,  2110,  2142,  2111,
      57,    18,    19,   466,   466,   699,  2135,   151,  2146,  2148,
    1130,  1130,  2147,  2149,  1130,   674,  1130,  2150,  2151,  1130,
    2157,  2162,  2163,   647,    57,  2168,  2187,    57,  2179,  2191,
     414,    28,    29,   255,    57,  2194,    32,   955,  1652,  2200,
    1150,    57,    57,    38,  1150,  2201,  2215,  2061,  2061,     1,
    2061,   416,  2061,  2202,    57,   416,  1130,   381,   956,   957,
    2211,  2212,  2213,   669,  2216,   669,  2218,    43,    44,    57,
     958,   414,   961,  2196,     2,    51,  1830,   406,  1523,  1150,
    1652,  2185,   406,   255,  1130,   406,   735,  1433,  1719,  1478,
    2061,  2061,   682,  2061,  1513,   255,  1150,    57,   406,   255,
     406,   683,   406,   573,  1808,   736,  1253,   884,  2030,  2061,
    1739,   892,    18,    19,  1261,   290,   727,  2164,   416,   279,
      28,    29,   281,   615,   293,    32,  2061,   255,   255,    28,
      29,   669,    38,   663,    32,   283,   416,  2045,  2006,   406,
       0,    38,    28,    29,   670,     0,   670,    32,     0,     0,
       0,     0,     0,   556,    38,     0,    43,    44,     0,     0,
       0,     0,    57,     1,     0,    43,    44,     0,   468,   468,
       0,     0,   302,     0,     1,   303,   106,   402,    43,    44,
       0,     0,     0,   450,   450,     0,     0,     0,     2,  1633,
     674,   414,   674,     0,   468,   468,     0,     0,     0,     2,
       0,     0,     0,   573,     0,     0,   255,     0,    54,   255,
     255,   643,   670,     0,     0,     0,   468,   468,     0,    57,
       0,   468,   468,     0,     0,   468,   468,     0,     0,    57,
     255,    57,     0,     0,    28,    29,   307,   450,   450,    32,
       0,     0,   308,   309,     0,     0,    38,     0,     0,   255,
       0,    18,    19,     0,     0,   255,   312,     0,   674,     0,
       0,     0,     0,   468,   406,   468,     0,     0,     0,   313,
      43,    44,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    28,    29,     0,   449,   449,    32,     0,   561,     0,
       0,   170,   711,    38,     0,     0,   959,     0,   847,     0,
     851,    54,   325,   326,     0,     0,     0,    66,    54,    54,
     449,   449,  2122,     0,  2125,    28,    29,    43,    44,     0,
      32,    57,     0,     0,     0,    51,   406,    38,   406,     0,
       0,   416,   449,   449,     0,     0,   416,   449,   449,     0,
       0,   449,   449,   483,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,   483,  1815,   743,    57,   483,
     406,    57,     0,   859,   255,    57,    28,    29,     0,     0,
     886,    32,     0,     0,    57,   255,     0,    57,    38,   449,
    2161,   449,     0,     0,     0,     0,   927,   930,     0,     0,
      66,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      66,   416,    43,    44,     0,   406,   406,    66,    66,     0,
      57,    57,   927,   930,   926,   929,     0,   406,   926,   929,
       0,     0,   965,     0,     0,     0,     0,   255,     0,   567,
       0,   406,   406,     0,   927,   930,     0,     0,     0,   927,
     930,   573,   416,   927,   930,     0,     0,     0,     0,   481,
      57,     0,     0,   406,   406,     0,     0,     0,   406,   406,
       0,   481,   406,   406,     0,   481,   611,     0,     0,   643,
       0,     0,     0,     0,     0,     0,   255,     0,  1064,   255,
       0,     0,  1010,     0,     0,     0,   170,     0,    76,     0,
       0,     0,   450,     0,   450,    57,   170,     0,    54,     0,
     406,     0,   406,     0,     0,    57,   406,     0,     0,   721,
       0,    28,    29,     0,     0,   721,    32,     0,   450,     0,
     450,     0,     0,    38,     0,    57,     0,     0,    57,     0,
      57,     0,    57,     0,     0,     0,     0,     0,  1115,    57,
       1,     0,     0,     0,     0,     0,     0,    43,    44,     0,
       0,     0,     0,     0,     0,    51,     0,     0,   866,     0,
       0,    82,   416,     0,     0,     2,     0,   743,     0,   565,
       0,    76,     0,     0,   121,     0,     0,     0,    28,    29,
       0,    76,     0,    32,  1947,    66,  1950,     0,    76,    76,
      38,     0,     0,     0,     0,    66,     0,    66,     0,     0,
    1958,  1960,     0,   643,   643,   643,   643,     0,     0,     0,
       0,    28,    29,     0,    43,    44,    32,   468,   468,     0,
       0,     0,     0,    38,   879,   567,   860,     0,     0,     0,
     484,   255,   255,   255,     0,   879,    57,     0,     0,     0,
       0,     0,   484,   406,    82,     0,   484,    43,    44,     0,
       0,     0,     0,     0,    82,    51,     0,   255,    52,  1484,
       0,    82,    82,     0,   255,   255,   406,     0,   255,   255,
    1226,     0,     0,     0,     0,   406,     0,   567,     0,     0,
     468,     0,     0,     0,     0,     0,    57,   970,     0,   643,
     450,   450,   450,   450,   450,     0,   643,     0,     0,   643,
       0,     0,  1010,   485,   450,   450,   450,   450,     0,  1010,
       0,     0,  1010,     0,     0,   485,     0,   567,     1,   485,
       0,     0,     0,     0,     0,     0,     0,     0,  -478,     0,
     481,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,     0,
       0,   481,     0,     2,     0,     0,     0,     0,     0,   468,
     468,     0,   121,   468,   468,   468,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    76,     0,     0,     0,
       0,     0,   450,   450,     0,     0,    76,     0,    76,    57,
      28,    29,    57,    57,    57,    32,     0,     0,     0,    28,
      29,     0,    38,   481,    32,     0,   449,     0,     0,     0,
       0,    38,     0,     0,     0,   406,   406,    57,     0,     0,
       0,     0,  2084,     0,    57,     0,    43,    44,     0,     0,
       0,  2091,   255,    57,    51,    43,    44,  1228,     0,     0,
      57,     0,     0,   255,     0,   406,    52,    57,     0,    82,
    -478,  -478,     0,     0,     0,     0,     0,  1486,     0,    82,
    -478,    82,     0,     0,     0,     0,     0,     0,     0,  -478,
    -478,  -478,  -478,  -478,     0,   449,   449,     0,     0,   449,
     449,   449,     0,     0,     0,     0,     0,  2099,  2101,     0,
      57,     0,     0,   926,   929,     0,  1512,     0,    57,     0,
     468,   468,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   170,    57,   406,     0,     0,     0,     0,
    1201,   484,    57,    57,     0,     0,     0,   406,     0,     0,
       0,     0,   484,    57,  1234,  1244,     0,     0,  1234,  1244,
       0,     0,     0,     0,     0,     0,     0,   926,   929,     0,
       0,     1,  1201,   643,   255,   643,     0,     0,     0,     0,
       0,   255,    86,     0,     0,     0,  1010,  1010,  1010,     0,
       0,     0,     0,     0,     0,     0,     2,   927,   930,     0,
       0,   927,   930,     0,   484,   121,     0,     0,     0,     0,
       0,     0,     0,  1587,   880,     0,   406,   406,     0,     0,
     406,   406,   406,     0,     0,   880,     0,     0,     0,     0,
       0,     0,    66,     0,    86,     0,   449,   449,     0,     0,
      57,   406,    28,    29,     0,    57,     0,    32,     0,     0,
       0,    57,     0,     0,    38,     0,     0,    57,     0,     0,
       0,     0,     0,    57,  1625,    86,    86,     0,     0,     0,
       0,     0,     0,    86,     0,    86,   567,   880,    43,    44,
       0,   643,    86,    86,   643,     0,    51,   643,     0,    52,
       0,     0,     0,     0,  1010,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   567,  1450,    86,    86,     0,     0,     0,     0,     0,
     567,     0,     0,  1450,     0,   643,     0,   567,     0,     0,
       0,     0,     0,     0,   567,     0,     0,     0,     0,   643,
     643,   643,   643,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   406,   406,     0,
       0,     0,   255,     0,   255,    86,     0,     0,     0,     0,
       0,    57,  1720,     0,     0,     0,     0,     0,     0,     0,
      57,     0,     0,     0,     0,   567,     0,     0,     0,     0,
       0,     0,     0,     0,  1740,     0,     0,   255,   406,    57,
       0,   567,     0,     0,     0,     0,   619,   623,     0,     0,
       0,     0,    86,    76,     0,    86,     0,   255,   481,     0,
       0,     0,    88,     0,   255,     0,     0,     0,     0,   481,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   611,     0,   255,   643,     0,     0,    86,   468,   468,
     255,   643,     0,     0,   255,   643,  1010,  1010,     0,     0,
      86,     0,     0,  1010,  1010,     0,     0,  1010,  1010,     0,
      86,     0,    86,     0,   131,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   468,   468,   164,   182,   195,     0,     0,     0,
       0,     0,     0,   233,     0,    88,     0,     0,     0,     0,
       0,     0,    88,    88,     0,     0,     0,     0,   620,   624,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   195,   399,   401,   403,   404,     0,     0,
       0,     0,     0,   472,   449,   449,   472,     0,     0,     0,
       0,     0,     0,     0,     0,    86,     0,     0,     0,   472,
       0,   472,     0,   472,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    57,    57,     0,   484,
       0,     0,     0,     0,     0,   532,   401,   403,     0,     0,
     484,     0,   406,     0,     0,     0,   406,    86,   449,   449,
     926,   929,     0,   926,   929,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   926,   929,   926,   929,  1682,     0,
    1816,     0,   562,   577,     0,     0,     0,  1685,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   611,   643,     0,
       0,    57,     0,     0,     0,     0,   927,   930,     0,     0,
       0,  1010,   880,   619,     0,     0,   619,  1732,     0,   406,
       0,     0,     0,   880,  1732,   406,   406,   613,     0,     0,
      57,    57,    57,    57,     0,     0,     0,     0,     0,     0,
     182,     0,   926,   929,     0,     0,     0,    86,    86,    86,
     688,    86,    88,     0,    86,     0,     0,     0,     0,     0,
     927,   930,     0,     0,     0,    86,    86,    86,     0,     0,
       0,     0,     0,   975,     0,  -673,     0,     0,     0,   406,
     406,     0,     0,     0,     0,     0,    86,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   468,     0,   468,
    -673,    57,     0,     0,     0,     0,     0,     0,     0,  -673,
    -673,     0,     0,     0,     0,   255,   643,     0,     0,     0,
       0,   643,   643,   468,     0,   468,     0,     0,  1010,  1010,
       0,     0,     0,     0,   643,   620,     0,   643,   620,     0,
     619,   623,  1174,  1178,     0,   643,  -673,  -673,     0,     0,
       0,  -673,     0,     0,     0,   399,   401,   403,  -673,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     619,     0,   221,     0,     0,     0,     0,     0,     0,   867,
      57,     0,  -673,  -673,     0,     0,   472,     0,     0,     0,
    -673,     0,     0,  -673,     0,     0,   976,   131,   974,  -673,
       0,     0,     0,     0,   342,     0,     0,     0,  1948,     0,
    1951,    86,     0,   449,   221,   449,     0,    86,     0,     0,
       0,     0,   417,     0,  1959,  1961,   472,   472,   413,     0,
       0,   941,   406,     0,    57,   952,     0,   406,   472,   449,
       0,   449,   509,     0,     0,     0,     0,   164,     0,     0,
       0,     0,   472,   472,     0,    57,     0,     0,     0,     0,
       0,     0,   620,   624,  1175,  1179,     0,     0,   567,     0,
       0,   867,     0,     0,   472,   472,     0,     0,   781,   472,
     472,     0,     0,   472,   472,     0,     0,   195,   195,   195,
     413,     0,   620,     0,     0,   468,   468,   468,   468,   468,
       0,     0,   406,     0,     0,   195,   195,     0,     0,   468,
     468,   468,   468,     0,     0,     0,     0,   255,   643,     0,
       0,   472,     0,   472,     0,     0,  1056,     0,  1065,     0,
    1010,  1010,     0,     0,   406,     0,   406,     0,     0,    57,
       0,     0,     0,   403,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     406,     0,   406,     0,     0,     0,     0,     0,   567,     0,
       0,     0,     0,     0,     0,     0,     0,   468,   468,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   413,     0,     0,   643,   643,   712,   714,     0,
       0,   413,     0,     0,     0,     0,     0,   413,     0,     0,
       0,   449,   449,   449,   449,   449,    86,     0,   342,     0,
       0,     0,     0,     0,     0,   449,   449,   449,   449,     0,
       0,     0,     0,     0,     0,   413,  2085,     0,     0,     0,
     413,     0,     0,     0,     0,  2092,     0,     0,     0,     0,
       0,  1190,     0,     0,     0,    86,     0,   688,     0,     0,
       0,     0,     0,   406,     0,   406,   838,     0,     0,     0,
       0,     0,     0,     0,     0,    86,     0,   413,     0,   413,
       0,     0,     0,     0,     0,  1236,     0,     0,     0,  1236,
       0,     0,     0,   449,   449,     0,     0,     0,     0,     0,
       0,  2100,  2102,     0,     0,   873,   509,   867,     0,     0,
     882,   413,     0,   927,   930,     0,   927,   930,     0,   889,
       0,     0,   896,     0,     0,     0,     0,   927,   930,   927,
     930,     0,   406,   406,   406,   406,   406,    57,     0,    57,
       0,     0,     0,     0,     0,     0,   406,   406,   406,   406,
       0,     0,     0,     0,     0,     0,   947,     0,     0,     0,
       0,     0,   963,     0,     0,     0,     0,     0,     0,     0,
    1142,     0,     0,     0,     0,     0,     0,     0,    86,    86,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1608,     0,     0,  1614,   927,   930,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   567,     0,     0,     0,
       0,     0,     0,     0,   406,   406,     0,     0,     0,     0,
     413,     0,     0,     0,     0,     0,     0,     0,  1438,     0,
       0,     0,  1655,     0,     0,   867,     0,     0,     0,     0,
     221,     0,   164,   867,  1452,     0,  1174,  1178,  1174,  1178,
     221,  1459,     0,     0,   867,     0,  1467,   413,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   619,
     221,   619,     0,   221,     0,   221,     0,   221,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   342,
       0,     0,     0,     0,     0,   131,     0,     0,     0,  1288,
       0,     0,     0,     0,  1496,     0,     0,     0,     0,   577,
      86,     0,    86,  1609,     0,   131,  1615,   413,     0,     0,
       0,     0,     0,     0,     0,   941,     0,     0,     0,     0,
       0,     0,  1320,  1324,  1328,  1332,  1336,     0,   472,  1345,
       0,     0,     0,     0,     0,  1288,     0,     0,   401,     0,
       0,     0,     0,     0,  1656,     0,     0,     0,     0,     0,
    1386,  1390,  1394,  1398,  1402,     0,     0,  1345,  1175,  1179,
    1175,  1179,   941,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   413,     0,
       0,   620,     0,   620,  1203,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   472,   472,     0,
       0,   472,   472,   472,     0,     0,     0,     0,  1570,   399,
       0,   342,     0,     0,     0,   342,  1259,     0,     0,   403,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     413,     0,     0,   656,     0,     0,     0,   413,     0,     0,
     413,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,     0,     0,     0,     0,     0,     0,     0,     0,
     342,     0,     0,     0,     0,     0,   413,   413,   413,   413,
     413,   413,   413,     0,     0,   413,   413,     0,   413,   413,
     413,   413,   413,   413,   413,   413,     0,   342,     0,     0,
       0,     0,     0,     0,     0,   342,   413,   413,   413,   413,
     413,   413,   413,   413,   413,   413,   413,   413,   413,   413,
     413,   413,   413,   413,     0,   342,     0,   838,   838,   838,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   472,   472,
     417,   417,   221,     0,     0,     0,   413,   413,     0,     0,
       0,     0,     0,  -478,  -478,     0,     0,     0,     0,     0,
       0,   867,     0,  -478,     0,     0,     0,     0,  -478,  -478,
    -478,     0,  -478,  -478,  -478,  -478,  -478,     0,   867,    86,
    1715,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1236,     0,
       0,     0,   898,     0,  -899,  1236,     0,  -899,  -899,  -899,
       0,  -899,  -899,     0,   413,  1490,   413,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     417,     0,     0,     0,     0,     0,   413,   509,   509,     0,
       0,     0,     0,  1631,     0,   413,     0,     0,   509,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -899,     0,
       0,     0,     0,     0,  -899,  -899,  -899,     0,  1868,  1872,
       0,  1658,     0,    86,   413,     0,   413,  -899,  1665,     0,
       0,  1608,     0,     0,  1614,     0,     0,     0,     0,     0,
       0,  -899,  1655,     0,     0,  -899,  -899,  -899,  -899,  -899,
    -899,  -899,  -899,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1345,     0,  1345,     0,  -899,  -899,     0,  -899,
    -899,  -899,     0,     0,  -899,  -899,     0,  -899,  -899,  -899,
    -899,  1288,     0,     0,     0,   221,     0,  1288,     0,     0,
     221,     0,   413,     0,     0,     0,  1590,     0,     0,     0,
       0,  1824,  1590,  -662,     0,     0,     0,     0,   221,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -662,     0,
    1787,     0,   413,  1132,     0,     0,     0,  -662,  -662,     0,
    1869,  1873,     0,   413,     0,  1796,     0,     0,     0,     0,
       0,     0,   399,   624,     0,     0,   624,     0,     0,   195,
       0,     0,     0,     0,   624,   656,   656,   656,   656,   342,
     342,     0,     0,     0,  -662,  -662,     0,     0,     0,  -662,
    1809,     0,   577,     0,     0,     0,  -662,     0,     0,     0,
       0,     0,     0,     0,     0,   360,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   472,   472,     0,     0,
    -662,  -662,     0,     0,     0,     0,     0,     0,  -662,   415,
       0,  -662,     0,     0,  1825,     0,   974,  -662,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   417,   221,     0,     0,     0,     0,   413,
       0,   413,     0,     0,     0,     0,     0,     0,     0,     0,
     472,   472,     0,   399,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   413,     0,     0,     0,     0,     0,     0,
       0,   415,   577,     0,     0,  1133,     0,     0,     0,     0,
       0,   413,  1868,  1872,     0,   413,     0,     0,   342,     0,
       0,     0,   413,     0,    86,     0,   413,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1172,
    1176,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   415,     0,     0,     0,     0,   713,   715,
       0,     0,   415,     0,     0,     0,     0,     0,   415,     0,
       0,     0,     0,     0,     0,     0,     0,  1934,     0,   360,
     357,     0,     0,     0,   624,   624,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   415,     0,     0,     0,
       0,   415,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   838,   838,     0,     0,     0,     0,     0,  1498,     0,
       0,     0,     0,     0,     0,     0,     0,   417,     0,     0,
       0,   417,     0,   413,     0,     0,     0,   413,   415,     0,
     415,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   415,     0,     0,     0,     0,     0,     0,   413,
       0,     0,     0,     0,     0,   472,     0,   472,     0,   413,
     867,     0,     0,     0,   417,     0,     0,     0,     0,     0,
     413,     0,     0,     0,     0,   417,  1828,   417,  1828,     0,
       0,   472,     0,   472,     0,     0,     0,     0,   413,     0,
     342,     0,     0,   403,     0,   413,     0,   413,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   650,     0,
       0,     0,     0,     0,   413,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   415,     0,     0,     0,     0,   656,     0,     0,   656,
       0,     0,     0,     0,   754,     0,  1968,   413,  1132,     0,
       0,  1971,  1973,  1977,  1981,  1983,  1987,     0,     0,     0,
    1991,  1995,  1999,  2003,     0,     0,     0,     0,   415,     0,
       0,     0,     0,     0,     0,     0,     0,   656,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   656,   656,   656,   656,     0,     0,     0,     0,     0,
     360,     0,     0,     0,     0,   509,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   372,     0,     0,   415,     0,
       0,     0,     0,   472,   472,   472,   472,   472,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   472,   472,   472,
     472,     0,     0,     0,     0,     0,     0,   417,     0,   221,
       0,     0,   417,   413,     0,     0,     0,   413,   413,   413,
       0,     0,     0,     0,     0,     0,     0,     0,   342,     0,
       0,     0,     0,   413,   413,     0,     0,     0,  1606,     0,
     342,  1612,     0,     0,     0,     0,     0,     0,     0,   415,
    1629,     0,     0,     0,     0,  1204,     0,     0,     0,   413,
     413,   551,   413,   413,     0,   472,   472,   413,   413,   413,
     413,     0,     0,     0,     0,     0,     0,   417,     0,  1653,
       0,     0,   360,   413,     0,     0,   360,  1260,     0,     0,
       0,     0,     0,  1172,  1176,  1172,  1176,     0,     0,   413,
       0,   415,  1021,     0,     0,     0,     0,     0,   415,     0,
       0,   415,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   413,     0,     0,     0,     0,     0,
       0,   360,     0,     0,     0,     0,     0,   415,   415,   415,
     415,   415,   415,   415,     0,     0,   415,   415,     0,   415,
     415,   415,   415,   415,   415,   415,   415,     0,   360,     0,
       0,     0,     0,     0,     0,  1106,   360,   415,   415,   415,
     415,   415,   415,   415,   415,   415,   415,   415,   415,   415,
     415,   415,   415,   415,   415,     0,   360,     0,     0,   372,
       0,     0,     0,     0,     0,     0,     0,     0,   650,     0,
       0,     0,     0,   342,   342,     0,   413,   413,   413,   413,
     413,   413,   413,   413,     0,     0,     0,   415,   415,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     650,   650,   650,   650,     0,     0,     0,     0,   417,     0,
       0,     0,     0,     0,   413,   413,     0,     0,   551,     0,
     551,     0,     0,     0,   413,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   415,     0,   415,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1254,     0,     0,
       0,  1258,     0,     0,     0,     0,   413,     0,     0,     0,
     413,   413,   417,     0,   417,     0,     0,   415,     0,     0,
       0,     0,     0,     0,     0,     0,   415,     0,     0,     0,
       0,     0,   754,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1297,     0,     0,     0,
       0,     0,     0,     0,     0,   415,     0,   415,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1351,     0,     0,     0,     0,   754,     0,
       0,  1362,     0,   656,   656,     0,     0,     0,     0,     0,
       0,  1009,     0,  1132,     0,  1132,   656,     0,     0,   656,
       0,  1415,     0,     0,     0,     0,     0,   656,     0,     0,
    1132,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   342,   415,     0,     0,     0,     0,   551,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     342,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     372,     0,     0,   415,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   415,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   551,     0,
       0,   342,     0,     0,     0,     0,     0,     0,     0,     0,
     360,   360,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   126,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1866,  1870,     0,     0,     0,
       0,     0,     0,     0,     0,  1879,     0,  1882,  1606,     0,
       0,  1612,   180,   126,     0,     0,     0,     0,     0,  1653,
     232,     0,  1895,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     415,     0,   415,     0,     0,     0,     0,     0,  1021,     0,
       0,     0,   372,     0,     0,     0,   372,     0,     0,     0,
     126,   126,     0,     0,   415,     0,     0,     0,     0,     0,
       0,  1009,     0,     0,     0,     0,     0,     0,  1009,     0,
       0,  1009,   415,     0,     0,     0,   415,     0,     0,   360,
       0,     0,     0,   415,     0,     0,     0,   415,     0,     0,
       0,   372,     0,     0,     0,     0,     0,  1132,  1132,  1132,
    1132,     0,   530,  1132,     0,     0,     0,   656,   656,     0,
    1132,     0,  1132,     0,     0,     0,     0,     0,   372,     0,
       0,     0,     0,     0,  1132,     0,   372,     0,     0,     0,
       0,   650,     0,     0,   650,     0,     0,     0,     0,     0,
       0,     0,     0,   650,     0,     0,   372,     0,     0,   594,
       0,     0,   596,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1650,  1651,     0,     0,     0,
       0,     0,   650,     0,  1297,     0,     0,     0,  1663,     0,
       0,  1362,     0,  1667,   126,     0,   650,   650,   650,   650,
       0,     0,     0,     0,     0,     0,     0,   180,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   754,     0,     0,     0,     0,     0,
     754,     0,     0,     0,   415,  1009,     0,   551,   415,  2040,
    2041,  2042,  2043,     0,     0,  2044,     0,     0,     0,  1866,
    1870,     0,  1879,     0,  1882,     0,     0,     0,     0,  1132,
       0,     0,     0,     0,     0,     0,  2053,     0,  1132,     0,
    1132,     0,     0,     0,     0,     0,   551,     0,     0,     0,
     415,     0,     0,     0,  1757,     0,     0,     0,     0,     0,
     415,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     467,   415,   126,   467,     0,  1009,     0,  1009,     0,     0,
       0,     0,     0,     0,     0,     0,   467,     0,   467,   415,
     467,   360,     0,  1132,  1132,     0,   415,  1132,   415,  1132,
       0,     0,  1132,     0,     0,     0,  1132,     0,     0,     0,
       0,     0,     0,     0,   126,   415,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1132,
       0,     0,     0,   551,     0,     0,     0,     0,     0,     0,
       0,     0,   232,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1132,   415,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2044,     0,  1009,     0,     0,     0,     0,     0,     0,
    2121,     0,  2124,     0,   551,     0,     0,     0,     0,   648,
       0,     0,     0,     0,   126,   126,   126,     0,  1014,     0,
       0,   596,     0,     0,     0,     0,     0,     0,     0,     0,
     372,   372,   126,   126,   126,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   126,     0,  2153,  2154,     0,     0,  2121,
       0,  2124,     0,     0,  2158,     0,     0,     0,  2160,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   415,     0,     0,     0,   415,   415,
     415,  2160,     0,     0,     0,     0,     0,     0,     0,   360,
       0,     0,   551,     0,   415,   415,  1021,     0,   396,     0,
       0,   360,     0,     0,     0,     0,     0,     0,     0,  2198,
       0,     0,     0,     0,   551,     0,     0,     0,     0,     0,
     415,   415,     0,   415,   415,     0,     0,  1021,   415,   415,
     415,   415,     0,     0,     0,     0,  1009,     0,     0,   372,
       0,     0,     0,  1009,   415,     0,     0,  1009,     0,   396,
       0,     0,     0,     0,     0,     0,     0,     0,   232,     0,
     415,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   650,   650,
       0,     0,     0,   467,   467,   415,     0,   575,   650,     0,
     650,   650,     0,     0,   650,     0,     0,     0,     0,     0,
       0,     0,   650,     0,     0,   650,     0,     0,     0,   467,
     467,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   467,   467,     0,     0,     0,   467,   467,     0,     0,
     467,   467,     0,     0,     0,     0,     0,  1007,     0,     0,
       0,     0,     0,     0,   685,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   360,   360,     0,   415,   415,   415,
     415,   415,   415,   415,   415,     0,     0,     0,   467,     0,
     467,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1021,   415,   415,     0,     0,     0,
       0,     0,     0,     0,     0,   415,  1966,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1757,
       0,     0,     0,     0,  1663,     0,     0,  1667,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   648,
    1009,     0,     0,     0,     0,     0,     0,     0,     0,   856,
     551,     0,     0,   126,     0,   861,     0,   415,     0,     0,
       0,   415,   415,     0,     0,     0,     0,     0,     0,     0,
       0,   648,   648,   648,   648,     0,     0,     0,     0,     0,
       0,   372,     0,     0,     0,     0,  1009,     0,  1009,     0,
       0,  1021,   126,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1021,     0,     0,  1009,     0,     0,     0,   594,
       0,   596,   126,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   938,     0,     0,     0,     0,
       0,     0,   650,   650,   650,   650,     0,     0,   650,     0,
       0,     0,   650,   650,     0,   650,     0,   650,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1007,  1009,   650,
       0,     0,     0,     0,  1007,     0,     0,  1007,     0,  2069,
    2070,     0,     0,   360,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1013,     0,     0,  1018,     0,
       0,   360,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1013,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   126,   126,     0,     0,     0,
       0,     0,   575,     0,     0,   618,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   575,     0,     0,     0,     0,
       0,     0,   360,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,     0,     0,   551,     0,
     551,     0,     0,     0,     0,     0,     0,     0,  1021,   372,
     246,     0,     0,     0,   551,   551,     0,     0,    28,    29,
       0,   372,     0,    32,   650,     0,     0,     0,     0,   247,
      38,   248,     0,   650,     0,   650,     0,     0,     0,     0,
       0,     0,   467,   467,   249,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,   250,   251,   252,   253,
     206,   207,     0,     0,     0,   685,     0,   594,     0,   596,
       0,   685,   254,     0,     0,     0,     0,     0,     0,     0,
    1009,     0,     0,     0,     0,  1021,     0,     0,   650,   650,
       0,     0,   650,     0,   650,     0,     0,   650,     0,     0,
       0,   650,     0,     0,     0,   467,     0,     0,  2166,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1021,     0,     0,     0,
       0,  1007,     0,  1007,   650,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   650,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   467,   467,     0,  2209,   467,   467,
     467,     0,     0,     0,   372,   372,    74,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   551,     0,     0,     0,
       0,     0,     0,     0,     0,   551,     0,   117,     0,  1007,
       0,     0,   648,     0,     0,   648,     0,     0,     0,     0,
       0,     0,     0,     0,   648,     0,     0,     0,   685,     0,
       0,     0,     0,     0,     0,  1458,     0,     0,     0,   178,
       0,     0,     0,     0,     0,     0,     0,     0,   261,    74,
       0,     0,     0,   648,     0,     0,    74,    74,     0,     0,
       0,   551,   551,     0,     0,     0,     0,   648,   648,   648,
     648,     0,     0,     0,   383,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   467,   467,     1,  1494,     0,
       0,     0,     0,   575,     0,     0,     0,     0,   482,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   938,
     482,     0,     2,     0,   482,     0,   126,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,   261,   261,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,   938,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,  1007,   372,     0,     0,     0,   572,     0,  1007,
       0,     0,     0,  1007,    40,     0,     0,     0,     0,     0,
       0,   372,     0,     0,    43,    44,    45,    46,    47,    48,
       0,     0,    51,   396,     0,   866,     0,     0,     0,     0,
       0,     0,   575,     0,   575,     0,   565,     0,     0,     0,
     126,   610,     0,     0,   261,   261,   261,     0,     0,     0,
       0,     0,     0,     0,   178,     0,     0,     0,     0,     0,
       0,     0,   372,     0,   178,   261,    74,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,   720,     0,     0,     0,     0,     0,
     720,     0,     0,     0,     2,     0,     0,     0,     0,   742,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,    27,     0,     0,     0,     0,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     311,   405,    38,    39,   685,     0,   685,     0,     0,     0,
       0,     0,     0,     0,   313,     0,    40,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,    45,    46,
      47,    48,     0,     0,   322,     0,     0,   323,   737,   324,
       0,     0,     0,   572,     0,     0,     0,   325,   326,   878,
     327,   328,   329,   330,     0,     0,  1007,     0,     0,     0,
     878,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   467,   467,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   572,     0,     0,     0,     0,
       0,     0,  1007,     0,  1007,     0,     0,     0,     0,     0,
       0,     0,   969,     0,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   572,     0,   467,   467,     0,
       0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   261,     0,     0,     0,     0,     0,
       0,   261,     0,     0,   261,     0,     0,     0,     0,     0,
       0,   126,     0,     0,  1007,     0,     0,     0,   307,   648,
     648,     0,     0,     0,   308,   309,   310,     0,     0,   648,
     655,   648,   648,     0,     0,   648,     0,   311,   312,     0,
       0,     0,     0,   648,     0,     0,   648,     0,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,  1164,   324,     0,     0,  1165,
       0,     0,     0,   740,   325,   326,  1764,   327,   328,   329,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1146,     0,     0,     0,     0,     0,   685,
       0,     0,     0,     0,     0,     0,  1799,     0,     0,    91,
       0,     0,     0,     0,     0,     0,     0,     0,   261,   261,
     261,   261,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1458,     0,   575,     0,     0,  1812,
       0,     0,  1018,     0,     0,     0,   261,   261,   261,     0,
       0,   178,     0,     0,     0,     0,     0,     0,  1206,     0,
     120,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   261,     0,     0,     0,     0,     0,     0,  1233,
    1243,   742,     0,  1233,  1243,   740,     0,     0,     0,     0,
    1206,     0,   183,   132,     0,     0,     0,   230,     0,     0,
       0,  1265,    91,     0,   261,     0,  1007,     0,     0,    91,
      91,   261,     0,     0,   261,     0,     0,   856,     0,     0,
       0,     0,   467,     0,   467,   575,     0,   384,     0,     0,
       0,     0,     0,     0,     0,     0,   575,     0,     0,     0,
     393,     0,     0,     0,     0,     0,     0,     0,   467,     0,
     467,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   648,   648,   648,   648,     0,     0,   648,
       0,     0,     0,   648,   648,     0,   648,     0,   648,     0,
       0,   529,     0,   752,   572,     0,     0,     0,     0,     0,
     648,     0,     0,     0,   545,     0,     0,     0,     0,     0,
     780,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   572,
     579,     0,     0,     0,     0,     0,     0,  1449,   572,     0,
       0,     0,     0,     0,     0,   572,     0,     0,  1449,   117,
     742,     0,   572,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1144,     0,   183,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   689,     0,    91,
       0,  1162,     0,   572,     0,     0,     0,     0,     0,     0,
       0,     0,   655,   655,   655,   655,     0,     0,     0,   572,
     467,   467,   467,   467,   467,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   467,   467,   467,   467,     0,     0,
       0,   685,   685,     0,  2013,   648,     0,     0,     0,     0,
       0,     0,     0,     0,   648,     0,   648,     0,   261,   261,
     261,   740,     0,     0,     0,     0,   610,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1162,
       0,     0,     0,     0,     0,     0,     0,     0,  1013,     0,
       0,     0,   467,   467,     0,     0,     0,     0,     0,   648,
     648,     0,     0,   648,     0,   648,  1295,     0,   648,     0,
       0,     0,   648,     0,     0,     0,   868,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1348,   648,     0,     0,     0,     0,
       0,     0,  1360,     0,     0,     0,   261,     0,     0,   261,
       0,     0,   261,     0,     0,     0,     0,     0,   942,     0,
       0,   950,  1412,   648,     0,  1146,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1141,     0,     0,     0,     0,     0,     0,     0,
     261,     0,     0,     0,     0,     0,     0,     0,   868,     0,
       0,     0,     0,     0,   261,   261,   261,   261,     0,     0,
       0,     0,     0,     0,   132,   132,   132,     0,     0,     0,
       0,     0,     0,     0,   740,     0,     0,   261,     0,   261,
       0,     0,   132,   132,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1687,     0,     0,     0,     0,
       0,     0,     0,  1057,     0,  1066,     0,     0,     0,     0,
       0,     0,   610,     0,     0,     0,  1068,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1731,     0,     0,     0,     0,     0,     0,  1731,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   545,     0,     0,     0,     0,     0,   261,   261,
       0,   752,     0,     0,     0,   261,   261,     0,     0,   261,
     261,     0,     0,     0,     0,  1296,     0,     0,     0,     0,
       0,     0,     0,     0,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,  1319,  1323,  1327,  1331,  1335,     0,
       0,  1344,  1350,     0,     0,     0,     0,   752,     0,     0,
    1361,     2,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1385,  1389,  1393,  1397,  1401,  1188,     0,  1344,
    1414,     0,     0,     0,   689,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,  1238,     0,     0,     0,  1238,   311,   312,     0,
       0,     0,     0,   260,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,   868,   314,   315,   316,   317,   318,
     319,   320,   321,   655,     0,     0,   655,  1617,  1619,     0,
    1622,   322,     0,     0,   323,  1164,   324,     0,  1632,  1769,
       0,     0,     0,  1770,   325,   326,  1641,   327,   328,   329,
     330,     0,     0,  1162,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   655,     0,     0,     0,     0,     0,
       0,  1162,     0,     0,     0,     0,  1162,     0,   655,   655,
     655,   655,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   260,   260,     0,
       0,     0,     0,   261,     0,     0,   572,  1676,     0,  1680,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1700,     0,
       0,     0,   571,     0,  1709,   868,  1439,     0,     0,     0,
       0,     0,   868,     0,     0,     0,     0,     0,     0,     0,
     868,  1453,     0,     0,     0,     0,     0,  1162,  1460,     0,
       0,   868,   120,   132,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   609,     0,     0,   260,
     260,   260,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     260,     0,   132,     0,  1162,     0,   572,     0,     0,     0,
    1493,     0,     0,     0,     0,     0,   579,     0,     0,   719,
     261,   261,   132,     0,     0,   719,   261,   261,     0,     0,
       0,     0,   942,     0,   741,     0,     0,     0,     0,   261,
       0,     0,   261,     0,     0,     0,     0,     0,     0,     0,
     261,     0,     0,     0,     0,  1141,  1162,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1162,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   942,
       0,     0,     0,  1296,     0,     0,     0,     0,     0,     0,
    1361,     0,     0,     0,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1162,     2,     0,     0,  1344,  1571,  1344,     0,   571,     0,
       0,     0,     0,     0,  1579,     0,     0,     0,     0,     0,
       0,     0,     0,   752,     0,     0,     0,     0,     0,   752,
       0,     0,     0,     0,     0,     0,   125,     0,   307,     0,
     742,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,     0,
     571,     0,     0,     0,     0,     0,     0,   125,   125,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,  1756,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,  1164,   324,     0,     0,  1165,
     571,     0,   261,   261,   325,   326,  1774,   327,   328,   329,
     330,     0,     0,     0,     0,   125,   125,     0,     0,   260,
       0,     0,     0,     0,   572,     0,   260,     0,     0,   260,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   868,     0,
       0,     0,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,     0,     0,     0,   868,     0,  1238,     0,     0,
     261,   261,     0,     0,     0,  1722,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1238,     0,     0,     0,     0,
     655,   655,  1238,     0,     0,   576,  1162,     0,  1162,     0,
       0,  1162,   655,     0,     0,     0,     0,  1886,  1889,     0,
    1891,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1162,     0,  1902,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     742,     0,     0,   260,   260,   260,   260,     0,     0,     0,
       0,     0,   125,     0,  1162,     0,     0,     0,  1162,     0,
       0,     0,   686,     0,     0,     0,     0,     0,     0,     0,
       0,   260,   260,   260,     0,     0,     0,     0,     0,  1162,
       0,     0,     0,  1205,     0,     0,     0,     0,  1162,     0,
       0,     0,     0,     0,     0,     0,     0,   260,     0,     0,
       0,     0,     0,     0,  1232,  1242,   741,     0,  1232,  1242,
       0,     0,     0,     1,     0,  1205,     0,     0,     0,   263,
       0,     0,     0,     0,     0,     0,  1264,     0,     0,   260,
       0,     0,     0,     0,     0,     0,   260,     0,     2,   260,
       0,     0,     0,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,     0,   576,     0,     0,    27,  1788,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,  1795,    35,    36,     0,    37,    38,    39,  1798,     0,
       0,     0,     0,     0,     0,     0,   393,     0,     0,   125,
      40,     0,     0,   263,   263,     0,     0,     0,     0,   571,
      43,    44,    45,    46,    47,    48,     0,  1460,     0,   579,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1162,   576,     0,     0,     0,     0,   574,     0,
       0,     0,     0,     0,   571,     0,     0,     0,     0,     0,
     655,  1162,     0,   571,     0,     0,     0,     0,  1162,     0,
     571,     0,  1891,     0,  2051,   741,     0,   571,     0,     0,
       0,     0,     0,  2057,     0,     0,     0,     0,     0,     0,
       0,     0,   612,     0,     0,   263,   263,   263,     0,   125,
     125,   125,     0,   125,     0,     0,   686,     0,     0,  1852,
       0,     0,     0,     0,     0,     0,   263,   125,   125,   125,
       0,     0,     0,     0,     0,     0,     0,     0,   571,   579,
       0,     0,     0,     0,   740,   722,     0,     0,   125,     0,
     576,   722,     0,     0,   571,     0,     0,     0,     0,     0,
     744,     0,     0,   576,     0,     0,     0,     0,  1756,     0,
       0,     0,     0,  1970,  1972,  1976,  1980,  1982,  1986,     0,
       0,     0,  1990,  1994,  1998,  2002,     1,     0,     0,     0,
       0,     0,     0,   260,   260,   260,     0,     0,     0,     0,
       0,   609,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,  2113,  2116,     0,
    1162,     0,  1162,     0,     0,   655,  1162,   655,     0,    27,
       0,     0,     0,     0,   574,     0,     0,    28,    29,     0,
       0,     0,    32,     0,  1935,    35,    36,     0,    37,    38,
      39,     0,     0,   686,     0,     0,     0,     0,     0,   686,
       0,     0,     0,    40,   739,     0,     0,     0,     0,     0,
     836,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   260,  1162,     0,   260,  1162,   574,   260,     0,     0,
    1422,     0,     0,   655,     0,     0,     0,     0,     0,     0,
       0,  1972,  1976,  1982,  1986,  1990,  1994,  1998,  2002,     0,
       0,   550,     0,     0,     0,     0,  1439,     0,     0,     0,
       0,     0,     0,     0,     0,   260,   574,     0,     0,  1162,
       0,     0,     0,     0,     0,     0,     0,     0,  1798,   260,
     260,   260,   260,     0,     0,   263,     0,     0,     0,     0,
       0,     0,   263,     0,     0,   263,     0,   868,     0,     0,
       0,     0,   260,     0,   260,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   739,     0,     0,     0,
    1686,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   609,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   698,     0,     0,     0,  1730,     0,     0,
       0,     0,   550,     0,  1730,     0,     0,     0,   550,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   260,   260,     0,   576,     0,     0,     0,
     260,   260,     0,   576,   260,   260,     0,     0,   125,     0,
       0,     0,     0,  1722,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   263,
     263,   263,   263,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,   125,   550,     0,
     550,     0,     0,     0,     0,     0,   576,   263,   263,   263,
       2,   576,     0,     0,     0,     0,     0,   125,     0,  1208,
       0,     0,     0,     0,     0,     0,     0,   576,     0,     0,
       0,     0,     0,   263,     0,     0,     0,     0,     0,     0,
    1235,  1245,   744,     0,  1235,  1245,     0,   307,     0,     0,
       0,  1208,     0,   308,   309,   310,     0,     0,     0,     0,
       0,     0,  1267,     0,     0,   263,   311,   312,     0,     0,
       0,     0,   263,     0,   576,   263,  1143,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,  1161,     0,     0,     0,  1166,     0,     0,     0,
     322,     0,     0,   323,  1164,   324,     0,     0,  1769,     0,
       0,     0,  1777,   325,   326,     0,   327,   328,   329,   330,
     125,   125,     0,     0,     0,     0,     0,     0,     0,     0,
     576,     0,   576,     0,     0,     0,     0,     0,     0,     0,
       0,  1008,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   739,     0,     0,   574,     0,     0,   260,     0,
       0,   571,     0,     0,     0,     0,  1247,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   550,     0,
    1161,  1166,     0,     0,     0,     0,     0,     0,     0,     0,
     574,     0,     0,     0,     0,     0,     0,     0,     0,   574,
       0,     0,     0,     0,     0,     0,   574,  1294,     0,     0,
       0,   744,     0,   574,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   550,     0,
       0,     0,     0,     0,     0,  1346,     0,     0,     0,     0,
       0,     0,   686,  1359,   686,     0,     0,     0,     0,     0,
       0,   571,     0,     0,   574,     0,     0,     0,     0,     0,
       0,     0,     0,  1410,     0,   260,   260,     0,     0,     0,
     574,   260,   260,   122,     0,     0,     0,     0,     0,     0,
     139,     0,     0,     0,   260,     0,     0,   260,     0,     0,
       0,     0,     0,     0,     0,   260,     0,     0,     0,  1196,
       0,     0,     0,   162,   171,   194,     0,     0,     0,   263,
     263,   263,     0,     0,     0,     0,     0,   612,     0,     0,
       0,     0,     0,     0,     0,   739,     0,     0,     0,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1008,   122,   122,     0,     0,     2,     0,  1008,     0,
       0,  1008,     0,     0,     0,   121,     0,     0,     0,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   523,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,    28,    29,   122,   741,     0,    32,     0,     0,
       0,     0,   311,   312,    38,     0,     0,   263,     0,     0,
     263,     0,     0,   263,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
       0,   162,   568,     0,     0,     0,   893,     0,     0,   894,
     737,   324,     0,     0,     0,     0,     0,     0,     0,   325,
     326,   263,   327,   328,   329,   330,     0,   260,   260,     0,
       0,     0,     0,     0,     0,   263,   263,   263,   263,     0,
       0,     0,     0,     0,     0,     0,   171,     0,     0,   571,
       0,     0,     0,     0,     0,     0,     0,     0,   263,   171,
     263,     0,     0,     0,     0,     0,     0,   576,     0,   568,
       0,     0,     0,     0,   576,     0,  1689,     0,     0,     0,
       0,   125,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   612,     0,  1008,     0,   550,     0,     0,
       0,     0,   576,     0,   576,   260,   260,   576,  1616,  1618,
     576,  1621,     0,  1733,     0,     0,     0,     0,     0,  1143,
    1733,     0,  1166,     0,     0,     0,     0,  1640,     0,     0,
       0,     0,     0,     0,  1161,  1166,   550,     0,     0,   263,
     263,     0,     0,     0,     0,     0,   263,   263,     0,     0,
     263,   263,  1161,  1166,     0,     0,     0,  1161,     0,     0,
       0,     0,     0,     0,     0,  1008,     0,  1008,     0,     0,
       0,     0,     0,     0,   122,   741,     0,     0,     0,     0,
     122,     0,     0,     0,     0,   125,     0,     0,  1674,     0,
    1678,     0,     0,   576,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   576,     0,     0,     0,     0,  1699,
       0,     0,     0,     0,     0,  1708,   568,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   550,     0,     0,     0,     0,  1161,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     568,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   162,     0,     0,     0,
       0,     0,     0,  1008,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   550,  1161,  1166,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   122,   122,     0,
     122,     0,     0,   122,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   122,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1161,     0,  1166,
       0,     0,     0,   523,     0,   568,     0,   122,     0,     0,
    1161,  1166,     0,     0,   263,     0,     0,   574,     0,     0,
     122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   550,     0,     0,     0,     0,     0,     0,     0,
       0,  1161,     0,  1166,     0,     0,     0,     0,     0,   576,
     576,     0,   576,     0,   550,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1008,     0,     0,     0,
       0,     0,     2,  1008,     0,     0,     0,  1008,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   574,     0,     0,
       0,     0,  1184,     0,     0,     0,   125,     0,     0,     0,
     122,   263,   263,     0,     0,     0,   568,   263,   263,   307,
       0,     0,     0,     0,     0,   308,   309,   310,     0,     0,
     263,     0,     0,   263,     0,     0,     0,     0,   311,   312,
       0,   263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     0,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,  1164,   324,  1647,     0,
    1165,     0,     0,     0,     0,   325,   326,     0,   327,   328,
     329,   330,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1862,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1161,  1166,  1161,
    1166,   744,  1161,  1881,     0,     0,     0,     0,  1616,  1888,
       0,  1640,     0,  1166,     0,     0,     0,     0,     0,     0,
       0,  1161,  1166,  1640,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1008,   258,     0,     0,     0,     0,     0,     0,     0,     0,
     550,   162,     0,   568,     0,  1161,     0,  1166,     0,  1161,
     568,  1166,     0,   263,   263,   568,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1161,  1166,     0,     0,     0,   574,  1008,     0,  1008,  1161,
    1166,   480,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   480,   122,  1008,     0,   480,     0,     0,
       0,     0,     0,   122,     0,     0,     0,     0,   568,     0,
       0,     0,     0,     0,   122,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   568,   258,   258,     0,     0,     0,
       0,   263,   263,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1008,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     570,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   568,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   744,     0,     0,   608,     0,     0,   258,   258,   258,
       0,     0,     0,     0,     0,     0,     0,   122,   122,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   258,   122,
       0,     0,     0,  1161,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   718,     0,     0,
       0,     0,  1161,   718,     0,     0,     0,  1166,     0,  1161,
    1881,     0,  1166,  1640,     0,  2050,     0,  2052,   550,     0,
     550,     0,     0,  1166,  2056,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   550,   550,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1974,  1978,     0,  1984,  1988,     0,     0,     0,  1992,  1996,
    2000,  2004,     0,     0,     0,   739,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
    1008,   122,     0,     0,     0,     0,   570,     0,     0,     0,
       0,     0,   877,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   877,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   570,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2112,  2115,
       0,  1161,  1166,  1161,     0,   968,     0,  1161,  1881,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   570,     0,
       0,     0,     0,     0,     0,     0,     0,  1974,  1978,  1984,
    1988,  1992,  1996,  2000,  2004,     2,     0,   258,     0,     0,
       0,     0,     0,     0,   258,     0,     0,   258,     0,     0,
       0,     0,     0,  1161,  1166,     0,  1161,  1881,     0,     0,
       0,  2159,     0,     0,     0,     0,   550,     0,     0,     0,
       0,     0,   307,     0,     0,   550,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
    1161,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,  1008,   323,  1164,
     324,   550,   550,  1769,     0,     0,     0,  1916,   325,   326,
       0,   327,   328,   329,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   258,   258,   258,   258,     0,     0,     0,   259,     0,
       0,     0,     0,     0,   122,     0,     0,     0,     0,     0,
       0,   122,     0,     0,     0,     0,     0,     0,   122,   258,
     258,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
       0,   568,     0,     0,   122,   258,     0,   122,   259,     0,
       0,     0,  1231,  1241,     0,     0,  1231,  1241,     0,     0,
     259,     0,     0,     0,   259,     0,     0,   264,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   258,     0,     0,
       0,     0,     0,     0,   258,     0,     0,   258,     0,     0,
       0,     0,   259,   259,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   264,     0,     0,
       0,     0,   122,     0,     0,     0,     0,     0,     0,   264,
     122,     0,     0,   264,     0,     0,     0,     0,     0,     0,
       0,   568,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   264,   264,     0,     0,     0,     0,   570,     0,     0,
       0,   259,     0,     0,   259,   259,   259,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   259,     0,     0,     0,     0,
       0,     0,   570,     0,     0,     0,     0,     0,     0,     0,
    1448,   570,     0,     0,   259,     0,     0,     0,   570,     0,
     259,  1448,     0,     0,     0,   570,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     264,     0,     0,   264,   264,   264,     0,     0,     0,     0,
       0,  1898,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,   264,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   570,     0,     2,     0,
       0,     0,     0,   264,     0,     0,     0,     0,     0,   264,
       0,     0,   570,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,     0,     0,     0,     0,
       0,   308,   309,   310,     0,     0,     0,     0,     0,   259,
       0,   258,   258,   258,   311,   312,     0,     0,     0,   608,
     259,     0,     0,     0,     0,     0,   122,   122,   313,   122,
       0,     0,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,  1164,   324,  1899,     0,  1165,     0,     0,     0,
       0,   325,   326,     0,   327,   328,   329,   330,     0,     0,
       0,     0,   259,     0,     0,     0,     0,     0,   264,     0,
       0,     0,     0,   122,     0,     0,     0,     0,     0,   264,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,     0,     0,     0,   258,
       0,   259,   258,     0,   259,   258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   264,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   258,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   258,   258,   258,
     258,     0,     0,   264,     0,     0,     0,     0,     0,     0,
     264,     0,     0,   264,     0,     0,     0,     0,     0,     0,
     258,     0,   258,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   608,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   259,   259,
     259,   259,     0,     0,     0,  1729,     0,     0,     0,     0,
       0,     0,  1729,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,   259,   259,     0,
       0,   258,   258,     0,     0,     0,     0,     0,   258,   258,
       0,     0,   258,   258,     0,     0,     0,     0,     0,     0,
       0,     0,   259,     0,     0,     0,     0,     0,     0,   259,
     259,     0,     0,   259,   259,     0,     0,   264,   264,   264,
     264,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,   259,     0,     0,   259,   264,   264,   264,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   264,     0,     0,     0,     0,     0,     0,   264,   264,
       0,     0,   264,   264,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   264,     0,     0,     0,     0,     0,     0,
     264,     0,     0,   264,     0,     0,     0,     0,     0,     0,
    -478,     0,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   259,     0,
       0,     0,     0,     0,  -478,     0,     0,     0,     0,     0,
    -478,  -478,  -478,     0,     0,     0,   258,     0,     0,   570,
       0,     0,     0,  -478,  -478,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -478,     0,     0,
       0,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,     0,
       0,     0,     0,     0,     0,     0,   264,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,  -478,     0,   264,  -478,     0,
    -478,  -478,     0,  -478,  -478,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   259,   259,
     259,     0,     0,     0,     0,     0,   259,     0,     0,   570,
       0,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   258,   258,     0,     0,     0,     0,   258,
     258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,   258,     0,     0,   258,     0,     0,     0,     0,
       0,     0,     0,   258,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   264,   264,   264,
       0,     0,     0,     0,     0,   264,     0,   307,     0,     0,
       0,     0,     0,   308,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,   259,     0,     0,   259,
     313,     0,   259,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,  1164,   324,     0,     0,  1769,     0,
       0,     0,  1920,   325,   326,     0,   327,   328,   329,   330,
     259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,   259,   259,   259,     0,     0,
       0,     0,     0,     0,     0,   264,     0,     0,   264,     0,
       0,   264,     0,     0,     0,     0,     0,   259,     0,   259,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   264,
       0,     0,   259,     0,     0,   258,   258,     0,     0,     0,
       0,     0,     0,   264,   264,   264,   264,     0,     0,     0,
       0,     0,   259,     0,     0,     0,     0,   570,     0,   259,
       0,     0,     0,     0,     0,     0,   264,     0,   264,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   259,   259,
       0,     0,     0,     0,     0,   259,   259,     0,     0,   259,
     259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   264,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   258,   258,     0,     0,     0,     0,     0,
       0,   264,     0,     0,     0,     0,     0,     0,   264,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   264,   264,     0,
       0,     0,     0,     0,   264,   264,     0,     0,   264,   264,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -363,   760,     0,  -363,  -363,  -363,  -363,   761,
     762,   763,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,     0,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,     0,     0,  -363,  -363,     0,
    -363,     0,     0,  -363,  -363,  -363,  -363,  -363,     0,     0,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,     0,  -363,     0,
    -363,  -363,  -363,   259,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,   764,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,   765,  -363,  -363,   766,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,     0,     0,     0,     0,     0,
       0,     0,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   264,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,     0,     0,     0,
     259,   259,   308,   309,   310,     0,   259,   259,     0,     0,
       0,     0,     0,     0,     0,   311,   312,     0,     0,   259,
       0,     0,   259,     0,     0,     0,     0,     0,     0,   313,
     259,     0,     0,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,  1164,   324,     0,     0,  1165,     0,     0,
       0,     0,   325,   326,  1928,   327,   328,   329,   330,   264,
     264,     0,     0,     0,     0,   264,   264,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   264,     0,
       0,   264,     0,     0,     0,     0,     0,     0,     0,   264,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -365,  1212,     0,  -365,
    -365,  -365,  -365,  1213,  1214,  1215,  -365,  -365,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,     0,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,     0,
       0,  -365,  -365,     0,  -365,     0,     0,  -365,  -365,  -365,
    -365,  -365,   259,   259,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,     0,  -365,     0,  -365,  -365,  -365,     0,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  1216,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  1217,  -365,  -365,  1218,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,     0,
       0,   264,   264,     0,     0,     0,     0,     0,     0,     0,
     259,   259,     0,     0,     0,     0,  -470,  1157,     0,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,     0,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,   264,
     264,  -470,  -470,     0,  -470,     0,     0,  -470,  -470,  -470,
    -470,  -470,     0,     0,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,     0,  -470,     0,  -470,  -470,  -470,     0,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -303,
     302,     0,     1,   303,   106,   304,  -303,   305,   306,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,     2,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
       0,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,     0,     0,   307,  -303,     0,  -303,     0,     0,
     308,   309,   310,  -303,  -303,     0,     0,  -303,  -303,  -303,
    -303,  -303,  -303,   311,   312,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,     0,  -303,     0,   313,  -303,  -303,
       0,   314,   315,   316,   317,   318,   319,   320,   321,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,   322,  -303,  -303,
     323,  1262,   324,  -303,  -303,  1160,  -303,  -303,  -303,  -303,
     325,   326,  -303,   327,   328,   329,   330,  -303,  -303,  -303,
    -303,  -303,  -304,   302,     0,     1,   303,   106,   304,  -304,
     305,   306,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
       2,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,     0,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,     0,     0,   307,  -304,     0,
    -304,     0,     0,   308,   309,   310,  -304,  -304,     0,     0,
    -304,  -304,  -304,  -304,  -304,  -304,   311,   312,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,     0,  -304,     0,
     313,  -304,  -304,     0,   314,   315,   316,   317,   318,   319,
     320,   321,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
     322,  -304,  -304,   323,  1164,   324,  -304,  -304,  1165,  -304,
    -304,  -304,  -304,   325,   326,  -304,   327,   328,   329,   330,
    -304,  -304,  -304,  -304,  -304,  -599,   302,     0,     1,   303,
     106,   304,  -599,   305,   306,  -599,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,     2,  -599,  -599,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,  -599,  -599,  -599,     0,  -599,  -599,  -599,
    -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,     0,     0,
     307,  -599,     0,  -599,     0,     0,   308,   309,   310,  -599,
    -599,     0,     0,  -599,  -599,  -599,  -599,  -599,  -599,   311,
     312,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,
       0,  -599,     0,   313,  -599,  -599,     0,   314,   315,   316,
     317,   318,   319,   320,   321,  -599,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,   322,  -599,  -599,   323,  -599,   324,  -599,
    -599,  -599,  -599,   748,  -599,  1343,   325,   326,  -599,   327,
     328,   329,   330,  -599,  -599,  -599,  -599,  -599,  -600,   302,
       0,     1,   303,   106,   304,  -600,   305,   306,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,     2,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,     0,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,     0,     0,   307,  -600,     0,  -600,     0,     0,   308,
     309,   310,  -600,  -600,     0,     0,  -600,  -600,  -600,  -600,
    -600,  -600,   311,   312,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,     0,  -600,     0,   313,  -600,  -600,     0,
     314,   315,   316,   317,   318,   319,   320,   321,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,   322,  -600,  -600,   323,
    -600,   324,  -600,  -600,  -600,  -600,   748,  -600,  1409,   325,
     326,  -600,   327,   328,   329,   330,  -600,  -600,  -600,  -600,
    -600,  -610,   302,     0,     1,   303,   106,   304,  -610,   305,
     306,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,     2,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,     0,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,     0,     0,   307,  -610,     0,  -610,
       0,     0,   308,   309,   310,  -610,  -610,     0,     0,  -610,
    -610,  -610,  -610,  -610,  -610,   311,   312,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,     0,  -610,     0,   313,
    -610,  -610,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,   322,
    -610,  -610,   323,  -610,   324,  -610,  -610,  1160,  -610,  -610,
    -610,  -610,   325,   326,  -610,   327,   328,   329,   330,  -610,
    -610,  -610,  -610,  -610,  -612,   302,     0,     1,   303,   106,
     304,  -612,   305,   306,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,     2,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,     0,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,     0,     0,   307,
    -612,     0,  -612,     0,     0,   308,   309,   310,  -612,  -612,
       0,     0,  -612,  -612,  -612,  -612,  -612,  -612,   311,   312,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,     0,
    -612,     0,   313,  -612,  -612,     0,   314,   315,   316,   317,
     318,   319,   320,   321,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,   322,  -612,  -612,   323,  1164,   324,  -612,  -612,
    1165,  -612,  -612,  -612,  -612,   325,   326,  -612,   327,   328,
     329,   330,  -612,  -612,  -612,  -612,  -612,  -611,   302,     0,
       1,   303,   106,   304,  -611,   305,   306,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,     2,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,     0,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
       0,     0,   307,  -611,     0,  -611,     0,     0,   308,   309,
     310,  -611,  -611,     0,     0,  -611,  -611,  -611,  -611,  -611,
    -611,   311,   312,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,     0,  -611,     0,   313,  -611,  -611,     0,   314,
     315,   316,   317,   318,   319,   320,   321,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,   322,  -611,  -611,   323,  -611,
     324,  -611,  -611,  1160,  -611,  -611,  -611,  -611,   325,   326,
    -611,   327,   328,   329,   330,  -611,  -611,  -611,  -611,  -611,
    -356,  1924,     0,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,     0,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,     0,     0,  -356,  -356,     0,  -356,     0,
       0,  -356,  -356,  -356,  -356,  -356,     0,     0,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,     0,  -356,     0,  -356,  -356,
    -356,     0,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -361,  1967,     0,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,     0,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,     0,     0,  -361,  -361,
       0,  -361,     0,     0,  -361,  -361,  -361,  -361,  -361,     0,
       0,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,     0,  -361,
       0,  -361,  -361,  -361,     0,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -349,   302,     0,     1,
     303,   106,   304,  -349,   305,   306,  -349,  -349,  -349,  -349,
    -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,
    -349,  -349,  -349,  -349,     2,  -349,  -349,  -349,  -349,  -349,
    -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,
    -349,  -349,  -349,  -349,  -349,  -349,  -349,     0,  -349,  -349,
    -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,     0,
       0,   307,  -349,     0,  -349,     0,     0,   308,   309,   310,
    -349,  -349,     0,     0,  -349,  -349,  -349,  -349,  -349,  -349,
     311,   312,  -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,
    -349,     0,  -349,     0,   313,  -349,  -349,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -349,  -349,  -349,  -349,
    -349,  -349,  -349,  -349,   322,  -349,  -349,   323,  -349,   324,
    -349,  -349,  -349,  -349,   748,  -349,  -349,   325,   326,  -349,
     327,   328,   329,   330,  -349,  -349,  -349,  -349,  -349,  -577,
     302,     0,     1,   303,   106,   304,  -577,   305,   306,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,     2,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       0,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,     0,     0,   307,  -577,     0,  -577,     0,     0,
     308,   309,   310,  -577,  -577,     0,     0,  -577,  -577,  -577,
    -577,  -577,  -577,   311,   312,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,     0,  -577,     0,   313,  -577,  -577,
       0,   314,   315,   316,   317,   318,   319,   320,   321,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,   322,  -577,  -577,
     323,  -577,   324,  -577,  -577,  -577,  -577,   748,  -577,  -577,
     325,   326,  -577,   327,   328,   329,   330,  -577,  -577,  -577,
    -577,  -577,  -585,   302,     0,     1,   303,   106,   304,  -585,
     305,   306,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
       2,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,     0,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,     0,     0,   307,  -585,     0,
    -585,     0,     0,   308,   309,   310,  -585,  -585,     0,     0,
    -585,  -585,  -585,  -585,  -585,  -585,   311,   312,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,     0,  -585,     0,
     313,  -585,  -585,     0,   314,   315,   316,   317,   318,   319,
     320,   321,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
     322,  -585,  -585,   323,  -585,   324,  -585,  -585,  -585,  -585,
     748,  -585,  -585,   325,   326,  -585,   327,   328,   329,   330,
    -585,  -585,  -585,  -585,  -585,  -578,   302,     0,     1,   303,
     106,   304,  -578,   305,   306,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,     2,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,     0,
     307,  -578,     0,  -578,     0,     0,   308,   309,   310,  -578,
    -578,     0,     0,  -578,  -578,  -578,  -578,  -578,  -578,   311,
     312,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
       0,  -578,     0,   313,  -578,  -578,     0,   314,   315,   316,
     317,   318,   319,   320,   321,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,   322,  -578,  -578,   323,  -578,   324,  -578,
    -578,  -578,  -578,   748,  -578,  -578,   325,   326,  -578,   327,
     328,   329,   330,  -578,  -578,  -578,  -578,  -578,  -586,   302,
       0,     1,   303,   106,   304,  -586,   305,   306,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,     2,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,     0,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,     0,     0,   307,  -586,     0,  -586,     0,     0,   308,
     309,   310,  -586,  -586,     0,     0,  -586,  -586,  -586,  -586,
    -586,  -586,   311,   312,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,     0,  -586,     0,   313,  -586,  -586,     0,
     314,   315,   316,   317,   318,   319,   320,   321,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,   322,  -586,  -586,   323,
    -586,   324,  -586,  -586,  -586,  -586,   748,  -586,  -586,   325,
     326,  -586,   327,   328,   329,   330,  -586,  -586,  -586,  -586,
    -586,  -579,   302,     0,     1,   303,   106,   304,  -579,   305,
     306,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,     2,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,     0,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,     0,     0,   307,  -579,     0,  -579,
       0,     0,   308,   309,   310,  -579,  -579,     0,     0,  -579,
    -579,  -579,  -579,  -579,  -579,   311,   312,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,     0,  -579,     0,   313,
    -579,  -579,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,   322,
    -579,  -579,   323,  -579,   324,  -579,  -579,  -579,  -579,   748,
    -579,  -579,   325,   326,  -579,   327,   328,   329,   330,  -579,
    -579,  -579,  -579,  -579,  -587,   302,     0,     1,   303,   106,
     304,  -587,   305,   306,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,     2,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,     0,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,     0,     0,   307,
    -587,     0,  -587,     0,     0,   308,   309,   310,  -587,  -587,
       0,     0,  -587,  -587,  -587,  -587,  -587,  -587,   311,   312,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,     0,
    -587,     0,   313,  -587,  -587,     0,   314,   315,   316,   317,
     318,   319,   320,   321,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,   322,  -587,  -587,   323,  -587,   324,  -587,  -587,
    -587,  -587,   748,  -587,  -587,   325,   326,  -587,   327,   328,
     329,   330,  -587,  -587,  -587,  -587,  -587,  -580,   302,     0,
       1,   303,   106,   304,  -580,   305,   306,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,     2,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,     0,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
       0,     0,   307,  -580,     0,  -580,     0,     0,   308,   309,
     310,  -580,  -580,     0,     0,  -580,  -580,  -580,  -580,  -580,
    -580,   311,   312,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,     0,  -580,     0,   313,  -580,  -580,     0,   314,
     315,   316,   317,   318,   319,   320,   321,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,   322,  -580,  -580,   323,  -580,
     324,  -580,  -580,  -580,  -580,   748,  -580,  -580,   325,   326,
    -580,   327,   328,   329,   330,  -580,  -580,  -580,  -580,  -580,
    -588,   302,     0,     1,   303,   106,   304,  -588,   305,   306,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,     2,  -588,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,     0,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,     0,     0,   307,  -588,     0,  -588,     0,
       0,   308,   309,   310,  -588,  -588,     0,     0,  -588,  -588,
    -588,  -588,  -588,  -588,   311,   312,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,     0,  -588,     0,   313,  -588,
    -588,     0,   314,   315,   316,   317,   318,   319,   320,   321,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,   322,  -588,
    -588,   323,  -588,   324,  -588,  -588,  -588,  -588,   748,  -588,
    -588,   325,   326,  -588,   327,   328,   329,   330,  -588,  -588,
    -588,  -588,  -588,  -358,  2071,     0,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,     0,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,     0,     0,  -358,  -358,
       0,  -358,     0,     0,  -358,  -358,  -358,  -358,  -358,     0,
       0,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,     0,  -358,
       0,  -358,  -358,  -358,     0,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -357,  2072,     0,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,     0,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,     0,
       0,  -357,  -357,     0,  -357,     0,     0,  -357,  -357,  -357,
    -357,  -357,     0,     0,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,     0,  -357,     0,  -357,  -357,  -357,     0,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -363,
     760,     0,  -363,  -363,  -363,  -363,   761,   762,   763,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
       0,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,     0,     0,  -363,  -363,     0,  -363,     0,     0,
    -363,  -363,  -363,  -363,  -363,     0,     0,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,     0,  -363,     0,  -363,  -363,  -363,
       0,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
     764,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  1155,  -363,
    -363,   766,     0,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,   760,     0,     0,     0,     0,     0,   761,   762,
     763,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -363,     0,     0,
       0,     0,     0,     0,     0,  -363,  -363,     0,     0,     0,
    -363,     0,     0,     0,     0,     0,  -363,  -363,  -363,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -363,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,   764,     0,     0,  -363,  1552,  -363,  -363,     0,
     765,     0,     0,   766,     0,  -363,  -363,  -363,     0,  -363,
    -363,  -363,  -363,  -363,  -478,     0,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -478,     0,
       0,     0,     0,     0,  -478,  -478,  -478,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -478,  -478,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -478,     0,     0,     0,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,     0,     0,     0,     0,     0,     0,     0,
       0,  -478,  -478,  -478,  -478,  -478,  -478,     0,  -478,  -478,
       0,     0,  -478,     0,  -478,  -478,     0,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,  -478,  -470,  1157,     0,  -470,
    -470,  -470,  -470,     0,  -470,  -470,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,     0,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,     0,
       0,  -470,  -470,     0,  -470,     0,     0,  -470,  -470,  -470,
    -470,  -470,     0,     0,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,     0,  -470,     0,  -470,  -470,  -470,     0,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,     0,     0,  -470,  -470,  -470,
    -470,     0,  -470,  -470,  -470,  1158,  -470,  -470,  -470,     0,
    -470,  -470,  -470,  -470, -1118,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1118, -1118, -1118, -1118, -1118, -1118, -1118,
   -1118, -1118, -1118, -1118, -1118, -1118, -1118, -1118, -1118, -1118,
   -1118, -1118, -1118, -1118, -1118,     0, -1118, -1118, -1118, -1118,
   -1118, -1118, -1118, -1118, -1118, -1118, -1118,     0,     0,   307,
   -1118,     0, -1118,     0,     0,   308,   309,   310, -1118, -1118,
       0,     0, -1118, -1118, -1118, -1118, -1118, -1118,   311,   312,
   -1118, -1118, -1118, -1118, -1118, -1118, -1118, -1118, -1118,     0,
   -1118,     0,   313, -1118, -1118,     0,   314,   315,   316,   317,
     318,   319,   320,   321, -1118, -1118, -1118, -1118, -1118, -1118,
   -1118, -1118,   322,     0,     0,   323,  1164,   324, -1118,     0,
    1165, -1118, -1118,     0, -1118,   325,   326,     0,   327,   328,
     329,   330, -1262,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262,
   -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262,
   -1262, -1262, -1262,     0, -1262, -1262, -1262, -1262, -1262, -1262,
   -1262, -1262, -1262, -1262, -1262,     0,     0,   307, -1262,     0,
   -1262,     0,     0,   308,   309,   310, -1262, -1262,     0,     0,
   -1262, -1262, -1262, -1262, -1262, -1262,   311,   312, -1262, -1262,
   -1262, -1262, -1262, -1262, -1262, -1262, -1262,     0, -1262,     0,
     313, -1262, -1262,     0,   314,   315,   316,   317,   318,   319,
     320,   321, -1262, -1262, -1262, -1262, -1262, -1262, -1262, -1262,
     322,     0,     0,   323,  1164,   324,  1647,     0,  1165, -1262,
   -1262,     0, -1262,   325,   326,     0,   327,   328,   329,   330,
   -1220,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1220,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,
   -1220,     0, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220,     0,     0,   307, -1220,     0, -1220,     0,
       0,   308,   309,   310, -1220, -1220,     0,     0, -1220, -1220,
   -1220, -1220, -1220, -1220,   311,   312, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220,     0, -1220,     0,   313, -1220,
   -1220,     0,   314,   315,   316,   317,   318,   319,   320,   321,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,   322,     0,
       0,   323,  1875,   324, -1220,     0,  1165, -1220, -1220,     0,
   -1220,   325,   326,     0,   327,   328,   329,   330, -1251,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1251, -1251, -1251,
   -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251,
   -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251, -1251,     0,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,     0,     0,   307, -1251,     0, -1251,     0,     0,   308,
     309,   310, -1251, -1251,     0,     0, -1251,    32, -1251, -1251,
   -1251, -1251,   311,   312,  1129, -1251,   638,   639,   640, -1251,
   -1251, -1251, -1251,     0, -1251,     0,   313, -1251, -1251,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
   -1251, -1251, -1251, -1251, -1251, -1251,   322,     0,     0,   323,
    1164,   324,   641,     0,  1165, -1251,   254,     0,   642,   325,
     326,     0,   327,   328,   329,   330,  -611,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,     0,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,     0,
       0,   307,  -611,     0,  -611,     0,     0,   308,   309,   310,
    -611,  -611,     0,     0,  -611,  -611,  -611,  -611,  -611,  -611,
     311,   312,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,     0,  -611,     0,   313,  -611,  -611,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,   322,     0,     0,   323,  -611,   324,
    1159,     0,  1160,  -611,  -611,     0,  -611,   325,   326,     0,
     327,   328,   329,   330, -1243,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1243, -1243, -1243, -1243, -1243, -1243, -1243,
   -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243,
   -1243, -1243, -1243, -1243, -1243,     0, -1243, -1243, -1243, -1243,
   -1243, -1243, -1243, -1243, -1243, -1243, -1243,     0,     0,   307,
   -1243,     0, -1243,     0,     0,   308,   309,   310, -1243, -1243,
       0,     0, -1243, -1243, -1243, -1243, -1243, -1243,   311,   312,
   -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243,     0,
   -1243,     0,   313, -1243, -1243,     0,   314,   315,   316,   317,
     318,   319,   320,   321, -1243, -1243, -1243, -1243, -1243, -1243,
   -1243, -1243,   322,     0,     0,   323,  2117,   324, -1243,     0,
    1160, -1243, -1243,     0, -1243,   325,   326,     0,   327,   328,
     329,   330, -1244,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1244, -1244, -1244, -1244, -1244, -1244, -1244, -1244, -1244,
   -1244, -1244, -1244, -1244, -1244, -1244, -1244, -1244, -1244, -1244,
   -1244, -1244, -1244,     0, -1244, -1244, -1244, -1244, -1244, -1244,
   -1244, -1244, -1244, -1244, -1244,     0,     0,   307, -1244,     0,
   -1244,     0,     0,   308,   309,   310, -1244, -1244,     0,     0,
   -1244, -1244, -1244, -1244, -1244, -1244,   311,   312, -1244, -1244,
   -1244, -1244, -1244, -1244, -1244, -1244, -1244,     0, -1244,     0,
     313, -1244, -1244,     0,   314,   315,   316,   317,   318,   319,
     320,   321, -1244, -1244, -1244, -1244, -1244, -1244, -1244, -1244,
     322,     0,     0,   323,  1164,   324,  2118,     0,  1165, -1244,
   -1244,     0, -1244,   325,   326,     0,   327,   328,   329,   330,
   -1238,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1238,
   -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238,
   -1238,     0,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,     0,     0,   307, -1238,     0, -1238,     0,
       0,   308,   309,   310, -1238, -1238,     0,     0, -1238,    32,
   -1238, -1238, -1238, -1238,   311,   312,  1129, -1238,   638,   639,
     640, -1238, -1238, -1238, -1238,     0, -1238,     0,   313, -1238,
   -1238,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44, -1238, -1238, -1238, -1238, -1238, -1238,   322,     0,
       0,   323,  1164,   324,   641,     0,  1165, -1238,   254,     0,
     642,   325,   326,     0,   327,   328,   329,   330, -1186,   616,
       0, -1186, -1186, -1186, -1186,     0, -1186, -1186,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1186, -1186, -1186, -1186,
   -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186,
   -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186,     0,
   -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186,
   -1186,     0,     0, -1186, -1186,     0, -1186,     0,     0, -1186,
   -1186, -1186, -1186, -1186,     0,     0, -1186, -1186, -1186, -1186,
   -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186,
   -1186, -1186, -1186,     0, -1186,     0, -1186, -1186, -1186,     0,
   -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186, -1186,
   -1186, -1186, -1186, -1186, -1186, -1186, -1186,     0,     0, -1186,
       0, -1186,   617,     0, -1186, -1186, -1186,     0, -1186, -1186,
   -1186,     0, -1186, -1186, -1186, -1186, -1209,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,     0,
       0,   307,   246,     0, -1209,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1209,    32, -1209, -1209, -1209, -1209,
     311,   636,   637,   248,   638,   639,   640, -1209, -1209, -1209,
   -1209,     0, -1209,     0,   313, -1209,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,     0,     0,   323,     0,   324,
     641,     0, -1209, -1209,   254,     0,   642,   325,   326,     0,
     327,   328,   329,   330, -1187,   616,     0, -1187, -1187, -1187,
   -1187,     0, -1187, -1187,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187,
   -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187,
   -1187, -1187, -1187, -1187, -1187,     0, -1187, -1187, -1187, -1187,
   -1187, -1187, -1187, -1187, -1187, -1187, -1187,     0,     0, -1187,
   -1187,     0, -1187,     0,     0, -1187, -1187, -1187, -1187, -1187,
       0,     0, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187,
   -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187,     0,
   -1187,     0, -1187, -1187, -1187,     0, -1187, -1187, -1187, -1187,
   -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187, -1187,
   -1187, -1187, -1187,     0,     0, -1187,     0, -1187,   617,     0,
   -1187, -1187, -1187,     0, -1187, -1187, -1187,     0, -1187, -1187,
   -1187, -1187, -1248,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248,
   -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248,
   -1248, -1248, -1248,     0,  1121,  1122,  1123,   628,  1124,  1125,
    1126,  1127,   633,   634,  1128,     0,     0,   307, -1248,     0,
   -1248,     0,     0,   308,   309,   310, -1248, -1248,     0,     0,
   -1248,    32, -1248, -1248, -1248, -1248,   311,   312,  1129, -1248,
     638,   639,   640, -1248, -1248, -1248, -1248,     0, -1248,     0,
     313, -1248, -1248,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44, -1248, -1248, -1248, -1248, -1248, -1248,
     322,     0,     0,   323,     0,   324,   641,     0, -1248, -1248,
     254,     0,   642,   325,   326,     0,   327,   328,   329,   330,
   -1264,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1264,
   -1264, -1264, -1264, -1264, -1264, -1264, -1264, -1264, -1264, -1264,
   -1264, -1264, -1264, -1264, -1264, -1264, -1264, -1264, -1264, -1264,
   -1264,     0, -1264, -1264, -1264, -1264, -1264, -1264, -1264, -1264,
   -1264, -1264, -1264,     0,     0,   307, -1264,     0, -1264,     0,
       0,   308,   309,   310, -1264, -1264,     0,     0, -1264, -1264,
   -1264, -1264, -1264, -1264,   311,   312, -1264, -1264, -1264, -1264,
   -1264, -1264, -1264, -1264, -1264,     0, -1264,     0,   313, -1264,
   -1264,     0,   314,   315,   316,   317,   318,   319,   320,   321,
   -1264, -1264, -1264, -1264, -1264, -1264, -1264, -1264,   322,     0,
       0,   323,     0,   324,  1140,     0, -1264, -1264,   748,     0,
   -1264,   325,   326,     0,   327,   328,   329,   330, -1199,  1167,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,     0,     0,   307,   246,     0, -1199,     0,     0,   308,
     309,   310,    28,    29,     0,     0, -1199,    32, -1199, -1199,
   -1199, -1199,   311,   636,   637,   248,   638,   639,   640, -1199,
   -1199, -1199, -1199,     0, -1199,     0,   313, -1199,   249,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
     250,   251,   252,   253,   206,   207,   322,     0,     0,   323,
       0,   324,   641,     0, -1199, -1199,   254,     0,   642,   325,
     326,     0,   327,   328,   329,   330, -1203,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,     0,
       0,   307,   246,     0, -1203,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1203,    32, -1203, -1203, -1203, -1203,
     311,   636,   637,   248,   638,   639,   640, -1203, -1203, -1203,
   -1203,     0, -1203,     0,   313, -1203,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,     0,     0,   323,     0,   324,
     641,     0, -1203, -1203,   254,     0,   642,   325,   326,     0,
     327,   328,   329,   330, -1198,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,     0,     0,   307,
     246,     0, -1198,     0,     0,   308,   309,   310,    28,    29,
       0,     0, -1198,    32, -1198, -1198, -1198, -1198,   311,   636,
     637,   248,   638,   639,   640, -1198, -1198, -1198, -1198,     0,
   -1198,     0,   313, -1198,   249,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,   250,   251,   252,   253,
     206,   207,   322,     0,     0,   323,     0,   324,   641,     0,
   -1198, -1198,   254,     0,   642,   325,   326,     0,   327,   328,
     329,   330, -1202,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,     0,     0,   307,   246,     0,
   -1202,     0,     0,   308,   309,   310,    28,    29,     0,     0,
   -1202,    32, -1202, -1202, -1202, -1202,   311,   636,   637,   248,
     638,   639,   640, -1202, -1202, -1202, -1202,     0, -1202,     0,
     313, -1202,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,     0,     0,   323,     0,   324,   641,     0, -1202, -1202,
     254,     0,   642,   325,   326,     0,   327,   328,   329,   330,
   -1105,  1180,     0, -1105, -1105, -1105, -1105,     0, -1105, -1105,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105,     0, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105,     0,     0, -1105, -1105,     0, -1105,     0,
       0, -1105, -1105, -1105, -1105, -1105,     0,     0, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105,     0, -1105,     0, -1105, -1105,
   -1105,     0, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,     0,
       0, -1105,     0, -1105, -1105,     0, -1105, -1105, -1105,     0,
   -1105, -1105, -1105,     0, -1105, -1105, -1105, -1105, -1107,  1181,
       0, -1107, -1107, -1107, -1107,     0, -1107, -1107,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,     0,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107,     0,     0, -1107, -1107,     0, -1107,     0,     0, -1107,
   -1107, -1107, -1107, -1107,     0,     0, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107,     0, -1107,     0, -1107, -1107, -1107,     0,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107,     0,     0, -1107,
       0, -1107, -1107,     0, -1107, -1107, -1107,     0, -1107, -1107,
   -1107,     0, -1107, -1107, -1107, -1107, -1153,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,     0,
       0,   307,   246,     0, -1153,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1153,    32, -1153, -1153, -1153, -1153,
     311,   636,   637,   248,   638,   639,   640, -1153, -1153, -1153,
   -1153,     0, -1153,     0,   313, -1153,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,     0,     0,   323,     0,   324,
     641,     0, -1153, -1153,   254,     0,   642,   325,   326,     0,
     327,   328,   329,   330, -1155,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,     0,     0,   307,
     246,     0, -1155,     0,     0,   308,   309,   310,    28,    29,
       0,     0, -1155,    32, -1155, -1155, -1155, -1155,   311,   636,
     637,   248,   638,   639,   640, -1155, -1155, -1155, -1155,     0,
   -1155,     0,   313, -1155,   249,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,   250,   251,   252,   253,
     206,   207,   322,     0,     0,   323,     0,   324,   641,     0,
   -1155, -1155,   254,     0,   642,   325,   326,     0,   327,   328,
     329,   330, -1200,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,     0,     0,   307,   246,     0,
   -1200,     0,     0,   308,   309,   310,    28,    29,     0,     0,
   -1200,    32, -1200, -1200, -1200, -1200,   311,   636,   637,   248,
     638,   639,   640, -1200, -1200, -1200, -1200,     0, -1200,     0,
     313, -1200,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,     0,     0,   323,     0,   324,   641,     0, -1200, -1200,
     254,     0,   642,   325,   326,     0,   327,   328,   329,   330,
   -1204,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,     0,     0,   307,   246,     0, -1204,     0,
       0,   308,   309,   310,    28,    29,     0,     0, -1204,    32,
   -1204, -1204, -1204, -1204,   311,   636,   637,   248,   638,   639,
     640, -1204, -1204, -1204, -1204,     0, -1204,     0,   313, -1204,
     249,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,   250,   251,   252,   253,   206,   207,   322,     0,
       0,   323,     0,   324,   641,     0, -1204, -1204,   254,     0,
     642,   325,   326,     0,   327,   328,   329,   330, -1201,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,     0,     0,   307,   246,     0, -1201,     0,     0,   308,
     309,   310,    28,    29,     0,     0, -1201,    32, -1201, -1201,
   -1201, -1201,   311,   636,   637,   248,   638,   639,   640, -1201,
   -1201, -1201, -1201,     0, -1201,     0,   313, -1201,   249,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
     250,   251,   252,   253,   206,   207,   322,     0,     0,   323,
       0,   324,   641,     0, -1201, -1201,   254,     0,   642,   325,
     326,     0,   327,   328,   329,   330, -1205,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,     0,
       0,   307,   246,     0, -1205,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1205,    32, -1205, -1205, -1205, -1205,
     311,   636,   637,   248,   638,   639,   640, -1205, -1205, -1205,
   -1205,     0, -1205,     0,   313, -1205,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,     0,     0,   323,     0,   324,
     641,     0, -1205, -1205,   254,     0,   642,   325,   326,     0,
     327,   328,   329,   330, -1196,   616,     0, -1196, -1196, -1196,
   -1196,     0, -1196, -1196,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196,
   -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196,
   -1196, -1196, -1196, -1196, -1196,     0, -1196, -1196, -1196, -1196,
   -1196, -1196, -1196, -1196, -1196, -1196, -1196,     0,     0, -1196,
   -1196,     0, -1196,     0,     0, -1196, -1196, -1196, -1196, -1196,
       0,     0, -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196,
   -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196,     0,
   -1196,     0, -1196, -1196, -1196,     0, -1196, -1196, -1196, -1196,
   -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196,
   -1196, -1196, -1196,     0,     0, -1196,     0, -1196,   617,     0,
   -1196, -1196, -1196,     0, -1196, -1196, -1196,     0, -1196, -1196,
   -1196, -1196, -1197,   616,     0, -1197, -1197, -1197, -1197,     0,
   -1197, -1197,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197,
   -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197,
   -1197, -1197, -1197,     0, -1197, -1197, -1197, -1197, -1197, -1197,
   -1197, -1197, -1197, -1197, -1197,     0,     0, -1197, -1197,     0,
   -1197,     0,     0, -1197, -1197, -1197, -1197, -1197,     0,     0,
   -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197,
   -1197, -1197, -1197, -1197, -1197, -1197, -1197,     0, -1197,     0,
   -1197, -1197, -1197,     0, -1197, -1197, -1197, -1197, -1197, -1197,
   -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197,
   -1197,     0,     0, -1197,     0, -1197,   617,     0, -1197, -1197,
   -1197,     0, -1197, -1197, -1197,     0, -1197, -1197, -1197, -1197,
   -1032,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1032,
   -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032,
   -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032,
   -1032,     0, -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032,
   -1032, -1032, -1032,     0,     0,   307, -1032,     0, -1032,     0,
       0,   308,   309,   310, -1032, -1032,     0,     0, -1032, -1032,
   -1032, -1032, -1032, -1032,   311,   312, -1032, -1032, -1032, -1032,
   -1032, -1032, -1032, -1032, -1032,     0, -1032,     0,   313, -1032,
   -1032,     0,   314,   315,   316,   317,   318,   319,   320,   321,
   -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032,   322,     0,
       0,   323,     0,   324, -1032,     0,  1844,  1845,  1020,     0,
   -1032,   325,   326,     0,   327,   328,   329,   330, -1159,   616,
       0, -1159, -1159, -1159, -1159,     0, -1159, -1159,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1159, -1159, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,     0,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159,     0,     0, -1159, -1159,     0, -1159,     0,     0, -1159,
   -1159, -1159, -1159, -1159,     0,     0, -1159, -1159, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159, -1159, -1159,     0, -1159,     0, -1159, -1159, -1159,     0,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159,     0,     0, -1159,
       0, -1159,   617,     0, -1159, -1159, -1159,     0, -1159, -1159,
   -1159,     0, -1159, -1159, -1159, -1159, -1160,   616,     0, -1160,
   -1160, -1160, -1160,     0, -1160, -1160,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160,     0, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,     0,
       0, -1160, -1160,     0, -1160,     0,     0, -1160, -1160, -1160,
   -1160, -1160,     0,     0, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160,     0, -1160,     0, -1160, -1160, -1160,     0, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160,     0,     0, -1160,     0, -1160,
     617,     0, -1160, -1160, -1160,     0, -1160, -1160, -1160,     0,
   -1160, -1160, -1160, -1160, -1156,   616,     0, -1156, -1156, -1156,
   -1156,     0, -1156, -1156,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156,
   -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156,
   -1156, -1156, -1156, -1156, -1156,     0, -1156, -1156, -1156, -1156,
   -1156, -1156, -1156, -1156, -1156, -1156, -1156,     0,     0, -1156,
   -1156,     0, -1156,     0,     0, -1156, -1156, -1156, -1156, -1156,
       0,     0, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156,
   -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156,     0,
   -1156,     0, -1156, -1156, -1156,     0, -1156, -1156, -1156, -1156,
   -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156,
   -1156, -1156, -1156,     0,     0, -1156,     0, -1156,   617,     0,
   -1156, -1156, -1156,     0, -1156, -1156, -1156,     0, -1156, -1156,
   -1156, -1156, -1034,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1034, -1034, -1034, -1034, -1034, -1034, -1034, -1034, -1034,
   -1034, -1034, -1034, -1034, -1034, -1034, -1034, -1034, -1034, -1034,
   -1034, -1034, -1034,     0, -1034, -1034, -1034, -1034, -1034, -1034,
   -1034, -1034, -1034, -1034, -1034,     0,     0,   307, -1034,     0,
   -1034,     0,     0,   308,   309,   310, -1034, -1034,     0,     0,
   -1034, -1034, -1034, -1034, -1034, -1034,   311,   312, -1034, -1034,
   -1034, -1034, -1034, -1034, -1034, -1034, -1034,     0, -1034,     0,
     313, -1034, -1034,     0,   314,   315,   316,   317,   318,   319,
     320,   321, -1034, -1034, -1034, -1034, -1034, -1034, -1034, -1034,
     322,     0,     0,   323,     0,   324, -1034,     0, -1034,  2031,
    1020,     0, -1034,   325,   326,     0,   327,   328,   329,   330,
   -1028,  2034,     0, -1028, -1028, -1028, -1028,     0, -1028, -1028,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1028, -1028,
   -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028,
   -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028,
   -1028,     0, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028,
   -1028, -1028, -1028,     0,     0, -1028, -1028,     0, -1028,     0,
       0, -1028, -1028, -1028, -1028, -1028,     0,     0, -1028, -1028,
   -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028,
   -1028, -1028, -1028, -1028, -1028,     0, -1028,     0, -1028, -1028,
   -1028,     0, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028,
   -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028,     0,
       0, -1028,     0, -1028, -1028,     0, -1028, -1028, -1028,     0,
   -1028, -1028, -1028,     0, -1028, -1028, -1028, -1028, -1157,   616,
       0, -1157, -1157, -1157, -1157,     0, -1157, -1157,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,     0,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
   -1157,     0,     0, -1157, -1157,     0, -1157,     0,     0, -1157,
   -1157, -1157, -1157, -1157,     0,     0, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157,     0, -1157,     0, -1157, -1157, -1157,     0,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157,     0,     0, -1157,
       0, -1157,   617,     0, -1157, -1157, -1157,     0, -1157, -1157,
   -1157,     0, -1157, -1157, -1157, -1157, -1158,   616,     0, -1158,
   -1158, -1158, -1158,     0, -1158, -1158,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158,     0, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158,     0,
       0, -1158, -1158,     0, -1158,     0,     0, -1158, -1158, -1158,
   -1158, -1158,     0,     0, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158,     0, -1158,     0, -1158, -1158, -1158,     0, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158,     0,     0, -1158,     0, -1158,
     617,     0, -1158, -1158, -1158,     0, -1158, -1158, -1158,     0,
   -1158, -1158, -1158, -1158, -1245,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1245, -1245, -1245, -1245, -1245, -1245, -1245,
   -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245,
   -1245, -1245, -1245, -1245, -1245,     0, -1245, -1245, -1245, -1245,
   -1245, -1245, -1245, -1245, -1245, -1245, -1245,     0,     0,   307,
   -1245,     0, -1245,     0,     0,   308,   309,   310, -1245, -1245,
       0,     0, -1245, -1245, -1245, -1245, -1245, -1245,   311,   312,
   -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245,     0,
   -1245,     0,   313, -1245, -1245,     0,   314,   315,   316,   317,
     318,   319,   320,   321, -1245, -1245, -1245, -1245, -1245, -1245,
   -1245, -1245,   322,     0,     0,   323,     0,   324, -1245,     0,
   -1245, -1245, -1245,     0, -1245,   325,   326,     0,   327,   328,
     329,   330, -1029,  2109,     0, -1029, -1029, -1029, -1029,     0,
   -1029, -1029,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1029, -1029, -1029, -1029, -1029, -1029, -1029, -1029, -1029, -1029,
   -1029, -1029, -1029, -1029, -1029, -1029, -1029, -1029, -1029, -1029,
   -1029, -1029, -1029,     0, -1029, -1029, -1029, -1029, -1029, -1029,
   -1029, -1029, -1029, -1029, -1029,     0,     0, -1029, -1029,     0,
   -1029,     0,     0, -1029, -1029, -1029, -1029, -1029,     0,     0,
   -1029, -1029, -1029, -1029, -1029, -1029, -1029, -1029, -1029, -1029,
   -1029, -1029, -1029, -1029, -1029, -1029, -1029,     0, -1029,     0,
   -1029, -1029, -1029,     0, -1029, -1029, -1029, -1029, -1029, -1029,
   -1029, -1029, -1029, -1029, -1029, -1029, -1029, -1029, -1029, -1029,
   -1029,     0,     0, -1029,     0, -1029, -1029,     0, -1029, -1029,
   -1029,     0, -1029, -1029, -1029,     0, -1029, -1029, -1029, -1029,
    -935,   582,     0,  -935,  -935,  -935,  -935,     0,  -935,  -935,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -935,  -935,
    -935,  -935,  -935,  -935,  -935,  -935,  -935,  -935,  -935,  -935,
    -935,  -935,  -935,  -935,  -935,  -935,  -935,  -935,  -935,  -935,
    -935,     0,     0,  -935,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -935,  -935,     0,  -935,     0,
       0,  -935,  -935,  -935,  -935,  -935,     0,     0,  -935,  -935,
    -935,  -935,  -935,  -935,  -935,  -935,  -935,  -935,  -935,     0,
       0,  -935,  -935,  -935,  -935,     0,  -935,     0,  -935,  -935,
    -935,     0,  -935,  -935,  -935,  -935,  -935,  -935,  -935,  -935,
    -935,  -935,  -935,  -935,  -935,  -935,  -935,  -935,  -935,     0,
       0,  -935,   852,  -935,  -935,     0,   584,  -935,  -935,     0,
       0,  -935,  -935,     0,  -935,  -935,  -935,  -935,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,    18,    19,   244,   245,    22,    23,    24,     0,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
       0,     0,   307,   246,     0,     0,     0,     0,   308,   309,
     310,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   311,   636,   637,   248,   638,   639,   640,     0,     0,
       0,     0,     0,     0,     0,   313,     0,   249,     0,   314,
     315,   316,   317,   318,   319,   320,   321,    43,    44,   250,
     251,   252,   253,   206,   207,   322,     0,     0,   323,     0,
     324,   641,     0,     0,     0,   254,     0,   642,   325,   326,
       0,   327,   328,   329,   330,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,  1121,  1122,  1123,   628,
    1124,  1125,  1126,  1127,   633,   634,  1128,     0,     0,   307,
     246,     0,     0,     0,     0,   308,   309,   310,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   311,   636,
     637,   248,   638,   639,   640,     0,     0,     0,     0,     0,
       0,     0,   313,     0,   249,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,   250,   251,   252,   253,
     206,   207,   322,     0,     0,   323,     0,   324,   641,     0,
       0,     0,   254,     0,   642,   325,   326,     0,   327,   328,
     329,   330,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,   246,     0,     0,
       0,     0,   308,   309,   310,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   311,   636,    38,   248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,   249,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,   250,   251,   252,   253,   206,   207,   322,
       0,     0,   323,     0,   324,   990,     0,   991,   992,   748,
       0,     0,   325,   326,     0,   327,   328,   329,   330,  1271,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,   246,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   311,   636,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,   249,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
     250,   251,   252,   253,   206,   207,   322,     0,     0,   323,
       0,   324,   990,     0,   991,  -110,   748,     0,     0,   325,
     326,     0,   327,   328,   329,   330,  1278,     0,     1,   303,
     106,   304,     0,   305,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   246,     0,     0,     0,     0,   308,   309,   310,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   311,
     636,    38,   248,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,   249,     0,   314,   315,   316,
     317,   318,   319,   320,   321,    43,    44,   250,   251,   252,
     253,   206,   207,   322,     0,     0,   323,     0,   324,   990,
       0,   991,   -98,   748,     0,     0,   325,   326,     0,   327,
     328,   329,   330,  1282,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,   246,     0,
       0,     0,     0,   308,   309,   310,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   311,   636,    38,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,     0,     0,   323,     0,   324,   990,     0,   991,  -102,
     748,     0,     0,   325,   326,     0,   327,   328,   329,   330,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,   246,     0,     0,     0,     0,
     308,   309,   310,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,   311,   636,    38,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,   249,
       0,   314,   315,   316,   317,   318,   319,   320,   321,    43,
      44,   250,   251,   252,   253,   206,   207,   322,     0,     0,
     323,     0,   324,  1536,     0,   991,   -65,   748,     0,     0,
     325,   326,     0,   327,   328,   329,   330,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,   246,     0,     0,     0,     0,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     311,   636,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,     0,     0,   323,     0,   324,
    1545,     0,   991,  1546,   748,     0,     0,   325,   326,     0,
     327,   328,   329,   330,  1603,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,   246,
       0,     0,     0,     0,   308,   309,   310,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,   311,   636,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,   249,     0,   314,   315,   316,   317,   318,
     319,   320,   321,    43,    44,   250,   251,   252,   253,   206,
     207,   322,     0,     0,   323,     0,   324,   990,     0,   991,
     -81,   748,     0,     0,   325,   326,     0,   327,   328,   329,
     330,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   246,     0,     0,     0,
       0,   308,   309,   310,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   311,   636,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
     249,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,   250,   251,   252,   253,   206,   207,   322,     0,
       0,   323,     0,   324,  1545,     0,   991,  -107,   748,     0,
       0,   325,   326,     0,   327,   328,   329,   330,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,    18,    19,   244,   245,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,   246,     0,     0,     0,     0,   308,   309,
     310,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   311,   636,    38,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,   249,     0,   314,
     315,   316,   317,   318,   319,   320,   321,    43,    44,   250,
     251,   252,   253,   206,   207,   322,     0,     0,   323,     0,
     324,  1545,     0,   991,   -97,   748,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     246,     0,     0,     0,     0,   308,   309,   310,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   311,   636,
      38,   248,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,   249,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,   250,   251,   252,   253,
     206,   207,   322,     0,     0,   323,     0,   324,  1545,     0,
     991,  -101,   748,     0,     0,   325,   326,     0,   327,   328,
     329,   330,  1805,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,   246,     0,     0,
       0,     0,   308,   309,   310,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   311,   636,    38,   248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,   249,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,   250,   251,   252,   253,   206,   207,   322,
       0,     0,   323,     0,   324,   990,     0,   991,   -88,   748,
       0,     0,   325,   326,     0,   327,   328,   329,   330,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,   246,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   311,   636,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,   249,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
     250,   251,   252,   253,   206,   207,   322,     0,     0,   323,
       0,   324,  1545,     0,   991,   -78,   748,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   246,     0,     0,     0,     0,   308,   309,   310,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   311,
     636,    38,   248,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,   249,     0,   314,   315,   316,
     317,   318,   319,   320,   321,    43,    44,   250,   251,   252,
     253,   206,   207,   322,     0,     0,   323,     0,   324,  1545,
       0,   991,   -85,   748,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,    27,     0,
       0,     0,     0,   308,   309,   310,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,   311,   405,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,    40,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,    45,    46,    47,    48,   206,   207,
     322,     0,     0,   323,   302,   324,     1,   303,   106,   304,
       0,   305,   306,   325,   326,     0,   327,   328,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   870,    27,
       0,     0,     0,     0,   308,   309,   310,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,   311,   405,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,    40,     0,   314,   315,   316,   317,   318,
     319,   320,   321,    43,    44,    45,    46,    47,    48,   206,
     207,   322,     0,     0,   323,   302,   324,     1,   303,   106,
     304,     0,   305,   306,   325,   326,     0,   327,   328,   329,
     330,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1200,
      27,     0,     0,     0,     0,   308,   309,   310,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,   311,   405,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,    40,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,    45,    46,    47,    48,
       0,     0,   322,     0,     0,   711,   737,   324,     0,     0,
       0,     0,     0,     0,     0,   325,   326,     0,   327,   328,
     329,   330,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,     0,
       0,     0,   308,   309,   310,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,   311,   405,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,    40,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,    45,    46,    47,    48,     0,     0,   322,
       0,     0,   323,   302,   324,     1,   303,   106,   304,   254,
     305,   306,   325,   326,     0,   327,   328,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,    27,     0,
       0,     0,     0,   308,   309,   310,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,   311,   405,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,    40,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,    45,    46,    47,    48,     0,     0,
     322,     0,     0,   711,   737,   324,     0,     0,     0,     0,
       0,     0,     0,   325,   326,     0,   327,   328,   329,   330,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     8,     9,    10,   563,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,     0,     0,     0,
     308,   309,   310,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,   311,   405,    38,    39,     0,   302,     0,
       1,   303,   106,   304,     0,   305,   306,   313,     0,    40,
       0,   314,   315,   316,   317,   318,   319,   320,   321,    43,
      44,    45,    46,    47,    48,     2,     0,   893,     0,     0,
     894,   737,   324,     0,     0,     0,     0,     0,     0,     0,
     325,   326,     0,   327,   328,   329,   330,     0,     0,  1121,
    1122,  1123,   628,  1124,  1125,  1126,  1127,   633,   634,  1128,
       0,     0,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,    32,     0,     0,     0,
       0,   311,   312,  1129,     0,   638,   639,   640,     0,   302,
       0,     1,   303,   106,   304,   313,   305,   306,     0,   314,
     315,   316,   317,   318,   319,   320,   321,    43,    44,     0,
       0,     0,     0,     0,     0,   322,     2,     0,   323,  -473,
     324,   641,     0,  -473,     0,   254,     0,   642,   325,   326,
       0,   327,   328,   329,   330,     0,     0,     0,     0,     0,
    1121,  1122,  1123,   628,  1124,  1125,  1126,  1127,   633,   634,
    1128,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,    32,     0,     0,
       0,     0,   311,   312,  1129,     0,   638,   639,   640,     0,
     302,     0,     1,   303,   106,   304,   313,   305,   306,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
       0,     0,     0,     0,     0,     0,   322,     2,     0,   323,
    1164,   324,   641,     0,  1165,     0,   254,     0,   642,   325,
     326,     0,   327,   328,   329,   330,     0,     0,     0,     0,
       0,  1121,  1122,  1123,   628,  1124,  1125,  1126,  1127,   633,
     634,  1128,     0,     0,   307,     0,     0,     0,     0,     0,
     308,   309,   310,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,   311,   312,  1129,     0,   638,   639,   640,
       0,  1878,     0,     1,   303,   106,   304,   313,   305,   306,
       0,   314,   315,   316,   317,   318,   319,   320,   321,    43,
      44,     0,     0,     0,     0,     0,     0,   322,     2,     0,
     323,     0,   324,   641,     0,     0,     0,   254,     0,   642,
     325,   326,     0,   327,   328,   329,   330,     0,     0,     0,
       0,     0,  1121,  1122,  1123,   628,  1124,  1125,  1126,  1127,
     633,   634,  1128,     0,     0,   307,     0,     0,     0,     0,
       0,   308,   309,   310,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,   311,   312,  1129,     0,   638,   639,
     640,     0,   302,     0,     1,   303,   106,   304,   313,   305,
     306,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,     0,     0,     0,     0,     0,     0,   322,     2,
       0,   323,     0,   324,   641,     0,     0,     0,   254,     0,
     642,   325,   326,     0,   327,   328,   329,   330,     0,     0,
       0,     0,     0,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,     0,     0,   307,     0,     0,     0,
       0,     0,   308,   309,   310,     0,     0,     0,     0,     0,
      32,     0,     0,     0,     0,   311,   312,  1129,     0,   638,
     639,   640,     0,   302,     0,     1,   303,   106,   304,   313,
     305,   306,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,     0,     0,     0,     0,     0,     0,   322,
       2,     0,   323,     0,   324,   641,     0,     0,     0,   254,
       0,   642,   325,   326,     0,   327,   328,   329,   330,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,  1164,   324,     0,     0,  1165,     0,
       0,     0,     0,   325,   326,  1931,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,  2054,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,  1164,   324,  1899,
       0,  1165,     0,     0,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   323,
    1164,   324,  1899,     0,  1165,     0,     0,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,     0,   324,     0,     0,  2107,  2108,  1020,
       0,     0,   325,   326,     0,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     2,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,  2119,   324,  2120,     0,
    1160,     0,     0,     0,     0,   325,   326,     0,   327,   328,
     329,   330,   307,     0,     0,     0,     0,     0,   308,   309,
     310,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   323,  1164,
     324,  2118,     0,  1165,     0,     0,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,     0,   324,     0,     0,     0,     0,   748,     0,
       0,   325,   326,   749,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     2,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,     0,   324,  1159,     0,  1160,
       0,     0,     0,     0,   325,   326,     0,   327,   328,   329,
     330,   307,     0,     0,     0,     0,     0,   308,   309,   310,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     2,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,     0,     0,   323,  1287,   324,
       0,     0,     0,     0,   748,     0,     0,   325,   326,     0,
     327,   328,   329,   330,   307,     0,     0,     0,     0,     0,
     308,   309,   310,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
       2,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     323,  1354,   324,     0,     0,     0,     0,   748,     0,     0,
     325,   326,     0,   327,   328,   329,   330,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,     0,   324,  1140,     0,     0,     0,
     748,     0,     0,   325,   326,     0,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,  1636,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,  1164,   324,     0,
       0,  1165,     0,     0,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   323,
    1637,   324,  1638,     0,     0,     0,     0,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,     0,   324,  1646,     0,  1160,     0,     0,
       0,     0,   325,   326,     0,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     2,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,  1694,   324,     0,     0,
       0,     0,   748,     0,     0,   325,   326,     0,   327,   328,
     329,   330,   307,     0,     0,     0,     0,     0,   308,   309,
     310,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   323,  1703,
     324,     0,     0,     0,     0,   748,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,  1735,   324,     0,     0,  1160,     0,     0,     0,
       0,   325,   326,     0,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     2,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,     0,   324,     0,     0,  1160,
       0,     0,     0,     0,   325,   326,  1763,   327,   328,   329,
     330,   307,     0,     0,     0,     0,     0,   308,   309,   310,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     2,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,     0,     0,   323,     0,   324,
       0,     0,  1766,     0,     0,     0,  1767,   325,   326,     0,
     327,   328,   329,   330,   307,     0,     0,     0,     0,     0,
     308,   309,   310,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
       2,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     323,     0,   324,     0,     0,  1160,     0,     0,     0,     0,
     325,   326,  1773,   327,   328,   329,   330,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,     0,   324,     0,     0,  1766,     0,
       0,     0,  1775,   325,   326,     0,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,  1874,   324,     0,
       0,  1160,     0,     0,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   323,
    1876,   324,     0,     0,  1160,     0,     0,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,  1877,   324,     0,     0,  1165,     0,     0,
       0,     0,   325,   326,     0,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     2,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,  1880,   324,     0,     0,
    1160,     0,     0,     0,     0,   325,   326,     0,   327,   328,
     329,   330,   307,     0,     0,     0,     0,     0,   308,   309,
     310,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   323,  1637,
     324,  1638,     0,     0,     0,     0,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,  1900,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,     0,   324,  1897,     0,  1160,     0,     0,     0,
       0,   325,   326,     0,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     2,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,  1901,   324,  1638,     0,     0,
       0,     0,     0,     0,   325,   326,     0,   327,   328,   329,
     330,   307,     0,     0,     0,     0,     0,   308,   309,   310,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     2,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,     0,     0,   323,     0,   324,
       0,     0,  1766,     0,     0,     0,  1914,   325,   326,     0,
     327,   328,   329,   330,   307,     0,     0,     0,     0,     0,
     308,   309,   310,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
       2,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     323,     0,   324,     0,     0,  1766,     0,     0,     0,  1918,
     325,   326,     0,   327,   328,   329,   330,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,     0,   324,     0,     0,  1160,     0,
       0,     0,     0,   325,   326,  1927,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,     0,   324,     0,
       0,  1160,     0,     0,     0,     0,   325,   326,  1930,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   323,
    2039,   324,     0,     0,  1160,     0,     0,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,  1875,   324,     0,     0,  1165,     0,     0,
       0,     0,   325,   326,     0,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     2,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,  2046,   324,     0,     0,
    1160,     0,     0,     0,     0,   325,   326,     0,   327,   328,
     329,   330,   307,     0,     0,     0,     0,     0,   308,   309,
     310,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   323,  1901,
     324,  1638,     0,     0,     0,     0,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,  2123,   324,     0,     0,  1160,     0,     0,     0,
       0,   325,   326,     0,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     2,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,     0,   324,     0,     0,     0,
    2152,  1020,     0,     0,   325,   326,     0,   327,   328,   329,
     330,   307,     0,     0,     0,     0,     0,   308,   309,   310,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     2,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,     0,     0,   323,  2155,   324,
       0,     0,  1160,     0,     0,     0,     0,   325,   326,     0,
     327,   328,   329,   330,   307,     0,     0,     0,     0,     0,
     308,   309,   310,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
       2,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     323,  2156,   324,     0,     0,  1160,     0,     0,     0,     0,
     325,   326,     0,   327,   328,   329,   330,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,  2184,   324,     0,     0,  1160,     0,
       0,     0,     0,   325,   326,     0,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,     0,   324,     0,
       0,     0,     0,     0,     0,     0,   325,   326,   547,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   323,
       0,   324,     0,     0,     0,     0,   748,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,     0,   324,     0,     0,     0,     0,     0,
       0,     0,   325,   326,   844,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     2,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,     0,   324,     0,     0,
       0,     0,     0,     0,     0,   325,   326,   848,   327,   328,
     329,   330,   307,     0,     0,     0,     0,     0,   308,   309,
     310,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   323,     0,
     324,     0,     0,     0,     0,  1020,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,     0,   324,     0,     0,     0,     0,     0,     0,
       0,   325,   326,  1061,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     2,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,     0,   324,     0,     0,     0,
       0,     0,     0,  1113,   325,   326,     0,   327,   328,   329,
     330,   307,     0,     0,     0,     0,     0,   308,   309,   310,
    1481,     0,     1,   303,   106,   304,     0,   305,   306,     0,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     2,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,     0,     0,   323,   737,   324,
       0,     0,     0,     0,     0,     0,     0,   325,   326,     0,
     327,   328,   329,   330,   307,     0,     0,     0,     0,     0,
     308,   309,   310,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
       2,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     323,     0,   324,     0,     0,     0,     0,   748,     0,     0,
     325,   326,     0,   327,   328,   329,   330,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,     0,   324,     0,     0,     0,     0,
       0,     0,     0,   325,   326,  1584,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,  1620,   324,     0,
       0,     0,     0,     0,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   323,
       0,   324,     0,     0,     0,     0,     0,     0,  1623,   325,
     326,     0,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,  1834,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,     0,   324,     0,     0,     0,     0,  1833,
       0,     0,   325,   326,     0,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,  1837,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     2,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,     0,   324,     0,     0,
       0,     0,   748,     0,     0,   325,   326,     0,   327,   328,
     329,   330,   307,     0,     0,     0,     0,     0,   308,   309,
     310,  1841,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   323,     0,
     324,     0,     0,     0,     0,   748,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,     0,   324,     0,     0,     0,     0,   748,     0,
       0,   325,   326,     0,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     2,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,  1887,   324,     0,     0,     0,
       0,     0,     0,     0,   325,   326,     0,   327,   328,   329,
     330,   307,     0,     0,     0,     0,     0,   308,   309,   310,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     2,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,     0,     0,  1954,     0,   324,
       0,     0,     0,     0,  1833,     0,     0,   325,   326,     0,
     327,   328,   329,   330,   307,     0,     0,     0,     0,     0,
     308,   309,   310,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
       2,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     323,  2055,   324,     0,     0,     0,     0,     0,     0,     0,
     325,   326,     0,   327,   328,   329,   330,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,  2114,   324,     0,     0,     0,     0,
       0,     0,     0,   325,   326,     0,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,   701,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,     0,   324,     0,
       0,     0,     0,     0,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   702,
       0,   324,     0,     0,     0,     0,     0,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,   701,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   711,     0,   324,     0,     0,     0,     0,     0,
       0,     0,   325,   326,     0,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     0,   314,   315,   316,   317,
     318,   319,   320,   321,  -923,   582,     0,  -923,  -923,  -923,
       0,     0,   322,     0,     0,   734,     0,   324,     0,     0,
       0,     0,     0,     0,     0,   325,   326,     0,   327,   328,
     329,   330,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,  -923,  -923,     0,     0,  -923,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -923,
    -923,     0,  -923,     0,     0,  -923,  -923,     0,  -923,  -923,
       0,     0,  -923,  -923,  -923,  -923,  -923,  -923,     0,  -923,
    -923,  -923,  -923,     0,     0,  -923,  -923,  -923,  -923,     0,
    -923,     0,  -923,  -923,  -923,     0,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,     0,  -923,  -923,  -923,  -923,  -923,  -923,
    -923,  -923,  -923,     0,     0,  -923,   583,  -923,  -923,     0,
     584,  -923,     0,     0,     0,  -923,  -923,  -189,   911,     0,
    -189,  -189,  -189,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,     0,
    -189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -189,  -189,     0,  -189,     0,     0,  -189,  -189,
       0,  -189,  -189,     0,     0,  -189,  -189,  -189,  -189,  -189,
    -189,     0,  -189,  -189,  -189,  -189,     0,     0,  -189,  -189,
    -189,  -189,     0,  -189,     0,  -189,  -189,  -189,     0,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,     0,     0,  -189,     0,
    -189,   912,     0,   913,  -189,     0,     0,     0,  -189,  -189,
    -253,   925,     0,     1,   303,   106,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,  -253,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,  -251,   928,  -253,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,  -251,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
    -254,   925,  -251,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,  -254,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,  -252,   928,  -254,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,  -252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   422,  -252,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   488,   438,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   510,   489,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   515,   511,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   519,   516,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   925,   520,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   928,  -778,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   925,  -779,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   928,  -775,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   925,  -776,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   928,  -781,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,  1043,  -782,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,  1047,  1044,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   925,  1048,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   928,  -758,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   925,  -759,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   928,  -761,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,  1566,  -762,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   925,  1567,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   928,  -676,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   925,  -677,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   928,  -764,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   925,  -765,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   928,  -669,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   925,  -670,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   928,  -665,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   925,  -666,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   928,  -655,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   925,  -656,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   928,  -650,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   925,  -651,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,     0,   928,  -667,     1,   303,
     106,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   423,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   424,    32,   425,   426,    35,    36,     0,
     405,    38,    39,   427,     0,     0,   428,   429,   430,   431,
       0,   432,     0,   433,   434,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,    51,     0,     0,   435,     0,   436,   437,
       0,   302,  -668,     1,   303,   106,   325,   326,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,   423,     0,
       0,   308,   309,     0,    28,    29,     0,     0,   424,    32,
     425,   426,    35,    36,     0,   405,    38,    39,   427,     0,
       0,   428,   429,   430,   431,     0,   432,     0,   433,   434,
      40,     0,   314,   315,   316,   317,   318,   319,   320,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,   435,     0,   436,   437,   422,     0,     1,   303,   106,
       0,   325,   326,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,   488,
       0,     1,   303,   106,     0,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,    27,     0,   423,     0,     0,   308,
     309,     0,    28,    29,     0,     0,   424,    32,   425,   426,
      35,    36,     0,   405,    38,    39,   427,     0,     0,   428,
     429,   430,   431,     0,   432,     0,   433,   434,    40,     0,
     314,   315,   316,   317,   318,   319,   320,     0,    43,    44,
      45,    46,    47,    48,   206,   207,    51,     0,   199,   435,
       1,   436,   437,     0,     0,     0,     0,     0,     0,   325,
     326,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,   563,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   205,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,   199,     0,     1,     0,    43,    44,    45,
      46,    47,    48,   206,   207,    51,     0,     0,   564,  1052,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   565,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   205,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       1,     0,    43,    44,    45,    46,    47,    48,   206,   207,
      51,     0,     0,   866,  1052,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   565,     2,   200,   201,   202,   203,
     204,     8,     9,    10,   563,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,   206,   207,    51,     1,     0,   564,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   565,
       0,   566,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     1,     0,    43,    44,    45,    46,    47,    48,   206,
     207,    51,     0,     0,   866,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   565,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   246,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   247,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,     0,
       0,     0,     0,     0,     0,     0,     1,     0,    43,    44,
     250,   251,   252,   253,   206,   207,    51,     0,     0,   866,
       0,     0,     0,     0,     0,     0,  1446,     0,     0,     0,
     565,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,     0,     0,     0,     0,     0,     0,
       0,     1,     0,    43,    44,   250,   251,   252,   253,   206,
     207,    51,     0,     0,   866,     0,     0,     0,     0,     0,
       0,  1463,     0,     0,     0,   565,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   246,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   247,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,     0,
       0,     0,     0,     0,     0,     0,     1,     0,    43,    44,
     250,   251,   252,   253,   206,   207,    51,     0,     0,  1228,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1229,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,     0,     0,     0,     0,     0,     0,
       0,     1,     0,    43,    44,   250,   251,   252,   253,   206,
     207,    51,     0,     0,  1228,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1251,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   246,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   247,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,     0,
       0,     0,     0,     0,     0,     0,     1,     0,    43,    44,
     250,   251,   252,   253,   206,   207,    51,     0,     0,  1228,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1727,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,     0,     0,     0,     0,     0,     0,
       0,     1,     0,    43,    44,   250,   251,   252,   253,   206,
     207,    51,     0,     0,  1228,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1742,     2,     3,     4,   273,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    26,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,   274,    31,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,    42,     1,     0,     0,     0,    43,    44,
      45,    46,    47,    48,    49,    50,    51,     0,     0,    52,
       0,     0,     0,     0,     0,     0,     0,     0,   275,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,   423,
       0,     0,     0,     0,     0,    28,    29,     0,     0,   424,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     1,     0,     0,
       0,    43,    44,    45,    46,    47,    48,   206,   207,    51,
       0,     0,   953,     0,   436,     0,     0,     0,     0,     0,
       0,   954,     2,   200,   201,   202,   203,   204,     8,     9,
      10,   563,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       1,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   933,     0,     0,     0,     0,
       0,     0,     0,     0,   934,     2,   200,   201,   202,   203,
     204,     8,     9,    10,   563,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,  1531,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,   206,   207,    51,     0,     0,    52,     0,
       0,     0,     0,     0,     0,     0,     0,   934,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -66,     0,     0,     0,
       0,     0,     0,     0,   -66,   -66,     0,     0,     0,   -66,
       0,     0,     0,     0,     0,   -66,   -66,   -66,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -66,  1754,     0,     0,     0,     0,     0,     0,     0,     0,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,     0,     0,
       0,     0,     0,     0,  1532,     0,  1533,   -66,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     249,  1758,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -111,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     249,  1759,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -95,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     249,  1865,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -96,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     249,  2016,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -80,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     249, -1316,   292,     0,     1,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -87,     0,     2,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    26,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,    30,    31,     0,
      32,    33,    34,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    41,     1,     0,     0,    42,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,    51,
       0,     0,    52,     0,     0,    53,     0,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     1,     0,     0,     0,   836,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1785,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,   165,     0,     1,     0,     0,     0,   836,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1786,     2,     3,
       4,   166,     6,     7,     8,     9,    10,   167,   168,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    26,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   165,
      40,     1,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,    51,     0,
       0,    52,     0,     0,   169,     0,     2,     3,     4,   166,
       6,     7,     8,     9,    10,   167,   168,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   603,    40,     1,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,    49,    50,    51,     0,     0,    52,
       0,     0,   169,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   604,   605,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -943,   249,  -943,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,    51,     0,     0,    52,     0,     0,
     606,     0,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,  -943,  -943,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -943,     0,     0,     0,     0,     0,     0,     0,  -943,  -943,
       0,     0,     0,  -943,     0,     0,     0,     0,     0,  -943,
    -943,  -943,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -943,     1,     0,     0,     0,     0,
       0,     0,     0,     0,  -943,  -943,  -943,  -943,  -943,  -943,
    -943,  -943,  -943,     0,     0,  -943,     0,     0,  -943,     0,
       2,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,    25,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,    30,    31,
       0,    32,    33,    34,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,    41,     0, -1317,   284,    42,     1,     0,
       0,     0,    43,    44,    45,    46,    47,    48,    49,    50,
      51,     0,     0,    52,     0,     0,    53,     0,     0,     0,
       0,     0,     0,     2,     3,     4,   166,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,    33,    34,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
     199,     0,     1,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,    49,    50,    51,     0,     0,    52,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   205,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,   199,     0,     1,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
    1228,  1714,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   205,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
     199,     0,     1,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     206,   207,     0,     0,     0,     0,   208,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   205,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,   946,     0,     1,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,   206,   207,     0,     0,     0,
       0,   388,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   205,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
    1489,     0,     1,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     206,   207,     0,     0,     0,     0,   208,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   205,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,   199,     0,     1,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,   206,   207,     0,     0,     0,
       0,   388,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   205,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
     199,     0,     1,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     206,   207,     0,     0,     0,     0,  1581,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   205,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,   165,     0,     1,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,   206,   207,     0,     0,     0,
       0,  1944,     2,     3,     4,   166,     6,     7,     8,     9,
      10,   563,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,   165,
       0,     1,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
      49,    50,    51,     0,     0,    52,     2,     3,     4,   166,
       6,     7,     8,     9,    10,   563,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,   890,     0,     1,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,    49,    50,    51,     0,     0,    52,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   246,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   247,    38,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     0,   249,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,   250,   251,   252,   253,   206,   207,
       0,     0,     0,   891,     2,     3,     4,   166,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    26,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,    49,    50,    51,     0,     0,    52,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,    52,     2,   200,   201,   202,   203,   204,     8,     9,
      10,   563,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,    52,     2,   200,   201,   202,
     203,   204,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,   206,   207,     0,     0,     0,   726,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   206,   207,
       0,     0,     0,  1468,     2,   200,   201,   202,   203,   204,
     234,   235,   236,  1553,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     0,
       0,  1075,     0,     1,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,    51,     0,     0,    52,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,  1076,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,  1081,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,  1082,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,  1087,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,  1088,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,   875,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
     249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,  1036,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,  1093,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   502,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,   836,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
     477,   478,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
     249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,    51,     0,
       0,   866,  1711,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   565,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   246,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     247,    38,   248,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   249,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,   250,   251,   252,
     253,   206,   207,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   254,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1542,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207
};

static const yytype_int16 yycheck[] =
{
       0,   725,    92,   932,   128,   128,    86,   469,   932,   534,
      83,   343,    64,   640,   865,   882,  1003,   865,   132,   156,
     153,   865,   942,  1238,    83,    86,   841,   727,   470,   144,
      30,    31,    83,     5,   841,  1002,  1003,  1004,  1105,     5,
     832,    41,   157,   810,   159,   579,   161,    84,   128,    30,
      83,    84,    52,  1002,    93,  1004,  1630,   342,  1002,    59,
    1004,    42,   100,   748,    64,   100,    66,   128,  1642,   183,
     755,   356,   144,   758,    93,   360,   186,   187,     1,   473,
       1,   534,    82,    83,    84,   157,    86,   159,  1002,   161,
    1004,    91,     5,    93,     1,   832,   186,   187,   131,   343,
     100,   101,     5,    93,   104,   964,     0,   304,    83,   799,
     100,  2140,     3,   113,  1020,     3,   116,     5,    93,     3,
       1,     5,   174,    83,   321,   100,   107,   108,   128,     3,
     111,   131,   132,    93,     1,   983,   136,   827,    77,   121,
     140,   141,   142,  1010,   144,     3,     5,   554,   148,   121,
     150,     3,   417,   153,   154,   764,   156,   157,   158,   159,
     270,   161,   748,     1,   164,     3,   132,  2196,   326,   755,
      59,     1,   758,     3,   174,     1,    28,   584,   268,   289,
     587,     1,   589,   183,   591,    37,   132,   135,   136,    83,
    1002,   130,  1004,     1,     1,     3,   288,     1,   198,    93,
      92,   810,    17,     1,   127,   278,   100,   101,    17,   130,
     210,   469,   212,     1,   121,   288,   300,     1,   131,   278,
     220,   221,     1,   126,   113,   309,   554,   278,   265,   288,
     230,   315,   265,   233,   122,     1,   288,   183,   122,     3,
     119,     1,   130,   124,   509,   278,   130,     7,     8,     9,
     288,   290,   290,   288,   128,   290,   584,     1,   885,   587,
     127,   589,    83,   591,   122,   265,     1,   126,   126,   121,
     270,   290,   130,     3,   274,     1,     1,     3,   278,   393,
     132,    10,    11,   420,     3,  1272,     5,     5,   288,   127,
     290,     3,  1279,   274,   186,   187,  1283,   127,    28,   564,
     290,   127,     1,     3,     1,  1272,  1273,   127,   308,   198,
      52,   764,  1279,  1280,   314,   290,  1283,  1284,  1892,   127,
     127,     3,   126,   323,  1273,     1,   124,   142,   288,  1273,
     290,  1280,     1,   142,   868,  1284,  1280,   337,     3,   127,
    1284,   119,     5,   127,   325,   124,   124,   126,   127,   439,
     440,   441,   442,     1,   121,   121,   122,   810,   122,  1273,
     126,   121,   183,    28,   649,   125,  1280,   652,  1227,   129,
    1284,     5,   132,   121,     1,   121,   268,   469,   270,   379,
     380,     1,   889,   127,   278,   385,   132,   387,   124,   131,
     470,   300,   127,   393,   288,     1,   290,   289,   128,   399,
     309,   127,   127,   122,   122,  1197,   315,  1199,   128,   470,
     122,   130,   412,     1,   126,   529,     3,   417,   130,   419,
     420,   121,   555,   423,   424,  1110,    17,   889,   127,   429,
     127,   545,   432,   433,   434,   435,   436,   119,     3,   127,
     564,   564,   124,    17,   559,   535,   561,   393,   538,  1216,
       1,   127,   784,   785,   786,  1222,   963,   278,   127,   270,
    1197,  1273,  1199,   128,   464,   465,   466,   288,  1280,   469,
     470,     1,  1284,   473,   122,   136,   476,     3,   126,   221,
     745,   481,   814,   815,   816,   485,   486,   559,   122,   561,
     490,   491,   525,   526,   527,   122,   385,   939,   387,   126,
       1,   963,   502,   127,   124,   270,   126,  1722,   508,   509,
     543,   544,   512,   513,     3,   121,   122,   517,   518,     3,
     126,   521,   522,  1057,  1110,   525,   526,   527,  1228,   529,
     424,  1598,   532,  1453,  1068,   122,   124,   127,   126,   127,
     784,   785,   786,   543,   544,   545,  1246,   439,  1010,   549,
     442,   142,   118,  1253,   554,   555,   950,   122,   952,   559,
     121,   561,   562,     3,   564,   565,   566,  1020,   142,   569,
     814,   815,   816,  1493,     5,   126,  1496,     5,     0,   579,
     690,   691,     3,   529,   584,     5,  1445,   587,    28,   589,
    1441,   591,   122,  1441,     1,     5,   126,  1441,   598,   545,
     125,   866,   128,   695,     1,   130,     3,  1216,   873,   304,
    1425,  1426,   696,  1222,     3,     3,   881,  1604,  1425,  1426,
     778,   122,   695,  1552,   882,   126,   321,   892,  1552,     3,
     630,     5,   632,   579,     1,   725,   695,  1604,  1605,   128,
     640,     3,   125,   535,   128,   132,   538,   805,   469,  1508,
     800,     3,    73,  1559,    28,   813,  1605,   695,     1,    11,
     695,  1605,   662,   663,   664,   665,     3,  1074,  1519,     3,
    1521,     3,   121,  1080,     3,   833,   565,    65,   828,  1086,
     680,   681,  1526,   132,   942,  1092,   124,   348,   128,   689,
     121,  1605,     3,   435,   126,   695,   677,   678,     7,     8,
       9,   129,   702,  1156,   124,   963,   127,  1160,   529,   598,
    1163,   532,  1165,     0,   121,   122,   716,    28,   126,   126,
    1935,   118,   119,   723,   724,   725,   726,   727,   728,   126,
     118,   119,     3,   122,   734,     7,     8,     9,   128,     3,
     128,    73,   866,   866,    73,   745,  1074,   787,   788,   730,
     731,   732,  1010,   119,   128,   122,     3,   126,   419,   126,
     122,   761,   128,  1216,  1092,   765,   118,   119,   120,  1222,
     662,   663,   664,   665,   126,    11,   128,   817,   818,   122,
     801,   118,   119,   126,   118,   119,   121,   696,   125,   802,
     882,  1056,   304,  1605,   128,   127,    83,   132,   690,   691,
     692,   695,  1487,     7,     8,     9,    93,   807,   829,   321,
     121,   811,   121,   100,   101,   939,   939,   830,   126,  1806,
     129,   127,   564,   132,   566,   915,   916,     1,   918,     3,
    1736,   921,   922,     3,   971,   972,   836,   837,   838,  1806,
    1807,   841,   842,   843,   977,   127,   136,   118,   119,   121,
       3,   662,   663,   664,   665,   119,   120,   129,  1807,   939,
     132,   976,  1721,  1807,   864,   865,   866,  1726,   689,   122,
     870,   963,   872,   873,   695,  1795,  1796,   124,   939,   126,
     880,   881,   882,     3,   120,   885,     7,     8,     9,   889,
     126,   891,   892,  1807,   894,     3,   896,   662,   663,   664,
     665,  1487,   122,   993,   976,  1439,     3,   126,  1041,  1042,
     141,    12,    13,   144,   133,   128,    90,   130,  1010,     1,
      28,   125,    69,    70,   121,   129,   157,  1833,   159,   799,
     161,    28,  1791,   933,   221,   935,  1051,  1269,  1844,   939,
      37,   803,   942,  1057,  1209,  1069,  1069,   947,   118,   119,
     950,   127,   952,   953,     7,     8,     9,   827,   128,   787,
     788,  1226,   962,   963,   964,   118,   119,   121,     3,   831,
       5,   971,   972,   121,   974,   128,   976,   977,   132,  1051,
     127,     3,   982,   983,   984,   985,    14,    15,  1832,   817,
     818,   278,    74,    75,     3,  1807,    31,    79,   118,   119,
     121,   288,   121,   290,    86,   125,    28,     3,   129,   125,
    1010,   132,     7,     8,     9,  1715,    79,    77,   119,   120,
    1744,   664,   665,  1056,   121,  1269,  1488,   800,   110,   111,
       3,     3,    28,   125,  1559,  1662,   323,  1571,   130,   121,
     122,  1041,  1042,   119,   126,  1045,  1046,   110,   111,  1049,
    1050,  1051,   128,  1053,   130,   828,  1056,  1057,   348,    12,
      13,   882,   121,     7,     8,     9,  1066,   130,  1068,  1069,
    1070,  1906,  1187,   304,  1074,   126,   129,  1077,     3,   132,
    1080,   132,     3,  1083,     5,  2014,  1086,   135,   136,  1089,
     321,   801,  1092,  1952,  1094,   802,     7,     8,     9,   121,
     803,   993,    74,    75,  1228,  1228,  1559,    79,  1108,   118,
     119,  1057,   121,  1113,    86,  1187,  1116,   119,  1276,   829,
    1066,   942,  1068,   830,  2030,  1125,   128,  1127,   831,   419,
     417,   121,   793,   794,   129,   796,  1136,   126,   110,   111,
      65,   121,   963,   132,   119,   118,   119,    79,   121,  1149,
       3,   126,   894,   120,  1154,  1155,   128,   132,    11,   126,
     821,   822,   823,   824,  1145,   121,   119,   120,  1168,  1169,
    1170,  1171,   122,  1438,   121,  2026,   126,  2028,   110,   111,
     130,  1070,   469,   127,   121,   129,  1186,  1187,  1188,  1010,
    1190,   933,   124,   118,   119,  1453,   128,   118,   119,   121,
    1200,  2107,  1202,   864,   865,   947,   789,   790,   128,  1209,
     130,   953,     3,  1213,     5,   797,   798,  1217,   129,  1219,
     121,  1113,   509,  1223,  1116,   789,   790,  1227,  1228,  2064,
    1954,  2066,   128,   464,   465,  1493,   819,   820,  1496,   128,
      31,   130,  2148,   825,   826,   476,  1246,   121,   124,   128,
     118,   125,   128,  1253,  1788,   819,   820,   134,   132,   490,
     491,     3,  1154,  1263,    16,   118,   119,   120,   309,    11,
     138,   139,   125,   126,   315,   128,  1168,  1169,  1170,  1171,
     140,   512,   513,  1910,    69,    70,   517,   518,     1,  1270,
     521,   522,     3,   124,  2129,   141,  2131,   128,  2133,  1191,
     118,  1193,  1113,   964,   134,  1116,    91,   122,  1761,   120,
      95,  1200,    97,  1766,  1056,   126,  1769,    28,  1852,  1844,
     138,   139,   141,   122,     3,  1590,    37,   126,   559,   122,
     561,   130,   120,   126,   120,   140,  2171,  2172,   126,  2174,
     126,   120,   127,  1154,   385,   122,   387,   126,  1113,    28,
      16,  1116,   525,   526,   527,  2190,     3,  1168,  1169,  1170,
    1171,    74,    75,    74,    75,    44,    79,  1188,    79,  1190,
     543,   544,  2207,    86,   128,    86,   118,   119,   120,   120,
    1833,    28,   120,   125,   126,   126,   128,   120,   126,  1154,
      37,  1844,     1,   126,     3,    74,    75,   110,   111,   110,
     111,   797,   798,  1168,  1169,  1170,  1171,   118,   695,   128,
     121,   124,   125,   126,   122,   702,  1416,  1417,   126,   130,
    1420,  1421,   130,    14,    15,  1425,  1426,    74,    75,   825,
     826,   122,    79,   122,  1467,   126,   122,  1437,   725,    86,
    1421,  1441,  1442,   122,   122,  1445,   122,   734,   126,   120,
     126,  1451,   130,  1453,   121,   126,  1456,  1571,   745,   128,
    1460,   130,   120,   110,   111,  1465,  1466,  1467,   126,     3,
    1113,   118,   120,  1116,   121,     3,   120,   120,   126,   128,
     122,   130,   126,   126,   126,   132,   124,   122,  1488,   128,
    1490,   126,   126,  1493,    28,   124,  1496,   122,   122,  1499,
      28,   126,   126,   793,   794,  2030,   796,   119,  1508,   122,
      44,  1154,   119,   126,  1514,  1515,    44,  2144,   119,  1519,
    1520,  1521,  1522,   125,   565,  1168,  1169,  1170,  1171,    10,
      11,   821,   822,   823,   824,   122,   126,  1795,  1796,   126,
      74,    75,   913,   914,   122,   122,    74,    75,   126,   126,
     133,   838,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,   124,  1828,   126,   124,  1227,   126,  1568,  1569,
     128,  1571,     3,   133,   864,   865,   122,  2030,   133,  1579,
     126,   154,  2107,   128,   625,   158,   873,     1,   122,     3,
    1590,   124,   126,   126,   132,   882,   128,    28,   130,  1723,
    1723,   128,   889,   130,     1,   128,    37,   894,   126,   896,
    1610,  1611,    88,    89,    90,     1,     1,     3,     3,     1,
    1620,     3,  1622,  1623,   126,  1571,  1626,     1,   126,     3,
    1630,   126,  1453,  1579,  1634,   127,   124,  1637,   126,     6,
     124,     8,     9,    74,    75,   128,   128,   130,    79,   543,
     544,  1543,  1633,   130,  2107,    86,     1,   121,     3,   125,
     947,     1,  1662,     3,     1,     1,     3,     3,  1649,  1669,
     121,   124,  1493,   126,   964,  1496,   963,    74,    75,   110,
     111,   121,    79,  1767,  1768,   124,  1770,  1771,   124,    86,
     121,  1775,  1776,  1777,  1778,     3,   128,  1533,   130,  1535,
    1533,   132,  1535,   121,    74,    75,    73,  1797,  1823,    79,
    1825,   913,   914,   110,   111,   121,    86,    84,  1610,  1611,
     124,  1721,   124,  1723,   124,  1467,  1726,   124,   125,   126,
    1622,   662,   663,   128,  1849,   124,  1851,   127,  1852,   119,
     110,   111,   109,   122,  1744,   976,  1746,  1747,  1490,   662,
     663,  1823,   119,  1825,   132,   125,  1914,  1915,  1916,  1917,
    1918,  1919,  1920,  1921,   133,   132,    74,    75,   135,   136,
     137,    79,   100,   101,   842,   843,   133,  1849,    86,  1851,
    1441,   133,  1782,   133,  1445,    74,    75,   133,   119,   133,
      79,  1791,   124,   128,   128,  1795,  1796,    86,  1798,  1610,
    1611,   127,   110,   111,   126,   119,   127,   127,   133,   122,
    1810,  1622,   122,   121,  1045,  1046,  2148,   122,  1049,  1050,
    1051,   110,   111,  1823,   133,  1825,   133,   122,  1828,   121,
    1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,   122,   128,
     122,   121,   130,   130,   130,  1610,  1611,  1508,  1590,  1849,
     121,  1851,  1852,   121,    56,   124,  2014,  1622,  1767,  1768,
     124,  1770,  1771,   124,   121,  1526,  1775,  1776,  1777,  1778,
       3,   119,    44,    45,  1874,  1875,  1876,  1877,   119,   124,
    1880,   119,   122,   122,  1884,  1885,     3,  1887,   122,  1889,
     121,   121,   119,   934,   122,    28,   132,   122,   122,   132,
     126,  1901,    74,    75,  2148,   126,  1852,    79,  2023,   122,
    1910,    28,   122,  1913,    86,   127,   122,   122,   125,   130,
      37,    38,  1209,  1904,   122,  1906,   130,   130,   122,   130,
    2014,   124,   973,   464,   465,    74,    75,  1227,   110,   111,
      79,    74,    75,   127,   122,   141,    79,    86,   144,   121,
     133,  2023,  1952,    86,  1954,  1186,  1187,    74,    75,   490,
     491,   157,    79,   159,   122,   161,     1,  1610,  1611,    86,
     122,   110,   111,   133,  1795,  1796,   133,   110,   111,  1622,
     122,   512,   513,   122,   130,   130,   517,   518,  1880,    56,
     521,   522,   121,   110,   111,   128,   122,   121,   121,   130,
     130,   118,   130,   130,   121,  1914,  1915,  1916,  1917,  1918,
    1919,  1920,  1921,   122,   122,   122,   122,   122,   122,   122,
     133,  2021,  2022,  2023,  2024,  2025,  2026,   119,  2028,  1070,
     124,   133,   132,   128,   133,  2035,  2036,  2037,  2038,    74,
      75,     0,   133,   132,    79,    11,  2046,  2137,  2138,   125,
     128,    86,   124,   130,   125,  2055,   130,  2057,  2058,   125,
    1721,   141,   121,   124,   144,  1726,   128,  2067,  2068,  1880,
     122,   122,   122,   133,   122,   110,   111,   157,   133,   159,
    1121,   161,    41,  2064,   133,  2066,   133,   133,   133,   124,
     133,   126,   133,   122,    37,   122,   122,    64,   122,    64,
      59,    44,    45,  2103,  2104,  2014,   124,    66,   133,   122,
    2110,  2111,   133,   133,  2114,  1880,  2116,   133,   124,  2119,
     124,   133,   124,  2123,    83,   124,   122,    86,   128,   124,
    1791,    74,    75,    92,    93,   124,    79,   476,  2138,   124,
    2140,   100,   101,    86,  2144,   124,   122,  2128,  2129,     3,
    2131,  1441,  2133,   124,   113,  1445,  2156,   116,   476,   476,
     124,   124,   124,  2055,   124,  2057,   124,   110,   111,   128,
     476,  1832,   476,  2179,    28,   118,  1522,   136,   982,  2179,
    2180,  2162,   141,   142,  2184,   144,   321,   864,  1229,   919,
    2171,  2172,   288,  2174,   974,   154,  2196,   156,   157,   158,
     159,   288,   161,  1490,  1488,   321,   728,   424,  1833,  2190,
    1251,   434,    44,    45,   734,   100,   314,  2128,  1508,    93,
      74,    75,    93,   265,   101,    79,  2207,   186,   187,    74,
      75,  2123,    86,   270,    79,    93,  1526,  1880,  1782,   198,
      -1,    86,    74,    75,  2055,    -1,  2057,    79,    -1,    -1,
      -1,    -1,    -1,   212,    86,    -1,   110,   111,    -1,    -1,
      -1,    -1,   221,     3,    -1,   110,   111,    -1,   464,   465,
      -1,    -1,     1,    -1,     3,     4,     5,   122,   110,   111,
      -1,    -1,    -1,  1514,  1515,    -1,    -1,    -1,    28,   121,
    2055,  1952,  2057,    -1,   490,   491,    -1,    -1,    -1,    28,
      -1,    -1,    -1,  1590,    -1,    -1,   265,    -1,     0,   268,
     269,   270,  2123,    -1,    -1,    -1,   512,   513,    -1,   278,
      -1,   517,   518,    -1,    -1,   521,   522,    -1,    -1,   288,
     289,   290,    -1,    -1,    74,    75,    65,  1568,  1569,    79,
      -1,    -1,    71,    72,    -1,    -1,    86,    -1,    -1,   308,
      -1,    44,    45,    -1,    -1,   314,    85,    -1,  2123,    -1,
      -1,    -1,    -1,   559,   323,   561,    -1,    -1,    -1,    98,
     110,   111,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,    74,    75,    -1,   464,   465,    79,    -1,   128,    -1,
      -1,    83,   121,    86,    -1,    -1,   476,    -1,   385,    -1,
     387,    93,   131,   132,    -1,    -1,    -1,     0,   100,   101,
     490,   491,  2055,    -1,  2057,    74,    75,   110,   111,    -1,
      79,   380,    -1,    -1,    -1,   118,   385,    86,   387,    -1,
      -1,  1721,   512,   513,    -1,    -1,  1726,   517,   518,    -1,
      -1,   521,   522,   142,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,   154,  1497,  1744,   417,   158,
     419,   420,    -1,   122,   423,   424,    74,    75,    -1,    -1,
     429,    79,    -1,    -1,   433,   434,    -1,   436,    86,   559,
    2123,   561,    -1,    -1,    -1,    -1,   464,   465,    -1,    -1,
      83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      93,  1791,   110,   111,    -1,   464,   465,   100,   101,    -1,
     469,   470,   490,   491,  1045,  1046,    -1,   476,  1049,  1050,
      -1,    -1,   481,    -1,    -1,    -1,    -1,   486,    -1,   221,
      -1,   490,   491,    -1,   512,   513,    -1,    -1,    -1,   517,
     518,  1828,  1832,   521,   522,    -1,    -1,    -1,    -1,   142,
     509,    -1,    -1,   512,   513,    -1,    -1,    -1,   517,   518,
      -1,   154,   521,   522,    -1,   158,   265,    -1,    -1,   528,
      -1,    -1,    -1,    -1,    -1,    -1,   535,    -1,   565,   538,
      -1,    -1,   528,    -1,    -1,    -1,   278,    -1,     0,    -1,
      -1,    -1,  1823,    -1,  1825,   554,   288,    -1,   290,    -1,
     559,    -1,   561,    -1,    -1,   564,   565,    -1,    -1,   308,
      -1,    74,    75,    -1,    -1,   314,    79,    -1,  1849,    -1,
    1851,    -1,    -1,    86,    -1,   584,    -1,    -1,   587,    -1,
     589,    -1,   591,    -1,    -1,    -1,    -1,    -1,   625,   598,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,
      -1,     0,  1952,    -1,    -1,    28,    -1,  1954,    -1,   132,
      -1,    83,    -1,    -1,    37,    -1,    -1,    -1,    74,    75,
      -1,    93,    -1,    79,  1725,   278,  1727,    -1,   100,   101,
      86,    -1,    -1,    -1,    -1,   288,    -1,   290,    -1,    -1,
    1741,  1742,    -1,   662,   663,   664,   665,    -1,    -1,    -1,
      -1,    74,    75,    -1,   110,   111,    79,   913,   914,    -1,
      -1,    -1,    -1,    86,   423,   417,   122,    -1,    -1,    -1,
     142,   690,   691,   692,    -1,   434,   695,    -1,    -1,    -1,
      -1,    -1,   154,   702,    83,    -1,   158,   110,   111,    -1,
      -1,    -1,    -1,    -1,    93,   118,    -1,   716,   121,   122,
      -1,   100,   101,    -1,   723,   724,   725,    -1,   727,   728,
     716,    -1,    -1,    -1,    -1,   734,    -1,   469,    -1,    -1,
     976,    -1,    -1,    -1,    -1,    -1,   745,   486,    -1,   748,
    2021,  2022,  2023,  2024,  2025,    -1,   755,    -1,    -1,   758,
      -1,    -1,   748,   142,  2035,  2036,  2037,  2038,    -1,   755,
      -1,    -1,   758,    -1,    -1,   154,    -1,   509,     3,   158,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     7,    -1,
     423,    10,    11,    12,    13,    14,    15,    16,    17,    -1,
      -1,   434,    -1,    28,    -1,    -1,    -1,    -1,    -1,  1045,
    1046,    -1,    37,  1049,  1050,  1051,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,    -1,
      -1,    -1,  2103,  2104,    -1,    -1,   288,    -1,   290,   838,
      74,    75,   841,   842,   843,    79,    -1,    -1,    -1,    74,
      75,    -1,    86,   486,    79,    -1,   976,    -1,    -1,    -1,
      -1,    86,    -1,    -1,    -1,   864,   865,   866,    -1,    -1,
      -1,    -1,  1953,    -1,   873,    -1,   110,   111,    -1,    -1,
      -1,  1962,   881,   882,   118,   110,   111,   121,    -1,    -1,
     889,    -1,    -1,   892,    -1,   894,   121,   896,    -1,   278,
     119,   120,    -1,    -1,    -1,    -1,    -1,   934,    -1,   288,
     129,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,
     139,   140,   141,   142,    -1,  1045,  1046,    -1,    -1,  1049,
    1050,  1051,    -1,    -1,    -1,    -1,    -1,  2018,  2019,    -1,
     939,    -1,    -1,  1514,  1515,    -1,   973,    -1,   947,    -1,
    1186,  1187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   695,   963,   964,    -1,    -1,    -1,    -1,
     702,   423,   971,   972,    -1,    -1,    -1,   976,    -1,    -1,
      -1,    -1,   434,   982,   723,   724,    -1,    -1,   727,   728,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1568,  1569,    -1,
      -1,     3,   734,  1002,  1003,  1004,    -1,    -1,    -1,    -1,
      -1,  1010,     0,    -1,    -1,    -1,  1002,  1003,  1004,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,  1045,  1046,    -1,
      -1,  1049,  1050,    -1,   486,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1070,   423,    -1,  1045,  1046,    -1,    -1,
    1049,  1050,  1051,    -1,    -1,   434,    -1,    -1,    -1,    -1,
      -1,    -1,   695,    -1,    52,    -1,  1186,  1187,    -1,    -1,
    1069,  1070,    74,    75,    -1,  1074,    -1,    79,    -1,    -1,
      -1,  1080,    -1,    -1,    86,    -1,    -1,  1086,    -1,    -1,
      -1,    -1,    -1,  1092,  1121,    83,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    91,    -1,    93,   838,   486,   110,   111,
      -1,  1110,   100,   101,  1113,    -1,   118,  1116,    -1,   121,
      -1,    -1,    -1,    -1,  1110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   873,   881,   131,   132,    -1,    -1,    -1,    -1,    -1,
     882,    -1,    -1,   892,    -1,  1154,    -1,   889,    -1,    -1,
      -1,    -1,    -1,    -1,   896,    -1,    -1,    -1,    -1,  1168,
    1169,  1170,  1171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1186,  1187,    -1,
      -1,    -1,  1191,    -1,  1193,   183,    -1,    -1,    -1,    -1,
      -1,  1200,  1229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1209,    -1,    -1,    -1,    -1,   947,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1251,    -1,    -1,  1226,  1227,  1228,
      -1,   963,    -1,    -1,    -1,    -1,   268,   269,    -1,    -1,
      -1,    -1,   230,   695,    -1,   233,    -1,  1246,   881,    -1,
      -1,    -1,     0,    -1,  1253,    -1,    -1,    -1,    -1,   892,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1010,    -1,  1272,  1273,    -1,    -1,   265,  1514,  1515,
    1279,  1280,    -1,    -1,  1283,  1284,  1272,  1273,    -1,    -1,
     278,    -1,    -1,  1279,  1280,    -1,    -1,  1283,  1284,    -1,
     288,    -1,   290,    -1,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   695,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1568,  1569,    82,    83,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    91,    -1,    93,    -1,    -1,    -1,    -1,
      -1,    -1,   100,   101,    -1,    -1,    -1,    -1,   268,   269,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   131,   132,   133,   134,   135,    -1,    -1,
      -1,    -1,    -1,   141,  1514,  1515,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,    -1,   157,
      -1,   159,    -1,   161,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1425,  1426,    -1,   881,
      -1,    -1,    -1,    -1,    -1,   183,   184,   185,    -1,    -1,
     892,    -1,  1441,    -1,    -1,    -1,  1445,   435,  1568,  1569,
    2021,  2022,    -1,  2024,  2025,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2035,  2036,  2037,  2038,  1200,    -1,
    1497,    -1,   220,   221,    -1,    -1,    -1,  1209,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1226,  1487,    -1,
      -1,  1490,    -1,    -1,    -1,    -1,  1514,  1515,    -1,    -1,
      -1,  1487,   881,   535,    -1,    -1,   538,  1246,    -1,  1508,
      -1,    -1,    -1,   892,  1253,  1514,  1515,   265,    -1,    -1,
    1519,  1520,  1521,  1522,    -1,    -1,    -1,    -1,    -1,    -1,
     278,    -1,  2103,  2104,    -1,    -1,    -1,   525,   526,   527,
     288,   529,   290,    -1,   532,    -1,    -1,    -1,    -1,    -1,
    1568,  1569,    -1,    -1,    -1,   543,   544,   545,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,  1568,
    1569,    -1,    -1,    -1,    -1,    -1,   564,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1823,    -1,  1825,
      28,  1590,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    -1,    -1,    -1,  1604,  1605,    -1,    -1,    -1,
      -1,  1610,  1611,  1849,    -1,  1851,    -1,    -1,  1604,  1605,
      -1,    -1,    -1,    -1,  1623,   535,    -1,  1626,   538,    -1,
     662,   663,   664,   665,    -1,  1634,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,   393,   394,   395,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     692,    -1,    86,    -1,    -1,    -1,    -1,    -1,    -1,   417,
    1669,    -1,   110,   111,    -1,    -1,   424,    -1,    -1,    -1,
     118,    -1,    -1,   121,    -1,    -1,   124,   435,   126,   127,
      -1,    -1,    -1,    -1,   112,    -1,    -1,    -1,  1725,    -1,
    1727,   689,    -1,  1823,   128,  1825,    -1,   695,    -1,    -1,
      -1,    -1,   136,    -1,  1741,  1742,   464,   465,   136,    -1,
      -1,   469,  1721,    -1,  1723,   473,    -1,  1726,   476,  1849,
      -1,  1851,   156,    -1,    -1,    -1,    -1,   485,    -1,    -1,
      -1,    -1,   490,   491,    -1,  1744,    -1,    -1,    -1,    -1,
      -1,    -1,   662,   663,   664,   665,    -1,    -1,  1490,    -1,
      -1,   509,    -1,    -1,   512,   513,    -1,    -1,   343,   517,
     518,    -1,    -1,   521,   522,    -1,    -1,   525,   526,   527,
     198,    -1,   692,    -1,    -1,  2021,  2022,  2023,  2024,  2025,
      -1,    -1,  1791,    -1,    -1,   543,   544,    -1,    -1,  2035,
    2036,  2037,  2038,    -1,    -1,    -1,    -1,  1806,  1807,    -1,
      -1,   559,    -1,   561,    -1,    -1,   564,    -1,   566,    -1,
    1806,  1807,    -1,    -1,  1823,    -1,  1825,    -1,    -1,  1828,
      -1,    -1,    -1,   581,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1849,    -1,  1851,    -1,    -1,    -1,    -1,    -1,  1590,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2103,  2104,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   300,    -1,    -1,  1884,  1885,   305,   306,    -1,
      -1,   309,    -1,    -1,    -1,    -1,    -1,   315,    -1,    -1,
      -1,  2021,  2022,  2023,  2024,  2025,   894,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,  2035,  2036,  2037,  2038,    -1,
      -1,    -1,    -1,    -1,    -1,   343,  1953,    -1,    -1,    -1,
     348,    -1,    -1,    -1,    -1,  1962,    -1,    -1,    -1,    -1,
      -1,   689,    -1,    -1,    -1,   933,    -1,   695,    -1,    -1,
      -1,    -1,    -1,  1952,    -1,  1954,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   953,    -1,   385,    -1,   387,
      -1,    -1,    -1,    -1,    -1,   723,    -1,    -1,    -1,   727,
      -1,    -1,    -1,  2103,  2104,    -1,    -1,    -1,    -1,    -1,
      -1,  2018,  2019,    -1,    -1,   419,   420,   745,    -1,    -1,
     424,   419,    -1,  2021,  2022,    -1,  2024,  2025,    -1,   433,
      -1,    -1,   436,    -1,    -1,    -1,    -1,  2035,  2036,  2037,
    2038,    -1,  2021,  2022,  2023,  2024,  2025,  2026,    -1,  2028,
      -1,    -1,    -1,    -1,    -1,    -1,  2035,  2036,  2037,  2038,
      -1,    -1,    -1,    -1,    -1,    -1,   470,    -1,    -1,    -1,
      -1,    -1,   476,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     635,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1056,  1057,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1113,    -1,    -1,  1116,  2103,  2104,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1828,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2103,  2104,    -1,    -1,    -1,    -1,
     528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   866,    -1,
      -1,    -1,  1154,    -1,    -1,   873,    -1,    -1,    -1,    -1,
     554,    -1,   880,   881,   882,    -1,  1168,  1169,  1170,  1171,
     564,   889,    -1,    -1,   892,    -1,   894,   565,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1191,
     584,  1193,    -1,   587,    -1,   589,    -1,   591,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   597,
      -1,    -1,    -1,    -1,    -1,   933,    -1,    -1,    -1,   764,
      -1,    -1,    -1,    -1,   942,    -1,    -1,    -1,    -1,   947,
    1188,    -1,  1190,  1113,    -1,   953,  1116,   625,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   963,    -1,    -1,    -1,    -1,
      -1,    -1,   797,   798,   799,   800,   801,    -1,   976,   804,
      -1,    -1,    -1,    -1,    -1,   810,    -1,    -1,   986,    -1,
      -1,    -1,    -1,    -1,  1154,    -1,    -1,    -1,    -1,    -1,
     825,   826,   827,   828,   829,    -1,    -1,   832,  1168,  1169,
    1170,  1171,  1010,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   696,    -1,
      -1,  1191,    -1,  1193,   702,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1045,  1046,    -1,
      -1,  1049,  1050,  1051,    -1,    -1,    -1,    -1,  1056,  1057,
      -1,   729,    -1,    -1,    -1,   733,   734,    -1,    -1,  1067,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     748,    -1,    -1,   270,    -1,    -1,    -1,   755,    -1,    -1,
     758,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     778,    -1,    -1,    -1,    -1,    -1,   784,   785,   786,   787,
     788,   789,   790,    -1,    -1,   793,   794,    -1,   796,   797,
     798,   799,   800,   801,   802,   803,    -1,   805,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   813,   814,   815,   816,   817,
     818,   819,   820,   821,   822,   823,   824,   825,   826,   827,
     828,   829,   830,   831,    -1,   833,    -1,   841,   842,   843,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1186,  1187,
     864,   865,   866,    -1,    -1,    -1,   864,   865,    -1,    -1,
      -1,    -1,    -1,   119,   120,    -1,    -1,    -1,    -1,    -1,
      -1,  1209,    -1,   129,    -1,    -1,    -1,    -1,   134,   135,
     136,    -1,   138,   139,   140,   141,   142,    -1,  1226,  1467,
    1228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1246,    -1,
      -1,    -1,   439,    -1,     1,  1253,    -1,     4,     5,     6,
      -1,     8,     9,    -1,   932,   939,   934,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     964,    -1,    -1,    -1,    -1,    -1,   964,   971,   972,    -1,
      -1,    -1,    -1,  1128,    -1,   973,    -1,    -1,   982,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,  1610,  1611,
      -1,  1156,    -1,  1571,  1002,    -1,  1004,    84,  1163,    -1,
      -1,  1623,    -1,    -1,  1626,    -1,    -1,    -1,    -1,    -1,
      -1,    98,  1634,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1197,    -1,  1199,    -1,   123,   124,    -1,   126,
     127,   128,    -1,    -1,   131,   132,    -1,   134,   135,   136,
     137,  1216,    -1,    -1,    -1,  1069,    -1,  1222,    -1,    -1,
    1074,    -1,  1070,    -1,    -1,    -1,  1080,    -1,    -1,    -1,
      -1,     1,  1086,     3,    -1,    -1,    -1,    -1,  1092,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
    1438,    -1,  1110,   630,    -1,    -1,    -1,    37,    38,    -1,
    1610,  1611,    -1,  1121,    -1,  1453,    -1,    -1,    -1,    -1,
      -1,    -1,  1460,  1623,    -1,    -1,  1626,    -1,    -1,  1467,
      -1,    -1,    -1,    -1,  1634,   662,   663,   664,   665,  1147,
    1148,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
    1488,    -1,  1490,    -1,    -1,    -1,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1514,  1515,    -1,    -1,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,   118,   136,
      -1,   121,    -1,    -1,   124,    -1,   126,   127,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1227,  1228,    -1,    -1,    -1,    -1,  1227,
      -1,  1229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1568,  1569,    -1,  1571,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1251,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   198,  1590,    -1,    -1,   630,    -1,    -1,    -1,    -1,
      -1,  1269,  1884,  1885,    -1,  1273,    -1,    -1,  1276,    -1,
      -1,    -1,  1280,    -1,  1852,    -1,  1284,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   664,
     665,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   300,    -1,    -1,    -1,    -1,   305,   306,
      -1,    -1,   309,    -1,    -1,    -1,    -1,    -1,   315,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1715,    -1,   326,
     112,    -1,    -1,    -1,  1884,  1885,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   343,    -1,    -1,    -1,
      -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1425,  1426,    -1,    -1,    -1,    -1,    -1,   945,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1441,    -1,    -1,
      -1,  1445,    -1,  1441,    -1,    -1,    -1,  1445,   385,    -1,
     387,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   419,    -1,    -1,    -1,    -1,    -1,    -1,  1487,
      -1,    -1,    -1,    -1,    -1,  1823,    -1,  1825,    -1,  1497,
    1828,    -1,    -1,    -1,  1508,    -1,    -1,    -1,    -1,    -1,
    1508,    -1,    -1,    -1,    -1,  1519,  1520,  1521,  1522,    -1,
      -1,  1849,    -1,  1851,    -1,    -1,    -1,    -1,  1526,    -1,
    1528,    -1,    -1,  1861,    -1,  1533,    -1,  1535,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,    -1,
      -1,    -1,    -1,    -1,  1552,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   528,    -1,    -1,    -1,    -1,  1113,    -1,    -1,  1116,
      -1,    -1,    -1,    -1,   326,    -1,  1761,  1605,  1125,    -1,
      -1,  1766,  1767,  1768,  1769,  1770,  1771,    -1,    -1,    -1,
    1775,  1776,  1777,  1778,    -1,    -1,    -1,    -1,   565,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1154,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1168,  1169,  1170,  1171,    -1,    -1,    -1,    -1,    -1,
     597,    -1,    -1,    -1,    -1,  1669,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,    -1,    -1,   625,    -1,
      -1,    -1,    -1,  2021,  2022,  2023,  2024,  2025,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2035,  2036,  2037,
    2038,    -1,    -1,    -1,    -1,    -1,    -1,  1721,    -1,  1723,
      -1,    -1,  1726,  1721,    -1,    -1,    -1,  1725,  1726,  1727,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1736,    -1,
      -1,    -1,    -1,  1741,  1742,    -1,    -1,    -1,  1113,    -1,
    1748,  1116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   696,
    1125,    -1,    -1,    -1,    -1,   702,    -1,    -1,    -1,  1767,
    1768,   198,  1770,  1771,    -1,  2103,  2104,  1775,  1776,  1777,
    1778,    -1,    -1,    -1,    -1,    -1,    -1,  1791,    -1,  1154,
      -1,    -1,   729,  1791,    -1,    -1,   733,   734,    -1,    -1,
      -1,    -1,    -1,  1168,  1169,  1170,  1171,    -1,    -1,  1807,
      -1,   748,   534,    -1,    -1,    -1,    -1,    -1,   755,    -1,
      -1,   758,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1832,    -1,    -1,    -1,    -1,    -1,
      -1,   778,    -1,    -1,    -1,    -1,    -1,   784,   785,   786,
     787,   788,   789,   790,    -1,    -1,   793,   794,    -1,   796,
     797,   798,   799,   800,   801,   802,   803,    -1,   805,    -1,
      -1,    -1,    -1,    -1,    -1,   597,   813,   814,   815,   816,
     817,   818,   819,   820,   821,   822,   823,   824,   825,   826,
     827,   828,   829,   830,   831,    -1,   833,    -1,    -1,   326,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   630,    -1,
      -1,    -1,    -1,  1911,  1912,    -1,  1914,  1915,  1916,  1917,
    1918,  1919,  1920,  1921,    -1,    -1,    -1,   864,   865,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     662,   663,   664,   665,    -1,    -1,    -1,    -1,  1952,    -1,
      -1,    -1,    -1,    -1,  1952,  1953,    -1,    -1,   385,    -1,
     387,    -1,    -1,    -1,  1962,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   932,    -1,   934,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   729,    -1,    -1,
      -1,   733,    -1,    -1,    -1,    -1,  2014,    -1,    -1,    -1,
    2018,  2019,  2026,    -1,  2028,    -1,    -1,   964,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   973,    -1,    -1,    -1,
      -1,    -1,   764,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   778,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1002,    -1,  1004,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   805,    -1,    -1,    -1,    -1,   810,    -1,
      -1,   813,    -1,  1610,  1611,    -1,    -1,    -1,    -1,    -1,
      -1,   528,    -1,  1620,    -1,  1622,  1623,    -1,    -1,  1626,
      -1,   833,    -1,    -1,    -1,    -1,    -1,  1634,    -1,    -1,
    1637,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2130,  1070,    -1,    -1,    -1,    -1,   565,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     597,    -1,    -1,  1110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   625,    -1,
      -1,  2199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1147,  1148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1610,  1611,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1620,    -1,  1622,  1623,    -1,
      -1,  1626,    83,    84,    -1,    -1,    -1,    -1,    -1,  1634,
      91,    -1,  1637,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1227,    -1,  1229,    -1,    -1,    -1,    -1,    -1,  1020,    -1,
      -1,    -1,   729,    -1,    -1,    -1,   733,    -1,    -1,    -1,
     131,   132,    -1,    -1,  1251,    -1,    -1,    -1,    -1,    -1,
      -1,   748,    -1,    -1,    -1,    -1,    -1,    -1,   755,    -1,
      -1,   758,  1269,    -1,    -1,    -1,  1273,    -1,    -1,  1276,
      -1,    -1,    -1,  1280,    -1,    -1,    -1,  1284,    -1,    -1,
      -1,   778,    -1,    -1,    -1,    -1,    -1,  1874,  1875,  1876,
    1877,    -1,   183,  1880,    -1,    -1,    -1,  1884,  1885,    -1,
    1887,    -1,  1889,    -1,    -1,    -1,    -1,    -1,   805,    -1,
      -1,    -1,    -1,    -1,  1901,    -1,   813,    -1,    -1,    -1,
      -1,  1113,    -1,    -1,  1116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1125,    -1,    -1,   833,    -1,    -1,   230,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1147,  1148,    -1,    -1,    -1,
      -1,    -1,  1154,    -1,  1156,    -1,    -1,    -1,  1160,    -1,
      -1,  1163,    -1,  1165,   265,    -1,  1168,  1169,  1170,  1171,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1216,    -1,    -1,    -1,    -1,    -1,
    1222,    -1,    -1,    -1,  1441,   932,    -1,   934,  1445,  1874,
    1875,  1876,  1877,    -1,    -1,  1880,    -1,    -1,    -1,  1884,
    1885,    -1,  1887,    -1,  1889,    -1,    -1,    -1,    -1,  2046,
      -1,    -1,    -1,    -1,    -1,    -1,  1901,    -1,  2055,    -1,
    2057,    -1,    -1,    -1,    -1,    -1,   973,    -1,    -1,    -1,
    1487,    -1,    -1,    -1,  1276,    -1,    -1,    -1,    -1,    -1,
    1497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     141,  1508,   393,   144,    -1,  1002,    -1,  1004,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   157,    -1,   159,  1526,
     161,  1528,    -1,  2110,  2111,    -1,  1533,  2114,  1535,  2116,
      -1,    -1,  2119,    -1,    -1,    -1,  2123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,  1552,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2156,
      -1,    -1,    -1,  1070,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2184,  1605,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2046,    -1,  1110,    -1,    -1,    -1,    -1,    -1,    -1,
    2055,    -1,  2057,    -1,  1121,    -1,    -1,    -1,    -1,   270,
      -1,    -1,    -1,    -1,   525,   526,   527,    -1,   529,    -1,
      -1,   532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1147,  1148,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   564,    -1,  2110,  2111,    -1,    -1,  2114,
      -1,  2116,    -1,    -1,  2119,    -1,    -1,    -1,  2123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1721,    -1,    -1,    -1,  1725,  1726,
    1727,  2156,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1736,
      -1,    -1,  1229,    -1,  1741,  1742,  1528,    -1,   132,    -1,
      -1,  1748,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2184,
      -1,    -1,    -1,    -1,  1251,    -1,    -1,    -1,    -1,    -1,
    1767,  1768,    -1,  1770,  1771,    -1,    -1,  1559,  1775,  1776,
    1777,  1778,    -1,    -1,    -1,    -1,  1273,    -1,    -1,  1276,
      -1,    -1,    -1,  1280,  1791,    -1,    -1,  1284,    -1,   183,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   689,    -1,
    1807,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1610,  1611,
      -1,    -1,    -1,   464,   465,  1832,    -1,   221,  1620,    -1,
    1622,  1623,    -1,    -1,  1626,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1634,    -1,    -1,  1637,    -1,    -1,    -1,   490,
     491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   512,   513,    -1,    -1,    -1,   517,   518,    -1,    -1,
     521,   522,    -1,    -1,    -1,    -1,    -1,   528,    -1,    -1,
      -1,    -1,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1911,  1912,    -1,  1914,  1915,  1916,
    1917,  1918,  1919,  1920,  1921,    -1,    -1,    -1,   559,    -1,
     561,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1736,  1952,  1953,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1962,  1748,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1761,
      -1,    -1,    -1,    -1,  1766,    -1,    -1,  1769,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   630,
    1487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
    1497,    -1,    -1,   894,    -1,   399,    -1,  2014,    -1,    -1,
      -1,  2018,  2019,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   662,   663,   664,   665,    -1,    -1,    -1,    -1,    -1,
      -1,  1528,    -1,    -1,    -1,    -1,  1533,    -1,  1535,    -1,
      -1,  1833,   933,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1844,    -1,    -1,  1552,    -1,    -1,    -1,   950,
      -1,   952,   953,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,
      -1,    -1,  1874,  1875,  1876,  1877,    -1,    -1,  1880,    -1,
      -1,    -1,  1884,  1885,    -1,  1887,    -1,  1889,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   748,  1605,  1901,
      -1,    -1,    -1,    -1,   755,    -1,    -1,   758,    -1,  1911,
    1912,    -1,    -1,  2130,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   529,    -1,    -1,   532,    -1,
      -1,  2148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   545,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1056,  1057,    -1,    -1,    -1,
      -1,    -1,   566,    -1,    -1,     1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,    -1,    -1,
      -1,    -1,  2199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,  1725,    -1,
    1727,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2030,  1736,
      66,    -1,    -1,    -1,  1741,  1742,    -1,    -1,    74,    75,
      -1,  1748,    -1,    79,  2046,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,  2055,    -1,  2057,    -1,    -1,    -1,    -1,
      -1,    -1,   913,   914,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,    -1,   689,    -1,  1188,    -1,  1190,
      -1,   695,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1807,    -1,    -1,    -1,    -1,  2107,    -1,    -1,  2110,  2111,
      -1,    -1,  2114,    -1,  2116,    -1,    -1,  2119,    -1,    -1,
      -1,  2123,    -1,    -1,    -1,   976,    -1,    -1,  2130,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2148,    -1,    -1,    -1,
      -1,  1002,    -1,  1004,  2156,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1045,  1046,    -1,  2199,  1049,  1050,
    1051,    -1,    -1,    -1,  1911,  1912,     0,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1953,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1962,    -1,    51,    -1,  1110,
      -1,    -1,  1113,    -1,    -1,  1116,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1125,    -1,    -1,    -1,   882,    -1,
      -1,    -1,    -1,    -1,    -1,   889,    -1,    -1,    -1,    83,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,
      -1,    -1,    -1,  1154,    -1,    -1,   100,   101,    -1,    -1,
      -1,  2018,  2019,    -1,    -1,    -1,    -1,  1168,  1169,  1170,
    1171,    -1,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1186,  1187,     3,   942,    -1,
      -1,    -1,    -1,   947,    -1,    -1,    -1,    -1,   142,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   963,
     154,    -1,    28,    -1,   158,    -1,  1467,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,  1010,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,  1273,  2130,    -1,    -1,    -1,   221,    -1,  1280,
      -1,    -1,    -1,  1284,   100,    -1,    -1,    -1,    -1,    -1,
      -1,  2148,    -1,    -1,   110,   111,   112,   113,   114,   115,
      -1,    -1,   118,  1057,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,  1066,    -1,  1068,    -1,   132,    -1,    -1,    -1,
    1571,   265,    -1,    -1,   268,   269,   270,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2199,    -1,   288,   289,   290,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,    -1,
     314,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   323,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,  1188,    -1,  1190,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,   121,   122,   123,
      -1,    -1,    -1,   417,    -1,    -1,    -1,   131,   132,   423,
     134,   135,   136,   137,    -1,    -1,  1487,    -1,    -1,    -1,
     434,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1514,  1515,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,
      -1,    -1,  1533,    -1,  1535,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   486,    -1,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   509,    -1,  1568,  1569,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,    -1,    -1,
      -1,   535,    -1,    -1,   538,    -1,    -1,    -1,    -1,    -1,
      -1,  1852,    -1,    -1,  1605,    -1,    -1,    -1,    65,  1610,
    1611,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,  1620,
     270,  1622,  1623,    -1,    -1,  1626,    -1,    84,    85,    -1,
      -1,    -1,    -1,  1634,    -1,    -1,  1637,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,   122,   123,    -1,    -1,   126,
      -1,    -1,    -1,   323,   131,   132,   133,   134,   135,   136,
     137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,    -1,    -1,    -1,  1453,
      -1,    -1,    -1,    -1,    -1,    -1,  1460,    -1,    -1,     0,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   662,   663,
     664,   665,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1488,    -1,  1490,    -1,    -1,  1493,
      -1,    -1,  1496,    -1,    -1,    -1,   690,   691,   692,    -1,
      -1,   695,    -1,    -1,    -1,    -1,    -1,    -1,   702,    -1,
      51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   716,    -1,    -1,    -1,    -1,    -1,    -1,   723,
     724,   725,    -1,   727,   728,   435,    -1,    -1,    -1,    -1,
     734,    -1,    83,    84,    -1,    -1,    -1,    88,    -1,    -1,
      -1,   745,    93,    -1,   748,    -1,  1807,    -1,    -1,   100,
     101,   755,    -1,    -1,   758,    -1,    -1,  1571,    -1,    -1,
      -1,    -1,  1823,    -1,  1825,  1579,    -1,   118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1590,    -1,    -1,    -1,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1849,    -1,
    1851,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1874,  1875,  1876,  1877,    -1,    -1,  1880,
      -1,    -1,    -1,  1884,  1885,    -1,  1887,    -1,  1889,    -1,
      -1,   182,    -1,   326,   838,    -1,    -1,    -1,    -1,    -1,
    1901,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,
     343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   873,
     221,    -1,    -1,    -1,    -1,    -1,    -1,   881,   882,    -1,
      -1,    -1,    -1,    -1,    -1,   889,    -1,    -1,   892,   893,
     894,    -1,   896,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   635,    -1,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,
      -1,   651,    -1,   947,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   662,   663,   664,   665,    -1,    -1,    -1,   963,
    2021,  2022,  2023,  2024,  2025,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2035,  2036,  2037,  2038,    -1,    -1,
      -1,  1795,  1796,    -1,  1798,  2046,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2055,    -1,  2057,    -1,  1002,  1003,
    1004,   711,    -1,    -1,    -1,    -1,  1010,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   739,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1852,    -1,
      -1,    -1,  2103,  2104,    -1,    -1,    -1,    -1,    -1,  2110,
    2111,    -1,    -1,  2114,    -1,  2116,   766,    -1,  2119,    -1,
      -1,    -1,  2123,    -1,    -1,    -1,   417,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   804,  2156,    -1,    -1,    -1,    -1,
      -1,    -1,   812,    -1,    -1,    -1,  1110,    -1,    -1,  1113,
      -1,    -1,  1116,    -1,    -1,    -1,    -1,    -1,   469,    -1,
      -1,   472,   832,  2184,    -1,  1129,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   635,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   509,    -1,
      -1,    -1,    -1,    -1,  1168,  1169,  1170,  1171,    -1,    -1,
      -1,    -1,    -1,    -1,   525,   526,   527,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   894,    -1,    -1,  1191,    -1,  1193,
      -1,    -1,   543,   544,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1209,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   564,    -1,   566,    -1,    -1,    -1,    -1,
      -1,    -1,  1226,    -1,    -1,    -1,   577,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1246,    -1,    -1,    -1,    -1,    -1,    -1,  1253,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   613,    -1,    -1,    -1,    -1,    -1,  1272,  1273,
      -1,   764,    -1,    -1,    -1,  1279,  1280,    -1,    -1,  1283,
    1284,    -1,    -1,    -1,    -1,   778,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,   797,   798,   799,   800,   801,    -1,
      -1,   804,   805,    -1,    -1,    -1,    -1,   810,    -1,    -1,
     813,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   825,   826,   827,   828,   829,   688,    -1,   832,
     833,    -1,    -1,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,   723,    -1,    -1,    -1,   727,    84,    85,    -1,
      -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,   745,   102,   103,   104,   105,   106,
     107,   108,   109,  1113,    -1,    -1,  1116,  1117,  1118,    -1,
    1120,   118,    -1,    -1,   121,   122,   123,    -1,  1128,   126,
      -1,    -1,    -1,   130,   131,   132,  1136,   134,   135,   136,
     137,    -1,    -1,  1143,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1154,    -1,    -1,    -1,    -1,    -1,
      -1,  1161,    -1,    -1,    -1,    -1,  1166,    -1,  1168,  1169,
    1170,  1171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,    -1,
      -1,    -1,    -1,  1487,    -1,    -1,  1490,  1197,    -1,  1199,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1218,    -1,
      -1,    -1,   221,    -1,  1224,   866,   867,    -1,    -1,    -1,
      -1,    -1,   873,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     881,   882,    -1,    -1,    -1,    -1,    -1,  1247,   889,    -1,
      -1,   892,   893,   894,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,   268,
     269,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,    -1,   933,    -1,  1294,    -1,  1590,    -1,    -1,    -1,
     941,    -1,    -1,    -1,    -1,    -1,   947,    -1,    -1,   308,
    1604,  1605,   953,    -1,    -1,   314,  1610,  1611,    -1,    -1,
      -1,    -1,   963,    -1,   323,    -1,    -1,    -1,    -1,  1623,
      -1,    -1,  1626,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1634,    -1,    -1,    -1,    -1,  1128,  1346,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1359,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1010,
      -1,    -1,    -1,  1156,    -1,    -1,    -1,    -1,    -1,    -1,
    1163,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1410,    28,    -1,    -1,  1197,  1056,  1199,    -1,   417,    -1,
      -1,    -1,    -1,    -1,  1065,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1216,    -1,    -1,    -1,    -1,    -1,  1222,
      -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    65,    -1,
    1744,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,
     469,    -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,  1276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,   122,   123,    -1,    -1,   126,
     509,    -1,  1806,  1807,   131,   132,   133,   134,   135,   136,
     137,    -1,    -1,    -1,    -1,   131,   132,    -1,    -1,   528,
      -1,    -1,    -1,    -1,  1828,    -1,   535,    -1,    -1,   538,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1226,    -1,  1228,    -1,    -1,
    1884,  1885,    -1,    -1,    -1,  1236,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1246,    -1,    -1,    -1,    -1,
    1610,  1611,  1253,    -1,    -1,   221,  1616,    -1,  1618,    -1,
      -1,  1621,  1622,    -1,    -1,    -1,    -1,  1627,  1628,    -1,
    1630,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1640,    -1,  1642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   265,
    1954,    -1,    -1,   662,   663,   664,   665,    -1,    -1,    -1,
      -1,    -1,   278,    -1,  1674,    -1,    -1,    -1,  1678,    -1,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   690,   691,   692,    -1,    -1,    -1,    -1,    -1,  1699,
      -1,    -1,    -1,   702,    -1,    -1,    -1,    -1,  1708,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   716,    -1,    -1,
      -1,    -1,    -1,    -1,   723,   724,   725,    -1,   727,   728,
      -1,    -1,    -1,     3,    -1,   734,    -1,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,   745,    -1,    -1,   748,
      -1,    -1,    -1,    -1,    -1,    -1,   755,    -1,    28,   758,
      -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,   393,    -1,    -1,
      -1,    -1,    -1,   399,    -1,    -1,    66,  1438,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,  1452,    82,    83,    -1,    85,    86,    87,  1459,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1467,    -1,    -1,   435,
     100,    -1,    -1,   186,   187,    -1,    -1,    -1,    -1,   838,
     110,   111,   112,   113,   114,   115,    -1,  1488,    -1,  1490,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1862,   469,    -1,    -1,    -1,    -1,   221,    -1,
      -1,    -1,    -1,    -1,   873,    -1,    -1,    -1,    -1,    -1,
    1880,  1881,    -1,   882,    -1,    -1,    -1,    -1,  1888,    -1,
     889,    -1,  1892,    -1,  1894,   894,    -1,   896,    -1,    -1,
      -1,    -1,    -1,  1903,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   265,    -1,    -1,   268,   269,   270,    -1,   525,
     526,   527,    -1,   529,    -1,    -1,   532,    -1,    -1,  1570,
      -1,    -1,    -1,    -1,    -1,    -1,   289,   543,   544,   545,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   947,  1590,
      -1,    -1,    -1,    -1,  1954,   308,    -1,    -1,   564,    -1,
     566,   314,    -1,    -1,   963,    -1,    -1,    -1,    -1,    -1,
     323,    -1,    -1,   579,    -1,    -1,    -1,    -1,  1761,    -1,
      -1,    -1,    -1,  1766,  1767,  1768,  1769,  1770,  1771,    -1,
      -1,    -1,  1775,  1776,  1777,  1778,     3,    -1,    -1,    -1,
      -1,    -1,    -1,  1002,  1003,  1004,    -1,    -1,    -1,    -1,
      -1,  1010,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,  2047,  2048,    -1,
    2050,    -1,  2052,    -1,    -1,  2055,  2056,  2057,    -1,    66,
      -1,    -1,    -1,    -1,   417,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,  1715,    82,    83,    -1,    85,    86,
      87,    -1,    -1,   689,    -1,    -1,    -1,    -1,    -1,   695,
      -1,    -1,    -1,   100,   323,    -1,    -1,    -1,    -1,    -1,
     107,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,  1110,  2112,    -1,  1113,  2115,   469,  1116,    -1,    -1,
     127,    -1,    -1,  2123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,    -1,
      -1,   198,    -1,    -1,    -1,    -1,  1787,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1154,   509,    -1,    -1,  2159,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1809,  1168,
    1169,  1170,  1171,    -1,    -1,   528,    -1,    -1,    -1,    -1,
      -1,    -1,   535,    -1,    -1,   538,    -1,  1828,    -1,    -1,
      -1,    -1,  1191,    -1,  1193,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,
    1209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1226,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   300,    -1,    -1,    -1,  1246,    -1,    -1,
      -1,    -1,   309,    -1,  1253,    -1,    -1,    -1,   315,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1272,  1273,    -1,   882,    -1,    -1,    -1,
    1279,  1280,    -1,   889,  1283,  1284,    -1,    -1,   894,    -1,
      -1,    -1,    -1,  1934,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   662,
     663,   664,   665,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,   933,   385,    -1,
     387,    -1,    -1,    -1,    -1,    -1,   942,   690,   691,   692,
      28,   947,    -1,    -1,    -1,    -1,    -1,   953,    -1,   702,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   963,    -1,    -1,
      -1,    -1,    -1,   716,    -1,    -1,    -1,    -1,    -1,    -1,
     723,   724,   725,    -1,   727,   728,    -1,    65,    -1,    -1,
      -1,   734,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,   745,    -1,    -1,   748,    84,    85,    -1,    -1,
      -1,    -1,   755,    -1,  1010,   758,   635,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   651,    -1,    -1,    -1,   655,    -1,    -1,    -1,
     118,    -1,    -1,   121,   122,   123,    -1,    -1,   126,    -1,
      -1,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
    1056,  1057,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1066,    -1,  1068,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   711,    -1,    -1,   838,    -1,    -1,  1487,    -1,
      -1,  1490,    -1,    -1,    -1,    -1,   725,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   565,    -1,
     739,   740,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     873,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   882,
      -1,    -1,    -1,    -1,    -1,    -1,   889,   766,    -1,    -1,
      -1,   894,    -1,   896,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   625,    -1,
      -1,    -1,    -1,    -1,    -1,   804,    -1,    -1,    -1,    -1,
      -1,    -1,  1188,   812,  1190,    -1,    -1,    -1,    -1,    -1,
      -1,  1590,    -1,    -1,   947,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   832,    -1,  1604,  1605,    -1,    -1,    -1,
     963,  1610,  1611,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      59,    -1,    -1,    -1,  1623,    -1,    -1,  1626,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1634,    -1,    -1,    -1,   696,
      -1,    -1,    -1,    82,    83,    84,    -1,    -1,    -1,  1002,
    1003,  1004,    -1,    -1,    -1,    -1,    -1,  1010,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   894,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   748,   131,   132,    -1,    -1,    28,    -1,   755,    -1,
      -1,   758,    -1,    -1,    -1,    37,    -1,    -1,    -1,   148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,   183,  1744,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    -1,    -1,  1110,    -1,    -1,
    1113,    -1,    -1,  1116,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,   220,   221,    -1,    -1,    -1,   118,    -1,    -1,   121,
     122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,
     132,  1154,   134,   135,   136,   137,    -1,  1806,  1807,    -1,
      -1,    -1,    -1,    -1,    -1,  1168,  1169,  1170,  1171,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,  1828,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1191,   278,
    1193,    -1,    -1,    -1,    -1,    -1,    -1,  1453,    -1,   288,
      -1,    -1,    -1,    -1,  1460,    -1,  1209,    -1,    -1,    -1,
      -1,  1467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1226,    -1,   932,    -1,   934,    -1,    -1,
      -1,    -1,  1488,    -1,  1490,  1884,  1885,  1493,  1117,  1118,
    1496,  1120,    -1,  1246,    -1,    -1,    -1,    -1,    -1,  1128,
    1253,    -1,  1131,    -1,    -1,    -1,    -1,  1136,    -1,    -1,
      -1,    -1,    -1,    -1,  1143,  1144,   973,    -1,    -1,  1272,
    1273,    -1,    -1,    -1,    -1,    -1,  1279,  1280,    -1,    -1,
    1283,  1284,  1161,  1162,    -1,    -1,    -1,  1166,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1002,    -1,  1004,    -1,    -1,
      -1,    -1,    -1,    -1,   393,  1954,    -1,    -1,    -1,    -1,
     399,    -1,    -1,    -1,    -1,  1571,    -1,    -1,  1197,    -1,
    1199,    -1,    -1,  1579,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1590,    -1,    -1,    -1,    -1,  1218,
      -1,    -1,    -1,    -1,    -1,  1224,   435,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1070,    -1,    -1,    -1,    -1,  1247,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     469,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   485,    -1,    -1,    -1,
      -1,    -1,    -1,  1110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1121,  1294,  1295,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   525,   526,   527,    -1,
     529,    -1,    -1,   532,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   543,   544,   545,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1346,    -1,  1348,
      -1,    -1,    -1,   562,    -1,   564,    -1,   566,    -1,    -1,
    1359,  1360,    -1,    -1,  1487,    -1,    -1,  1490,    -1,    -1,
     579,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1410,    -1,  1412,    -1,    -1,    -1,    -1,    -1,  1795,
    1796,    -1,  1798,    -1,  1251,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1273,    -1,    -1,    -1,
      -1,    -1,    28,  1280,    -1,    -1,    -1,  1284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1590,    -1,    -1,
      -1,    -1,   681,    -1,    -1,    -1,  1852,    -1,    -1,    -1,
     689,  1604,  1605,    -1,    -1,    -1,   695,  1610,  1611,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
    1623,    -1,    -1,  1626,    -1,    -1,    -1,    -1,    84,    85,
      -1,  1634,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,   122,   123,   124,    -1,
     126,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1596,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1616,  1617,  1618,
    1619,  1744,  1621,  1622,    -1,    -1,    -1,    -1,  1627,  1628,
      -1,  1630,    -1,  1632,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1640,  1641,  1642,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1487,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1497,   880,    -1,   882,    -1,  1674,    -1,  1676,    -1,  1678,
     889,  1680,    -1,  1806,  1807,   894,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1699,  1700,    -1,    -1,    -1,  1828,  1533,    -1,  1535,  1708,
    1709,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   154,   933,  1552,    -1,   158,    -1,    -1,
      -1,    -1,    -1,   942,    -1,    -1,    -1,    -1,   947,    -1,
      -1,    -1,    -1,    -1,   953,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   963,   186,   187,    -1,    -1,    -1,
      -1,  1884,  1885,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1605,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     221,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1010,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1954,    -1,    -1,   265,    -1,    -1,   268,   269,   270,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1056,  1057,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1066,   289,  1068,
      -1,    -1,    -1,  1862,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   308,    -1,    -1,
      -1,    -1,  1881,   314,    -1,    -1,    -1,  1886,    -1,  1888,
    1889,    -1,  1891,  1892,    -1,  1894,    -1,  1896,  1725,    -1,
    1727,    -1,    -1,  1902,  1903,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1741,  1742,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1767,  1768,    -1,  1770,  1771,    -1,    -1,    -1,  1775,  1776,
    1777,  1778,    -1,    -1,    -1,  1954,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1188,
    1807,  1190,    -1,    -1,    -1,    -1,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   434,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   469,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2047,  2048,
      -1,  2050,  2051,  2052,    -1,   486,    -1,  2056,  2057,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,   509,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1914,  1915,  1916,
    1917,  1918,  1919,  1920,  1921,    28,    -1,   528,    -1,    -1,
      -1,    -1,    -1,    -1,   535,    -1,    -1,   538,    -1,    -1,
      -1,    -1,    -1,  2112,  2113,    -1,  2115,  2116,    -1,    -1,
      -1,  2120,    -1,    -1,    -1,    -1,  1953,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,  1962,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2159,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,  2014,   121,   122,
     123,  2018,  2019,   126,    -1,    -1,    -1,   130,   131,   132,
      -1,   134,   135,   136,   137,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   662,   663,   664,   665,    -1,    -1,    -1,    92,    -1,
      -1,    -1,    -1,    -1,  1453,    -1,    -1,    -1,    -1,    -1,
      -1,  1460,    -1,    -1,    -1,    -1,    -1,    -1,  1467,   690,
     691,   692,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1488,
      -1,  1490,    -1,    -1,  1493,   716,    -1,  1496,   142,    -1,
      -1,    -1,   723,   724,    -1,    -1,   727,   728,    -1,    -1,
     154,    -1,    -1,    -1,   158,    -1,    -1,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   748,    -1,    -1,
      -1,    -1,    -1,    -1,   755,    -1,    -1,   758,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,    -1,
      -1,    -1,  1571,    -1,    -1,    -1,    -1,    -1,    -1,   154,
    1579,    -1,    -1,   158,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1590,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   186,   187,    -1,    -1,    -1,    -1,   838,    -1,    -1,
      -1,   265,    -1,    -1,   268,   269,   270,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   873,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     881,   882,    -1,    -1,   308,    -1,    -1,    -1,   889,    -1,
     314,   892,    -1,    -1,    -1,   896,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     265,    -1,    -1,   268,   269,   270,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   947,    -1,    28,    -1,
      -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,    -1,   314,
      -1,    -1,   963,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,   423,
      -1,  1002,  1003,  1004,    84,    85,    -1,    -1,    -1,  1010,
     434,    -1,    -1,    -1,    -1,    -1,  1795,  1796,    98,  1798,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,   122,   123,   124,    -1,   126,    -1,    -1,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,    -1,    -1,
      -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,   423,    -1,
      -1,    -1,    -1,  1852,    -1,    -1,    -1,    -1,    -1,   434,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,    -1,  1110,
      -1,   535,  1113,    -1,   538,  1116,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1154,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1168,  1169,  1170,
    1171,    -1,    -1,   528,    -1,    -1,    -1,    -1,    -1,    -1,
     535,    -1,    -1,   538,    -1,    -1,    -1,    -1,    -1,    -1,
    1191,    -1,  1193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1226,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   662,   663,
     664,   665,    -1,    -1,    -1,  1246,    -1,    -1,    -1,    -1,
      -1,    -1,  1253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   690,   691,   692,    -1,
      -1,  1272,  1273,    -1,    -1,    -1,    -1,    -1,  1279,  1280,
      -1,    -1,  1283,  1284,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   716,    -1,    -1,    -1,    -1,    -1,    -1,   723,
     724,    -1,    -1,   727,   728,    -1,    -1,   662,   663,   664,
     665,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   748,    -1,    -1,    -1,    -1,    -1,
      -1,   755,    -1,    -1,   758,   690,   691,   692,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   716,    -1,    -1,    -1,    -1,    -1,    -1,   723,   724,
      -1,    -1,   727,   728,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   748,    -1,    -1,    -1,    -1,    -1,    -1,
     755,    -1,    -1,   758,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   881,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   892,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,  1487,    -1,    -1,  1490,
      -1,    -1,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   881,   118,   119,   120,
     121,   122,   123,   124,   125,   126,    -1,   892,   129,    -1,
     131,   132,    -1,   134,   135,   136,   137,   138,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1002,  1003,
    1004,    -1,    -1,    -1,    -1,    -1,  1010,    -1,    -1,  1590,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,  1604,  1605,    -1,    -1,    -1,    -1,  1610,
    1611,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,  1623,    -1,    -1,  1626,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1634,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1002,  1003,  1004,
      -1,    -1,    -1,    -1,    -1,  1010,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1110,    -1,    -1,  1113,
      98,    -1,  1116,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,   122,   123,    -1,    -1,   126,    -1,
      -1,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
    1154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1168,  1169,  1170,  1171,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1110,    -1,    -1,  1113,    -1,
      -1,  1116,    -1,    -1,    -1,    -1,    -1,  1191,    -1,  1193,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1154,
      -1,    -1,  1226,    -1,    -1,  1806,  1807,    -1,    -1,    -1,
      -1,    -1,    -1,  1168,  1169,  1170,  1171,    -1,    -1,    -1,
      -1,    -1,  1246,    -1,    -1,    -1,    -1,  1828,    -1,  1253,
      -1,    -1,    -1,    -1,    -1,    -1,  1191,    -1,  1193,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1272,  1273,
      -1,    -1,    -1,    -1,    -1,  1279,  1280,    -1,    -1,  1283,
    1284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1884,  1885,    -1,    -1,    -1,    -1,    -1,
      -1,  1246,    -1,    -1,    -1,    -1,    -1,    -1,  1253,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1272,  1273,    -1,
      -1,    -1,    -1,    -1,  1279,  1280,    -1,    -1,  1283,  1284,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,  1487,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1487,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
    1604,  1605,    71,    72,    73,    -1,  1610,  1611,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    85,    -1,    -1,  1623,
      -1,    -1,  1626,    -1,    -1,    -1,    -1,    -1,    -1,    98,
    1634,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,   122,   123,    -1,    -1,   126,    -1,    -1,
      -1,    -1,   131,   132,   133,   134,   135,   136,   137,  1604,
    1605,    -1,    -1,    -1,    -1,  1610,  1611,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1623,    -1,
      -1,  1626,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1634,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,  1806,  1807,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,    -1,
      -1,  1806,  1807,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1884,  1885,    -1,    -1,    -1,    -1,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,  1884,
    1885,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,    -1,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     1,    -1,    -1,    -1,    -1,    -1,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,    -1,    -1,   124,   125,   126,   127,    -1,
     129,    -1,    -1,   132,    -1,   134,   135,   136,    -1,   138,
     139,   140,   141,   142,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,   119,   120,   121,   122,   123,    -1,   125,   126,
      -1,    -1,   129,    -1,   131,   132,    -1,   134,   135,   136,
     137,   138,   139,   140,   141,   142,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,   122,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,   122,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,   122,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
     122,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,   122,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,   122,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,   122,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,   122,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,   122,   123,   124,    -1,   126,   127,   128,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
     123,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
      -1,   134,   135,   136,   137,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
      -1,    -1,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,   128,
      -1,    -1,   131,   132,    -1,   134,   135,   136,   137,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,   126,   127,   128,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,   126,   127,   128,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,
     127,   128,    -1,    -1,   131,   132,    -1,   134,   135,   136,
     137,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
     123,   124,    -1,   126,   127,   128,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,   128,
      -1,    -1,   131,   132,    -1,   134,   135,   136,   137,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,   126,   127,   128,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,     1,   123,     3,     4,     5,     6,
      -1,     8,     9,   131,   132,    -1,   134,   135,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,     1,   123,     3,     4,     5,
       6,    -1,     8,     9,   131,   132,    -1,   134,   135,   136,
     137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,    -1,   118,    -1,    -1,   121,   122,   123,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,    -1,   118,
      -1,    -1,   121,     1,   123,     3,     4,     5,     6,   128,
       8,     9,   131,   132,    -1,   134,   135,   136,   137,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,    -1,
     118,    -1,    -1,   121,   122,   123,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    84,    85,    86,    87,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    28,    -1,   118,    -1,    -1,
     121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,    -1,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    -1,    88,    89,    90,    -1,     1,
      -1,     3,     4,     5,     6,    98,     8,     9,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    28,    -1,   121,   122,
     123,   124,    -1,   126,    -1,   128,    -1,   130,   131,   132,
      -1,   134,   135,   136,   137,    -1,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    -1,    88,    89,    90,    -1,
       1,    -1,     3,     4,     5,     6,    98,     8,     9,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    28,    -1,   121,
     122,   123,   124,    -1,   126,    -1,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,    -1,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,    90,
      -1,     1,    -1,     3,     4,     5,     6,    98,     8,     9,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,   118,    28,    -1,
     121,    -1,   123,   124,    -1,    -1,    -1,   128,    -1,   130,
     131,   132,    -1,   134,   135,   136,   137,    -1,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,
      90,    -1,     1,    -1,     3,     4,     5,     6,    98,     8,
       9,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,   118,    28,
      -1,   121,    -1,   123,   124,    -1,    -1,    -1,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,    -1,    -1,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    -1,    88,
      89,    90,    -1,     1,    -1,     3,     4,     5,     6,    98,
       8,     9,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      28,    -1,   121,    -1,   123,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,    -1,   134,   135,   136,   137,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,   122,   123,    -1,    -1,   126,    -1,
      -1,    -1,    -1,   131,   132,   133,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,   124,
      -1,   126,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
     122,   123,   124,    -1,   126,    -1,    -1,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,    -1,   123,    -1,    -1,   126,   127,   128,
      -1,    -1,   131,   132,    -1,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,   122,   123,   124,    -1,
     126,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,
     123,   124,    -1,   126,    -1,    -1,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,
      -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,
     137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,   122,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,    -1,
      -1,   126,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,    -1,
      -1,    -1,   131,   132,    -1,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,   122,   123,    -1,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,
     123,    -1,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,   122,   123,    -1,    -1,   126,    -1,    -1,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,   126,
      -1,    -1,    -1,    -1,   131,   132,   133,   134,   135,   136,
     137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,   123,
      -1,    -1,   126,    -1,    -1,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,
     131,   132,   133,   134,   135,   136,   137,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,    -1,   123,    -1,    -1,   126,    -1,
      -1,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,    -1,
      -1,   126,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
     122,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,   122,   123,    -1,    -1,   126,    -1,    -1,
      -1,    -1,   131,   132,    -1,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,   122,   123,    -1,    -1,
     126,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,    -1,    -1,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,
     137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,   123,
      -1,    -1,   126,    -1,    -1,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1,   130,
     131,   132,    -1,   134,   135,   136,   137,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,    -1,   123,    -1,    -1,   126,    -1,
      -1,    -1,    -1,   131,   132,   133,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,    -1,   123,    -1,
      -1,   126,    -1,    -1,    -1,    -1,   131,   132,   133,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
     122,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,   122,   123,    -1,    -1,   126,    -1,    -1,
      -1,    -1,   131,   132,    -1,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,   122,   123,    -1,    -1,
     126,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,   122,   123,    -1,    -1,   126,    -1,    -1,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
     127,   128,    -1,    -1,   131,   132,    -1,   134,   135,   136,
     137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,
      -1,    -1,   126,    -1,    -1,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,   122,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,   122,   123,    -1,    -1,   126,    -1,
      -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,   133,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   131,   132,   133,   134,   135,
     136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   131,   132,   133,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
      -1,    -1,    -1,   130,   131,   132,    -1,   134,   135,   136,
     137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   131,   132,   133,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,    -1,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,   122,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,
     137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,   123,
      -1,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,   122,   123,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,    -1,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,     0,     1,    -1,     3,     4,     5,
      -1,    -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,   122,   123,   124,    -1,
     126,   127,    -1,    -1,    -1,   131,   132,     0,     1,    -1,
       3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
     123,   124,    -1,   126,   127,    -1,    -1,    -1,   131,   132,
       0,     1,    -1,     3,     4,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,     0,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
       0,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,     0,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,     1,   127,     3,     4,
       5,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,     1,   127,     3,     4,     5,   131,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,     1,    -1,     3,     4,     5,
      -1,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,     1,
      -1,     3,     4,     5,    -1,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,     1,   121,
       3,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,
     132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,   122,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,   122,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   132,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,     3,    -1,   121,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,
      -1,   134,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   132,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,    -1,    -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,
     132,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,    -1,    -1,    -1,    -1,
      -1,   128,    -1,    -1,    -1,   132,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     132,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   132,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     132,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   132,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    76,    77,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,   105,     3,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    78,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,   130,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,     1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,   124,    -1,   126,   127,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,     0,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    76,    77,    -1,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,   101,     3,    -1,    -1,   105,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,    -1,   124,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,     3,    -1,    -1,    -1,   107,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,     1,    -1,     3,    -1,    -1,    -1,   107,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
     100,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,    -1,   124,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,   100,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,    -1,   124,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,   100,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,
     124,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    76,    77,
      -1,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,   101,    -1,     0,     1,   105,     3,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,   122,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,   122,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
      -1,   122,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,   122,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
      -1,   122,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,    -1,    -1,   122,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
      -1,   122,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,    -1,   121,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,    -1,   121,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,    -1,   121,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   132,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   128,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   127,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    53,    65,    66,    74,    75,
      76,    77,    79,    80,    81,    82,    83,    85,    86,    87,
     100,   101,   105,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   121,   124,   144,   145,   146,   148,   173,   210,
     211,   212,   213,   214,   215,   271,   274,   275,   278,   279,
     280,   281,   282,   283,   284,   286,   290,   293,   294,   295,
     296,   297,   298,   303,   304,   313,   314,   315,   322,   323,
     327,   330,   335,   364,   367,   368,   386,   387,   389,   390,
     391,   392,   393,   394,    77,   130,     5,    31,   215,   388,
     215,   121,   121,   121,   148,   215,   388,   284,   285,   322,
     330,    37,   146,   215,   312,   313,   315,   317,   318,   319,
     321,   322,   330,   333,   334,   339,   119,   124,   145,   146,
     215,   128,   130,   124,   128,   127,   118,   119,   210,   215,
     128,   148,   215,   128,   130,   127,   119,   128,   130,   128,
     127,   128,   146,   215,   322,     1,    31,    37,    38,   124,
     144,   146,   212,   214,   215,   271,   281,   282,   284,   286,
     315,   319,   322,   330,   333,   334,   335,   337,   345,   346,
     347,   348,    37,    38,   146,   322,   347,   121,   132,     1,
      29,    30,    31,    32,    33,    65,   116,   117,   122,   144,
     215,   270,   274,   276,   277,   284,   286,   290,   291,   292,
     298,   302,   310,   311,   351,   352,   353,   354,   355,   356,
     330,   121,   315,   322,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    46,    47,    66,    85,    87,   100,
     112,   113,   114,   115,   128,   148,   169,   170,   270,   275,
     276,   284,   287,   291,   293,   301,   366,   369,   370,   371,
     376,   377,   378,    31,    76,   130,   212,   214,   303,   367,
     368,   386,   387,   394,     1,   212,   280,   297,   303,   335,
     364,   390,     1,   389,   390,     0,   215,   388,   388,     5,
     125,   388,     1,     4,     6,     8,     9,    65,    71,    72,
      73,    84,    85,    98,   102,   103,   104,   105,   106,   107,
     108,   109,   118,   121,   123,   131,   132,   134,   135,   136,
     137,   148,   174,   175,   215,   216,   217,   218,   219,   222,
     223,   227,   228,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   248,   250,
     251,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   388,   400,   401,   402,   403,   145,   215,
     128,   148,   215,   284,   330,   132,   121,   132,   122,   310,
     311,   355,   356,   330,   333,   334,   312,   317,   321,   322,
     122,   322,   122,   322,   322,    85,   148,   200,   202,   204,
     208,   209,   215,   228,   234,   251,   256,   302,   124,   119,
     119,   124,     1,    68,    78,    80,    81,    88,    91,    92,
      93,    94,    96,    98,    99,   121,   123,   124,   127,   149,
     150,   151,   152,   153,   154,   155,   156,   171,   172,   174,
     175,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   191,   195,   196,   197,   198,   215,   223,   248,   302,
     314,   316,   322,   330,   335,   336,   365,    80,    81,   215,
     270,   274,   284,   287,   290,   298,   305,   306,     1,   127,
     197,   198,   146,   215,     1,   215,   272,   273,     1,   127,
     273,   306,    65,   201,   203,   205,   206,   207,   215,   302,
       1,   127,   197,   198,   306,     1,   127,   197,   198,     1,
     127,   197,   198,   146,   215,   126,   126,   126,   128,   330,
     315,   319,   322,     1,   125,   370,   377,   378,   370,   377,
     378,     1,   124,   126,   126,   330,   124,   133,   145,   215,
     243,   264,   268,   269,   126,   128,   148,   215,   127,   128,
     127,   128,   322,    37,   121,   132,   134,   144,   146,   215,
     270,   276,   284,   286,   291,   312,   313,   322,   328,   330,
     331,   334,     1,   122,   126,     1,   122,   126,     1,   126,
       1,   126,   122,   122,   315,   121,   315,   121,   121,     1,
     124,     1,   127,     1,    37,    38,   124,   215,   270,   276,
     284,   287,   291,   322,   347,   348,     1,   124,     1,   366,
     369,   377,   378,   366,   369,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    85,    86,    88,    89,
      90,   124,   130,   148,   192,   193,   194,   215,   223,   228,
     244,   246,   251,   264,   265,   266,   327,   357,   358,   361,
     362,   363,   370,   371,   372,   373,   374,   375,   377,   378,
     380,   381,   382,   383,   384,   385,   127,    31,   215,   388,
     215,   210,   211,   213,   214,   312,   313,   319,   322,   330,
     335,   337,   370,   378,   212,   303,   125,   242,   243,   263,
     122,     1,   121,   175,   219,   224,   227,   229,   249,   250,
     252,   121,   228,   251,   228,   251,   121,   215,   270,   276,
     284,   287,   291,   309,   268,   121,   121,   309,   268,   121,
     121,   121,   121,   121,   121,   229,   252,   122,   244,   246,
     266,   276,   284,   286,   291,   299,   349,   388,   128,   133,
     176,   177,   220,   225,   244,   128,     1,   127,   128,   215,
       1,     7,     8,     9,   121,   129,   132,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,   125,   245,   177,
     220,   221,   231,   253,   118,   138,   139,   135,   136,    10,
      11,   234,   256,    12,    13,   119,   120,    14,    15,   134,
     140,   141,    16,    17,   142,   245,   122,     7,     8,     9,
     121,   129,   132,   245,   118,   138,   139,   135,   136,    10,
      11,    12,    13,   119,   120,    14,    15,   134,   140,   141,
      16,    17,   142,   245,   122,   122,   107,   215,   302,   395,
     398,   399,   128,   128,   133,   145,   268,   269,   133,   145,
     268,   269,   122,   122,   122,   122,   312,   317,   321,   122,
     122,   312,    11,   120,   126,   125,   121,   322,   330,   331,
      65,   207,   215,   302,   207,     1,   215,   270,   284,   287,
     298,   307,   302,   335,   336,   121,   148,   215,   215,   302,
       1,   121,   307,   118,   121,   215,   302,   124,   327,   377,
     378,   377,   378,   377,   124,   377,   378,   124,     1,   127,
       1,     1,   124,   126,   126,    69,    70,    91,    95,    97,
     127,    69,    70,   127,   124,     1,   195,   196,     1,   195,
     196,     1,   125,   121,   130,   215,   288,   289,   312,   318,
     320,   322,   330,   337,   338,   339,     1,   302,   310,   353,
     330,   316,   322,   121,   130,   155,   156,   171,   172,   174,
     175,   184,   215,   302,   119,   148,   215,   215,   270,   284,
     287,   119,   119,   125,   126,     1,   124,   128,    28,   147,
     215,   120,   126,   125,   215,   331,   333,   345,   345,   345,
     124,   126,   127,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   220,   221,   223,   243,   264,
     301,   342,   343,   312,   315,   317,   319,   321,   312,   319,
     128,   244,   265,   340,   341,   377,   378,   377,   378,   345,
     346,   345,   346,   133,   133,   133,    51,   351,   352,     1,
     273,   128,   128,     1,   127,   197,   198,     1,   127,   197,
     198,   128,   122,   215,   310,   311,   322,   330,   331,   355,
     356,   133,   145,   268,   269,   322,   330,   334,   330,   121,
     132,   328,     1,     1,   126,     1,    51,   215,   351,   352,
     126,     1,    51,   215,   351,   352,   126,     1,    51,   215,
     351,   352,   126,    51,   215,   351,   352,     3,    28,    44,
      74,    75,   122,   324,   325,   326,   244,   145,   215,   127,
     128,   124,   124,   130,   268,   269,   130,   121,   121,     1,
     121,    52,    53,    54,    56,    57,    58,    59,    62,    86,
     215,   266,   327,   357,   380,   384,   121,   215,   124,   124,
     124,   220,   221,   246,   266,   121,   284,   121,   121,   188,
     215,   124,   124,   124,   130,   129,   245,     1,   129,   124,
     126,   246,   266,   245,   122,   126,   246,     1,   372,   373,
     372,   373,   357,   358,   366,   369,   357,   358,   366,   369,
       1,     1,   388,   388,   146,   215,   128,   128,   330,   319,
     322,   370,   378,   370,   378,   378,   243,   142,   124,   142,
      65,   144,   215,   228,   251,   276,   284,   286,   291,   300,
     350,     1,     1,     7,     8,     9,   121,   129,   132,     7,
       8,     9,   121,   129,   132,   215,   301,   119,   121,   132,
     215,   270,   276,   284,   287,   291,   322,   329,   330,   332,
     215,   270,   276,   284,   287,   291,   308,   246,   349,   377,
     215,   132,   332,   308,   244,   388,   388,   388,   244,   228,
     251,   350,   122,   215,   276,   284,   286,   291,   331,   122,
     129,     1,   167,   168,     1,   127,   126,   133,     1,   167,
     168,   127,     1,   167,   168,     1,   215,   122,   221,   225,
     226,   265,     1,   215,   246,   266,   220,   244,     1,   231,
     253,   231,   253,   231,   253,   232,   254,   232,   254,   233,
     255,   233,   255,   234,   256,   234,   256,   234,   256,   220,
     221,   236,   257,   220,   221,   236,   257,   220,   221,   237,
     258,   220,   221,   238,   259,   220,   221,   239,   260,   240,
     261,   241,   262,   130,   220,   221,   246,   247,   266,   267,
     220,   244,     1,   215,   122,   225,   226,     1,   215,   246,
     266,   220,   244,   231,   253,   231,   253,   231,   253,   232,
     254,   232,   254,   233,   255,   233,   255,   234,   256,   234,
     256,   234,   256,   234,   256,   220,   221,   236,   257,   220,
     221,   236,   257,   220,   221,   237,   258,   220,   221,   238,
     259,   220,   221,   239,   260,   240,   261,   241,   262,   130,
     246,   247,   266,   267,   220,   244,   119,   120,   215,   396,
     397,   215,   127,   395,   398,   399,   399,   133,   133,   133,
     133,   133,   133,   208,   200,   202,   204,   215,   322,   330,
     120,   125,   331,   120,   128,   119,   128,   215,   270,   284,
     287,   331,   322,   330,   337,   338,   188,   289,   312,   322,
     330,   128,   215,   128,   215,   331,   215,   322,   121,   124,
     127,   178,   179,   178,   179,   377,   377,   377,   217,   377,
     377,     1,   342,   343,   122,   268,   269,   128,   126,     1,
     302,   310,   353,   330,   312,   320,   322,   130,   327,   215,
     121,   316,   316,   215,     1,     1,   289,   209,   119,   207,
     207,   268,   269,   272,   197,   198,     1,   127,   273,   125,
     130,   125,   130,   206,   202,   215,   125,   215,   125,   377,
     378,     1,   124,   126,   124,   126,   124,   159,   160,   163,
     164,   165,   127,   157,   160,   124,   127,   159,   160,   163,
     164,   165,   125,    37,   337,   338,   339,   340,   341,   344,
       1,   127,   273,     1,   127,   273,     1,   127,   197,   198,
     322,   330,   331,   122,   122,   122,   133,   133,   133,   330,
     328,   122,   355,   356,   133,   145,   268,   269,   351,   352,
     302,   351,   351,   351,   352,   122,   121,   122,   126,   325,
     122,   122,   122,     1,   167,   168,   357,   358,   366,   369,
     130,   130,   357,   358,   366,   369,   246,   266,   246,   266,
     122,   246,   266,   130,   268,   269,   130,   121,   121,   357,
     121,   221,   266,   121,   130,    56,     1,   122,   124,   215,
     246,   266,   379,   124,   124,   124,   124,   124,   388,   121,
     244,   244,   215,   357,   358,   366,   369,    90,   221,   265,
      88,    89,    90,   244,   265,   221,   265,   244,   265,   119,
     319,   378,   378,   124,   246,   247,   266,   267,   246,   247,
     266,   267,   144,   145,   122,   144,   276,   284,   286,   291,
     331,   122,     1,   215,   122,   225,   226,     1,   215,   246,
     266,     1,   215,   122,   225,   226,     1,   215,   246,   266,
     122,   122,   331,   209,   122,   322,   332,   355,   356,   268,
     269,   119,   330,   121,   329,   132,   119,   132,   215,   270,
     276,   284,   287,   291,   332,   122,   122,   122,   122,   268,
     269,   132,   132,   332,   126,   122,   126,   126,   126,   122,
     122,   231,   253,   388,     1,   127,   220,   244,     1,     1,
     122,   126,   122,   133,   133,     1,   126,   130,   130,   126,
     130,   130,   122,   133,   133,   130,   130,   130,   130,   215,
     215,   124,   126,   215,   388,   127,   127,   322,   330,   202,
     209,   119,   128,   128,   215,   330,   322,   122,   330,   312,
     122,   128,   128,   215,   122,     1,   167,   168,   288,   322,
     215,   121,   312,   320,   320,   268,   269,   121,   122,   120,
     209,   120,   120,   124,     1,   124,   200,   199,   302,   200,
     199,   204,   125,   128,     1,   161,   162,     1,   161,   162,
     378,     1,   342,   343,   126,   127,   340,   341,     1,   124,
       1,   124,   330,   328,   122,   122,   122,   133,   133,   133,
     331,   334,   246,   122,   325,     1,   357,   358,   366,   369,
     357,   358,   366,   369,   122,   122,   122,   122,     1,   357,
     122,   246,   357,   358,   130,   130,   266,   122,   246,   266,
      56,   266,   379,   388,   121,   357,   130,   124,     1,   124,
       1,   122,   266,   379,     3,   122,   130,   388,   122,   122,
     126,   121,   121,   188,   130,   130,   130,   130,   130,   130,
     130,   130,   122,   122,     1,   122,   122,   133,   133,   122,
     133,   133,   122,   120,   322,   330,   332,   122,   122,   122,
     133,   133,   209,   329,   122,   355,   356,   268,   269,   209,
     268,   269,   119,   132,   121,   340,   133,   133,   268,   269,
     268,   269,   132,   349,   215,   215,   244,     1,   221,   265,
     220,   221,   220,   221,   243,   263,   220,   221,   243,   263,
     220,   221,   220,   221,   243,   263,   220,   221,   243,   263,
     220,   221,   243,   263,   220,   221,   243,   263,   220,   221,
     243,   263,   220,   221,   243,   263,   396,   124,   124,   120,
     209,   128,   377,   312,   125,   128,     1,   121,   130,   130,
     120,   197,   198,   124,   197,   198,   125,   331,   125,   204,
     344,   127,   340,   341,     1,   197,   198,   197,   198,   122,
     357,   357,   357,   357,   357,   358,   122,   121,   379,   122,
     246,   266,   246,   357,     1,   122,   246,   266,   132,   359,
     360,   388,   124,   360,     3,   122,   130,   128,   188,   244,
     244,     1,     1,   329,   122,   120,   122,   122,   133,   133,
     120,   133,   133,   209,   268,   269,   349,   133,   133,   133,
     133,   268,   269,   122,   122,   122,   122,   120,   342,   268,
     269,   268,   269,   197,   198,   200,   200,   126,   127,     1,
      64,    64,   246,   266,   122,   246,   266,   122,   124,   122,
     124,   357,   358,   122,   357,   358,   215,   122,   126,   130,
     121,     3,   122,   130,   360,   124,   360,    73,   188,   189,
     190,   122,   122,   122,   126,   120,   133,   133,   122,   133,
     133,   124,   127,   357,   357,   122,   122,   124,   357,   246,
     357,   358,   133,   124,   359,   360,   244,   360,   124,   360,
     122,   130,     3,   122,   130,   377,   377,   127,   189,   128,
     188,   231,   253,   340,   122,   388,   122,   122,   122,   122,
     130,   124,   360,   360,   124,   360,   190,   122,   357,   121,
     124,   124,   124,   360,   122,   122,   122,   130,   127,   244,
     122,   124,   124,   124,   360,   122,   124,   122,   124
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 144: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11349 "grammar.ec"
	break;
      case 145: /* "type" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11358 "grammar.ec"
	break;
      case 146: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11367 "grammar.ec"
	break;
      case 147: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 11376 "grammar.ec"
	break;
      case 148: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11385 "grammar.ec"
	break;
      case 149: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11394 "grammar.ec"
	break;
      case 150: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11403 "grammar.ec"
	break;
      case 151: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11412 "grammar.ec"
	break;
      case 152: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11421 "grammar.ec"
	break;
      case 153: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11430 "grammar.ec"
	break;
      case 154: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11439 "grammar.ec"
	break;
      case 155: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11448 "grammar.ec"
	break;
      case 156: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11457 "grammar.ec"
	break;
      case 157: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11466 "grammar.ec"
	break;
      case 158: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11475 "grammar.ec"
	break;
      case 159: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11484 "grammar.ec"
	break;
      case 160: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11493 "grammar.ec"
	break;
      case 161: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11502 "grammar.ec"
	break;
      case 162: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11511 "grammar.ec"
	break;
      case 163: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11520 "grammar.ec"
	break;
      case 164: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11529 "grammar.ec"
	break;
      case 165: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11538 "grammar.ec"
	break;
      case 166: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11547 "grammar.ec"
	break;
      case 167: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11556 "grammar.ec"
	break;
      case 168: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11565 "grammar.ec"
	break;
      case 169: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11574 "grammar.ec"
	break;
      case 170: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11583 "grammar.ec"
	break;
      case 174: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11592 "grammar.ec"
	break;
      case 175: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11601 "grammar.ec"
	break;
      case 178: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11610 "grammar.ec"
	break;
      case 179: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11619 "grammar.ec"
	break;
      case 180: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11628 "grammar.ec"
	break;
      case 181: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11637 "grammar.ec"
	break;
      case 184: /* "property" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 11646 "grammar.ec"
	break;
      case 195: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11655 "grammar.ec"
	break;
      case 196: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11664 "grammar.ec"
	break;
      case 197: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11673 "grammar.ec"
	break;
      case 198: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11682 "grammar.ec"
	break;
      case 199: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 11691 "grammar.ec"
	break;
      case 200: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11700 "grammar.ec"
	break;
      case 201: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11709 "grammar.ec"
	break;
      case 202: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11718 "grammar.ec"
	break;
      case 203: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11727 "grammar.ec"
	break;
      case 204: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11736 "grammar.ec"
	break;
      case 205: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11745 "grammar.ec"
	break;
      case 206: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11754 "grammar.ec"
	break;
      case 207: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 11763 "grammar.ec"
	break;
      case 208: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11772 "grammar.ec"
	break;
      case 209: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 11781 "grammar.ec"
	break;
      case 210: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 241 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11790 "grammar.ec"
	break;
      case 211: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11799 "grammar.ec"
	break;
      case 212: /* "class" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11808 "grammar.ec"
	break;
      case 213: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11817 "grammar.ec"
	break;
      case 214: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11826 "grammar.ec"
	break;
      case 215: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 11835 "grammar.ec"
	break;
      case 216: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11844 "grammar.ec"
	break;
      case 217: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11853 "grammar.ec"
	break;
      case 222: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11862 "grammar.ec"
	break;
      case 223: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11871 "grammar.ec"
	break;
      case 225: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11880 "grammar.ec"
	break;
      case 226: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11889 "grammar.ec"
	break;
      case 228: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11898 "grammar.ec"
	break;
      case 231: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11907 "grammar.ec"
	break;
      case 232: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11916 "grammar.ec"
	break;
      case 233: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11925 "grammar.ec"
	break;
      case 234: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11934 "grammar.ec"
	break;
      case 236: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11943 "grammar.ec"
	break;
      case 237: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11952 "grammar.ec"
	break;
      case 238: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11961 "grammar.ec"
	break;
      case 239: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11970 "grammar.ec"
	break;
      case 240: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11979 "grammar.ec"
	break;
      case 241: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11988 "grammar.ec"
	break;
      case 242: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11997 "grammar.ec"
	break;
      case 243: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12006 "grammar.ec"
	break;
      case 244: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12015 "grammar.ec"
	break;
      case 246: /* "expression" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12024 "grammar.ec"
	break;
      case 248: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12033 "grammar.ec"
	break;
      case 251: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12042 "grammar.ec"
	break;
      case 253: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12051 "grammar.ec"
	break;
      case 254: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12060 "grammar.ec"
	break;
      case 255: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12069 "grammar.ec"
	break;
      case 256: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12078 "grammar.ec"
	break;
      case 257: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12087 "grammar.ec"
	break;
      case 258: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12096 "grammar.ec"
	break;
      case 259: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12105 "grammar.ec"
	break;
      case 260: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12114 "grammar.ec"
	break;
      case 261: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12123 "grammar.ec"
	break;
      case 262: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12132 "grammar.ec"
	break;
      case 263: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12141 "grammar.ec"
	break;
      case 264: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12150 "grammar.ec"
	break;
      case 265: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12159 "grammar.ec"
	break;
      case 266: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12168 "grammar.ec"
	break;
      case 268: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12177 "grammar.ec"
	break;
      case 269: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12186 "grammar.ec"
	break;
      case 270: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12195 "grammar.ec"
	break;
      case 271: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12204 "grammar.ec"
	break;
      case 272: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 12213 "grammar.ec"
	break;
      case 273: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 12222 "grammar.ec"
	break;
      case 275: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12231 "grammar.ec"
	break;
      case 276: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12240 "grammar.ec"
	break;
      case 277: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12249 "grammar.ec"
	break;
      case 279: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12258 "grammar.ec"
	break;
      case 280: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12267 "grammar.ec"
	break;
      case 281: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12276 "grammar.ec"
	break;
      case 282: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12285 "grammar.ec"
	break;
      case 283: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12294 "grammar.ec"
	break;
      case 284: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12303 "grammar.ec"
	break;
      case 285: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12312 "grammar.ec"
	break;
      case 286: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12321 "grammar.ec"
	break;
      case 287: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12330 "grammar.ec"
	break;
      case 288: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12339 "grammar.ec"
	break;
      case 289: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 12348 "grammar.ec"
	break;
      case 290: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12357 "grammar.ec"
	break;
      case 291: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12366 "grammar.ec"
	break;
      case 292: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12375 "grammar.ec"
	break;
      case 293: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12384 "grammar.ec"
	break;
      case 294: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12393 "grammar.ec"
	break;
      case 295: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12402 "grammar.ec"
	break;
      case 296: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12411 "grammar.ec"
	break;
      case 297: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12420 "grammar.ec"
	break;
      case 299: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12429 "grammar.ec"
	break;
      case 300: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12438 "grammar.ec"
	break;
      case 301: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12447 "grammar.ec"
	break;
      case 302: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12456 "grammar.ec"
	break;
      case 303: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12465 "grammar.ec"
	break;
      case 304: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12474 "grammar.ec"
	break;
      case 305: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12483 "grammar.ec"
	break;
      case 306: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12492 "grammar.ec"
	break;
      case 310: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12501 "grammar.ec"
	break;
      case 311: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12510 "grammar.ec"
	break;
      case 312: /* "direct_declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12519 "grammar.ec"
	break;
      case 313: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12528 "grammar.ec"
	break;
      case 314: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12537 "grammar.ec"
	break;
      case 315: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12546 "grammar.ec"
	break;
      case 316: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12555 "grammar.ec"
	break;
      case 317: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12564 "grammar.ec"
	break;
      case 318: /* "direct_declarator_function_start_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12573 "grammar.ec"
	break;
      case 319: /* "direct_declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12582 "grammar.ec"
	break;
      case 320: /* "direct_declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12591 "grammar.ec"
	break;
      case 321: /* "direct_declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12600 "grammar.ec"
	break;
      case 322: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 270 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 12609 "grammar.ec"
	break;
      case 324: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12618 "grammar.ec"
	break;
      case 325: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 271 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 12627 "grammar.ec"
	break;
      case 326: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 272 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 12636 "grammar.ec"
	break;
      case 327: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 12645 "grammar.ec"
	break;
      case 328: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12654 "grammar.ec"
	break;
      case 329: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12663 "grammar.ec"
	break;
      case 330: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 12672 "grammar.ec"
	break;
      case 331: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12681 "grammar.ec"
	break;
      case 332: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12690 "grammar.ec"
	break;
      case 333: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12699 "grammar.ec"
	break;
      case 334: /* "declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12708 "grammar.ec"
	break;
      case 335: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12717 "grammar.ec"
	break;
      case 336: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12726 "grammar.ec"
	break;
      case 337: /* "declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12735 "grammar.ec"
	break;
      case 338: /* "declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12744 "grammar.ec"
	break;
      case 339: /* "declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12753 "grammar.ec"
	break;
      case 340: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12762 "grammar.ec"
	break;
      case 341: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12771 "grammar.ec"
	break;
      case 342: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12780 "grammar.ec"
	break;
      case 343: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12789 "grammar.ec"
	break;
      case 344: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 12798 "grammar.ec"
	break;
      case 345: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12807 "grammar.ec"
	break;
      case 346: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12816 "grammar.ec"
	break;
      case 347: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12825 "grammar.ec"
	break;
      case 348: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12834 "grammar.ec"
	break;
      case 349: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12843 "grammar.ec"
	break;
      case 350: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12852 "grammar.ec"
	break;
      case 351: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12861 "grammar.ec"
	break;
      case 352: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12870 "grammar.ec"
	break;
      case 353: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12879 "grammar.ec"
	break;
      case 354: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12888 "grammar.ec"
	break;
      case 355: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12897 "grammar.ec"
	break;
      case 356: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12906 "grammar.ec"
	break;
      case 357: /* "statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12915 "grammar.ec"
	break;
      case 358: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12924 "grammar.ec"
	break;
      case 362: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12933 "grammar.ec"
	break;
      case 363: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12942 "grammar.ec"
	break;
      case 364: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 12951 "grammar.ec"
	break;
      case 366: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 12960 "grammar.ec"
	break;
      case 370: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12969 "grammar.ec"
	break;
      case 371: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12978 "grammar.ec"
	break;
      case 372: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12987 "grammar.ec"
	break;
      case 373: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12996 "grammar.ec"
	break;
      case 374: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13005 "grammar.ec"
	break;
      case 375: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13014 "grammar.ec"
	break;
      case 376: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 13023 "grammar.ec"
	break;
      case 377: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13032 "grammar.ec"
	break;
      case 378: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13041 "grammar.ec"
	break;
      case 379: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13050 "grammar.ec"
	break;
      case 380: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13059 "grammar.ec"
	break;
      case 381: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13068 "grammar.ec"
	break;
      case 382: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13077 "grammar.ec"
	break;
      case 383: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13086 "grammar.ec"
	break;
      case 384: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13095 "grammar.ec"
	break;
      case 385: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13104 "grammar.ec"
	break;
      case 386: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13113 "grammar.ec"
	break;
      case 387: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13122 "grammar.ec"
	break;
      case 388: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 13131 "grammar.ec"
	break;
      case 389: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 231 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13140 "grammar.ec"
	break;
      case 390: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 231 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13149 "grammar.ec"
	break;
      case 391: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13158 "grammar.ec"
	break;
      case 392: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13167 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 280 "grammar.y"
    {
      (yyval.specifier) = null;
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 309 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 367 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 369 "grammar.y"
    {
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);
      FreeIdentifier((yyvsp[(1) - (2)].id));
      FreeIdentifier((yyvsp[(2) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #else
      Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
      Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
      yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 468 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 472 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 476 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 478 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 527 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 529 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 534 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(1) - (3)].list), FreeSpecifier); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 539 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(2) - (4)].list), FreeSpecifier) ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 544 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 546 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 551 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 553 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 558 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 560 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 565 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 567 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 569 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 571 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 573 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 577 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 581 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 594 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 596 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 598 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 600 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 602 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 608 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 610 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 615 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 620 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 625 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 627 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 629 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 633 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 634 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 638 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 640 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 650 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 654 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 656 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 658 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 662 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 664 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 666 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 669 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 681 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 692 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 711 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 713 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 717 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 718 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 719 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 720 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 721 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 722 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 63:

/* Line 1464 of yacc.c  */
#line 725 "grammar.y"
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[(2) - (2)]);
      }
      (yyval.list) = (yyvsp[(1) - (2)].list);
   ;}
    break;

  case 64:

/* Line 1464 of yacc.c  */
#line 737 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 742 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 743 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 744 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 748 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 749 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 750 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 751 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 752 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 753 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 754 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 759 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 761 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 766 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 768 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 770 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 772 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 774 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 804 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 806 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 811 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 813 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 815 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 817 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 819 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 848 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 850 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 852 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 857 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 859 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 864 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 866 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 870 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 872 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 874 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 876 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 881 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 884 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 887 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 890 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 955 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 957 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 962 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 964 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 966 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 968 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 970 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 1000 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 1004 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 1005 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 1006 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 1010 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 1011 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 1012 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 1016 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 1017 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 121:

/* Line 1464 of yacc.c  */
#line 1018 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 1024 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 1027 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 1030 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 1033 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 127:

/* Line 1464 of yacc.c  */
#line 1036 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 1042 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 1044 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 1046 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 1048 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 1050 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 1054 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1059 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1062 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1065 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1068 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 139:

/* Line 1464 of yacc.c  */
#line 1071 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1077 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1079 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1083 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1088 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1090 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1095 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1097 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1102 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1104 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1109 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1114 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1116 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1123 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1127 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1134 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1136 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1138 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1142 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1143 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1144 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1145 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1146 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1147 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1148 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1149 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1150 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1151 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1152 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1155 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1157 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1161 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1164 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1165 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1166 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1167 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1168 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1169 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1170 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1171 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1172 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1173 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1174 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1176 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1179 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1180 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1184 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1185 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1186 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1190 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1194 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1195 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1196 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 1200 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 1203 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1204 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1208 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1209 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1221 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1222 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1226 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1227 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1228 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1229 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1230 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1231 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1232 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1233 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1237 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1241 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1242 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1246 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1254 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 1255 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); ;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 1265 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 1266 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 1273 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1274 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1275 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1315 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1316 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1321 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1328 "grammar.y"
    { (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1330 "grammar.y"
    {
      (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1337 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1338 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1340 "grammar.y"
    { (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1342 "grammar.y"
    {
      (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1350 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1351 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1356 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1363 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1370 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1376 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1383 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace(0, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1389 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass(0, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1398 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1405 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1411 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1417 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1423 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1429 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1435 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1456 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1457 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 1458 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1462 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1466 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1467 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1468 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1469 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1470 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1471 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 1473 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1487 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1491 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1492 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1493 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1500 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1501 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1502 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1503 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1504 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1505 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1506 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 293:

/* Line 1464 of yacc.c  */
#line 1507 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 294:

/* Line 1464 of yacc.c  */
#line 1509 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 299:

/* Line 1464 of yacc.c  */
#line 1515 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 1516 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1520 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1524 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 306:

/* Line 1464 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1537 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1538 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1539 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1540 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1541 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1545 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1547 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1550 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 1551 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1552 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 1558 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1559 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1560 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1561 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1562 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1563 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1564 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1565 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1566 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1568 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1569 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1573 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1574 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1579 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1580 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 1581 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 344:

/* Line 1464 of yacc.c  */
#line 1582 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 345:

/* Line 1464 of yacc.c  */
#line 1586 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1587 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1588 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1589 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1590 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1594 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1595 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1596 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1597 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 354:

/* Line 1464 of yacc.c  */
#line 1598 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1599 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 356:

/* Line 1464 of yacc.c  */
#line 1600 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1601 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1602 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1604 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 360:

/* Line 1464 of yacc.c  */
#line 1605 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 361:

/* Line 1464 of yacc.c  */
#line 1606 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 366:

/* Line 1464 of yacc.c  */
#line 1620 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1621 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 368:

/* Line 1464 of yacc.c  */
#line 1622 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1623 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1624 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 372:

/* Line 1464 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 373:

/* Line 1464 of yacc.c  */
#line 1627 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 375:

/* Line 1464 of yacc.c  */
#line 1632 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 377:

/* Line 1464 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1639 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1640 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 381:

/* Line 1464 of yacc.c  */
#line 1641 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 382:

/* Line 1464 of yacc.c  */
#line 1642 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 384:

/* Line 1464 of yacc.c  */
#line 1647 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 386:

/* Line 1464 of yacc.c  */
#line 1649 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1650 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 389:

/* Line 1464 of yacc.c  */
#line 1655 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 390:

/* Line 1464 of yacc.c  */
#line 1656 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1657 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 392:

/* Line 1464 of yacc.c  */
#line 1658 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1663 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 395:

/* Line 1464 of yacc.c  */
#line 1671 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1672 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 397:

/* Line 1464 of yacc.c  */
#line 1673 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1674 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1675 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1676 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 401:

/* Line 1464 of yacc.c  */
#line 1677 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 402:

/* Line 1464 of yacc.c  */
#line 1678 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 404:

/* Line 1464 of yacc.c  */
#line 1683 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1684 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 407:

/* Line 1464 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 408:

/* Line 1464 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 410:

/* Line 1464 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 411:

/* Line 1464 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 413:

/* Line 1464 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 415:

/* Line 1464 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 418:

/* Line 1464 of yacc.c  */
#line 1705 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1706 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 420:

/* Line 1464 of yacc.c  */
#line 1708 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1709 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 423:

/* Line 1464 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1715 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 425:

/* Line 1464 of yacc.c  */
#line 1717 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 426:

/* Line 1464 of yacc.c  */
#line 1718 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 428:

/* Line 1464 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 429:

/* Line 1464 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 431:

/* Line 1464 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1730 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 434:

/* Line 1464 of yacc.c  */
#line 1735 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1736 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1737 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1738 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1740 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1741 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1742 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1743 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1745 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1746 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1747 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1748 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1750 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 448:

/* Line 1464 of yacc.c  */
#line 1752 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1753 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 451:

/* Line 1464 of yacc.c  */
#line 1758 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1759 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 453:

/* Line 1464 of yacc.c  */
#line 1760 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1761 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1763 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1764 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 457:

/* Line 1464 of yacc.c  */
#line 1765 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1766 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 459:

/* Line 1464 of yacc.c  */
#line 1770 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1771 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1772 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1773 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1774 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1775 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1776 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1777 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1778 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1779 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1780 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1784 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 471:

/* Line 1464 of yacc.c  */
#line 1785 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1786 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 474:

/* Line 1464 of yacc.c  */
#line 1791 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 475:

/* Line 1464 of yacc.c  */
#line 1792 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 476:

/* Line 1464 of yacc.c  */
#line 1793 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 478:

/* Line 1464 of yacc.c  */
#line 1798 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 480:

/* Line 1464 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1802 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 482:

/* Line 1464 of yacc.c  */
#line 1803 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1805 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1806 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1811 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1813 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 487:

/* Line 1464 of yacc.c  */
#line 1818 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 488:

/* Line 1464 of yacc.c  */
#line 1822 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); ;}
    break;

  case 490:

/* Line 1464 of yacc.c  */
#line 1824 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1826 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1827 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1829 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 494:

/* Line 1464 of yacc.c  */
#line 1830 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1835 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1837 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1842 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1846 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 499:

/* Line 1464 of yacc.c  */
#line 1847 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1848 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1849 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1850 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1851 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1852 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1853 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 506:

/* Line 1464 of yacc.c  */
#line 1854 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 507:

/* Line 1464 of yacc.c  */
#line 1855 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 508:

/* Line 1464 of yacc.c  */
#line 1856 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 509:

/* Line 1464 of yacc.c  */
#line 1857 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 515:

/* Line 1464 of yacc.c  */
#line 1873 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 517:

/* Line 1464 of yacc.c  */
#line 1878 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 1879 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 1880 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 1881 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 521:

/* Line 1464 of yacc.c  */
#line 1882 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 522:

/* Line 1464 of yacc.c  */
#line 1883 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 524:

/* Line 1464 of yacc.c  */
#line 1888 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 1892 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 526:

/* Line 1464 of yacc.c  */
#line 1896 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 527:

/* Line 1464 of yacc.c  */
#line 1900 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 529:

/* Line 1464 of yacc.c  */
#line 1908 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 1909 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 531:

/* Line 1464 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 532:

/* Line 1464 of yacc.c  */
#line 1911 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 534:

/* Line 1464 of yacc.c  */
#line 1917 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         if((yyvsp[(1) - (2)].exp).identifier._class && !(yyvsp[(1) - (2)].exp).identifier._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(1) - (2)].exp).identifier.string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   ;}
    break;

  case 535:

/* Line 1464 of yacc.c  */
#line 1967 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 1968 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 1969 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 538:

/* Line 1464 of yacc.c  */
#line 1970 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 1971 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 540:

/* Line 1464 of yacc.c  */
#line 1972 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 1973 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 543:

/* Line 1464 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 549:

/* Line 1464 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 552:

/* Line 1464 of yacc.c  */
#line 1996 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 1997 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 554:

/* Line 1464 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 557:

/* Line 1464 of yacc.c  */
#line 2005 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 2006 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 559:

/* Line 1464 of yacc.c  */
#line 2008 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 560:

/* Line 1464 of yacc.c  */
#line 2009 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 562:

/* Line 1464 of yacc.c  */
#line 2014 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 2015 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 564:

/* Line 1464 of yacc.c  */
#line 2017 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 565:

/* Line 1464 of yacc.c  */
#line 2018 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 567:

/* Line 1464 of yacc.c  */
#line 2023 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 568:

/* Line 1464 of yacc.c  */
#line 2024 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 570:

/* Line 1464 of yacc.c  */
#line 2029 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 571:

/* Line 1464 of yacc.c  */
#line 2030 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 573:

/* Line 1464 of yacc.c  */
#line 2035 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 2036 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 2037 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 2038 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 2039 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 2040 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 2041 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 2042 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 581:

/* Line 1464 of yacc.c  */
#line 2044 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 582:

/* Line 1464 of yacc.c  */
#line 2045 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 583:

/* Line 1464 of yacc.c  */
#line 2046 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 584:

/* Line 1464 of yacc.c  */
#line 2047 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 2048 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 2049 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 2050 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 2051 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 2053 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 2054 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 2055 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 2056 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 2058 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 2059 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 2060 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 2061 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 597:

/* Line 1464 of yacc.c  */
#line 2064 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2071 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 599:

/* Line 1464 of yacc.c  */
#line 2075 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 600:

/* Line 1464 of yacc.c  */
#line 2079 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 602:

/* Line 1464 of yacc.c  */
#line 2086 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 603:

/* Line 1464 of yacc.c  */
#line 2090 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 604:

/* Line 1464 of yacc.c  */
#line 2095 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2096 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2100 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2101 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2102 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2103 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2109 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2110 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2111 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 613:

/* Line 1464 of yacc.c  */
#line 2115 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 614:

/* Line 1464 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 615:

/* Line 1464 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 616:

/* Line 1464 of yacc.c  */
#line 2118 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 619:

/* Line 1464 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2130 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2131 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2133 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2134 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2138 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2139 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2140 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); ;}
    break;

  case 630:

/* Line 1464 of yacc.c  */
#line 2142 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2143 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 632:

/* Line 1464 of yacc.c  */
#line 2144 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 633:

/* Line 1464 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 634:

/* Line 1464 of yacc.c  */
#line 2149 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 635:

/* Line 1464 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 636:

/* Line 1464 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2160 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2165 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 642:

/* Line 1464 of yacc.c  */
#line 2169 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 643:

/* Line 1464 of yacc.c  */
#line 2170 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 644:

/* Line 1464 of yacc.c  */
#line 2171 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 645:

/* Line 1464 of yacc.c  */
#line 2175 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2176 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2178 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2179 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 649:

/* Line 1464 of yacc.c  */
#line 2180 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 650:

/* Line 1464 of yacc.c  */
#line 2181 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 651:

/* Line 1464 of yacc.c  */
#line 2182 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 652:

/* Line 1464 of yacc.c  */
#line 2184 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 653:

/* Line 1464 of yacc.c  */
#line 2185 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2186 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2187 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2188 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2192 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2193 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2197 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2198 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2199 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2203 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2204 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 665:

/* Line 1464 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 666:

/* Line 1464 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 667:

/* Line 1464 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2209 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 670:

/* Line 1464 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 671:

/* Line 1464 of yacc.c  */
#line 2213 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 672:

/* Line 1464 of yacc.c  */
#line 2214 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 673:

/* Line 1464 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 674:

/* Line 1464 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 675:

/* Line 1464 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 676:

/* Line 1464 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 677:

/* Line 1464 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2234 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2245 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2251 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 691:

/* Line 1464 of yacc.c  */
#line 2253 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 692:

/* Line 1464 of yacc.c  */
#line 2254 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 693:

/* Line 1464 of yacc.c  */
#line 2255 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 694:

/* Line 1464 of yacc.c  */
#line 2256 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 695:

/* Line 1464 of yacc.c  */
#line 2257 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 696:

/* Line 1464 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 697:

/* Line 1464 of yacc.c  */
#line 2259 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 698:

/* Line 1464 of yacc.c  */
#line 2260 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 699:

/* Line 1464 of yacc.c  */
#line 2261 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 700:

/* Line 1464 of yacc.c  */
#line 2262 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 704:

/* Line 1464 of yacc.c  */
#line 2266 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 705:

/* Line 1464 of yacc.c  */
#line 2267 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2268 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2269 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2270 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2271 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2272 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2273 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2274 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2275 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2279 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 715:

/* Line 1464 of yacc.c  */
#line 2280 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 716:

/* Line 1464 of yacc.c  */
#line 2281 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 717:

/* Line 1464 of yacc.c  */
#line 2282 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 718:

/* Line 1464 of yacc.c  */
#line 2283 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 719:

/* Line 1464 of yacc.c  */
#line 2284 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 720:

/* Line 1464 of yacc.c  */
#line 2285 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 721:

/* Line 1464 of yacc.c  */
#line 2286 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 722:

/* Line 1464 of yacc.c  */
#line 2287 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 723:

/* Line 1464 of yacc.c  */
#line 2288 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 724:

/* Line 1464 of yacc.c  */
#line 2289 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 725:

/* Line 1464 of yacc.c  */
#line 2290 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 726:

/* Line 1464 of yacc.c  */
#line 2291 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2295 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2296 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2297 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2298 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2299 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2300 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2301 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2302 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2309 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2311 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2313 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2315 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2317 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2319 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2321 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2323 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2325 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2327 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2331 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2332 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2337 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2343 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2349 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2356 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      ;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2365 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2366 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2367 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2368 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2372 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2373 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2374 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2376 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2377 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2378 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2380 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2381 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2382 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2386 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2391 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2399 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2408 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2416 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2418 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2419 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2420 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2425 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2432 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2439 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2442 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2455 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2469 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2472 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2485 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2496 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2497 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2498 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2500 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2501 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2502 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2503 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2505 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2510 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2511 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2512 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2513 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2515 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2516 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2517 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2518 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 814:

/* Line 1464 of yacc.c  */
#line 2522 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2523 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2524 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2525 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2526 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2527 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2528 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 821:

/* Line 1464 of yacc.c  */
#line 2529 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 822:

/* Line 1464 of yacc.c  */
#line 2530 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2531 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 824:

/* Line 1464 of yacc.c  */
#line 2532 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2533 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 826:

/* Line 1464 of yacc.c  */
#line 2537 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2538 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2539 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2540 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2541 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2542 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2543 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2544 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 834:

/* Line 1464 of yacc.c  */
#line 2545 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2546 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 836:

/* Line 1464 of yacc.c  */
#line 2550 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 837:

/* Line 1464 of yacc.c  */
#line 2551 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2555 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2556 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 840:

/* Line 1464 of yacc.c  */
#line 2557 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2558 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2559 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2560 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2561 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2562 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 846:

/* Line 1464 of yacc.c  */
#line 2564 "grammar.y"
    { _DeclClass(0, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2565 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass(0, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 848:

/* Line 1464 of yacc.c  */
#line 2568 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2586 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2604 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2608 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2609 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2610 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2611 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2612 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2613 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2614 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2615 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2617 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 861:

/* Line 1464 of yacc.c  */
#line 2635 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2651 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2652 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2653 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2654 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2655 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2656 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 868:

/* Line 1464 of yacc.c  */
#line 2657 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 869:

/* Line 1464 of yacc.c  */
#line 2658 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2659 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 871:

/* Line 1464 of yacc.c  */
#line 2660 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2661 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 873:

/* Line 1464 of yacc.c  */
#line 2662 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2664 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2682 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2698 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2699 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2700 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2701 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2702 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 881:

/* Line 1464 of yacc.c  */
#line 2703 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2704 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 883:

/* Line 1464 of yacc.c  */
#line 2705 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 884:

/* Line 1464 of yacc.c  */
#line 2706 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2707 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2708 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 887:

/* Line 1464 of yacc.c  */
#line 2709 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 888:

/* Line 1464 of yacc.c  */
#line 2711 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 889:

/* Line 1464 of yacc.c  */
#line 2729 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2745 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 891:

/* Line 1464 of yacc.c  */
#line 2746 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 892:

/* Line 1464 of yacc.c  */
#line 2750 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 893:

/* Line 1464 of yacc.c  */
#line 2751 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2752 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 895:

/* Line 1464 of yacc.c  */
#line 2753 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2754 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 898:

/* Line 1464 of yacc.c  */
#line 2760 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   ;}
    break;

  case 899:

/* Line 1464 of yacc.c  */
#line 2766 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); ;}
    break;

  case 900:

/* Line 1464 of yacc.c  */
#line 2769 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 901:

/* Line 1464 of yacc.c  */
#line 2778 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 902:

/* Line 1464 of yacc.c  */
#line 2787 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      ;}
    break;

  case 903:

/* Line 1464 of yacc.c  */
#line 2796 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      ;}
    break;

  case 904:

/* Line 1464 of yacc.c  */
#line 2804 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 905:

/* Line 1464 of yacc.c  */
#line 2805 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 2806 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 907:

/* Line 1464 of yacc.c  */
#line 2807 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 2811 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 2812 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 910:

/* Line 1464 of yacc.c  */
#line 2813 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 911:

/* Line 1464 of yacc.c  */
#line 2814 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 912:

/* Line 1464 of yacc.c  */
#line 2815 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 913:

/* Line 1464 of yacc.c  */
#line 2816 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 914:

/* Line 1464 of yacc.c  */
#line 2817 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 915:

/* Line 1464 of yacc.c  */
#line 2818 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 916:

/* Line 1464 of yacc.c  */
#line 2819 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 918:

/* Line 1464 of yacc.c  */
#line 2827 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 919:

/* Line 1464 of yacc.c  */
#line 2828 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 2829 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 2830 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 2831 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 923:

/* Line 1464 of yacc.c  */
#line 2837 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 924:

/* Line 1464 of yacc.c  */
#line 2846 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 925:

/* Line 1464 of yacc.c  */
#line 2855 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 926:

/* Line 1464 of yacc.c  */
#line 2864 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 930:

/* Line 1464 of yacc.c  */
#line 2887 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 2888 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 2889 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 2890 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 2891 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 935:

/* Line 1464 of yacc.c  */
#line 2897 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 936:

/* Line 1464 of yacc.c  */
#line 2906 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 937:

/* Line 1464 of yacc.c  */
#line 2915 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 938:

/* Line 1464 of yacc.c  */
#line 2924 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 2987 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 2988 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 2989 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 2991 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 945:

/* Line 1464 of yacc.c  */
#line 3002 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 3004 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 3009 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 3010 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 3011 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 951:

/* Line 1464 of yacc.c  */
#line 3012 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 3013 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 953:

/* Line 1464 of yacc.c  */
#line 3017 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 3018 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 3022 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 956:

/* Line 1464 of yacc.c  */
#line 3023 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 3024 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 958:

/* Line 1464 of yacc.c  */
#line 3028 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 3029 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 960:

/* Line 1464 of yacc.c  */
#line 3033 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 961:

/* Line 1464 of yacc.c  */
#line 3034 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 962:

/* Line 1464 of yacc.c  */
#line 3035 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 963:

/* Line 1464 of yacc.c  */
#line 3036 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 3037 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 965:

/* Line 1464 of yacc.c  */
#line 3038 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 966:

/* Line 1464 of yacc.c  */
#line 3039 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 967:

/* Line 1464 of yacc.c  */
#line 3040 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 968:

/* Line 1464 of yacc.c  */
#line 3041 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 969:

/* Line 1464 of yacc.c  */
#line 3042 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 970:

/* Line 1464 of yacc.c  */
#line 3043 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 971:

/* Line 1464 of yacc.c  */
#line 3044 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 972:

/* Line 1464 of yacc.c  */
#line 3045 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 973:

/* Line 1464 of yacc.c  */
#line 3046 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 974:

/* Line 1464 of yacc.c  */
#line 3047 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 975:

/* Line 1464 of yacc.c  */
#line 3048 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 976:

/* Line 1464 of yacc.c  */
#line 3052 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 977:

/* Line 1464 of yacc.c  */
#line 3053 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 978:

/* Line 1464 of yacc.c  */
#line 3054 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 979:

/* Line 1464 of yacc.c  */
#line 3055 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 980:

/* Line 1464 of yacc.c  */
#line 3056 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 981:

/* Line 1464 of yacc.c  */
#line 3057 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 982:

/* Line 1464 of yacc.c  */
#line 3058 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 983:

/* Line 1464 of yacc.c  */
#line 3059 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 984:

/* Line 1464 of yacc.c  */
#line 3063 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 985:

/* Line 1464 of yacc.c  */
#line 3064 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 986:

/* Line 1464 of yacc.c  */
#line 3065 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 987:

/* Line 1464 of yacc.c  */
#line 3066 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 3070 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 990:

/* Line 1464 of yacc.c  */
#line 3072 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 991:

/* Line 1464 of yacc.c  */
#line 3073 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 992:

/* Line 1464 of yacc.c  */
#line 3074 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 993:

/* Line 1464 of yacc.c  */
#line 3078 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 995:

/* Line 1464 of yacc.c  */
#line 3080 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 996:

/* Line 1464 of yacc.c  */
#line 3081 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 997:

/* Line 1464 of yacc.c  */
#line 3082 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 999:

/* Line 1464 of yacc.c  */
#line 3088 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1000:

/* Line 1464 of yacc.c  */
#line 3090 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1001:

/* Line 1464 of yacc.c  */
#line 3092 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 1002:

/* Line 1464 of yacc.c  */
#line 3094 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 1004:

/* Line 1464 of yacc.c  */
#line 3100 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1005:

/* Line 1464 of yacc.c  */
#line 3102 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1006:

/* Line 1464 of yacc.c  */
#line 3104 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 1008:

/* Line 1464 of yacc.c  */
#line 3109 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1009:

/* Line 1464 of yacc.c  */
#line 3110 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1010:

/* Line 1464 of yacc.c  */
#line 3111 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1012:

/* Line 1464 of yacc.c  */
#line 3116 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1013:

/* Line 1464 of yacc.c  */
#line 3117 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3118 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3123 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1017:

/* Line 1464 of yacc.c  */
#line 3124 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3125 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3130 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1021:

/* Line 1464 of yacc.c  */
#line 3131 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3132 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3137 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3138 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3139 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3143 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3144 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3146 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3161 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3162 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3163 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3165 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      ;}
    break;

  case 1034:

/* Line 1464 of yacc.c  */
#line 3178 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3193 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3195 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3199 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3200 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3204 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1040:

/* Line 1464 of yacc.c  */
#line 3205 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3206 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1042:

/* Line 1464 of yacc.c  */
#line 3207 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1043:

/* Line 1464 of yacc.c  */
#line 3210 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3211 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1045:

/* Line 1464 of yacc.c  */
#line 3215 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3216 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3217 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3221 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1049:

/* Line 1464 of yacc.c  */
#line 3225 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1050:

/* Line 1464 of yacc.c  */
#line 3229 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1051:

/* Line 1464 of yacc.c  */
#line 3230 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1052:

/* Line 1464 of yacc.c  */
#line 3231 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1053:

/* Line 1464 of yacc.c  */
#line 3232 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1054:

/* Line 1464 of yacc.c  */
#line 3234 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   ;}
    break;

  case 1055:

/* Line 1464 of yacc.c  */
#line 3242 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3251 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3252 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3253 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3254 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1060:

/* Line 1464 of yacc.c  */
#line 3258 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1061:

/* Line 1464 of yacc.c  */
#line 3259 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1062:

/* Line 1464 of yacc.c  */
#line 3263 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1063:

/* Line 1464 of yacc.c  */
#line 3264 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3269 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1065:

/* Line 1464 of yacc.c  */
#line 3270 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3271 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1067:

/* Line 1464 of yacc.c  */
#line 3272 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1068:

/* Line 1464 of yacc.c  */
#line 3273 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1069:

/* Line 1464 of yacc.c  */
#line 3275 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1070:

/* Line 1464 of yacc.c  */
#line 3293 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1071:

/* Line 1464 of yacc.c  */
#line 3294 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1072:

/* Line 1464 of yacc.c  */
#line 3298 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1073:

/* Line 1464 of yacc.c  */
#line 3299 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1074:

/* Line 1464 of yacc.c  */
#line 3300 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1075:

/* Line 1464 of yacc.c  */
#line 3301 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1076:

/* Line 1464 of yacc.c  */
#line 3302 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1077:

/* Line 1464 of yacc.c  */
#line 3303 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1078:

/* Line 1464 of yacc.c  */
#line 3305 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1079:

/* Line 1464 of yacc.c  */
#line 3306 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1080:

/* Line 1464 of yacc.c  */
#line 3307 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1081:

/* Line 1464 of yacc.c  */
#line 3308 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1082:

/* Line 1464 of yacc.c  */
#line 3312 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1083:

/* Line 1464 of yacc.c  */
#line 3313 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1084:

/* Line 1464 of yacc.c  */
#line 3314 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1085:

/* Line 1464 of yacc.c  */
#line 3315 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1086:

/* Line 1464 of yacc.c  */
#line 3316 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1087:

/* Line 1464 of yacc.c  */
#line 3318 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1088:

/* Line 1464 of yacc.c  */
#line 3319 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1089:

/* Line 1464 of yacc.c  */
#line 3320 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1091:

/* Line 1464 of yacc.c  */
#line 3325 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1092:

/* Line 1464 of yacc.c  */
#line 3326 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1093:

/* Line 1464 of yacc.c  */
#line 3327 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1094:

/* Line 1464 of yacc.c  */
#line 3328 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1095:

/* Line 1464 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1097:

/* Line 1464 of yacc.c  */
#line 3334 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1100:

/* Line 1464 of yacc.c  */
#line 3341 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1102:

/* Line 1464 of yacc.c  */
#line 3343 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1103:

/* Line 1464 of yacc.c  */
#line 3344 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1104:

/* Line 1464 of yacc.c  */
#line 3345 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3356 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3357 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3358 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3359 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3360 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3361 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3362 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3366 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null, null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3367 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp), null); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3368 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(4) - (7)].string), (yyvsp[(6) - (7)].exp), (yyvsp[(2) - (7)].id)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3372 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3373 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3374 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3378 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3379 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3380 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3381 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3384 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3385 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3387 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3388 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3389 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3390 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3393 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3394 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3398 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3399 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3400 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3401 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3402 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3404 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3405 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3406 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3407 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3408 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3412 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3413 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3414 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3415 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3416 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1154:

/* Line 1464 of yacc.c  */
#line 3417 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3418 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3420 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3421 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3422 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3423 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3424 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3428 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; ;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3429 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; ;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3430 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; ;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3434 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3435 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3439 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3440 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3441 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3442 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; ;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3446 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3447 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3448 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3450 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3451 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3452 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3456 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3460 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3461 "grammar.y"
    { structDeclMode = defaultDeclMode;  ;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3463 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3464 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3465 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3469 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3470 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3471 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1185:

/* Line 1464 of yacc.c  */
#line 3472 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3476 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3477 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3481 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3482 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3483 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3487 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1192:

/* Line 1464 of yacc.c  */
#line 3488 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1193:

/* Line 1464 of yacc.c  */
#line 3489 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1194:

/* Line 1464 of yacc.c  */
#line 3490 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3491 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1196:

/* Line 1464 of yacc.c  */
#line 3492 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1197:

/* Line 1464 of yacc.c  */
#line 3493 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3497 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1199:

/* Line 1464 of yacc.c  */
#line 3498 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3499 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3500 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3504 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3505 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3506 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3507 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1206:

/* Line 1464 of yacc.c  */
#line 3511 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3515 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3520 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3525 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3530 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3531 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3532 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3536 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3537 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1216:

/* Line 1464 of yacc.c  */
#line 3538 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3539 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1218:

/* Line 1464 of yacc.c  */
#line 3540 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3541 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3545 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3550 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3552 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3554 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3555 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3557 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3558 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3559 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3560 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3561 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3563 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3564 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3568 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3569 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3570 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3571 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3575 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1239:

/* Line 1464 of yacc.c  */
#line 3576 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1240:

/* Line 1464 of yacc.c  */
#line 3577 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3578 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3580 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3581 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3582 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1245:

/* Line 1464 of yacc.c  */
#line 3583 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1246:

/* Line 1464 of yacc.c  */
#line 3584 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3585 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3586 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3589 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3593 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3594 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3598 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3599 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3603 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3604 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3605 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3606 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3607 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3608 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3609 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3610 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3614 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3615 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3616 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3617 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3623 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1267:

/* Line 1464 of yacc.c  */
#line 3625 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1268:

/* Line 1464 of yacc.c  */
#line 3626 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1269:

/* Line 1464 of yacc.c  */
#line 3628 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1270:

/* Line 1464 of yacc.c  */
#line 3630 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1271:

/* Line 1464 of yacc.c  */
#line 3631 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1272:

/* Line 1464 of yacc.c  */
#line 3634 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1273:

/* Line 1464 of yacc.c  */
#line 3635 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1274:

/* Line 1464 of yacc.c  */
#line 3636 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1275:

/* Line 1464 of yacc.c  */
#line 3637 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1276:

/* Line 1464 of yacc.c  */
#line 3638 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1277:

/* Line 1464 of yacc.c  */
#line 3639 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1278:

/* Line 1464 of yacc.c  */
#line 3643 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1279:

/* Line 1464 of yacc.c  */
#line 3645 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1280:

/* Line 1464 of yacc.c  */
#line 3656 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1281:

/* Line 1464 of yacc.c  */
#line 3658 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1282:

/* Line 1464 of yacc.c  */
#line 3661 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1283:

/* Line 1464 of yacc.c  */
#line 3664 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1284:

/* Line 1464 of yacc.c  */
#line 3665 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1285:

/* Line 1464 of yacc.c  */
#line 3666 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1286:

/* Line 1464 of yacc.c  */
#line 3668 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1287:

/* Line 1464 of yacc.c  */
#line 3677 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1288:

/* Line 1464 of yacc.c  */
#line 3679 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1289:

/* Line 1464 of yacc.c  */
#line 3681 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1290:

/* Line 1464 of yacc.c  */
#line 3682 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1291:

/* Line 1464 of yacc.c  */
#line 3683 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1292:

/* Line 1464 of yacc.c  */
#line 3684 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1293:

/* Line 1464 of yacc.c  */
#line 3686 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1294:

/* Line 1464 of yacc.c  */
#line 3695 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1295:

/* Line 1464 of yacc.c  */
#line 3696 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1296:

/* Line 1464 of yacc.c  */
#line 3697 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1297:

/* Line 1464 of yacc.c  */
#line 3698 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1298:

/* Line 1464 of yacc.c  */
#line 3699 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1299:

/* Line 1464 of yacc.c  */
#line 3700 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1300:

/* Line 1464 of yacc.c  */
#line 3704 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1301:

/* Line 1464 of yacc.c  */
#line 3706 "grammar.y"
    {
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   ;}
    break;

  case 1302:

/* Line 1464 of yacc.c  */
#line 3713 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1303:

/* Line 1464 of yacc.c  */
#line 3715 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1304:

/* Line 1464 of yacc.c  */
#line 3716 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1305:

/* Line 1464 of yacc.c  */
#line 3719 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1306:

/* Line 1464 of yacc.c  */
#line 3720 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1307:

/* Line 1464 of yacc.c  */
#line 3724 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1308:

/* Line 1464 of yacc.c  */
#line 3725 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1309:

/* Line 1464 of yacc.c  */
#line 3726 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1312:

/* Line 1464 of yacc.c  */
#line 3732 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1313:

/* Line 1464 of yacc.c  */
#line 3733 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1314:

/* Line 1464 of yacc.c  */
#line 3735 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1315:

/* Line 1464 of yacc.c  */
#line 3737 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1318:

/* Line 1464 of yacc.c  */
#line 3743 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1319:

/* Line 1464 of yacc.c  */
#line 3747 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1320:

/* Line 1464 of yacc.c  */
#line 3748 "grammar.y"
    { Symbol symbol = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1321:

/* Line 1464 of yacc.c  */
#line 3749 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1322:

/* Line 1464 of yacc.c  */
#line 3753 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1323:

/* Line 1464 of yacc.c  */
#line 3757 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1324:

/* Line 1464 of yacc.c  */
#line 3758 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1325:

/* Line 1464 of yacc.c  */
#line 3759 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1326:

/* Line 1464 of yacc.c  */
#line 3763 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1327:

/* Line 1464 of yacc.c  */
#line 3764 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1328:

/* Line 1464 of yacc.c  */
#line 3768 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1329:

/* Line 1464 of yacc.c  */
#line 3769 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1330:

/* Line 1464 of yacc.c  */
#line 3773 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1331:

/* Line 1464 of yacc.c  */
#line 3774 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1332:

/* Line 1464 of yacc.c  */
#line 3775 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1333:

/* Line 1464 of yacc.c  */
#line 3776 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1334:

/* Line 1464 of yacc.c  */
#line 3780 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1335:

/* Line 1464 of yacc.c  */
#line 3784 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1336:

/* Line 1464 of yacc.c  */
#line 3788 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1337:

/* Line 1464 of yacc.c  */
#line 3792 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 22750 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3795 "grammar.y"


