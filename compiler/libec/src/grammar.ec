/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING            $"eC expects all declarations to precede statements in the block (C89 style)\n"
#define CASE_LABELED_STMT_WARNING   $"labeled statement directly within a case statement\n"

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 108 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     LONG = 294,
     SIGNED = 295,
     UNSIGNED = 296,
     FLOAT = 297,
     DOUBLE = 298,
     CONST = 299,
     VOLATILE = 300,
     VOID = 301,
     VALIST = 302,
     STRUCT = 303,
     UNION = 304,
     ENUM = 305,
     ELLIPSIS = 306,
     CASE = 307,
     DEFAULT = 308,
     IF = 309,
     SWITCH = 310,
     WHILE = 311,
     DO = 312,
     FOR = 313,
     GOTO = 314,
     CONTINUE = 315,
     BREAK = 316,
     RETURN = 317,
     IFX = 318,
     ELSE = 319,
     CLASS = 320,
     THISCLASS = 321,
     CLASS_NAME = 322,
     PROPERTY = 323,
     SETPROP = 324,
     GETPROP = 325,
     NEWOP = 326,
     RENEW = 327,
     DELETE = 328,
     EXT_DECL = 329,
     EXT_STORAGE = 330,
     IMPORT = 331,
     DEFINE = 332,
     VIRTUAL = 333,
     ATTRIB = 334,
     PUBLIC = 335,
     PRIVATE = 336,
     TYPED_OBJECT = 337,
     ANY_OBJECT = 338,
     _INCREF = 339,
     EXTENSION = 340,
     ASM = 341,
     TYPEOF = 342,
     WATCH = 343,
     STOPWATCHING = 344,
     FIREWATCHERS = 345,
     WATCHABLE = 346,
     CLASS_DESIGNER = 347,
     CLASS_NO_EXPANSION = 348,
     CLASS_FIXED = 349,
     ISPROPSET = 350,
     CLASS_DEFAULT_PROPERTY = 351,
     PROPERTY_CATEGORY = 352,
     CLASS_DATA = 353,
     CLASS_PROPERTY = 354,
     SUBCLASS = 355,
     NAMESPACE = 356,
     NEW0OP = 357,
     RENEW0 = 358,
     VAARG = 359,
     DBTABLE = 360,
     DBFIELD = 361,
     DBINDEX = 362,
     DATABASE_OPEN = 363,
     ALIGNOF = 364,
     ATTRIB_DEP = 365,
     __ATTRIB = 366,
     BOOL = 367,
     _BOOL = 368,
     _COMPLEX = 369,
     _IMAGINARY = 370,
     RESTRICT = 371,
     THREAD = 372,
     WIDE_STRING_LITERAL = 373
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 38 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 307 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 332 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  295
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   41266

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  144
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  257
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1308
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2168

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   373

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   138,     2,     2,   132,   140,   135,     2,
     122,   123,   119,   136,   127,   137,   130,   139,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   131,   125,
     120,   126,   121,   143,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   133,     2,   134,   141,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   129,   142,   128,   124,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   188,   191,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   958,   961,   968,   975,   981,   987,
     994,  1001,  1007,  1013,  1021,  1029,  1036,  1043,  1051,  1059,
    1066,  1073,  1078,  1084,  1089,  1096,  1101,  1103,  1105,  1107,
    1109,  1113,  1116,  1118,  1121,  1124,  1127,  1129,  1134,  1139,
    1143,  1148,  1153,  1157,  1161,  1164,  1167,  1172,  1177,  1181,
    1186,  1190,  1194,  1197,  1200,  1202,  1204,  1208,  1212,  1214,
    1216,  1220,  1224,  1227,  1230,  1233,  1236,  1239,  1242,  1247,
    1253,  1259,  1262,  1267,  1269,  1271,  1273,  1275,  1277,  1279,
    1281,  1283,  1285,  1287,  1289,  1294,  1296,  1300,  1304,  1308,
    1312,  1316,  1320,  1322,  1326,  1330,  1334,  1338,  1340,  1344,
    1348,  1352,  1356,  1359,  1361,  1364,  1368,  1372,  1376,  1380,
    1384,  1388,  1392,  1394,  1398,  1402,  1406,  1410,  1414,  1418,
    1422,  1426,  1428,  1432,  1436,  1440,  1444,  1446,  1450,  1454,
    1458,  1462,  1464,  1468,  1472,  1476,  1480,  1482,  1486,  1490,
    1492,  1496,  1500,  1502,  1508,  1514,  1520,  1526,  1532,  1538,
    1544,  1550,  1556,  1562,  1568,  1574,  1580,  1586,  1592,  1598,
    1600,  1604,  1608,  1612,  1616,  1620,  1624,  1628,  1632,  1634,
    1636,  1638,  1640,  1642,  1644,  1646,  1648,  1650,  1652,  1654,
    1656,  1660,  1664,  1667,  1669,  1673,  1677,  1679,  1681,  1684,
    1687,  1691,  1695,  1699,  1703,  1707,  1711,  1715,  1718,  1721,
    1724,  1727,  1730,  1736,  1743,  1750,  1753,  1759,  1761,  1763,
    1765,  1770,  1772,  1776,  1780,  1784,  1788,  1792,  1796,  1798,
    1802,  1806,  1810,  1814,  1816,  1820,  1824,  1828,  1832,  1834,
    1837,  1841,  1845,  1849,  1853,  1857,  1861,  1865,  1867,  1871,
    1875,  1879,  1883,  1887,  1891,  1895,  1899,  1901,  1905,  1909,
    1913,  1917,  1919,  1923,  1927,  1931,  1935,  1937,  1941,  1945,
    1949,  1953,  1955,  1959,  1963,  1965,  1969,  1973,  1975,  1981,
    1987,  1993,  1999,  2004,  2009,  2014,  2019,  2025,  2031,  2037,
    2043,  2048,  2053,  2058,  2063,  2069,  2075,  2081,  2087,  2093,
    2099,  2105,  2111,  2115,  2119,  2122,  2125,  2127,  2131,  2135,
    2139,  2143,  2145,  2148,  2152,  2156,  2159,  2162,  2165,  2167,
    2170,  2174,  2178,  2180,  2182,  2184,  2186,  2188,  2190,  2192,
    2194,  2196,  2198,  2200,  2202,  2204,  2206,  2208,  2210,  2212,
    2216,  2220,  2222,  2226,  2229,  2231,  2234,  2237,  2240,  2245,
    2250,  2254,  2258,  2263,  2269,  2274,  2281,  2288,  2293,  2299,
    2304,  2311,  2318,  2324,  2330,  2333,  2336,  2339,  2345,  2349,
    2355,  2362,  2368,  2376,  2384,  2393,  2402,  2410,  2418,  2422,
    2426,  2430,  2435,  2439,  2445,  2451,  2458,  2466,  2473,  2478,
    2480,  2482,  2484,  2486,  2488,  2490,  2492,  2494,  2496,  2499,
    2501,  2503,  2505,  2507,  2509,  2511,  2513,  2515,  2517,  2519,
    2521,  2523,  2525,  2527,  2529,  2531,  2536,  2541,  2546,  2548,
    2550,  2552,  2554,  2556,  2558,  2560,  2562,  2564,  2566,  2568,
    2570,  2572,  2574,  2576,  2578,  2580,  2582,  2584,  2586,  2588,
    2590,  2592,  2594,  2596,  2598,  2600,  2605,  2610,  2615,  2617,
    2619,  2622,  2625,  2629,  2635,  2638,  2642,  2648,  2654,  2660,
    2662,  2666,  2669,  2672,  2676,  2680,  2683,  2687,  2691,  2696,
    2700,  2704,  2708,  2712,  2716,  2720,  2725,  2730,  2735,  2737,
    2739,  2744,  2748,  2751,  2755,  2759,  2763,  2767,  2771,  2775,
    2779,  2783,  2787,  2791,  2795,  2799,  2801,  2803,  2805,  2808,
    2810,  2813,  2815,  2818,  2820,  2823,  2825,  2828,  2830,  2833,
    2835,  2838,  2840,  2843,  2845,  2848,  2850,  2853,  2855,  2858,
    2860,  2863,  2865,  2868,  2870,  2873,  2875,  2878,  2880,  2883,
    2885,  2888,  2890,  2893,  2895,  2898,  2900,  2903,  2905,  2908,
    2910,  2913,  2915,  2918,  2920,  2923,  2925,  2928,  2930,  2933,
    2935,  2937,  2939,  2942,  2944,  2947,  2949,  2952,  2954,  2957,
    2962,  2968,  2970,  2972,  2974,  2977,  2979,  2982,  2984,  2987,
    2989,  2992,  2997,  3003,  3005,  3008,  3010,  3013,  3015,  3018,
    3020,  3023,  3025,  3028,  3030,  3033,  3038,  3044,  3046,  3049,
    3051,  3054,  3056,  3059,  3061,  3064,  3066,  3069,  3071,  3074,
    3079,  3085,  3089,  3093,  3095,  3099,  3103,  3107,  3111,  3113,
    3115,  3117,  3122,  3127,  3132,  3136,  3141,  3146,  3151,  3155,
    3157,  3161,  3166,  3170,  3175,  3180,  3185,  3190,  3194,  3197,
    3201,  3205,  3209,  3213,  3216,  3219,  3222,  3226,  3231,  3233,
    3235,  3238,  3242,  3246,  3250,  3254,  3257,  3260,  3263,  3267,
    3272,  3274,  3276,  3278,  3280,  3282,  3287,  3289,  3291,  3293,
    3295,  3297,  3299,  3301,  3303,  3305,  3310,  3312,  3315,  3319,
    3326,  3332,  3336,  3341,  3344,  3348,  3352,  3356,  3360,  3365,
    3370,  3375,  3378,  3382,  3386,  3390,  3395,  3400,  3404,  3409,
    3412,  3416,  3420,  3424,  3429,  3434,  3436,  3439,  3442,  3446,
    3448,  3450,  3453,  3456,  3460,  3462,  3464,  3467,  3470,  3474,
    3476,  3479,  3483,  3486,  3489,  3491,  3494,  3498,  3501,  3503,
    3506,  3510,  3514,  3516,  3519,  3523,  3527,  3529,  3532,  3536,
    3540,  3542,  3545,  3549,  3553,  3555,  3558,  3562,  3566,  3568,
    3572,  3577,  3579,  3584,  3587,  3593,  3597,  3599,  3601,  3603,
    3605,  3607,  3609,  3613,  3617,  3620,  3623,  3625,  3627,  3631,
    3634,  3638,  3640,  3644,  3648,  3652,  3656,  3660,  3662,  3665,
    3669,  3673,  3675,  3678,  3680,  3683,  3686,  3689,  3692,  3696,
    3698,  3700,  3704,  3708,  3710,  3714,  3719,  3723,  3728,  3732,
    3736,  3741,  3745,  3750,  3752,  3756,  3760,  3765,  3769,  3773,
    3777,  3782,  3784,  3788,  3792,  3796,  3800,  3804,  3806,  3810,
    3813,  3815,  3817,  3819,  3821,  3823,  3826,  3828,  3830,  3832,
    3834,  3837,  3840,  3843,  3845,  3847,  3849,  3851,  3853,  3856,
    3858,  3860,  3865,  3873,  3875,  3879,  3880,  3887,  3896,  3907,
    3920,  3929,  3940,  3951,  3957,  3965,  3975,  3987,  3995,  4005,
    4015,  4019,  4024,  4029,  4033,  4037,  4041,  4046,  4051,  4055,
    4059,  4063,  4068,  4073,  4077,  4080,  4084,  4087,  4091,  4096,
    4101,  4105,  4109,  4111,  4113,  4115,  4117,  4119,  4122,  4126,
    4129,  4132,  4135,  4139,  4143,  4146,  4152,  4159,  4162,  4165,
    4168,  4171,  4174,  4177,  4179,  4182,  4185,  4189,  4191,  4194,
    4196,  4199,  4202,  4204,  4207,  4210,  4213,  4216,  4219,  4222,
    4224,  4226,  4229,  4232,  4234,  4236,  4239,  4242,  4244,  4247,
    4250,  4252,  4255,  4257,  4260,  4263,  4269,  4275,  4283,  4291,
    4297,  4303,  4307,  4310,  4316,  4321,  4326,  4334,  4341,  4348,
    4354,  4362,  4369,  4374,  4382,  4392,  4396,  4401,  4406,  4412,
    4418,  4425,  4433,  4440,  4447,  4453,  4459,  4464,  4468,  4471,
    4473,  4476,  4481,  4485,  4491,  4496,  4500,  4503,  4506,  4509,
    4513,  4517,  4521,  4525,  4528,  4531,  4533,  4535,  4540,  4544,
    4549,  4553,  4557,  4560,  4565,  4569,  4574,  4578,  4582,  4585,
    4587,  4590,  4592,  4594,  4597,  4599,  4602,  4606,  4610,  4612,
    4615,  4618,  4621,  4625,  4630,  4635,  4638,  4641,  4644,  4647,
    4649,  4652,  4654,  4657,  4659,  4662,  4665,  4667,  4670,  4672,
    4675,  4678,  4681,  4684,  4686,  4689,  4692,  4696,  4698,  4700,
    4701,  4708,  4715,  4721,  4726,  4728,  4731,  4734,  4736,  4740,
    4744,  4749,  4751,  4753,  4756,  4759,  4766,  4773,  4780
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     390,     0,    -1,   216,   119,    -1,   216,   120,    -1,   149,
      -1,   216,   216,    -1,    28,    -1,    28,    -1,   147,    -1,
     147,   120,   210,   121,    -1,   147,   120,   210,    11,    -1,
     299,   334,    -1,   332,    -1,   299,   122,   123,    -1,   124,
     299,   122,   123,    -1,    78,   299,   334,    -1,    78,   332,
      -1,   299,   335,    -1,   333,    -1,    78,   299,   335,    -1,
      78,   333,    -1,   150,   374,    -1,   153,   374,    -1,   153,
     125,    -1,   151,   374,    -1,   152,   374,    -1,   150,   125,
      -1,   150,   324,   125,    -1,   150,   375,    -1,   154,    -1,
     153,   375,    -1,   155,    -1,   155,   125,    -1,   298,   334,
      -1,   298,   336,    -1,   298,   335,    -1,   158,   374,    -1,
     158,   375,    -1,   159,    -1,   158,    -1,   224,   126,   339,
      -1,   339,    -1,   224,   126,   340,    -1,   224,   126,     1,
      -1,   340,    -1,   162,    -1,   164,   127,   162,    -1,   165,
     127,   162,    -1,   163,    -1,   164,   127,   163,    -1,   165,
     127,   163,    -1,   164,   127,     1,    -1,   165,   127,     1,
      -1,   127,    -1,   164,   125,    -1,   165,   125,    -1,   166,
      -1,   160,    -1,   169,   166,    -1,   169,   160,    -1,   167,
     166,    -1,   167,   160,    -1,   169,   125,    -1,   167,   125,
      -1,   125,    -1,   167,    -1,   164,    -1,   167,   164,    -1,
     169,   164,    -1,   161,    -1,   168,   161,    -1,   169,   161,
      -1,   167,   161,    -1,   167,   165,    -1,   165,    -1,   164,
       1,    -1,   171,   128,    -1,   171,     1,   128,    -1,   298,
     216,   129,   169,    -1,   298,   216,   129,   168,     1,    -1,
     298,   216,   129,   168,    -1,   298,   216,   129,    -1,   298,
     216,   129,     1,    -1,   173,   128,    -1,   173,     1,   128,
      -1,   299,   216,   129,   169,    -1,   299,   216,   129,   168,
       1,    -1,   299,   216,   129,   168,    -1,   299,   216,   129,
      -1,   299,   216,   129,     1,    -1,   300,   216,   129,   168,
     128,    -1,   300,   216,   129,   169,   128,    -1,   300,   216,
     129,   128,    -1,   176,   128,    -1,   176,     1,   128,    -1,
     149,   129,   168,    -1,   216,   129,   168,    -1,   149,   129,
     169,    -1,   149,   129,    -1,   149,   129,   168,     1,    -1,
     149,   129,     1,    -1,   216,   129,   169,    -1,   216,   129,
      -1,   216,   129,   168,     1,    -1,   216,   129,     1,    -1,
     178,   128,    -1,   178,     1,   128,    -1,   129,   169,    -1,
     129,   168,     1,    -1,   129,     1,    -1,   129,    -1,   129,
     168,    -1,   224,   126,   339,    -1,   224,   126,   340,    -1,
     224,   126,     1,    -1,   224,     1,    -1,   179,    -1,   181,
     127,   179,    -1,   182,   127,   179,    -1,   180,    -1,   181,
     127,   180,    -1,   182,   127,   180,    -1,   181,     1,    -1,
      68,   304,   216,   129,    -1,    68,   304,   328,   216,   129,
      -1,    68,   304,   129,    -1,    68,   304,   328,   129,    -1,
      68,     1,   129,    -1,   183,    -1,   184,    69,   374,    -1,
     184,    70,   374,    -1,   184,    95,   374,    -1,   184,    91,
      -1,   184,    97,   218,    -1,   184,   128,    -1,    99,   304,
     216,   129,    -1,    99,   304,   328,   216,   129,    -1,    99,
     304,   129,    -1,    99,   304,   328,   129,    -1,    99,     1,
     129,    -1,   186,    -1,   187,    69,   374,    -1,   187,    70,
     374,    -1,   187,   128,    -1,   216,    -1,   189,   216,    -1,
     189,   374,    -1,    73,   374,    -1,   190,    -1,   191,   190,
      -1,    88,   122,   189,   123,   374,    -1,    88,   122,   243,
     123,   129,   191,   128,    -1,   243,   130,    88,   122,   243,
     123,   129,   191,   128,    -1,    89,   122,   243,   127,   189,
     123,    -1,   243,   130,    89,   122,   243,   127,   189,   123,
      -1,    89,   122,   243,   123,    -1,   243,   130,    89,   122,
     243,   123,    -1,    90,    -1,    90,   189,    -1,   224,   130,
      90,    -1,   243,   130,    90,   189,    -1,   197,   125,    -1,
     181,   125,    -1,   156,    -1,   185,    -1,   362,   156,    -1,
     362,   185,    -1,   188,    -1,    91,    -1,    93,    -1,    94,
      -1,    99,   122,   216,   123,   126,   339,   125,    -1,   125,
      -1,   362,   131,    -1,   362,   122,   216,   123,    -1,   157,
      -1,   299,    -1,   299,   286,    -1,   362,   299,   286,    -1,
     362,   299,    -1,   362,   175,    -1,   362,   172,    -1,    98,
     299,   286,    -1,   192,    -1,    92,   216,    -1,    92,   149,
      -1,    96,   216,    -1,   175,    -1,   172,    -1,   181,    -1,
     173,     1,    -1,   176,     1,    -1,   362,   157,    -1,   362,
     173,     1,    -1,   362,   176,     1,    -1,   182,    -1,   196,
      -1,   198,   196,    -1,   199,   196,    -1,   197,    -1,   198,
       1,    -1,   199,     1,    -1,   198,   197,    -1,   199,   197,
      -1,   299,    -1,   299,   328,    -1,   299,    -1,   299,   328,
      -1,    65,   216,    -1,    65,   216,   126,   201,    -1,    65,
     216,   131,   200,    -1,    65,   216,   131,   200,   126,   201,
      -1,    65,   148,    -1,    65,   148,   126,   201,    -1,    65,
     148,   131,   200,    -1,    65,   148,   131,   200,   126,   201,
      -1,   216,    -1,   216,    -1,   216,   126,   203,    -1,   233,
      -1,   299,   216,   126,   205,    -1,   299,   328,   216,   126,
     205,    -1,   202,    -1,   204,    -1,   206,    -1,   207,    -1,
     208,   127,   207,    -1,   205,    -1,   203,    -1,   201,    -1,
     216,   126,   205,    -1,   216,   126,   203,    -1,   216,   126,
     201,    -1,   209,    -1,   210,   127,   209,    -1,    65,    -1,
     211,   216,    -1,   211,   147,    -1,   216,   211,   216,    -1,
     216,   211,   147,    -1,   211,   216,   120,   208,   121,    -1,
     211,   147,   120,   208,   121,    -1,   216,   211,   216,   120,
     208,   121,    -1,   216,   211,   147,   120,   208,   121,    -1,
     215,   128,    -1,   214,   125,    -1,   212,   129,   128,    -1,
     214,   129,   128,    -1,   211,   216,   125,    -1,   211,   146,
     125,    -1,   212,   131,   303,    -1,   212,   129,   199,    -1,
     214,   129,   199,    -1,   212,   129,   198,    -1,   214,   129,
     198,    -1,   212,   129,     1,    -1,   214,   129,     1,    -1,
       3,    -1,   220,    -1,   122,   245,   123,    -1,   385,    -1,
     132,   385,    -1,   132,   385,   130,   385,    -1,     4,    -1,
     216,    -1,   175,    -1,    85,   122,   374,   123,    -1,    85,
     122,   245,   123,    -1,    85,   122,   346,   123,   337,    -1,
      85,   122,   346,   123,   122,   346,   123,   337,    -1,   219,
     216,    -1,   219,    -1,   218,    -1,   118,    -1,   122,   123,
      -1,    71,   306,   329,   133,   265,   134,    -1,    71,   306,
     329,   133,   266,   134,    -1,    71,   306,   133,   265,   134,
      -1,    71,   306,   133,   266,   134,    -1,   102,   306,   329,
     133,   265,   134,    -1,   102,   306,   329,   133,   266,   134,
      -1,   102,   306,   133,   265,   134,    -1,   102,   306,   133,
     266,   134,    -1,    72,   265,   305,   329,   133,   265,   134,
      -1,    72,   265,   305,   329,   133,   266,   134,    -1,    72,
     265,   305,   133,   265,   134,    -1,    72,   265,   305,   133,
     266,   134,    -1,   103,   265,   305,   329,   133,   265,   134,
      -1,   103,   265,   305,   329,   133,   266,   134,    -1,   103,
     265,   305,   133,   265,   134,    -1,   103,   265,   305,   133,
     266,   134,    -1,    65,   122,   298,   123,    -1,    65,   122,
     298,   328,   123,    -1,    65,   122,   216,   123,    -1,   104,
     122,   243,   127,   346,   123,    -1,    98,   122,   216,   123,
      -1,   397,    -1,   398,    -1,   399,    -1,   400,    -1,   133,
     225,   134,    -1,   133,   134,    -1,   177,    -1,   178,     1,
      -1,   122,   245,    -1,   122,   263,    -1,   217,    -1,   224,
     133,   245,   134,    -1,   224,   133,   263,   134,    -1,   224,
     122,   123,    -1,   224,   122,   225,   123,    -1,   224,   122,
     226,   123,    -1,   224,   130,   216,    -1,   224,     7,   216,
      -1,   224,     8,    -1,   224,     9,    -1,   247,   133,   245,
     134,    -1,   247,   133,   263,   134,    -1,   247,   122,   123,
      -1,   247,   122,   225,   123,    -1,   247,   130,   216,    -1,
     247,     7,   216,    -1,   247,     8,    -1,   247,     9,    -1,
     243,    -1,   221,    -1,   225,   127,   243,    -1,   225,   127,
     221,    -1,   262,    -1,   222,    -1,   225,   127,   262,    -1,
     225,   127,   222,    -1,   225,   127,    -1,     8,   228,    -1,
       9,   228,    -1,   229,   230,    -1,   229,   221,    -1,     6,
     228,    -1,     6,   122,   347,   123,    -1,     6,   122,    65,
     146,   123,    -1,     6,   122,    65,   145,   123,    -1,   109,
     228,    -1,   109,   122,   347,   123,    -1,   227,    -1,   224,
      -1,   135,    -1,   119,    -1,   136,    -1,   137,    -1,   124,
      -1,   138,    -1,    73,    -1,    84,    -1,   228,    -1,   122,
     346,   123,   230,    -1,   230,    -1,   231,   119,   230,    -1,
     231,   139,   230,    -1,   231,   140,   230,    -1,   251,   119,
     230,    -1,   251,   139,   230,    -1,   251,   140,   230,    -1,
     231,    -1,   232,   136,   231,    -1,   232,   137,   231,    -1,
     252,   136,   231,    -1,   252,   137,   231,    -1,   232,    -1,
     233,    10,   232,    -1,   233,    11,   232,    -1,   253,    10,
     232,    -1,   253,    11,   232,    -1,   235,   120,    -1,   233,
      -1,   234,   233,    -1,   235,   121,   233,    -1,   235,    12,
     233,    -1,   235,    13,   233,    -1,   254,   120,   233,    -1,
     254,   121,   233,    -1,   254,    12,   233,    -1,   254,    13,
     233,    -1,   235,    -1,   236,    14,   235,    -1,   236,    15,
     235,    -1,   255,    14,   235,    -1,   255,    15,   235,    -1,
     236,    14,   221,    -1,   236,    15,   221,    -1,   255,    14,
     221,    -1,   255,    15,   221,    -1,   236,    -1,   237,   135,
     236,    -1,   256,   135,   236,    -1,   237,   135,   221,    -1,
     256,   135,   221,    -1,   237,    -1,   238,   141,   237,    -1,
     257,   141,   237,    -1,   238,   141,   221,    -1,   257,   141,
     221,    -1,   238,    -1,   239,   142,   238,    -1,   258,   142,
     238,    -1,   239,   142,   221,    -1,   258,   142,   221,    -1,
     239,    -1,   240,    16,   239,    -1,   259,    16,   239,    -1,
     240,    -1,   241,    17,   240,    -1,   260,    17,   240,    -1,
     241,    -1,   241,   143,   245,   131,   242,    -1,   241,   143,
     263,   131,   242,    -1,   260,   143,   245,   131,   242,    -1,
     260,   143,   263,   131,   242,    -1,   241,   143,   246,   131,
     242,    -1,   241,   143,   264,   131,   242,    -1,   260,   143,
     246,   131,   242,    -1,   260,   143,   264,   131,   242,    -1,
     241,   143,   245,   131,   221,    -1,   241,   143,   263,   131,
     221,    -1,   260,   143,   245,   131,   221,    -1,   260,   143,
     263,   131,   221,    -1,   241,   143,   246,   131,   221,    -1,
     241,   143,   264,   131,   221,    -1,   260,   143,   246,   131,
     221,    -1,   260,   143,   264,   131,   221,    -1,   242,    -1,
     228,   244,   243,    -1,   249,   244,   243,    -1,   242,   244,
     243,    -1,   261,   244,   243,    -1,   228,   244,   221,    -1,
     249,   244,   221,    -1,   242,   244,   221,    -1,   261,   244,
     221,    -1,   126,    -1,    18,    -1,    19,    -1,    20,    -1,
      21,    -1,    22,    -1,    23,    -1,    24,    -1,    25,    -1,
      26,    -1,    27,    -1,   243,    -1,   245,   127,   243,    -1,
     263,   127,   243,    -1,   263,   123,    -1,   221,    -1,   245,
     127,   221,    -1,   263,   127,   221,    -1,   223,    -1,     1,
      -1,   224,     1,    -1,   176,     1,    -1,   224,     7,     1,
      -1,   247,     7,     1,    -1,   224,   122,   225,    -1,   224,
     122,   226,    -1,   224,   130,     1,    -1,   247,   122,   226,
      -1,   247,   130,     1,    -1,     8,   249,    -1,     9,   249,
      -1,   229,   250,    -1,   229,   222,    -1,     6,   249,    -1,
       6,   122,   347,   123,     1,    -1,     6,   122,    65,   146,
     123,     1,    -1,     6,   122,    65,   145,   123,     1,    -1,
     109,   249,    -1,   109,   122,   347,   123,     1,    -1,   248,
      -1,   247,    -1,   249,    -1,   122,   346,   123,   250,    -1,
     250,    -1,   231,   119,   250,    -1,   231,   139,   250,    -1,
     231,   140,   250,    -1,   251,   119,   250,    -1,   251,   139,
     250,    -1,   251,   140,   250,    -1,   251,    -1,   232,   136,
     251,    -1,   232,   137,   251,    -1,   252,   136,   251,    -1,
     252,   137,   251,    -1,   252,    -1,   233,    10,   252,    -1,
     233,    11,   252,    -1,   253,    10,   252,    -1,   253,    11,
     252,    -1,   253,    -1,   234,   253,    -1,   235,   121,   253,
      -1,   235,    12,   253,    -1,   235,    13,   253,    -1,   254,
     120,   253,    -1,   254,   121,   253,    -1,   254,    12,   253,
      -1,   254,    13,   253,    -1,   254,    -1,   236,    14,   254,
      -1,   236,    15,   254,    -1,   255,    14,   254,    -1,   255,
      15,   254,    -1,   236,    14,   222,    -1,   236,    15,   222,
      -1,   255,    14,   222,    -1,   255,    15,   222,    -1,   255,
      -1,   237,   135,   255,    -1,   256,   135,   255,    -1,   237,
     135,   222,    -1,   256,   135,   222,    -1,   256,    -1,   238,
     141,   256,    -1,   257,   141,   256,    -1,   238,   141,   222,
      -1,   257,   141,   222,    -1,   257,    -1,   239,   142,   257,
      -1,   258,   142,   257,    -1,   239,   142,   222,    -1,   258,
     142,   222,    -1,   258,    -1,   240,    16,   258,    -1,   259,
      16,   258,    -1,   259,    -1,   241,    17,   259,    -1,   260,
      17,   259,    -1,   260,    -1,   241,   143,   245,   131,   260,
      -1,   241,   143,   263,   131,   260,    -1,   260,   143,   245,
     131,   260,    -1,   260,   143,   263,   131,   260,    -1,   241,
     143,   245,   131,    -1,   241,   143,   263,   131,    -1,   260,
     143,   245,   131,    -1,   260,   143,   263,   131,    -1,   241,
     143,   246,   131,   260,    -1,   241,   143,   264,   131,   260,
      -1,   260,   143,   246,   131,   260,    -1,   260,   143,   264,
     131,   260,    -1,   241,   143,   246,   131,    -1,   241,   143,
     264,   131,    -1,   260,   143,   246,   131,    -1,   260,   143,
     264,   131,    -1,   241,   143,   245,   131,   222,    -1,   241,
     143,   263,   131,   222,    -1,   260,   143,   245,   131,   222,
      -1,   260,   143,   263,   131,   222,    -1,   241,   143,   246,
     131,   222,    -1,   241,   143,   264,   131,   222,    -1,   260,
     143,   246,   131,   222,    -1,   260,   143,   264,   131,   222,
      -1,   241,   143,   131,    -1,   260,   143,   131,    -1,   241,
     143,    -1,   260,   143,    -1,   261,    -1,   228,   244,   262,
      -1,   249,   244,   262,    -1,   228,   244,   222,    -1,   249,
     244,   222,    -1,   262,    -1,   243,     1,    -1,   245,   127,
     262,    -1,   263,   127,   262,    -1,   245,   245,    -1,   263,
     245,    -1,   245,   263,    -1,   222,    -1,   221,     1,    -1,
     245,   127,   222,    -1,   263,   127,   222,    -1,   242,    -1,
     261,    -1,    29,    -1,    30,    -1,    31,    -1,   117,    -1,
      32,    -1,    33,    -1,   116,    -1,    29,    -1,    30,    -1,
      31,    -1,   117,    -1,    32,    -1,    33,    -1,   116,    -1,
     216,    -1,   216,   126,   265,    -1,   216,   126,   266,    -1,
     269,    -1,   270,   127,   269,    -1,   270,   127,    -1,    50,
      -1,   271,   216,    -1,   271,   149,    -1,   274,   128,    -1,
     271,   216,   129,   128,    -1,   271,   149,   129,   128,    -1,
     271,   129,   270,    -1,   271,   129,     1,    -1,   271,   216,
     129,   270,    -1,   271,   216,   129,   270,     1,    -1,   271,
     216,   129,     1,    -1,   271,   216,   129,   270,   125,   198,
      -1,   271,   216,   129,   270,   125,   199,    -1,   271,   149,
     129,   270,    -1,   271,   149,   129,   270,     1,    -1,   271,
     149,   129,     1,    -1,   271,   149,   129,   270,   125,   198,
      -1,   271,   149,   129,   270,   125,   199,    -1,   271,   216,
     129,   270,   125,    -1,   271,   149,   129,   270,   125,    -1,
     271,   216,    -1,   271,   149,    -1,   277,   128,    -1,   275,
     131,   303,   129,   128,    -1,   275,   129,   128,    -1,   275,
     131,   303,   129,   270,    -1,   275,   131,   303,   129,   270,
       1,    -1,   275,   131,   303,   129,     1,    -1,   275,   131,
     303,   129,   270,   125,   198,    -1,   275,   131,   303,   129,
     270,   125,   199,    -1,   275,   131,   303,   129,   270,     1,
     125,   198,    -1,   275,   131,   303,   129,   270,     1,   125,
     199,    -1,   275,   131,   303,   129,     1,   125,   198,    -1,
     275,   131,   303,   129,     1,   125,   199,    -1,   271,   129,
     270,    -1,   271,   129,     1,    -1,   275,   129,   270,    -1,
     275,   129,   270,     1,    -1,   275,   129,     1,    -1,   275,
     129,   270,   125,   198,    -1,   275,   129,   270,   125,   199,
      -1,   275,   131,   303,   129,   270,   125,    -1,   275,   131,
     303,   129,   270,     1,   125,    -1,   275,   131,   303,   129,
       1,   125,    -1,   275,   129,   270,   125,    -1,   276,    -1,
     293,    -1,   277,    -1,   294,    -1,   319,    -1,    44,    -1,
      45,    -1,   280,    -1,   281,    -1,   282,   281,    -1,    46,
      -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,    38,
      -1,    47,    -1,    39,    -1,    42,    -1,    43,    -1,    40,
      -1,    41,    -1,    85,    -1,   290,    -1,   272,    -1,   146,
      -1,    87,   122,   243,   123,    -1,   100,   122,   146,   123,
      -1,   100,   122,   216,   123,    -1,    66,    -1,    82,    -1,
      83,    -1,   113,    -1,   112,    -1,   114,    -1,   115,    -1,
      46,    -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,
      38,    -1,    47,    -1,    39,    -1,    42,    -1,    43,    -1,
      40,    -1,    41,    -1,    85,    -1,   290,    -1,   272,    -1,
     149,    -1,   113,    -1,   112,    -1,   114,    -1,   115,    -1,
      87,   122,   243,   123,    -1,   100,   122,   146,   123,    -1,
     100,   122,   216,   123,    -1,    66,    -1,   336,    -1,   336,
     324,    -1,   131,   265,    -1,   336,   131,   265,    -1,   336,
     131,   265,   131,   265,    -1,   131,   266,    -1,   336,   131,
     266,    -1,   336,   131,   265,   131,   266,    -1,   336,   131,
     266,   131,   266,    -1,   336,   131,   266,   131,   265,    -1,
     285,    -1,   286,   127,   285,    -1,   295,   216,    -1,   295,
     147,    -1,   295,   319,   216,    -1,   295,   319,   147,    -1,
     289,   128,    -1,   287,   129,   128,    -1,   295,   129,   128,
      -1,   295,   319,   129,   128,    -1,   287,   129,   198,    -1,
     287,   129,   199,    -1,   287,   129,     1,    -1,   295,   129,
     198,    -1,   295,   129,   199,    -1,   295,   129,     1,    -1,
     295,   319,   129,   198,    -1,   295,   319,   129,   199,    -1,
     295,   319,   129,     1,    -1,   287,    -1,   287,    -1,   287,
     120,   208,   121,    -1,   291,   131,   303,    -1,   294,   128,
      -1,   292,   129,   128,    -1,   291,   129,   128,    -1,   295,
     129,   128,    -1,   292,   129,   198,    -1,   292,   129,   199,
      -1,   292,   129,     1,    -1,   291,   129,   198,    -1,   291,
     129,   199,    -1,   291,   129,     1,    -1,   295,   129,   198,
      -1,   295,   129,   199,    -1,   295,   129,     1,    -1,    48,
      -1,    49,    -1,   281,    -1,   296,   281,    -1,   283,    -1,
     296,   283,    -1,   273,    -1,   296,   273,    -1,   288,    -1,
     296,   288,    -1,   281,    -1,   297,   281,    -1,   283,    -1,
     297,   283,    -1,   145,    -1,   297,   145,    -1,   273,    -1,
     297,   273,    -1,   288,    -1,   297,   288,    -1,   267,    -1,
     298,   267,    -1,   281,    -1,   298,   281,    -1,   284,    -1,
     298,   284,    -1,   273,    -1,   298,   273,    -1,   288,    -1,
     298,   288,    -1,   267,    -1,   299,   267,    -1,   281,    -1,
     299,   281,    -1,   283,    -1,   299,   283,    -1,   145,    -1,
     299,   145,    -1,   288,    -1,   299,   288,    -1,   273,    -1,
     299,   273,    -1,   268,    -1,   300,   268,    -1,   281,    -1,
     300,   281,    -1,   283,    -1,   300,   283,    -1,   145,    -1,
     300,   145,    -1,   278,    -1,   300,   278,    -1,   279,    -1,
     300,   279,    -1,    81,    -1,    80,    -1,   267,    -1,   302,
     267,    -1,   281,    -1,   302,   281,    -1,   284,    -1,   302,
     284,    -1,   216,    -1,   302,   216,    -1,   216,   120,   210,
     121,    -1,   302,   216,   120,   210,   121,    -1,   302,    -1,
     295,    -1,   267,    -1,   304,   267,    -1,   281,    -1,   304,
     281,    -1,   284,    -1,   304,   284,    -1,   216,    -1,   304,
     216,    -1,   216,   120,   210,   121,    -1,   304,   216,   120,
     210,   121,    -1,   267,    -1,   305,   267,    -1,   281,    -1,
     305,   281,    -1,   284,    -1,   305,   284,    -1,   288,    -1,
     305,   288,    -1,   273,    -1,   305,   273,    -1,   216,    -1,
     305,   216,    -1,   216,   120,   210,   121,    -1,   305,   216,
     120,   210,   121,    -1,   267,    -1,   306,   267,    -1,   281,
      -1,   306,   281,    -1,   284,    -1,   306,   284,    -1,   288,
      -1,   306,   288,    -1,   273,    -1,   306,   273,    -1,   216,
      -1,   306,   216,    -1,   216,   120,   210,   121,    -1,   306,
     216,   120,   210,   121,    -1,   308,   127,     1,    -1,   307,
     127,     1,    -1,   216,    -1,   308,   127,   216,    -1,   307,
     127,   216,    -1,   350,   127,   216,    -1,   351,   127,   216,
      -1,   310,    -1,   147,    -1,    37,    -1,   147,   133,   265,
     134,    -1,   147,   133,   266,   134,    -1,   147,   133,   146,
     134,    -1,   147,   133,   134,    -1,   309,   133,   265,   134,
      -1,   309,   133,   266,   134,    -1,   309,   133,   146,   134,
      -1,   309,   133,   134,    -1,   216,    -1,   122,   330,   123,
      -1,   122,   319,   330,   123,    -1,   122,   331,   123,    -1,
     122,   319,   331,   123,    -1,   310,   133,   265,   134,    -1,
     310,   133,   266,   134,    -1,   310,   133,   146,   134,    -1,
     310,   133,   134,    -1,   310,   122,    -1,   311,   352,   123,
      -1,   311,   353,   123,    -1,   311,   308,   123,    -1,   311,
     307,   123,    -1,   311,   123,    -1,   311,   307,    -1,   311,
       1,    -1,   311,   350,   122,    -1,   311,   299,   216,   122,
      -1,   312,    -1,   310,    -1,   309,   122,    -1,   315,   352,
     123,    -1,   315,   353,   123,    -1,   315,   308,   123,    -1,
     315,   307,   123,    -1,   315,   123,    -1,   315,   307,    -1,
     315,     1,    -1,   315,   350,   122,    -1,   315,   299,   216,
     122,    -1,   316,    -1,   309,    -1,    74,    -1,    75,    -1,
     324,    -1,    86,   122,   385,   123,    -1,    79,    -1,   110,
      -1,   111,    -1,     3,    -1,    28,    -1,    75,    -1,    74,
      -1,    44,    -1,   321,    -1,   321,   122,   245,   123,    -1,
     322,    -1,   323,   322,    -1,   323,   127,   322,    -1,   320,
     122,   122,   323,   123,   123,    -1,   320,   122,   122,   123,
     123,    -1,   122,   328,   123,    -1,   122,   319,   328,   123,
      -1,   133,   134,    -1,   133,   265,   134,    -1,   133,   266,
     134,    -1,   133,   146,   134,    -1,   325,   133,   134,    -1,
     325,   133,   265,   134,    -1,   325,   133,   146,   134,    -1,
     325,   133,   266,   134,    -1,   122,   123,    -1,   122,   352,
     123,    -1,   122,   353,   123,    -1,   325,   122,   123,    -1,
     325,   122,   352,   123,    -1,   325,   122,   353,   123,    -1,
     122,   329,   123,    -1,   122,   319,   329,   123,    -1,   122,
     123,    -1,   122,   352,   123,    -1,   122,   353,   123,    -1,
     326,   122,   123,    -1,   326,   122,   352,   123,    -1,   326,
     122,   353,   123,    -1,   119,    -1,   119,   282,    -1,   119,
     327,    -1,   119,   282,   327,    -1,   327,    -1,   325,    -1,
     327,   325,    -1,   319,   327,    -1,   319,   327,   325,    -1,
     327,    -1,   326,    -1,   327,   326,    -1,   319,   327,    -1,
     319,   327,   326,    -1,   314,    -1,   327,   314,    -1,   319,
     327,   314,    -1,   330,   319,    -1,   336,   319,    -1,   318,
      -1,   327,   318,    -1,   319,   327,   318,    -1,   331,   319,
      -1,   312,    -1,   327,   312,    -1,   319,   327,   312,    -1,
     327,   319,   312,    -1,   313,    -1,   327,   313,    -1,   319,
     327,   313,    -1,   327,   319,   313,    -1,   316,    -1,   327,
     316,    -1,   319,   327,   316,    -1,   327,   319,   316,    -1,
     317,    -1,   327,   317,    -1,   319,   327,   317,    -1,   327,
     319,   317,    -1,   309,    -1,   327,   309,    -1,   319,   327,
     309,    -1,   327,   319,   309,    -1,   243,    -1,   129,   341,
     128,    -1,   129,   341,   127,   128,    -1,   262,    -1,   129,
     341,   128,     1,    -1,   129,   341,    -1,   129,   341,   127,
     128,     1,    -1,   129,   341,   127,    -1,   242,    -1,   221,
      -1,   261,    -1,   222,    -1,   337,    -1,   338,    -1,   341,
     127,   337,    -1,   341,   127,   338,    -1,   341,   337,    -1,
     341,   338,    -1,   330,    -1,   331,    -1,   330,   126,   337,
      -1,   330,     1,    -1,   330,   126,   338,    -1,   342,    -1,
     344,   127,   342,    -1,    37,   127,   342,    -1,    38,   127,
     342,    -1,   147,   127,   342,    -1,   345,   127,   342,    -1,
     343,    -1,   342,     1,    -1,   344,   127,   343,    -1,   345,
     127,   343,    -1,   296,    -1,   296,   328,    -1,   297,    -1,
     297,   328,    -1,   299,   331,    -1,   299,   328,    -1,   299,
     135,    -1,   299,   135,   331,    -1,   299,    -1,    65,    -1,
     299,   331,     1,    -1,   299,   328,     1,    -1,   348,    -1,
     350,   127,   348,    -1,   350,     1,   127,   348,    -1,   351,
     127,   348,    -1,   351,     1,   127,   348,    -1,     1,   127,
     348,    -1,   308,   127,   348,    -1,   308,     1,   127,   348,
      -1,   307,   127,   348,    -1,   307,     1,   127,   348,    -1,
     349,    -1,   350,   127,   349,    -1,   351,   127,   349,    -1,
     351,     1,   127,   349,    -1,     1,   127,   349,    -1,   308,
     127,   349,    -1,   307,   127,   349,    -1,   307,     1,   127,
     349,    -1,   350,    -1,   350,   127,    51,    -1,   351,   127,
      51,    -1,   308,   127,    51,    -1,   307,   127,    51,    -1,
       1,   127,    51,    -1,   351,    -1,   350,   127,     1,    -1,
     351,     1,    -1,   359,    -1,   324,    -1,   374,    -1,   125,
      -1,   131,    -1,   245,   125,    -1,   377,    -1,   379,    -1,
     381,    -1,   358,    -1,   195,   125,    -1,   194,   125,    -1,
     193,   125,    -1,   360,    -1,   380,    -1,   375,    -1,   378,
      -1,   382,    -1,   381,     1,    -1,   263,    -1,   385,    -1,
     385,   122,   243,   123,    -1,   133,   216,   134,   385,   122,
     243,   123,    -1,   356,    -1,   357,   127,   356,    -1,    -1,
      86,   281,   122,   385,   123,   125,    -1,    86,   281,   122,
     385,   131,   357,   123,   125,    -1,    86,   281,   122,   385,
     131,   357,   131,   357,   123,   125,    -1,    86,   281,   122,
     385,   131,   357,   131,   357,   131,   357,   123,   125,    -1,
      86,   281,   122,   385,     3,   357,   123,   125,    -1,    86,
     281,   122,   385,     3,   357,   131,   357,   123,   125,    -1,
      86,   281,   122,   385,   131,   357,     3,   357,   123,   125,
      -1,    86,   122,   385,   123,   125,    -1,    86,   122,   385,
     131,   357,   123,   125,    -1,    86,   122,   385,   131,   357,
     131,   357,   123,   125,    -1,    86,   122,   385,   131,   357,
     131,   357,   131,   357,   123,   125,    -1,    86,   122,   385,
       3,   357,   123,   125,    -1,    86,   122,   385,     3,   357,
     131,   357,   123,   125,    -1,    86,   122,   385,   131,   357,
       3,   357,   123,   125,    -1,   216,   131,   354,    -1,    52,
     265,   131,   354,    -1,    52,   266,   131,   354,    -1,    52,
     131,   354,    -1,    53,   131,   354,    -1,   216,   131,   363,
      -1,    52,   265,   131,   363,    -1,    52,   266,   131,   363,
      -1,    52,   131,   363,    -1,    53,   131,   363,    -1,   216,
     131,   355,    -1,    52,   265,   131,   355,    -1,    52,   266,
     131,   355,    -1,    52,   131,   355,    -1,    52,   131,    -1,
      53,   131,   355,    -1,    53,   131,    -1,   216,   131,   366,
      -1,    52,   265,   131,   366,    -1,    52,   266,   131,   366,
      -1,    52,   131,   366,    -1,    53,   131,   366,    -1,    80,
      -1,    81,    -1,    53,    -1,    80,    -1,    81,    -1,   298,
     125,    -1,   298,   344,   125,    -1,   170,   125,    -1,   366,
     125,    -1,   300,   125,    -1,   300,   344,   125,    -1,   301,
     344,   125,    -1,   174,   125,    -1,    77,   216,   126,   242,
     125,    -1,    31,    77,   216,   126,   242,   125,    -1,   300,
       1,    -1,   298,     1,    -1,   366,     1,    -1,   171,     1,
      -1,   170,     1,    -1,   298,   345,    -1,   363,    -1,   367,
     363,    -1,   368,   363,    -1,   367,     1,   125,    -1,   366,
      -1,   367,   366,    -1,   354,    -1,   369,   354,    -1,   370,
     354,    -1,   355,    -1,   369,   355,    -1,   370,   355,    -1,
     369,   363,    -1,   370,   363,    -1,   369,   366,    -1,   370,
     366,    -1,   369,    -1,   367,    -1,   367,   369,    -1,   368,
     369,    -1,   370,    -1,   368,    -1,   367,   370,    -1,   368,
     370,    -1,   129,    -1,   375,   128,    -1,   373,   372,    -1,
     373,    -1,   373,   371,    -1,   125,    -1,   245,   125,    -1,
     263,   125,    -1,    54,   122,   245,   123,   354,    -1,    54,
     122,   263,   123,   354,    -1,    54,   122,   245,   123,   354,
      64,   354,    -1,    54,   122,   263,   123,   354,    64,   354,
      -1,    55,   122,   245,   123,   354,    -1,    55,   122,   263,
     123,   354,    -1,    54,   122,   263,    -1,   377,     1,    -1,
      56,   122,   245,   123,   354,    -1,    56,   122,   263,   354,
      -1,    56,   122,   123,   354,    -1,    57,   354,    56,   122,
     245,   123,   125,    -1,    57,   354,    56,   122,   263,   125,
      -1,    58,   122,   376,   376,   123,   354,    -1,    58,   122,
     376,   123,   354,    -1,    58,   122,   376,   376,   245,   123,
     354,    -1,    58,   122,   376,   376,   263,   354,    -1,    58,
     122,   123,   354,    -1,    58,   122,   216,   131,   245,   123,
     354,    -1,    58,   122,   216,   131,   245,   125,   245,   123,
     354,    -1,    58,   122,     1,    -1,    58,   122,   263,     1,
      -1,    58,   122,   376,     1,    -1,    58,   122,   376,   263,
       1,    -1,    58,   122,   376,   376,   263,    -1,    58,   122,
     376,   376,   123,   355,    -1,    58,   122,   376,   376,   245,
     123,   355,    -1,    58,   122,   376,   376,   263,   355,    -1,
      57,   354,    56,   122,   245,   123,    -1,    57,   354,    56,
     122,   245,    -1,    57,   354,    56,   122,   263,    -1,    57,
     354,    56,   122,    -1,    57,   354,    56,    -1,    57,   354,
      -1,    57,    -1,    56,     1,    -1,    56,   122,   123,     1,
      -1,    56,   122,   263,    -1,    56,   122,   245,   123,   355,
      -1,    56,   122,   263,   355,    -1,    59,   216,   125,    -1,
      60,   125,    -1,    61,   125,    -1,    62,   125,    -1,    62,
     245,   125,    -1,    62,   263,   125,    -1,    62,   221,   125,
      -1,    62,   222,   125,    -1,    62,   263,    -1,    62,   222,
      -1,    62,    -1,    59,    -1,   300,   332,   367,   374,    -1,
     300,   332,   374,    -1,   300,   334,   367,   374,    -1,   300,
     334,   374,    -1,   332,   367,   374,    -1,   332,   374,    -1,
     300,   332,   367,   375,    -1,   300,   332,   375,    -1,   300,
     334,   367,   375,    -1,   300,   334,   375,    -1,   332,   367,
     375,    -1,   332,   375,    -1,     5,    -1,   385,     5,    -1,
     383,    -1,   213,    -1,   300,   213,    -1,   364,    -1,    76,
     385,    -1,    76,    31,   385,    -1,    76,   216,   385,    -1,
     125,    -1,   361,   383,    -1,   361,   213,    -1,   361,   364,
      -1,   361,    76,   385,    -1,   361,    76,    31,   385,    -1,
     361,    76,   216,   385,    -1,   361,   131,    -1,    31,   131,
      -1,   101,   216,    -1,   101,   149,    -1,   391,    -1,   361,
     391,    -1,   215,    -1,   300,   215,    -1,   384,    -1,   361,
     215,    -1,   361,   384,    -1,   365,    -1,   361,   365,    -1,
     387,    -1,   389,   387,    -1,   388,   387,    -1,   389,     1,
      -1,   388,     1,    -1,   386,    -1,   389,   386,    -1,   388,
     213,    -1,   388,   361,   213,    -1,   389,    -1,   388,    -1,
      -1,   105,   385,   216,   129,   396,   128,    -1,   105,   385,
     149,   129,   396,   128,    -1,   105,   385,   129,   396,   128,
      -1,   299,   216,   385,   125,    -1,   216,    -1,   121,   216,
      -1,   120,   216,    -1,   393,    -1,   394,   127,   393,    -1,
     107,   394,   125,    -1,   107,   394,   216,   125,    -1,   392,
      -1,   395,    -1,   396,   392,    -1,   396,   395,    -1,   108,
     122,   243,   127,   243,   123,    -1,   106,   122,   385,   127,
     216,   123,    -1,   107,   122,   385,   127,   216,   123,    -1,
     105,   122,   385,   123,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   282,   282,   311,   370,   371,   481,   485,   488,   489,
     490,   539,   541,   546,   551,   556,   558,   563,   565,   570,
     572,   577,   579,   581,   583,   585,   589,   593,   606,   608,
     610,   612,   614,   620,   622,   627,   632,   637,   639,   641,
     646,   647,   651,   652,   663,   667,   668,   670,   675,   676,
     678,   681,   693,   704,   723,   725,   730,   731,   732,   733,
     734,   735,   736,   737,   750,   754,   755,   756,   757,   761,
     762,   763,   764,   765,   766,   767,   771,   773,   778,   780,
     782,   784,   786,   816,   818,   823,   825,   827,   829,   831,
     860,   862,   864,   869,   871,   876,   878,   882,   884,   886,
     888,   893,   896,   899,   902,   967,   969,   974,   976,   978,
     980,   982,  1013,  1017,  1018,  1019,  1023,  1024,  1025,  1029,
    1030,  1031,  1032,  1036,  1039,  1042,  1045,  1048,  1053,  1054,
    1056,  1058,  1060,  1062,  1067,  1071,  1074,  1077,  1080,  1083,
    1088,  1089,  1091,  1096,  1100,  1102,  1107,  1109,  1114,  1116,
    1121,  1126,  1128,  1133,  1135,  1137,  1139,  1144,  1146,  1148,
    1150,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,
    1164,  1165,  1167,  1168,  1170,  1174,  1177,  1178,  1179,  1180,
    1181,  1182,  1183,  1184,  1185,  1186,  1187,  1188,  1189,  1190,
    1192,  1193,  1197,  1198,  1199,  1203,  1207,  1208,  1209,  1213,
    1214,  1215,  1216,  1217,  1221,  1222,  1234,  1235,  1239,  1240,
    1241,  1242,  1243,  1244,  1245,  1246,  1250,  1254,  1255,  1259,
    1267,  1268,  1272,  1273,  1274,  1278,  1279,  1283,  1284,  1285,
    1286,  1287,  1288,  1328,  1329,  1333,  1341,  1342,  1350,  1351,
    1353,  1354,  1363,  1364,  1368,  1375,  1382,  1388,  1395,  1401,
    1410,  1417,  1423,  1429,  1435,  1441,  1447,  1458,  1463,  1464,
    1469,  1470,  1471,  1475,  1479,  1480,  1481,  1482,  1483,  1484,
    1485,  1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,
    1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,
    1517,  1518,  1519,  1520,  1521,  1523,  1524,  1525,  1526,  1527,
    1529,  1530,  1534,  1538,  1542,  1543,  1547,  1549,  1550,  1551,
    1552,  1553,  1554,  1555,  1556,  1557,  1559,  1560,  1561,  1562,
    1563,  1564,  1565,  1566,  1593,  1594,  1595,  1596,  1600,  1601,
    1602,  1603,  1604,  1608,  1609,  1610,  1611,  1613,  1614,  1615,
    1616,  1619,  1620,  1624,  1625,  1634,  1635,  1636,  1637,  1638,
    1639,  1640,  1641,  1645,  1646,  1650,  1651,  1652,  1653,  1654,
    1655,  1656,  1660,  1661,  1662,  1663,  1664,  1668,  1669,  1670,
    1671,  1672,  1676,  1684,  1685,  1686,  1687,  1688,  1689,  1690,
    1691,  1692,  1696,  1697,  1698,  1699,  1700,  1702,  1703,  1704,
    1705,  1709,  1710,  1711,  1713,  1714,  1718,  1719,  1720,  1722,
    1723,  1727,  1728,  1729,  1731,  1732,  1736,  1737,  1738,  1742,
    1743,  1744,  1748,  1749,  1750,  1751,  1752,  1754,  1755,  1756,
    1757,  1759,  1760,  1761,  1762,  1764,  1765,  1766,  1767,  1771,
    1772,  1773,  1774,  1775,  1777,  1778,  1779,  1780,  1784,  1785,
    1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,  1798,
    1799,  1800,  1801,  1805,  1806,  1807,  1811,  1812,  1813,  1814,
    1816,  1817,  1819,  1820,  1825,  1827,  1832,  1860,  1861,  1862,
    1863,  1865,  1866,  1867,  1868,  1870,  1871,  1875,  1876,  1885,
    1886,  1890,  1891,  1892,  1893,  1894,  1895,  1896,  1900,  1901,
    1905,  1909,  1913,  1920,  1921,  1922,  1923,  1924,  1928,  1929,
    1980,  1981,  1982,  1983,  1984,  1985,  1986,  1990,  1991,  1992,
    1993,  1994,  2001,  2002,  2003,  2004,  2008,  2009,  2010,  2012,
    2013,  2017,  2018,  2019,  2021,  2022,  2026,  2027,  2028,  2030,
    2031,  2035,  2036,  2037,  2041,  2042,  2043,  2047,  2048,  2049,
    2050,  2051,  2052,  2053,  2054,  2055,  2057,  2058,  2059,  2060,
    2061,  2062,  2063,  2064,  2066,  2067,  2068,  2069,  2071,  2072,
    2073,  2074,  2076,  2084,  2088,  2093,  2100,  2101,  2105,  2110,
    2111,  2115,  2116,  2117,  2118,  2124,  2125,  2126,  2130,  2131,
    2132,  2133,  2137,  2139,  2143,  2144,  2145,  2146,  2147,  2148,
    2149,  2153,  2154,  2155,  2156,  2157,  2158,  2159,  2163,  2164,
    2165,  2169,  2170,  2171,  2175,  2179,  2180,  2184,  2185,  2186,
    2190,  2191,  2193,  2194,  2195,  2196,  2197,  2199,  2200,  2201,
    2202,  2203,  2205,  2206,  2210,  2211,  2215,  2216,  2217,  2221,
    2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2231,  2232,
    2234,  2235,  2236,  2237,  2238,  2240,  2241,  2242,  2243,  2247,
    2248,  2252,  2253,  2257,  2261,  2262,  2263,  2268,  2269,  2273,
    2274,  2275,  2276,  2277,  2278,  2279,  2280,  2281,  2282,  2283,
    2284,  2285,  2286,  2287,  2288,  2289,  2290,  2291,  2292,  2293,
    2294,  2295,  2296,  2297,  2298,  2302,  2303,  2304,  2305,  2306,
    2307,  2308,  2309,  2310,  2311,  2312,  2313,  2314,  2315,  2316,
    2317,  2318,  2319,  2320,  2321,  2322,  2323,  2324,  2325,  2331,
    2333,  2335,  2337,  2339,  2341,  2343,  2345,  2347,  2349,  2354,
    2355,  2359,  2365,  2371,  2378,  2388,  2389,  2390,  2391,  2395,
    2396,  2397,  2399,  2400,  2401,  2403,  2404,  2405,  2409,  2413,
    2421,  2430,  2439,  2440,  2442,  2443,  2447,  2454,  2461,  2464,
    2477,  2491,  2494,  2496,  2498,  2503,  2504,  2508,  2509,  2510,
    2511,  2512,  2513,  2514,  2515,  2519,  2520,  2521,  2522,  2523,
    2524,  2525,  2526,  2527,  2528,  2532,  2533,  2534,  2535,  2536,
    2537,  2538,  2539,  2540,  2541,  2545,  2546,  2547,  2548,  2549,
    2550,  2551,  2552,  2553,  2554,  2555,  2556,  2560,  2561,  2562,
    2563,  2564,  2565,  2566,  2567,  2568,  2569,  2573,  2574,  2578,
    2579,  2580,  2581,  2582,  2583,  2584,  2585,  2586,  2588,  2590,
    2608,  2626,  2627,  2631,  2632,  2633,  2634,  2635,  2636,  2637,
    2638,  2639,  2657,  2674,  2675,  2676,  2677,  2678,  2679,  2680,
    2681,  2682,  2683,  2684,  2685,  2686,  2704,  2721,  2722,  2723,
    2724,  2725,  2726,  2727,  2728,  2729,  2730,  2731,  2732,  2733,
    2751,  2768,  2769,  2773,  2774,  2775,  2776,  2777,  2781,  2782,
    2789,  2791,  2800,  2809,  2818,  2827,  2828,  2829,  2830,  2834,
    2835,  2836,  2837,  2838,  2839,  2840,  2841,  2842,  2846,  2850,
    2851,  2852,  2853,  2854,  2859,  2868,  2877,  2886,  2900,  2901,
    2906,  2910,  2911,  2912,  2913,  2914,  2919,  2928,  2937,  2946,
    2960,  2961,  3010,  3011,  3012,  3013,  3025,  3026,  3027,  3032,
    3033,  3034,  3035,  3036,  3040,  3041,  3045,  3046,  3047,  3051,
    3052,  3056,  3057,  3058,  3059,  3060,  3061,  3062,  3063,  3064,
    3065,  3066,  3067,  3068,  3069,  3070,  3071,  3075,  3076,  3077,
    3078,  3079,  3080,  3081,  3082,  3086,  3087,  3088,  3089,  3093,
    3094,  3095,  3096,  3097,  3101,  3102,  3103,  3104,  3105,  3109,
    3110,  3112,  3114,  3116,  3121,  3122,  3124,  3126,  3131,  3132,
    3133,  3134,  3138,  3139,  3140,  3141,  3145,  3146,  3147,  3148,
    3152,  3153,  3154,  3155,  3159,  3160,  3161,  3162,  3166,  3167,
    3168,  3185,  3186,  3187,  3188,  3201,  3218,  3219,  3224,  3225,
    3229,  3230,  3231,  3232,  3235,  3236,  3240,  3241,  3242,  3246,
    3250,  3254,  3255,  3256,  3257,  3258,  3267,  3276,  3277,  3278,
    3279,  3283,  3284,  3288,  3289,  3294,  3295,  3296,  3297,  3298,
    3299,  3318,  3319,  3323,  3324,  3325,  3326,  3327,  3328,  3330,
    3331,  3332,  3333,  3337,  3338,  3339,  3340,  3341,  3343,  3344,
    3345,  3349,  3350,  3351,  3352,  3353,  3354,  3358,  3359,  3360,
    3365,  3366,  3367,  3368,  3369,  3370,  3371,  3372,  3373,  3374,
    3375,  3376,  3377,  3381,  3382,  3383,  3384,  3385,  3386,  3387,
    3391,  3392,  3393,  3397,  3398,  3399,  3403,  3404,  3405,  3406,
    3408,  3409,  3410,  3412,  3413,  3414,  3415,  3417,  3418,  3419,
    3423,  3424,  3425,  3426,  3427,  3429,  3430,  3431,  3432,  3433,
    3437,  3438,  3439,  3440,  3441,  3442,  3443,  3445,  3446,  3447,
    3448,  3449,  3453,  3454,  3455,  3459,  3460,  3464,  3465,  3466,
    3467,  3471,  3472,  3473,  3475,  3476,  3477,  3481,  3485,  3486,
    3488,  3489,  3490,  3494,  3495,  3496,  3497,  3501,  3502,  3506,
    3507,  3508,  3512,  3513,  3514,  3515,  3516,  3517,  3518,  3522,
    3523,  3524,  3525,  3529,  3530,  3531,  3532,  3536,  3540,  3544,
    3546,  3549,  3555,  3556,  3557,  3561,  3562,  3563,  3564,  3565,
    3566,  3570,  3571,  3575,  3576,  3577,  3579,  3580,  3582,  3583,
    3584,  3585,  3586,  3588,  3589,  3593,  3594,  3595,  3596,  3600,
    3601,  3602,  3603,  3605,  3606,  3607,  3608,  3609,  3610,  3611,
    3614,  3618,  3619,  3623,  3624,  3628,  3629,  3630,  3631,  3632,
    3633,  3634,  3635,  3639,  3640,  3641,  3642,  3648,  3649,  3651,
    3652,  3655,  3656,  3659,  3660,  3661,  3662,  3663,  3664,  3668,
    3669,  3681,  3682,  3685,  3688,  3690,  3691,  3692,  3702,  3704,
    3705,  3707,  3708,  3709,  3710,  3720,  3721,  3722,  3723,  3724,
    3725,  3729,  3730,  3739,  3741,  3742,  3744,  3746,  3750,  3751,
    3752,  3753,  3754,  3758,  3759,  3760,  3762,  3767,  3768,  3769,
    3773,  3774,  3775,  3779,  3783,  3784,  3785,  3789,  3790,  3794,
    3795,  3799,  3800,  3801,  3802,  3806,  3810,  3814,  3818
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "LONG", "SIGNED", "UNSIGNED", "FLOAT",
  "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST", "STRUCT", "UNION",
  "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH", "WHILE", "DO",
  "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX", "ELSE", "CLASS",
  "THISCLASS", "CLASS_NAME", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "BOOL",
  "_BOOL", "_COMPLEX", "_IMAGINARY", "RESTRICT", "THREAD",
  "WIDE_STRING_LITERAL", "'*'", "'<'", "'>'", "'('", "')'", "'~'", "';'",
  "'='", "','", "'}'", "'{'", "'.'", "':'", "'$'", "'['", "']'", "'&'",
  "'+'", "'-'", "'!'", "'/'", "'%'", "'^'", "'|'", "'?'", "$accept",
  "guess_type", "type", "base_strict_type", "base_strict_type_name",
  "strict_type", "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "argument_expression_list", "argument_expression_list_error",
  "common_unary_expression", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "common_unary_expression_error", "unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    42,
      60,    62,    40,    41,   126,    59,    61,    44,   125,   123,
      46,    58,    36,    91,    93,    38,    43,    45,    33,    47,
      37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   144,   145,   145,   146,   146,   147,   148,   149,   149,
     149,   150,   150,   151,   152,   153,   153,   154,   154,   155,
     155,   156,   156,   156,   156,   156,   156,   156,   157,   157,
     157,   157,   157,   158,   158,   159,   160,   161,   161,   161,
     162,   162,   163,   163,   163,   164,   164,   164,   165,   165,
     165,   165,   165,   165,   166,   166,   167,   167,   167,   167,
     167,   167,   167,   167,   167,   168,   168,   168,   168,   169,
     169,   169,   169,   169,   169,   169,   170,   170,   171,   171,
     171,   171,   171,   172,   172,   173,   173,   173,   173,   173,
     174,   174,   174,   175,   175,   176,   176,   176,   176,   176,
     176,   176,   176,   176,   176,   177,   177,   178,   178,   178,
     178,   178,   179,   180,   180,   180,   181,   181,   181,   182,
     182,   182,   182,   183,   183,   183,   183,   183,   184,   184,
     184,   184,   184,   184,   185,   186,   186,   186,   186,   186,
     187,   187,   187,   188,   189,   189,   190,   190,   191,   191,
     192,   193,   193,   194,   194,   194,   194,   195,   195,   195,
     195,   196,   196,   196,   196,   196,   196,   196,   196,   196,
     196,   196,   196,   196,   196,   197,   197,   197,   197,   197,
     197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
     197,   197,   197,   197,   197,   197,   198,   198,   198,   199,
     199,   199,   199,   199,   200,   200,   201,   201,   202,   202,
     202,   202,   202,   202,   202,   202,   203,   204,   204,   205,
     206,   206,   207,   207,   207,   208,   208,   209,   209,   209,
     209,   209,   209,   210,   210,   211,   212,   212,   212,   212,
     212,   212,   212,   212,   213,   213,   213,   213,   213,   213,
     214,   215,   215,   215,   215,   215,   215,   216,   217,   217,
     218,   218,   218,   219,   220,   220,   220,   220,   220,   220,
     220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
     220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
     220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
     220,   220,   221,   222,   223,   223,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   225,   225,   225,   225,   226,   226,
     226,   226,   226,   227,   227,   227,   227,   227,   227,   227,
     227,   227,   227,   228,   228,   229,   229,   229,   229,   229,
     229,   229,   229,   230,   230,   231,   231,   231,   231,   231,
     231,   231,   232,   232,   232,   232,   232,   233,   233,   233,
     233,   233,   234,   235,   235,   235,   235,   235,   235,   235,
     235,   235,   236,   236,   236,   236,   236,   236,   236,   236,
     236,   237,   237,   237,   237,   237,   238,   238,   238,   238,
     238,   239,   239,   239,   239,   239,   240,   240,   240,   241,
     241,   241,   242,   242,   242,   242,   242,   242,   242,   242,
     242,   242,   242,   242,   242,   242,   242,   242,   242,   243,
     243,   243,   243,   243,   243,   243,   243,   243,   244,   244,
     244,   244,   244,   244,   244,   244,   244,   244,   244,   245,
     245,   245,   245,   246,   246,   246,   247,   247,   247,   247,
     247,   247,   247,   247,   247,   247,   247,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   249,   249,   250,
     250,   251,   251,   251,   251,   251,   251,   251,   252,   252,
     252,   252,   252,   253,   253,   253,   253,   253,   254,   254,
     254,   254,   254,   254,   254,   254,   254,   255,   255,   255,
     255,   255,   255,   255,   255,   255,   256,   256,   256,   256,
     256,   257,   257,   257,   257,   257,   258,   258,   258,   258,
     258,   259,   259,   259,   260,   260,   260,   261,   261,   261,
     261,   261,   261,   261,   261,   261,   261,   261,   261,   261,
     261,   261,   261,   261,   261,   261,   261,   261,   261,   261,
     261,   261,   261,   261,   261,   261,   262,   262,   262,   262,
     262,   263,   263,   263,   263,   263,   263,   263,   264,   264,
     264,   264,   265,   266,   267,   267,   267,   267,   267,   267,
     267,   268,   268,   268,   268,   268,   268,   268,   269,   269,
     269,   270,   270,   270,   271,   272,   272,   273,   273,   273,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   275,   275,   276,   276,   276,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   278,
     278,   279,   279,   280,   281,   281,   281,   282,   282,   283,
     283,   283,   283,   283,   283,   283,   283,   283,   283,   283,
     283,   283,   283,   283,   283,   283,   283,   283,   283,   283,
     283,   283,   283,   283,   283,   284,   284,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   284,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   284,   284,   284,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   286,
     286,   287,   287,   287,   287,   288,   288,   288,   288,   289,
     289,   289,   289,   289,   289,   289,   289,   289,   290,   291,
     291,   292,   293,   293,   293,   293,   294,   294,   294,   294,
     294,   294,   294,   294,   294,   295,   295,   296,   296,   296,
     296,   296,   296,   296,   296,   297,   297,   297,   297,   297,
     297,   297,   297,   297,   297,   298,   298,   298,   298,   298,
     298,   298,   298,   298,   298,   299,   299,   299,   299,   299,
     299,   299,   299,   299,   299,   299,   299,   300,   300,   300,
     300,   300,   300,   300,   300,   300,   300,   301,   301,   302,
     302,   302,   302,   302,   302,   302,   302,   302,   302,   302,
     302,   303,   303,   304,   304,   304,   304,   304,   304,   304,
     304,   304,   304,   305,   305,   305,   305,   305,   305,   305,
     305,   305,   305,   305,   305,   305,   305,   306,   306,   306,
     306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
     306,   307,   307,   308,   308,   308,   308,   308,   309,   309,
     309,   309,   309,   309,   309,   309,   309,   309,   309,   310,
     310,   310,   310,   310,   310,   310,   310,   310,   311,   312,
     312,   312,   312,   312,   313,   313,   313,   313,   314,   314,
     315,   316,   316,   316,   316,   316,   317,   317,   317,   317,
     318,   318,   319,   319,   319,   319,   320,   320,   320,   321,
     321,   321,   321,   321,   322,   322,   323,   323,   323,   324,
     324,   325,   325,   325,   325,   325,   325,   325,   325,   325,
     325,   325,   325,   325,   325,   325,   325,   326,   326,   326,
     326,   326,   326,   326,   326,   327,   327,   327,   327,   328,
     328,   328,   328,   328,   329,   329,   329,   329,   329,   330,
     330,   330,   330,   330,   331,   331,   331,   331,   332,   332,
     332,   332,   333,   333,   333,   333,   334,   334,   334,   334,
     335,   335,   335,   335,   336,   336,   336,   336,   337,   337,
     337,   338,   338,   338,   338,   338,   339,   339,   340,   340,
     341,   341,   341,   341,   341,   341,   342,   342,   342,   343,
     343,   344,   344,   344,   344,   344,   344,   345,   345,   345,
     345,   346,   346,   347,   347,   348,   348,   348,   348,   348,
     348,   349,   349,   350,   350,   350,   350,   350,   350,   350,
     350,   350,   350,   351,   351,   351,   351,   351,   351,   351,
     351,   352,   352,   352,   352,   352,   352,   353,   353,   353,
     354,   354,   354,   354,   354,   354,   354,   354,   354,   354,
     354,   354,   354,   355,   355,   355,   355,   355,   355,   355,
     356,   356,   356,   357,   357,   357,   358,   358,   358,   358,
     358,   358,   358,   358,   358,   358,   358,   358,   358,   358,
     359,   359,   359,   359,   359,   359,   359,   359,   359,   359,
     360,   360,   360,   360,   360,   360,   360,   360,   360,   360,
     360,   360,   361,   361,   361,   362,   362,   363,   363,   363,
     363,   364,   364,   364,   364,   364,   364,   365,   366,   366,
     366,   366,   366,   367,   367,   367,   367,   368,   368,   369,
     369,   369,   370,   370,   370,   370,   370,   370,   370,   371,
     371,   371,   371,   372,   372,   372,   372,   373,   374,   375,
     375,   375,   376,   376,   376,   377,   377,   377,   377,   377,
     377,   378,   378,   379,   379,   379,   379,   379,   379,   379,
     379,   379,   379,   379,   379,   380,   380,   380,   380,   380,
     380,   380,   380,   380,   380,   380,   380,   380,   380,   380,
     380,   380,   380,   380,   380,   381,   381,   381,   381,   381,
     381,   381,   381,   382,   382,   382,   382,   383,   383,   383,
     383,   383,   383,   384,   384,   384,   384,   384,   384,   385,
     385,   386,   386,   386,   386,   386,   386,   386,   386,   386,
     386,   386,   386,   386,   386,   386,   386,   386,   386,   386,
     386,   387,   387,   387,   387,   387,   387,   387,   388,   388,
     388,   388,   388,   389,   389,   389,   389,   390,   390,   390,
     391,   391,   391,   392,   393,   393,   393,   394,   394,   395,
     395,   396,   396,   396,   396,   397,   398,   399,   400
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     1,     2,     6,     6,     5,     5,     6,
       6,     5,     5,     7,     7,     6,     6,     7,     7,     6,
       6,     4,     5,     4,     6,     4,     1,     1,     1,     1,
       3,     2,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     1,     3,     3,     1,     1,
       3,     3,     2,     2,     2,     2,     2,     2,     4,     5,
       5,     2,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     2,     1,     2,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     1,
       3,     3,     1,     5,     5,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     2,     1,     3,     3,     1,     1,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     2,
       2,     2,     5,     6,     6,     2,     5,     1,     1,     1,
       4,     1,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     2,
       3,     3,     3,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     1,     3,     3,     1,     3,     3,     1,     5,     5,
       5,     5,     4,     4,     4,     4,     5,     5,     5,     5,
       4,     4,     4,     4,     5,     5,     5,     5,     5,     5,
       5,     5,     3,     3,     2,     2,     1,     3,     3,     3,
       3,     1,     2,     3,     3,     2,     2,     2,     1,     2,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     1,     3,     2,     1,     2,     2,     2,     4,     4,
       3,     3,     4,     5,     4,     6,     6,     4,     5,     4,
       6,     6,     5,     5,     2,     2,     2,     5,     3,     5,
       6,     5,     7,     7,     8,     8,     7,     7,     3,     3,
       3,     4,     3,     5,     5,     6,     7,     6,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     4,     4,     1,     1,
       2,     2,     3,     5,     2,     3,     5,     5,     5,     1,
       3,     2,     2,     3,     3,     2,     3,     3,     4,     3,
       3,     3,     3,     3,     3,     4,     4,     4,     1,     1,
       4,     3,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       1,     1,     2,     1,     2,     1,     2,     1,     2,     4,
       5,     1,     1,     1,     2,     1,     2,     1,     2,     1,
       2,     4,     5,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     4,     5,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     4,
       5,     3,     3,     1,     3,     3,     3,     3,     1,     1,
       1,     4,     4,     4,     3,     4,     4,     4,     3,     1,
       3,     4,     3,     4,     4,     4,     4,     3,     2,     3,
       3,     3,     3,     2,     2,     2,     3,     4,     1,     1,
       2,     3,     3,     3,     3,     2,     2,     2,     3,     4,
       1,     1,     1,     1,     1,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     1,     2,     3,     6,
       5,     3,     4,     2,     3,     3,     3,     3,     4,     4,
       4,     2,     3,     3,     3,     4,     4,     3,     4,     2,
       3,     3,     3,     4,     4,     1,     2,     2,     3,     1,
       1,     2,     2,     3,     1,     1,     2,     2,     3,     1,
       2,     3,     2,     2,     1,     2,     3,     2,     1,     2,
       3,     3,     1,     2,     3,     3,     1,     2,     3,     3,
       1,     2,     3,     3,     1,     2,     3,     3,     1,     3,
       4,     1,     4,     2,     5,     3,     1,     1,     1,     1,
       1,     1,     3,     3,     2,     2,     1,     1,     3,     2,
       3,     1,     3,     3,     3,     3,     3,     1,     2,     3,
       3,     1,     2,     1,     2,     2,     2,     2,     3,     1,
       1,     3,     3,     1,     3,     4,     3,     4,     3,     3,
       4,     3,     4,     1,     3,     3,     4,     3,     3,     3,
       4,     1,     3,     3,     3,     3,     3,     1,     3,     2,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       2,     2,     2,     1,     1,     1,     1,     1,     2,     1,
       1,     4,     7,     1,     3,     0,     6,     8,    10,    12,
       8,    10,    10,     5,     7,     9,    11,     7,     9,     9,
       3,     4,     4,     3,     3,     3,     4,     4,     3,     3,
       3,     4,     4,     3,     2,     3,     2,     3,     4,     4,
       3,     3,     1,     1,     1,     1,     1,     2,     3,     2,
       2,     2,     3,     3,     2,     5,     6,     2,     2,     2,
       2,     2,     2,     1,     2,     2,     3,     1,     2,     1,
       2,     2,     1,     2,     2,     2,     2,     2,     2,     1,
       1,     2,     2,     1,     1,     2,     2,     1,     2,     2,
       1,     2,     1,     2,     2,     5,     5,     7,     7,     5,
       5,     3,     2,     5,     4,     4,     7,     6,     6,     5,
       7,     6,     4,     7,     9,     3,     4,     4,     5,     5,
       6,     7,     6,     6,     5,     5,     4,     3,     2,     1,
       2,     4,     3,     5,     4,     3,     2,     2,     2,     3,
       3,     3,     3,     2,     2,     1,     1,     4,     3,     4,
       3,     3,     2,     4,     3,     4,     3,     3,     2,     1,
       2,     1,     1,     2,     1,     2,     3,     3,     1,     2,
       2,     2,     3,     4,     4,     2,     2,     2,     2,     1,
       2,     1,     2,     1,     2,     2,     1,     2,     1,     2,
       2,     2,     2,     1,     2,     2,     3,     1,     1,     0,
       6,     6,     5,     4,     1,     2,     2,     1,     3,     3,
       4,     1,     1,     2,     2,     6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1289,   257,     6,   591,   592,   593,   595,   596,   660,   661,
     662,   663,   664,   666,   669,   670,   667,   668,   654,   655,
     659,   665,   755,   756,   604,  1134,   235,   678,   912,   913,
       0,     0,   916,  1132,  1133,   679,   680,   671,     0,     0,
       0,     0,     0,   917,   918,   682,   681,   683,   684,   597,
     594,   955,     0,  1258,   803,   674,     8,     4,     0,     0,
       0,  1252,     0,  1271,   879,   797,     0,   673,     0,   649,
     651,   805,   807,   656,   799,   801,   738,   672,     0,     0,
     650,   652,     0,     0,     0,     0,     0,   978,   653,     0,
     914,     0,     0,     0,  1254,  1276,  1251,  1273,  1283,  1278,
       0,     0,     0,  1269,     0,  1266,  1249,     0,     0,  1255,
       0,     0,     0,     0,  1268,  1267,     0,   657,   956,   653,
     957,   870,   869,   879,   911,   868,   898,   969,     0,   910,
     974,     0,     0,     0,     0,     0,     0,  1144,     0,   237,
     236,     0,     0,   245,     0,   244,     2,     3,     0,     5,
       0,   606,   605,     0,     0,   626,     0,     0,     0,     0,
     742,     0,   722,   721,     0,  1147,   593,   663,   664,  1141,
     804,     8,  1253,  1272,   879,   798,   806,   808,   800,   802,
     978,   986,   653,     0,     0,  1017,     0,     0,     0,  1027,
       0,     0,   870,     0,   869,     0,     0,   888,     0,     0,
     584,   585,   586,   588,   589,  1040,   590,   587,   893,   791,
     863,   785,     0,   795,     0,   787,   789,   738,   793,     0,
       0,  1039,     0,     0,  1043,  1053,     0,     0,     0,     0,
       0,     0,   979,     0,   686,   687,   688,   689,   690,   692,
     695,   696,   693,   694,   685,   691,   708,   697,     0,     0,
     702,   701,   703,   704,  1177,   700,     0,     0,   775,   699,
     781,   777,   779,   783,   698,     0,  1153,     0,     0,     0,
       0,  1242,  1248,   593,     0,  1265,  1260,  1274,     0,  1261,
    1277,  1259,  1275,  1270,  1282,  1285,     0,     0,     0,     0,
       0,  1280,  1281,  1284,  1279,     1,     0,  1256,  1257,  1250,
       0,     0,   457,   263,     0,     0,     0,     0,     0,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   273,   346,     0,   349,     0,     0,   345,   347,
     348,   350,     0,   265,     0,   264,   306,   272,   271,   258,
     456,     0,   343,   353,     0,   355,   362,   367,   373,     0,
     382,   391,   396,   401,   406,   409,   412,   429,     0,   478,
     477,   479,   481,   488,   493,   498,   507,   516,   521,   526,
     531,   534,   537,     0,   260,   296,   297,   298,   299,     0,
       0,     0,     0,     0,   658,   958,     0,   900,     0,   905,
       0,     0,     0,     0,     0,     0,     0,   911,   970,   975,
       0,   880,   972,   882,   977,   973,   671,     4,   229,   228,
     227,   233,     0,   264,   353,   219,   479,     0,   206,   249,
       0,     0,   248,   255,     0,     0,  1135,  1136,     0,   168,
       0,   169,   170,     0,     0,     0,     0,     0,   172,   246,
       0,     0,     0,     0,    29,    31,   163,   175,   188,     0,
     187,     0,   116,   119,     0,   195,   128,     0,   164,   140,
       0,   167,   183,   196,   199,     0,     0,   264,     0,     0,
     176,     0,   982,   653,     0,    12,    18,     0,   810,   809,
     817,   811,     0,   813,   815,   738,   822,   821,   250,   256,
     247,     0,     0,   239,   238,   639,   598,   601,   638,   642,
     628,     0,     0,     0,   222,   223,   224,   225,     0,   217,
       0,   751,   744,     0,     0,   741,   748,   743,     0,     0,
     754,   745,     0,     0,   724,   723,     0,     0,     0,     0,
       0,   979,   987,     0,  1019,     0,     0,  1238,  1244,     0,
    1240,  1246,  1028,  1142,     0,     0,     0,  1143,   887,     0,
     264,   582,   583,     0,     0,     0,     0,   606,   605,   607,
       0,   725,     0,     0,   663,     0,     0,  1037,   792,     8,
     879,   786,   796,   788,   790,   794,   911,   868,   653,   960,
     959,     0,     0,     0,   892,     0,     0,   891,     0,     0,
       0,  1069,     0,   889,   890,   980,     0,   981,     0,     0,
    1151,  1139,  1150,    76,  1148,   689,   690,  1137,   879,   776,
     782,   778,   780,   784,   653,     0,  1152,  1149,  1140,     0,
    1154,     0,  1241,  1247,  1155,     0,     0,     0,     0,     0,
       0,     0,     0,  1236,     0,     0,     0,   697,     0,     0,
       0,   157,  1073,  1074,   700,     0,     0,     0,   264,     0,
     353,     0,     0,   479,   566,   571,     0,  1071,  1159,  1162,
    1079,  1070,  1083,     0,     0,     0,     0,  1181,  1179,  1072,
    1085,     0,  1086,  1077,  1084,     0,  1087,  1178,     0,     0,
    1262,   879,     0,     0,     0,  1272,     0,   868,   986,   653,
       0,     0,     0,     0,  1248,  1286,     0,     0,   412,     0,
       0,   915,     0,   337,   471,     0,   333,   467,   334,   468,
       0,   857,   847,   855,   849,   851,   853,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   341,
     475,   274,     0,     0,     0,   761,   757,   759,   763,  1031,
       0,   261,     0,   301,   302,     0,   325,     0,   324,     0,
     459,    93,     0,   270,   458,     0,   314,   315,     0,     0,
       0,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   438,     0,     0,   336,   470,   335,   469,     0,     0,
       0,     0,     0,     0,     0,   374,   499,     0,     0,   372,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     675,     0,   322,   323,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   676,   677,
       0,     0,     0,  1301,  1302,     0,     0,     0,   874,     0,
       0,     0,   878,     0,     0,     0,   904,   903,   901,   902,
     911,   970,   975,   881,   883,   997,    10,     9,     0,     0,
       0,   653,   959,   207,     0,     0,   264,   206,     0,     0,
     829,   823,   825,   827,     0,     0,     0,    16,    20,     0,
     185,   184,   186,     0,     0,     0,     0,   346,     0,   264,
       0,    26,     0,    21,    28,    24,     0,    25,    23,    22,
      30,    32,   190,    83,   191,   122,   162,     0,     0,     0,
       0,   132,     0,     0,   134,     0,     0,   143,   161,   200,
     197,   202,   201,   198,   203,   115,     0,     0,     0,   879,
     719,   177,   994,     0,   990,   653,     0,    11,    17,   709,
     895,  1039,     0,     0,     0,   983,     0,     0,   173,   165,
     192,   181,     0,   180,     0,   166,   879,   179,     0,   606,
     605,   818,   812,   814,   816,     0,     0,     0,   603,   641,
       0,     0,     7,   212,   208,   740,     0,     0,     0,     0,
    1016,  1023,  1024,  1025,    64,    53,    92,    39,    38,    57,
      69,    45,    48,     0,    74,    56,     0,     0,     0,  1007,
    1009,     0,  1006,  1008,     0,    41,    44,   911,   980,   971,
     988,   976,   997,   989,     0,   998,  1001,  1018,  1020,  1237,
    1243,  1239,  1245,  1022,  1029,  1026,  1030,   886,   884,   885,
    1066,  1048,  1057,   611,   610,     0,     0,   457,   726,     0,
       0,   457,   727,     0,     0,     0,   941,   879,     0,     0,
     653,   959,     0,     0,     0,   933,     0,     0,     0,     0,
       0,  1038,   962,     0,     0,   961,  1042,  1041,     0,   862,
    1065,   865,  1051,  1059,     0,   861,  1064,   864,  1049,  1058,
       0,  1068,  1062,   866,  1044,  1054,     0,  1063,   867,  1046,
    1055,   919,   920,   923,   922,   921,     0,   924,   926,     0,
       0,     0,     0,    77,     0,  1138,  1156,     0,     0,     0,
       0,     0,     0,  1220,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   264,     0,  1071,  1218,  1076,  1078,
       0,     0,  1226,  1227,  1228,     0,  1234,     0,     0,     0,
       0,     0,     0,   158,   144,  1082,  1081,  1080,     0,     0,
       0,   572,     0,  1075,     0,     0,     0,     0,   452,     0,
       0,   457,     0,     0,     0,     0,  1160,  1163,  1165,     0,
    1161,  1164,  1166,     0,  1192,  1088,  1263,  1264,   237,   236,
       0,     0,     0,   987,     0,     0,  1244,     0,  1246,  1247,
       0,     0,  1145,     0,     0,   769,   264,   771,   765,   767,
     773,  1033,     0,     0,     0,     0,     0,     0,   858,   848,
     856,   850,   852,   854,   653,   965,   964,     0,   843,   833,
     841,   835,   837,   839,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   259,     0,
     762,   758,   760,   764,  1032,     0,     0,   457,     0,     0,
       0,   105,     0,   300,   457,     0,     0,    94,   457,     0,
       0,   460,   313,   309,   329,   462,   463,   328,   464,   312,
       0,     0,   434,   430,   303,   356,   482,   357,   483,   358,
     484,   363,   489,   364,   490,   368,   494,   369,   495,   376,
     501,   377,   502,   375,   500,   387,   512,   383,   508,   388,
     513,   384,   509,   394,   519,   392,   517,   399,   524,   397,
     522,   404,   529,   402,   527,   407,   532,   410,   535,   562,
       0,   578,     0,     0,     0,     0,   436,   432,   461,   321,
     318,     0,   465,   466,   320,     0,     0,   435,   431,   359,
     485,   360,   486,   361,   487,   365,   491,   366,   492,   370,
     496,   371,   497,   380,   505,   381,   506,   378,   503,   379,
     504,   389,   514,   385,   510,   390,   515,   386,   511,   395,
     520,   393,   518,   400,   525,   398,   523,   405,   530,   403,
     528,   408,   533,   411,   536,   563,     0,     0,     0,     0,
     437,   433,     0,     0,  1294,  1297,     0,     0,  1292,  1303,
    1304,     0,     0,   873,   871,   872,   877,   875,   876,   234,
     232,   231,   230,   264,   653,   962,   241,     0,   207,   240,
     127,     0,   125,   830,   824,   826,   828,     0,   653,     0,
      15,    19,     0,   182,   994,   653,     0,   139,     0,   137,
     830,     0,   264,   653,     0,    27,    84,   117,   120,   118,
     121,   129,   130,   131,   133,   141,   142,   114,   112,   113,
      13,   711,   714,     0,     0,   907,  1039,     0,     0,     0,
     995,   991,     0,     0,   710,   879,   896,   984,   985,   879,
     193,   194,   178,     0,     0,     0,     0,   599,   600,   602,
       0,     0,   631,   627,     0,     0,     0,     0,     0,   226,
     218,   216,     0,     0,     0,    36,    37,    75,    54,     0,
      55,     0,    63,    61,    72,    67,    73,    60,    90,    39,
      70,    62,    91,    59,    71,    68,     0,    58,     0,   689,
      33,    35,    34,  1010,  1011,     0,   619,   609,     0,   614,
     608,     0,   457,   728,     0,     0,     0,   959,     0,   931,
     942,   943,   936,   934,   935,     0,   963,   944,     0,     0,
     937,     0,     0,     0,  1052,  1060,  1039,  1050,  1045,  1047,
    1056,   930,     0,     0,     0,   927,   705,   706,   707,   457,
       0,     0,  1113,  1123,  1118,     0,     0,     0,  1114,  1125,
    1119,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1217,  1205,     0,  1182,   264,     0,     0,     0,  1225,
    1231,  1232,  1229,  1230,     0,     0,     0,     0,   145,  1110,
    1120,  1115,     0,   159,   569,   567,     0,     0,     0,   450,
     573,   570,   568,   451,   574,     0,   988,  1243,  1245,  1146,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     770,   772,   766,   768,   774,  1034,     0,   293,   291,     0,
       0,   949,   653,     0,     0,     0,     0,     0,     0,   967,
       0,   966,     0,     0,     0,   844,   834,   842,   836,   838,
     840,     0,   267,     0,   266,   295,     0,     0,     0,     0,
       0,     0,  1308,     0,     0,     0,     0,   354,   480,   262,
     108,   106,   327,   326,    99,   103,   310,     0,   311,   307,
     308,   579,     0,     0,     0,     0,     0,     0,   319,   316,
     317,     0,     0,     0,     0,  1296,  1295,  1299,     0,     0,
       0,  1291,  1290,     0,   959,   218,     0,     0,   123,   126,
       0,     0,     0,     0,     0,   995,     0,   135,   138,     0,
      14,   457,     0,     0,   720,     0,   879,   908,   996,   992,
     993,   712,   715,   897,   174,   819,     0,   243,   242,     0,
     630,     0,   213,   214,   204,   209,   210,   220,     0,     0,
      51,    46,    49,    52,    47,    50,    37,    43,    40,    42,
       0,     0,  1014,  1015,   618,     0,   613,     0,   962,   961,
     932,   945,   946,   939,   938,   940,  1036,  1035,     0,   929,
     928,    79,  1111,  1121,  1116,     0,  1112,  1122,  1117,     0,
       0,     0,     0,     0,  1221,  1195,     0,     0,  1194,  1224,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1202,     0,  1183,  1206,  1184,  1207,     0,     0,     0,
    1095,   915,  1095,     0,     0,   155,     0,     0,     0,   160,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     472,   292,   859,     0,   964,     0,   947,   950,   951,   277,
     278,     0,   968,   952,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   268,   281,   282,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   476,   331,   330,   454,
     580,   421,   554,   413,   538,   425,   558,   417,   546,   455,
     581,   422,   555,   414,   539,   426,   559,   418,   547,   423,
     556,   415,   540,   427,   560,   419,   548,   424,   557,   416,
     541,   428,   561,   420,   549,  1298,  1300,  1293,   831,     0,
     124,   150,   996,     0,   136,    86,   909,     0,     0,   820,
       0,     0,     0,     0,     0,     0,   205,     0,   221,     0,
       0,  1012,  1013,  1002,     0,     0,     0,     0,   925,  1185,
    1186,  1189,  1190,  1193,  1223,     0,     0,     0,     0,     0,
       0,     0,  1199,  1208,     0,     0,     0,     0,  1093,     0,
    1090,  1103,     0,  1095,     0,  1095,     0,     0,     0,     0,
     474,   473,   966,   948,   860,   953,   954,   275,   276,   845,
     285,   286,     0,     0,     0,     0,   279,   280,   289,   290,
       0,     0,   294,  1306,  1307,  1305,   832,     0,   713,   716,
     718,   717,     0,     0,   215,   211,     0,   999,  1004,     0,
       0,     0,     0,     0,     0,     0,  1213,  1197,     0,     0,
    1198,  1210,     0,  1201,  1212,     0,     0,     0,  1095,     0,
    1095,     0,  1095,     0,  1096,     0,     0,     0,   148,     0,
     153,     0,   156,     0,   846,   283,   284,     0,   287,   288,
     171,  1000,  1187,  1188,     0,     0,  1196,  1203,     0,  1200,
    1211,     0,  1107,  1094,     0,     0,     0,  1104,     0,     0,
    1095,  1095,     0,  1095,   147,   146,   151,   149,     0,     0,
     354,   480,   269,     0,     0,     0,  1091,     0,     0,  1095,
    1100,     0,     0,  1097,     0,     0,   154,  1204,     0,  1108,
    1109,  1105,     0,     0,     0,     0,  1095,   152,     0,     0,
    1101,  1102,  1098,     0,  1092,  1106,     0,  1099
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   209,    55,    56,   973,   332,   440,   441,   442,   443,
     444,   445,   446,   447,   987,   988,   989,   990,   991,   992,
     993,   994,   995,   996,   997,   998,   256,   257,   448,   449,
      58,   333,   334,   744,   773,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,  2087,  2088,  2089,   462,   645,
     646,   647,   463,   464,   465,   466,  1783,   408,   504,   409,
     505,   410,   506,   507,   865,   411,   412,    59,    60,    61,
      62,    63,   335,   336,   337,   338,   339,   999,  1000,   340,
     341,   747,  1266,   342,   650,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   732,
     827,   652,  1323,   359,   360,   653,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   654,   655,  1125,
    1325,   553,   554,   211,    65,   497,   498,   212,    67,   213,
     214,    68,    69,    70,    71,    72,    73,   215,   118,   216,
     262,   930,   931,   217,   218,   219,    77,    78,    79,    80,
      81,   220,   739,  1201,   265,   470,    83,    84,   487,   488,
     875,  1224,   717,  1048,  1049,   124,    85,   471,    87,   472,
     127,   128,   129,   934,   130,   119,    89,  1097,  1098,  1099,
      90,   579,  1215,   474,   581,  1217,   133,   185,   475,   476,
     187,   938,   135,  1017,  1534,  1005,  1006,  1535,   188,   189,
     190,   191,   740,  1202,   224,   225,   226,   227,   228,   229,
     658,   659,  2008,  2009,   660,   661,   662,    93,   477,   266,
      94,    95,   267,   268,   269,   665,   666,   667,   668,   270,
     669,   896,  1618,  1128,   672,   673,   674,  1129,   676,    96,
      97,   374,    98,    99,   100,   101,   102,   103,   833,  1395,
    1396,   834,   835,   375,   376,   377,   378
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1980
static const int yypact[] =
{
   38035, -1980, -1980, -1980, -1980,    32, -1980, -1980, -1980, -1980,
   -1980, -1980, -1980, -1980, -1980, -1980, -1980, -1980, -1980, -1980,
   -1980, -1980, -1980, -1980, -1980, -1980, -1980, -1980, -1980, -1980,
     811,   108, -1980, -1980, -1980, -1980, -1980, -1980,     3,    16,
      55,   706,   320, -1980, -1980, -1980, -1980, -1980, -1980, -1980,
   -1980,  2651,  3046, -1980, -1980, -1980,   208, -1980,   262,   706,
     275, -1980,   215,   294,  1026, -1980,   420, -1980,   719, -1980,
     377, -1980, -1980, -1980, -1980, -1980,   272, -1980,  1066,   429,
   -1980,   392,  1234, 37643,  2976,   759, 38329, -1980,   462,   481,
   -1980,  1834, 40946, 36221, -1980, -1980, -1980, -1980, -1980, -1980,
   38138, 37241,   635, -1980,   108, -1980, -1980,   320,   320,   640,
     549,   320, 29147,   706, -1980, -1980,   414, -1980,  2651, -1980,
   -1980, -1980,   550, -1980,   847,   862, -1980, -1980, 38425, -1980,
   -1980,  3046,  1821,  1740,  1890,  2006, 23636, -1980,   568,   806,
     797, 30225, 40570, -1980, 30351, -1980, -1980, -1980,   706, -1980,
     755,  1090,  1135,    72, 40570, -1980, 40300, 30477, 40570, 30603,
   -1980, 30729, -1980, -1980,   706, -1980, -1980,   647,   587, -1980,
   -1980,  1058, -1980,   294,   494, -1980, -1980, -1980, -1980, -1980,
    1159,   651,   462,  1821,  1255,  2006, 40946, 40946,   282, -1980,
    1154,   613,   738,   587,   866,   462,  1213, -1980, 27747,   780,
   -1980, -1980, -1980, -1980, -1980, -1980, -1980, -1980, -1980, -1980,
     776, -1980,   453, -1980,   800, -1980, -1980,   809, -1980,   823,
    1428, 35364,   190,   372, -1980, -1980,   600,   660,   873,   886,
     357,   906, -1980,   357, -1980, -1980, -1980, -1980, -1980, -1980,
   -1980, -1980, -1980, -1980, -1980, -1980, -1980, -1980,   920,   945,
   -1980, -1980, -1980, -1980, -1980, -1980,   123,    57, -1980, -1980,
   -1980, -1980, -1980, -1980, -1980, 37839, -1980, 17397, 36533, 41149,
   17536, -1980,   947,  1041,   884, -1980, -1980,   294, 37741, -1980,
   -1980, -1980, -1980, -1980, -1980, -1980,   377,   392, 38905, 40946,
   39190, -1980, -1980, -1980, -1980, -1980,  1002,   640,   640, -1980,
   29147,   183, -1980, -1980, 29202, 29287, 29287,  1031, 40750, 29147,
   -1980, -1980,  1052,  1055, 40750, 29147,  1076,  1088,  1110,  1152,
    1168, 29342, -1980, -1980, 23880, -1980,   320, 12020, -1980, -1980,
   -1980, -1980,  1093, -1980,   128,  1113, -1980, -1980,   108, -1980,
   -1980, 12822, -1980,  1549, 27802, -1980,   871,   948,  1089, 29147,
     842,  1126,  1162,  1161,  1174,  1305,   106,  1549,  1220,   786,
   -1980,  1549, -1980,   933,  1030,  1375,  1012,  1240,  1216,  1259,
    1212,  1345,   159,  1549,   640, -1980, -1980, -1980, -1980,  1280,
     393, 40390,  1310,  1316, -1980, -1980, 27887, -1980, 27942, -1980,
     688,   700,  1286,  1334,  1821,  2171,  2540,   847, -1980, -1980,
     915, -1980, -1980, -1980, -1980, -1980,  1052,  1093, -1980, -1980,
   -1980, -1980,   639,  1359, -1980,  1089, -1980,  1375, 35479, -1980,
   23758, 40300, -1980,   544, 40030, 39285, -1980, -1980,  1256, -1980,
     706, -1980, -1980,   108, 39475, 39095,  6453, 40660, -1980, -1980,
    1536,  1333,  1333,  1115, -1980,  1340, -1980, -1980, -1980,   133,
     861,   172, -1980, -1980, 29587,  1349, -1980,  1120, -1980, -1980,
     345, -1980, -1980, -1980,  1369, 29721, 29847,   343,   185,   786,
   36325, 38521, -1980,   462,  1834, -1980, -1980, 11378, -1980, -1980,
    1381, -1980,   706, -1980, -1980, -1980,  1964, 40750, -1980,   544,
   -1980, 29973, 30099,  1385,  1392, -1980,  1399, -1980,  1403, -1980,
   -1980,  2594,  1405,   760, -1980, -1980, -1980, -1980,   976,   804,
   35479,  1009, -1980, 30855, 30981, -1980,  1009, -1980, 31107, 31233,
    1009, -1980, 31359, 31485, -1980, -1980,  3046,  3046,  3046, 21842,
     915,  1159,   651,   915, -1980, 28027, 36533, -1980,   947, 36533,
   -1980,   947, -1980, -1980,  3046,  3046,   915, -1980, -1980,  1409,
     225, -1980, -1980,  1418,  1463, 40120,  1486,  1408,  1430, -1980,
   31611, -1980, 31737,   503, -1980, 12663, 28082,  3046, -1980,  1219,
     776, -1980, -1980, -1980, -1980, -1980,   847,  1429,   462,   893,
     187,   132,  1336,  1476, -1980, 39760,  1480, -1980, 39850,  1499,
   39940,  1507, 40210, -1980, -1980, -1980,  1249, -1980, 29147,   706,
   -1980, -1980,  1527, -1980, -1980,   647,   587, -1980,  1519, -1980,
   -1980, -1980, -1980, -1980,   462,  1301,   613, -1980, -1980,  1533,
   -1980, 17675, -1980,   947, -1980,   180, 28167,  1529,  1540,  1542,
      27, 17814,  1544,   108,  1547,  1552, 17953,  1052,  2197,  1557,
    1564,   108, -1980, -1980,  1093,  1563,  1570,  1572,  1379, 16002,
    1549, 16146, 25428,  1549,  1549, -1980, 16285, 37937, -1980, -1980,
   -1980, -1980, -1980, 18092, 18231, 18370, 18509, -1980, -1980, -1980,
     947, 18648, -1980, -1980, -1980, 18787, -1980, -1980,   320,   320,
     640,   584,   706,  1390,  1569, -1980,   847,   759, -1980,   462,
    1821, 40946, 40946, 36533, -1980, -1980, 39000, 29147,   196,  1580,
     326, -1980, 24018, -1980, -1980, 28222, -1980, -1980, -1980, -1980,
   40750,  1586, -1980, -1980, -1980, -1980, -1980, 35797, 40750, 24156,
     108, 35903, 40750, 29147,   320,   320,   320, 29147, 23880, -1980,
   -1980, -1980, 12978, 13122, 13266, -1980, -1980, -1980, -1980,  8525,
    1587,    66, 21980, -1980, -1980,   194, -1980,   561, -1980, 22118,
    1581, -1980, 22256, -1980, -1980,  1525, -1980, -1980, 25486,  1530,
   29147, -1980, -1980, -1980, -1980, -1980, -1980, -1980, -1980, -1980,
   -1980, -1980, 27802,   201, -1980, -1980, -1980, -1980, 29147, 29147,
   29147, 29147, 29147, 29147, 29147,  1089,  1375, 29147, 29147, -1980,
   29147, 27802, 27802, 27802, 27802, 27802, 29147, 29147, 13410, 27802,
   -1980,  1539, -1980, -1980, 25571,  1550, 29147, 27802, 29147, 29147,
   29147, 29147, 29147, 29147, 29147, 29147, 29147, 29147, 29147, 27802,
   27802, 27802, 27802, 27802, 29147, 29147, 13554, 27802, -1980, -1980,
     595,   776, 40660, -1980, -1980, 37340, 40390, 40390, -1980,  1577,
    1578,  1579, -1980,  1582,  1583,  1585, -1980, -1980, -1980, -1980,
     847, -1980, -1980, -1980, -1980,  1588, -1980, -1980, 23636, 23636,
   35258,   462,   897, -1980,   659,   985,  1616, 35479,   999,  1591,
    1595, -1980, -1980, -1980,  1964, 35585, 39380, -1980, -1980,   108,
   -1980, -1980, -1980, 36429,  1593,   108, 35691,  2591, 24278,  1425,
   39570, -1980,  1598, -1980,   947, -1980,   947, -1980, -1980, -1980,
     947, -1980,  1597, -1980,   831, -1980, -1980,  4080,  4080,  1333,
    1333, -1980,  1333,   147, -1980,  1333,  1333, -1980, -1980,   138,
   -1980,  1369,   138, -1980,  1369,   902, 28307,  2488, 29147,   622,
   -1980,  1599,   847, 38617, -1980,   462,  1821, -1980, -1980,   718,
     780, 35364, 29453,   585,   357, -1980,   357,  3046, -1980, -1980,
   -1980, -1980,   241, -1980,   263, -1980,   343, 36325, 23636, -1980,
   -1980,  1607, -1980, -1980, -1980, 40300, 40300, 29147,   108, -1980,
   31863,   117, -1980,   -28,   956, -1980, 40300,   108,   901,   108,
    1526, -1980, -1980, -1980, -1980, -1980, -1980,  1333, -1980, -1980,
   -1980, -1980, -1980, 36635,  1438, -1980, 22394, 41048, 22532, -1980,
   -1980, 12215, -1980, -1980, 39665, -1980, -1980,   847,  1159, -1980,
     651, -1980,   847, -1980, 28027, -1980, -1980, -1980, -1980, -1980,
     947, -1980,   947, -1980, -1980, -1980, -1980, -1980, -1980, -1980,
   -1980, -1980, -1980, -1980,  1403,   118,   166,  1600, -1980, 31989,
   32115,  1603, -1980, 32241, 32367, 32493, -1980,   627,   398,   437,
    1172,  1818,  1611,  1617,  1621, -1980,  1605,  1612,  1615,   462,
     915,  2006,   187, 38713, 28362,   893, -1980, -1980, 40480, -1980,
   -1980,   776, -1980, -1980, 40480, -1980, -1980,   776, -1980, -1980,
   40480, -1980, -1980,   776, -1980, -1980, 40480, -1980,   776, -1980,
   -1980, -1980, -1980, -1980, -1980, -1980,  1630,  1634, -1980,  1386,
    1635,  1637,   394, -1980, 22670, -1980, -1980, 18926,  1631,  1632,
   19065, 29147, 29147, -1980, 28447, 28502,  1633,  1646,  1647, 10041,
    1648,   108, 25626,  2368,  1485, 25711, -1980,  1717, -1980, -1980,
   25796,  1649, -1980, -1980, -1980,  1655,  1663, 25851, 16424,   320,
    1667, 29147, 29147,   108, -1980, -1980, -1980, -1980, 21566,   860,
   27802, -1980,  1393, -1980, 29147, 13698, 13842, 27802, -1980, 29147,
   13986,  1533, 19204, 19343, 19482, 19621, -1980, -1980, -1980, 19760,
   -1980, -1980, -1980, 19899, -1980, -1980,   640,   640,  1651,  1671,
   35013, 35138,   915, -1980,   915, 36533, -1980, 36533, -1980, -1980,
    1668, 27802, -1980, 27802,   664, -1980,   343, -1980, -1980, -1980,
   -1980,  8525,  1672,  1673, 40840, 23636, 38233, 29147,  1674, -1980,
   -1980, -1980, -1980, -1980,   462,  1675,  1678,  1669,  1681, -1980,
   -1980, -1980, -1980, -1980, 36009, 25936,  1680,  1683,  1686, 29147,
    1679, 36115,  1677,   373,   337,   579,  1684,  1690, -1980,   108,
   -1980, -1980, -1980, -1980, -1980, 29147,   320,   265, 36736, 22808,
    1689, -1980, 27802, -1980,   270, 36837, 22946, -1980,   274, 36938,
   23084, -1980, -1980, -1980, -1980,  1244,  1697, -1980, -1980, -1980,
   26021,  4957, -1980, -1980,  1689, -1980, -1980, -1980, -1980, -1980,
   -1980,   871,   933,   871,   933,   948,  1030,   948,  1030,  1089,
    1375,  1089,  1375,  1089,  1375, -1980, -1980,   842,  1012, -1980,
   -1980,   842,  1012, -1980, -1980,  1126,  1240, -1980, -1980,  1162,
    1216, -1980, -1980,  1161,  1259,  1174,  1212,  1305,  1345, -1980,
      53, -1980, 26079,  1691,  5767,  1692, -1980, -1980, -1980, -1980,
   -1980,  1246, -1980, -1980, -1980, 26164,  6821, -1980, -1980, -1980,
   -1980, -1980, -1980, -1980, -1980,   871,   933,   871,   933,   948,
    1030,   948,  1030,  1089,  1375,  1089,  1375,  1089,  1375,  1089,
    1375, -1980, -1980,   842,  1012, -1980, -1980,   842,  1012, -1980,
   -1980,  1126,  1240, -1980, -1980,  1162,  1216, -1980, -1980,  1161,
    1259,  1174,  1212,  1305,  1345, -1980, 26222,  1694,  8377,  1696,
   -1980, -1980,   108,   108, -1980, -1980,   475,   929, -1980, -1980,
   -1980, 37441, 37542, -1980, -1980, -1980, -1980, -1980, -1980, -1980,
   -1980, -1980, -1980,   683,  2432,   897, -1980, 23636,   108, -1980,
   -1980, 23636, -1980,   937, -1980, -1980, -1980,   508,   462,  1821,
   -1980, -1980,   449,  1599,  1588,   462,  1821, -1980,  1711, -1980,
     949,   603,   979,  3046,  1712, -1980, -1980, -1980, -1980, -1980,
   -1980, -1980, -1980, -1980, -1980, -1980, -1980,  4810, -1980, -1980,
   -1980, -1980, -1980, 23222,  2258,   780, 35364, 21428,   626,   915,
     847, -1980,   915, 29147, -1980,   853, -1980, -1980, -1980,  1716,
    1597,  1581,  1599,  1017, 23636,  1029,  1034, -1980, -1980, -1980,
   32619, 32745,  1719, -1980,  3229, 40660, 40660, 40660, 40660, -1980,
   -1980, -1980, 29147,  1721, 28587, -1980,   947, -1980, -1980, 28642,
   -1980, 28727, -1980, -1980, -1980,  1493,  1438, -1980, -1980,  1333,
   -1980, -1980, -1980, -1980, -1980,  1493,  1438, -1980, 28782,  6990,
   -1980, -1980, -1980, -1980, -1980, 20038, -1980, -1980,   249, -1980,
   -1980,   257,  1720, -1980, 32871, 32997,   462,  1818,  1729, -1980,
   -1980, -1980, -1980, -1980, -1980,   915,   893, -1980,  1730,  1737,
   -1980,  1727,  1728,  1731, -1980, -1980, 35364, -1980, -1980, -1980,
   -1980, -1980, 29147,  1741,  1520, -1980, -1980, -1980, -1980,   280,
   37039, 23360, -1980, -1980, -1980, 20177, 21566, 21566, -1980, -1980,
   -1980, 20316, 26307, 16563, 26392, 26477, 24642, 26562, 16702, 21704,
    1736,  1742, 21704, 29147, 28867,  1812, 26647,  1663,  9673,   320,
   21704,  1753,  8069, 10041, -1980,  1494, 26702, 10504, 26787, -1980,
   -1980, -1980, -1980, -1980,   200,   320,  1754,  1264, -1980, -1980,
   -1980, -1980, 20455, -1980, -1980, -1980,  1756,  1758,   108, -1980,
   -1980, -1980, -1980, -1980, -1980, 40300, -1980, -1980, -1980, -1980,
   26842,  1752, 24918,  1755, 26927,  1760, 25003,  1763,  1761,  1762,
   -1980, -1980, -1980, -1980, -1980, -1980, 14130, -1980, -1980,  1776,
    1072, -1980,  2718,  1779,  1783,  1788,  1780,  1785, 23636,  1678,
   38809,  1675, 29147, 23636, 29147,  1801, -1980, -1980, -1980, -1980,
   -1980,  1789, -1980, 28922, -1980, -1980,  1792,  1793, 29147, 29147,
    1790,  9853, -1980,   108,   108, 29147, 14274, -1980, -1980,   640,
   -1980, -1980, -1980, -1980, -1980, -1980, -1980, 14418, -1980, -1980,
   -1980, -1980, 27802, 14562, 14706, 27802, 14850, 14994, -1980, -1980,
   -1980, 15138, 15282, 15426, 15570, -1980, -1980, -1980,   595,  1808,
     610, -1980, -1980,   462,   897,  1923,  1114, 23636, -1980, -1980,
    1807,   915,   915,  1333,   915,  1588,  1813, -1980, -1980,  1817,
   -1980,   300, 37140, 23498, -1980,   462,   881, -1980,   847, -1980,
   -1980,  1810,  1811, -1980, -1980, -1980,  1136, -1980, -1980, 33123,
    1822, 33249, -1980,  1823, 35479, -1980,  1827, -1980, 29147, 28027,
    2310, -1980, -1980,  2310, -1980, -1980, -1980,  2310, -1980, -1980,
   20594, 20733, -1980, -1980, -1980, 33375, -1980, 33501,   187,   893,
   -1980, -1980, -1980, -1980, -1980, -1980, -1980,  2006, 27012, -1980,
   -1980, -1980, -1980, -1980, -1980, 20872, -1980, -1980, -1980, 21011,
   10041, 24366, 10041, 24366, 12520, -1980, 24780, 16841, -1980, -1980,
   21704, 21704, 27097, 10041, 27182, 24504,  1826, 25088, 27267,   204,
   21150, -1980, 29147, -1980, 12520, -1980,  8069, 10041, 25173, 29007,
      84,  1829,    84,   226,  1828, -1980,   108, 29147, 29147,   108,
   27802, 27802, 27802, 27802, 27802, 27802, 27802, 27802, 15714, 15858,
   -1980, -1980, -1980,   462,  1678,  1832, -1980, -1980, -1980, -1980,
   -1980,  1146,  1675, -1980,  1837,  1838,  1844,  1846,  1205,  1847,
    1848, 23636, 29147, 23880, -1980, -1980, -1980,  1854,  1857,  1859,
    1860, 29147,  1839,  1843,  1845,  1875, -1980, -1980, -1980, -1980,
   -1980, -1980, -1980, -1980,   326, -1980, -1980, -1980,   326, -1980,
   -1980, -1980, -1980, -1980,   326, -1980, -1980, -1980,   326, -1980,
   -1980, -1980,   326, -1980, -1980, -1980,   326, -1980, -1980, -1980,
     326, -1980, -1980, -1980,   326, -1980, -1980, -1980, -1980,  1215,
   -1980, -1980,  1588, 27802, -1980, -1980, -1980, 29147, 29147, -1980,
   33627, 33753, 33879, 34005, 34131, 40660, -1980, 40660, -1980, 10309,
   21289, -1980, -1980, -1980, 34257, 34383, 34509, 34635, -1980,  1938,
    1941, -1980, -1980, -1980, -1980, 10041, 29147, 29062,  1829, 16980,
   17119, 25258, -1980, 12520, 24780, 27322, 17258,   108, -1980,  1081,
     177, -1980,    96,    84,  1883,    84,    92,   645,  1886,  1271,
   -1980, -1980,  1675, -1980, -1980, -1980, -1980, -1980, -1980, -1980,
   -1980, -1980,  1237,  1877,  1880,  1892, -1980, -1980, -1980, -1980,
    1884,  1885, -1980, -1980, -1980, -1980, -1980,  1895, -1980, -1980,
   -1980, -1980, 34761, 34887, -1980, -1980, 27407, -1980, -1980, 10041,
   10041, 27492, 25343, 10041, 27577, 24504,  1896, -1980, 10041, 29147,
   -1980, -1980, 24780, -1980, -1980,  1888,  1898,    84,    84, 29147,
      84,  1899,    84,  1149, -1980,   240,  1333,   636, -1980,   283,
   -1980,  1897, -1980,   108, -1980, -1980, -1980, 28587, -1980, -1980,
   -1980, -1980, -1980, -1980,  1896, 10041, -1980, -1980, 27662, -1980,
   -1980,   320, -1980, -1980,  1272,  1902,  1285, -1980,  1184,  1903,
      84,    84,  1904,    84, -1980, -1980, -1980, -1980,    92,   673,
   -1980, -1980, -1980, 10041,   199,  1908, -1980,  1911,  1915,    84,
   -1980,  1321,  1328, -1980,  1204,   696, -1980, -1980, 29147, -1980,
   -1980, -1980,  1347,  1916,  1917,  1919,    84, -1980,  1922,  1921,
   -1980, -1980, -1980,  1350, -1980, -1980,  1926, -1980
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1980,  2067,   112, 10144, -1980,  1990, -1980, -1980, -1980, -1980,
   -1980, -1980,  1584,  1589,  -929, -1980,  -890,  -964,   145,   148,
    -881,  -809,  -799, -1980,  -732,  -699, -1980, -1980,  1594,  1602,
   -1980,  1715,  3265, -1980,  -292,   608,   681, -1980, -1980, -1980,
   -1980,  1609, -1980, -1980, -1980,  -640, -1979,  -101, -1980, -1980,
   -1980, -1980,  2390,  3133,   -22,    11,   557,  -848, -1980,  -834,
   -1980,  -843, -1980,  1071,  -148,  1199,  -671,     1,  1774,   -13,
    1781,   -21,     0, -1980,  1151, -1980, -1980,  7528,  3860, -1980,
    5622,  -146,  1266, -1980,  3771, -1980,  -325,   391,   534,  1100,
   -1980,  -458,  -457,  -203,   -38,    10,   124,   914,  9076,  4373,
     -45,  8898,  -781,   380, -1980,  4549,  -320,   656,   856,  2026,
     615,   146,   161,   191,   209,   234,  1241,   526,  -421,  7106,
    -748,  -294,   723, 10847,   -56,  1109,  -130,  3236, 10912,  8268,
   -1980, -1980, -1980,   -74,   -41,   -70, -1980,  6550, -1980,  1022,
    3315,   620,  -795,  3736,  8758, -1980, 11214, -1980, -1980, -1980,
     -52,  4053, -1980, -1980,  2030,  6555,   -37, -1980, -1980,  1141,
    1659,  1373,  1784,   -82,   -81,  5431, 10303,  8661,  3330,  -367,
    -114,  -368,    77,  -851,    74,  2858, -1980, -1980, -1062, -1980,
    3595,  -558, -1204,  7418,  -207,  -670,   264,   210,   151,  1685,
    -252,  -764,  -456,  -909,  -529,  -917,  -919,   311,  1105,  1098,
     -24,  1849,  -716,  1374,   628,  -511,  -431, -1980,   -89,   -71,
    5725,   212,    31,  -391, -1980, -1980, -1980,  2004, -1980,  3316,
    2016,   -64,  3577,    -7,  1841,  1018,  1021, -1980, -1980, -1980,
     -90,  1996, -1551,   -69, -1980, -1980, -1980,     6, -1980,  2019,
     -55,    19,  2012,  1592, -1980, -1980, -1980,  2022,  -759,   381,
   -1980,  -745,   863, -1980, -1980, -1980, -1980
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1289
static const yytype_int16 yytable[] =
{
      64,  1143,   271,  1226,   222,   223,  1018,  1459,   508,  1458,
    1248,  1410,  1681,   177,   939,   718,  1412,  1255,   398,   776,
    1259,   722,  1065,   501,   777,  1411,   286,   175,  1113,   280,
     108,   110,  1514,  1520,  1524,   745,   692,  1575,   282,   392,
     943,   115,   176,  1249,  1032,  1387,   390,   391,   287,   109,
    1256,  1230,   123,  1260,  1721,  1848,   278,   393,   602,   140,
     196,   116,   173,   288,   149,   148,   152,  1859,  1519,   398,
     172,   299,   277,   499,  1073,     1,  1399,  1079,  1389,  1085,
     276,  1090,   163,   174,   123,  1471,   210,   285,  1433,   106,
    1400,   123,   840,    64,   844,     1,   537,   540,  1495,  2080,
      64,    64,   933,  1496,   296,  1533,  1513,   945,  1523,   104,
    2127,     1,  1431,   380,  1016,  1515,   383,  1525,  1492,  1536,
       1,     1,   491,   797,   600,   111,   297,   298,   210,   750,
     301,   123,   123,  1066,   902,   513,   413,   518,   112,   522,
     149,   467,   480,  1500,   467,  -457,  -457,  -457,   494,  1114,
     496,    92,   106,   496,   480,   492,   509,   467,   480,   467,
     181,   467,  1482,   105,   525,  2086,  2127,  1539,   514,     1,
     519,   138,   523,   904,   149,   148,   825,   113,   622,   536,
     539,   617,   299,   123,  -453,   603,   925,  1516,   299,  1526,
       1,   583,   755,   756,   757,  1250,  1246,  1517,   550,  1527,
     500,   671,  1274,  1860,   299,   299,   399,  1860,   177,   299,
     149,   863,   558,   797,   286,     2,   286,  2007,   937,  2081,
     163,   570,   175,  2077,   121,   379,   280,  2082,     1,  2013,
     123,   299,   175,   123,   186,   282,   287,   176,   287,  1432,
    1531,   615,  1480,  2121,    92,  1493,  1537,   176,   601,   798,
    1804,   289,    92,   696, -1036, -1036,   751,   399,  1806, -1036,
     532,   903,   134,   663,  1481,   608,  -109,   685,  -457,   277,
     648,  -100,  1057,   868,   679,  -104,   675,   695,   681,   326,
     851,   -82,   693,   542,  1520,  1524,     1,  1483,    64,   682,
      64,  1520,  1524,   680,  1540,  1520,  1524,  1997,   772,  2079,
     751,   -89,   826,   979,  1065,   618,   701,   758,   711,   565,
     549,   926,   799,   584,   711,   759,   807,   585,   760,  1519,
     566,  2148,  1251,  1861,   550,   106,  1519,  1998,   136,  1251,
    1519,  1862,  1108,  1297,  1301,  1862,  1305,  1267,   753,  1191,
     143,   396,   299,   825,   144,   741,     1,   184,   184,  2014,
     893,   895,   897,   899,   752,   181,  2086,  2015,  1052,  1523,
       1,  1363,  1367,  2122,  1371,   688,  1523,  2077,  1525,   903,
    1523,  2123,  1580,   586,  1805,  1525,   968,  -617,   299,  1525,
     149,   831,  1807,  1267,   968,  -612,   550,   137,   550,   942,
     223,   751,   156,  -109,   123,   395,     1,     1,  -100,   583,
     123,  -739,  -104,  -739,   141,  1581,   142, -1021,   -82, -1021,
    1651,  2126,  1655,   149,   915,   916,  1009,     1,   831,   299,
     866,   509,   145,     1,   870,   570,  1034,   939,   -89,   186,
     881,   582,  1009,   882,   831,   870,   889,   831,   586,   691,
    1526,   289,     2,  1653,   692,  1657,  1019,  1526,     2,  1021,
    1527,  1526,     1,  1275,  1277,  1279,     1,  1527,  1276,  1278,
    1280,  1527,   146,   147,  1703,   467,   467,   149,   852,  1193,
     929,   210,   752,   917,   123,  1892,  1053,   956,     1,    52,
     745,     2,   960,  1339,  1341,  1343,   163,   961,  1340,  1342,
    1344,   467,   467,  1065,  1054,   587,  1702,     1,   839,   588,
     843,   939,  1468,   974,  1556,   155,     1,   745,   933,   149,
     978,     1,  1820,   467,   467,   745,   829,  1578,   467,   467,
     160,   469,   467,   467,   469,   585,   123,   123,   123,   184,
     123,     2,  1244,   123,  1670,   745,  1673,   469,  1039,   469,
    1043,   469,   184,   381,   123,   123,   123,   688,  1532,   150,
     149,  -457,  -457,  -457,  1691,   831,   496,  1565,   159,    26,
     467,  1700,   467,   525,   588,  1047,   550,   123,   933,  1410,
     149,  1040,  1753,  1044,  1412,  1570,   877,  1477,  1471,  1478,
     123,    51,   556,  1745,   299,  1071,   589,     1,  1077,   933,
    1083,  1309,  1088,  1016,   671,   671,   671,   671,     1,  1102,
    1737,   589,  1738,   231,  1011,  1150,     1,  1010,  1157,  1799,
    1013,  1798,  1265,   146,   147,   299,  1520,  1524,  1769,  1375,
    1011,  1770,   286,   529,  1430,     1,  1802,   589,  -863,  1227,
       1,  1124,  1045,  1131,  1461,   295,   933,  1749,   373,     1,
     175,  1144,  1399,  1399,   287,   299,   134,  1782,     1,  1785,
     856,  1519,  -910,  1052,   399,   176,  1400,  1400,  1331,  1787,
    1418,   591,     1,   648,   648,   648,   648,     1,  1427,   675,
     675,   675,   675,  1487,  -457,   300,     1,  -457,  1056,  1441,
    2022,   149,  1179,   386,  1185,  1187,     1,   972,  1252,   583,
     123,  1523,     2,   419,  -216,  1253,   570,  1176,  1177,     1,
    1525,   586,  1196,   146,   147,   937,  1704,  1476, -1061,     1,
    1203,  1101,   590,   529,   527,  1392,  1393,  1208,  1218,   550,
    1228,  1208,  1218, -1061,   552,  -910,  -910,   590,  1196,  1635,
    -910,  1762,  1758,  1640,     2,  1957,  1642,  -910,  1644,  1239,
     545,   146,   147,  1233,  1234,  1235,   146,   147,  1767, -1061,
    1746,  1463,  1530,   590,  -863,  1262,   495,  1313,     1,  1269,
     857,  -910,  -910,     1,  1763,   254,   858,  1183,  2090,  2086,
    1562,  1053,  1526,   688,   526,   134,  -910,  1061,  -910,     1,
    -870,   710,  1527, -1067,  1904,  1379,   710,   592,   972,  1054,
     980,   980,   980,   801,   802,   803,  2146,    32,  1520,  1524,
       1,  1329,   146,   147,  -216,  1334,  1315,     1,   184,   184,
    -216,   846,   752,  1776,     1,   585,   106,  1485,  1486,  1451,
    1452,  1600,  1453,   847,  2157,  1455,  1456,   588,    43,    44,
    1394,   149,  1397,  1519,  1381,   831,   831,   831,  -459,  -459,
    -459,  1494,   107,  1548,   392,   469,   469,   691,   153,  1473,
     154,  1467,   391,   373,   787,   788,     1,  1556,   413,  1413,
     210,  1268,   393,     1,   974,   526,   149,   978,  -265,  -265,
    -265,   469,   469,  1523,   163,  1423,   570,  1167,  1171,  1144,
    1533,   197,  1525,   570,     1,  1438,  1440,     1,  1442,   106,
     831,  1981,   198,   469,   469,   146,   147,  1505,   469,   469,
    1769,  1770,   469,   469,     1,  1538,  1541,   555,   804,  -458,
    -458,  -458,   552,  1676,   552,   678,   805,   421,     1,   806,
    1707,  1317,   422,   146,   147,  1708,   420,   123,   559,   149,
     977,    -8,     1,   210,   106,  1696,   123,   398,   560,  1306,
     469,  1475,   469,     2,   123,  1978,   123,  1479,  1490,  1383,
    1633,   561,   121,   688,  1526,  1310,   149,   929,   413,  1257,
     745,  -459,   789,   790,  1527,   509,   509,  1372,   496,   387,
     467,   496,   146,   147,  1558,  1773,   509,  1501,   149,  1503,
     388,  1491,     1,  1376,   197,  1912,  1314,  -265,  -899,  1809,
     778,  -265,  1559,   528,  1665,   198,   593,  1669,  1869,   386,
     146,   147,  1885,  1966,   123,  1316,  1803,  1891,   939,   594,
     779,   780,  1898,  1183,  1380,  1063,  -457,  -457,  -457,   860,
     146,   147,    75,  1544,   815,   816,  1064,  1502,   596,     1,
     566,  1318,  -458,  1382,   688,   496,   496,    52,   671,   467,
     467,   671,   598,   467,   467,   467,  2047,   149,   146,   147,
     123,   123,   808,  -879,  -879,  1003,  1545,  1747,  -879,  1384,
     123,   933,   123,   210,   550,  -879,  1748,   599,   831,  1747,
    1802,   149,   809,   810,   831,   677,  1959,   149,  1757,   671,
     831,   688,  1497,   149,   781,   782,   831,  1498,   149,  -879,
    -879,    26,   552,   671,   671,   671,   671,   975,   134,   783,
     784,   933,   149,   976,   933,   179,  1416,   648,   752,   841,
     648,   845,   976,   675,  1016,    75,   675,  1674,   104,  1124,
    1419,  1131,    75,    75,   373,   399,   976,  2054,   697,  2055,
    1615,  -457,   817,   818,   399,  1675,  1011,   134,  1775,  -457,
     791,   792,  -457,  1628,   858,   146,   147,  1981,   648,  1269,
    1777,   582,   552,   710,   675,  1778,   976,   134,  1624,   491,
    -898,   976,   648,   648,   648,   648,   811,   812,   675,   675,
     675,   675,  1281,  1283,   719,     1,  1561,   720,   136,  1771,
     467,   467,   123,  1031,   123,   528,  1809,  2035,  2132,   909,
     910,   386,   492,  1882,   831,   157,   149,   158,   723,   858,
       2,   831,  1345,  1347,  2076,   413,   210,  1548,  2077,   121,
     724,   911,  2078,  1072,   698,   912,  1078,   913,  1084,  -625,
    1089,  -625,   749,   698,  1685,  -869,  2017,  -869,  -869,   698,
    2032,  1685,   725,  -898,  -898,  1958,   415,     1,  -898,   149,
     898,   858,   752,   574,   254,  -898,    28,    29,   914,   373,
    1556,    32,  1091,   373,   819,   820,   534,  1969,    38,  1646,
     396,  1013,     2,   858,  -624,  1709,  -624,  2024,  1003,  -898,
    -898,  1982,  2119,   858,   726,  1003,  2077,  1092,  1003,   543,
    2120,   544,    43,    44,  -898,  -898,  -898,   469,   469,  1058,
     727,    51,  -869,  1093,   565,   502,  1918,   793,   373,   515,
     179,  1640,   794,  -869,  1644,   566,  1659,  2138,    28,    29,
     179,  2077,    75,    32,   395,  2139,   795,  1285,  1287,  1583,
      38,   796,  1589,  1094,  1095,   373,  2029,  2155,  -869,    28,
      29,  2077,   858,   373,    32,  2156,  2046,  1067,   547,   136,
     544,    38,   858,   800,    43,    44,   737,  1349,  1351,  1109,
     469,   821,   386,   373,   823,  -869,  -869,  -869,  2094,  1816,
    1630,   824,     1,   161,   858,    43,    44,  1716,  1016,  1728,
    -216,  1717,  1096,  1717,  1167,  1171,  1167,  1171,   879,  1016,
   -1016,   535, -1016,   933,   933,   813,   814,  1865,  1896,  1091,
    1899,  1866,  1735,  1736,  2092,  2135,  1739,   149,  2093,  2077,
     822,   831,   831,   828,  1907,  1909,  1298,  1302,  2137,   848,
      28,    29,  2077,   149,  1092,    32,  1740,  1413,  1503,   469,
     469,   413,    38,   469,   469,   469,  1105,  1750,   544,   123,
    1093,     1,  1628,   851,  1364,  1368,   123,  1282,  1284,   836,
     574,  1759,   149,   123,  2153,   837,    43,    44,  2077,   785,
    1803,  2154,  1003,  2129,   552,  2077,     2,   849, -1035, -1035,
    1094,  1095,   254, -1035,   123,   901,  1766,  1346,  1348,   123,
    2159,  2012,   123,  2166,  2077,   149,   908,  2077,   146,   147,
    -216,  1636,  1637,  1638,   413,   859,  -216,  1033,   752,     1,
     467,   467,   574,   552,   918,   831,   831,   831,   831,  -879,
    -879,   958,    28,    29,  -879,   965,  1183,    32,   752,  1573,
    1148,  -879,   966,  1574,    38,  1447,  1449,   671,   671,  1180,
     415,   142,  1003,  1091,  1003,   967,  1261,  1982,     1,   671,
     968,  1268,   574,     1,   971,  -879,  -879,  1035,    43,    44,
    1328,   700,     1,  1027,   467,   467,  1646,   123,  1092,  1013,
     700,  1333,  1028,     1,   752,   123,   700,   562,  1016,  1036,
     469,   469,   198,  1510,  1093,  1511,   570,   761,   762,   763,
     764,   765,   766,   767,   768,   769,   770,  1976,   745,   745,
     745,   745,   745,   745,   745,   745,   648,   648,  1448,  1450,
     552,  1894,   675,   675,  1094,  1095,  1124,  1029,   648,  1124,
      28,    29,  1124,  1068,   675,    32,  1615,  1074,  2033,  1895,
    1124,   698,    38,  1124,   752,    32,  1610,  2040,  1508,     1,
    1509,   852,  2083,   752,  2085,  1852,  1080,  -216,  1849,  1011,
    1003,   981,   982,   983,  1086,  1016,    43,    44,  1144,  1286,
    1288,   552,  1024,  1026,  1863,   509,    43,    44,  1104,  1023,
    1025,  1462,  1504,   396,  1791,  1103,  1794,  1792,  1106,  1795,
    1110,   891,  1111,  1961,  1112,   254,  1130,   373,   373,  1350,
    1352,   745,  1132,  2048,  2050,   771,   582,  1133,   413,  1141,
     210,  1162,  1164,   413,  1163,  1165,  1142,  2114,  1145,  2116,
    1488,  2118,   291,   294,  1009,  1146,  1564,  1147,  1181,  1401,
    1402,  1239,  1567,  1913,  1914,  1192,  1205,   395,  1568,  1257,
    1245,  1403,  1404,  1405,  1569,  1421,  1406,  1407,   179,  1408,
    1420,   388,  1437,  1445,  1199,  1446,  1464,  1484,  -731,  2141,
    2142,  -734,  2144,   552,  1549,   146,   147,  -216,  1394,  1552,
    1550,   737,  1417,  -216,  1551,   752,  1553,   413,  2152,  1554,
    1199,   123,   123,  1571,   123,   552,  1572,  1970,  1576,  1973,
    1577,  1242,  1586,  1587,  1602,  2163,   149,   671,  1603,  1604,
    1606,  1645,  2130,  1611,  1619,  1003,  1817,  2131,   373,   467,
    1620,   467,  1003,  1984,   831,  1986,  1003,  1563,  1621,  1625,
    1971,   421,  1974,  1649,  1678,  1666,  1667,  1680,  1823,  1827,
    1206,  1683,  1682,  1693,  1701,   467,  1694,   467,   123,  1695,
    1839,  1705,  1698,  1706,    28,    29,  1985,  1711,  1987,    32,
    1718,     1,  1724,  1727,     1,  1732,    38,  1734,  1646,  1013,
    1124,  1124,  1124,  1124,  1756,  1760,   648,     1,  1601,  1774,
    1124,  1124,   675,  1124,  1779,  1124,     2,  1788,  -737,     2,
      43,    44,  1810,  1811,   574,   121,   450,  1124,   121,   450,
    1812,  1813,  1814,   401,  1819,  1815,  1144,  1840,  1846,  1628,
     469,   469,   450,  1841,   450,  1850,   450,  1864,  1867,  2010,
    1868,  2010,  1011,  1871,  1878,  1879,  1873,  1289,  1291,   574,
    1293,  1875,    28,    29,  1877,    28,    29,    32,   574,  1881,
      32,   413,  1886,   550,    38,   574,  1887,    38,    28,    29,
     737,  1888,   574,    32,  1889,  1353,  1355,  1357,  1359,  1890,
      38,  1901,  1902,  1911,   469,   469,  1905,  1906,    43,    44,
    1677,    43,    44,  1956,  -231,   671,  1960,   671,   700,  1963,
     565,  1967,  1968,    52,    43,    44,  1964,  1972,  1996,  1975,
    2052,   566,  1697,  1977,  2011,  2023,    52,  2016,   415,   415,
    2025,  2026,  2042,   574,    28,    29,  2043,     1,  2044,    32,
     467,   467,   467,   467,   467,   831,    38,   831,  2027,   574,
    2028,  2030,  2031,  2053,   467,   467,   467,   467,  2036,  1003,
      57,  2037,     2,  2038,  2039,  1124,  2124,  2125,  2045,   552,
      43,    44,  2059,   671,   648,  2060,   648,  2075,  2084,  2091,
     675,  2095,   675,   403,  2096,  2097,  1144,  1628,  2098,  2099,
    2100,  2106,  2111,  2112,  2117,  2136,  2128,  2145,  2140,  2143,
     373,   114,  2010,  2149,  2010,  1003,  2150,  1003,    28,    29,
    2151,  2160,  2161,    32,  2162,  2164,  2165,  1499,  1994,    57,
      38,  2167,   467,   467,  1003,  1786,   151,  1409,   415,  1124,
    1124,   949,   683,  1124,  1454,  1124,   950,    54,  1124,   684,
    1332,   951,   648,    57,    43,    44,    57,  1489,   675,   952,
      28,    29,   255,    57,  1764,    32,   955,  1628,   272,  1144,
      57,    57,    38,  1144,   886,  1231,  2010,  2010,   721,  2010,
    1979,  2010,  1237,    57,   290,  1124,   382,  1003,  2113,   279,
     878,   664,   281,   293,   616,   283,    43,    44,    57,  1955,
       0,     0,     0,     0,     0,     0,   407,     0,  1144,  1628,
    2134,   407,   255,  1124,   407,     0,     0,     0,     0,  2010,
    2010,     0,  2010,     0,   255,  1144,    57,   407,   255,   407,
     170,   407,     0,     0,     0,     0,     0,     0,  2010,   469,
      54,   469,   417,     0,     0,     0,     0,    54,    54,     0,
       0,     0,     0,     0,     0,  2010,   255,   255,     0,     0,
     450,   450,   538,   541,     0,   469,     0,   469,   407,     0,
       0,     0,   953,     0,     0,     0,  1772,     0,     0,     0,
       0,     0,   557,     0,     0,     0,   450,   450,   552,     0,
     552,    57,     0,     0,     0,     0,  2071,     0,  2074,   373,
       0,     0,     0,  1663,   552,   552,     0,     0,   450,   450,
       0,   373,     0,   450,   450,     0,     0,   450,   450,     0,
       0,    18,    19,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   255,     0,    38,   255,   255,
     644,     1,     0,     0,   623,     0,   670,     0,    57,     0,
       0,    28,    29,     0,     0,   450,    32,   450,    57,   255,
      57,    43,    44,    38,  2110,   694,     2,     0,   568,  1003,
       0,     0,     0,     0,   853,   121,     0,     0,   255,     0,
       0,     0,     0,     0,   255,   415,     0,    43,    44,     0,
       0,     0,     0,     0,   407,     0,     0,  -457,     0,  1139,
    -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,     0,    38,   170,     0,     0,     0,     0,
     469,   469,   469,   469,   469,   170,     0,    54,     0,     0,
       0,     0,     0,     0,   469,   469,   469,   469,    43,    44,
       0,    57,     0,     0,     0,   786,   407,    51,   407,     0,
      52,     0,     0,     0,     0,     0,     0,     0,     0,   928,
       0,     0,     0,   373,   373,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1897,     0,  1900,    57,     0,
     407,    57,    18,    19,   255,    57,     0,     0,     0,     0,
     880,  1908,  1910,     0,    57,   255,     0,    57,   552,     0,
    -457,  -457,   469,   469,     0,     0,   894,   552,     0,   900,
    -457,     0,    28,    29,     0,     0,   417,    32,     0,  -457,
    -457,  -457,  -457,  -457,    38,   407,   407,     0,     0,     0,
      57,    57,     0,     0,     0,     0,     0,   407,     0,     0,
       0,     0,   959,     0,     0,     0,     0,   255,    43,    44,
       0,   407,   407,     0,     0,   568,     0,     0,   574,     0,
    1609,     1,     0,   552,   552,     0,     0,     0,     0,     0,
      57,     0,     0,   407,   407,     0,    28,    29,   407,   407,
       0,    32,   407,   407,     0,     0,     2,   415,    38,   644,
       0,   415,     0,     0,     0,   121,   255,     0,     0,   255,
       0,     0,  1020,     0,     0,  1022,     0,   568,     0,     0,
       0,     0,    43,    44,     0,    57,     0,     0,     0,     0,
     407,    51,   407,     0,   860,    57,   407,     0,     0,  1004,
       0,     0,    28,    29,     0,   566,     0,    32,     0,     0,
       0,     0,     0,     0,    38,    57,     0,   568,    57,     0,
      57,     0,    57,     0,   415,     0,     0,     0,   574,    57,
       0,     0,     0,     0,     0,   969,     0,  -640,    43,    44,
       0,     0,   415,     0,     0,   373,     0,    51,     0,     0,
      52,  1460,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,  -640,   373,     0,  2034,    38,     0,  -955,     0,
       0,  -640,  -640,     0,  2041,    18,    19,   698,   698,     0,
     698,   698,     0,     0,     0,   698,   698,   698,   698,     0,
      43,    44,     0,   644,   644,   644,   644,     0,     0,   670,
     670,   670,   670,   854,     0,    28,    29,     0,  -640,  -640,
      32,     0,     0,  -640,   373,     0,     0,    38,     0,     0,
    -640,   255,   255,   255,     0,   450,    57,  1186,  1188,  1189,
    2049,  2051,   407,     0,     0,    18,    19,     0,     0,     0,
     255,    43,    44,     0,  -640,  -640,     0,   255,   255,   407,
      51,   255,   255,  -640,     0,     0,  -640,     0,   407,   970,
       0,   968,  -640,   737,     0,    28,    29,     0,     0,    57,
      32,     0,   644,     0,     0,     0,     0,    38,     0,   644,
    1204,     0,   644,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   450,   450,     0,     0,   450,   450,
     450,    43,    44,   170,     0,     0,     0,     0,     0,  1195,
      51,     0,  1004,     0,     0,     0,     0,     0,   415,  1004,
       0,     0,  1004,   415,   698,   698,   698,   698,   698,   698,
     698,   698,    28,    29,     0,  1195,     0,    32,     0,     0,
       0,     0,     0,     0,    38,     0,   574,     0,     0,     0,
       0,     0,     0,  1290,  1292,     0,  1294,     0,     0,     0,
       0,     0,    57,     0,     0,    57,    57,    57,    43,    44,
       0,     0,     0,     0,     0,     0,     0,    51,     0,     0,
    1206,  1354,  1356,  1358,  1360,     0,     0,   415,   407,   407,
      57,     0,     0,     0,     0,   920,   923,    57,    88,     0,
       0,     0,     0,     0,     0,   255,    57,     0,     0,     0,
       0,     0,     0,    57,     0,     0,   255,   698,   407,     0,
      57,   920,   923,     0,   417,   417,     0,     0,   415,     0,
       0,     0,     0,     0,     0,   450,   450,     0,     0,   568,
       0,     0,     0,   920,   923,     0,     0,     0,   920,   923,
     131,     0,   920,   923,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    57,     0,   737,     0,     0,     0,     0,
       0,    57,     0,     0,   568,     0,     0,     0,     0,     0,
     164,   182,   195,   568,     0,     0,     0,    57,   407,   233,
     568,    88,     0,     0,     0,    57,    57,   568,    88,    88,
     407,     0,     0,     0,  1924,  1928,    57,  1934,  1938,     0,
       0,     0,  1942,  1946,  1950,  1954,     0,     0,     0,     1,
       0,     0,     0,  1506,   417,     0,   644,   255,   644,   195,
     400,   402,   404,   405,   255,     0,     0,     0,     0,   473,
       0,   415,   473,     0,     2,     0,     0,     0,   568,     0,
       0,     0,     0,   192,   193,   473,     0,   473,     0,   473,
       0,     0,     0,     0,   568,     0,  1004,  1004,  1004,   407,
     407,     0,     0,   407,   407,   407,     0,     0,     0,     0,
       0,   533,   402,   404,     0,     0,     0,     0,     0,     1,
      28,    29,     0,    57,   407,    32,     0,     0,    57,     0,
       0,     0,    38,     0,    57,     0,     0,     0,     0,     0,
      57,     0,     0,     0,     2,     0,    57,     0,   563,   578,
       0,     0,     0,   121,     0,     0,    43,    44,     0,     0,
       0,     0,     0,     0,   644,    51,     0,   644,    52,     0,
     644,     0,     0,   670,     0,     0,   670,     0,     0,     0,
       0,   700,   700,   700,   700,   700,   700,   700,   700,     0,
      28,    29,     0,   614,     0,    32,     0,     0,     0,     0,
       0,     0,    38,     0,  1004,     0,   182,     0,   644,     0,
       0,     0,     0,     0,   670,     0,   689,     0,    88,     0,
       0,     0,   644,   644,   644,   644,    43,    44,   670,   670,
     670,   670,     0,     0,     0,    51,     0,     0,    52,     0,
     407,   407,     0,     0,     0,   255,     0,   255,     0,     0,
       0,  1647,     0,  1648,    57,     0,     0,     0,     0,     0,
       0,    57,     0,     0,   255,   407,    57,     0,     0,     0,
       0,     0,     0,     0,   700,   450,   450,     0,     0,     0,
       0,     0,     0,     0,   255,     0,     0,     0,     0,     0,
       0,   255,     0,     0,     0,     0,     0,     0,     0,     0,
    1780,   417,  -629,     0,     0,     0,    66,     0,   255,   644,
       0,     0,     0,     0,     0,   255,   644,     0,     0,   255,
     644,     0,   400,   402,   404,     0,     0,  -629,     0,   450,
     450,  1658,     0,     0,     0,     0,  -629,  -629,  1660,     0,
       0,     0,     0,     0,     0,     0,   861,     0,  1004,  1004,
       0,     0,     0,   473,     0,  1004,  1004,     0,     0,  1004,
    1004,     0,     0,     0,   131,     0,     0,     0,     0,     0,
       0,     0,     0,  -629,  -629,     0,     0,     0,  -629,     0,
       0,     0,     0,     0,     0,  -629,     0,     0,     0,    66,
       0,     0,     0,   473,   473,     0,     0,     0,   935,    66,
       0,     0,   946,     0,     0,   473,    66,    66,     0,  -629,
    -629,     0,     0,     0,   164,     0,     0,     0,  -629,   473,
     473,  -629,     0,     0,  1781,     0,   968,  -629,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   861,     0,
       0,   473,   473,     0,     0,     0,   473,   473,   482,     0,
     473,   473,   126,     0,   195,   195,   195,     0,     0,     0,
     482,    57,    57,     0,   482,     0,     0,     0,     0,     0,
       0,     0,   195,   195,     0,     0,   451,   407,     0,   451,
       0,   407,     0,   180,   126,     0,     0,     0,   473,     0,
     473,   232,   451,  1050,   451,  1059,   451,     0,     0,   920,
     923,     0,     0,   920,   923,     0,     0,     0,     0,     0,
     404,     0,     0,   417,     0,     0,     0,   417,     0,     0,
       0,     0,     0,   644,     0,     0,    57,   484,     0,     0,
       0,   126,   126,     0,     0,     0,     0,     0,     0,   484,
       0,     0,     0,   484,   407,     0,     0,     0,     0,     0,
     407,   407,     0,     0,     0,    57,    57,    57,    57,     0,
       0,     0,     0,  1004,   450,     0,   450,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     417,     0,     0,   531,    66,  1796,     0,     0,     0,     0,
     450,     0,   450,     0,    66,     0,    66,     0,   417,     0,
       0,     0,     0,   568,   407,   407,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1184,     0,
       0,     0,     0,     0,   689,     0,    57,     0,     0,     0,
     595,     0,     0,   597,     0,     0,     0,     0,     0,     0,
     255,   644,     0,     0,     0,  1214,   644,   644,     0,  1214,
     612,     0,   670,   670,   620,   624,     0,     0,     0,   644,
       0,     0,   644,     0,   670,   126,     0,   861,   921,   924,
     644,     0,     0,     0,     0,     0,     0,     0,   180,     0,
    1004,  1004,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   715,   921,   924,     0,     0,     0,   715,
       0,     0,     0,   568,     0,    57,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   921,   924,     0,     0,
       0,   921,   924,     0,     0,   921,   924,     0,     0,     0,
     482,     0,     0,     0,     0,     0,     0,     0,   407,     0,
      57,   482,     0,   407,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   450,   450,   450,   450,   450,
       0,    57,     0,     0,     0,     0,     0,     0,     0,   450,
     450,   450,   450,     0,   417,     0,     0,     0,     0,   417,
       0,     0,     0,     0,     0,     0,     0,     0,  1414,     0,
       0,     0,     0,   482,   126,   861,     0,     0,     0,     0,
     451,   451,   164,   861,  1428,     0,    76,   407,     0,   873,
       0,  1435,   954,     0,   861,     0,  1443,     0,     0,     0,
     873,     0,   255,   644,     0,     0,   451,   451,     0,     0,
       0,     0,     0,     0,     0,     0,   126,   450,   450,   407,
       0,   407,     0,   417,    57,     0,     0,     0,   451,   451,
       0,     0,     0,   451,   451,   131,     0,   451,   451,     0,
       0,     0,  1004,  1004,  1472,   407,     0,   407,     0,   578,
       0,     0,   964,     0,   232,   131,     0,     0,     0,     0,
       0,     0,     0,     0,   417,   935,     0,     0,     0,    76,
       0,     0,     0,     0,     0,   451,     0,   451,   473,    76,
     644,   644,   670,     0,     0,     0,    76,    76,   402,     0,
       0,     0,     0,     0,     0,   621,   625,     0,     0,     0,
       0,   568,   620,     0,     0,   620,   126,   126,   126,     0,
    1008,     0,   935,   597,     0,   657,     0,     0,     0,     0,
       0,     0,     0,     0,   126,   126,   126,     0,   485,     0,
     920,   923,     0,   343,     0,     0,     0,     0,     0,     0,
     485,   407,     0,   407,   485,   126,     0,   473,   473,     0,
       0,   473,   473,   473,     0,     0,     0,   414,  1546,   400,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   404,
       0,     0,     0,     0,     0,     0,     0,   417,     0,     0,
       0,     0,    66,     0,   920,   923,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     407,   407,   407,   407,   407,    57,     0,    57,     0,   414,
       0,     0,     0,     0,   407,   407,   407,   407,     0,   620,
     624,  1168,  1172,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     670,     0,   670,     0,     0,     0,     0,     0,     0,   620,
       0,     0,     0,     0,    76,     0,     0,     0,     0,     0,
     232,     0,     0,     0,    76,     0,    76,     0,     0,     0,
       0,     0,  1212,  1222,     0,   892,  1212,  1222,   473,   473,
       0,     0,   407,   407,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    82,     0,     0,     0,     0,     0,   861,
       0,     0,   861,     0,  1672,     0,     0,     0,   670,     0,
       0,   414,     0,     0,     0,   703,   706,   708,     0,     0,
     414,   302,  1214,     1,   303,   106,   414,     0,     0,  1214,
       0,     0,   729,     0,     0,     0,     0,     0,   343,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,   482,     0,   621,     0,   414,   621,     0,     0,     0,
     414,     0,   482,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    82,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    82,     0,     0,     0,
       0,   308,   309,    82,    82,     0,     0,   414,     0,   414,
     485,     0,     0,     0,     0,   312,     0,     0,     0,     0,
       0,   485,   921,   924,     0,     0,   921,   924,   313,     0,
       0,     0,   314,   315,   316,   317,   318,   319,   320,     0,
    1426,   414,     0,     0,     0,   486,     0,     0,   322,     0,
       0,  1426,   705,     0,   775,     0,     0,   486,     0,     0,
       0,   486,   326,   327,     0,     0,     0,     0,   126,     0,
       0,     0,     0,   485,     0,     0,  1126,     0,     0,     0,
       0,     0,     0,     0,     0,   451,     0,     0,     0,     0,
     621,   625,  1169,  1173,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   126,   657,   657,
     657,   657,     0,     0,     0,     0,     0,     0,     0,     0,
     621,     0,  1743,     0,   595,     0,   597,   126,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1752,     0,     0,
       0,     0,     0,     0,   400,     0,     0,     0,     0,     0,
     414,   195,     0,     0,   451,   451,     0,     0,   451,   451,
     451,     0,     0,     0,     0,     0,     0,     0,     0,   612,
       0,     0,  1765,     0,   578,     0,     0,     0,     0,     0,
       0,    82,     0,     0,     0,     0,     0,   414,     0,     0,
       0,    82,     0,    82,     0,     0,     0,     0,   473,   473,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     920,   923,     0,   920,   923,     0,     0,     0,     0,   343,
       0,     0,     0,     0,   920,   923,   920,   923,     0,     0,
     126,   126,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   414,     0,     0,
       0,     0,   473,   473,     0,   400,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1584,   578,     0,  1590,     0,     0,     0,
       0,     0,    76,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   920,   923,     0,   451,   451,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1631,     0,     0,     0,   414,     0,
       0,     0,     0,     0,     0,     0,     0,   874,  1168,  1172,
    1168,  1172,     0,     0,     0,   358,     0,     0,   874,     0,
       0,     0,     0,     0,   343,     0,  1136,     0,   343,     0,
       0,   620,     0,   620,     0,     0,     0,     0,     0,     0,
       0,     0,   595,   414,   597,     0,     0,     0,     0,   612,
     414,     0,     0,   414,     0,     0,     0,     0,     0,     0,
    1883,     0,     0,     0,  1474,     0,     0,     0,     0,  1689,
     874,     0,     0,   343,     0,     0,  1689,     0,     0,   414,
     414,   414,   414,   414,   414,   414,     0,     0,   414,   414,
       0,   414,   414,   414,   414,   414,   414,   414,   414,     0,
     343,     0,     0,     0,     0,     0,     0,     0,   343,   414,
     414,   414,   414,   414,   414,   414,   414,   414,   414,   414,
     414,   414,   414,   414,   414,   414,   414,     0,   343,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   485,     0,     0,     0,     0,     0,     0,  1264,     0,
       0,     0,   485,   921,   924,     0,     0,     0,     0,   414,
     414,     0,     0,     0,     0,     0,     0,   473,     0,   473,
       0,     0,   861,   651,     0,     0,     0,     0,     0,     0,
       0,  1296,  1300,  1304,  1308,  1312,     0,     0,  1321,     0,
       0,   361,     0,   473,  1264,   473,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   404,     0,   921,   924,  1362,
    1366,  1370,  1374,  1378,  1585,   416,  1321,  1591,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   414,     0,   414,
     748,     0,   657,     0,     0,   657,     0,     0,     0,     0,
       0,     0,     0,     0,  1126,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1632,     0,     0,     0,   414,
       0,     0,     0,     0,     0,     0,     0,     0,   414,  1169,
    1173,  1169,  1173,   657,     0,     0,     0,   416,     0,    82,
       0,     0,     0,     0,     0,   451,   451,   657,   657,   657,
     657,     0,   621,     0,   621,     0,     0,   414,     0,   414,
       0,     0,     0,   126,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   451,
     451,     0,     0,     0,     0,     0,     0,  -457,  -457,  -457,
    -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,   473,   473,
     473,   473,   473,     0,     0,   414,     0,     0,     0,     0,
       0,     0,   473,   473,   473,   473,     0,     0,     0,   416,
       0,     0,     0,   704,   707,   709,     0,     0,   416,     0,
       0,     0,     0,     0,   416,     0,     0,     0,     0,     0,
     730,     0,     0,     0,     0,   414,   361,   126,     0,     0,
       0,     0,     0,     0,     0,     0,   414,     0,     0,     0,
       0,     0,     0,   416,     0,     0,     0,     0,   416,     0,
       0,     0,  1824,  1828,     0,     0,     0,     0,  1015,     0,
     473,   473,   343,   343,     0,  1584,     0,     0,  1590,     0,
       0,     0,     0,     0,     0,     0,  1631,     0,   874,     0,
    -457,  -457,     0,     0,     0,   416,     0,   416,     0,   874,
    -457,     0,     0,     0,     0,  -457,  -457,  -457,     0,  -457,
    -457,  -457,  -457,  -457,     0,     0,     0,     0,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,   416,
       0,  1100,     0,     0,     0,     0,   414,     0,   414,     0,
       0,     0,  1607,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     414,     0,     0,     0,   651,     0,     0,     0,     0,     0,
    1634,     0,     0,     0,     0,     0,   414,  1641,     0,     0,
     414,     0,   307,   343,     0,     0,     0,   414,   308,   309,
     310,   414,     0,     0,     0,     0,   651,   651,   651,   651,
       0,   311,   312,     0,   451,     0,   451,     0,     0,     0,
       0,  1321,     0,  1321,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
     451,     0,   451,     0,     0,   322,   323,     0,   416,   324,
    1158,   325,     0,     0,  1159,     0,     0,     0,     0,   326,
     327,  1720,   328,   329,   330,   331,  1232,     0,     0,     0,
    1236,     0,     0,   921,   924,     0,   921,   924,     0,     0,
       0,     0,     0,     0,     0,   416,     0,   921,   924,   921,
     924,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   748,     0,     0,     0,     0,     0,     0,   126,     0,
       0,     0,     0,     0,     0,  1273,     0,   361,     0,     0,
       0,     0,     0,     0,     0,     0,  1824,  1828,     0,     0,
       0,     0,     0,  1825,  1829,     0,     0,     0,     0,     0,
       0,     0,  1327,     0,     0,   416,   625,   748,     0,   625,
    1338,   657,   657,     0,     0,   921,   924,   625,   414,     0,
       0,  1126,   414,  1126,   657,     0,     0,   657,     0,     0,
    1391,     0,     0,     0,     0,   657,     0,     0,  1126,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   414,   451,   451,   451,   451,   451,
       0,     0,     0,     0,   414,     0,   416,     0,     0,   451,
     451,   451,   451,     0,     0,   414,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   361,   414,     0,   343,   361,     0,     0,     0,
     414,     0,   414,     0,     0,     0,     0,     0,     0,     0,
       0,   416,     0,     0,     0,     0,     0,     0,   416,   414,
       0,   416,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   451,   451,     0,
       0,   361,     0,     0,     0,     0,     0,   416,   416,   416,
     416,   416,   416,   416,     0,     0,   416,   416,     0,   416,
     416,   416,   416,   416,   416,   416,   416,     0,   361,     0,
       0,     0,   414,     0,     0,     0,   361,   416,   416,   416,
     416,   416,   416,   416,   416,   416,   416,   416,   416,   416,
     416,   416,   416,   416,   416,     0,   361,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1015,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   416,   416,     0,
       0,     0,     0,     0,     0,     0,     0,   625,   625,     0,
       0,     0,     0,     0,     0,  1126,  1126,  1126,  1126,     0,
       0,  1126,     0,     0,     0,   657,   657,     0,  1126,     0,
    1126,     0,     0,     0,     0,     0,     0,     0,     0,   414,
       0,     0,  1126,   414,   414,   414,     0,     0,     0,     0,
       0,     0,     0,     0,   343,     0,     0,     0,     0,   414,
     414,     0,     0,     0,     0,   416,   343,   416,     0,     0,
     651,     0,     0,   651,     0,     0,     0,     0,     0,     0,
       0,     0,   651,     0,   414,   414,     0,   414,   414,     0,
       0,     0,   414,   414,   414,   414,     0,   416,     0,     0,
       0,     0,     0,     0,  1626,  1627,   416,     0,   414,     0,
       0,   651,     0,  1273,     0,     0,     0,  1639,     0,     0,
    1338,     0,  1643,     0,   414,   651,   651,   651,   651,     0,
       0,     0,     0,     0,     0,   416,     0,   416,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   414,
       0,     0,     0,   397,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1917,     0,     0,
       0,     0,  1920,  1922,  1926,  1930,  1932,  1936,     0,     0,
    1126,  1940,  1944,  1948,  1952,     0,     0,     0,     0,  1126,
       0,  1126,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   416,   397,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1713,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   343,   343,
       0,   414,   414,   414,   414,   414,   414,   414,   414,     0,
       0,     0,   576,   416,  1126,  1126,     0,     0,  1126,     0,
    1126,     0,     0,  1126,   416,     0,     0,  1126,     0,     0,
       0,     0,   414,   414,     0,     0,     0,     0,     0,     0,
       0,     0,   414,     0,     0,     0,     0,     0,     0,     0,
     361,   361,     0,     0,     0,     0,     0,     0,     0,     0,
    1126,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   686,
       0,     0,     0,     0,     0,     0,     0,     0,  1126,     0,
       0,     0,     0,     0,   414,     0,     0,     0,   414,   414,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   416,     0,   416,     0,     0,     0,
       0,     0,     0,   468,     0,     0,   468,     0,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   416,   468,
       0,   468,     0,   468,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   416,     2,     0,     0,   416,     0,
       0,   361,     0,     0,     0,   416,     0,     0,     0,   416,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   850,     0,     0,     0,     0,
       0,   855,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     343,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,   343,   314,
     315,   316,   317,   318,   319,   320,   321,  1015,     0,     0,
       0,     0,     0,     0,     0,   322,   323,     0,     0,   324,
    1158,   325,   649,     0,  1725,     0,     0,     0,  1726,   326,
     327,   932,   328,   329,   330,   331,     0,     0,  1015,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   343,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   651,
     651,  1007,     0,     0,  1012,     0,   416,     0,     0,   651,
     416,   651,   651,     0,     0,   651,     0,  1007,     0,     0,
       0,     0,     0,   651,     0,     0,   651,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   576,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   576,   416,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   416,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   416,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   416,     0,   361,     0,     0,     0,     0,   416,     0,
     416,     0,     0,     0,     0,     0,  1015,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   416,  1915,     0,
       0,     0,     0,     0,     0,     0,     0,   468,   468,     0,
    1713,     0,     0,     0,     0,  1639,     0,     0,  1643,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   468,   468,     0,     0,     0,     0,     0,
       0,   686,     0,     0,     0,     0,     0,   686,     0,     0,
     416,     0,     0,     0,     0,   468,   468,     0,     0,     0,
     468,   468,     0,     0,   468,   468,     0,     0,     0,     0,
       0,  1001,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1015,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1015,     0,     0,     0,     0,     0,     0,
       0,     0,   468,     0,   468,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   651,   651,   651,   651,     0,     0,   651,
       0,     0,     0,   651,   651,     0,   651,     0,   651,     0,
       0,     0,     0,     0,     0,     0,     0,   416,     0,     0,
     651,   416,   416,   416,     0,     0,     0,     0,     0,     0,
    2018,  2019,   361,     0,     0,     0,     0,   416,   416,     0,
       0,     0,     0,   649,   361,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   416,   416,     0,   416,   416,     0,     0,     0,
     416,   416,   416,   416,     0,   649,   649,   649,   649,     0,
       0,     0,     0,     0,     0,     0,   416,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   686,     0,     0,
       0,     0,   416,     0,  1434,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   416,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1015,     0,     0,     0,  1127,     0,     0,     0,
       0,     0,     0,     0,  1001,     0,     0,  1470,   651,     0,
       0,  1001,   576,     0,  1001,     0,     0,   651,     0,   651,
       0,     0,     0,     0,     0,     0,     0,     0,   932,     0,
    1166,  1170,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   361,   361,     0,   416,
     416,   416,   416,   416,   416,   416,   416,     0,     0,  1015,
       0,     0,   651,   651,     0,   932,   651,     0,   651,     0,
       0,   651,     0,     0,     0,   651,     0,     0,     0,     0,
     416,   416,  2115,     0,   302,     0,     1,   303,   106,   304,
     416,   305,   306,     0,     0,     0,     0,     0,     0,     0,
    1015,     0,     0,     0,     0,     0,     0,     0,   651,     0,
       0,     2,   397,     0,     0,     0,     0,     0,     0,     0,
     121,   576,     0,   576,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   651,     0,     0,     0,
       0,     0,   416,     0,     0,     0,   416,   416,   307,     0,
       0,  2158,     0,     0,   308,   309,   310,    28,    29,   468,
     468,     0,    32,     0,     0,     0,     0,   311,   312,    38,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      74,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,    43,    44,     0,     0,     0,     0,     0,
       0,   322,   887,     0,     0,   888,   731,   325,     0,     0,
       0,     0,     0,     0,     0,   326,   327,     0,   328,   329,
     330,   331,   468,     0,     0,     0,     0,     0,     0,     0,
       0,   117,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   686,     0,   686,     0,     0,  1001,     0,
    1001,     0,     0,     0,     0,     0,     0,     0,   361,     0,
       0,     0,     0,   178,     0,     0,     0,     0,     0,     0,
       0,   221,   261,    74,     0,     0,   361,     0,     0,     0,
      74,    74,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   468,   468,     0,     0,   468,   468,   468,   384,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   221,     0,     0,     0,     0,     0,     0,
       0,   418,   483,     0,     0,     0,     0,   361,     0,     0,
       0,     0,     0,     0,   483,     0,     0,     0,   483,     0,
       0,   510,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1001,     0,     0,   649,
       0,     0,   649,     0,     0,     0,   261,   261,     0,     0,
       0,   649,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     649,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   649,   649,   649,   649,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   468,   468,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   611,     0,     0,   261,   261,
     261,     0,   302,     0,     1,   303,   106,   304,   178,   305,
     306,     0,  1582,     0,     0,  1588,     0,     0,   178,   261,
      74,     0,     0,     0,  1605,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,     0,   714,     0,
     686,     0,     0,     0,   714,     0,     0,  1755,     0,     0,
       0,  1001,     0,  1629,   736,     0,     0,     0,  1001,     0,
       0,     0,  1001,     0,     0,     0,   307,  1166,  1170,  1166,
    1170,     0,   308,   309,   310,  1434,     0,   576,     0,     0,
    1768,     0,     0,  1012,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     0,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,   832,     0,     0,   322,
     323,     0,     0,   324,  1158,   325,     0,     0,  1159,     0,
       0,     0,     0,   326,   327,  1730,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,   573,     0,
       0,     0,     0,     0,   872,   867,   510,     0,   850,     0,
     876,     0,     0,     0,     0,   872,   576,     0,     0,   883,
       0,  -870,   890,     0,  -870,  -870,  -870,   576,  -870,  -870,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     573,     0,     0,     0,     0,     0,   941,     0,     0,     0,
       0,     0,   957,     0,     0,     0,     0,   963,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -870,     0,     0,     0,     0,
     573,  -870,  -870,  -870,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -870,     0,     0,     0,     0,   261,
       0,     0,     0,     0,     0,  1001,   261,     0,  -870,   261,
       0,     0,  -870,  -870,  -870,  -870,  -870,  -870,  -870,  -870,
       0,     0,     0,     0,     0,     0,     0,     0,  -870,     0,
     221,     0,   468,   468,  -870,  -870,     0,  -870,  -870,  -870,
     221,     0,  -870,  -870,     0,  -870,  -870,  -870,  -870,     0,
       0,  1001,     0,  1001,     0,     0,     0,     0,     0,     0,
     221,     0,     0,   221,     0,   221,     0,   221,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   468,   468,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   686,   686,     0,  1962,     0,     0,  1140,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1001,     0,     0,     0,     0,   649,   649,
       0,     0,     0,   261,   261,   261,   261,     0,   649,     0,
     649,   649,     0,     0,   649,     0,     0,     0,     0,     0,
       0,     0,   649,     0,     0,   649,     0,     0,     0,  1007,
       0,   261,   261,   261,     0,     0,   178,     0,     0,     0,
       0,     0,  1198,     0,     0,     0,     0,     0,     0,     0,
     261,     0,     0,     0,     0,     0,     0,  1211,  1221,   736,
       0,  1211,  1221,     0,     0,     0,     0,     0,  1198,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1241,
       0,     0,   261,     0,     0,     0,     0,     0,     0,   261,
       0,     0,   261,     0,     0,     0,     0,     0,     0,     0,
       0,  1822,  1826,     0,     0,     0,     0,     0,     0,     0,
       0,  1835,     0,  1838,  1582,     0,     0,  1588,     0,     0,
       0,     0,     0,     0,     0,  1629,     0,     0,  1851,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   656,     0,     0,     0,
       0,     0,   573,     0,     0,  1001,     0,     0,     0,     0,
     832,   832,   832,     0,     0,     0,     0,     0,     0,     0,
       0,   468,     0,   468,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   418,   418,   221,     0,   573,    91,     0,
       0,     0,     0,     0,     0,  1425,   573,   468,     0,   468,
     734,     0,     0,   573,     0,     0,  1425,   117,   736,     0,
     573,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   649,   649,   649,   649,     0,     0,   649,     0,
       0,     0,   649,   649,     0,   649,     0,   649,     0,   120,
     132,     0,     0,     0,     0,     0,     0,     0,     0,   649,
       0,     0,     0,     0,     0,     0,     0,     0,  1466,     0,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   183,   132,     0,     0,     0,   230,   573,     0,     0,
       0,    91,     0,   418,     0,     0,     0,     0,    91,    91,
     510,   510,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   510,     0,     0,     0,     0,   385,     0,     0,     0,
       0,     0,   734,     0,     0,     0,   261,   261,   261,   394,
       0,     0,     0,     0,   611,  1989,  1990,  1991,  1992,     0,
       0,  1993,     0,     0,     0,  1822,  1826,     0,  1835,     0,
    1838,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2002,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   468,   468,   468,   468,   468,     0,     0,     0,
     530,     0,     0,     0,     0,     0,   468,   468,   468,   468,
       0,     0,     0,   546,     0,     0,     0,   649,   221,     0,
       0,     0,     0,   221,     0,     0,   649,     0,   649,  1566,
       0,     0,     0,     0,     0,  1566,     0,     0,     0,   580,
       0,   221,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   261,     0,     0,   261,     0,     0,
     261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1140,   468,   468,     0,     0,     0,     0,
       0,   649,   649,   132,     0,   649,     0,   649,     0,     0,
     649,     0,     0,     0,   649,     0,   183,     0,   261,     0,
       0,     0,     0,     0,     0,     0,   690,     0,    91,     0,
       0,     0,   261,   261,   261,   261,     0,     0,     0,     0,
    1993,     0,     0,     0,     0,     0,     0,   649,     0,  2070,
       0,  2073,     0,     0,     0,   261,     0,   261,     0,     0,
       0,     0,  1138,     0,     0,     0,     0,     0,     0,     0,
       0,  1662,     0,     0,   611,   649,     0,     0,  1156,     0,
     418,   221,     0,     0,     0,     0,     0,     0,     0,   656,
     656,   656,   656,     0,  1688,     0,     0,     0,     0,     0,
       0,  1688,     0,     0,  2102,  2103,     0,     0,  2070,     0,
    2073,     0,     0,  2107,     0,     0,     0,  2109,   261,   261,
       0,     0,     0,     0,     0,   261,   261,     0,   734,   261,
     261,   734,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2109,     0,     0,     0,   734,     0,   862,     0,     0,  1156,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   746,     0,     0,  2147,     0,
       0,     0,     0,     0,     0,     0,  1271,     0,     0,     0,
       0,     0,   774,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   936,     0,
       0,   944,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1324,     0,     0,     0,     0,     0,
       0,     0,  1336,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   862,     0,
       0,     0,  1388,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   132,   132,   132,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   832,   832,     0,     0,
       0,     0,   132,   132,     0,     0,     0,     0,     0,     0,
       0,     0,   418,     0,     0,     0,   418,     0,     0,     0,
       0,     0,     0,  1051,     0,  1060,     0,     0,     0,     0,
       0,     0,     0,     0,   734,     0,  1062,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   261,     0,     0,   573,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   546,     0,     0,     0,     0,     0,     0,   418,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     418,  1784,   418,  1784,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -457,     0,  -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,
    -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,
    -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1182,     0,     0,
       0,     0,     0,     0,   690,     0,   573,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     261,   261,     0,     0,  -457,  1216,   261,   261,     0,  1216,
    -457,  -457,  -457,     0,     0,     0,     0,     0,     0,   261,
       0,     0,   261,  -457,  -457,     0,     0,   862,     0,     0,
     261,     0,     0,     0,  1135,     0,     0,  -457,     0,     0,
       0,  -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,     0,
       0,     0,     0,     0,     0,     0,     0,  -457,  -457,  -457,
    -457,  -457,  -457,  -457,  -457,  -457,  -457,     0,     0,  -457,
     510,  -457,  -457,     0,  -457,  -457,  -457,  -457,  -457,  -457,
    -457,  -457,  -457,   656,     0,     0,   656,  1593,  1595,     0,
    1598,     0,     0,     0,     0,     0,     0,     0,  1608,     0,
       0,     0,     0,   418,     0,   221,  1617,     0,   418,     0,
       0,     0,     0,  1156,     0,     0,     0,     0,     0,     0,
       0,   736,     0,     0,   656,     0,     0,     0,     0,     0,
       0,  1156,     0,     0,     0,     0,  1156,     0,   656,   656,
     656,   656,     0,     0,     0,     0,     0,     0,   862,  1415,
       0,     0,     0,     0,     0,   862,   746,     0,     0,     0,
       0,     0,     0,   862,  1429,     0,     0,  1652,     0,  1656,
    1272,  1436,   418,     0,   862,   120,   132,     0,     0,     0,
       0,     0,   261,   261,     0,     0,     0,     0,     0,  1295,
    1299,  1303,  1307,  1311,     0,     0,  1320,  1326,     0,     0,
       0,  1156,   746,     0,   573,  1337,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   132,     0,  1361,  1365,  1369,
    1373,  1377,     0,  1469,  1320,  1390,     0,     0,     0,   580,
     260,     0,     0,     0,     0,   132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   936,  1156,     0,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     261,   261,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   936,     0,     0,     0,     0,     0,  1156,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1156,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,   736,   260,   260,   418,     0,     0,     0,
       0,   311,   312,     0,     0,     0,     0,     0,  1547,     0,
       0,     0,     0,     0,     0,   313,     0,  1555,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,   572,
       0,     0,  1156,     0,     0,   322,   323,     0,     0,   324,
    1158,   325,     0,     0,  1725,     0,     0,     0,  1733,   326,
     327,     0,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
     418,     0,   418,   610,     0,     0,   260,   260,   260,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,   260,     0,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,   713,     0,     0,     0,
       0,     0,   713,     0,     0,     0,     0,     0,     0,     0,
       0,    27,   735,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,   862,
       0,     0,   862,     0,  1216,    40,     0,     0,     0,     0,
       0,     0,  1679,     0,     0,    43,    44,    45,    46,    47,
      48,     0,  1216,     0,    51,     0,     0,   860,     0,  1216,
    1135,     0,     0,     0,     0,     0,     0,     0,   566,     0,
       0,    86,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1272,     0,
       0,     0,     0,     0,     0,  1337,   572,     0,     0,     0,
       0,     0,   656,   656,     0,     0,     0,     0,  1156,     0,
    1156,     0,     0,  1156,   656,     0,     0,     0,     0,  1842,
    1845,     0,  1847,    86,     0,     0,     0,     0,     0,  1320,
       0,  1320,  1156,     0,  1858,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   572,     0,
       0,     0,     0,     0,    86,    86,     0,     0,     0,     0,
       0,     0,    86,     0,    86,     0,  1156,     0,     0,     0,
    1156,    86,    86,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   572,     0,
    1712,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    86,    86,     0,     0,     0,   260,     0,     0,
       0,     0,     0,     0,   260,     0,     0,   260,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1744,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    86,     0,  1751,     0,     0,     0,
     263,     0,     0,  1754,     0,     0,     0,     0,     0,     0,
       0,   394,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1436,     0,   580,     0,     0,     0,     0,     0,
       0,    86,     0,     0,    86,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1156,     0,    86,     0,     0,     0,
       0,   260,   260,   260,   260,     0,     0,     0,     0,    86,
       0,     0,   656,  1156,   263,   263,     0,     0,     0,    86,
    1156,    86,     0,     0,  1847,     0,  2000,     0,     0,   260,
     260,   260,     0,     0,  1808,  2006,     0,     0,     0,     0,
    1197,     0,     0,     0,     0,     0,     0,     0,   260,   575,
       0,     0,     0,     0,   580,  1210,  1220,   735,     0,  1210,
    1220,     0,     0,     0,     0,     0,  1197,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1240,     0,   734,
     260,     0,     0,     0,     0,     0,     0,   260,     0,     0,
     260,     0,     0,   613,     0,     0,   263,   263,   263,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   263,     0,     0,
       0,     0,     0,     0,     0,    86,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   716,     0,     0,     0,
       0,     0,   716,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   738,     0,     0,     0,     0,     0,     0,     0,
    1884,     0,     0,     0,     0,     0,     0,    86,     0,     0,
     572,     0,  2062,  2065,     0,  1156,     0,  1156,     0,     0,
     656,  1156,   656,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   572,     0,     0,     0,     0,
       0,     0,     0,     0,   572,     0,     0,     0,     0,     0,
       0,   572,     0,     0,     0,     0,   735,     0,   572,     0,
       0,  1415,     0,     0,     0,     0,     0,  1156,     0,     0,
    1156,     0,     0,     0,     0,     0,   575,     0,   656,     0,
       0,     0,     0,  1754,     0,     0,     0,    86,    86,    86,
       0,    86,     0,     0,    86,     0,     0,     0,     0,     0,
       0,     0,   862,     0,     0,    86,    86,    86,     0,   572,
       0,     0,     0,     0,  1156,     0,     0,     0,     0,     0,
       0,     0,   733,     0,     0,   572,    86,     0,   575,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1712,     0,     0,     0,     0,
    1919,  1921,  1925,  1929,  1931,  1935,     0,     0,     0,  1939,
    1943,  1947,  1951,     0,   260,   260,   260,     0,   575,     0,
       0,     0,   610,     0,   551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   263,     0,     0,
       0,     0,     0,     0,   263,     0,     0,   263,     0,     0,
       0,  1679,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   733,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    86,     0,     0,     0,     0,     0,    86,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   260,     0,     0,   260,   699,     0,   260,     0,
       0,     0,     0,     0,     0,   551,     0,     0,     0,     0,
       0,   551,     0,     0,     0,     0,     0,     0,  1921,  1925,
    1931,  1935,  1939,  1943,  1947,  1951,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   260,     0,     0,     0,
       0,   263,   263,   263,   263,     0,     0,     0,     0,     0,
     260,   260,   260,   260,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   263,
     263,   263,     0,   260,     0,   260,     0,     0,     0,     0,
    1200,     0,   551,     0,   551,     0,     0,     0,   263,  1661,
       0,     0,   610,     0,     0,  1213,  1223,   738,     0,  1213,
    1223,     0,     0,     0,     0,     0,  1200,     0,     0,     0,
       0,     0,  1687,     0,     0,     0,     0,  1243,     0,  1687,
     263,     0,     0,     0,     0,     0,     0,   263,     0,     0,
     263,     0,     0,     0,     0,     0,   260,   260,     0,     0,
       0,     0,     0,   260,   260,     0,     0,   260,   260,     0,
       0,     0,     0,     0,  1137,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    86,
    1155,     0,     0,     0,  1160,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    86,     0,
     575,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     733,     0,     0,   733,     0,  1002,     0,     0,    86,     0,
       0,     0,     0,     0,     0,     0,     0,  1225,     0,     0,
       0,     0,     0,     0,     0,   575,   733,     0,     0,     0,
       0,  1155,  1160,     0,   575,     0,     0,     0,     0,     0,
       0,   575,   551,     0,     0,     0,   738,     0,   575,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1270,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1322,     0,     0,   575,
       0,     2,   551,     0,  1335,     0,     0,     0,     0,     0,
       0,    86,    86,     0,     0,   575,     0,     0,     0,     0,
       0,     0,     0,     0,  1386,     0,     0,     0,     0,     0,
       0,   260,     0,     0,   572,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,   263,   263,   263,   311,   312,     0,
       0,     0,   613,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,  1190,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,   733,     0,     0,     0,
       0,   322,   323,     0,     0,   324,  1158,   325,  1623,     0,
    1159,     0,     0,     0,     0,   326,   327,     0,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,  1002,     0,
       0,     0,     0,     0,     0,  1002,     0,     0,  1002,     0,
       0,     0,     0,     0,   572,     0,     0,     0,     0,     0,
       0,     0,     0,    86,     0,    86,     0,     0,   260,   260,
       0,     0,     0,     0,   260,   260,     1,     0,     0,     0,
       0,     0,   263,     0,     0,   263,     0,   260,   263,     0,
     260,     0,     0,     0,     0,     0,     0,     0,   260,     0,
       0,     2,     0,     0,     0,     0,     0,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
     263,   263,   263,   263,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,   263,     0,   263,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,  1664,
       0,     0,   613,    43,    44,    45,    46,    47,    48,   735,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1690,     0,     0,     0,     0,     0,     0,  1690,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1002,     0,   551,     0,   263,   263,     0,  1592,
    1594,     0,  1597,   263,   263,     0,     0,   263,   263,     0,
    1137,     0,     0,  1160,     0,     0,     0,     0,  1616,     0,
     260,   260,     0,     0,     0,  1155,  1160,     0,     0,     0,
       0,     0,   302,   551,     1,   303,   106,   304,     0,   305,
     306,     0,   572,  1155,  1160,     0,     0,     0,  1155,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,  1002,     0,  1002,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1650,
       0,  1654,     0,  1115,  1116,  1117,   629,  1118,  1119,  1120,
    1121,   634,   635,  1122,    86,     0,   307,     0,   260,   260,
       0,     0,   308,   309,   310,     0,     0,     0,     0,     0,
      32,     0,     0,  1155,     0,   311,   312,  1123,     0,   639,
     640,   641,     0,     0,     0,     0,     0,     0,     0,   313,
     551,     0,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,     0,     0,     0,     0,     0,     0,   322,
     323,     0,     0,   324,     0,   325,   642,     0,  1155,  1160,
     254,   735,   643,   326,   327,     0,   328,   329,   330,   331,
    1002,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   551,     0,     0,     0,     0,   122,     0,     0,     0,
       0,     0,     0,   139,     0,     0,     0,     0,    86,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1155,   263,  1160,     0,   575,     0,   162,   171,   194,     0,
       0,     0,     0,  1155,  1160,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   122,     0,     0,     0,
       0,     0,     0,   551,  1155,     0,  1160,     0,     0,     0,
       0,     0,   493,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   551,     0,     0,   524,     0,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
       0,     0,     0,     0,   575,  1002,     0,   122,     0,     0,
       0,     0,  1002,     0,     0,     0,  1002,     2,   263,   263,
       0,     0,     0,     0,   263,   263,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,     0,   263,     0,     0,
     263,     0,     0,     0,   162,   569,     0,     0,   263,     0,
       0,     0,     0,     0,   307,     0,     0,     0,     0,     0,
     308,   309,   310,     0,     0,     0,   125,   125,     0,     0,
       0,     0,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,   171,
       0,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,   171,     0,     0,     0,     0,   322,   323,     0,
       0,   324,   569,   325,   125,   125,  2056,  2057,  1014,     0,
       0,   326,   327,     0,   328,   329,   330,   331,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   738,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    86,
    1818,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,     0,     0,     0,
    1155,  1160,  1155,  1160,     0,  1155,  1837,     0,     0,     0,
       0,  1592,  1844,     0,  1616,  1854,  1160,     1,   303,   106,
     304,     0,   305,   306,  1155,  1160,  1616,     0,     0,     0,
     263,   263,     0,     0,   577,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,   122,  1002,
       0,     0,   575,     0,   122,     0,     0,     0,  1155,   551,
    1160,     0,  1155,     0,  1160,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   307,
       0,     0,     0,     0,     0,   308,   309,   310,     0,     0,
     569,   125,     0,     0,     0,  1002,     0,  1002,   311,   312,
       0,   687,     0,     0,     0,     0,     0,     0,   263,   263,
       0,     0,   313,     0,  1002,     0,   314,   315,   316,   317,
     318,   319,   320,   321,   569,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   324,  1158,   325,  1855,
     162,  1159,     0,     0,     0,     0,   326,   327,     0,   328,
     329,   330,   331,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1002,     0,     0,
       0,   738,     0,     0,     0,     0,     0,     0,     0,     0,
     122,   122,   122,     0,   122,     0,     0,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   122,   122,
     122,     0,     0,     0,     0,     0,     0,   125,     0,     0,
       0,     0,     0,   577,     0,     0,     0,   524,     0,   569,
       0,   122,     0,     0,     0,     0,  1155,     0,     0,     0,
       0,     0,     0,     0,   122,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1155,     0,     0,     0,   125,
    1160,     0,  1155,  1837,     0,  1160,  1616,     0,  1999,     0,
    2001,     0,     0,     0,     0,     0,  1160,  2005,   551,     0,
     551,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   577,   551,   551,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1923,
    1927,   733,  1933,  1937,     0,     0,     0,  1941,  1945,  1949,
    1953,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1178,     0,     0,   125,
     125,   125,     0,   125,   122,     0,   687,     0,     0,  1002,
     569,     0,     0,     0,     0,     0,     0,   125,   125,   125,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,     0,
     577,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   577,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2061,  2064,     0,  1155,  1160,  1155,
       0,     0,     0,  1155,  1837,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   258,
       0,     0,     0,     0,     0,     0,  1923,  1927,  1933,  1937,
    1941,  1945,  1949,  1953,     0,     0,     0,     0,     0,  1155,
    1160,     0,  1155,  1837,     0,     0,     0,  2108,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   551,     0,
       0,     0,     0,     0,     0,     0,     0,   551,     0,   481,
       0,     0,     0,   687,     0,     0,     0,     0,     0,   687,
       0,   481,     0,     0,   259,   481,  1155,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   162,     0,
     569,     0,     0,     0,     0,     0,     0,   569,     0,     0,
       0,     0,   569,   258,   258,     0,     0,     0,     0,  1002,
       0,     0,     0,   551,   551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,     0,   571,     0,
     259,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     122,     0,     0,     0,     0,   569,     0,     0,     0,     0,
       0,   122,     0,     0,     0,     0,     0,     0,   259,   259,
       0,   569,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   609,     0,     0,   258,   258,   258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   258,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   569,     0,
       0,     0,     0,     0,     0,   712,     0,     0,     0,     0,
       0,   712,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,   577,
     259,   259,   259,     0,     0,     0,   577,     0,     0,     0,
       0,   125,     0,     0,   122,   122,     0,     0,     0,     0,
       0,   259,     0,     0,   122,     0,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,     0,     0,     0,     0,     0,   259,     0,     0,     0,
     125,     0,     0,     0,     0,     0,     0,     0,     0,   577,
       0,     0,     0,     0,   577,     0,     0,     0,     0,     0,
     125,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     577,     0,     0,     0,     0,   571,     0,     0,     0,     0,
       0,   871,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   871,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   264,   577,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   571,     0,     0,
       0,     0,     0,     0,     0,     0,   122,     0,   122,     0,
       0,     0,     0,     0,   962,     0,   259,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
       0,     0,     0,   125,   125,     0,   264,   571,     0,     0,
       0,     0,     0,   577,     0,   577,     0,     0,   264,     0,
       0,     0,   264,     0,     0,     0,   258,     0,     0,     0,
       0,     1,     0,   258,     0,     0,   258,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   259,
     264,   264,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,     0,     0,    27,     0,   424,     0,   259,     0,
       0,   259,    28,    29,     0,     0,   425,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,   264,
       0,     0,   264,   264,   264,   687,     0,   687,    43,    44,
      45,    46,    47,    48,   206,   207,     0,    51,     0,     0,
     947,     0,   437,   264,     0,     0,     0,     0,     0,   948,
     258,   258,   258,   258,     0,     0,     0,     0,     0,     0,
       0,     0,   264,     0,     0,     0,     0,     0,   264,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   258,   258,
     258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   258,     0,     0,
       0,     0,     0,     0,  1209,  1219,     0,     0,  1209,  1219,
       0,     0,     0,   122,     0,   259,   259,   259,   259,     0,
     122,     0,     0,     0,     0,     0,     0,   122,     0,   258,
       0,     0,     0,     0,     0,     0,   258,     0,     0,   258,
       0,     0,     0,   259,   259,   259,     0,     0,   122,     0,
     569,     0,     0,   122,     0,     0,   122,     0,     0,     0,
       0,     0,   259,     0,     0,     0,     0,     0,     0,   259,
     259,     0,     0,   259,   259,     0,     0,     0,   264,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   264,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,   259,     0,     0,   259,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   571,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   122,     0,     0,     0,     0,     0,     0,     0,   122,
       0,   264,     0,     0,     0,     0,     0,     0,     0,     0,
     569,     0,     0,     0,   571,     0,     0,     0,     0,     0,
       0,     0,  1424,   571,     0,     0,     0,     0,     0,     0,
     571,     0,   577,  1424,     0,     0,     0,   571,     0,   577,
       0,     0,     0,   264,     0,     0,   125,     0,     0,     0,
     264,     0,     0,   264,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   577,     0,   577,
       0,     0,   577,     0,     0,   577,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,   571,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   259,     0,
       0,     0,     0,     0,   571,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   258,   258,   258,     0,     0,     0,     0,
     125,   609,     0,     0,     0,     0,     0,     0,   577,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   577,
       0,     0,     0,     0,     0,     0,     0,   264,   264,   264,
     264,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,   122,     0,   122,     0,
       0,     0,     0,     0,     0,   264,   264,   264,   259,   259,
     259,     0,     0,     0,     0,     0,   259,     0,     0,     0,
       0,     0,     0,     0,   264,     0,     0,     0,     0,     0,
       0,   264,   264,     0,     0,   264,   264,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   258,   122,     0,   258,     0,   264,   258,     0,     0,
       0,     0,     0,   264,     0,     0,   264,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   258,
     258,   258,   258,     0,     0,     0,   259,     0,     0,   259,
       0,   302,   259,     1,   303,   106,   304,     0,   305,   306,
       0,     0,   258,     0,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,   609,     0,     0,   577,   577,     0,   577,     0,     0,
     259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1686,     0,     0,   259,   259,   259,   259,  1686,     0,
       0,     0,     0,     0,     0,   307,     0,     0,     0,   264,
       0,   308,   309,   310,     0,   258,   258,   259,     0,   259,
     264,     0,   258,   258,   311,   312,   258,   258,     0,     0,
       0,   125,     0,     0,     0,     0,   259,     0,   313,     0,
       0,     0,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,   259,     0,   322,   323,
       0,     0,   324,   259,   325,     0,     0,     0,     0,   742,
       0,     0,   326,   327,   743,   328,   329,   330,   331,     0,
     259,   259,     0,     0,     0,     0,     0,   259,   259,     0,
       0,   259,   259,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     264,   264,   264,     0,     0,     0,   754,     0,   264,     0,
       0,     0,   755,   756,   757,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -344,     0,     0,     0,     0,     0,     0,     0,  -344,
    -344,     0,     0,     0,  -344,     0,     0,     0,     0,     0,
    -344,  -344,  -344,     0,     0,     0,     0,     0,     0,     0,
     258,     0,     0,   571,     0,  -344,     0,     0,   264,     0,
       0,   264,     0,     0,   264,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,     0,  -344,  -344,  -344,   758,     0,     0,
    -344,  1528,  -344,  -344,     0,   759,     0,     0,   760,     0,
    -344,  -344,  -344,     0,  -344,  -344,  -344,  -344,  -344,     0,
       0,     0,   264,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   259,   264,   264,   264,   264,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   264,
       0,   264,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   571,     0,     0,     0,     0,   264,     0,
       0,     0,     0,     0,     0,     0,     0,   258,   258,     0,
       0,     0,     0,   258,   258,     0,     0,     0,   264,     0,
       0,     0,     0,     0,     0,   264,   258,     0,     0,   258,
       0,     0,     0,     0,     0,     0,     0,   258,     0,     0,
       0,     0,   264,   264,     0,     0,     0,     0,     0,   264,
     264,     0,     0,   264,   264,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   259,   259,     0,     0,     0,     0,   259,   259,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,     0,     0,   259,     0,     0,     0,     0,     0,
       0,  -457,   259,  -457,  -457,  -457,  -457,  -457,  -457,  -457,
    -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,
    -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -457,     0,     0,     0,     0,
       0,  -457,  -457,  -457,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -457,  -457,     0,     0,     0,   258,
     258,     0,     0,     0,     0,     0,     0,     0,  -457,     0,
       0,     0,  -457,  -457,  -457,  -457,  -457,  -457,  -457,  -457,
       0,   571,     0,     0,     0,     0,     0,     0,  -457,  -457,
    -457,  -457,  -457,  -457,  -457,     0,  -457,  -457,     0,     0,
    -457,     0,  -457,  -457,     0,  -457,  -457,  -457,  -457,  -457,
    -457,  -457,  -457,  -457,   199,     0,     1,     0,     0,     0,
       0,     0,     0,     0,   259,   259,     0,   264,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   258,   258,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
     564,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   205,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,   259,   259,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     0,    51,     0,     0,   565,  1046,     0,     0,     0,
       0,     0,     0,     0,   264,   264,   566,     0,     0,     0,
     264,   264,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   264,     0,     0,   264,     0,     0,     0,
       0,     0,  -344,   754,   264,  -344,  -344,  -344,  -344,   755,
     756,   757,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,     0,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,     0,     0,  -344,  -344,     0,
    -344,     0,     0,  -344,  -344,  -344,  -344,  -344,     0,     0,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,     0,  -344,     0,
    -344,  -344,  -344,     0,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,   758,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,   759,  -344,  -344,   760,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   264,   264,  -449,  1151,
       0,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,     0,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,     0,     0,  -449,  -449,     0,  -449,     0,     0,  -449,
    -449,  -449,  -449,  -449,   264,   264,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,     0,  -449,     0,  -449,  -449,  -449,     0,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -304,   302,     0,     1,   303,   106,   304,  -304,
     305,   306,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
       2,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,     0,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,     0,     0,   307,  -304,     0,
    -304,     0,     0,   308,   309,   310,  -304,  -304,     0,     0,
    -304,  -304,  -304,  -304,  -304,  -304,   311,   312,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,     0,  -304,     0,
     313,  -304,  -304,     0,   314,   315,   316,   317,   318,   319,
     320,   321,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
     322,   323,  -304,  -304,   324,  1238,   325,  -304,  -304,  1154,
    -304,  -304,  -304,  -304,   326,   327,  -304,   328,   329,   330,
     331,  -304,  -304,  -304,  -304,  -304,  -305,   302,     0,     1,
     303,   106,   304,  -305,   305,   306,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,     2,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,
       0,   307,  -305,     0,  -305,     0,     0,   308,   309,   310,
    -305,  -305,     0,     0,  -305,  -305,  -305,  -305,  -305,  -305,
     311,   312,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,     0,  -305,     0,   313,  -305,  -305,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,   322,   323,  -305,  -305,   324,  1158,
     325,  -305,  -305,  1159,  -305,  -305,  -305,  -305,   326,   327,
    -305,   328,   329,   330,   331,  -305,  -305,  -305,  -305,  -305,
    -564,   302,     0,     1,   303,   106,   304,  -564,   305,   306,
    -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,
    -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,     2,  -564,
    -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,
    -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,
    -564,     0,  -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,
    -564,  -564,  -564,     0,     0,   307,  -564,     0,  -564,     0,
       0,   308,   309,   310,  -564,  -564,     0,     0,  -564,  -564,
    -564,  -564,  -564,  -564,   311,   312,  -564,  -564,  -564,  -564,
    -564,  -564,  -564,  -564,  -564,     0,  -564,     0,   313,  -564,
    -564,     0,   314,   315,   316,   317,   318,   319,   320,   321,
    -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,   322,   323,
    -564,  -564,   324,  -564,   325,  -564,  -564,  -564,  -564,   742,
    -564,  1319,   326,   327,  -564,   328,   329,   330,   331,  -564,
    -564,  -564,  -564,  -564,  -565,   302,     0,     1,   303,   106,
     304,  -565,   305,   306,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,     2,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,     0,  -565,  -565,  -565,  -565,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,     0,     0,   307,
    -565,     0,  -565,     0,     0,   308,   309,   310,  -565,  -565,
       0,     0,  -565,  -565,  -565,  -565,  -565,  -565,   311,   312,
    -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,  -565,     0,
    -565,     0,   313,  -565,  -565,     0,   314,   315,   316,   317,
     318,   319,   320,   321,  -565,  -565,  -565,  -565,  -565,  -565,
    -565,  -565,   322,   323,  -565,  -565,   324,  -565,   325,  -565,
    -565,  -565,  -565,   742,  -565,  1385,   326,   327,  -565,   328,
     329,   330,   331,  -565,  -565,  -565,  -565,  -565,  -575,   302,
       0,     1,   303,   106,   304,  -575,   305,   306,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,     2,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,     0,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,     0,     0,   307,  -575,     0,  -575,     0,     0,   308,
     309,   310,  -575,  -575,     0,     0,  -575,  -575,  -575,  -575,
    -575,  -575,   311,   312,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,     0,  -575,     0,   313,  -575,  -575,     0,
     314,   315,   316,   317,   318,   319,   320,   321,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,   322,   323,  -575,  -575,
     324,  -575,   325,  -575,  -575,  1154,  -575,  -575,  -575,  -575,
     326,   327,  -575,   328,   329,   330,   331,  -575,  -575,  -575,
    -575,  -575,  -577,   302,     0,     1,   303,   106,   304,  -577,
     305,   306,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       2,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,     0,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,     0,     0,   307,  -577,     0,
    -577,     0,     0,   308,   309,   310,  -577,  -577,     0,     0,
    -577,  -577,  -577,  -577,  -577,  -577,   311,   312,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,  -577,     0,
     313,  -577,  -577,     0,   314,   315,   316,   317,   318,   319,
     320,   321,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
     322,   323,  -577,  -577,   324,  1158,   325,  -577,  -577,  1159,
    -577,  -577,  -577,  -577,   326,   327,  -577,   328,   329,   330,
     331,  -577,  -577,  -577,  -577,  -577,  -576,   302,     0,     1,
     303,   106,   304,  -576,   305,   306,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,     2,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,     0,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,     0,
       0,   307,  -576,     0,  -576,     0,     0,   308,   309,   310,
    -576,  -576,     0,     0,  -576,  -576,  -576,  -576,  -576,  -576,
     311,   312,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,     0,  -576,     0,   313,  -576,  -576,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,   322,   323,  -576,  -576,   324,  -576,
     325,  -576,  -576,  1154,  -576,  -576,  -576,  -576,   326,   327,
    -576,   328,   329,   330,   331,  -576,  -576,  -576,  -576,  -576,
    -338,  1880,     0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,     0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,     0,     0,  -338,  -338,     0,  -338,     0,
       0,  -338,  -338,  -338,  -338,  -338,     0,     0,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,     0,  -338,     0,  -338,  -338,
    -338,     0,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -342,  1916,     0,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,     0,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,     0,     0,  -342,
    -342,     0,  -342,     0,     0,  -342,  -342,  -342,  -342,  -342,
       0,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,     0,
    -342,     0,  -342,  -342,  -342,     0,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -332,   302,
       0,     1,   303,   106,   304,  -332,   305,   306,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,     2,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,     0,
    -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,     0,     0,   307,  -332,     0,  -332,     0,     0,   308,
     309,   310,  -332,  -332,     0,     0,  -332,  -332,  -332,  -332,
    -332,  -332,   311,   312,  -332,  -332,  -332,  -332,  -332,  -332,
    -332,  -332,  -332,     0,  -332,     0,   313,  -332,  -332,     0,
     314,   315,   316,   317,   318,   319,   320,   321,  -332,  -332,
    -332,  -332,  -332,  -332,  -332,  -332,   322,   323,  -332,  -332,
     324,  -332,   325,  -332,  -332,  -332,  -332,   742,  -332,  -332,
     326,   327,  -332,   328,   329,   330,   331,  -332,  -332,  -332,
    -332,  -332,  -542,   302,     0,     1,   303,   106,   304,  -542,
     305,   306,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,
    -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,
       2,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,
    -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,
    -542,  -542,  -542,     0,  -542,  -542,  -542,  -542,  -542,  -542,
    -542,  -542,  -542,  -542,  -542,     0,     0,   307,  -542,     0,
    -542,     0,     0,   308,   309,   310,  -542,  -542,     0,     0,
    -542,  -542,  -542,  -542,  -542,  -542,   311,   312,  -542,  -542,
    -542,  -542,  -542,  -542,  -542,  -542,  -542,     0,  -542,     0,
     313,  -542,  -542,     0,   314,   315,   316,   317,   318,   319,
     320,   321,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,
     322,   323,  -542,  -542,   324,  -542,   325,  -542,  -542,  -542,
    -542,   742,  -542,  -542,   326,   327,  -542,   328,   329,   330,
     331,  -542,  -542,  -542,  -542,  -542,  -550,   302,     0,     1,
     303,   106,   304,  -550,   305,   306,  -550,  -550,  -550,  -550,
    -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,
    -550,  -550,  -550,  -550,     2,  -550,  -550,  -550,  -550,  -550,
    -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,
    -550,  -550,  -550,  -550,  -550,  -550,  -550,     0,  -550,  -550,
    -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,     0,
       0,   307,  -550,     0,  -550,     0,     0,   308,   309,   310,
    -550,  -550,     0,     0,  -550,  -550,  -550,  -550,  -550,  -550,
     311,   312,  -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,
    -550,     0,  -550,     0,   313,  -550,  -550,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -550,  -550,  -550,  -550,
    -550,  -550,  -550,  -550,   322,   323,  -550,  -550,   324,  -550,
     325,  -550,  -550,  -550,  -550,   742,  -550,  -550,   326,   327,
    -550,   328,   329,   330,   331,  -550,  -550,  -550,  -550,  -550,
    -543,   302,     0,     1,   303,   106,   304,  -543,   305,   306,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,     2,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,     0,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,     0,     0,   307,  -543,     0,  -543,     0,
       0,   308,   309,   310,  -543,  -543,     0,     0,  -543,  -543,
    -543,  -543,  -543,  -543,   311,   312,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,     0,  -543,     0,   313,  -543,
    -543,     0,   314,   315,   316,   317,   318,   319,   320,   321,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,   322,   323,
    -543,  -543,   324,  -543,   325,  -543,  -543,  -543,  -543,   742,
    -543,  -543,   326,   327,  -543,   328,   329,   330,   331,  -543,
    -543,  -543,  -543,  -543,  -551,   302,     0,     1,   303,   106,
     304,  -551,   305,   306,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,     2,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,     0,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,     0,     0,   307,
    -551,     0,  -551,     0,     0,   308,   309,   310,  -551,  -551,
       0,     0,  -551,  -551,  -551,  -551,  -551,  -551,   311,   312,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,     0,
    -551,     0,   313,  -551,  -551,     0,   314,   315,   316,   317,
     318,   319,   320,   321,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,   322,   323,  -551,  -551,   324,  -551,   325,  -551,
    -551,  -551,  -551,   742,  -551,  -551,   326,   327,  -551,   328,
     329,   330,   331,  -551,  -551,  -551,  -551,  -551,  -544,   302,
       0,     1,   303,   106,   304,  -544,   305,   306,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,     2,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,     0,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,     0,     0,   307,  -544,     0,  -544,     0,     0,   308,
     309,   310,  -544,  -544,     0,     0,  -544,  -544,  -544,  -544,
    -544,  -544,   311,   312,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,     0,  -544,     0,   313,  -544,  -544,     0,
     314,   315,   316,   317,   318,   319,   320,   321,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,   322,   323,  -544,  -544,
     324,  -544,   325,  -544,  -544,  -544,  -544,   742,  -544,  -544,
     326,   327,  -544,   328,   329,   330,   331,  -544,  -544,  -544,
    -544,  -544,  -552,   302,     0,     1,   303,   106,   304,  -552,
     305,   306,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
       2,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,     0,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,     0,     0,   307,  -552,     0,
    -552,     0,     0,   308,   309,   310,  -552,  -552,     0,     0,
    -552,  -552,  -552,  -552,  -552,  -552,   311,   312,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,  -552,     0,
     313,  -552,  -552,     0,   314,   315,   316,   317,   318,   319,
     320,   321,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
     322,   323,  -552,  -552,   324,  -552,   325,  -552,  -552,  -552,
    -552,   742,  -552,  -552,   326,   327,  -552,   328,   329,   330,
     331,  -552,  -552,  -552,  -552,  -552,  -545,   302,     0,     1,
     303,   106,   304,  -545,   305,   306,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,     2,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,     0,  -545,  -545,
    -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,     0,
       0,   307,  -545,     0,  -545,     0,     0,   308,   309,   310,
    -545,  -545,     0,     0,  -545,  -545,  -545,  -545,  -545,  -545,
     311,   312,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
    -545,     0,  -545,     0,   313,  -545,  -545,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -545,  -545,  -545,  -545,
    -545,  -545,  -545,  -545,   322,   323,  -545,  -545,   324,  -545,
     325,  -545,  -545,  -545,  -545,   742,  -545,  -545,   326,   327,
    -545,   328,   329,   330,   331,  -545,  -545,  -545,  -545,  -545,
    -553,   302,     0,     1,   303,   106,   304,  -553,   305,   306,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,     2,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,     0,  -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,     0,     0,   307,  -553,     0,  -553,     0,
       0,   308,   309,   310,  -553,  -553,     0,     0,  -553,  -553,
    -553,  -553,  -553,  -553,   311,   312,  -553,  -553,  -553,  -553,
    -553,  -553,  -553,  -553,  -553,     0,  -553,     0,   313,  -553,
    -553,     0,   314,   315,   316,   317,   318,   319,   320,   321,
    -553,  -553,  -553,  -553,  -553,  -553,  -553,  -553,   322,   323,
    -553,  -553,   324,  -553,   325,  -553,  -553,  -553,  -553,   742,
    -553,  -553,   326,   327,  -553,   328,   329,   330,   331,  -553,
    -553,  -553,  -553,  -553,  -340,  2020,     0,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,     0,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,     0,     0,  -340,
    -340,     0,  -340,     0,     0,  -340,  -340,  -340,  -340,  -340,
       0,     0,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,     0,
    -340,     0,  -340,  -340,  -340,     0,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,
    -340,  -340,  -340,  -340,  -340,  -340,  -340,  -340,  -339,  2021,
       0,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,     0,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,     0,     0,  -339,  -339,     0,  -339,     0,     0,  -339,
    -339,  -339,  -339,  -339,     0,     0,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,     0,  -339,     0,  -339,  -339,  -339,     0,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -344,   754,     0,  -344,  -344,  -344,  -344,   755,
     756,   757,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,     0,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,     0,     0,  -344,  -344,     0,
    -344,     0,     0,  -344,  -344,  -344,  -344,  -344,     0,     0,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,     0,  -344,     0,
    -344,  -344,  -344,     0,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,   758,  -344,  -344,  -344,  -344,  -344,
    -344,  -344,  1149,  -344,  -344,   760,     0,  -344,  -344,  -344,
    -344,  -344,  -344,  -344,  -344,  -344,  -449,  1151,     0,  -449,
    -449,  -449,  -449,     0,  -449,  -449,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,     0,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,     0,
       0,  -449,  -449,     0,  -449,     0,     0,  -449,  -449,  -449,
    -449,  -449,     0,     0,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,     0,  -449,     0,  -449,  -449,  -449,     0,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,  -449,
    -449,  -449,  -449,  -449,  -449,  -449,     0,     0,  -449,  -449,
    -449,  -449,     0,  -449,  -449,  -449,  1152,  -449,  -449,  -449,
       0,  -449,  -449,  -449,  -449, -1089,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1089, -1089, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089, -1089,     0, -1089, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089,     0,     0,
     307, -1089,     0, -1089,     0,     0,   308,   309,   310, -1089,
   -1089,     0,     0, -1089, -1089, -1089, -1089, -1089, -1089,   311,
     312, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089,
       0, -1089,     0,   313, -1089, -1089,     0,   314,   315,   316,
     317,   318,   319,   320,   321, -1089, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089,   322,   323,     0,     0,   324,  1158,   325,
   -1089,     0,  1159, -1089, -1089,     0, -1089,   326,   327,     0,
     328,   329,   330,   331, -1233,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1233, -1233, -1233, -1233, -1233, -1233, -1233,
   -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233,
   -1233, -1233, -1233, -1233, -1233,     0, -1233, -1233, -1233, -1233,
   -1233, -1233, -1233, -1233, -1233, -1233, -1233,     0,     0,   307,
   -1233,     0, -1233,     0,     0,   308,   309,   310, -1233, -1233,
       0,     0, -1233, -1233, -1233, -1233, -1233, -1233,   311,   312,
   -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233,     0,
   -1233,     0,   313, -1233, -1233,     0,   314,   315,   316,   317,
     318,   319,   320,   321, -1233, -1233, -1233, -1233, -1233, -1233,
   -1233, -1233,   322,   323,     0,     0,   324,  1158,   325,  1623,
       0,  1159, -1233, -1233,     0, -1233,   326,   327,     0,   328,
     329,   330,   331, -1191,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191, -1191,     0, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191, -1191, -1191, -1191,     0,     0,   307, -1191,
       0, -1191,     0,     0,   308,   309,   310, -1191, -1191,     0,
       0, -1191, -1191, -1191, -1191, -1191, -1191,   311,   312, -1191,
   -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,     0, -1191,
       0,   313, -1191, -1191,     0,   314,   315,   316,   317,   318,
     319,   320,   321, -1191, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191,   322,   323,     0,     0,   324,  1831,   325, -1191,     0,
    1159, -1191, -1191,     0, -1191,   326,   327,     0,   328,   329,
     330,   331, -1222,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
   -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
   -1222, -1222, -1222,     0,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,     0,     0,   307, -1222,     0,
   -1222,     0,     0,   308,   309,   310, -1222, -1222,     0,     0,
   -1222,    32, -1222, -1222, -1222, -1222,   311,   312,  1123, -1222,
     639,   640,   641, -1222, -1222, -1222, -1222,     0, -1222,     0,
     313, -1222, -1222,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44, -1222, -1222, -1222, -1222, -1222, -1222,
     322,   323,     0,     0,   324,  1158,   325,   642,     0,  1159,
   -1222,   254,     0,   643,   326,   327,     0,   328,   329,   330,
     331,  -576,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,     0,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,     0,     0,   307,  -576,     0,  -576,
       0,     0,   308,   309,   310,  -576,  -576,     0,     0,  -576,
    -576,  -576,  -576,  -576,  -576,   311,   312,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,     0,  -576,     0,   313,
    -576,  -576,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,   322,
     323,     0,     0,   324,  -576,   325,  1153,     0,  1154,  -576,
    -576,     0,  -576,   326,   327,     0,   328,   329,   330,   331,
   -1214,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1214,
   -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214,
   -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214,
   -1214,     0, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214,
   -1214, -1214, -1214,     0,     0,   307, -1214,     0, -1214,     0,
       0,   308,   309,   310, -1214, -1214,     0,     0, -1214, -1214,
   -1214, -1214, -1214, -1214,   311,   312, -1214, -1214, -1214, -1214,
   -1214, -1214, -1214, -1214, -1214,     0, -1214,     0,   313, -1214,
   -1214,     0,   314,   315,   316,   317,   318,   319,   320,   321,
   -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214,   322,   323,
       0,     0,   324,  2066,   325, -1214,     0,  1154, -1214, -1214,
       0, -1214,   326,   327,     0,   328,   329,   330,   331, -1215,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
       0, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215,     0,     0,   307, -1215,     0, -1215,     0,     0,
     308,   309,   310, -1215, -1215,     0,     0, -1215, -1215, -1215,
   -1215, -1215, -1215,   311,   312, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215,     0, -1215,     0,   313, -1215, -1215,
       0,   314,   315,   316,   317,   318,   319,   320,   321, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215,   322,   323,     0,
       0,   324,  1158,   325,  2067,     0,  1159, -1215, -1215,     0,
   -1215,   326,   327,     0,   328,   329,   330,   331, -1209,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1209, -1209, -1209,
   -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209,
   -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209,     0,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,     0,     0,   307, -1209,     0, -1209,     0,     0,   308,
     309,   310, -1209, -1209,     0,     0, -1209,    32, -1209, -1209,
   -1209, -1209,   311,   312,  1123, -1209,   639,   640,   641, -1209,
   -1209, -1209, -1209,     0, -1209,     0,   313, -1209, -1209,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
   -1209, -1209, -1209, -1209, -1209, -1209,   322,   323,     0,     0,
     324,  1158,   325,   642,     0,  1159, -1209,   254,     0,   643,
     326,   327,     0,   328,   329,   330,   331, -1157,   617,     0,
   -1157, -1157, -1157, -1157,     0, -1157, -1157,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1157, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,     0, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
       0,     0, -1157, -1157,     0, -1157,     0,     0, -1157, -1157,
   -1157, -1157, -1157,     0,     0, -1157, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
   -1157, -1157,     0, -1157,     0, -1157, -1157, -1157,     0, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157,     0,     0, -1157,
       0, -1157,   618,     0, -1157, -1157, -1157,     0, -1157, -1157,
   -1157,     0, -1157, -1157, -1157, -1157, -1180,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,     0,
       0,   307,   246,     0, -1180,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1180,    32, -1180, -1180, -1180, -1180,
     311,   637,   638,   248,   639,   640,   641, -1180, -1180, -1180,
   -1180,     0, -1180,     0,   313, -1180,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,     0,     0,   324,     0,
     325,   642,     0, -1180, -1180,   254,     0,   643,   326,   327,
       0,   328,   329,   330,   331, -1158,   617,     0, -1158, -1158,
   -1158, -1158,     0, -1158, -1158,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1158, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158,     0, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158,     0,     0,
   -1158, -1158,     0, -1158,     0,     0, -1158, -1158, -1158, -1158,
   -1158,     0,     0, -1158, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158,
       0, -1158,     0, -1158, -1158, -1158,     0, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158, -1158,
   -1158, -1158, -1158, -1158, -1158,     0,     0, -1158,     0, -1158,
     618,     0, -1158, -1158, -1158,     0, -1158, -1158, -1158,     0,
   -1158, -1158, -1158, -1158, -1219,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1219, -1219, -1219, -1219, -1219, -1219, -1219,
   -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219,
   -1219, -1219, -1219, -1219, -1219,     0,  1115,  1116,  1117,   629,
    1118,  1119,  1120,  1121,   634,   635,  1122,     0,     0,   307,
   -1219,     0, -1219,     0,     0,   308,   309,   310, -1219, -1219,
       0,     0, -1219,    32, -1219, -1219, -1219, -1219,   311,   312,
    1123, -1219,   639,   640,   641, -1219, -1219, -1219, -1219,     0,
   -1219,     0,   313, -1219, -1219,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44, -1219, -1219, -1219, -1219,
   -1219, -1219,   322,   323,     0,     0,   324,     0,   325,   642,
       0, -1219, -1219,   254,     0,   643,   326,   327,     0,   328,
     329,   330,   331, -1235,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235,     0, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235,     0,     0,   307, -1235,
       0, -1235,     0,     0,   308,   309,   310, -1235, -1235,     0,
       0, -1235, -1235, -1235, -1235, -1235, -1235,   311,   312, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,     0, -1235,
       0,   313, -1235, -1235,     0,   314,   315,   316,   317,   318,
     319,   320,   321, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235,   322,   323,     0,     0,   324,     0,   325,  1134,     0,
   -1235, -1235,   742,     0, -1235,   326,   327,     0,   328,   329,
     330,   331, -1170,  1161,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,     0,     0,   307,   246,     0,
   -1170,     0,     0,   308,   309,   310,    28,    29,     0,     0,
   -1170,    32, -1170, -1170, -1170, -1170,   311,   637,   638,   248,
     639,   640,   641, -1170, -1170, -1170, -1170,     0, -1170,     0,
     313, -1170,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,   323,     0,     0,   324,     0,   325,   642,     0, -1170,
   -1170,   254,     0,   643,   326,   327,     0,   328,   329,   330,
     331, -1174,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,     0,     0,   307,   246,     0, -1174,
       0,     0,   308,   309,   310,    28,    29,     0,     0, -1174,
      32, -1174, -1174, -1174, -1174,   311,   637,   638,   248,   639,
     640,   641, -1174, -1174, -1174, -1174,     0, -1174,     0,   313,
   -1174,   249,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,   250,   251,   252,   253,   206,   207,   322,
     323,     0,     0,   324,     0,   325,   642,     0, -1174, -1174,
     254,     0,   643,   326,   327,     0,   328,   329,   330,   331,
   -1169,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,     0,     0,   307,   246,     0, -1169,     0,
       0,   308,   309,   310,    28,    29,     0,     0, -1169,    32,
   -1169, -1169, -1169, -1169,   311,   637,   638,   248,   639,   640,
     641, -1169, -1169, -1169, -1169,     0, -1169,     0,   313, -1169,
     249,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,   250,   251,   252,   253,   206,   207,   322,   323,
       0,     0,   324,     0,   325,   642,     0, -1169, -1169,   254,
       0,   643,   326,   327,     0,   328,   329,   330,   331, -1173,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,     0,     0,   307,   246,     0, -1173,     0,     0,
     308,   309,   310,    28,    29,     0,     0, -1173,    32, -1173,
   -1173, -1173, -1173,   311,   637,   638,   248,   639,   640,   641,
   -1173, -1173, -1173, -1173,     0, -1173,     0,   313, -1173,   249,
       0,   314,   315,   316,   317,   318,   319,   320,   321,    43,
      44,   250,   251,   252,   253,   206,   207,   322,   323,     0,
       0,   324,     0,   325,   642,     0, -1173, -1173,   254,     0,
     643,   326,   327,     0,   328,   329,   330,   331, -1076,  1174,
       0, -1076, -1076, -1076, -1076,     0, -1076, -1076,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,     0,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076,     0,     0, -1076, -1076,     0, -1076,     0,     0, -1076,
   -1076, -1076, -1076, -1076,     0,     0, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076,     0, -1076,     0, -1076, -1076, -1076,     0,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,
   -1076, -1076, -1076, -1076, -1076, -1076, -1076, -1076,     0,     0,
   -1076,     0, -1076, -1076,     0, -1076, -1076, -1076,     0, -1076,
   -1076, -1076,     0, -1076, -1076, -1076, -1076, -1078,  1175,     0,
   -1078, -1078, -1078, -1078,     0, -1078, -1078,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1078, -1078, -1078, -1078, -1078,
   -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078,
   -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078,     0, -1078,
   -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078,
       0,     0, -1078, -1078,     0, -1078,     0,     0, -1078, -1078,
   -1078, -1078, -1078,     0,     0, -1078, -1078, -1078, -1078, -1078,
   -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078,
   -1078, -1078,     0, -1078,     0, -1078, -1078, -1078,     0, -1078,
   -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078, -1078,
   -1078, -1078, -1078, -1078, -1078, -1078, -1078,     0,     0, -1078,
       0, -1078, -1078,     0, -1078, -1078, -1078,     0, -1078, -1078,
   -1078,     0, -1078, -1078, -1078, -1078, -1124,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,     0,
       0,   307,   246,     0, -1124,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1124,    32, -1124, -1124, -1124, -1124,
     311,   637,   638,   248,   639,   640,   641, -1124, -1124, -1124,
   -1124,     0, -1124,     0,   313, -1124,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,     0,     0,   324,     0,
     325,   642,     0, -1124, -1124,   254,     0,   643,   326,   327,
       0,   328,   329,   330,   331, -1126,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,     0,     0,
     307,   246,     0, -1126,     0,     0,   308,   309,   310,    28,
      29,     0,     0, -1126,    32, -1126, -1126, -1126, -1126,   311,
     637,   638,   248,   639,   640,   641, -1126, -1126, -1126, -1126,
       0, -1126,     0,   313, -1126,   249,     0,   314,   315,   316,
     317,   318,   319,   320,   321,    43,    44,   250,   251,   252,
     253,   206,   207,   322,   323,     0,     0,   324,     0,   325,
     642,     0, -1126, -1126,   254,     0,   643,   326,   327,     0,
     328,   329,   330,   331, -1171,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,     0,     0,   307,
     246,     0, -1171,     0,     0,   308,   309,   310,    28,    29,
       0,     0, -1171,    32, -1171, -1171, -1171, -1171,   311,   637,
     638,   248,   639,   640,   641, -1171, -1171, -1171, -1171,     0,
   -1171,     0,   313, -1171,   249,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,   250,   251,   252,   253,
     206,   207,   322,   323,     0,     0,   324,     0,   325,   642,
       0, -1171, -1171,   254,     0,   643,   326,   327,     0,   328,
     329,   330,   331, -1175,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,     0,     0,   307,   246,
       0, -1175,     0,     0,   308,   309,   310,    28,    29,     0,
       0, -1175,    32, -1175, -1175, -1175, -1175,   311,   637,   638,
     248,   639,   640,   641, -1175, -1175, -1175, -1175,     0, -1175,
       0,   313, -1175,   249,     0,   314,   315,   316,   317,   318,
     319,   320,   321,    43,    44,   250,   251,   252,   253,   206,
     207,   322,   323,     0,     0,   324,     0,   325,   642,     0,
   -1175, -1175,   254,     0,   643,   326,   327,     0,   328,   329,
     330,   331, -1172,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,     0,     0,   307,   246,     0,
   -1172,     0,     0,   308,   309,   310,    28,    29,     0,     0,
   -1172,    32, -1172, -1172, -1172, -1172,   311,   637,   638,   248,
     639,   640,   641, -1172, -1172, -1172, -1172,     0, -1172,     0,
     313, -1172,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,   323,     0,     0,   324,     0,   325,   642,     0, -1172,
   -1172,   254,     0,   643,   326,   327,     0,   328,   329,   330,
     331, -1176,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,     0,     0,   307,   246,     0, -1176,
       0,     0,   308,   309,   310,    28,    29,     0,     0, -1176,
      32, -1176, -1176, -1176, -1176,   311,   637,   638,   248,   639,
     640,   641, -1176, -1176, -1176, -1176,     0, -1176,     0,   313,
   -1176,   249,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,   250,   251,   252,   253,   206,   207,   322,
     323,     0,     0,   324,     0,   325,   642,     0, -1176, -1176,
     254,     0,   643,   326,   327,     0,   328,   329,   330,   331,
   -1167,   617,     0, -1167, -1167, -1167, -1167,     0, -1167, -1167,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1167, -1167,
   -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167,
   -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167,
   -1167,     0, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167,
   -1167, -1167, -1167,     0,     0, -1167, -1167,     0, -1167,     0,
       0, -1167, -1167, -1167, -1167, -1167,     0,     0, -1167, -1167,
   -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167,
   -1167, -1167, -1167, -1167, -1167,     0, -1167,     0, -1167, -1167,
   -1167,     0, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167,
   -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167,
       0,     0, -1167,     0, -1167,   618,     0, -1167, -1167, -1167,
       0, -1167, -1167, -1167,     0, -1167, -1167, -1167, -1167, -1168,
     617,     0, -1168, -1168, -1168, -1168,     0, -1168, -1168,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1168, -1168, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,
       0, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,
   -1168, -1168,     0,     0, -1168, -1168,     0, -1168,     0,     0,
   -1168, -1168, -1168, -1168, -1168,     0,     0, -1168, -1168, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,
   -1168, -1168, -1168, -1168,     0, -1168,     0, -1168, -1168, -1168,
       0, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,     0,
       0, -1168,     0, -1168,   618,     0, -1168, -1168, -1168,     0,
   -1168, -1168, -1168,     0, -1168, -1168, -1168, -1168, -1003,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,     0,
   -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003,     0,     0,   307, -1003,     0, -1003,     0,     0,   308,
     309,   310, -1003, -1003,     0,     0, -1003, -1003, -1003, -1003,
   -1003, -1003,   311,   312, -1003, -1003, -1003, -1003, -1003, -1003,
   -1003, -1003, -1003,     0, -1003,     0,   313, -1003, -1003,     0,
     314,   315,   316,   317,   318,   319,   320,   321, -1003, -1003,
   -1003, -1003, -1003, -1003, -1003, -1003,   322,   323,     0,     0,
     324,     0,   325, -1003,     0,  1800,  1801,  1014,     0, -1003,
     326,   327,     0,   328,   329,   330,   331, -1130,   617,     0,
   -1130, -1130, -1130, -1130,     0, -1130, -1130,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,     0, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,
       0,     0, -1130, -1130,     0, -1130,     0,     0, -1130, -1130,
   -1130, -1130, -1130,     0,     0, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130,     0, -1130,     0, -1130, -1130, -1130,     0, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130,     0,     0, -1130,
       0, -1130,   618,     0, -1130, -1130, -1130,     0, -1130, -1130,
   -1130,     0, -1130, -1130, -1130, -1130, -1131,   617,     0, -1131,
   -1131, -1131, -1131,     0, -1131, -1131,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131,     0, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,     0,
       0, -1131, -1131,     0, -1131,     0,     0, -1131, -1131, -1131,
   -1131, -1131,     0,     0, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131,     0, -1131,     0, -1131, -1131, -1131,     0, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131,     0,     0, -1131,     0,
   -1131,   618,     0, -1131, -1131, -1131,     0, -1131, -1131, -1131,
       0, -1131, -1131, -1131, -1131, -1127,   617,     0, -1127, -1127,
   -1127, -1127,     0, -1127, -1127,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1127, -1127, -1127, -1127, -1127, -1127, -1127,
   -1127, -1127, -1127, -1127, -1127, -1127, -1127, -1127, -1127, -1127,
   -1127, -1127, -1127, -1127, -1127, -1127,     0, -1127, -1127, -1127,
   -1127, -1127, -1127, -1127, -1127, -1127, -1127, -1127,     0,     0,
   -1127, -1127,     0, -1127,     0,     0, -1127, -1127, -1127, -1127,
   -1127,     0,     0, -1127, -1127, -1127, -1127, -1127, -1127, -1127,
   -1127, -1127, -1127, -1127, -1127, -1127, -1127, -1127, -1127, -1127,
       0, -1127,     0, -1127, -1127, -1127,     0, -1127, -1127, -1127,
   -1127, -1127, -1127, -1127, -1127, -1127, -1127, -1127, -1127, -1127,
   -1127, -1127, -1127, -1127, -1127,     0,     0, -1127,     0, -1127,
     618,     0, -1127, -1127, -1127,     0, -1127, -1127, -1127,     0,
   -1127, -1127, -1127, -1127, -1005,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1005, -1005, -1005, -1005, -1005, -1005, -1005,
   -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005,
   -1005, -1005, -1005, -1005, -1005,     0, -1005, -1005, -1005, -1005,
   -1005, -1005, -1005, -1005, -1005, -1005, -1005,     0,     0,   307,
   -1005,     0, -1005,     0,     0,   308,   309,   310, -1005, -1005,
       0,     0, -1005, -1005, -1005, -1005, -1005, -1005,   311,   312,
   -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005, -1005,     0,
   -1005,     0,   313, -1005, -1005,     0,   314,   315,   316,   317,
     318,   319,   320,   321, -1005, -1005, -1005, -1005, -1005, -1005,
   -1005, -1005,   322,   323,     0,     0,   324,     0,   325, -1005,
       0, -1005,  1980,  1014,     0, -1005,   326,   327,     0,   328,
     329,   330,   331,  -999,  1983,     0,  -999,  -999,  -999,  -999,
       0,  -999,  -999,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -999,  -999,  -999,  -999,  -999,  -999,  -999,  -999,  -999,
    -999,  -999,  -999,  -999,  -999,  -999,  -999,  -999,  -999,  -999,
    -999,  -999,  -999,  -999,     0,  -999,  -999,  -999,  -999,  -999,
    -999,  -999,  -999,  -999,  -999,  -999,     0,     0,  -999,  -999,
       0,  -999,     0,     0,  -999,  -999,  -999,  -999,  -999,     0,
       0,  -999,  -999,  -999,  -999,  -999,  -999,  -999,  -999,  -999,
    -999,  -999,  -999,  -999,  -999,  -999,  -999,  -999,     0,  -999,
       0,  -999,  -999,  -999,     0,  -999,  -999,  -999,  -999,  -999,
    -999,  -999,  -999,  -999,  -999,  -999,  -999,  -999,  -999,  -999,
    -999,  -999,  -999,     0,     0,  -999,     0,  -999,  -999,     0,
    -999,  -999,  -999,     0,  -999,  -999,  -999,     0,  -999,  -999,
    -999,  -999, -1128,   617,     0, -1128, -1128, -1128, -1128,     0,
   -1128, -1128,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128,
   -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128,
   -1128, -1128, -1128,     0, -1128, -1128, -1128, -1128, -1128, -1128,
   -1128, -1128, -1128, -1128, -1128,     0,     0, -1128, -1128,     0,
   -1128,     0,     0, -1128, -1128, -1128, -1128, -1128,     0,     0,
   -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128,
   -1128, -1128, -1128, -1128, -1128, -1128, -1128,     0, -1128,     0,
   -1128, -1128, -1128,     0, -1128, -1128, -1128, -1128, -1128, -1128,
   -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128, -1128,
   -1128, -1128,     0,     0, -1128,     0, -1128,   618,     0, -1128,
   -1128, -1128,     0, -1128, -1128, -1128,     0, -1128, -1128, -1128,
   -1128, -1129,   617,     0, -1129, -1129, -1129, -1129,     0, -1129,
   -1129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129,     0, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129, -1129, -1129,     0,     0, -1129, -1129,     0, -1129,
       0,     0, -1129, -1129, -1129, -1129, -1129,     0,     0, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129,     0, -1129,     0, -1129,
   -1129, -1129,     0, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129,     0,     0, -1129,     0, -1129,   618,     0, -1129, -1129,
   -1129,     0, -1129, -1129, -1129,     0, -1129, -1129, -1129, -1129,
   -1216,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216,     0, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216,     0,     0,   307, -1216,     0, -1216,     0,
       0,   308,   309,   310, -1216, -1216,     0,     0, -1216, -1216,
   -1216, -1216, -1216, -1216,   311,   312, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216,     0, -1216,     0,   313, -1216,
   -1216,     0,   314,   315,   316,   317,   318,   319,   320,   321,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,   322,   323,
       0,     0,   324,     0,   325, -1216,     0, -1216, -1216, -1216,
       0, -1216,   326,   327,     0,   328,   329,   330,   331, -1000,
    2058,     0, -1000, -1000, -1000, -1000,     0, -1000, -1000,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1000, -1000, -1000,
   -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
   -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
       0, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
   -1000, -1000,     0,     0, -1000, -1000,     0, -1000,     0,     0,
   -1000, -1000, -1000, -1000, -1000,     0,     0, -1000, -1000, -1000,
   -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
   -1000, -1000, -1000, -1000,     0, -1000,     0, -1000, -1000, -1000,
       0, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
   -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,     0,
       0, -1000,     0, -1000, -1000,     0, -1000, -1000, -1000,     0,
   -1000, -1000, -1000,     0, -1000, -1000, -1000, -1000,  -906,   583,
       0,  -906,  -906,  -906,  -906,     0,  -906,  -906,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -906,  -906,  -906,  -906,
    -906,  -906,  -906,  -906,  -906,  -906,  -906,  -906,  -906,  -906,
    -906,  -906,  -906,  -906,  -906,  -906,  -906,  -906,  -906,     0,
       0,  -906,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -906,  -906,     0,  -906,     0,     0,  -906,
    -906,  -906,  -906,  -906,     0,     0,  -906,  -906,  -906,  -906,
    -906,  -906,  -906,  -906,  -906,  -906,  -906,     0,     0,  -906,
    -906,  -906,  -906,     0,  -906,     0,  -906,  -906,  -906,     0,
    -906,  -906,  -906,  -906,  -906,  -906,  -906,  -906,  -906,  -906,
    -906,  -906,  -906,  -906,  -906,  -906,  -906,  -906,     0,     0,
    -906,   846,  -906,  -906,     0,   585,  -906,  -906,     0,     0,
    -906,  -906,     0,  -906,  -906,  -906,  -906,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,     0,
       0,   307,   246,     0,     0,     0,     0,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     311,   637,   638,   248,   639,   640,   641,     0,     0,     0,
       0,     0,     0,     0,   313,     0,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,     0,     0,   324,     0,
     325,   642,     0,     0,     0,   254,     0,   643,   326,   327,
       0,   328,   329,   330,   331,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,  1115,  1116,  1117,   629,
    1118,  1119,  1120,  1121,   634,   635,  1122,     0,     0,   307,
     246,     0,     0,     0,     0,   308,   309,   310,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   311,   637,
     638,   248,   639,   640,   641,     0,     0,     0,     0,     0,
       0,     0,   313,     0,   249,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,   250,   251,   252,   253,
     206,   207,   322,   323,     0,     0,   324,     0,   325,   642,
       0,     0,     0,   254,     0,   643,   326,   327,     0,   328,
     329,   330,   331,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,   246,     0,
       0,     0,     0,   308,   309,   310,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   311,   637,    38,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,   323,     0,     0,   324,     0,   325,   984,     0,   985,
     986,   742,     0,     0,   326,   327,     0,   328,   329,   330,
     331,  1247,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   246,     0,     0,     0,
       0,   308,   309,   310,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   311,   637,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
     249,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,   250,   251,   252,   253,   206,   207,   322,   323,
       0,     0,   324,     0,   325,   984,     0,   985,  -110,   742,
       0,     0,   326,   327,     0,   328,   329,   330,   331,  1254,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,   246,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   311,   637,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,   249,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
     250,   251,   252,   253,   206,   207,   322,   323,     0,     0,
     324,     0,   325,   984,     0,   985,   -98,   742,     0,     0,
     326,   327,     0,   328,   329,   330,   331,  1258,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,   246,     0,     0,     0,     0,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     311,   637,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,     0,     0,   324,     0,
     325,   984,     0,   985,  -102,   742,     0,     0,   326,   327,
       0,   328,   329,   330,   331,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     246,     0,     0,     0,     0,   308,   309,   310,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   311,   637,
      38,   248,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,   249,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,   250,   251,   252,   253,
     206,   207,   322,   323,     0,     0,   324,     0,   325,  1512,
       0,   985,   -65,   742,     0,     0,   326,   327,     0,   328,
     329,   330,   331,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,   246,     0,
       0,     0,     0,   308,   309,   310,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   311,   637,    38,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,   323,     0,     0,   324,     0,   325,  1521,     0,   985,
    1522,   742,     0,     0,   326,   327,     0,   328,   329,   330,
     331,  1579,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   246,     0,     0,     0,
       0,   308,   309,   310,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   311,   637,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
     249,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,   250,   251,   252,   253,   206,   207,   322,   323,
       0,     0,   324,     0,   325,   984,     0,   985,   -81,   742,
       0,     0,   326,   327,     0,   328,   329,   330,   331,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,   246,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   311,   637,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,   249,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
     250,   251,   252,   253,   206,   207,   322,   323,     0,     0,
     324,     0,   325,  1521,     0,   985,  -107,   742,     0,     0,
     326,   327,     0,   328,   329,   330,   331,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,   246,     0,     0,     0,     0,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     311,   637,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,   323,     0,     0,   324,     0,
     325,  1521,     0,   985,   -97,   742,     0,     0,   326,   327,
       0,   328,   329,   330,   331,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     246,     0,     0,     0,     0,   308,   309,   310,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   311,   637,
      38,   248,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,   249,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,   250,   251,   252,   253,
     206,   207,   322,   323,     0,     0,   324,     0,   325,  1521,
       0,   985,  -101,   742,     0,     0,   326,   327,     0,   328,
     329,   330,   331,  1761,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,   246,     0,
       0,     0,     0,   308,   309,   310,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   311,   637,    38,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,   323,     0,     0,   324,     0,   325,   984,     0,   985,
     -88,   742,     0,     0,   326,   327,     0,   328,   329,   330,
     331,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   246,     0,     0,     0,
       0,   308,   309,   310,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   311,   637,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
     249,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,   250,   251,   252,   253,   206,   207,   322,   323,
       0,     0,   324,     0,   325,  1521,     0,   985,   -78,   742,
       0,     0,   326,   327,     0,   328,   329,   330,   331,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,   246,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   311,   637,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,   249,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
     250,   251,   252,   253,   206,   207,   322,   323,     0,     0,
     324,     0,   325,  1521,     0,   985,   -85,   742,     0,     0,
     326,   327,     0,   328,   329,   330,   331,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,    27,     0,     0,     0,     0,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     311,   406,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,    40,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,    45,    46,
      47,    48,   206,   207,   322,   323,     0,     0,   324,   302,
     325,     1,   303,   106,   304,     0,   305,   306,   326,   327,
       0,   328,   329,   330,   331,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   864,    27,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,   311,   406,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,    40,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
      45,    46,    47,    48,   206,   207,   322,   323,     0,     0,
     324,   302,   325,     1,   303,   106,   304,     0,   305,   306,
     326,   327,     0,   328,   329,   330,   331,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,    27,     0,     0,     0,
       0,   308,   309,   310,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,   311,   406,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
      40,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,    45,    46,    47,    48,     0,     0,   322,   323,
       0,     0,   324,   731,   325,     0,     0,     0,     0,     0,
       0,     0,   326,   327,     0,   328,   329,   330,   331,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1194,    27,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,   311,   406,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,    40,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
      45,    46,    47,    48,     0,     0,   322,   323,     0,     0,
     324,   731,   325,     0,     0,     0,     0,     0,     0,     0,
     326,   327,     0,   328,   329,   330,   331,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,    27,     0,     0,     0,     0,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     311,   406,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,    40,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,    45,    46,
      47,    48,     0,     0,   322,   323,     0,     0,   324,   302,
     325,     1,   303,   106,   304,   254,   305,   306,   326,   327,
       0,   328,   329,   330,   331,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,   564,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,    27,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,   311,   406,    38,    39,     0,   302,     0,     1,
     303,   106,   304,     0,   305,   306,   313,     0,    40,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
      45,    46,    47,    48,     2,     0,   322,   887,     0,     0,
     888,   731,   325,     0,     0,     0,     0,     0,     0,     0,
     326,   327,     0,   328,   329,   330,   331,     0,  1115,  1116,
    1117,   629,  1118,  1119,  1120,  1121,   634,   635,  1122,     0,
       0,   307,     0,     0,     0,     0,     0,   308,   309,   310,
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0,
     311,   312,  1123,     0,   639,   640,   641,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,     0,     0,
       0,     0,     0,     0,   322,   323,     0,     0,   324,  -452,
     325,   642,     0,  -452,     0,   254,     0,   643,   326,   327,
       0,   328,   329,   330,   331,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1115,  1116,  1117,   629,
    1118,  1119,  1120,  1121,   634,   635,  1122,     0,     0,   307,
       0,     0,     0,     0,     0,   308,   309,   310,     0,     0,
       0,     0,     0,    32,     0,     0,     0,     0,   311,   312,
    1123,     0,   639,   640,   641,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   324,  1158,   325,   642,
       0,  1159,     0,   254,     0,   643,   326,   327,     0,   328,
     329,   330,   331,  1834,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1115,  1116,  1117,   629,  1118,  1119,
    1120,  1121,   634,   635,  1122,     0,     0,   307,     0,     0,
       0,     0,     0,   308,   309,   310,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,   311,   312,  1123,     0,
     639,   640,   641,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,     0,     0,     0,     0,     0,     0,
     322,   323,     0,     0,   324,     0,   325,   642,     0,     0,
       0,   254,     0,   643,   326,   327,     0,   328,   329,   330,
     331,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,     0,     0,   307,     0,     0,     0,     0,
       0,   308,   309,   310,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,   311,   312,  1123,     0,   639,   640,
     641,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,     0,     0,     0,     0,     0,     0,   322,   323,
       0,     0,   324,     0,   325,   642,     0,     0,     0,   254,
       0,   643,   326,   327,     0,   328,   329,   330,   331,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,     0,     0,
     324,  1158,   325,     0,     0,  1725,     0,     0,     0,  1872,
     326,   327,     0,   328,   329,   330,   331,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,     0,     0,   324,  1158,   325,     0,     0,
    1725,     0,     0,     0,  1876,   326,   327,     0,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,  2003,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,     0,     0,
     324,  1158,   325,  1855,     0,  1159,     0,     0,     0,     0,
     326,   327,     0,   328,   329,   330,   331,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,     0,     0,   324,  1158,   325,  1855,     0,
    1159,     0,     0,     0,     0,   326,   327,     0,   328,   329,
     330,   331,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     2,     0,     0,     0,     0,   322,   323,     0,     0,
     324,  2068,   325,  2069,     0,  1154,     0,     0,     0,     0,
     326,   327,     0,   328,   329,   330,   331,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     2,     0,     0,     0,
       0,   322,   323,     0,     0,   324,  1158,   325,  2067,     0,
    1159,     0,     0,     0,     0,   326,   327,     0,   328,   329,
     330,   331,     0,     0,     0,     0,     0,   302,     0,     1,
     303,   106,   304,   307,   305,   306,     0,     0,     0,   308,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   312,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,   323,     0,     0,
     324,   307,   325,  1153,     0,  1154,     0,   308,   309,   310,
     326,   327,     0,   328,   329,   330,   331,     0,     0,     0,
     311,   312,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,   313,     0,     0,     0,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     2,
       0,     0,     0,     0,   322,   323,     0,     0,   324,  1263,
     325,     0,     0,     0,     0,   742,     0,     0,   326,   327,
       0,   328,   329,   330,   331,     0,     0,   302,     0,     1,
     303,   106,   304,     0,   305,   306,   307,     0,     0,     0,
       0,     0,   308,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     0,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
     323,   307,     0,   324,  1330,   325,     0,   308,   309,   310,
     742,     0,     0,   326,   327,     0,   328,   329,   330,   331,
     311,   312,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,   313,     0,     0,     0,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     2,
       0,     0,     0,     0,   322,   323,     0,     0,   324,     0,
     325,  1134,     0,     0,     0,   742,     0,     0,   326,   327,
       0,   328,   329,   330,   331,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,     0,     0,     0,
       0,     0,   308,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,   312,  1612,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,   313,
       0,     0,     0,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     2,     0,     0,     0,     0,   322,
     323,     0,     0,   324,  1158,   325,     0,     0,  1159,     0,
       0,     0,     0,   326,   327,     0,   328,   329,   330,   331,
       0,     0,   302,     0,     1,   303,   106,   304,     0,   305,
     306,   307,     0,     0,     0,     0,     0,   308,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     0,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,   323,   307,     0,   324,  1613,
     325,  1614,   308,   309,   310,     0,     0,     0,   326,   327,
       0,   328,   329,   330,   331,   311,   312,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,   313,
       0,     0,     0,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     2,     0,     0,     0,     0,   322,
     323,     0,     0,   324,     0,   325,  1622,     0,  1154,     0,
       0,     0,     0,   326,   327,     0,   328,   329,   330,   331,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,     0,     0,     0,     0,     0,   308,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,   312,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,   313,     0,     0,     0,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     2,
       0,     0,     0,     0,   322,   323,     0,     0,   324,  1692,
     325,     0,     0,  1154,     0,     0,     0,     0,   326,   327,
       0,   328,   329,   330,   331,     0,     0,     0,     0,     0,
     302,     0,     1,   303,   106,   304,   307,   305,   306,     0,
       0,     0,   308,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,   312,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     0,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
     323,     0,     0,   324,   307,   325,     0,     0,  1154,     0,
     308,   309,   310,   326,   327,  1719,   328,   329,   330,   331,
       0,     0,     0,   311,   312,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,   313,     0,     0,
       0,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     2,     0,     0,     0,     0,   322,   323,     0,
       0,   324,     0,   325,     0,     0,  1722,     0,     0,     0,
    1723,   326,   327,     0,   328,   329,   330,   331,     0,     0,
       0,     0,     0,   302,     0,     1,   303,   106,   304,   307,
     305,   306,     0,     0,     0,   308,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,   312,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     0,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   324,   307,   325,     0,
       0,  1154,     0,   308,   309,   310,   326,   327,  1729,   328,
     329,   330,   331,     0,     0,     0,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,     0,   325,     0,     0,  1722,
       0,     0,     0,  1731,   326,   327,     0,   328,   329,   330,
     331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,   312,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       2,     0,     0,     0,     0,   322,   323,     0,     0,   324,
    1830,   325,     0,     0,  1154,     0,     0,     0,     0,   326,
     327,     0,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,     0,     0,
       0,     0,     0,   308,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,  1832,   325,     0,     0,  1154,
       0,     0,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,   312,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       2,     0,     0,     0,     0,   322,   323,     0,     0,   324,
    1833,   325,     0,     0,  1159,     0,     0,     0,     0,   326,
     327,     0,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,     0,     0,
       0,     0,     0,   308,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,  1836,   325,     0,     0,  1154,
       0,     0,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
    1613,   325,  1614,   308,   309,   310,     0,     0,     0,   326,
     327,     0,   328,   329,   330,   331,   311,   312,  1856,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,     0,   325,  1853,     0,  1154,
       0,     0,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
    1857,   325,  1614,   308,   309,   310,     0,     0,     0,   326,
     327,     0,   328,   329,   330,   331,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,     0,   325,     0,     0,  1722,
       0,     0,     0,  1870,   326,   327,     0,   328,   329,   330,
     331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,   312,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       2,     0,     0,     0,     0,   322,   323,     0,     0,   324,
       0,   325,     0,     0,  1722,     0,     0,     0,  1874,   326,
     327,     0,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,     0,     0,
       0,     0,     0,   308,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,  1988,   325,     0,     0,  1154,
       0,     0,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,   312,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       2,     0,     0,     0,     0,   322,   323,     0,     0,   324,
    1831,   325,     0,     0,  1159,     0,     0,     0,     0,   326,
     327,     0,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,     0,     0,
       0,     0,     0,   308,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,  1995,   325,     0,     0,  1154,
       0,     0,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
    1857,   325,  1614,   308,   309,   310,     0,     0,     0,   326,
     327,     0,   328,   329,   330,   331,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,  2072,   325,     0,     0,  1154,
       0,     0,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,   312,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       2,     0,     0,     0,     0,   322,   323,     0,     0,   324,
       0,   325,     0,     0,     0,  2101,  1014,     0,     0,   326,
     327,     0,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,     0,     0,
       0,     0,     0,   308,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,  2104,   325,     0,     0,  1154,
       0,     0,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,   312,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       2,     0,     0,     0,     0,   322,   323,     0,     0,   324,
    2105,   325,     0,     0,  1154,     0,     0,     0,     0,   326,
     327,     0,   328,   329,   330,   331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,     0,     0,
       0,     0,     0,   308,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,  2133,   325,     0,     0,  1154,
       0,     0,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
       0,   325,     0,   308,   309,   310,     0,     0,     0,   326,
     327,   548,   328,   329,   330,   331,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,     0,   325,     0,     0,     0,
       0,   742,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
       0,   325,     0,   308,   309,   310,     0,     0,     0,   326,
     327,   838,   328,   329,   330,   331,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,     0,   325,     0,     0,     0,
       0,     0,     0,     0,   326,   327,   842,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
       0,   325,     0,   308,   309,   310,  1014,     0,     0,   326,
     327,     0,   328,   329,   330,   331,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,     0,   325,     0,     0,     0,
       0,     0,     0,     0,   326,   327,  1055,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
       0,   325,     0,   308,   309,   310,     0,     0,  1107,   326,
     327,     0,   328,   329,   330,   331,   311,   312,  1457,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,   731,   325,     0,     0,     0,
       0,     0,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
       0,   325,     0,   308,   309,   310,   742,     0,     0,   326,
     327,     0,   328,   329,   330,   331,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,     0,   325,     0,     0,     0,
       0,     0,     0,     0,   326,   327,  1560,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
    1596,   325,     0,   308,   309,   310,     0,     0,     0,   326,
     327,     0,   328,   329,   330,   331,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,     0,   325,     0,     0,     0,
       0,     0,     0,  1599,   326,   327,     0,   328,   329,   330,
     331,     0,     0,  1790,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
       0,   325,     0,   308,   309,   310,  1789,     0,     0,   326,
     327,     0,   328,   329,   330,   331,   311,   312,  1793,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,     0,   325,     0,     0,     0,
       0,   742,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,  1797,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
       0,   325,     0,   308,   309,   310,   742,     0,     0,   326,
     327,     0,   328,   329,   330,   331,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,     0,   325,     0,     0,     0,
       0,   742,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
    1843,   325,     0,   308,   309,   310,     0,     0,     0,   326,
     327,     0,   328,   329,   330,   331,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,  1903,     0,   325,     0,     0,     0,
       0,  1789,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
    2004,   325,     0,   308,   309,   310,     0,     0,     0,   326,
     327,     0,   328,   329,   330,   331,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   324,  2063,   325,     0,     0,     0,
       0,     0,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   324,
       0,   325,     0,   308,   309,   310,     0,     0,     0,   326,
     327,     0,   328,   329,   330,   331,   311,   312,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,   323,     0,     0,   702,     0,   325,     0,     0,     0,
       0,     0,     0,     0,   326,   327,     0,   328,   329,   330,
     331,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,   323,   307,     0,   705,
       0,   325,     0,   308,   309,   310,     0,     0,     0,   326,
     327,     0,   328,   329,   330,   331,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,  -894,   583,     0,  -894,  -894,  -894,     0,
     322,   323,     0,     0,   728,     0,   325,     0,     0,     0,
       0,     0,     0,     0,   326,   327,     0,   328,   329,   330,
     331,  -894,  -894,  -894,  -894,  -894,  -894,  -894,  -894,  -894,
    -894,  -894,  -894,  -894,  -894,  -894,  -894,  -894,  -894,  -894,
    -894,  -894,  -894,  -894,     0,     0,  -894,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -894,  -894,
       0,  -894,     0,     0,  -894,  -894,     0,  -894,  -894,     0,
       0,  -894,  -894,  -894,  -894,  -894,  -894,     0,  -894,  -894,
    -894,  -894,     0,     0,  -894,  -894,  -894,  -894,     0,  -894,
       0,  -894,  -894,  -894,     0,  -894,  -894,  -894,  -894,  -894,
    -894,  -894,     0,  -894,  -894,  -894,  -894,  -894,  -894,  -894,
    -894,  -894,  -894,     0,     0,  -894,   584,  -894,  -894,     0,
     585,  -894,     0,     0,     0,  -894,  -894,  -189,   905,     0,
    -189,  -189,  -189,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,     0,
    -189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -189,  -189,     0,  -189,     0,     0,  -189,  -189,
       0,  -189,  -189,     0,     0,  -189,  -189,  -189,  -189,  -189,
    -189,     0,  -189,  -189,  -189,  -189,     0,     0,  -189,  -189,
    -189,  -189,     0,  -189,     0,  -189,  -189,  -189,     0,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,     0,  -189,
       0,  -189,   906,     0,   907,  -189,     0,     0,     0,  -189,
    -189,  -253,   919,     0,     1,   303,   106,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,  -253,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   424,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   425,
      32,   426,   427,    35,    36,     0,   406,    38,    39,   428,
       0,     0,   429,   430,   431,   432,     0,   433,     0,   434,
     435,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
      51,     0,     0,   436,     0,   437,   438,  -251,   922,  -253,
       1,   303,   106,   326,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
    -251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   424,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   425,    32,   426,   427,    35,
      36,     0,   406,    38,    39,   428,     0,     0,   429,   430,
     431,   432,     0,   433,     0,   434,   435,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,    51,     0,     0,   436,
       0,   437,   438,  -254,   919,  -251,     1,   303,   106,   326,
     327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,  -254,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   424,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   425,    32,   426,   427,    35,    36,     0,   406,    38,
      39,   428,     0,     0,   429,   430,   431,   432,     0,   433,
       0,   434,   435,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,    51,     0,     0,   436,     0,   437,   438,  -252,
     922,  -254,     1,   303,   106,   326,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,  -252,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   424,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   425,    32,   426,
     427,    35,    36,     0,   406,    38,    39,   428,     0,     0,
     429,   430,   431,   432,     0,   433,     0,   434,   435,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,   322,    51,     0,
       0,   436,     0,   437,   438,     0,   423,  -252,     1,   303,
     106,   326,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   424,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   425,    32,   426,   427,    35,    36,     0,
     406,    38,    39,   428,     0,     0,   429,   430,   431,   432,
       0,   433,     0,   434,   435,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,   322,    51,     0,     0,   436,     0,   437,
     438,     0,   489,   439,     1,   303,   106,   326,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   424,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   425,
      32,   426,   427,    35,    36,     0,   406,    38,    39,   428,
       0,     0,   429,   430,   431,   432,     0,   433,     0,   434,
     435,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
      51,     0,     0,   436,     0,   437,   438,     0,   511,   490,
       1,   303,   106,   326,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   424,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   425,    32,   426,   427,    35,
      36,     0,   406,    38,    39,   428,     0,     0,   429,   430,
     431,   432,     0,   433,     0,   434,   435,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,    51,     0,     0,   436,
       0,   437,   438,     0,   516,   512,     1,   303,   106,   326,
     327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   424,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   425,    32,   426,   427,    35,    36,     0,   406,    38,
      39,   428,     0,     0,   429,   430,   431,   432,     0,   433,
       0,   434,   435,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,    51,     0,     0,   436,     0,   437,   438,     0,
     520,   517,     1,   303,   106,   326,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   424,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   425,    32,   426,
     427,    35,    36,     0,   406,    38,    39,   428,     0,     0,
     429,   430,   431,   432,     0,   433,     0,   434,   435,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,   322,    51,     0,
       0,   436,     0,   437,   438,     0,   919,   521,     1,   303,
     106,   326,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   424,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   425,    32,   426,   427,    35,    36,     0,
     406,    38,    39,   428,     0,     0,   429,   430,   431,   432,
       0,   433,     0,   434,   435,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,   322,    51,     0,     0,   436,     0,   437,
     438,     0,   922,  -749,     1,   303,   106,   326,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   424,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   425,
      32,   426,   427,    35,    36,     0,   406,    38,    39,   428,
       0,     0,   429,   430,   431,   432,     0,   433,     0,   434,
     435,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
      51,     0,     0,   436,     0,   437,   438,     0,   919,  -750,
       1,   303,   106,   326,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   424,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   425,    32,   426,   427,    35,
      36,     0,   406,    38,    39,   428,     0,     0,   429,   430,
     431,   432,     0,   433,     0,   434,   435,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,    51,     0,     0,   436,
       0,   437,   438,     0,   922,  -746,     1,   303,   106,   326,
     327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   424,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   425,    32,   426,   427,    35,    36,     0,   406,    38,
      39,   428,     0,     0,   429,   430,   431,   432,     0,   433,
       0,   434,   435,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,    51,     0,     0,   436,     0,   437,   438,     0,
     919,  -747,     1,   303,   106,   326,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   424,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   425,    32,   426,
     427,    35,    36,     0,   406,    38,    39,   428,     0,     0,
     429,   430,   431,   432,     0,   433,     0,   434,   435,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,   322,    51,     0,
       0,   436,     0,   437,   438,     0,   922,  -752,     1,   303,
     106,   326,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   424,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   425,    32,   426,   427,    35,    36,     0,
     406,    38,    39,   428,     0,     0,   429,   430,   431,   432,
       0,   433,     0,   434,   435,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,   322,    51,     0,     0,   436,     0,   437,
     438,     0,  1037,  -753,     1,   303,   106,   326,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   424,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   425,
      32,   426,   427,    35,    36,     0,   406,    38,    39,   428,
       0,     0,   429,   430,   431,   432,     0,   433,     0,   434,
     435,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
      51,     0,     0,   436,     0,   437,   438,     0,  1041,  1038,
       1,   303,   106,   326,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   424,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   425,    32,   426,   427,    35,
      36,     0,   406,    38,    39,   428,     0,     0,   429,   430,
     431,   432,     0,   433,     0,   434,   435,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,    51,     0,     0,   436,
       0,   437,   438,     0,   302,  1042,     1,   303,   106,   326,
     327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   424,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   425,    32,   426,   427,    35,    36,     0,   406,    38,
      39,   428,     0,     0,   429,   430,   431,   432,     0,   433,
       0,   434,   435,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,    51,     0,     0,   436,     0,   437,   438,     0,
     919,  -648,     1,   303,   106,   326,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   424,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   425,    32,   426,
     427,    35,    36,     0,   406,    38,    39,   428,     0,     0,
     429,   430,   431,   432,     0,   433,     0,   434,   435,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,   322,    51,     0,
       0,   436,     0,   437,   438,     0,   922,  -729,     1,   303,
     106,   326,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   424,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   425,    32,   426,   427,    35,    36,     0,
     406,    38,    39,   428,     0,     0,   429,   430,   431,   432,
       0,   433,     0,   434,   435,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,   322,    51,     0,     0,   436,     0,   437,
     438,     0,   919,  -730,     1,   303,   106,   326,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   424,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   425,
      32,   426,   427,    35,    36,     0,   406,    38,    39,   428,
       0,     0,   429,   430,   431,   432,     0,   433,     0,   434,
     435,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
      51,     0,     0,   436,     0,   437,   438,     0,   922,  -732,
       1,   303,   106,   326,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   424,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   425,    32,   426,   427,    35,
      36,     0,   406,    38,    39,   428,     0,     0,   429,   430,
     431,   432,     0,   433,     0,   434,   435,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,    51,     0,     0,   436,
       0,   437,   438,     0,  1542,  -733,     1,   303,   106,   326,
     327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   424,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   425,    32,   426,   427,    35,    36,     0,   406,    38,
      39,   428,     0,     0,   429,   430,   431,   432,     0,   433,
       0,   434,   435,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,    51,     0,     0,   436,     0,   437,   438,     0,
     919,  1543,     1,   303,   106,   326,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   424,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   425,    32,   426,
     427,    35,    36,     0,   406,    38,    39,   428,     0,     0,
     429,   430,   431,   432,     0,   433,     0,   434,   435,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,   322,    51,     0,
       0,   436,     0,   437,   438,     0,   922,  -643,     1,   303,
     106,   326,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   424,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   425,    32,   426,   427,    35,    36,     0,
     406,    38,    39,   428,     0,     0,   429,   430,   431,   432,
       0,   433,     0,   434,   435,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,   322,    51,     0,     0,   436,     0,   437,
     438,     0,   919,  -644,     1,   303,   106,   326,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   424,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   425,
      32,   426,   427,    35,    36,     0,   406,    38,    39,   428,
       0,     0,   429,   430,   431,   432,     0,   433,     0,   434,
     435,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
      51,     0,     0,   436,     0,   437,   438,     0,   922,  -735,
       1,   303,   106,   326,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   424,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   425,    32,   426,   427,    35,
      36,     0,   406,    38,    39,   428,     0,     0,   429,   430,
     431,   432,     0,   433,     0,   434,   435,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,    51,     0,     0,   436,
       0,   437,   438,     0,   302,  -736,     1,   303,   106,   326,
     327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   424,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   425,    32,   426,   427,    35,    36,     0,   406,    38,
      39,   428,     0,     0,   429,   430,   431,   432,     0,   433,
       0,   434,   435,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,    51,     0,     0,   436,     0,   437,   438,     0,
     302,  -647,     1,   303,   106,   326,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   424,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   425,    32,   426,
     427,    35,    36,     0,   406,    38,    39,   428,     0,     0,
     429,   430,   431,   432,     0,   433,     0,   434,   435,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,   322,    51,     0,
       0,   436,     0,   437,   438,     0,   302,  -645,     1,   303,
     106,   326,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   424,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   425,    32,   426,   427,    35,    36,     0,
     406,    38,    39,   428,     0,     0,   429,   430,   431,   432,
       0,   433,     0,   434,   435,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,   322,    51,     0,     0,   436,     0,   437,
     438,     0,   302,  -623,     1,   303,   106,   326,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   424,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   425,
      32,   426,   427,    35,    36,     0,   406,    38,    39,   428,
       0,     0,   429,   430,   431,   432,     0,   433,     0,   434,
     435,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
      51,     0,     0,   436,     0,   437,   438,     0,   919,  -622,
       1,   303,   106,   326,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   424,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   425,    32,   426,   427,    35,
      36,     0,   406,    38,    39,   428,     0,     0,   429,   430,
     431,   432,     0,   433,     0,   434,   435,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,    51,     0,     0,   436,
       0,   437,   438,     0,   922,  -636,     1,   303,   106,   326,
     327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   424,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   425,    32,   426,   427,    35,    36,     0,   406,    38,
      39,   428,     0,     0,   429,   430,   431,   432,     0,   433,
       0,   434,   435,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,    51,     0,     0,   436,     0,   437,   438,     0,
     302,  -637,     1,   303,   106,   326,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   424,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   425,    32,   426,
     427,    35,    36,     0,   406,    38,    39,   428,     0,     0,
     429,   430,   431,   432,     0,   433,     0,   434,   435,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,   322,    51,     0,
       0,   436,     0,   437,   438,     0,   919,  -646,     1,   303,
     106,   326,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   424,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   425,    32,   426,   427,    35,    36,     0,
     406,    38,    39,   428,     0,     0,   429,   430,   431,   432,
       0,   433,     0,   434,   435,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,   322,    51,     0,     0,   436,     0,   437,
     438,     0,   922,  -632,     1,   303,   106,   326,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   424,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   425,
      32,   426,   427,    35,    36,     0,   406,    38,    39,   428,
       0,     0,   429,   430,   431,   432,     0,   433,     0,   434,
     435,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
      51,     0,     0,   436,     0,   437,   438,     0,   919,  -633,
       1,   303,   106,   326,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   424,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   425,    32,   426,   427,    35,
      36,     0,   406,    38,    39,   428,     0,     0,   429,   430,
     431,   432,     0,   433,     0,   434,   435,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,    51,     0,     0,   436,
       0,   437,   438,     0,   922,  -620,     1,   303,   106,   326,
     327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   424,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   425,    32,   426,   427,    35,    36,     0,   406,    38,
      39,   428,     0,     0,   429,   430,   431,   432,     0,   433,
       0,   434,   435,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,    51,     0,     0,   436,     0,   437,   438,     0,
     919,  -621,     1,   303,   106,   326,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   424,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   425,    32,   426,
     427,    35,    36,     0,   406,    38,    39,   428,     0,     0,
     429,   430,   431,   432,     0,   433,     0,   434,   435,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,   322,    51,     0,
       0,   436,     0,   437,   438,     0,   922,  -615,     1,   303,
     106,   326,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,   424,     0,     0,   308,   309,     0,    28,
      29,     0,     0,   425,    32,   426,   427,    35,    36,     0,
     406,    38,    39,   428,     0,     0,   429,   430,   431,   432,
       0,   433,     0,   434,   435,    40,     0,   314,   315,   316,
     317,   318,   319,   320,     0,    43,    44,    45,    46,    47,
      48,   206,   207,   322,    51,     0,     0,   436,     0,   437,
     438,     0,   919,  -616,     1,   303,   106,   326,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,    27,     0,   424,
       0,     0,   308,   309,     0,    28,    29,     0,     0,   425,
      32,   426,   427,    35,    36,     0,   406,    38,    39,   428,
       0,     0,   429,   430,   431,   432,     0,   433,     0,   434,
     435,    40,     0,   314,   315,   316,   317,   318,   319,   320,
       0,    43,    44,    45,    46,    47,    48,   206,   207,   322,
      51,     0,     0,   436,     0,   437,   438,     0,   922,  -634,
       1,   303,   106,   326,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   424,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   425,    32,   426,   427,    35,
      36,     0,   406,    38,    39,   428,     0,     0,   429,   430,
     431,   432,     0,   433,     0,   434,   435,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,   322,    51,     0,     0,   436,
       0,   437,   438,     0,   423,  -635,     1,   303,   106,   326,
     327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   424,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   425,    32,   426,   427,    35,    36,     0,   406,    38,
      39,   428,     0,     0,   429,   430,   431,   432,     0,   433,
       0,   434,   435,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,   322,    51,     0,     0,   436,     0,   437,   438,   489,
       0,     1,   303,   106,     0,   326,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,    27,     0,   424,     0,     0,   308,
     309,     0,    28,    29,     0,     0,   425,    32,   426,   427,
      35,    36,     0,   406,    38,    39,   428,     0,     0,   429,
     430,   431,   432,     0,   433,     0,   434,   435,    40,     0,
     314,   315,   316,   317,   318,   319,   320,     0,    43,    44,
      45,    46,    47,    48,   206,   207,   322,    51,     0,   199,
     436,     1,   437,   438,     0,     0,     0,     0,     0,     0,
     326,   327,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   205,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     1,    43,    44,
      45,    46,    47,    48,   206,   207,     0,    51,     0,     0,
     860,  1046,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   566,     2,   200,   201,   202,   203,   204,     8,     9,
      10,   564,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     206,   207,     1,    51,     0,     0,   565,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   566,     0,   567,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     1,    43,
      44,    45,    46,    47,    48,   206,   207,     0,    51,     0,
       0,   860,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   566,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   246,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     247,    38,   248,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   249,     0,     0,     0,     0,
       0,     0,     0,     0,     1,    43,    44,   250,   251,   252,
     253,   206,   207,     0,    51,     0,     0,   860,     0,     0,
       0,     0,     0,     0,  1422,     0,     0,     0,   566,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   246,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   247,    38,   248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   249,     0,     0,     0,     0,     0,     0,     0,     0,
       1,    43,    44,   250,   251,   252,   253,   206,   207,     0,
      51,     0,     0,   860,     0,     0,     0,     0,     0,     0,
    1439,     0,     0,     0,   566,     2,   200,   201,   202,   203,
     204,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,    18,    19,   244,   245,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   246,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   247,    38,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   249,     0,     0,
       0,     0,     0,     0,     0,     0,     1,    43,    44,   250,
     251,   252,   253,   206,   207,     0,    51,     0,     0,  1206,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1207,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,     0,     0,     0,     0,     0,     0,
       0,     0,     1,    43,    44,   250,   251,   252,   253,   206,
     207,     0,    51,     0,     0,  1206,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1229,     2,   200,   201,
     202,   203,   204,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   246,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   247,    38,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   249,
       0,     0,     0,     0,     0,     0,     0,     0,     1,    43,
      44,   250,   251,   252,   253,   206,   207,     0,    51,     0,
       0,  1206,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1684,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   246,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     247,    38,   248,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   249,     0,     0,     0,     0,
       0,     0,     0,     0,     1,    43,    44,   250,   251,   252,
     253,   206,   207,     0,    51,     0,     0,  1206,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1699,     2,
       3,     4,   273,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    26,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,   274,    31,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,    42,     0,     1,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,     0,
      51,     0,     0,    52,     0,     0,     0,     0,     0,     0,
       0,     0,   275,     2,   200,   201,   202,   203,   204,     8,
       9,    10,   564,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     1,     0,     0,    43,    44,    45,    46,    47,
      48,   206,   207,     0,    51,     0,     0,   927,     0,     0,
       0,     0,     0,     0,     0,     0,   928,     2,   200,   201,
     202,   203,   204,     8,     9,    10,   564,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,   619,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,   206,   207,     0,    51,     0,
       0,    52,     0,     0,     0,     0,     0,     0,     0,     0,
     928,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,     0,     0,  1507,     0,     0,     0,
       0,     0,     0,    43,    44,   250,   251,   252,   253,   206,
     207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   254,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -66,     0,     0,     0,     0,     0,     0,     0,   -66,
     -66,     0,     0,     0,   -66,     0,     0,     0,     0,     0,
     -66,   -66,   -66,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -66,     0,  1710,     0,     0,
       0,     0,     0,     0,     0,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,     0,     0,     0,     0,     0,     0,     0,
    1508,     0,  1509,   -66,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   249,     0,  1714,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -111,     2,   200,   201,   202,   203,
     204,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,    18,    19,   244,   245,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   246,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   247,    38,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   249,     0,  1715,
       0,     0,     0,     0,     0,     0,     0,    43,    44,   250,
     251,   252,   253,   206,   207,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -95,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   246,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   247,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,     0,
    1821,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     250,   251,   252,   253,   206,   207,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -96,     2,   200,   201,
     202,   203,   204,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   246,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   247,    38,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   249,
       0,  1965,     0,     0,     0,     0,     0,     0,     0,    43,
      44,   250,   251,   252,   253,   206,   207,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -80,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     249, -1287,   292,     0,     1,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   -87,     2,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    26,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,    30,    31,     0,
      32,    33,    34,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    41,     1,     0,     0,    42,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,     0,
      51,     0,     0,    52,     0,     0,    53,     0,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     1,     0,     0,   830,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1398,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     1,     0,     0,   830,     0,
       0,    43,    44,    45,    46,    47,    48,   206,   207,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1741,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,   165,     0,     1,     0,     0,   830,
       0,     0,    43,    44,    45,    46,    47,    48,   206,   207,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1742,     2,     3,     4,   166,     6,     7,     8,     9,    10,
     167,   168,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   165,    40,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
      50,     0,    51,     0,     0,    52,     0,     0,   169,     2,
       3,     4,   166,     6,     7,     8,     9,    10,   167,   168,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     604,    40,     1,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,     0,
      51,     0,     0,    52,     0,     0,   169,     2,   200,   201,
     202,   203,   204,   234,   235,   236,   605,   606,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   246,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   247,    38,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -914,   249,
    -914,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,   250,   251,   252,   253,   206,   207,     0,    51,     0,
       0,    52,     0,     0,   607,  -914,  -914,  -914,  -914,  -914,
    -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,
    -914,  -914,  -914,  -914,  -914,  -914,  -914,  -914,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -914,     0,     0,     0,     0,     0,     0,
       0,  -914,  -914,     0,     0,     0,  -914,     0,     0,     0,
       0,     0,  -914,  -914,  -914,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -914,     1,     0,
       0,     0,     0,     0,     0,     0,     0,  -914,  -914,  -914,
    -914,  -914,  -914,  -914,  -914,     0,  -914,     0,     0,  -914,
       0,     0,  -914,     2,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,    30,    31,     0,    32,    33,    34,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,     0, -1288,   284,
      42,     1,     0,     0,     0,    43,    44,    45,    46,    47,
      48,    49,    50,     0,    51,     0,     0,    52,     0,     0,
      53,     0,     0,     0,     0,     0,     2,     3,     4,   166,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    26,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,    33,    34,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,   199,     0,     1,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,    49,    50,     0,    51,     0,     0,
      52,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   205,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     199,     0,     1,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     0,    51,     0,     0,  1206,  1671,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   205,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   199,     0,     1,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,   206,   207,     0,     0,     0,
       0,     0,   208,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     205,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   940,     0,     1,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,   206,   207,     0,     0,     0,     0,     0,   389,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   205,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1465,     0,
       1,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,   206,   207,     0,
       0,     0,     0,     0,   208,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   205,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   199,     0,     1,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,   206,   207,     0,     0,     0,     0,     0,
     389,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   205,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     199,     0,     1,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     0,     0,     0,     0,     0,  1557,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   205,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   165,     0,     1,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,   206,   207,     0,     0,     0,
       0,     0,  1893,     2,     3,     4,   166,     6,     7,     8,
       9,    10,   564,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,   165,     0,     1,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,    49,    50,     0,    51,     0,     0,    52,     2,     3,
       4,   166,     6,     7,     8,     9,    10,   564,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,   884,     0,     1,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,     0,    51,
       0,     0,    52,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   246,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     247,    38,   248,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,   249,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,   250,   251,   252,
     253,   206,   207,     0,     0,     0,     0,   885,     2,     3,
       4,   166,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    26,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,    49,    50,     0,    51,
       0,     0,    52,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,   206,   207,     0,    51,     0,     0,    52,     2,   200,
     201,   202,   203,   204,     8,     9,    10,   564,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     0,    51,
       0,     0,    52,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,   206,   207,     0,     0,     0,     0,   720,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     0,     0,
       0,     0,  1444,     2,   200,   201,   202,   203,   204,   234,
     235,   236,  1529,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   246,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     247,    38,   248,     0,     0,     0,     0,     0,     0,     0,
       0,  1069,     0,     1,     0,   249,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,   250,   251,   252,
     253,   206,   207,     0,    51,     0,     0,    52,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,  1070,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,  1075,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,  1076,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,  1081,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,  1082,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,   869,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
     249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,  1030,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,  1087,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   503,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,   830,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   205,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
     478,   479,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
     249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     2,   200,
     201,   202,   203,   204,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     0,    51,
       0,     0,   860,  1668,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   566,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   247,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   250,   251,
     252,   253,   206,   207,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   254,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   246,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   247,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     250,   251,   252,   253,   206,   207,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1518,     2,   200,   201,
     202,   203,   204,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   246,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   247,    38,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   249,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,   250,   251,   252,   253,   206,   207
};

static const yytype_int16 yycheck[] =
{
       0,   641,    92,   719,    86,    86,   535,   926,   156,   926,
     742,   859,  1216,    83,   470,   309,   859,   749,   132,   344,
     752,   315,   580,   153,   344,   859,   100,    83,     1,    93,
      30,    31,   996,   997,   998,   327,   288,  1099,    93,   128,
     471,    41,    83,   742,   555,   826,   128,   128,   100,    30,
     749,   721,    52,   752,     1,  1606,    93,   128,     1,    59,
      84,    42,    83,   100,    64,    64,    66,  1618,   997,   183,
      83,     5,    93,     1,   585,     3,   835,   588,   826,   590,
      93,   592,    82,    83,    84,   936,    86,   100,   883,     5,
     835,    91,   386,    93,   388,     3,   186,   187,   126,     3,
     100,   101,   470,   131,   104,  1014,   996,   474,   998,    77,
    2089,     3,   876,   113,   535,   996,   116,   998,     1,     1,
       3,     3,   144,    17,     1,   122,   107,   108,   128,     1,
     111,   131,   132,     1,     1,   157,   136,   159,   122,   161,
     140,   141,   142,   977,   144,     7,     8,     9,   148,   122,
     150,     0,     5,   153,   154,   144,   156,   157,   158,   159,
      83,   161,   957,   131,   164,    73,  2145,     1,   157,     3,
     159,    59,   161,     1,   174,   174,    17,   122,   268,   186,
     187,     1,     5,   183,   131,   128,     1,   996,     5,   998,
       3,     1,     7,     8,     9,     1,   130,   996,   198,   998,
     128,   270,     1,     3,     5,     5,   132,     3,   278,     5,
     210,   418,   212,    17,   288,    28,   290,   133,   470,   123,
     220,   221,   278,   127,    37,   113,   290,   131,     3,     3,
     230,     5,   288,   233,    83,   290,   288,   278,   290,   879,
    1004,   265,     1,     3,    93,   128,   128,   288,   125,   143,
       1,   100,   101,   290,   122,   123,   128,   183,     1,   127,
     183,   128,    52,   270,     1,   265,     1,   288,   130,   290,
     270,     1,   566,   421,   274,     1,   270,   290,   278,   132,
     394,     1,   289,     1,  1248,  1249,     3,   958,   288,   288,
     290,  1255,  1256,   274,   128,  1259,  1260,  1848,   343,   122,
     128,     1,   143,   510,   862,   125,   123,   122,   308,   122,
     198,   126,   357,   123,   314,   130,   361,   127,   133,  1248,
     133,   122,   128,   123,   324,     5,  1255,   123,   120,   128,
    1259,   131,   626,   791,   792,   131,   793,   758,   338,   143,
     125,   131,     5,    17,   129,   326,     3,    83,    84,   123,
     440,   441,   442,   443,   129,   278,    73,   131,   565,  1249,
       3,   819,   820,   123,   821,   288,  1256,   127,  1249,   128,
    1260,   131,  1104,     1,   125,  1256,   127,   128,     5,  1260,
     380,   381,   125,   804,   127,   128,   386,   125,   388,   471,
     471,   128,   120,   128,   394,   131,     3,     3,   128,     1,
     400,   129,   128,   131,   129,  1104,   131,   125,   128,   127,
    1191,   128,  1193,   413,    69,    70,   530,     3,   418,     5,
     420,   421,   128,     3,   424,   425,   556,   883,   128,   278,
     430,   221,   546,   433,   434,   435,   436,   437,     1,   288,
    1249,   290,    28,  1191,   696,  1193,   536,  1256,    28,   539,
    1249,  1260,     3,   778,   779,   780,     3,  1256,   778,   779,
     780,  1260,   119,   120,   127,   465,   466,   467,   394,   143,
     470,   471,   129,   128,   474,  1679,   565,   477,     3,   122,
     772,    28,   482,   808,   809,   810,   486,   487,   808,   809,
     810,   491,   492,  1051,   565,   123,   123,     3,   386,   127,
     388,   957,   933,   503,  1062,   128,     3,   799,   876,   509,
     510,     3,  1574,   513,   514,   807,   123,   123,   518,   519,
     128,   141,   522,   523,   144,   127,   526,   527,   528,   265,
     530,    28,   739,   533,  1205,   827,  1206,   157,   560,   159,
     562,   161,   278,   129,   544,   545,   546,   470,  1004,   129,
     550,     7,     8,     9,  1224,   555,   556,  1068,   129,    65,
     560,  1231,   562,   563,   127,   565,   566,   567,   936,  1417,
     570,   560,   123,   562,  1417,  1086,   425,   944,  1429,   946,
     580,   119,   129,  1417,     5,   585,     1,     3,   588,   957,
     590,   794,   592,  1014,   663,   664,   665,   666,     3,   599,
     125,     1,   127,   122,   530,   650,     3,   530,   653,  1528,
     533,  1528,   758,   119,   120,     5,  1580,  1581,  1469,   822,
     546,  1472,   696,   129,   876,     3,  1535,     1,     1,   719,
       3,   631,   129,   633,   928,     0,  1004,   129,   112,     3,
     696,   641,  1401,  1402,   696,     5,   436,  1495,     3,  1497,
      11,  1580,     1,   860,   580,   696,  1401,  1402,   804,  1502,
     867,     1,     3,   663,   664,   665,   666,     3,   875,   663,
     664,   665,   666,   967,   130,   126,     3,   133,   566,   886,
    1884,   681,   682,   133,   691,   692,     3,    28,   127,     1,
     690,  1581,    28,   125,    11,   134,   696,   678,   679,     3,
    1581,     1,   702,   119,   120,   957,   127,   122,   123,     3,
     710,   599,   127,   129,   127,   120,   121,   717,   718,   719,
     720,   721,   722,   123,   198,    74,    75,   127,   728,  1150,
      79,  1463,   129,  1154,    28,   125,  1157,    86,  1159,   739,
     127,   119,   120,   724,   725,   726,   119,   120,   122,   123,
    1421,   129,  1004,   127,   127,   755,     1,   795,     3,   759,
     121,   110,   111,     3,  1463,   129,   127,   690,   123,    73,
    1064,   860,  1581,   696,   127,   565,   125,   567,   127,     3,
     133,   122,  1581,   123,  1693,   823,   122,   127,    28,   860,
     526,   527,   528,     7,     8,     9,   123,    79,  1762,  1763,
       3,   801,   119,   120,   121,   805,   796,     3,   544,   545,
     127,   123,   129,  1484,     3,   127,     5,   965,   966,   909,
     910,  1115,   912,   123,   128,   915,   916,   127,   110,   111,
     830,   831,   832,  1762,   824,   835,   836,   837,     7,     8,
       9,   971,    31,  1050,   933,   465,   466,   696,   129,   131,
     131,   933,   933,   327,    12,    13,     3,  1415,   858,   859,
     860,     1,   933,     3,   864,   127,   866,   867,     7,     8,
       9,   491,   492,  1763,   874,   875,   876,   665,   666,   879,
    1789,   122,  1763,   883,     3,   885,   886,     3,   888,     5,
     890,  1800,   133,   513,   514,   119,   120,   987,   518,   519,
    1751,  1752,   522,   523,     3,  1035,  1036,   127,   122,     7,
       8,     9,   386,  1207,   388,    31,   130,   120,     3,   133,
    1245,   797,   125,   119,   120,  1245,   120,   927,   128,   929,
     126,   125,     3,   933,     5,  1229,   936,  1051,   129,   793,
     560,   941,   562,    28,   944,  1788,   946,   947,   970,   825,
      90,   128,    37,   876,  1763,   794,   956,   957,   958,   128,
    1252,   130,   120,   121,  1763,   965,   966,   821,   968,   122,
     970,   971,   119,   120,  1063,   122,   976,   977,   978,   979,
     133,   970,     3,   822,   122,  1701,   795,   126,   126,  1547,
     119,   130,  1063,   127,  1201,   133,   123,  1204,  1638,   133,
     119,   120,  1672,   122,  1004,   796,  1535,  1678,  1464,   123,
     139,   140,  1683,   936,   823,   122,     7,     8,     9,   122,
     119,   120,     0,  1045,    12,    13,   133,   126,   122,     3,
     133,   797,   130,   824,   957,  1035,  1036,   122,  1107,  1039,
    1040,  1110,   122,  1043,  1044,  1045,  1963,  1047,   119,   120,
    1050,  1051,   119,    74,    75,   529,  1045,   120,    79,   825,
    1060,  1429,  1062,  1063,  1064,    86,   129,   122,  1068,   120,
    1979,  1071,   139,   140,  1074,   128,  1747,  1077,   129,  1148,
    1080,  1004,   126,  1083,   136,   137,  1086,   131,  1088,   110,
     111,    65,   566,  1162,  1163,  1164,  1165,   121,   888,    10,
      11,  1469,  1102,   127,  1472,    83,   121,  1107,   129,   386,
    1110,   388,   127,  1107,  1535,    93,  1110,  1206,    77,  1119,
     121,  1121,   100,   101,   598,  1051,   127,  1975,   126,  1977,
    1130,   122,   120,   121,  1060,  1206,  1062,   927,   121,   130,
      14,    15,   133,  1143,   127,   119,   120,  2056,  1148,  1149,
     121,   941,   626,   122,  1148,   121,   127,   947,  1139,  1181,
       1,   127,  1162,  1163,  1164,  1165,   136,   137,  1162,  1163,
    1164,  1165,   781,   782,   122,     3,  1064,   122,   120,  1473,
    1180,  1181,  1182,   555,  1184,   127,  1744,  1903,  2097,    69,
      70,   133,  1181,   121,  1194,   129,  1196,   131,   122,   127,
      28,  1201,   811,   812,   123,  1205,  1206,  1414,   127,    37,
     122,    91,   131,   585,   300,    95,   588,    97,   590,   129,
     592,   131,   129,   309,  1224,     6,  1866,     8,     9,   315,
    1901,  1231,   122,    74,    75,   121,   136,     3,    79,  1239,
     125,   127,   129,   221,   129,    86,    74,    75,   128,   723,
    1808,    79,     3,   727,    14,    15,     1,   121,    86,  1182,
    1050,  1184,    28,   127,   129,  1246,   131,   121,   742,   110,
     111,  1800,   123,   127,   122,   749,   127,    28,   752,   125,
     131,   127,   110,   111,   125,   126,   127,   907,   908,   566,
     122,   119,    73,    44,   122,   154,  1717,   135,   772,   158,
     278,  1722,   141,    84,  1725,   133,  1194,   123,    74,    75,
     288,   127,   290,    79,  1050,   131,   142,   783,   784,  1107,
      86,    16,  1110,    74,    75,   799,   121,   123,   109,    74,
      75,   127,   127,   807,    79,   131,   121,     1,   125,   120,
     127,    86,   127,   123,   110,   111,   324,   813,   814,   626,
     970,   135,   133,   827,   142,   136,   137,   138,   121,  1566,
    1148,    16,     3,   129,   127,   110,   111,   123,  1789,   123,
      11,   127,   123,   127,  1162,  1163,  1164,  1165,   122,  1800,
     125,   126,   127,  1751,  1752,    10,    11,   123,  1682,     3,
    1684,   127,  1392,  1393,   123,   123,  1396,  1397,   127,   127,
     141,  1401,  1402,   123,  1698,  1699,   791,   792,   123,   123,
      74,    75,   127,  1413,    28,    79,  1397,  1417,  1418,  1039,
    1040,  1421,    86,  1043,  1044,  1045,   125,  1427,   127,  1429,
      44,     3,  1432,  1547,   819,   820,  1436,   781,   782,   129,
     418,  1441,  1442,  1443,   123,   129,   110,   111,   127,   349,
    1979,   123,   926,  2093,   928,   127,    28,   123,   122,   123,
      74,    75,   129,   127,  1464,   125,  1466,   811,   812,  1469,
     123,  1862,  1472,   123,   127,  1475,   127,   127,   119,   120,
     121,    88,    89,    90,  1484,   126,   127,     1,   129,     3,
    1490,  1491,   470,   967,   125,  1495,  1496,  1497,  1498,    74,
      75,   120,    74,    75,    79,   120,  1429,    79,   129,   123,
     131,    86,   120,   127,    86,   907,   908,  1586,  1587,   129,
     420,   131,   996,     3,   998,   126,     1,  2056,     3,  1598,
     127,     1,   510,     3,   129,   110,   111,   129,   110,   111,
       1,   300,     3,   134,  1544,  1545,  1469,  1547,    28,  1472,
     309,     1,   134,     3,   129,  1555,   315,   129,  1979,   129,
    1180,  1181,   133,   125,    44,   127,  1566,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,  1784,  1870,  1871,
    1872,  1873,  1874,  1875,  1876,  1877,  1586,  1587,   907,   908,
    1064,  1680,  1586,  1587,    74,    75,  1596,   134,  1598,  1599,
      74,    75,  1602,   127,  1598,    79,  1606,   127,  1902,  1680,
    1610,   697,    86,  1613,   129,    79,   131,  1911,   125,     3,
     127,  1547,  2013,   129,  2015,   131,   127,    11,  1609,  1555,
    1104,   526,   527,   528,   127,  2056,   110,   111,  1638,   783,
     784,  1115,   544,   545,  1625,  1645,   110,   111,   129,   544,
     545,   928,   126,  1443,  1509,   128,  1511,  1509,   125,  1511,
     131,   125,   122,  1753,   122,   129,   122,  1141,  1142,   813,
     814,  1963,   125,  1967,  1968,   126,  1466,   125,  1678,   122,
    1680,   663,   664,  1683,   663,   664,   122,  2078,   125,  2080,
     967,  2082,   100,   101,  1808,   125,  1068,   125,   129,   836,
     837,  1701,  1074,  1703,  1704,   125,   120,  1443,  1080,   128,
     123,   134,   134,   134,  1086,   120,   134,   134,   696,   134,
     129,   133,   129,   125,   702,   128,   127,   120,   128,  2120,
    2121,   128,  2123,  1207,   123,   119,   120,   121,  1738,   134,
     123,   719,   126,   127,   123,   129,   134,  1747,  2139,   134,
     728,  1751,  1752,   123,  1754,  1229,   122,  1779,   123,  1781,
     123,   739,   131,   131,   131,  2156,  1766,  1836,   122,   122,
     122,   120,  2097,    56,   125,  1249,  1566,  2097,  1252,  1779,
     125,  1781,  1256,  1805,  1784,  1807,  1260,  1064,   125,   122,
    1779,   120,  1781,   125,   120,   123,   123,   122,  1586,  1587,
     122,   120,   133,   123,   127,  1805,   123,  1807,  1808,   123,
    1598,   127,   133,   123,    74,    75,  1805,   128,  1807,    79,
     123,     3,   131,   131,     3,   131,    86,   131,  1751,  1752,
    1830,  1831,  1832,  1833,   123,   123,  1836,     3,  1115,   123,
    1840,  1841,  1836,  1843,   125,  1845,    28,   126,   128,    28,
     110,   111,   123,   123,   832,    37,   141,  1857,    37,   144,
     123,   134,   134,   123,   123,   134,  1866,   131,    56,  1869,
    1490,  1491,   157,   131,   159,   122,   161,   123,   122,  1860,
     122,  1862,  1808,   131,   123,   123,   131,   787,   788,   867,
     790,   131,    74,    75,   131,    74,    75,    79,   876,   123,
      79,  1901,   123,  1903,    86,   883,   123,    86,    74,    75,
     888,   123,   890,    79,   134,   815,   816,   817,   818,   134,
      86,   120,   133,   133,  1544,  1545,   134,   134,   110,   111,
    1207,   110,   111,   125,    11,  2004,   129,  2006,   697,   126,
     122,   131,   131,   122,   110,   111,   129,   125,   122,   126,
    1972,   133,  1229,   126,   125,   123,   122,   129,   858,   859,
     123,   123,   123,   941,    74,    75,   123,     3,   123,    79,
    1970,  1971,  1972,  1973,  1974,  1975,    86,  1977,   134,   957,
     134,   134,   134,  1972,  1984,  1985,  1986,  1987,   134,  1463,
       0,   134,    28,   134,   134,  1995,  2086,  2087,   123,  1473,
     110,   111,    64,  2072,  2004,    64,  2006,  2007,   125,   123,
    2004,   134,  2006,   123,   134,   123,  2016,  2017,   134,   134,
     125,   125,   134,   125,   125,   123,   129,  2128,   125,   125,
    1504,    41,  2013,   125,  2015,  1509,   125,  1511,    74,    75,
     125,   125,   125,    79,   125,   123,   125,   976,  1836,    59,
      86,   125,  2052,  2053,  1528,  1498,    66,   858,   958,  2059,
    2060,   477,   288,  2063,   913,  2065,   477,     0,  2068,   288,
     804,   477,  2072,    83,   110,   111,    86,   968,  2072,   477,
      74,    75,    92,    93,  1464,    79,   477,  2087,    92,  2089,
     100,   101,    86,  2093,   435,   722,  2077,  2078,   314,  2080,
    1789,  2082,   728,   113,   100,  2105,   116,  1581,  2077,    93,
     425,   270,    93,   101,   265,    93,   110,   111,   128,  1738,
      -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,  2128,  2129,
    2111,   141,   142,  2133,   144,    -1,    -1,    -1,    -1,  2120,
    2121,    -1,  2123,    -1,   154,  2145,   156,   157,   158,   159,
      83,   161,    -1,    -1,    -1,    -1,    -1,    -1,  2139,  1779,
      93,  1781,   136,    -1,    -1,    -1,    -1,   100,   101,    -1,
      -1,    -1,    -1,    -1,    -1,  2156,   186,   187,    -1,    -1,
     465,   466,   186,   187,    -1,  1805,    -1,  1807,   198,    -1,
      -1,    -1,   477,    -1,    -1,    -1,  1473,    -1,    -1,    -1,
      -1,    -1,   212,    -1,    -1,    -1,   491,   492,  1682,    -1,
    1684,   221,    -1,    -1,    -1,    -1,  2004,    -1,  2006,  1693,
      -1,    -1,    -1,  1201,  1698,  1699,    -1,    -1,   513,   514,
      -1,  1705,    -1,   518,   519,    -1,    -1,   522,   523,    -1,
      -1,    44,    45,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,   265,    -1,    86,   268,   269,
     270,     3,    -1,    -1,   268,    -1,   270,    -1,   278,    -1,
      -1,    74,    75,    -1,    -1,   560,    79,   562,   288,   289,
     290,   110,   111,    86,  2072,   289,    28,    -1,   221,  1763,
      -1,    -1,    -1,    -1,   123,    37,    -1,    -1,   308,    -1,
      -1,    -1,    -1,    -1,   314,  1205,    -1,   110,   111,    -1,
      -1,    -1,    -1,    -1,   324,    -1,    -1,     7,    -1,   122,
      10,    11,    12,    13,    14,    15,    16,    17,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    -1,    86,   278,    -1,    -1,    -1,    -1,
    1970,  1971,  1972,  1973,  1974,   288,    -1,   290,    -1,    -1,
      -1,    -1,    -1,    -1,  1984,  1985,  1986,  1987,   110,   111,
      -1,   381,    -1,    -1,    -1,   349,   386,   119,   388,    -1,
     122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,
      -1,    -1,    -1,  1867,  1868,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1682,    -1,  1684,   418,    -1,
     420,   421,    44,    45,   424,   425,    -1,    -1,    -1,    -1,
     430,  1698,  1699,    -1,   434,   435,    -1,   437,  1902,    -1,
     120,   121,  2052,  2053,    -1,    -1,   440,  1911,    -1,   443,
     130,    -1,    74,    75,    -1,    -1,   420,    79,    -1,   139,
     140,   141,   142,   143,    86,   465,   466,    -1,    -1,    -1,
     470,   471,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,   482,    -1,    -1,    -1,    -1,   487,   110,   111,
      -1,   491,   492,    -1,    -1,   418,    -1,    -1,  1466,    -1,
     122,     3,    -1,  1967,  1968,    -1,    -1,    -1,    -1,    -1,
     510,    -1,    -1,   513,   514,    -1,    74,    75,   518,   519,
      -1,    79,   522,   523,    -1,    -1,    28,  1417,    86,   529,
      -1,  1421,    -1,    -1,    -1,    37,   536,    -1,    -1,   539,
      -1,    -1,   536,    -1,    -1,   539,    -1,   470,    -1,    -1,
      -1,    -1,   110,   111,    -1,   555,    -1,    -1,    -1,    -1,
     560,   119,   562,    -1,   122,   565,   566,    -1,    -1,   529,
      -1,    -1,    74,    75,    -1,   133,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    -1,    86,   585,    -1,   510,   588,    -1,
     590,    -1,   592,    -1,  1484,    -1,    -1,    -1,  1566,   599,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,   110,   111,
      -1,    -1,  1502,    -1,    -1,  2079,    -1,   119,    -1,    -1,
     122,   123,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    28,  2097,    -1,  1902,    86,    -1,    37,    -1,
      -1,    37,    38,    -1,  1911,    44,    45,  1723,  1724,    -1,
    1726,  1727,    -1,    -1,    -1,  1731,  1732,  1733,  1734,    -1,
     110,   111,    -1,   663,   664,   665,   666,    -1,    -1,   663,
     664,   665,   666,   123,    -1,    74,    75,    -1,    74,    75,
      79,    -1,    -1,    79,  2148,    -1,    -1,    86,    -1,    -1,
      86,   691,   692,   693,    -1,   970,   696,   691,   692,   693,
    1967,  1968,   702,    -1,    -1,    44,    45,    -1,    -1,    -1,
     710,   110,   111,    -1,   110,   111,    -1,   717,   718,   719,
     119,   721,   722,   119,    -1,    -1,   122,    -1,   728,   125,
      -1,   127,   128,  1701,    -1,    74,    75,    -1,    -1,   739,
      79,    -1,   742,    -1,    -1,    -1,    -1,    86,    -1,   749,
     710,    -1,   752,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1039,  1040,    -1,    -1,  1043,  1044,
    1045,   110,   111,   696,    -1,    -1,    -1,    -1,    -1,   702,
     119,    -1,   742,    -1,    -1,    -1,    -1,    -1,  1678,   749,
      -1,    -1,   752,  1683,  1870,  1871,  1872,  1873,  1874,  1875,
    1876,  1877,    74,    75,    -1,   728,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    -1,    86,    -1,  1784,    -1,    -1,    -1,
      -1,    -1,    -1,   787,   788,    -1,   790,    -1,    -1,    -1,
      -1,    -1,   832,    -1,    -1,   835,   836,   837,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,    -1,
     122,   815,   816,   817,   818,    -1,    -1,  1747,   858,   859,
     860,    -1,    -1,    -1,    -1,   465,   466,   867,     0,    -1,
      -1,    -1,    -1,    -1,    -1,   875,   876,    -1,    -1,    -1,
      -1,    -1,    -1,   883,    -1,    -1,   886,  1963,   888,    -1,
     890,   491,   492,    -1,   858,   859,    -1,    -1,  1788,    -1,
      -1,    -1,    -1,    -1,    -1,  1180,  1181,    -1,    -1,   832,
      -1,    -1,    -1,   513,   514,    -1,    -1,    -1,   518,   519,
      52,    -1,   522,   523,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   933,    -1,  1903,    -1,    -1,    -1,    -1,
      -1,   941,    -1,    -1,   867,    -1,    -1,    -1,    -1,    -1,
      82,    83,    84,   876,    -1,    -1,    -1,   957,   958,    91,
     883,    93,    -1,    -1,    -1,   965,   966,   890,   100,   101,
     970,    -1,    -1,    -1,  1723,  1724,   976,  1726,  1727,    -1,
      -1,    -1,  1731,  1732,  1733,  1734,    -1,    -1,    -1,     3,
      -1,    -1,    -1,   987,   958,    -1,   996,   997,   998,   131,
     132,   133,   134,   135,  1004,    -1,    -1,    -1,    -1,   141,
      -1,  1901,   144,    -1,    28,    -1,    -1,    -1,   941,    -1,
      -1,    -1,    -1,    37,    38,   157,    -1,   159,    -1,   161,
      -1,    -1,    -1,    -1,   957,    -1,   996,   997,   998,  1039,
    1040,    -1,    -1,  1043,  1044,  1045,    -1,    -1,    -1,    -1,
      -1,   183,   184,   185,    -1,    -1,    -1,    -1,    -1,     3,
      74,    75,    -1,  1063,  1064,    79,    -1,    -1,  1068,    -1,
      -1,    -1,    86,    -1,  1074,    -1,    -1,    -1,    -1,    -1,
    1080,    -1,    -1,    -1,    28,    -1,  1086,    -1,   220,   221,
      -1,    -1,    -1,    37,    -1,    -1,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,  1104,   119,    -1,  1107,   122,    -1,
    1110,    -1,    -1,  1107,    -1,    -1,  1110,    -1,    -1,    -1,
      -1,  1870,  1871,  1872,  1873,  1874,  1875,  1876,  1877,    -1,
      74,    75,    -1,   265,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    -1,  1104,    -1,   278,    -1,  1148,    -1,
      -1,    -1,    -1,    -1,  1148,    -1,   288,    -1,   290,    -1,
      -1,    -1,  1162,  1163,  1164,  1165,   110,   111,  1162,  1163,
    1164,  1165,    -1,    -1,    -1,   119,    -1,    -1,   122,    -1,
    1180,  1181,    -1,    -1,    -1,  1185,    -1,  1187,    -1,    -1,
      -1,  1185,    -1,  1187,  1194,    -1,    -1,    -1,    -1,    -1,
      -1,  1201,    -1,    -1,  1204,  1205,  1206,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1963,  1490,  1491,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1224,    -1,    -1,    -1,    -1,    -1,
      -1,  1231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,  1205,     3,    -1,    -1,    -1,     0,    -1,  1248,  1249,
      -1,    -1,    -1,    -1,    -1,  1255,  1256,    -1,    -1,  1259,
    1260,    -1,   394,   395,   396,    -1,    -1,    28,    -1,  1544,
    1545,  1194,    -1,    -1,    -1,    -1,    37,    38,  1201,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   418,    -1,  1248,  1249,
      -1,    -1,    -1,   425,    -1,  1255,  1256,    -1,    -1,  1259,
    1260,    -1,    -1,    -1,   436,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,    -1,    83,
      -1,    -1,    -1,   465,   466,    -1,    -1,    -1,   470,    93,
      -1,    -1,   474,    -1,    -1,   477,   100,   101,    -1,   110,
     111,    -1,    -1,    -1,   486,    -1,    -1,    -1,   119,   491,
     492,   122,    -1,    -1,   125,    -1,   127,   128,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   510,    -1,
      -1,   513,   514,    -1,    -1,    -1,   518,   519,   142,    -1,
     522,   523,    52,    -1,   526,   527,   528,    -1,    -1,    -1,
     154,  1401,  1402,    -1,   158,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   544,   545,    -1,    -1,   141,  1417,    -1,   144,
      -1,  1421,    -1,    83,    84,    -1,    -1,    -1,   560,    -1,
     562,    91,   157,   565,   159,   567,   161,    -1,    -1,  1039,
    1040,    -1,    -1,  1043,  1044,    -1,    -1,    -1,    -1,    -1,
     582,    -1,    -1,  1417,    -1,    -1,    -1,  1421,    -1,    -1,
      -1,    -1,    -1,  1463,    -1,    -1,  1466,   142,    -1,    -1,
      -1,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,   154,
      -1,    -1,    -1,   158,  1484,    -1,    -1,    -1,    -1,    -1,
    1490,  1491,    -1,    -1,    -1,  1495,  1496,  1497,  1498,    -1,
      -1,    -1,    -1,  1463,  1779,    -1,  1781,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1484,    -1,    -1,   183,   278,  1519,    -1,    -1,    -1,    -1,
    1805,    -1,  1807,    -1,   288,    -1,   290,    -1,  1502,    -1,
      -1,    -1,    -1,  1466,  1544,  1545,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,    -1,
      -1,    -1,    -1,    -1,   696,    -1,  1566,    -1,    -1,    -1,
     230,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,
    1580,  1581,    -1,    -1,    -1,   717,  1586,  1587,    -1,   721,
     265,    -1,  1586,  1587,   268,   269,    -1,    -1,    -1,  1599,
      -1,    -1,  1602,    -1,  1598,   265,    -1,   739,   465,   466,
    1610,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,
    1580,  1581,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   308,   491,   492,    -1,    -1,    -1,   314,
      -1,    -1,    -1,  1566,    -1,  1645,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   513,   514,    -1,    -1,
      -1,   518,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,
     424,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1678,    -1,
    1680,   435,    -1,  1683,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1970,  1971,  1972,  1973,  1974,
      -1,  1701,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1984,
    1985,  1986,  1987,    -1,  1678,    -1,    -1,    -1,    -1,  1683,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   860,    -1,
      -1,    -1,    -1,   487,   394,   867,    -1,    -1,    -1,    -1,
     465,   466,   874,   875,   876,    -1,     0,  1747,    -1,   424,
      -1,   883,   477,    -1,   886,    -1,   888,    -1,    -1,    -1,
     435,    -1,  1762,  1763,    -1,    -1,   491,   492,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   436,  2052,  2053,  1779,
      -1,  1781,    -1,  1747,  1784,    -1,    -1,    -1,   513,   514,
      -1,    -1,    -1,   518,   519,   927,    -1,   522,   523,    -1,
      -1,    -1,  1762,  1763,   936,  1805,    -1,  1807,    -1,   941,
      -1,    -1,   487,    -1,   474,   947,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1788,   957,    -1,    -1,    -1,    83,
      -1,    -1,    -1,    -1,    -1,   560,    -1,   562,   970,    93,
    1840,  1841,  1836,    -1,    -1,    -1,   100,   101,   980,    -1,
      -1,    -1,    -1,    -1,    -1,   268,   269,    -1,    -1,    -1,
      -1,  1784,   536,    -1,    -1,   539,   526,   527,   528,    -1,
     530,    -1,  1004,   533,    -1,   270,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   544,   545,   546,    -1,   142,    -1,
    1490,  1491,    -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,
     154,  1901,    -1,  1903,   158,   565,    -1,  1039,  1040,    -1,
      -1,  1043,  1044,  1045,    -1,    -1,    -1,   136,  1050,  1051,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1061,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1901,    -1,    -1,
      -1,    -1,   696,    -1,  1544,  1545,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1970,  1971,  1972,  1973,  1974,  1975,    -1,  1977,    -1,   198,
      -1,    -1,    -1,    -1,  1984,  1985,  1986,  1987,    -1,   663,
     664,   665,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2004,    -1,  2006,    -1,    -1,    -1,    -1,    -1,    -1,   693,
      -1,    -1,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,
     690,    -1,    -1,    -1,   288,    -1,   290,    -1,    -1,    -1,
      -1,    -1,   717,   718,    -1,   440,   721,   722,  1180,  1181,
      -1,    -1,  2052,  2053,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,  1201,
      -1,    -1,  1204,    -1,  1206,    -1,    -1,    -1,  2072,    -1,
      -1,   300,    -1,    -1,    -1,   304,   305,   306,    -1,    -1,
     309,     1,  1224,     3,     4,     5,   315,    -1,    -1,  1231,
      -1,    -1,   321,    -1,    -1,    -1,    -1,    -1,   327,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,   875,    -1,   536,    -1,   344,   539,    -1,    -1,    -1,
     349,    -1,   886,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    93,    -1,    -1,    -1,
      -1,    71,    72,   100,   101,    -1,    -1,   386,    -1,   388,
     424,    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,
      -1,   435,  1039,  1040,    -1,    -1,  1043,  1044,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     875,   420,    -1,    -1,    -1,   142,    -1,    -1,   118,    -1,
      -1,   886,   122,    -1,   344,    -1,    -1,   154,    -1,    -1,
      -1,   158,   132,   133,    -1,    -1,    -1,    -1,   888,    -1,
      -1,    -1,    -1,   487,    -1,    -1,   631,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   970,    -1,    -1,    -1,    -1,
     663,   664,   665,   666,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   927,   663,   664,
     665,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     693,    -1,  1414,    -1,   944,    -1,   946,   947,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1429,    -1,    -1,
      -1,    -1,    -1,    -1,  1436,    -1,    -1,    -1,    -1,    -1,
     529,  1443,    -1,    -1,  1039,  1040,    -1,    -1,  1043,  1044,
    1045,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1004,
      -1,    -1,  1464,    -1,  1466,    -1,    -1,    -1,    -1,    -1,
      -1,   278,    -1,    -1,    -1,    -1,    -1,   566,    -1,    -1,
      -1,   288,    -1,   290,    -1,    -1,    -1,    -1,  1490,  1491,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1970,  1971,    -1,  1973,  1974,    -1,    -1,    -1,    -1,   598,
      -1,    -1,    -1,    -1,  1984,  1985,  1986,  1987,    -1,    -1,
    1050,  1051,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   626,    -1,    -1,
      -1,    -1,  1544,  1545,    -1,  1547,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1107,  1566,    -1,  1110,    -1,    -1,    -1,
      -1,    -1,   696,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2052,  2053,    -1,  1180,  1181,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1148,    -1,    -1,    -1,   697,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   424,  1162,  1163,
    1164,  1165,    -1,    -1,    -1,   112,    -1,    -1,   435,    -1,
      -1,    -1,    -1,    -1,   723,    -1,   636,    -1,   727,    -1,
      -1,  1185,    -1,  1187,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1182,   742,  1184,    -1,    -1,    -1,    -1,  1204,
     749,    -1,    -1,   752,    -1,    -1,    -1,    -1,    -1,    -1,
    1672,    -1,    -1,    -1,   939,    -1,    -1,    -1,    -1,  1224,
     487,    -1,    -1,   772,    -1,    -1,  1231,    -1,    -1,   778,
     779,   780,   781,   782,   783,   784,    -1,    -1,   787,   788,
      -1,   790,   791,   792,   793,   794,   795,   796,   797,    -1,
     799,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   807,   808,
     809,   810,   811,   812,   813,   814,   815,   816,   817,   818,
     819,   820,   821,   822,   823,   824,   825,    -1,   827,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   875,    -1,    -1,    -1,    -1,    -1,    -1,   758,    -1,
      -1,    -1,   886,  1490,  1491,    -1,    -1,    -1,    -1,   858,
     859,    -1,    -1,    -1,    -1,    -1,    -1,  1779,    -1,  1781,
      -1,    -1,  1784,   270,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   791,   792,   793,   794,   795,    -1,    -1,   798,    -1,
      -1,   112,    -1,  1805,   804,  1807,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1817,    -1,  1544,  1545,   819,
     820,   821,   822,   823,  1107,   136,   826,  1110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   926,    -1,   928,
     327,    -1,  1107,    -1,    -1,  1110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1119,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1148,    -1,    -1,    -1,   958,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   967,  1162,
    1163,  1164,  1165,  1148,    -1,    -1,    -1,   198,    -1,   696,
      -1,    -1,    -1,    -1,    -1,  1490,  1491,  1162,  1163,  1164,
    1165,    -1,  1185,    -1,  1187,    -1,    -1,   996,    -1,   998,
      -1,    -1,    -1,  1443,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1544,
    1545,    -1,    -1,    -1,    -1,    -1,    -1,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,  1970,  1971,
    1972,  1973,  1974,    -1,    -1,  1064,    -1,    -1,    -1,    -1,
      -1,    -1,  1984,  1985,  1986,  1987,    -1,    -1,    -1,   300,
      -1,    -1,    -1,   304,   305,   306,    -1,    -1,   309,    -1,
      -1,    -1,    -1,    -1,   315,    -1,    -1,    -1,    -1,    -1,
     321,    -1,    -1,    -1,    -1,  1104,   327,  1547,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1115,    -1,    -1,    -1,
      -1,    -1,    -1,   344,    -1,    -1,    -1,    -1,   349,    -1,
      -1,    -1,  1586,  1587,    -1,    -1,    -1,    -1,   535,    -1,
    2052,  2053,  1141,  1142,    -1,  1599,    -1,    -1,  1602,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1610,    -1,   875,    -1,
     120,   121,    -1,    -1,    -1,   386,    -1,   388,    -1,   886,
     130,    -1,    -1,    -1,    -1,   135,   136,   137,    -1,   139,
     140,   141,   142,   143,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,   420,
      -1,   598,    -1,    -1,    -1,    -1,  1205,    -1,  1207,    -1,
      -1,    -1,  1122,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1229,    -1,    -1,    -1,   631,    -1,    -1,    -1,    -1,    -1,
    1150,    -1,    -1,    -1,    -1,    -1,  1245,  1157,    -1,    -1,
    1249,    -1,    65,  1252,    -1,    -1,    -1,  1256,    71,    72,
      73,  1260,    -1,    -1,    -1,    -1,   663,   664,   665,   666,
      -1,    84,    85,    -1,  1779,    -1,  1781,    -1,    -1,    -1,
      -1,  1191,    -1,  1193,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
    1805,    -1,  1807,    -1,    -1,   118,   119,    -1,   529,   122,
     123,   124,    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,
     133,   134,   135,   136,   137,   138,   723,    -1,    -1,    -1,
     727,    -1,    -1,  1970,  1971,    -1,  1973,  1974,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   566,    -1,  1984,  1985,  1986,
    1987,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   758,    -1,    -1,    -1,    -1,    -1,    -1,  1808,    -1,
      -1,    -1,    -1,    -1,    -1,   772,    -1,   598,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1840,  1841,    -1,    -1,
      -1,    -1,    -1,  1586,  1587,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   799,    -1,    -1,   626,  1599,   804,    -1,  1602,
     807,  1586,  1587,    -1,    -1,  2052,  2053,  1610,  1417,    -1,
      -1,  1596,  1421,  1598,  1599,    -1,    -1,  1602,    -1,    -1,
     827,    -1,    -1,    -1,    -1,  1610,    -1,    -1,  1613,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1463,  1970,  1971,  1972,  1973,  1974,
      -1,    -1,    -1,    -1,  1473,    -1,   697,    -1,    -1,  1984,
    1985,  1986,  1987,    -1,    -1,  1484,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   723,  1502,    -1,  1504,   727,    -1,    -1,    -1,
    1509,    -1,  1511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   742,    -1,    -1,    -1,    -1,    -1,    -1,   749,  1528,
      -1,   752,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2052,  2053,    -1,
      -1,   772,    -1,    -1,    -1,    -1,    -1,   778,   779,   780,
     781,   782,   783,   784,    -1,    -1,   787,   788,    -1,   790,
     791,   792,   793,   794,   795,   796,   797,    -1,   799,    -1,
      -1,    -1,  1581,    -1,    -1,    -1,   807,   808,   809,   810,
     811,   812,   813,   814,   815,   816,   817,   818,   819,   820,
     821,   822,   823,   824,   825,    -1,   827,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1014,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   858,   859,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1840,  1841,    -1,
      -1,    -1,    -1,    -1,    -1,  1830,  1831,  1832,  1833,    -1,
      -1,  1836,    -1,    -1,    -1,  1840,  1841,    -1,  1843,    -1,
    1845,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1678,
      -1,    -1,  1857,  1682,  1683,  1684,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1693,    -1,    -1,    -1,    -1,  1698,
    1699,    -1,    -1,    -1,    -1,   926,  1705,   928,    -1,    -1,
    1107,    -1,    -1,  1110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1119,    -1,  1723,  1724,    -1,  1726,  1727,    -1,
      -1,    -1,  1731,  1732,  1733,  1734,    -1,   958,    -1,    -1,
      -1,    -1,    -1,    -1,  1141,  1142,   967,    -1,  1747,    -1,
      -1,  1148,    -1,  1150,    -1,    -1,    -1,  1154,    -1,    -1,
    1157,    -1,  1159,    -1,  1763,  1162,  1163,  1164,  1165,    -1,
      -1,    -1,    -1,    -1,    -1,   996,    -1,   998,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1788,
      -1,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1717,    -1,    -1,
      -1,    -1,  1722,  1723,  1724,  1725,  1726,  1727,    -1,    -1,
    1995,  1731,  1732,  1733,  1734,    -1,    -1,    -1,    -1,  2004,
      -1,  2006,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1064,   183,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1252,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1867,  1868,
      -1,  1870,  1871,  1872,  1873,  1874,  1875,  1876,  1877,    -1,
      -1,    -1,   221,  1104,  2059,  2060,    -1,    -1,  2063,    -1,
    2065,    -1,    -1,  2068,  1115,    -1,    -1,  2072,    -1,    -1,
      -1,    -1,  1901,  1902,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1911,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1141,  1142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2133,    -1,
      -1,    -1,    -1,    -1,  1963,    -1,    -1,    -1,  1967,  1968,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1205,    -1,  1207,    -1,    -1,    -1,
      -1,    -1,    -1,   141,    -1,    -1,   144,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,  1229,   157,
      -1,   159,    -1,   161,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1245,    28,    -1,    -1,  1249,    -1,
      -1,  1252,    -1,    -1,    -1,  1256,    -1,    -1,    -1,  1260,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,    -1,
      -1,   400,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2079,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,  2097,   102,
     103,   104,   105,   106,   107,   108,   109,  1504,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,   122,
     123,   124,   270,    -1,   127,    -1,    -1,    -1,   131,   132,
     133,   470,   135,   136,   137,   138,    -1,    -1,  1535,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2148,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1586,
    1587,   530,    -1,    -1,   533,    -1,  1417,    -1,    -1,  1596,
    1421,  1598,  1599,    -1,    -1,  1602,    -1,   546,    -1,    -1,
      -1,    -1,    -1,  1610,    -1,    -1,  1613,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   580,  1463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1484,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1502,    -1,  1504,    -1,    -1,    -1,    -1,  1509,    -1,
    1511,    -1,    -1,    -1,    -1,    -1,  1693,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1528,  1705,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   465,   466,    -1,
    1717,    -1,    -1,    -1,    -1,  1722,    -1,    -1,  1725,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   491,   492,    -1,    -1,    -1,    -1,    -1,
      -1,   690,    -1,    -1,    -1,    -1,    -1,   696,    -1,    -1,
    1581,    -1,    -1,    -1,    -1,   513,   514,    -1,    -1,    -1,
     518,   519,    -1,    -1,   522,   523,    -1,    -1,    -1,    -1,
      -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1789,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1800,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   560,    -1,   562,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1830,  1831,  1832,  1833,    -1,    -1,  1836,
      -1,    -1,    -1,  1840,  1841,    -1,  1843,    -1,  1845,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1678,    -1,    -1,
    1857,  1682,  1683,  1684,    -1,    -1,    -1,    -1,    -1,    -1,
    1867,  1868,  1693,    -1,    -1,    -1,    -1,  1698,  1699,    -1,
      -1,    -1,    -1,   631,  1705,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1723,  1724,    -1,  1726,  1727,    -1,    -1,    -1,
    1731,  1732,  1733,  1734,    -1,   663,   664,   665,   666,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1747,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   876,    -1,    -1,
      -1,    -1,  1763,    -1,   883,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1788,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1979,    -1,    -1,    -1,   631,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   742,    -1,    -1,   936,  1995,    -1,
      -1,   749,   941,    -1,   752,    -1,    -1,  2004,    -1,  2006,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   957,    -1,
     665,   666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1867,  1868,    -1,  1870,
    1871,  1872,  1873,  1874,  1875,  1876,  1877,    -1,    -1,  2056,
      -1,    -1,  2059,  2060,    -1,  1004,  2063,    -1,  2065,    -1,
      -1,  2068,    -1,    -1,    -1,  2072,    -1,    -1,    -1,    -1,
    1901,  1902,  2079,    -1,     1,    -1,     3,     4,     5,     6,
    1911,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2097,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2105,    -1,
      -1,    28,  1051,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,  1060,    -1,  1062,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2133,    -1,    -1,    -1,
      -1,    -1,  1963,    -1,    -1,    -1,  1967,  1968,    65,    -1,
      -1,  2148,    -1,    -1,    71,    72,    73,    74,    75,   907,
     908,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       0,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,   118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,
     137,   138,   970,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1182,    -1,  1184,    -1,    -1,   996,    -1,
     998,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2079,    -1,
      -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    92,    93,    -1,    -1,  2097,    -1,    -1,    -1,
     100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1039,  1040,    -1,    -1,  1043,  1044,  1045,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   136,   142,    -1,    -1,    -1,    -1,  2148,    -1,    -1,
      -1,    -1,    -1,    -1,   154,    -1,    -1,    -1,   158,    -1,
      -1,   156,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1104,    -1,    -1,  1107,
      -1,    -1,  1110,    -1,    -1,    -1,   186,   187,    -1,    -1,
      -1,  1119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1148,   221,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1162,  1163,  1164,  1165,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1180,  1181,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,   268,   269,
     270,    -1,     1,    -1,     3,     4,     5,     6,   278,     8,
       9,    -1,  1107,    -1,    -1,  1110,    -1,    -1,   288,   289,
     290,    -1,    -1,    -1,  1119,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   308,    -1,
    1429,    -1,    -1,    -1,   314,    -1,    -1,  1436,    -1,    -1,
      -1,  1249,    -1,  1148,   324,    -1,    -1,    -1,  1256,    -1,
      -1,    -1,  1260,    -1,    -1,    -1,    65,  1162,  1163,  1164,
    1165,    -1,    71,    72,    73,  1464,    -1,  1466,    -1,    -1,
    1469,    -1,    -1,  1472,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,   118,
     119,    -1,    -1,   122,   123,   124,    -1,    -1,   127,    -1,
      -1,    -1,    -1,   132,   133,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   418,    -1,
      -1,    -1,    -1,    -1,   424,   420,   421,    -1,  1547,    -1,
     425,    -1,    -1,    -1,    -1,   435,  1555,    -1,    -1,   434,
      -1,     1,   437,    -1,     4,     5,     6,  1566,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     470,    -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,    -1,   487,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
     510,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,   529,
      -1,    -1,    -1,    -1,    -1,  1463,   536,    -1,    98,   539,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
     555,    -1,  1490,  1491,   124,   125,    -1,   127,   128,   129,
     565,    -1,   132,   133,    -1,   135,   136,   137,   138,    -1,
      -1,  1509,    -1,  1511,    -1,    -1,    -1,    -1,    -1,    -1,
     585,    -1,    -1,   588,    -1,   590,    -1,   592,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1544,  1545,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1751,  1752,    -1,  1754,    -1,    -1,   638,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1581,    -1,    -1,    -1,    -1,  1586,  1587,
      -1,    -1,    -1,   663,   664,   665,   666,    -1,  1596,    -1,
    1598,  1599,    -1,    -1,  1602,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1610,    -1,    -1,  1613,    -1,    -1,    -1,  1808,
      -1,   691,   692,   693,    -1,    -1,   696,    -1,    -1,    -1,
      -1,    -1,   702,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     710,    -1,    -1,    -1,    -1,    -1,    -1,   717,   718,   719,
      -1,   721,   722,    -1,    -1,    -1,    -1,    -1,   728,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   739,
      -1,    -1,   742,    -1,    -1,    -1,    -1,    -1,    -1,   749,
      -1,    -1,   752,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1586,  1587,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1596,    -1,  1598,  1599,    -1,    -1,  1602,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1610,    -1,    -1,  1613,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   270,    -1,    -1,    -1,
      -1,    -1,   832,    -1,    -1,  1763,    -1,    -1,    -1,    -1,
     835,   836,   837,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1779,    -1,  1781,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   858,   859,   860,    -1,   867,     0,    -1,
      -1,    -1,    -1,    -1,    -1,   875,   876,  1805,    -1,  1807,
     324,    -1,    -1,   883,    -1,    -1,   886,   887,   888,    -1,
     890,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1830,  1831,  1832,  1833,    -1,    -1,  1836,    -1,
      -1,    -1,  1840,  1841,    -1,  1843,    -1,  1845,    -1,    51,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1857,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   933,    -1,
      -1,   941,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    83,    84,    -1,    -1,    -1,    88,   957,    -1,    -1,
      -1,    93,    -1,   958,    -1,    -1,    -1,    -1,   100,   101,
     965,   966,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   976,    -1,    -1,    -1,    -1,   118,    -1,    -1,    -1,
      -1,    -1,   436,    -1,    -1,    -1,   996,   997,   998,   131,
      -1,    -1,    -1,    -1,  1004,  1830,  1831,  1832,  1833,    -1,
      -1,  1836,    -1,    -1,    -1,  1840,  1841,    -1,  1843,    -1,
    1845,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1857,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1970,  1971,  1972,  1973,  1974,    -1,    -1,    -1,
     182,    -1,    -1,    -1,    -1,    -1,  1984,  1985,  1986,  1987,
      -1,    -1,    -1,   195,    -1,    -1,    -1,  1995,  1063,    -1,
      -1,    -1,    -1,  1068,    -1,    -1,  2004,    -1,  2006,  1074,
      -1,    -1,    -1,    -1,    -1,  1080,    -1,    -1,    -1,   221,
      -1,  1086,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1104,    -1,    -1,  1107,    -1,    -1,
    1110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1123,  2052,  2053,    -1,    -1,    -1,    -1,
      -1,  2059,  2060,   265,    -1,  2063,    -1,  2065,    -1,    -1,
    2068,    -1,    -1,    -1,  2072,    -1,   278,    -1,  1148,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,   290,    -1,
      -1,    -1,  1162,  1163,  1164,  1165,    -1,    -1,    -1,    -1,
    1995,    -1,    -1,    -1,    -1,    -1,    -1,  2105,    -1,  2004,
      -1,  2006,    -1,    -1,    -1,  1185,    -1,  1187,    -1,    -1,
      -1,    -1,   636,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1201,    -1,    -1,  1204,  2133,    -1,    -1,   652,    -1,
    1205,  1206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   663,
     664,   665,   666,    -1,  1224,    -1,    -1,    -1,    -1,    -1,
      -1,  1231,    -1,    -1,  2059,  2060,    -1,    -1,  2063,    -1,
    2065,    -1,    -1,  2068,    -1,    -1,    -1,  2072,  1248,  1249,
      -1,    -1,    -1,    -1,    -1,  1255,  1256,    -1,   702,  1259,
    1260,   705,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2105,    -1,    -1,    -1,   728,    -1,   418,    -1,    -1,   733,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   436,   327,    -1,    -1,  2133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   760,    -1,    -1,    -1,
      -1,    -1,   344,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,    -1,
      -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   798,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   806,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   510,    -1,
      -1,    -1,   826,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   526,   527,   528,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1401,  1402,    -1,    -1,
      -1,    -1,   544,   545,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1417,    -1,    -1,    -1,  1421,    -1,    -1,    -1,
      -1,    -1,    -1,   565,    -1,   567,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   888,    -1,   578,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1463,    -1,    -1,  1466,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,    -1,    -1,    -1,    -1,  1484,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1495,  1496,  1497,  1498,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   689,    -1,    -1,
      -1,    -1,    -1,    -1,   696,    -1,  1566,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1580,  1581,    -1,    -1,    65,   717,  1586,  1587,    -1,   721,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,  1599,
      -1,    -1,  1602,    84,    85,    -1,    -1,   739,    -1,    -1,
    1610,    -1,    -1,    -1,   636,    -1,    -1,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,    -1,    -1,   130,
    1645,   132,   133,    -1,   135,   136,   137,   138,   139,   140,
     141,   142,   143,  1107,    -1,    -1,  1110,  1111,  1112,    -1,
    1114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1122,    -1,
      -1,    -1,    -1,  1678,    -1,  1680,  1130,    -1,  1683,    -1,
      -1,    -1,    -1,  1137,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1701,    -1,    -1,  1148,    -1,    -1,    -1,    -1,    -1,
      -1,  1155,    -1,    -1,    -1,    -1,  1160,    -1,  1162,  1163,
    1164,  1165,    -1,    -1,    -1,    -1,    -1,    -1,   860,   861,
      -1,    -1,    -1,    -1,    -1,   867,   758,    -1,    -1,    -1,
      -1,    -1,    -1,   875,   876,    -1,    -1,  1191,    -1,  1193,
     772,   883,  1747,    -1,   886,   887,   888,    -1,    -1,    -1,
      -1,    -1,  1762,  1763,    -1,    -1,    -1,    -1,    -1,   791,
     792,   793,   794,   795,    -1,    -1,   798,   799,    -1,    -1,
      -1,  1225,   804,    -1,  1784,   807,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   927,    -1,   819,   820,   821,
     822,   823,    -1,   935,   826,   827,    -1,    -1,    -1,   941,
      92,    -1,    -1,    -1,    -1,   947,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   957,  1270,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
    1840,  1841,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1004,    -1,    -1,    -1,    -1,    -1,  1322,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1335,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,  1903,   186,   187,  1901,    -1,    -1,    -1,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,  1050,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,  1059,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   221,
      -1,    -1,  1386,    -1,    -1,   118,   119,    -1,    -1,   122,
     123,   124,    -1,    -1,   127,    -1,    -1,    -1,   131,   132,
     133,    -1,   135,   136,   137,   138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
    1975,    -1,  1977,   265,    -1,    -1,   268,   269,   270,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,   289,    -1,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,   308,    -1,    -1,    -1,
      -1,    -1,   314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,   324,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,  1201,
      -1,    -1,  1204,    -1,  1206,   100,    -1,    -1,    -1,    -1,
      -1,    -1,  1214,    -1,    -1,   110,   111,   112,   113,   114,
     115,    -1,  1224,    -1,   119,    -1,    -1,   122,    -1,  1231,
    1122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,
      -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1150,    -1,
      -1,    -1,    -1,    -1,    -1,  1157,   418,    -1,    -1,    -1,
      -1,    -1,  1586,  1587,    -1,    -1,    -1,    -1,  1592,    -1,
    1594,    -1,    -1,  1597,  1598,    -1,    -1,    -1,    -1,  1603,
    1604,    -1,  1606,    52,    -1,    -1,    -1,    -1,    -1,  1191,
      -1,  1193,  1616,    -1,  1618,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,    -1,
      -1,    -1,    -1,    -1,    83,    84,    -1,    -1,    -1,    -1,
      -1,    -1,    91,    -1,    93,    -1,  1650,    -1,    -1,    -1,
    1654,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   510,    -1,
    1252,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,    -1,    -1,    -1,   529,    -1,    -1,
      -1,    -1,    -1,    -1,   536,    -1,    -1,   539,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   183,    -1,  1428,    -1,    -1,    -1,
      92,    -1,    -1,  1435,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1443,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1464,    -1,  1466,    -1,    -1,    -1,    -1,    -1,
      -1,   230,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1818,    -1,   265,    -1,    -1,    -1,
      -1,   663,   664,   665,   666,    -1,    -1,    -1,    -1,   278,
      -1,    -1,  1836,  1837,   186,   187,    -1,    -1,    -1,   288,
    1844,   290,    -1,    -1,  1848,    -1,  1850,    -1,    -1,   691,
     692,   693,    -1,    -1,  1546,  1859,    -1,    -1,    -1,    -1,
     702,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   710,   221,
      -1,    -1,    -1,    -1,  1566,   717,   718,   719,    -1,   721,
     722,    -1,    -1,    -1,    -1,    -1,   728,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   739,    -1,  1903,
     742,    -1,    -1,    -1,    -1,    -1,    -1,   749,    -1,    -1,
     752,    -1,    -1,   265,    -1,    -1,   268,   269,   270,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,
      -1,    -1,   314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   324,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1672,    -1,    -1,    -1,    -1,    -1,    -1,   436,    -1,    -1,
     832,    -1,  1996,  1997,    -1,  1999,    -1,  2001,    -1,    -1,
    2004,  2005,  2006,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   867,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   876,    -1,    -1,    -1,    -1,    -1,
      -1,   883,    -1,    -1,    -1,    -1,   888,    -1,   890,    -1,
      -1,  1743,    -1,    -1,    -1,    -1,    -1,  2061,    -1,    -1,
    2064,    -1,    -1,    -1,    -1,    -1,   418,    -1,  2072,    -1,
      -1,    -1,    -1,  1765,    -1,    -1,    -1,   526,   527,   528,
      -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1784,    -1,    -1,   544,   545,   546,    -1,   941,
      -1,    -1,    -1,    -1,  2108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   324,    -1,    -1,   957,   565,    -1,   470,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1717,    -1,    -1,    -1,    -1,
    1722,  1723,  1724,  1725,  1726,  1727,    -1,    -1,    -1,  1731,
    1732,  1733,  1734,    -1,   996,   997,   998,    -1,   510,    -1,
      -1,    -1,  1004,    -1,   198,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   529,    -1,    -1,
      -1,    -1,    -1,    -1,   536,    -1,    -1,   539,    -1,    -1,
      -1,  1883,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   436,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   690,    -1,    -1,    -1,    -1,    -1,   696,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1104,    -1,    -1,  1107,   300,    -1,  1110,    -1,
      -1,    -1,    -1,    -1,    -1,   309,    -1,    -1,    -1,    -1,
      -1,   315,    -1,    -1,    -1,    -1,    -1,    -1,  1870,  1871,
    1872,  1873,  1874,  1875,  1876,  1877,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1148,    -1,    -1,    -1,
      -1,   663,   664,   665,   666,    -1,    -1,    -1,    -1,    -1,
    1162,  1163,  1164,  1165,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   691,
     692,   693,    -1,  1185,    -1,  1187,    -1,    -1,    -1,    -1,
     702,    -1,   386,    -1,   388,    -1,    -1,    -1,   710,  1201,
      -1,    -1,  1204,    -1,    -1,   717,   718,   719,    -1,   721,
     722,    -1,    -1,    -1,    -1,    -1,   728,    -1,    -1,    -1,
      -1,    -1,  1224,    -1,    -1,    -1,    -1,   739,    -1,  1231,
     742,    -1,    -1,    -1,    -1,    -1,    -1,   749,    -1,    -1,
     752,    -1,    -1,    -1,    -1,    -1,  1248,  1249,    -1,    -1,
      -1,    -1,    -1,  1255,  1256,    -1,    -1,  1259,  1260,    -1,
      -1,    -1,    -1,    -1,   636,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   888,
     652,    -1,    -1,    -1,   656,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   927,    -1,
     832,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     702,    -1,    -1,   705,    -1,   529,    -1,    -1,   947,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   719,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   867,   728,    -1,    -1,    -1,
      -1,   733,   734,    -1,   876,    -1,    -1,    -1,    -1,    -1,
      -1,   883,   566,    -1,    -1,    -1,   888,    -1,   890,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   760,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   798,    -1,    -1,   941,
      -1,    28,   626,    -1,   806,    -1,    -1,    -1,    -1,    -1,
      -1,  1050,  1051,    -1,    -1,   957,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   826,    -1,    -1,    -1,    -1,    -1,
      -1,  1463,    -1,    -1,  1466,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   996,   997,   998,    84,    85,    -1,
      -1,    -1,  1004,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   697,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,   888,    -1,    -1,    -1,
      -1,   118,   119,    -1,    -1,   122,   123,   124,   125,    -1,
     127,    -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,
     137,   138,    -1,    -1,    -1,    -1,    -1,    -1,   742,    -1,
      -1,    -1,    -1,    -1,    -1,   749,    -1,    -1,   752,    -1,
      -1,    -1,    -1,    -1,  1566,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1182,    -1,  1184,    -1,    -1,  1580,  1581,
      -1,    -1,    -1,    -1,  1586,  1587,     3,    -1,    -1,    -1,
      -1,    -1,  1104,    -1,    -1,  1107,    -1,  1599,  1110,    -1,
    1602,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1610,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,  1148,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
    1162,  1163,  1164,  1165,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,  1185,    -1,  1187,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,  1201,
      -1,    -1,  1204,   110,   111,   112,   113,   114,   115,  1701,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1224,    -1,    -1,    -1,    -1,    -1,    -1,  1231,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   926,    -1,   928,    -1,  1248,  1249,    -1,  1111,
    1112,    -1,  1114,  1255,  1256,    -1,    -1,  1259,  1260,    -1,
    1122,    -1,    -1,  1125,    -1,    -1,    -1,    -1,  1130,    -1,
    1762,  1763,    -1,    -1,    -1,  1137,  1138,    -1,    -1,    -1,
      -1,    -1,     1,   967,     3,     4,     5,     6,    -1,     8,
       9,    -1,  1784,  1155,  1156,    -1,    -1,    -1,  1160,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,   996,    -1,   998,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1191,
      -1,  1193,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,  1443,    -1,    65,    -1,  1840,  1841,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      79,    -1,    -1,  1225,    -1,    84,    85,    86,    -1,    88,
      89,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
    1064,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,  1270,  1271,
     129,  1903,   131,   132,   133,    -1,   135,   136,   137,   138,
    1104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1115,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,
      -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,  1547,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1322,  1463,  1324,    -1,  1466,    -1,    82,    83,    84,    -1,
      -1,    -1,    -1,  1335,  1336,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,  1207,  1386,    -1,  1388,    -1,    -1,    -1,
      -1,    -1,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1229,    -1,    -1,   164,    -1,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,  1566,  1249,    -1,   183,    -1,    -1,
      -1,    -1,  1256,    -1,    -1,    -1,  1260,    28,  1580,  1581,
      -1,    -1,    -1,    -1,  1586,  1587,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    52,    -1,  1599,    -1,    -1,
    1602,    -1,    -1,    -1,   220,   221,    -1,    -1,  1610,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    83,    84,    -1,    -1,
      -1,    -1,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   265,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,   278,    -1,    -1,    -1,    -1,   118,   119,    -1,
      -1,   122,   288,   124,   131,   132,   127,   128,   129,    -1,
      -1,   132,   133,    -1,   135,   136,   137,   138,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1701,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1808,
    1572,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   183,    -1,    -1,    -1,
    1592,  1593,  1594,  1595,    -1,  1597,  1598,    -1,    -1,    -1,
      -1,  1603,  1604,    -1,  1606,     1,  1608,     3,     4,     5,
       6,    -1,     8,     9,  1616,  1617,  1618,    -1,    -1,    -1,
    1762,  1763,    -1,    -1,   221,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,   394,  1463,
      -1,    -1,  1784,    -1,   400,    -1,    -1,    -1,  1650,  1473,
    1652,    -1,  1654,    -1,  1656,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   265,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
     436,   278,    -1,    -1,    -1,  1509,    -1,  1511,    84,    85,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,  1840,  1841,
      -1,    -1,    98,    -1,  1528,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   470,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,   119,    -1,    -1,   122,   123,   124,   125,
     486,   127,    -1,    -1,    -1,    -1,   132,   133,    -1,   135,
     136,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1581,    -1,    -1,
      -1,  1903,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     526,   527,   528,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   544,   545,
     546,    -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,
      -1,    -1,    -1,   400,    -1,    -1,    -1,   563,    -1,   565,
      -1,   567,    -1,    -1,    -1,    -1,  1818,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   580,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1837,    -1,    -1,    -1,   436,
    1842,    -1,  1844,  1845,    -1,  1847,  1848,    -1,  1850,    -1,
    1852,    -1,    -1,    -1,    -1,    -1,  1858,  1859,  1682,    -1,
    1684,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   470,  1698,  1699,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1723,
    1724,  1903,  1726,  1727,    -1,    -1,    -1,  1731,  1732,  1733,
    1734,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,    -1,    -1,   526,
     527,   528,    -1,   530,   690,    -1,   533,    -1,    -1,  1763,
     696,    -1,    -1,    -1,    -1,    -1,    -1,   544,   545,   546,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   565,    -1,
     567,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   580,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1996,  1997,    -1,  1999,  2000,  2001,
      -1,    -1,    -1,  2005,  2006,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
      -1,    -1,    -1,    -1,    -1,    -1,  1870,  1871,  1872,  1873,
    1874,  1875,  1876,  1877,    -1,    -1,    -1,    -1,    -1,  2061,
    2062,    -1,  2064,  2065,    -1,    -1,    -1,  2069,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1902,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1911,    -1,   142,
      -1,    -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,   696,
      -1,   154,    -1,    -1,    92,   158,  2108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   874,    -1,
     876,    -1,    -1,    -1,    -1,    -1,    -1,   883,    -1,    -1,
      -1,    -1,   888,   186,   187,    -1,    -1,    -1,    -1,  1963,
      -1,    -1,    -1,  1967,  1968,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,   221,    -1,
     158,   927,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     936,    -1,    -1,    -1,    -1,   941,    -1,    -1,    -1,    -1,
      -1,   947,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
      -1,   957,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   265,    -1,    -1,   268,   269,   270,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1004,    -1,
      -1,    -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,
      -1,   314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   265,    -1,   876,
     268,   269,   270,    -1,    -1,    -1,   883,    -1,    -1,    -1,
      -1,   888,    -1,    -1,  1050,  1051,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,  1060,    -1,  1062,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     308,    -1,    -1,    -1,    -1,    -1,   314,    -1,    -1,    -1,
     927,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   936,
      -1,    -1,    -1,    -1,   941,    -1,    -1,    -1,    -1,    -1,
     947,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     957,    -1,    -1,    -1,    -1,   418,    -1,    -1,    -1,    -1,
      -1,   424,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,  1004,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1182,    -1,  1184,    -1,
      -1,    -1,    -1,    -1,   487,    -1,   424,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,
      -1,    -1,    -1,  1050,  1051,    -1,   142,   510,    -1,    -1,
      -1,    -1,    -1,  1060,    -1,  1062,    -1,    -1,   154,    -1,
      -1,    -1,   158,    -1,    -1,    -1,   529,    -1,    -1,    -1,
      -1,     3,    -1,   536,    -1,    -1,   539,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,
     186,   187,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   529,    -1,    -1,    66,    -1,    68,    -1,   536,    -1,
      -1,   539,    74,    75,    -1,    -1,    78,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,   265,
      -1,    -1,   268,   269,   270,  1182,    -1,  1184,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,    -1,    -1,
     122,    -1,   124,   289,    -1,    -1,    -1,    -1,    -1,   131,
     663,   664,   665,   666,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   308,    -1,    -1,    -1,    -1,    -1,   314,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   691,   692,
     693,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   710,    -1,    -1,
      -1,    -1,    -1,    -1,   717,   718,    -1,    -1,   721,   722,
      -1,    -1,    -1,  1429,    -1,   663,   664,   665,   666,    -1,
    1436,    -1,    -1,    -1,    -1,    -1,    -1,  1443,    -1,   742,
      -1,    -1,    -1,    -1,    -1,    -1,   749,    -1,    -1,   752,
      -1,    -1,    -1,   691,   692,   693,    -1,    -1,  1464,    -1,
    1466,    -1,    -1,  1469,    -1,    -1,  1472,    -1,    -1,    -1,
      -1,    -1,   710,    -1,    -1,    -1,    -1,    -1,    -1,   717,
     718,    -1,    -1,   721,   722,    -1,    -1,    -1,   424,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    -1,    -1,    -1,   742,    -1,    -1,    -1,    -1,    -1,
      -1,   749,    -1,    -1,   752,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   832,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1547,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1555,
      -1,   487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1566,    -1,    -1,    -1,   867,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   875,   876,    -1,    -1,    -1,    -1,    -1,    -1,
     883,    -1,  1429,   886,    -1,    -1,    -1,   890,    -1,  1436,
      -1,    -1,    -1,   529,    -1,    -1,  1443,    -1,    -1,    -1,
     536,    -1,    -1,   539,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1464,    -1,  1466,
      -1,    -1,  1469,    -1,    -1,  1472,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   875,   941,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   886,    -1,
      -1,    -1,    -1,    -1,   957,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   996,   997,   998,    -1,    -1,    -1,    -1,
    1547,  1004,    -1,    -1,    -1,    -1,    -1,    -1,  1555,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1566,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   663,   664,   665,
     666,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1751,  1752,    -1,  1754,    -1,
      -1,    -1,    -1,    -1,    -1,   691,   692,   693,   996,   997,
     998,    -1,    -1,    -1,    -1,    -1,  1004,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   710,    -1,    -1,    -1,    -1,    -1,
      -1,   717,   718,    -1,    -1,   721,   722,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1104,  1808,    -1,  1107,    -1,   742,  1110,    -1,    -1,
      -1,    -1,    -1,   749,    -1,    -1,   752,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1148,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1162,
    1163,  1164,  1165,    -1,    -1,    -1,  1104,    -1,    -1,  1107,
      -1,     1,  1110,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,  1185,    -1,  1187,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,  1204,    -1,    -1,  1751,  1752,    -1,  1754,    -1,    -1,
    1148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1224,    -1,    -1,  1162,  1163,  1164,  1165,  1231,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,   875,
      -1,    71,    72,    73,    -1,  1248,  1249,  1185,    -1,  1187,
     886,    -1,  1255,  1256,    84,    85,  1259,  1260,    -1,    -1,
      -1,  1808,    -1,    -1,    -1,    -1,  1204,    -1,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,  1224,    -1,   118,   119,
      -1,    -1,   122,  1231,   124,    -1,    -1,    -1,    -1,   129,
      -1,    -1,   132,   133,   134,   135,   136,   137,   138,    -1,
    1248,  1249,    -1,    -1,    -1,    -1,    -1,  1255,  1256,    -1,
      -1,  1259,  1260,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     996,   997,   998,    -1,    -1,    -1,     1,    -1,  1004,    -1,
      -1,    -1,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1463,    -1,    -1,  1466,    -1,   100,    -1,    -1,  1104,    -1,
      -1,  1107,    -1,    -1,  1110,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,   120,   121,   122,    -1,    -1,
     125,   126,   127,   128,    -1,   130,    -1,    -1,   133,    -1,
     135,   136,   137,    -1,   139,   140,   141,   142,   143,    -1,
      -1,    -1,  1148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1463,  1162,  1163,  1164,  1165,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1185,
      -1,  1187,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1566,    -1,    -1,    -1,    -1,  1204,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1580,  1581,    -1,
      -1,    -1,    -1,  1586,  1587,    -1,    -1,    -1,  1224,    -1,
      -1,    -1,    -1,    -1,    -1,  1231,  1599,    -1,    -1,  1602,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1610,    -1,    -1,
      -1,    -1,  1248,  1249,    -1,    -1,    -1,    -1,    -1,  1255,
    1256,    -1,    -1,  1259,  1260,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1580,  1581,    -1,    -1,    -1,    -1,  1586,  1587,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1599,    -1,    -1,  1602,    -1,    -1,    -1,    -1,    -1,
      -1,     1,  1610,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    85,    -1,    -1,    -1,  1762,
    1763,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,  1784,    -1,    -1,    -1,    -1,    -1,    -1,   118,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,    -1,    -1,
     130,    -1,   132,   133,    -1,   135,   136,   137,   138,   139,
     140,   141,   142,   143,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1762,  1763,    -1,  1463,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1840,  1841,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,  1840,  1841,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,    -1,   122,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1580,  1581,   133,    -1,    -1,    -1,
    1586,  1587,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1599,    -1,    -1,  1602,    -1,    -1,    -1,
      -1,    -1,     0,     1,  1610,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1762,  1763,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,  1840,  1841,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,    -1,   135,   136,   137,
     138,   139,   140,   141,   142,   143,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,   132,   133,
      -1,   135,   136,   137,   138,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,   123,   124,
     125,    -1,   127,   128,   129,    -1,   131,   132,   133,    -1,
     135,   136,   137,   138,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,   122,   123,   124,   125,
      -1,   127,   128,   129,    -1,   131,   132,   133,    -1,   135,
     136,   137,   138,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,   123,   124,   125,    -1,
     127,   128,   129,    -1,   131,   132,   133,    -1,   135,   136,
     137,   138,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,   123,   124,   125,    -1,   127,
     128,   129,    -1,   131,   132,   133,    -1,   135,   136,   137,
     138,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,   123,   124,   125,    -1,   127,   128,
     129,    -1,   131,   132,   133,    -1,   135,   136,   137,   138,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,   122,   123,   124,   125,    -1,   127,   128,   129,
      -1,   131,   132,   133,    -1,   135,   136,   137,   138,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,   123,   124,   125,    -1,   127,   128,   129,    -1,
     131,   132,   133,    -1,   135,   136,   137,   138,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,   123,   124,   125,    -1,   127,   128,   129,    -1,   131,
     132,   133,    -1,   135,   136,   137,   138,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,    -1,   127,   128,   129,    -1,   131,   132,
     133,    -1,   135,   136,   137,   138,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,    -1,
     124,   125,    -1,   127,   128,   129,    -1,   131,   132,   133,
      -1,   135,   136,   137,   138,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,   124,
     125,    -1,   127,   128,   129,    -1,   131,   132,   133,    -1,
     135,   136,   137,   138,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,   122,    -1,   124,   125,
      -1,   127,   128,   129,    -1,   131,   132,   133,    -1,   135,
     136,   137,   138,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,
     127,   128,   129,    -1,   131,   132,   133,    -1,   135,   136,
     137,   138,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,   127,
     128,   129,    -1,   131,   132,   133,    -1,   135,   136,   137,
     138,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,   127,   128,
     129,    -1,   131,   132,   133,    -1,   135,   136,   137,   138,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,   122,    -1,   124,   125,    -1,   127,   128,   129,
      -1,   131,   132,   133,    -1,   135,   136,   137,   138,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,   124,   125,    -1,   127,   128,   129,    -1,
     131,   132,   133,    -1,   135,   136,   137,   138,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,    -1,   124,   125,    -1,   127,   128,   129,    -1,   131,
     132,   133,    -1,   135,   136,   137,   138,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,    -1,   127,   128,   129,    -1,   131,   132,
     133,    -1,   135,   136,   137,   138,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,    -1,
     124,   125,    -1,   127,   128,   129,    -1,   131,   132,   133,
      -1,   135,   136,   137,   138,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,   124,
     125,    -1,   127,   128,   129,    -1,   131,   132,   133,    -1,
     135,   136,   137,   138,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,   122,    -1,   124,   125,
      -1,   127,   128,   129,    -1,   131,   132,   133,    -1,   135,
     136,   137,   138,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,
     127,   128,   129,    -1,   131,   132,   133,    -1,   135,   136,
     137,   138,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,   127,
     128,   129,    -1,   131,   132,   133,    -1,   135,   136,   137,
     138,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,   127,   128,
     129,    -1,   131,   132,   133,    -1,   135,   136,   137,   138,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,   122,    -1,   124,   125,    -1,   127,   128,   129,
      -1,   131,   132,   133,    -1,   135,   136,   137,   138,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,   124,   125,    -1,   127,   128,   129,    -1,
     131,   132,   133,    -1,   135,   136,   137,   138,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,    -1,   124,   125,    -1,   127,   128,   129,    -1,   131,
     132,   133,    -1,   135,   136,   137,   138,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,    -1,   127,   128,   129,    -1,   131,   132,
     133,    -1,   135,   136,   137,   138,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,    -1,
     124,   125,    -1,   127,   128,   129,    -1,   131,   132,   133,
      -1,   135,   136,   137,   138,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,   124,
     125,    -1,   127,   128,   129,    -1,   131,   132,   133,    -1,
     135,   136,   137,   138,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,   122,    -1,   124,   125,
      -1,   127,   128,   129,    -1,   131,   132,   133,    -1,   135,
     136,   137,   138,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,
     127,   128,   129,    -1,   131,   132,   133,    -1,   135,   136,
     137,   138,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,   127,
     128,   129,    -1,   131,   132,   133,    -1,   135,   136,   137,
     138,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,   127,   128,
     129,    -1,   131,   132,   133,    -1,   135,   136,   137,   138,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,   122,    -1,   124,   125,    -1,   127,   128,   129,
      -1,   131,   132,   133,    -1,   135,   136,   137,   138,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,   124,   125,    -1,   127,   128,   129,    -1,
     131,   132,   133,    -1,   135,   136,   137,   138,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,   123,   124,   125,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,   136,   137,   138,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,    -1,
     124,   125,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
      -1,   135,   136,   137,   138,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,   122,    -1,   124,   125,
      -1,    -1,    -1,   129,    -1,   131,   132,   133,    -1,   135,
     136,   137,   138,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,   122,    -1,   124,   125,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,   136,   137,   138,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,    -1,   124,   125,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,   136,   137,   138,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,    -1,
     124,   125,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,   136,   137,   138,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,   122,    -1,   124,   125,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
     136,   137,   138,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,   122,    -1,   124,   125,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,   136,   137,   138,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,    -1,   124,   125,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,   136,   137,   138,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,    -1,
     124,   125,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,   136,   137,   138,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,    -1,    -1,   122,    -1,   124,   125,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
     136,   137,   138,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      -1,    -1,   122,    -1,   124,   125,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,   136,   137,   138,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,    -1,   124,   125,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,   136,   137,   138,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,    -1,    -1,   122,     1,
     124,     3,     4,     5,     6,    -1,     8,     9,   132,   133,
      -1,   135,   136,   137,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,    -1,
     122,     1,   124,     3,     4,     5,     6,    -1,     8,     9,
     132,   133,    -1,   135,   136,   137,   138,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,    -1,   118,   119,
      -1,    -1,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   132,   133,    -1,   135,   136,   137,   138,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,    -1,   118,   119,    -1,    -1,
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     132,   133,    -1,   135,   136,   137,   138,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,    -1,   118,   119,    -1,    -1,   122,     1,
     124,     3,     4,     5,     6,   129,     8,     9,   132,   133,
      -1,   135,   136,   137,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    28,    -1,   118,   119,    -1,    -1,
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     132,   133,    -1,   135,   136,   137,   138,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    -1,    88,    89,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,   118,   119,    -1,    -1,   122,   123,
     124,   125,    -1,   127,    -1,   129,    -1,   131,   132,   133,
      -1,   135,   136,   137,   138,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    -1,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,   118,   119,    -1,    -1,   122,   123,   124,   125,
      -1,   127,    -1,   129,    -1,   131,   132,   133,    -1,   135,
     136,   137,   138,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    -1,
      88,    89,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,    -1,
      -1,   129,    -1,   131,   132,   133,    -1,   135,   136,   137,
     138,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,   118,   119,
      -1,    -1,   122,    -1,   124,   125,    -1,    -1,    -1,   129,
      -1,   131,   132,   133,    -1,   135,   136,   137,   138,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,
     122,   123,   124,    -1,    -1,   127,    -1,    -1,    -1,   131,
     132,   133,    -1,   135,   136,   137,   138,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,
     127,    -1,    -1,    -1,   131,   132,   133,    -1,   135,   136,
     137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,
     122,   123,   124,   125,    -1,   127,    -1,    -1,    -1,    -1,
     132,   133,    -1,   135,   136,   137,   138,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,    -1,    -1,   122,   123,   124,   125,    -1,
     127,    -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,
     137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,
     122,   123,   124,   125,    -1,   127,    -1,    -1,    -1,    -1,
     132,   133,    -1,   135,   136,   137,   138,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,   118,   119,    -1,    -1,   122,   123,   124,   125,    -1,
     127,    -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,
     137,   138,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    65,     8,     9,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,
     122,    65,   124,   125,    -1,   127,    -1,    71,    72,    73,
     132,   133,    -1,   135,   136,   137,   138,    -1,    -1,    -1,
      84,    85,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   118,   119,    -1,    -1,   122,   123,
     124,    -1,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
      -1,   135,   136,   137,   138,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
     119,    65,    -1,   122,   123,   124,    -1,    71,    72,    73,
     129,    -1,    -1,   132,   133,    -1,   135,   136,   137,   138,
      84,    85,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   118,   119,    -1,    -1,   122,    -1,
     124,   125,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
      -1,   135,   136,   137,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    85,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   118,
     119,    -1,    -1,   122,   123,   124,    -1,    -1,   127,    -1,
      -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,   138,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,   123,
     124,   125,    71,    72,    73,    -1,    -1,    -1,   132,   133,
      -1,   135,   136,   137,   138,    84,    85,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,   127,    -1,
      -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,   138,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    85,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   118,   119,    -1,    -1,   122,   123,
     124,    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,   133,
      -1,   135,   136,   137,   138,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    65,     8,     9,    -1,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    85,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
     119,    -1,    -1,   122,    65,   124,    -1,    -1,   127,    -1,
      71,    72,    73,   132,   133,   134,   135,   136,   137,   138,
      -1,    -1,    -1,    84,    85,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   118,   119,    -1,
      -1,   122,    -1,   124,    -1,    -1,   127,    -1,    -1,    -1,
     131,   132,   133,    -1,   135,   136,   137,   138,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,    65,
       8,     9,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,   119,    -1,    -1,   122,    65,   124,    -1,
      -1,   127,    -1,    71,    72,    73,   132,   133,   134,   135,
     136,   137,   138,    -1,    -1,    -1,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,    -1,    -1,   127,
      -1,    -1,    -1,   131,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    85,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,   122,
     123,   124,    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,   127,
      -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    85,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,   122,
     123,   124,    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,   127,
      -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
     123,   124,   125,    71,    72,    73,    -1,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,   127,
      -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
     123,   124,   125,    71,    72,    73,    -1,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,    -1,    -1,   127,
      -1,    -1,    -1,   131,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    85,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,   122,
      -1,   124,    -1,    -1,   127,    -1,    -1,    -1,   131,   132,
     133,    -1,   135,   136,   137,   138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,   127,
      -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    85,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,   122,
     123,   124,    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,   127,
      -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
     123,   124,   125,    71,    72,    73,    -1,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,   127,
      -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    85,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,   122,
      -1,   124,    -1,    -1,    -1,   128,   129,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,   127,
      -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    85,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,   118,   119,    -1,    -1,   122,
     123,   124,    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,   127,
      -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
      -1,   124,    -1,    71,    72,    73,    -1,    -1,    -1,   132,
     133,   134,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
      -1,   124,    -1,    71,    72,    73,    -1,    -1,    -1,   132,
     133,   134,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   132,   133,   134,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
      -1,   124,    -1,    71,    72,    73,   129,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   132,   133,   134,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
      -1,   124,    -1,    71,    72,    73,    -1,    -1,   131,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
      -1,   124,    -1,    71,    72,    73,   129,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   132,   133,   134,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
     123,   124,    -1,    71,    72,    73,    -1,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,   131,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
      -1,   124,    -1,    71,    72,    73,   129,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
      -1,   124,    -1,    71,    72,    73,   129,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
     123,   124,    -1,    71,    72,    73,    -1,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
      -1,   129,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
     123,   124,    -1,    71,    72,    73,    -1,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,   123,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
      -1,   124,    -1,    71,    72,    73,    -1,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,    65,    -1,   122,
      -1,   124,    -1,    71,    72,    73,    -1,    -1,    -1,   132,
     133,    -1,   135,   136,   137,   138,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,     0,     1,    -1,     3,     4,     5,    -1,
     118,   119,    -1,    -1,   122,    -1,   124,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   132,   133,    -1,   135,   136,   137,
     138,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,   123,   124,   125,    -1,
     127,   128,    -1,    -1,    -1,   132,   133,     0,     1,    -1,
       3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,    -1,   127,   128,    -1,    -1,    -1,   132,
     133,     0,     1,    -1,     3,     4,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,   124,   125,     0,     1,   128,
       3,     4,     5,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,     0,     1,   128,     3,     4,     5,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,   124,   125,     0,
       1,   128,     3,     4,     5,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,   124,   125,    -1,     1,   128,     3,     4,
       5,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,   124,
     125,    -1,     1,   128,     3,     4,     5,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,     1,   128,
       3,     4,     5,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,    -1,     1,   128,     3,     4,     5,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,
       1,   128,     3,     4,     5,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,   124,   125,    -1,     1,   128,     3,     4,
       5,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,   124,
     125,    -1,     1,   128,     3,     4,     5,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,     1,   128,
       3,     4,     5,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,    -1,     1,   128,     3,     4,     5,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,
       1,   128,     3,     4,     5,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,   124,   125,    -1,     1,   128,     3,     4,
       5,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,   124,
     125,    -1,     1,   128,     3,     4,     5,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,     1,   128,
       3,     4,     5,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,    -1,     1,   128,     3,     4,     5,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,
       1,   128,     3,     4,     5,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,   124,   125,    -1,     1,   128,     3,     4,
       5,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,   124,
     125,    -1,     1,   128,     3,     4,     5,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,     1,   128,
       3,     4,     5,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,    -1,     1,   128,     3,     4,     5,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,
       1,   128,     3,     4,     5,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,   124,   125,    -1,     1,   128,     3,     4,
       5,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,   124,
     125,    -1,     1,   128,     3,     4,     5,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,     1,   128,
       3,     4,     5,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,    -1,     1,   128,     3,     4,     5,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,
       1,   128,     3,     4,     5,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,   124,   125,    -1,     1,   128,     3,     4,
       5,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,   124,
     125,    -1,     1,   128,     3,     4,     5,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,     1,   128,
       3,     4,     5,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,    -1,     1,   128,     3,     4,     5,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,
       1,   128,     3,     4,     5,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,   124,   125,    -1,     1,   128,     3,     4,
       5,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,   124,
     125,    -1,     1,   128,     3,     4,     5,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,     1,   128,
       3,     4,     5,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,    -1,     1,   128,     3,     4,     5,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,   124,   125,    -1,
       1,   128,     3,     4,     5,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,    -1,
      -1,   122,    -1,   124,   125,    -1,     1,   128,     3,     4,
       5,   132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,    -1,    -1,   122,    -1,   124,
     125,    -1,     1,   128,     3,     4,     5,   132,   133,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,    -1,    -1,   122,    -1,   124,   125,    -1,     1,   128,
       3,     4,     5,   132,   133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,    -1,    -1,   122,
      -1,   124,   125,    -1,     1,   128,     3,     4,     5,   132,
     133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,    -1,    -1,   122,    -1,   124,   125,     1,
      -1,     3,     4,     5,    -1,   132,   133,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,     1,
     122,     3,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,
     132,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,    -1,    -1,
     122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   133,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,     3,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    -1,   129,    -1,    -1,    -1,   133,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,
     129,    -1,    -1,    -1,   133,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     133,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   133,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    76,    77,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,    -1,     3,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     131,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,     1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   129,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     125,    -1,   127,   128,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,     1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   128,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   128,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
       1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   128,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,     0,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    76,    77,    -1,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,   101,     3,    -1,    -1,   105,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,    -1,   122,    -1,    -1,   125,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,     3,    -1,    -1,   107,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,     3,    -1,    -1,   107,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,     1,    -1,     3,    -1,    -1,   107,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     128,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,   100,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,    -1,   122,    -1,    -1,   125,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,   100,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
     119,    -1,    -1,   122,    -1,    -1,   125,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,   100,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,   119,    -1,
      -1,   122,    -1,    -1,   125,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,    -1,    -1,   122,
      -1,    -1,   125,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    76,    77,    -1,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,   101,    -1,     0,     1,
     105,     3,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,    -1,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,    -1,    -1,
     122,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,    -1,    -1,   122,   123,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
      -1,    -1,   123,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,    -1,    -1,    -1,   123,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,    -1,    -1,    -1,   123,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,
     123,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,   123,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
      -1,    -1,   123,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,    -1,   122,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
      -1,    -1,   122,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,    -1,    -1,   122,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
      -1,    -1,   122,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,    -1,   122,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
      -1,    -1,   122,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,    -1,    -1,   122,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,    -1,   122,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,   119,    -1,    -1,   122,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
      -1,    -1,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   133,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   129,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   128,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    53,    65,    66,    74,    75,
      76,    77,    79,    80,    81,    82,    83,    85,    86,    87,
     100,   101,   105,   110,   111,   112,   113,   114,   115,   116,
     117,   119,   122,   125,   145,   146,   147,   149,   174,   211,
     212,   213,   214,   215,   216,   268,   271,   272,   275,   276,
     277,   278,   279,   280,   281,   283,   287,   290,   291,   292,
     293,   294,   295,   300,   301,   310,   311,   312,   319,   320,
     324,   327,   332,   361,   364,   365,   383,   384,   386,   387,
     388,   389,   390,   391,    77,   131,     5,    31,   216,   385,
     216,   122,   122,   122,   149,   216,   385,   281,   282,   319,
     327,    37,   147,   216,   309,   310,   312,   314,   315,   316,
     318,   319,   327,   330,   331,   336,   120,   125,   146,   147,
     216,   129,   131,   125,   129,   128,   119,   120,   211,   216,
     129,   149,   216,   129,   131,   128,   120,   129,   131,   129,
     128,   129,   147,   216,   319,     1,    31,    37,    38,   125,
     145,   147,   213,   215,   216,   268,   278,   279,   281,   283,
     312,   316,   319,   327,   330,   331,   332,   334,   342,   343,
     344,   345,    37,    38,   147,   319,   344,   122,   133,     1,
      29,    30,    31,    32,    33,    65,   116,   117,   123,   145,
     216,   267,   271,   273,   274,   281,   283,   287,   288,   289,
     295,   299,   307,   308,   348,   349,   350,   351,   352,   353,
     327,   122,   312,   319,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    46,    47,    66,    85,    87,   100,
     112,   113,   114,   115,   129,   149,   170,   171,   267,   272,
     273,   281,   284,   288,   290,   298,   363,   366,   367,   368,
     373,   374,   375,    31,    76,   131,   213,   215,   300,   364,
     365,   383,   384,   391,     1,   213,   277,   294,   300,   332,
     361,   387,     1,   386,   387,     0,   216,   385,   385,     5,
     126,   385,     1,     4,     6,     8,     9,    65,    71,    72,
      73,    84,    85,    98,   102,   103,   104,   105,   106,   107,
     108,   109,   118,   119,   122,   124,   132,   133,   135,   136,
     137,   138,   149,   175,   176,   216,   217,   218,   219,   220,
     223,   224,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   385,   397,   398,   399,   400,   146,
     216,   129,   149,   216,   281,   327,   133,   122,   133,   123,
     307,   308,   352,   353,   327,   330,   331,   309,   314,   318,
     319,   123,   319,   123,   319,   319,    85,   149,   201,   203,
     205,   209,   210,   216,   228,   233,   249,   253,   299,   125,
     120,   120,   125,     1,    68,    78,    80,    81,    88,    91,
      92,    93,    94,    96,    98,    99,   122,   124,   125,   128,
     150,   151,   152,   153,   154,   155,   156,   157,   172,   173,
     175,   176,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   192,   196,   197,   198,   199,   216,   224,   247,
     299,   311,   313,   319,   327,   332,   333,   362,    80,    81,
     216,   267,   271,   281,   284,   287,   295,   302,   303,     1,
     128,   198,   199,   147,   216,     1,   216,   269,   270,     1,
     128,   270,   303,    65,   202,   204,   206,   207,   208,   216,
     299,     1,   128,   198,   199,   303,     1,   128,   198,   199,
       1,   128,   198,   199,   147,   216,   127,   127,   127,   129,
     327,   312,   316,   319,     1,   126,   367,   374,   375,   367,
     374,   375,     1,   125,   127,   127,   327,   125,   134,   146,
     216,   242,   261,   265,   266,   127,   129,   149,   216,   128,
     129,   128,   129,   319,    37,   122,   133,   135,   145,   147,
     216,   267,   273,   281,   283,   288,   309,   310,   319,   325,
     327,   328,   331,     1,   123,   127,     1,   123,   127,     1,
     127,     1,   127,   123,   123,   312,   122,   312,   122,   122,
       1,   125,     1,   128,     1,    37,    38,   125,   216,   267,
     273,   281,   284,   288,   319,   344,   345,     1,   125,     1,
     363,   366,   374,   375,   363,   366,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    85,    86,    88,
      89,    90,   125,   131,   149,   193,   194,   195,   216,   224,
     228,   243,   245,   249,   261,   262,   263,   324,   354,   355,
     358,   359,   360,   367,   368,   369,   370,   371,   372,   374,
     375,   377,   378,   379,   380,   381,   382,   128,    31,   216,
     385,   216,   211,   212,   214,   215,   309,   310,   316,   319,
     327,   332,   334,   367,   375,   213,   300,   126,   241,   242,
     260,   123,   122,   228,   249,   122,   228,   249,   228,   249,
     122,   216,   267,   273,   281,   284,   288,   306,   265,   122,
     122,   306,   265,   122,   122,   122,   122,   122,   122,   228,
     249,   123,   243,   245,   263,   273,   281,   283,   288,   296,
     346,   385,   129,   134,   177,   178,   221,   225,   243,   129,
       1,   128,   129,   216,     1,     7,     8,     9,   122,   130,
     133,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,   126,   244,   178,   221,   222,   230,   250,   119,   139,
     140,   136,   137,    10,    11,   233,   253,    12,    13,   120,
     121,    14,    15,   135,   141,   142,    16,    17,   143,   244,
     123,     7,     8,     9,   122,   130,   133,   244,   119,   139,
     140,   136,   137,    10,    11,    12,    13,   120,   121,    14,
      15,   135,   141,   142,    16,    17,   143,   244,   123,   123,
     107,   216,   299,   392,   395,   396,   129,   129,   134,   146,
     265,   266,   134,   146,   265,   266,   123,   123,   123,   123,
     309,   314,   318,   123,   123,   309,    11,   121,   127,   126,
     122,   319,   327,   328,    65,   208,   216,   299,   208,     1,
     216,   267,   281,   284,   295,   304,   299,   332,   333,   122,
     149,   216,   216,   299,     1,   122,   304,   119,   122,   216,
     299,   125,   324,   374,   375,   374,   375,   374,   125,   374,
     375,   125,     1,   128,     1,     1,   125,   127,   127,    69,
      70,    91,    95,    97,   128,    69,    70,   128,   125,     1,
     196,   197,     1,   196,   197,     1,   126,   122,   131,   216,
     285,   286,   309,   315,   317,   319,   327,   334,   335,   336,
       1,   299,   307,   350,   327,   313,   319,   122,   131,   156,
     157,   172,   173,   175,   176,   185,   216,   299,   120,   149,
     216,   216,   267,   281,   284,   120,   120,   126,   127,     1,
     125,   129,    28,   148,   216,   121,   127,   126,   216,   328,
     330,   342,   342,   342,   125,   127,   128,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   221,
     222,   224,   242,   261,   298,   339,   340,   309,   312,   314,
     316,   318,   309,   316,   129,   243,   262,   337,   338,   374,
     375,   374,   375,   342,   343,   342,   343,   134,   134,   134,
      51,   348,   349,     1,   270,   129,   129,     1,   128,   198,
     199,     1,   128,   198,   199,   129,   123,   216,   307,   308,
     319,   327,   328,   352,   353,   134,   146,   265,   266,   319,
     327,   331,   327,   122,   133,   325,     1,     1,   127,     1,
      51,   216,   348,   349,   127,     1,    51,   216,   348,   349,
     127,     1,    51,   216,   348,   349,   127,    51,   216,   348,
     349,     3,    28,    44,    74,    75,   123,   321,   322,   323,
     243,   146,   216,   128,   129,   125,   125,   131,   265,   266,
     131,   122,   122,     1,   122,    52,    53,    54,    56,    57,
      58,    59,    62,    86,   216,   263,   324,   354,   377,   381,
     122,   216,   125,   125,   125,   221,   222,   245,   263,   122,
     281,   122,   122,   189,   216,   125,   125,   125,   131,   130,
     244,     1,   130,   125,   127,   245,   263,   244,   123,   127,
     245,     1,   369,   370,   369,   370,   354,   355,   363,   366,
     354,   355,   363,   366,     1,     1,   385,   385,   147,   216,
     129,   129,   327,   316,   319,   367,   375,   367,   375,   375,
     242,   143,   125,   143,    65,   145,   216,   273,   281,   283,
     288,   297,   347,   216,   298,   120,   122,   133,   216,   267,
     273,   281,   284,   288,   319,   326,   327,   329,   216,   267,
     273,   281,   284,   288,   305,   245,   346,   374,   216,   133,
     329,   305,   243,   385,   385,   385,   243,   347,   123,   216,
     273,   281,   283,   288,   328,   123,   130,     1,   168,   169,
       1,   128,   127,   134,     1,   168,   169,   128,     1,   168,
     169,     1,   216,   123,   222,   225,   226,   262,     1,   216,
     245,   263,   221,   243,     1,   230,   250,   230,   250,   230,
     250,   231,   251,   231,   251,   232,   252,   232,   252,   233,
     253,   233,   253,   233,   253,   221,   222,   235,   254,   221,
     222,   235,   254,   221,   222,   236,   255,   221,   222,   237,
     256,   221,   222,   238,   257,   239,   258,   240,   259,   131,
     221,   222,   245,   246,   263,   264,   221,   243,     1,   216,
     123,   225,   226,     1,   216,   245,   263,   221,   243,   230,
     250,   230,   250,   230,   250,   231,   251,   231,   251,   232,
     252,   232,   252,   233,   253,   233,   253,   233,   253,   233,
     253,   221,   222,   235,   254,   221,   222,   235,   254,   221,
     222,   236,   255,   221,   222,   237,   256,   221,   222,   238,
     257,   239,   258,   240,   259,   131,   245,   246,   263,   264,
     221,   243,   120,   121,   216,   393,   394,   216,   128,   392,
     395,   396,   396,   134,   134,   134,   134,   134,   134,   209,
     201,   203,   205,   216,   319,   327,   121,   126,   328,   121,
     129,   120,   129,   216,   267,   281,   284,   328,   319,   327,
     334,   335,   189,   286,   309,   319,   327,   129,   216,   129,
     216,   328,   216,   319,   122,   125,   128,   179,   180,   179,
     180,   374,   374,   374,   218,   374,   374,     1,   339,   340,
     123,   265,   266,   129,   127,     1,   299,   307,   350,   327,
     309,   317,   319,   131,   324,   216,   122,   313,   313,   216,
       1,     1,   286,   210,   120,   208,   208,   265,   266,   269,
     198,   199,     1,   128,   270,   126,   131,   126,   131,   207,
     203,   216,   126,   216,   126,   374,   375,     1,   125,   127,
     125,   127,   125,   160,   161,   164,   165,   166,   128,   158,
     161,   125,   128,   160,   161,   164,   165,   166,   126,    37,
     334,   335,   336,   337,   338,   341,     1,   128,   270,     1,
     128,   270,     1,   128,   198,   199,   319,   327,   328,   123,
     123,   123,   134,   134,   134,   327,   325,   123,   352,   353,
     134,   146,   265,   266,   348,   349,   299,   348,   348,   348,
     349,   123,   122,   123,   127,   322,   123,   123,   123,     1,
     168,   169,   354,   355,   363,   366,   131,   131,   354,   355,
     363,   366,   245,   263,   245,   263,   123,   245,   263,   131,
     265,   266,   131,   122,   122,   354,   122,   222,   263,   122,
     131,    56,     1,   123,   125,   216,   245,   263,   376,   125,
     125,   125,   125,   125,   385,   122,   243,   243,   216,   354,
     355,   363,   366,    90,   222,   262,    88,    89,    90,   243,
     262,   222,   262,   243,   262,   120,   316,   375,   375,   125,
     245,   246,   263,   264,   245,   246,   263,   264,   145,   146,
     145,   273,   281,   283,   288,   328,   123,   123,   123,   328,
     210,   123,   319,   329,   352,   353,   265,   266,   120,   327,
     122,   326,   133,   120,   133,   216,   267,   273,   281,   284,
     288,   329,   123,   123,   123,   123,   265,   266,   133,   133,
     329,   127,   123,   127,   127,   127,   123,   230,   250,   385,
       1,   128,   221,   243,     1,     1,   123,   127,   123,   134,
     134,     1,   127,   131,   131,   127,   131,   131,   123,   134,
     134,   131,   131,   131,   131,   216,   216,   125,   127,   216,
     385,   128,   128,   319,   327,   203,   210,   120,   129,   129,
     216,   327,   319,   123,   327,   309,   123,   129,   129,   216,
     123,     1,   168,   169,   285,   319,   216,   122,   309,   317,
     317,   265,   266,   122,   123,   121,   210,   121,   121,   125,
       1,   125,   201,   200,   299,   201,   200,   205,   126,   129,
       1,   162,   163,     1,   162,   163,   375,     1,   339,   340,
     127,   128,   337,   338,     1,   125,     1,   125,   327,   325,
     123,   123,   123,   134,   134,   134,   328,   331,   245,   123,
     322,     1,   354,   355,   363,   366,   354,   355,   363,   366,
     123,   123,   123,   123,     1,   354,   123,   245,   354,   355,
     131,   131,   263,   123,   245,   263,    56,   263,   376,   385,
     122,   354,   131,   125,     1,   125,     1,   123,   263,   376,
       3,   123,   131,   385,   123,   123,   127,   122,   122,   189,
     131,   131,   131,   131,   131,   131,   131,   131,   123,   123,
       1,   123,   121,   319,   327,   329,   123,   123,   123,   134,
     134,   210,   326,   123,   352,   353,   265,   266,   210,   265,
     266,   120,   133,   122,   337,   134,   134,   265,   266,   265,
     266,   133,   346,   216,   216,   243,     1,   222,   262,   221,
     222,   221,   222,   242,   260,   221,   222,   242,   260,   221,
     222,   221,   222,   242,   260,   221,   222,   242,   260,   221,
     222,   242,   260,   221,   222,   242,   260,   221,   222,   242,
     260,   221,   222,   242,   260,   393,   125,   125,   121,   210,
     129,   374,   309,   126,   129,     1,   122,   131,   131,   121,
     198,   199,   125,   198,   199,   126,   328,   126,   205,   341,
     128,   337,   338,     1,   198,   199,   198,   199,   123,   354,
     354,   354,   354,   354,   355,   123,   122,   376,   123,   245,
     263,   245,   354,     1,   123,   245,   263,   133,   356,   357,
     385,   125,   357,     3,   123,   131,   129,   189,   243,   243,
       1,     1,   326,   123,   121,   123,   123,   134,   134,   121,
     134,   134,   210,   265,   266,   346,   134,   134,   134,   134,
     265,   266,   123,   123,   123,   123,   121,   339,   265,   266,
     265,   266,   198,   199,   201,   201,   127,   128,     1,    64,
      64,   245,   263,   123,   245,   263,   123,   125,   123,   125,
     354,   355,   123,   354,   355,   216,   123,   127,   131,   122,
       3,   123,   131,   357,   125,   357,    73,   189,   190,   191,
     123,   123,   123,   127,   121,   134,   134,   123,   134,   134,
     125,   128,   354,   354,   123,   123,   125,   354,   245,   354,
     355,   134,   125,   356,   357,   243,   357,   125,   357,   123,
     131,     3,   123,   131,   374,   374,   128,   190,   129,   189,
     230,   250,   337,   123,   385,   123,   123,   123,   123,   131,
     125,   357,   357,   125,   357,   191,   123,   354,   122,   125,
     125,   125,   357,   123,   123,   123,   131,   128,   243,   123,
     125,   125,   125,   357,   123,   125,   123,   125
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 145: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11335 "grammar.ec"
	break;
      case 146: /* "type" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11344 "grammar.ec"
	break;
      case 147: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11353 "grammar.ec"
	break;
      case 148: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 11362 "grammar.ec"
	break;
      case 149: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11371 "grammar.ec"
	break;
      case 150: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11380 "grammar.ec"
	break;
      case 151: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11389 "grammar.ec"
	break;
      case 152: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11398 "grammar.ec"
	break;
      case 153: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11407 "grammar.ec"
	break;
      case 154: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11416 "grammar.ec"
	break;
      case 155: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11425 "grammar.ec"
	break;
      case 156: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11434 "grammar.ec"
	break;
      case 157: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11443 "grammar.ec"
	break;
      case 158: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11452 "grammar.ec"
	break;
      case 159: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11461 "grammar.ec"
	break;
      case 160: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11470 "grammar.ec"
	break;
      case 161: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11479 "grammar.ec"
	break;
      case 162: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11488 "grammar.ec"
	break;
      case 163: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11497 "grammar.ec"
	break;
      case 164: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11506 "grammar.ec"
	break;
      case 165: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11515 "grammar.ec"
	break;
      case 166: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11524 "grammar.ec"
	break;
      case 167: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11533 "grammar.ec"
	break;
      case 168: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11542 "grammar.ec"
	break;
      case 169: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11551 "grammar.ec"
	break;
      case 170: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11560 "grammar.ec"
	break;
      case 171: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11569 "grammar.ec"
	break;
      case 175: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11578 "grammar.ec"
	break;
      case 176: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11587 "grammar.ec"
	break;
      case 179: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11596 "grammar.ec"
	break;
      case 180: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11605 "grammar.ec"
	break;
      case 181: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11614 "grammar.ec"
	break;
      case 182: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11623 "grammar.ec"
	break;
      case 185: /* "property" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 11632 "grammar.ec"
	break;
      case 196: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11641 "grammar.ec"
	break;
      case 197: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11650 "grammar.ec"
	break;
      case 198: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11659 "grammar.ec"
	break;
      case 199: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11668 "grammar.ec"
	break;
      case 200: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 11677 "grammar.ec"
	break;
      case 201: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11686 "grammar.ec"
	break;
      case 202: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11695 "grammar.ec"
	break;
      case 203: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11704 "grammar.ec"
	break;
      case 204: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11713 "grammar.ec"
	break;
      case 205: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11722 "grammar.ec"
	break;
      case 206: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11731 "grammar.ec"
	break;
      case 207: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11740 "grammar.ec"
	break;
      case 208: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 11749 "grammar.ec"
	break;
      case 209: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11758 "grammar.ec"
	break;
      case 210: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 270 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 11767 "grammar.ec"
	break;
      case 211: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11776 "grammar.ec"
	break;
      case 212: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11785 "grammar.ec"
	break;
      case 213: /* "class" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11794 "grammar.ec"
	break;
      case 214: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11803 "grammar.ec"
	break;
      case 215: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11812 "grammar.ec"
	break;
      case 216: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 11821 "grammar.ec"
	break;
      case 217: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11830 "grammar.ec"
	break;
      case 218: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11839 "grammar.ec"
	break;
      case 223: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11848 "grammar.ec"
	break;
      case 224: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11857 "grammar.ec"
	break;
      case 225: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11866 "grammar.ec"
	break;
      case 226: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11875 "grammar.ec"
	break;
      case 228: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11884 "grammar.ec"
	break;
      case 230: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11893 "grammar.ec"
	break;
      case 231: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11902 "grammar.ec"
	break;
      case 232: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11911 "grammar.ec"
	break;
      case 233: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11920 "grammar.ec"
	break;
      case 235: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11929 "grammar.ec"
	break;
      case 236: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11938 "grammar.ec"
	break;
      case 237: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11947 "grammar.ec"
	break;
      case 238: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11956 "grammar.ec"
	break;
      case 239: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11965 "grammar.ec"
	break;
      case 240: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11974 "grammar.ec"
	break;
      case 241: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11983 "grammar.ec"
	break;
      case 242: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11992 "grammar.ec"
	break;
      case 243: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12001 "grammar.ec"
	break;
      case 245: /* "expression" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12010 "grammar.ec"
	break;
      case 247: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12019 "grammar.ec"
	break;
      case 249: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12028 "grammar.ec"
	break;
      case 250: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12037 "grammar.ec"
	break;
      case 251: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12046 "grammar.ec"
	break;
      case 252: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12055 "grammar.ec"
	break;
      case 253: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12064 "grammar.ec"
	break;
      case 254: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12073 "grammar.ec"
	break;
      case 255: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12082 "grammar.ec"
	break;
      case 256: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12091 "grammar.ec"
	break;
      case 257: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12100 "grammar.ec"
	break;
      case 258: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12109 "grammar.ec"
	break;
      case 259: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12118 "grammar.ec"
	break;
      case 260: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12127 "grammar.ec"
	break;
      case 261: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12136 "grammar.ec"
	break;
      case 262: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12145 "grammar.ec"
	break;
      case 263: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12154 "grammar.ec"
	break;
      case 265: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12163 "grammar.ec"
	break;
      case 266: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 202 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12172 "grammar.ec"
	break;
      case 267: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12181 "grammar.ec"
	break;
      case 268: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12190 "grammar.ec"
	break;
      case 269: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 218 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 12199 "grammar.ec"
	break;
      case 270: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 12208 "grammar.ec"
	break;
      case 272: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12217 "grammar.ec"
	break;
      case 273: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12226 "grammar.ec"
	break;
      case 274: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12235 "grammar.ec"
	break;
      case 276: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12244 "grammar.ec"
	break;
      case 277: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12253 "grammar.ec"
	break;
      case 278: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12262 "grammar.ec"
	break;
      case 279: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12271 "grammar.ec"
	break;
      case 280: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12280 "grammar.ec"
	break;
      case 281: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12289 "grammar.ec"
	break;
      case 282: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12298 "grammar.ec"
	break;
      case 283: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12307 "grammar.ec"
	break;
      case 284: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12316 "grammar.ec"
	break;
      case 285: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12325 "grammar.ec"
	break;
      case 286: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 12334 "grammar.ec"
	break;
      case 287: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12343 "grammar.ec"
	break;
      case 288: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12352 "grammar.ec"
	break;
      case 289: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12361 "grammar.ec"
	break;
      case 290: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12370 "grammar.ec"
	break;
      case 291: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12379 "grammar.ec"
	break;
      case 292: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12388 "grammar.ec"
	break;
      case 293: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12397 "grammar.ec"
	break;
      case 294: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12406 "grammar.ec"
	break;
      case 296: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12415 "grammar.ec"
	break;
      case 297: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12424 "grammar.ec"
	break;
      case 298: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12433 "grammar.ec"
	break;
      case 299: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12442 "grammar.ec"
	break;
      case 300: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12451 "grammar.ec"
	break;
      case 301: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12460 "grammar.ec"
	break;
      case 302: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12469 "grammar.ec"
	break;
      case 303: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12478 "grammar.ec"
	break;
      case 307: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12487 "grammar.ec"
	break;
      case 308: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12496 "grammar.ec"
	break;
      case 309: /* "direct_declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12505 "grammar.ec"
	break;
      case 310: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12514 "grammar.ec"
	break;
      case 311: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12523 "grammar.ec"
	break;
      case 312: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12532 "grammar.ec"
	break;
      case 313: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12541 "grammar.ec"
	break;
      case 314: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12550 "grammar.ec"
	break;
      case 315: /* "direct_declarator_function_start_type_ok" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12559 "grammar.ec"
	break;
      case 316: /* "direct_declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12568 "grammar.ec"
	break;
      case 317: /* "direct_declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12577 "grammar.ec"
	break;
      case 318: /* "direct_declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12586 "grammar.ec"
	break;
      case 319: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 273 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 12595 "grammar.ec"
	break;
      case 321: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12604 "grammar.ec"
	break;
      case 322: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 274 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 12613 "grammar.ec"
	break;
      case 323: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 275 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 12622 "grammar.ec"
	break;
      case 324: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 272 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 12631 "grammar.ec"
	break;
      case 325: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12640 "grammar.ec"
	break;
      case 326: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12649 "grammar.ec"
	break;
      case 327: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 201 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 12658 "grammar.ec"
	break;
      case 328: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12667 "grammar.ec"
	break;
      case 329: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12676 "grammar.ec"
	break;
      case 330: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12685 "grammar.ec"
	break;
      case 331: /* "declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12694 "grammar.ec"
	break;
      case 332: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12703 "grammar.ec"
	break;
      case 333: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12712 "grammar.ec"
	break;
      case 334: /* "declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12721 "grammar.ec"
	break;
      case 335: /* "declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12730 "grammar.ec"
	break;
      case 336: /* "declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12739 "grammar.ec"
	break;
      case 337: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12748 "grammar.ec"
	break;
      case 338: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12757 "grammar.ec"
	break;
      case 339: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12766 "grammar.ec"
	break;
      case 340: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12775 "grammar.ec"
	break;
      case 341: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 12784 "grammar.ec"
	break;
      case 342: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12793 "grammar.ec"
	break;
      case 343: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12802 "grammar.ec"
	break;
      case 344: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12811 "grammar.ec"
	break;
      case 345: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12820 "grammar.ec"
	break;
      case 346: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12829 "grammar.ec"
	break;
      case 347: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12838 "grammar.ec"
	break;
      case 348: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12847 "grammar.ec"
	break;
      case 349: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12856 "grammar.ec"
	break;
      case 350: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12865 "grammar.ec"
	break;
      case 351: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12874 "grammar.ec"
	break;
      case 352: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12883 "grammar.ec"
	break;
      case 353: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12892 "grammar.ec"
	break;
      case 354: /* "statement" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12901 "grammar.ec"
	break;
      case 355: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12910 "grammar.ec"
	break;
      case 359: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12919 "grammar.ec"
	break;
      case 360: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12928 "grammar.ec"
	break;
      case 361: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 271 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 12937 "grammar.ec"
	break;
      case 363: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 12946 "grammar.ec"
	break;
      case 367: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12955 "grammar.ec"
	break;
      case 368: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12964 "grammar.ec"
	break;
      case 369: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12973 "grammar.ec"
	break;
      case 370: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12982 "grammar.ec"
	break;
      case 371: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12991 "grammar.ec"
	break;
      case 372: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13000 "grammar.ec"
	break;
      case 373: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 13009 "grammar.ec"
	break;
      case 374: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13018 "grammar.ec"
	break;
      case 375: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13027 "grammar.ec"
	break;
      case 376: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13036 "grammar.ec"
	break;
      case 377: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13045 "grammar.ec"
	break;
      case 378: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13054 "grammar.ec"
	break;
      case 379: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13063 "grammar.ec"
	break;
      case 380: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13072 "grammar.ec"
	break;
      case 381: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13081 "grammar.ec"
	break;
      case 382: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13090 "grammar.ec"
	break;
      case 383: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13099 "grammar.ec"
	break;
      case 384: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13108 "grammar.ec"
	break;
      case 385: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 13117 "grammar.ec"
	break;
      case 386: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13126 "grammar.ec"
	break;
      case 387: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13135 "grammar.ec"
	break;
      case 388: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13144 "grammar.ec"
	break;
      case 389: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13153 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 283 "grammar.y"
    {
      (yyval.specifier) = null;
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(name);
      }
      else
         _DeclClass((yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 312 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(name);
      }
      else
         _DeclClass((yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 370 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 372 "grammar.y"
    {
   #ifdef PRECOMPILER
      if(!(yyvsp[(1) - (2)].id).string[0])
      {
         (yyval.specifier) = MkSpecifierName((yyvsp[(1) - (2)].id).string);
         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));
      }
      else
      {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (2)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (2)].id).string);
            _DeclClass(name);
         }
         else
            _DeclClass((yyvsp[(1) - (2)].id).string);

         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         goto yysetstate;
   #else
         Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
         Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
         yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
      }
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 481 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 485 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 489 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 491 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 540 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 542 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 547 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (3)].list), null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 552 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (4)].list), null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 557 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 559 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 564 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 566 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 571 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 573 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 578 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 580 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 582 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 584 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 586 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 590 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 594 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 607 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 609 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 611 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 613 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 615 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 621 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 623 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 628 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 633 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 638 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 640 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 642 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 646 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 647 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 651 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 653 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 663 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 667 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 669 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 671 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 675 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 677 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 679 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 682 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 694 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 705 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 724 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 726 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 730 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 731 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 732 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 733 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 734 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 735 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 63:

/* Line 1464 of yacc.c  */
#line 738 "grammar.y"
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[(2) - (2)]);
      }
      (yyval.list) = (yyvsp[(1) - (2)].list);
   ;}
    break;

  case 64:

/* Line 1464 of yacc.c  */
#line 750 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 755 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 756 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 757 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 761 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 762 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 763 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 764 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 765 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 766 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 767 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 772 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 774 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 779 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 781 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 783 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 785 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 787 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 817 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 819 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 824 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 826 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 828 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 830 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 832 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 861 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 863 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 865 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 870 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 872 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 877 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 879 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 883 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 885 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 887 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 889 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 894 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 897 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 900 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 903 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 968 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 970 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 975 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 977 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 979 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 981 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 983 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 1013 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 1017 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 1018 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 1019 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 1023 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 1024 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 1025 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 1029 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 1030 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 121:

/* Line 1464 of yacc.c  */
#line 1031 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 1037 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 1040 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 1043 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 1046 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 127:

/* Line 1464 of yacc.c  */
#line 1049 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 1055 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 1057 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 1059 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 1061 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 1063 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 1067 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1072 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1075 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1078 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1081 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 139:

/* Line 1464 of yacc.c  */
#line 1084 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1090 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1092 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1096 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1101 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1103 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1108 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1110 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1117 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1127 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1129 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1134 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1136 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1138 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1140 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1145 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1147 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1149 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1151 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1155 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1156 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1157 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1158 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1159 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1160 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1161 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1162 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1163 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1164 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1165 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1167 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1168 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1170 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1174 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1179 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1180 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1181 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1182 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1183 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1184 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1185 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1186 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1187 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1188 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1189 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1190 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1192 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1193 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1197 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1198 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1199 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1203 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1207 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1208 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1209 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 1213 "grammar.y"
    { yyerror(); (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 1216 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1217 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1221 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1222 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1234 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1235 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1239 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1240 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1241 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1242 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1243 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1244 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1245 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1246 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1250 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1254 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1255 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1259 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1267 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 1268 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); ;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 1278 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 1279 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 1286 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1287 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1288 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1328 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1329 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1334 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1341 "grammar.y"
    { (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1343 "grammar.y"
    {
      (void)(yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1350 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1351 "grammar.y"
    { (void)(yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1353 "grammar.y"
    { (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1355 "grammar.y"
    {
      (void)(yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass((yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1363 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace((yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1364 "grammar.y"
    { (void)(yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass((yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1369 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1376 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1383 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1389 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc);
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1396 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace((yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1402 "grammar.y"
    {
         (void)(yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass((yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1411 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1418 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1424 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1430 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1436 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1442 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1448 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1459 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1465 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1469 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1470 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 1471 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1475 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1479 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1480 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1481 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1482 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1483 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 1486 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1500 "grammar.y"
    { (yyval.exp) = MkExpWideString(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 1501 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1502 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1503 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1504 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1505 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1506 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1507 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1508 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1509 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1510 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1511 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1512 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1513 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1514 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1515 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1516 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1517 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1518 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1519 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 293:

/* Line 1464 of yacc.c  */
#line 1520 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 294:

/* Line 1464 of yacc.c  */
#line 1521 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 295:

/* Line 1464 of yacc.c  */
#line 1523 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1530 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 1538 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1542 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 305:

/* Line 1464 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1550 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1551 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1552 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1553 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1554 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1555 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1556 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1557 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1559 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1560 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1561 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1562 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1563 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 1564 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1565 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 1566 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 1593 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1594 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1595 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1596 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1600 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1601 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1602 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1603 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1604 "grammar.y"
    { Expression exp = MkExpDummy(); yyerror(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1608 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1609 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1610 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1611 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1613 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1614 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1615 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1616 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1619 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1620 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 345:

/* Line 1464 of yacc.c  */
#line 1634 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1635 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1639 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1640 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1641 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 354:

/* Line 1464 of yacc.c  */
#line 1646 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 356:

/* Line 1464 of yacc.c  */
#line 1651 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1652 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1653 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1654 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 360:

/* Line 1464 of yacc.c  */
#line 1655 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 361:

/* Line 1464 of yacc.c  */
#line 1656 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 363:

/* Line 1464 of yacc.c  */
#line 1661 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 364:

/* Line 1464 of yacc.c  */
#line 1662 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 365:

/* Line 1464 of yacc.c  */
#line 1663 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 366:

/* Line 1464 of yacc.c  */
#line 1664 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 368:

/* Line 1464 of yacc.c  */
#line 1669 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1670 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1671 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1672 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 372:

/* Line 1464 of yacc.c  */
#line 1677 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 374:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 375:

/* Line 1464 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 376:

/* Line 1464 of yacc.c  */
#line 1687 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 377:

/* Line 1464 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 381:

/* Line 1464 of yacc.c  */
#line 1692 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 383:

/* Line 1464 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 384:

/* Line 1464 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 386:

/* Line 1464 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1702 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 388:

/* Line 1464 of yacc.c  */
#line 1703 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 389:

/* Line 1464 of yacc.c  */
#line 1704 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 390:

/* Line 1464 of yacc.c  */
#line 1705 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 392:

/* Line 1464 of yacc.c  */
#line 1710 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 394:

/* Line 1464 of yacc.c  */
#line 1713 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 395:

/* Line 1464 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 397:

/* Line 1464 of yacc.c  */
#line 1719 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1720 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 402:

/* Line 1464 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 403:

/* Line 1464 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 404:

/* Line 1464 of yacc.c  */
#line 1731 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1732 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 407:

/* Line 1464 of yacc.c  */
#line 1737 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 408:

/* Line 1464 of yacc.c  */
#line 1738 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 410:

/* Line 1464 of yacc.c  */
#line 1743 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 411:

/* Line 1464 of yacc.c  */
#line 1744 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 413:

/* Line 1464 of yacc.c  */
#line 1749 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1750 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 415:

/* Line 1464 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1752 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 417:

/* Line 1464 of yacc.c  */
#line 1754 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 418:

/* Line 1464 of yacc.c  */
#line 1755 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1756 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 420:

/* Line 1464 of yacc.c  */
#line 1757 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1759 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 422:

/* Line 1464 of yacc.c  */
#line 1760 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 423:

/* Line 1464 of yacc.c  */
#line 1761 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1762 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 425:

/* Line 1464 of yacc.c  */
#line 1764 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 426:

/* Line 1464 of yacc.c  */
#line 1765 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 427:

/* Line 1464 of yacc.c  */
#line 1766 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 428:

/* Line 1464 of yacc.c  */
#line 1767 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 430:

/* Line 1464 of yacc.c  */
#line 1772 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 431:

/* Line 1464 of yacc.c  */
#line 1773 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1774 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 433:

/* Line 1464 of yacc.c  */
#line 1775 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 434:

/* Line 1464 of yacc.c  */
#line 1777 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1778 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1779 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1780 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1784 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1785 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1786 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1787 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1788 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1789 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1790 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1791 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1792 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1793 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 448:

/* Line 1464 of yacc.c  */
#line 1794 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1798 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 450:

/* Line 1464 of yacc.c  */
#line 1799 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 451:

/* Line 1464 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 453:

/* Line 1464 of yacc.c  */
#line 1805 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1806 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1807 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 457:

/* Line 1464 of yacc.c  */
#line 1812 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 459:

/* Line 1464 of yacc.c  */
#line 1814 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1816 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1817 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1819 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1820 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1825 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1827 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1832 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1860 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1861 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1862 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1863 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 471:

/* Line 1464 of yacc.c  */
#line 1865 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1866 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 473:

/* Line 1464 of yacc.c  */
#line 1867 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 474:

/* Line 1464 of yacc.c  */
#line 1868 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 475:

/* Line 1464 of yacc.c  */
#line 1870 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 476:

/* Line 1464 of yacc.c  */
#line 1871 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 480:

/* Line 1464 of yacc.c  */
#line 1886 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 482:

/* Line 1464 of yacc.c  */
#line 1891 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1892 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1893 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1894 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1895 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 487:

/* Line 1464 of yacc.c  */
#line 1896 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 489:

/* Line 1464 of yacc.c  */
#line 1901 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 490:

/* Line 1464 of yacc.c  */
#line 1905 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1909 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1913 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 494:

/* Line 1464 of yacc.c  */
#line 1921 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1922 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1923 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1924 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 499:

/* Line 1464 of yacc.c  */
#line 1930 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         if((yyvsp[(1) - (2)].exp).identifier._class && !(yyvsp[(1) - (2)].exp).identifier._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(1) - (2)].exp).identifier.string);
            _DeclClass(name);
         }
         else
            _DeclClass((yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1982 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1983 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 506:

/* Line 1464 of yacc.c  */
#line 1986 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 508:

/* Line 1464 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 509:

/* Line 1464 of yacc.c  */
#line 1992 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 510:

/* Line 1464 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 511:

/* Line 1464 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 512:

/* Line 1464 of yacc.c  */
#line 2001 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 513:

/* Line 1464 of yacc.c  */
#line 2002 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 514:

/* Line 1464 of yacc.c  */
#line 2003 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 515:

/* Line 1464 of yacc.c  */
#line 2004 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 517:

/* Line 1464 of yacc.c  */
#line 2009 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 2010 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 2012 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 2013 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 522:

/* Line 1464 of yacc.c  */
#line 2018 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 523:

/* Line 1464 of yacc.c  */
#line 2019 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 524:

/* Line 1464 of yacc.c  */
#line 2021 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 2022 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 527:

/* Line 1464 of yacc.c  */
#line 2027 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 528:

/* Line 1464 of yacc.c  */
#line 2028 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 529:

/* Line 1464 of yacc.c  */
#line 2030 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 2031 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 532:

/* Line 1464 of yacc.c  */
#line 2036 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 533:

/* Line 1464 of yacc.c  */
#line 2037 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 535:

/* Line 1464 of yacc.c  */
#line 2042 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 2043 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 538:

/* Line 1464 of yacc.c  */
#line 2048 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 2049 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 540:

/* Line 1464 of yacc.c  */
#line 2050 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 2051 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 542:

/* Line 1464 of yacc.c  */
#line 2052 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 543:

/* Line 1464 of yacc.c  */
#line 2053 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 2054 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 2055 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 2057 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 2058 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 2059 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 549:

/* Line 1464 of yacc.c  */
#line 2060 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 2061 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 551:

/* Line 1464 of yacc.c  */
#line 2062 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 552:

/* Line 1464 of yacc.c  */
#line 2063 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 2064 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 554:

/* Line 1464 of yacc.c  */
#line 2066 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 2067 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 556:

/* Line 1464 of yacc.c  */
#line 2068 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 557:

/* Line 1464 of yacc.c  */
#line 2069 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 2071 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 559:

/* Line 1464 of yacc.c  */
#line 2072 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 560:

/* Line 1464 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 561:

/* Line 1464 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 562:

/* Line 1464 of yacc.c  */
#line 2077 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 2085 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 564:

/* Line 1464 of yacc.c  */
#line 2089 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 565:

/* Line 1464 of yacc.c  */
#line 2094 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 567:

/* Line 1464 of yacc.c  */
#line 2101 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 568:

/* Line 1464 of yacc.c  */
#line 2105 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 569:

/* Line 1464 of yacc.c  */
#line 2110 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 570:

/* Line 1464 of yacc.c  */
#line 2111 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 571:

/* Line 1464 of yacc.c  */
#line 2115 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 572:

/* Line 1464 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 573:

/* Line 1464 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 2118 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 2124 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 2125 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 2130 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 2131 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 581:

/* Line 1464 of yacc.c  */
#line 2133 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 584:

/* Line 1464 of yacc.c  */
#line 2143 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 2144 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 2145 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 2146 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 2149 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 2156 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 2157 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 2158 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 597:

/* Line 1464 of yacc.c  */
#line 2159 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2163 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 599:

/* Line 1464 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 600:

/* Line 1464 of yacc.c  */
#line 2165 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 601:

/* Line 1464 of yacc.c  */
#line 2169 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 602:

/* Line 1464 of yacc.c  */
#line 2170 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 604:

/* Line 1464 of yacc.c  */
#line 2175 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2179 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2180 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2184 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2185 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2186 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2190 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2191 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2193 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 613:

/* Line 1464 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 614:

/* Line 1464 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 615:

/* Line 1464 of yacc.c  */
#line 2196 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 616:

/* Line 1464 of yacc.c  */
#line 2197 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 617:

/* Line 1464 of yacc.c  */
#line 2199 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 618:

/* Line 1464 of yacc.c  */
#line 2200 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 619:

/* Line 1464 of yacc.c  */
#line 2201 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2202 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2203 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace((yyvsp[(2) - (2)].id).string); ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2215 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2221 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 630:

/* Line 1464 of yacc.c  */
#line 2222 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2223 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 632:

/* Line 1464 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 633:

/* Line 1464 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 634:

/* Line 1464 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 635:

/* Line 1464 of yacc.c  */
#line 2227 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 636:

/* Line 1464 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2229 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 638:

/* Line 1464 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2234 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2235 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 642:

/* Line 1464 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 643:

/* Line 1464 of yacc.c  */
#line 2237 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 644:

/* Line 1464 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 645:

/* Line 1464 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2243 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 653:

/* Line 1464 of yacc.c  */
#line 2257 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2261 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2262 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2263 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2268 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2269 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2273 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2274 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2275 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2276 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2277 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2278 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 665:

/* Line 1464 of yacc.c  */
#line 2279 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 666:

/* Line 1464 of yacc.c  */
#line 2280 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 667:

/* Line 1464 of yacc.c  */
#line 2281 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2282 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2283 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 670:

/* Line 1464 of yacc.c  */
#line 2284 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 671:

/* Line 1464 of yacc.c  */
#line 2285 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 675:

/* Line 1464 of yacc.c  */
#line 2289 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 676:

/* Line 1464 of yacc.c  */
#line 2290 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 677:

/* Line 1464 of yacc.c  */
#line 2291 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 678:

/* Line 1464 of yacc.c  */
#line 2292 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 679:

/* Line 1464 of yacc.c  */
#line 2293 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 680:

/* Line 1464 of yacc.c  */
#line 2294 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 681:

/* Line 1464 of yacc.c  */
#line 2295 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2296 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2297 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2298 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2302 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2303 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2304 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2305 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2306 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2307 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 691:

/* Line 1464 of yacc.c  */
#line 2308 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 692:

/* Line 1464 of yacc.c  */
#line 2309 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 693:

/* Line 1464 of yacc.c  */
#line 2310 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 694:

/* Line 1464 of yacc.c  */
#line 2311 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 695:

/* Line 1464 of yacc.c  */
#line 2312 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 696:

/* Line 1464 of yacc.c  */
#line 2313 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 697:

/* Line 1464 of yacc.c  */
#line 2314 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 701:

/* Line 1464 of yacc.c  */
#line 2318 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 702:

/* Line 1464 of yacc.c  */
#line 2319 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 703:

/* Line 1464 of yacc.c  */
#line 2320 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 704:

/* Line 1464 of yacc.c  */
#line 2321 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 705:

/* Line 1464 of yacc.c  */
#line 2322 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2323 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2324 "grammar.y"
    { _DeclClass((yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2325 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2332 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2334 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2336 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2338 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2340 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2342 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 715:

/* Line 1464 of yacc.c  */
#line 2344 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 716:

/* Line 1464 of yacc.c  */
#line 2346 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 717:

/* Line 1464 of yacc.c  */
#line 2348 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 718:

/* Line 1464 of yacc.c  */
#line 2350 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 719:

/* Line 1464 of yacc.c  */
#line 2354 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 720:

/* Line 1464 of yacc.c  */
#line 2355 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 721:

/* Line 1464 of yacc.c  */
#line 2360 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 722:

/* Line 1464 of yacc.c  */
#line 2366 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 723:

/* Line 1464 of yacc.c  */
#line 2372 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 724:

/* Line 1464 of yacc.c  */
#line 2379 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      ;}
    break;

  case 725:

/* Line 1464 of yacc.c  */
#line 2388 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 726:

/* Line 1464 of yacc.c  */
#line 2389 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 727:

/* Line 1464 of yacc.c  */
#line 2390 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 728:

/* Line 1464 of yacc.c  */
#line 2391 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 729:

/* Line 1464 of yacc.c  */
#line 2395 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2396 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2397 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2399 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2400 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2401 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2403 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2404 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2405 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2409 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2414 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2422 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)((yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2431 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2439 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2441 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2442 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2443 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2448 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2455 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2465 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2478 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2497 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2503 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2510 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2511 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2512 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2513 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2515 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2519 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2520 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2521 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2522 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2523 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2524 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2525 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2526 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2527 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2528 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2532 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2533 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2534 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2535 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2536 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2537 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2538 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2539 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2540 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2541 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2545 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2546 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2547 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2548 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2549 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2550 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2551 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2552 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2553 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2554 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2555 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2556 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2560 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2561 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2562 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2563 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2564 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2565 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2566 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2567 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2568 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2569 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2573 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2574 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2578 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2579 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2580 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2581 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2582 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 814:

/* Line 1464 of yacc.c  */
#line 2583 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2584 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2585 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2587 "grammar.y"
    { _DeclClass((yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2588 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass((yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2591 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(name);
         }
         else
            _DeclClass((yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2609 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(name);
         }
         else
            _DeclClass((yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 822:

/* Line 1464 of yacc.c  */
#line 2627 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2631 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 824:

/* Line 1464 of yacc.c  */
#line 2632 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2633 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 826:

/* Line 1464 of yacc.c  */
#line 2634 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2635 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2636 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2637 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2638 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2640 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(name);
         }
         else
            _DeclClass((yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2658 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(name);
         }
         else
            _DeclClass((yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2674 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 834:

/* Line 1464 of yacc.c  */
#line 2675 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2676 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 836:

/* Line 1464 of yacc.c  */
#line 2677 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 837:

/* Line 1464 of yacc.c  */
#line 2678 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2679 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2680 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 840:

/* Line 1464 of yacc.c  */
#line 2681 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2682 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2683 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2684 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2685 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2687 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(name);
         }
         else
            _DeclClass((yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 846:

/* Line 1464 of yacc.c  */
#line 2705 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(name);
         }
         else
            _DeclClass((yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2721 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 848:

/* Line 1464 of yacc.c  */
#line 2722 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2723 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 850:

/* Line 1464 of yacc.c  */
#line 2724 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2725 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2726 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2727 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2728 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2729 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2730 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2731 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2732 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2734 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(name);
         }
         else
            _DeclClass((yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2752 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(name);
         }
         else
            _DeclClass((yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 861:

/* Line 1464 of yacc.c  */
#line 2768 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2769 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2773 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2774 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2775 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2776 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2777 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 869:

/* Line 1464 of yacc.c  */
#line 2783 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   ;}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2789 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); ;}
    break;

  case 871:

/* Line 1464 of yacc.c  */
#line 2792 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2801 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 873:

/* Line 1464 of yacc.c  */
#line 2810 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      ;}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2819 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      ;}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2827 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2828 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2829 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2830 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2834 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2835 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 881:

/* Line 1464 of yacc.c  */
#line 2836 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2837 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 883:

/* Line 1464 of yacc.c  */
#line 2838 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 884:

/* Line 1464 of yacc.c  */
#line 2839 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2840 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2841 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 887:

/* Line 1464 of yacc.c  */
#line 2842 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 889:

/* Line 1464 of yacc.c  */
#line 2850 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2851 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 891:

/* Line 1464 of yacc.c  */
#line 2852 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 892:

/* Line 1464 of yacc.c  */
#line 2853 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 893:

/* Line 1464 of yacc.c  */
#line 2854 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2860 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 895:

/* Line 1464 of yacc.c  */
#line 2869 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2878 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 897:

/* Line 1464 of yacc.c  */
#line 2887 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 901:

/* Line 1464 of yacc.c  */
#line 2910 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 902:

/* Line 1464 of yacc.c  */
#line 2911 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 903:

/* Line 1464 of yacc.c  */
#line 2912 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 904:

/* Line 1464 of yacc.c  */
#line 2913 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 905:

/* Line 1464 of yacc.c  */
#line 2914 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 2920 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 907:

/* Line 1464 of yacc.c  */
#line 2929 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 2938 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 2947 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 912:

/* Line 1464 of yacc.c  */
#line 3010 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 913:

/* Line 1464 of yacc.c  */
#line 3011 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 914:

/* Line 1464 of yacc.c  */
#line 3012 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 915:

/* Line 1464 of yacc.c  */
#line 3014 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 916:

/* Line 1464 of yacc.c  */
#line 3025 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 917:

/* Line 1464 of yacc.c  */
#line 3026 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 918:

/* Line 1464 of yacc.c  */
#line 3027 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 919:

/* Line 1464 of yacc.c  */
#line 3032 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 3033 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 3034 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 3035 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 923:

/* Line 1464 of yacc.c  */
#line 3036 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 924:

/* Line 1464 of yacc.c  */
#line 3040 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 925:

/* Line 1464 of yacc.c  */
#line 3041 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 926:

/* Line 1464 of yacc.c  */
#line 3045 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 927:

/* Line 1464 of yacc.c  */
#line 3046 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 928:

/* Line 1464 of yacc.c  */
#line 3047 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 929:

/* Line 1464 of yacc.c  */
#line 3051 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 930:

/* Line 1464 of yacc.c  */
#line 3052 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 3056 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 3057 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 3058 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 3059 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 935:

/* Line 1464 of yacc.c  */
#line 3060 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 936:

/* Line 1464 of yacc.c  */
#line 3061 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 937:

/* Line 1464 of yacc.c  */
#line 3062 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 938:

/* Line 1464 of yacc.c  */
#line 3063 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 939:

/* Line 1464 of yacc.c  */
#line 3064 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 940:

/* Line 1464 of yacc.c  */
#line 3065 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 3066 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 3067 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 3068 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 3069 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 945:

/* Line 1464 of yacc.c  */
#line 3070 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 3071 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 3075 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 3076 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 3077 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 3078 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 951:

/* Line 1464 of yacc.c  */
#line 3079 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 3080 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 953:

/* Line 1464 of yacc.c  */
#line 3081 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 3082 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 3086 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 956:

/* Line 1464 of yacc.c  */
#line 3087 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 3088 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 958:

/* Line 1464 of yacc.c  */
#line 3089 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 3093 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 961:

/* Line 1464 of yacc.c  */
#line 3095 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 962:

/* Line 1464 of yacc.c  */
#line 3096 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 963:

/* Line 1464 of yacc.c  */
#line 3097 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 3101 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 966:

/* Line 1464 of yacc.c  */
#line 3103 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 967:

/* Line 1464 of yacc.c  */
#line 3104 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 968:

/* Line 1464 of yacc.c  */
#line 3105 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 970:

/* Line 1464 of yacc.c  */
#line 3111 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 971:

/* Line 1464 of yacc.c  */
#line 3113 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 972:

/* Line 1464 of yacc.c  */
#line 3115 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 973:

/* Line 1464 of yacc.c  */
#line 3117 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 975:

/* Line 1464 of yacc.c  */
#line 3123 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 976:

/* Line 1464 of yacc.c  */
#line 3125 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 977:

/* Line 1464 of yacc.c  */
#line 3127 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 979:

/* Line 1464 of yacc.c  */
#line 3132 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 980:

/* Line 1464 of yacc.c  */
#line 3133 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 981:

/* Line 1464 of yacc.c  */
#line 3134 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 983:

/* Line 1464 of yacc.c  */
#line 3139 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 984:

/* Line 1464 of yacc.c  */
#line 3140 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 985:

/* Line 1464 of yacc.c  */
#line 3141 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 987:

/* Line 1464 of yacc.c  */
#line 3146 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 3147 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 989:

/* Line 1464 of yacc.c  */
#line 3148 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 991:

/* Line 1464 of yacc.c  */
#line 3153 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 992:

/* Line 1464 of yacc.c  */
#line 3154 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 993:

/* Line 1464 of yacc.c  */
#line 3155 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 995:

/* Line 1464 of yacc.c  */
#line 3160 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 996:

/* Line 1464 of yacc.c  */
#line 3161 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 997:

/* Line 1464 of yacc.c  */
#line 3162 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 998:

/* Line 1464 of yacc.c  */
#line 3166 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 999:

/* Line 1464 of yacc.c  */
#line 3167 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1000:

/* Line 1464 of yacc.c  */
#line 3169 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      ;}
    break;

  case 1001:

/* Line 1464 of yacc.c  */
#line 3185 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1002:

/* Line 1464 of yacc.c  */
#line 3186 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1003:

/* Line 1464 of yacc.c  */
#line 3187 "grammar.y"
    { yyerror(); (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1004:

/* Line 1464 of yacc.c  */
#line 3189 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      ;}
    break;

  case 1005:

/* Line 1464 of yacc.c  */
#line 3202 "grammar.y"
    {
         yyerror();
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      ;}
    break;

  case 1006:

/* Line 1464 of yacc.c  */
#line 3218 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1007:

/* Line 1464 of yacc.c  */
#line 3220 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1008:

/* Line 1464 of yacc.c  */
#line 3224 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1009:

/* Line 1464 of yacc.c  */
#line 3225 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1010:

/* Line 1464 of yacc.c  */
#line 3229 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1011:

/* Line 1464 of yacc.c  */
#line 3230 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1012:

/* Line 1464 of yacc.c  */
#line 3231 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1013:

/* Line 1464 of yacc.c  */
#line 3232 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3235 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1015:

/* Line 1464 of yacc.c  */
#line 3236 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3240 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1017:

/* Line 1464 of yacc.c  */
#line 3241 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3242 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1019:

/* Line 1464 of yacc.c  */
#line 3246 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3250 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1021:

/* Line 1464 of yacc.c  */
#line 3254 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3255 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1023:

/* Line 1464 of yacc.c  */
#line 3256 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3257 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3259 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3267 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3276 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3277 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3278 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3279 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3283 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3284 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3288 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1034:

/* Line 1464 of yacc.c  */
#line 3289 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3294 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3295 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3296 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3297 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3298 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1040:

/* Line 1464 of yacc.c  */
#line 3300 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3318 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1042:

/* Line 1464 of yacc.c  */
#line 3319 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1043:

/* Line 1464 of yacc.c  */
#line 3323 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3324 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1045:

/* Line 1464 of yacc.c  */
#line 3325 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3326 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3327 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3328 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1049:

/* Line 1464 of yacc.c  */
#line 3330 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1050:

/* Line 1464 of yacc.c  */
#line 3331 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1051:

/* Line 1464 of yacc.c  */
#line 3332 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1052:

/* Line 1464 of yacc.c  */
#line 3333 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1053:

/* Line 1464 of yacc.c  */
#line 3337 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1054:

/* Line 1464 of yacc.c  */
#line 3338 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1055:

/* Line 1464 of yacc.c  */
#line 3339 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3340 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3341 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3343 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3344 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1060:

/* Line 1464 of yacc.c  */
#line 3345 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1062:

/* Line 1464 of yacc.c  */
#line 3350 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1063:

/* Line 1464 of yacc.c  */
#line 3351 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3352 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1065:

/* Line 1464 of yacc.c  */
#line 3353 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3354 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1068:

/* Line 1464 of yacc.c  */
#line 3359 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1071:

/* Line 1464 of yacc.c  */
#line 3366 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1073:

/* Line 1464 of yacc.c  */
#line 3368 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1074:

/* Line 1464 of yacc.c  */
#line 3369 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1075:

/* Line 1464 of yacc.c  */
#line 3370 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1083:

/* Line 1464 of yacc.c  */
#line 3381 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1084:

/* Line 1464 of yacc.c  */
#line 3382 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1085:

/* Line 1464 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1086:

/* Line 1464 of yacc.c  */
#line 3384 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1087:

/* Line 1464 of yacc.c  */
#line 3385 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1088:

/* Line 1464 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1089:

/* Line 1464 of yacc.c  */
#line 3387 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1090:

/* Line 1464 of yacc.c  */
#line 3391 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null, null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1091:

/* Line 1464 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp), null); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1092:

/* Line 1464 of yacc.c  */
#line 3393 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(4) - (7)].string), (yyvsp[(6) - (7)].exp), (yyvsp[(2) - (7)].id)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1093:

/* Line 1464 of yacc.c  */
#line 3397 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1094:

/* Line 1464 of yacc.c  */
#line 3398 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1095:

/* Line 1464 of yacc.c  */
#line 3399 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1096:

/* Line 1464 of yacc.c  */
#line 3403 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1097:

/* Line 1464 of yacc.c  */
#line 3404 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1098:

/* Line 1464 of yacc.c  */
#line 3405 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1099:

/* Line 1464 of yacc.c  */
#line 3406 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1100:

/* Line 1464 of yacc.c  */
#line 3408 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1101:

/* Line 1464 of yacc.c  */
#line 3409 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1102:

/* Line 1464 of yacc.c  */
#line 3410 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1103:

/* Line 1464 of yacc.c  */
#line 3412 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1104:

/* Line 1464 of yacc.c  */
#line 3413 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1105:

/* Line 1464 of yacc.c  */
#line 3414 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1106:

/* Line 1464 of yacc.c  */
#line 3415 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1107:

/* Line 1464 of yacc.c  */
#line 3417 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1108:

/* Line 1464 of yacc.c  */
#line 3418 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1109:

/* Line 1464 of yacc.c  */
#line 3419 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1110:

/* Line 1464 of yacc.c  */
#line 3423 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1111:

/* Line 1464 of yacc.c  */
#line 3424 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3425 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3426 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3427 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3429 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3430 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3431 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3432 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3433 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3437 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3438 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3439 "grammar.y"
    { /*if($4.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3440 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3441 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3442 "grammar.y"
    { /*if($3.type == labeledStmt) Compiler_Warning(CASE_LABELED_STMT_WARNING);*/ (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3443 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3445 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3446 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3447 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3448 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3449 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3453 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3454 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3455 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3459 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3460 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3464 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3465 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3466 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3467 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3471 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3472 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3473 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3475 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3476 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3477 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3481 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3485 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3486 "grammar.y"
    { structDeclMode = defaultDeclMode;  ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3488 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3489 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3490 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3494 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1154:

/* Line 1464 of yacc.c  */
#line 3495 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3496 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3497 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3501 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3502 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3506 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3507 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3508 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3512 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3513 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3514 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3515 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3516 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3517 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3518 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3523 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3524 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3525 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3529 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3530 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3531 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3532 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3536 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3540 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3545 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3547 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3550 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3555 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3556 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3557 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1185:

/* Line 1464 of yacc.c  */
#line 3561 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3562 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3563 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3564 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3565 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3566 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3570 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1193:

/* Line 1464 of yacc.c  */
#line 3575 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1194:

/* Line 1464 of yacc.c  */
#line 3576 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3577 "grammar.y"
    { yyerror(); (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1196:

/* Line 1464 of yacc.c  */
#line 3579 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1197:

/* Line 1464 of yacc.c  */
#line 3580 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3582 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1199:

/* Line 1464 of yacc.c  */
#line 3583 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3584 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3585 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3586 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3588 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3589 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3593 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1206:

/* Line 1464 of yacc.c  */
#line 3594 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3595 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3596 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3600 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3601 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3602 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3603 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3605 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3606 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3607 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1216:

/* Line 1464 of yacc.c  */
#line 3608 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3609 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1218:

/* Line 1464 of yacc.c  */
#line 3610 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3611 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3614 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1221:

/* Line 1464 of yacc.c  */
#line 3618 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3619 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3623 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3624 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3628 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3629 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3630 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3631 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3632 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3633 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3634 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3635 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3639 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3640 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3641 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3642 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3648 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3650 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1239:

/* Line 1464 of yacc.c  */
#line 3651 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1240:

/* Line 1464 of yacc.c  */
#line 3653 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3655 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3656 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3659 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3660 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1245:

/* Line 1464 of yacc.c  */
#line 3661 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1246:

/* Line 1464 of yacc.c  */
#line 3662 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3663 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3664 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3668 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3670 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3681 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3683 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3686 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3689 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3690 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3691 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3693 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3702 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3704 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3706 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3707 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3708 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3709 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3711 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3720 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3721 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1267:

/* Line 1464 of yacc.c  */
#line 3722 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1268:

/* Line 1464 of yacc.c  */
#line 3723 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1269:

/* Line 1464 of yacc.c  */
#line 3724 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1270:

/* Line 1464 of yacc.c  */
#line 3725 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1271:

/* Line 1464 of yacc.c  */
#line 3729 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1272:

/* Line 1464 of yacc.c  */
#line 3731 "grammar.y"
    {
      yyerror();
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   ;}
    break;

  case 1273:

/* Line 1464 of yacc.c  */
#line 3739 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1274:

/* Line 1464 of yacc.c  */
#line 3741 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1275:

/* Line 1464 of yacc.c  */
#line 3742 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1276:

/* Line 1464 of yacc.c  */
#line 3745 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1277:

/* Line 1464 of yacc.c  */
#line 3746 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1278:

/* Line 1464 of yacc.c  */
#line 3750 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1279:

/* Line 1464 of yacc.c  */
#line 3751 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1280:

/* Line 1464 of yacc.c  */
#line 3752 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1283:

/* Line 1464 of yacc.c  */
#line 3758 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1284:

/* Line 1464 of yacc.c  */
#line 3759 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1285:

/* Line 1464 of yacc.c  */
#line 3761 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1286:

/* Line 1464 of yacc.c  */
#line 3763 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1289:

/* Line 1464 of yacc.c  */
#line 3769 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1290:

/* Line 1464 of yacc.c  */
#line 3773 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace((yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1291:

/* Line 1464 of yacc.c  */
#line 3774 "grammar.y"
    { Symbol symbol = DeclClass((yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1292:

/* Line 1464 of yacc.c  */
#line 3775 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1293:

/* Line 1464 of yacc.c  */
#line 3779 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1294:

/* Line 1464 of yacc.c  */
#line 3783 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1295:

/* Line 1464 of yacc.c  */
#line 3784 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1296:

/* Line 1464 of yacc.c  */
#line 3785 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1297:

/* Line 1464 of yacc.c  */
#line 3789 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1298:

/* Line 1464 of yacc.c  */
#line 3790 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1299:

/* Line 1464 of yacc.c  */
#line 3794 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1300:

/* Line 1464 of yacc.c  */
#line 3795 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1301:

/* Line 1464 of yacc.c  */
#line 3799 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1302:

/* Line 1464 of yacc.c  */
#line 3800 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1303:

/* Line 1464 of yacc.c  */
#line 3801 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1304:

/* Line 1464 of yacc.c  */
#line 3802 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1305:

/* Line 1464 of yacc.c  */
#line 3806 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1306:

/* Line 1464 of yacc.c  */
#line 3810 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1307:

/* Line 1464 of yacc.c  */
#line 3814 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1308:

/* Line 1464 of yacc.c  */
#line 3818 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 22590 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3821 "grammar.y"


