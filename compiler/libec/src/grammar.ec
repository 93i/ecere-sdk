/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING   "eC expects all declarations to precede statements in the block (C89 style)\n"

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 107 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     LONG = 294,
     SIGNED = 295,
     UNSIGNED = 296,
     FLOAT = 297,
     DOUBLE = 298,
     CONST = 299,
     VOLATILE = 300,
     VOID = 301,
     VALIST = 302,
     STRUCT = 303,
     UNION = 304,
     ENUM = 305,
     ELLIPSIS = 306,
     CASE = 307,
     DEFAULT = 308,
     IF = 309,
     SWITCH = 310,
     WHILE = 311,
     DO = 312,
     FOR = 313,
     GOTO = 314,
     CONTINUE = 315,
     BREAK = 316,
     RETURN = 317,
     IFX = 318,
     ELSE = 319,
     CLASS = 320,
     THISCLASS = 321,
     CLASS_NAME = 322,
     PROPERTY = 323,
     SETPROP = 324,
     GETPROP = 325,
     NEWOP = 326,
     RENEW = 327,
     DELETE = 328,
     EXT_DECL = 329,
     EXT_STORAGE = 330,
     IMPORT = 331,
     DEFINE = 332,
     VIRTUAL = 333,
     ATTRIB = 334,
     PUBLIC = 335,
     PRIVATE = 336,
     TYPED_OBJECT = 337,
     ANY_OBJECT = 338,
     _INCREF = 339,
     EXTENSION = 340,
     ASM = 341,
     TYPEOF = 342,
     WATCH = 343,
     STOPWATCHING = 344,
     FIREWATCHERS = 345,
     WATCHABLE = 346,
     CLASS_DESIGNER = 347,
     CLASS_NO_EXPANSION = 348,
     CLASS_FIXED = 349,
     ISPROPSET = 350,
     CLASS_DEFAULT_PROPERTY = 351,
     PROPERTY_CATEGORY = 352,
     CLASS_DATA = 353,
     CLASS_PROPERTY = 354,
     SUBCLASS = 355,
     NAMESPACE = 356,
     NEW0OP = 357,
     RENEW0 = 358,
     VAARG = 359,
     DBTABLE = 360,
     DBFIELD = 361,
     DBINDEX = 362,
     DATABASE_OPEN = 363,
     ALIGNOF = 364,
     ATTRIB_DEP = 365,
     __ATTRIB = 366,
     BOOL = 367,
     _BOOL = 368,
     _COMPLEX = 369,
     _IMAGINARY = 370,
     RESTRICT = 371
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 37 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 304 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 329 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  293
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   41025

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  142
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  261
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1334
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2210

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   371

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   136,     2,     2,   130,   138,   133,     2,
     120,   121,   117,   134,   125,   135,   128,   137,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   129,   123,
     118,   124,   119,   141,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   131,     2,   132,   139,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   127,   140,   126,   122,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   187,   190,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   959,   966,   973,   979,   985,   992,
     999,  1005,  1011,  1019,  1027,  1034,  1041,  1049,  1057,  1064,
    1071,  1076,  1082,  1087,  1094,  1099,  1101,  1103,  1105,  1107,
    1111,  1114,  1116,  1119,  1122,  1125,  1127,  1132,  1137,  1141,
    1146,  1151,  1155,  1159,  1162,  1165,  1170,  1175,  1179,  1184,
    1188,  1192,  1195,  1198,  1200,  1205,  1210,  1214,  1219,  1224,
    1228,  1232,  1235,  1238,  1243,  1248,  1252,  1257,  1261,  1265,
    1268,  1271,  1273,  1275,  1279,  1283,  1285,  1287,  1291,  1295,
    1298,  1301,  1304,  1307,  1310,  1315,  1318,  1323,  1329,  1335,
    1340,  1343,  1348,  1350,  1352,  1354,  1356,  1358,  1360,  1362,
    1364,  1366,  1368,  1370,  1372,  1374,  1379,  1381,  1385,  1389,
    1393,  1397,  1401,  1405,  1407,  1411,  1415,  1419,  1423,  1425,
    1429,  1433,  1437,  1441,  1444,  1446,  1449,  1453,  1457,  1461,
    1465,  1469,  1473,  1477,  1479,  1483,  1487,  1491,  1495,  1499,
    1503,  1507,  1511,  1513,  1517,  1521,  1525,  1529,  1531,  1535,
    1539,  1543,  1547,  1549,  1553,  1557,  1561,  1565,  1567,  1571,
    1575,  1577,  1581,  1585,  1587,  1593,  1599,  1605,  1611,  1617,
    1623,  1629,  1635,  1641,  1647,  1653,  1659,  1665,  1671,  1677,
    1683,  1685,  1689,  1693,  1697,  1701,  1705,  1709,  1713,  1717,
    1719,  1721,  1723,  1725,  1727,  1729,  1731,  1733,  1735,  1737,
    1739,  1741,  1745,  1749,  1752,  1754,  1758,  1762,  1764,  1766,
    1769,  1772,  1776,  1780,  1784,  1788,  1792,  1796,  1800,  1802,
    1805,  1808,  1812,  1816,  1820,  1824,  1828,  1832,  1836,  1839,
    1842,  1845,  1848,  1852,  1855,  1861,  1868,  1875,  1879,  1882,
    1888,  1890,  1892,  1894,  1896,  1898,  1903,  1905,  1909,  1913,
    1917,  1921,  1925,  1929,  1931,  1935,  1939,  1943,  1947,  1949,
    1953,  1957,  1961,  1965,  1967,  1970,  1974,  1978,  1982,  1986,
    1990,  1994,  1998,  2000,  2004,  2008,  2012,  2016,  2020,  2024,
    2028,  2032,  2034,  2038,  2042,  2046,  2050,  2052,  2056,  2060,
    2064,  2068,  2070,  2074,  2078,  2082,  2086,  2088,  2092,  2096,
    2098,  2102,  2106,  2108,  2114,  2120,  2126,  2132,  2137,  2142,
    2147,  2152,  2158,  2164,  2170,  2176,  2181,  2186,  2191,  2196,
    2202,  2208,  2214,  2220,  2226,  2232,  2238,  2244,  2248,  2252,
    2255,  2258,  2260,  2264,  2268,  2272,  2276,  2278,  2281,  2285,
    2289,  2292,  2295,  2298,  2300,  2303,  2307,  2311,  2313,  2315,
    2317,  2319,  2321,  2323,  2325,  2327,  2329,  2331,  2333,  2335,
    2337,  2339,  2341,  2345,  2349,  2351,  2355,  2358,  2360,  2363,
    2366,  2369,  2374,  2379,  2383,  2387,  2392,  2398,  2403,  2410,
    2417,  2422,  2428,  2433,  2440,  2447,  2450,  2453,  2456,  2462,
    2466,  2472,  2479,  2485,  2493,  2501,  2510,  2519,  2527,  2535,
    2539,  2543,  2547,  2552,  2556,  2562,  2568,  2570,  2572,  2574,
    2576,  2578,  2580,  2582,  2584,  2586,  2589,  2591,  2593,  2595,
    2597,  2599,  2601,  2603,  2605,  2607,  2609,  2611,  2613,  2615,
    2617,  2619,  2621,  2626,  2631,  2636,  2638,  2640,  2642,  2644,
    2646,  2648,  2650,  2652,  2654,  2656,  2658,  2660,  2662,  2664,
    2666,  2668,  2670,  2672,  2674,  2676,  2678,  2680,  2682,  2684,
    2686,  2688,  2690,  2695,  2700,  2705,  2707,  2709,  2712,  2715,
    2719,  2725,  2728,  2732,  2738,  2744,  2750,  2752,  2756,  2759,
    2762,  2766,  2770,  2773,  2777,  2781,  2786,  2790,  2794,  2798,
    2802,  2806,  2810,  2815,  2820,  2825,  2827,  2829,  2834,  2838,
    2841,  2845,  2849,  2853,  2857,  2861,  2865,  2869,  2873,  2877,
    2881,  2885,  2889,  2891,  2893,  2895,  2898,  2900,  2903,  2905,
    2908,  2910,  2913,  2915,  2918,  2920,  2923,  2925,  2928,  2930,
    2933,  2935,  2938,  2940,  2943,  2945,  2948,  2950,  2953,  2955,
    2958,  2960,  2963,  2965,  2968,  2970,  2973,  2975,  2978,  2980,
    2983,  2985,  2988,  2990,  2993,  2995,  2998,  3000,  3003,  3005,
    3008,  3010,  3013,  3015,  3018,  3020,  3023,  3025,  3027,  3029,
    3032,  3034,  3037,  3039,  3042,  3044,  3047,  3052,  3058,  3060,
    3062,  3064,  3067,  3069,  3072,  3074,  3077,  3079,  3082,  3087,
    3093,  3095,  3098,  3100,  3103,  3105,  3108,  3110,  3113,  3115,
    3118,  3120,  3123,  3128,  3134,  3136,  3139,  3141,  3144,  3146,
    3149,  3151,  3154,  3156,  3159,  3161,  3164,  3169,  3175,  3179,
    3183,  3185,  3189,  3193,  3197,  3201,  3203,  3205,  3207,  3212,
    3217,  3222,  3226,  3231,  3236,  3241,  3245,  3247,  3251,  3256,
    3260,  3265,  3270,  3275,  3280,  3284,  3287,  3291,  3295,  3299,
    3303,  3306,  3309,  3312,  3316,  3321,  3323,  3325,  3328,  3332,
    3336,  3340,  3344,  3347,  3350,  3353,  3357,  3362,  3364,  3366,
    3368,  3370,  3372,  3377,  3379,  3381,  3383,  3385,  3387,  3389,
    3391,  3393,  3395,  3400,  3402,  3405,  3409,  3416,  3422,  3426,
    3431,  3434,  3438,  3442,  3446,  3450,  3455,  3460,  3465,  3468,
    3472,  3476,  3480,  3485,  3490,  3494,  3499,  3502,  3506,  3510,
    3514,  3519,  3524,  3526,  3529,  3532,  3536,  3538,  3540,  3543,
    3546,  3550,  3552,  3554,  3557,  3560,  3564,  3566,  3569,  3573,
    3576,  3579,  3581,  3584,  3588,  3591,  3593,  3596,  3600,  3604,
    3606,  3609,  3613,  3617,  3619,  3622,  3626,  3630,  3632,  3635,
    3639,  3643,  3645,  3648,  3652,  3656,  3658,  3662,  3667,  3669,
    3674,  3677,  3683,  3687,  3689,  3691,  3693,  3695,  3697,  3699,
    3703,  3707,  3710,  3713,  3715,  3717,  3721,  3724,  3728,  3730,
    3734,  3738,  3742,  3746,  3750,  3752,  3755,  3759,  3763,  3765,
    3768,  3770,  3773,  3776,  3779,  3782,  3786,  3788,  3790,  3794,
    3798,  3800,  3804,  3809,  3813,  3818,  3822,  3826,  3831,  3835,
    3840,  3842,  3846,  3850,  3855,  3859,  3863,  3867,  3872,  3874,
    3878,  3882,  3886,  3890,  3894,  3896,  3900,  3903,  3905,  3907,
    3909,  3911,  3913,  3916,  3918,  3920,  3922,  3924,  3927,  3930,
    3933,  3935,  3937,  3939,  3941,  3943,  3946,  3948,  3950,  3955,
    3957,  3961,  3962,  3969,  3978,  3989,  4002,  4011,  4022,  4033,
    4039,  4047,  4057,  4069,  4077,  4087,  4097,  4101,  4106,  4111,
    4115,  4119,  4123,  4128,  4133,  4137,  4141,  4145,  4150,  4155,
    4159,  4162,  4166,  4169,  4173,  4178,  4183,  4187,  4191,  4193,
    4195,  4197,  4199,  4201,  4204,  4208,  4211,  4214,  4217,  4221,
    4225,  4228,  4234,  4241,  4244,  4247,  4250,  4253,  4256,  4259,
    4261,  4264,  4267,  4271,  4273,  4276,  4278,  4281,  4284,  4286,
    4289,  4292,  4295,  4298,  4301,  4304,  4306,  4308,  4311,  4314,
    4316,  4318,  4321,  4324,  4326,  4329,  4332,  4334,  4337,  4339,
    4342,  4345,  4351,  4357,  4365,  4373,  4379,  4385,  4389,  4392,
    4398,  4403,  4408,  4416,  4423,  4430,  4436,  4444,  4451,  4456,
    4464,  4474,  4478,  4483,  4488,  4494,  4500,  4507,  4515,  4522,
    4529,  4535,  4541,  4546,  4550,  4553,  4555,  4558,  4563,  4567,
    4573,  4578,  4582,  4585,  4588,  4591,  4595,  4599,  4603,  4607,
    4610,  4613,  4615,  4617,  4622,  4626,  4631,  4635,  4639,  4642,
    4647,  4651,  4656,  4660,  4664,  4667,  4669,  4672,  4674,  4676,
    4679,  4681,  4684,  4688,  4692,  4694,  4697,  4700,  4703,  4707,
    4712,  4717,  4720,  4723,  4726,  4729,  4731,  4734,  4736,  4739,
    4741,  4744,  4747,  4749,  4752,  4754,  4757,  4760,  4763,  4766,
    4768,  4771,  4774,  4778,  4780,  4782,  4783,  4790,  4797,  4803,
    4808,  4810,  4813,  4816,  4818,  4822,  4826,  4831,  4833,  4835,
    4838,  4841,  4848,  4855,  4862
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     392,     0,    -1,   214,   117,    -1,   214,   118,    -1,   147,
      -1,   214,   214,    -1,    28,    -1,    28,    -1,   145,    -1,
     145,   118,   208,   119,    -1,   145,   118,   208,    11,    -1,
     301,   336,    -1,   334,    -1,   301,   120,   121,    -1,   122,
     301,   120,   121,    -1,    78,   301,   336,    -1,    78,   334,
      -1,   301,   337,    -1,   335,    -1,    78,   301,   337,    -1,
      78,   335,    -1,   148,   376,    -1,   151,   376,    -1,   151,
     123,    -1,   149,   376,    -1,   150,   376,    -1,   148,   123,
      -1,   148,   326,   123,    -1,   148,   377,    -1,   152,    -1,
     151,   377,    -1,   153,    -1,   153,   123,    -1,   300,   336,
      -1,   300,   338,    -1,   300,   337,    -1,   156,   376,    -1,
     156,   377,    -1,   157,    -1,   156,    -1,   222,   124,   341,
      -1,   341,    -1,   222,   124,   342,    -1,   222,   124,     1,
      -1,   342,    -1,   160,    -1,   162,   125,   160,    -1,   163,
     125,   160,    -1,   161,    -1,   162,   125,   161,    -1,   163,
     125,   161,    -1,   162,   125,     1,    -1,   163,   125,     1,
      -1,   125,    -1,   162,   123,    -1,   163,   123,    -1,   164,
      -1,   158,    -1,   167,   164,    -1,   167,   158,    -1,   165,
     164,    -1,   165,   158,    -1,   123,    -1,   167,   123,    -1,
     165,   123,    -1,   165,    -1,   162,    -1,   165,   162,    -1,
     167,   162,    -1,   159,    -1,   166,   159,    -1,   167,   159,
      -1,   165,   159,    -1,   165,   163,    -1,   163,    -1,   162,
       1,    -1,   169,   126,    -1,   169,     1,   126,    -1,   300,
     214,   127,   167,    -1,   300,   214,   127,   166,     1,    -1,
     300,   214,   127,   166,    -1,   300,   214,   127,    -1,   300,
     214,   127,     1,    -1,   171,   126,    -1,   171,     1,   126,
      -1,   301,   214,   127,   167,    -1,   301,   214,   127,   166,
       1,    -1,   301,   214,   127,   166,    -1,   301,   214,   127,
      -1,   301,   214,   127,     1,    -1,   302,   214,   127,   166,
     126,    -1,   302,   214,   127,   167,   126,    -1,   302,   214,
     127,   126,    -1,   174,   126,    -1,   174,     1,   126,    -1,
     147,   127,   166,    -1,   214,   127,   166,    -1,   147,   127,
     167,    -1,   147,   127,    -1,   147,   127,   166,     1,    -1,
     147,   127,     1,    -1,   214,   127,   167,    -1,   214,   127,
      -1,   214,   127,   166,     1,    -1,   214,   127,     1,    -1,
     176,   126,    -1,   176,     1,   126,    -1,   127,   167,    -1,
     127,   166,     1,    -1,   127,     1,    -1,   127,    -1,   127,
     166,    -1,   222,   124,   341,    -1,   222,   124,   342,    -1,
     222,   124,     1,    -1,   222,     1,    -1,   177,    -1,   179,
     125,   177,    -1,   180,   125,   177,    -1,   178,    -1,   179,
     125,   178,    -1,   180,   125,   178,    -1,   179,     1,    -1,
      68,   306,   214,   127,    -1,    68,   306,   330,   214,   127,
      -1,    68,   306,   127,    -1,    68,   306,   330,   127,    -1,
      68,     1,   127,    -1,   181,    -1,   182,    69,   376,    -1,
     182,    70,   376,    -1,   182,    95,   376,    -1,   182,    91,
      -1,   182,    97,   216,    -1,   182,   126,    -1,    99,   306,
     214,   127,    -1,    99,   306,   330,   214,   127,    -1,    99,
     306,   127,    -1,    99,   306,   330,   127,    -1,    99,     1,
     127,    -1,   184,    -1,   185,    69,   376,    -1,   185,    70,
     376,    -1,   185,   126,    -1,   214,    -1,   187,   214,    -1,
     187,   376,    -1,    73,   376,    -1,   188,    -1,   189,   188,
      -1,    88,   120,   187,   121,   376,    -1,    88,   120,   243,
     121,   127,   189,   126,    -1,   243,   128,    88,   120,   243,
     121,   127,   189,   126,    -1,    89,   120,   243,   125,   187,
     121,    -1,   243,   128,    89,   120,   243,   125,   187,   121,
      -1,    89,   120,   243,   121,    -1,   243,   128,    89,   120,
     243,   121,    -1,    90,    -1,    90,   187,    -1,   222,   128,
      90,    -1,   243,   128,    90,   187,    -1,   195,   123,    -1,
     179,   123,    -1,   154,    -1,   183,    -1,   364,   154,    -1,
     364,   183,    -1,   186,    -1,    91,    -1,    93,    -1,    94,
      -1,    99,   120,   214,   121,   124,   341,   123,    -1,   123,
      -1,   364,   129,    -1,   364,   120,   214,   121,    -1,   155,
      -1,   301,    -1,   301,   288,    -1,   364,   301,   288,    -1,
     364,   301,    -1,   364,   173,    -1,   364,   170,    -1,    98,
     301,   288,    -1,   190,    -1,    92,   214,    -1,    92,   147,
      -1,    96,   214,    -1,   173,    -1,   170,    -1,   179,    -1,
     171,     1,    -1,   174,     1,    -1,   364,   155,    -1,   364,
     171,     1,    -1,   364,   174,     1,    -1,   180,    -1,   194,
      -1,   196,   194,    -1,   197,   194,    -1,   195,    -1,   196,
       1,    -1,   197,     1,    -1,   196,   195,    -1,   197,   195,
      -1,   301,    -1,   301,   330,    -1,   301,    -1,   301,   330,
      -1,    65,   214,    -1,    65,   214,   124,   199,    -1,    65,
     214,   129,   198,    -1,    65,   214,   129,   198,   124,   199,
      -1,    65,   146,    -1,    65,   146,   124,   199,    -1,    65,
     146,   129,   198,    -1,    65,   146,   129,   198,   124,   199,
      -1,   214,    -1,   214,    -1,   214,   124,   201,    -1,   233,
      -1,   301,   214,   124,   203,    -1,   301,   330,   214,   124,
     203,    -1,   200,    -1,   202,    -1,   204,    -1,   205,    -1,
     206,   125,   205,    -1,   203,    -1,   201,    -1,   199,    -1,
     214,   124,   203,    -1,   214,   124,   201,    -1,   214,   124,
     199,    -1,   207,    -1,   208,   125,   207,    -1,    65,    -1,
     209,   214,    -1,   209,   145,    -1,   214,   209,   214,    -1,
     214,   209,   145,    -1,   209,   214,   118,   206,   119,    -1,
     209,   145,   118,   206,   119,    -1,   214,   209,   214,   118,
     206,   119,    -1,   214,   209,   145,   118,   206,   119,    -1,
     213,   126,    -1,   212,   123,    -1,   210,   127,   126,    -1,
     212,   127,   126,    -1,   209,   214,   123,    -1,   209,   144,
     123,    -1,   210,   129,   305,    -1,   210,   127,   197,    -1,
     212,   127,   197,    -1,   210,   127,   196,    -1,   212,   127,
     196,    -1,   210,   127,     1,    -1,   212,   127,     1,    -1,
       3,    -1,   218,    -1,   120,   245,   121,    -1,   387,    -1,
     130,   387,    -1,   130,   387,   128,   387,    -1,     4,    -1,
     214,    -1,   173,    -1,    85,   120,   376,   121,    -1,    85,
     120,   245,   121,    -1,    85,   120,   348,   121,   339,    -1,
      85,   120,   348,   121,   120,   348,   121,   339,    -1,   217,
     214,    -1,   217,    -1,   216,    -1,   120,   121,    -1,    71,
     308,   331,   131,   267,   132,    -1,    71,   308,   331,   131,
     268,   132,    -1,    71,   308,   131,   267,   132,    -1,    71,
     308,   131,   268,   132,    -1,   102,   308,   331,   131,   267,
     132,    -1,   102,   308,   331,   131,   268,   132,    -1,   102,
     308,   131,   267,   132,    -1,   102,   308,   131,   268,   132,
      -1,    72,   267,   307,   331,   131,   267,   132,    -1,    72,
     267,   307,   331,   131,   268,   132,    -1,    72,   267,   307,
     131,   267,   132,    -1,    72,   267,   307,   131,   268,   132,
      -1,   103,   267,   307,   331,   131,   267,   132,    -1,   103,
     267,   307,   331,   131,   268,   132,    -1,   103,   267,   307,
     131,   267,   132,    -1,   103,   267,   307,   131,   268,   132,
      -1,    65,   120,   300,   121,    -1,    65,   120,   300,   330,
     121,    -1,    65,   120,   214,   121,    -1,   104,   120,   243,
     125,   348,   121,    -1,    98,   120,   214,   121,    -1,   399,
      -1,   400,    -1,   401,    -1,   402,    -1,   131,   224,   132,
      -1,   131,   132,    -1,   175,    -1,   176,     1,    -1,   120,
     245,    -1,   120,   265,    -1,   215,    -1,   222,   131,   245,
     132,    -1,   222,   131,   265,   132,    -1,   222,   120,   121,
      -1,   222,   120,   224,   121,    -1,   222,   120,   225,   121,
      -1,   222,   128,   214,    -1,   222,     7,   214,    -1,   222,
       8,    -1,   222,     9,    -1,   247,   131,   245,   132,    -1,
     247,   131,   265,   132,    -1,   247,   120,   121,    -1,   247,
     120,   224,   121,    -1,   247,   128,   214,    -1,   247,     7,
     214,    -1,   247,     8,    -1,   247,     9,    -1,   218,    -1,
     223,   131,   245,   132,    -1,   223,   131,   265,   132,    -1,
     223,   120,   121,    -1,   223,   120,   224,   121,    -1,   223,
     120,   225,   121,    -1,   223,   128,   214,    -1,   223,     7,
     214,    -1,   223,     8,    -1,   223,     9,    -1,   248,   131,
     245,   132,    -1,   248,   131,   265,   132,    -1,   248,   120,
     121,    -1,   248,   120,   224,   121,    -1,   248,   128,   214,
      -1,   248,     7,   214,    -1,   248,     8,    -1,   248,     9,
      -1,   243,    -1,   219,    -1,   224,   125,   243,    -1,   224,
     125,   219,    -1,   264,    -1,   220,    -1,   224,   125,   264,
      -1,   224,   125,   220,    -1,   224,   125,    -1,     8,   227,
      -1,     9,   227,    -1,   229,   230,    -1,   229,   219,    -1,
       6,   120,   227,   121,    -1,     6,   228,    -1,     6,   120,
     349,   121,    -1,     6,   120,    65,   144,   121,    -1,     6,
     120,    65,   143,   121,    -1,   109,   120,   227,   121,    -1,
     109,   228,    -1,   109,   120,   349,   121,    -1,   226,    -1,
     222,    -1,   226,    -1,   223,    -1,   133,    -1,   117,    -1,
     134,    -1,   135,    -1,   122,    -1,   136,    -1,    73,    -1,
      84,    -1,   227,    -1,   120,   348,   121,   230,    -1,   230,
      -1,   231,   117,   230,    -1,   231,   137,   230,    -1,   231,
     138,   230,    -1,   253,   117,   230,    -1,   253,   137,   230,
      -1,   253,   138,   230,    -1,   231,    -1,   232,   134,   231,
      -1,   232,   135,   231,    -1,   254,   134,   231,    -1,   254,
     135,   231,    -1,   232,    -1,   233,    10,   232,    -1,   233,
      11,   232,    -1,   255,    10,   232,    -1,   255,    11,   232,
      -1,   235,   118,    -1,   233,    -1,   234,   233,    -1,   235,
     119,   233,    -1,   235,    12,   233,    -1,   235,    13,   233,
      -1,   256,   118,   233,    -1,   256,   119,   233,    -1,   256,
      12,   233,    -1,   256,    13,   233,    -1,   235,    -1,   236,
      14,   235,    -1,   236,    15,   235,    -1,   257,    14,   235,
      -1,   257,    15,   235,    -1,   236,    14,   219,    -1,   236,
      15,   219,    -1,   257,    14,   219,    -1,   257,    15,   219,
      -1,   236,    -1,   237,   133,   236,    -1,   258,   133,   236,
      -1,   237,   133,   219,    -1,   258,   133,   219,    -1,   237,
      -1,   238,   139,   237,    -1,   259,   139,   237,    -1,   238,
     139,   219,    -1,   259,   139,   219,    -1,   238,    -1,   239,
     140,   238,    -1,   260,   140,   238,    -1,   239,   140,   219,
      -1,   260,   140,   219,    -1,   239,    -1,   240,    16,   239,
      -1,   261,    16,   239,    -1,   240,    -1,   241,    17,   240,
      -1,   262,    17,   240,    -1,   241,    -1,   241,   141,   245,
     129,   242,    -1,   241,   141,   265,   129,   242,    -1,   262,
     141,   245,   129,   242,    -1,   262,   141,   265,   129,   242,
      -1,   241,   141,   246,   129,   242,    -1,   241,   141,   266,
     129,   242,    -1,   262,   141,   246,   129,   242,    -1,   262,
     141,   266,   129,   242,    -1,   241,   141,   245,   129,   219,
      -1,   241,   141,   265,   129,   219,    -1,   262,   141,   245,
     129,   219,    -1,   262,   141,   265,   129,   219,    -1,   241,
     141,   246,   129,   219,    -1,   241,   141,   266,   129,   219,
      -1,   262,   141,   246,   129,   219,    -1,   262,   141,   266,
     129,   219,    -1,   242,    -1,   227,   244,   243,    -1,   250,
     244,   243,    -1,   242,   244,   243,    -1,   263,   244,   243,
      -1,   227,   244,   219,    -1,   250,   244,   219,    -1,   242,
     244,   219,    -1,   263,   244,   219,    -1,   124,    -1,    18,
      -1,    19,    -1,    20,    -1,    21,    -1,    22,    -1,    23,
      -1,    24,    -1,    25,    -1,    26,    -1,    27,    -1,   243,
      -1,   245,   125,   243,    -1,   265,   125,   243,    -1,   265,
     121,    -1,   219,    -1,   245,   125,   219,    -1,   265,   125,
     219,    -1,   221,    -1,     1,    -1,   222,     1,    -1,   174,
       1,    -1,   222,     7,     1,    -1,   247,     7,     1,    -1,
     222,   120,   224,    -1,   222,   120,   225,    -1,   222,   128,
       1,    -1,   247,   120,   225,    -1,   247,   128,     1,    -1,
       1,    -1,   223,     1,    -1,   174,     1,    -1,   223,     7,
       1,    -1,   248,     7,     1,    -1,   223,   120,   224,    -1,
     223,   120,   225,    -1,   223,   128,     1,    -1,   248,   120,
     225,    -1,   248,   128,     1,    -1,     8,   250,    -1,     9,
     250,    -1,   229,   252,    -1,   229,   220,    -1,     6,   120,
     250,    -1,     6,   251,    -1,     6,   120,   349,   121,     1,
      -1,     6,   120,    65,   144,   121,     1,    -1,     6,   120,
      65,   143,   121,     1,    -1,   109,   120,   250,    -1,   109,
     251,    -1,   109,   120,   349,   121,     1,    -1,   249,    -1,
     247,    -1,   249,    -1,   248,    -1,   250,    -1,   120,   348,
     121,   252,    -1,   252,    -1,   231,   117,   252,    -1,   231,
     137,   252,    -1,   231,   138,   252,    -1,   253,   117,   252,
      -1,   253,   137,   252,    -1,   253,   138,   252,    -1,   253,
      -1,   232,   134,   253,    -1,   232,   135,   253,    -1,   254,
     134,   253,    -1,   254,   135,   253,    -1,   254,    -1,   233,
      10,   254,    -1,   233,    11,   254,    -1,   255,    10,   254,
      -1,   255,    11,   254,    -1,   255,    -1,   234,   255,    -1,
     235,   119,   255,    -1,   235,    12,   255,    -1,   235,    13,
     255,    -1,   256,   118,   255,    -1,   256,   119,   255,    -1,
     256,    12,   255,    -1,   256,    13,   255,    -1,   256,    -1,
     236,    14,   256,    -1,   236,    15,   256,    -1,   257,    14,
     256,    -1,   257,    15,   256,    -1,   236,    14,   220,    -1,
     236,    15,   220,    -1,   257,    14,   220,    -1,   257,    15,
     220,    -1,   257,    -1,   237,   133,   257,    -1,   258,   133,
     257,    -1,   237,   133,   220,    -1,   258,   133,   220,    -1,
     258,    -1,   238,   139,   258,    -1,   259,   139,   258,    -1,
     238,   139,   220,    -1,   259,   139,   220,    -1,   259,    -1,
     239,   140,   259,    -1,   260,   140,   259,    -1,   239,   140,
     220,    -1,   260,   140,   220,    -1,   260,    -1,   240,    16,
     260,    -1,   261,    16,   260,    -1,   261,    -1,   241,    17,
     261,    -1,   262,    17,   261,    -1,   262,    -1,   241,   141,
     245,   129,   262,    -1,   241,   141,   265,   129,   262,    -1,
     262,   141,   245,   129,   262,    -1,   262,   141,   265,   129,
     262,    -1,   241,   141,   245,   129,    -1,   241,   141,   265,
     129,    -1,   262,   141,   245,   129,    -1,   262,   141,   265,
     129,    -1,   241,   141,   246,   129,   262,    -1,   241,   141,
     266,   129,   262,    -1,   262,   141,   246,   129,   262,    -1,
     262,   141,   266,   129,   262,    -1,   241,   141,   246,   129,
      -1,   241,   141,   266,   129,    -1,   262,   141,   246,   129,
      -1,   262,   141,   266,   129,    -1,   241,   141,   245,   129,
     220,    -1,   241,   141,   265,   129,   220,    -1,   262,   141,
     245,   129,   220,    -1,   262,   141,   265,   129,   220,    -1,
     241,   141,   246,   129,   220,    -1,   241,   141,   266,   129,
     220,    -1,   262,   141,   246,   129,   220,    -1,   262,   141,
     266,   129,   220,    -1,   241,   141,   129,    -1,   262,   141,
     129,    -1,   241,   141,    -1,   262,   141,    -1,   263,    -1,
     227,   244,   264,    -1,   250,   244,   264,    -1,   227,   244,
     220,    -1,   250,   244,   220,    -1,   264,    -1,   243,     1,
      -1,   245,   125,   264,    -1,   265,   125,   264,    -1,   245,
     245,    -1,   265,   245,    -1,   245,   265,    -1,   220,    -1,
     219,     1,    -1,   245,   125,   220,    -1,   265,   125,   220,
      -1,   242,    -1,   263,    -1,    29,    -1,    30,    -1,    31,
      -1,    32,    -1,    33,    -1,   116,    -1,    29,    -1,    30,
      -1,    31,    -1,    32,    -1,    33,    -1,   116,    -1,   214,
      -1,   214,   124,   267,    -1,   214,   124,   268,    -1,   271,
      -1,   272,   125,   271,    -1,   272,   125,    -1,    50,    -1,
     273,   214,    -1,   273,   147,    -1,   276,   126,    -1,   273,
     214,   127,   126,    -1,   273,   147,   127,   126,    -1,   273,
     127,   272,    -1,   273,   127,     1,    -1,   273,   214,   127,
     272,    -1,   273,   214,   127,   272,     1,    -1,   273,   214,
     127,     1,    -1,   273,   214,   127,   272,   123,   196,    -1,
     273,   214,   127,   272,   123,   197,    -1,   273,   147,   127,
     272,    -1,   273,   147,   127,   272,     1,    -1,   273,   147,
     127,     1,    -1,   273,   147,   127,   272,   123,   196,    -1,
     273,   147,   127,   272,   123,   197,    -1,   273,   214,    -1,
     273,   147,    -1,   279,   126,    -1,   277,   129,   305,   127,
     126,    -1,   277,   127,   126,    -1,   277,   129,   305,   127,
     272,    -1,   277,   129,   305,   127,   272,     1,    -1,   277,
     129,   305,   127,     1,    -1,   277,   129,   305,   127,   272,
     123,   196,    -1,   277,   129,   305,   127,   272,   123,   197,
      -1,   277,   129,   305,   127,   272,     1,   123,   196,    -1,
     277,   129,   305,   127,   272,     1,   123,   197,    -1,   277,
     129,   305,   127,     1,   123,   196,    -1,   277,   129,   305,
     127,     1,   123,   197,    -1,   273,   127,   272,    -1,   273,
     127,     1,    -1,   277,   127,   272,    -1,   277,   127,   272,
       1,    -1,   277,   127,     1,    -1,   277,   127,   272,   123,
     196,    -1,   277,   127,   272,   123,   197,    -1,   278,    -1,
     295,    -1,   279,    -1,   296,    -1,   321,    -1,    44,    -1,
      45,    -1,   282,    -1,   283,    -1,   284,   283,    -1,    46,
      -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,    38,
      -1,    47,    -1,    39,    -1,    42,    -1,    43,    -1,    40,
      -1,    41,    -1,    85,    -1,   292,    -1,   274,    -1,   144,
      -1,    87,   120,   243,   121,    -1,   100,   120,   144,   121,
      -1,   100,   120,   214,   121,    -1,    66,    -1,    82,    -1,
      83,    -1,   113,    -1,   112,    -1,   114,    -1,   115,    -1,
      46,    -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,
      38,    -1,    47,    -1,    39,    -1,    42,    -1,    43,    -1,
      40,    -1,    41,    -1,    85,    -1,   292,    -1,   274,    -1,
     147,    -1,   113,    -1,   112,    -1,   114,    -1,   115,    -1,
      87,   120,   243,   121,    -1,   100,   120,   144,   121,    -1,
     100,   120,   214,   121,    -1,    66,    -1,   338,    -1,   338,
     326,    -1,   129,   267,    -1,   338,   129,   267,    -1,   338,
     129,   267,   129,   267,    -1,   129,   268,    -1,   338,   129,
     268,    -1,   338,   129,   267,   129,   268,    -1,   338,   129,
     268,   129,   268,    -1,   338,   129,   268,   129,   267,    -1,
     287,    -1,   288,   125,   287,    -1,   297,   214,    -1,   297,
     145,    -1,   297,   321,   214,    -1,   297,   321,   145,    -1,
     291,   126,    -1,   289,   127,   126,    -1,   297,   127,   126,
      -1,   297,   321,   127,   126,    -1,   289,   127,   196,    -1,
     289,   127,   197,    -1,   289,   127,     1,    -1,   297,   127,
     196,    -1,   297,   127,   197,    -1,   297,   127,     1,    -1,
     297,   321,   127,   196,    -1,   297,   321,   127,   197,    -1,
     297,   321,   127,     1,    -1,   289,    -1,   289,    -1,   289,
     118,   206,   119,    -1,   293,   129,   305,    -1,   296,   126,
      -1,   294,   127,   126,    -1,   293,   127,   126,    -1,   297,
     127,   126,    -1,   294,   127,   196,    -1,   294,   127,   197,
      -1,   294,   127,     1,    -1,   293,   127,   196,    -1,   293,
     127,   197,    -1,   293,   127,     1,    -1,   297,   127,   196,
      -1,   297,   127,   197,    -1,   297,   127,     1,    -1,    48,
      -1,    49,    -1,   283,    -1,   298,   283,    -1,   285,    -1,
     298,   285,    -1,   275,    -1,   298,   275,    -1,   290,    -1,
     298,   290,    -1,   283,    -1,   299,   283,    -1,   285,    -1,
     299,   285,    -1,   143,    -1,   299,   143,    -1,   275,    -1,
     299,   275,    -1,   290,    -1,   299,   290,    -1,   269,    -1,
     300,   269,    -1,   283,    -1,   300,   283,    -1,   286,    -1,
     300,   286,    -1,   275,    -1,   300,   275,    -1,   290,    -1,
     300,   290,    -1,   269,    -1,   301,   269,    -1,   283,    -1,
     301,   283,    -1,   285,    -1,   301,   285,    -1,   143,    -1,
     301,   143,    -1,   290,    -1,   301,   290,    -1,   275,    -1,
     301,   275,    -1,   270,    -1,   302,   270,    -1,   283,    -1,
     302,   283,    -1,   285,    -1,   302,   285,    -1,   143,    -1,
     302,   143,    -1,   280,    -1,   302,   280,    -1,   281,    -1,
     302,   281,    -1,    81,    -1,    80,    -1,   269,    -1,   304,
     269,    -1,   283,    -1,   304,   283,    -1,   286,    -1,   304,
     286,    -1,   214,    -1,   304,   214,    -1,   214,   118,   208,
     119,    -1,   304,   214,   118,   208,   119,    -1,   304,    -1,
     297,    -1,   269,    -1,   306,   269,    -1,   283,    -1,   306,
     283,    -1,   286,    -1,   306,   286,    -1,   214,    -1,   306,
     214,    -1,   214,   118,   208,   119,    -1,   306,   214,   118,
     208,   119,    -1,   269,    -1,   307,   269,    -1,   283,    -1,
     307,   283,    -1,   286,    -1,   307,   286,    -1,   290,    -1,
     307,   290,    -1,   275,    -1,   307,   275,    -1,   214,    -1,
     307,   214,    -1,   214,   118,   208,   119,    -1,   307,   214,
     118,   208,   119,    -1,   269,    -1,   308,   269,    -1,   283,
      -1,   308,   283,    -1,   286,    -1,   308,   286,    -1,   290,
      -1,   308,   290,    -1,   275,    -1,   308,   275,    -1,   214,
      -1,   308,   214,    -1,   214,   118,   208,   119,    -1,   308,
     214,   118,   208,   119,    -1,   310,   125,     1,    -1,   309,
     125,     1,    -1,   214,    -1,   310,   125,   214,    -1,   309,
     125,   214,    -1,   352,   125,   214,    -1,   353,   125,   214,
      -1,   312,    -1,   145,    -1,    37,    -1,   145,   131,   267,
     132,    -1,   145,   131,   268,   132,    -1,   145,   131,   144,
     132,    -1,   145,   131,   132,    -1,   311,   131,   267,   132,
      -1,   311,   131,   268,   132,    -1,   311,   131,   144,   132,
      -1,   311,   131,   132,    -1,   214,    -1,   120,   332,   121,
      -1,   120,   321,   332,   121,    -1,   120,   333,   121,    -1,
     120,   321,   333,   121,    -1,   312,   131,   267,   132,    -1,
     312,   131,   268,   132,    -1,   312,   131,   144,   132,    -1,
     312,   131,   132,    -1,   312,   120,    -1,   313,   354,   121,
      -1,   313,   355,   121,    -1,   313,   310,   121,    -1,   313,
     309,   121,    -1,   313,   121,    -1,   313,   309,    -1,   313,
       1,    -1,   313,   352,   120,    -1,   313,   301,   214,   120,
      -1,   314,    -1,   312,    -1,   311,   120,    -1,   317,   354,
     121,    -1,   317,   355,   121,    -1,   317,   310,   121,    -1,
     317,   309,   121,    -1,   317,   121,    -1,   317,   309,    -1,
     317,     1,    -1,   317,   352,   120,    -1,   317,   301,   214,
     120,    -1,   318,    -1,   311,    -1,    74,    -1,    75,    -1,
     326,    -1,    86,   120,   387,   121,    -1,    79,    -1,   110,
      -1,   111,    -1,     3,    -1,    28,    -1,    75,    -1,    74,
      -1,    44,    -1,   323,    -1,   323,   120,   245,   121,    -1,
     324,    -1,   325,   324,    -1,   325,   125,   324,    -1,   322,
     120,   120,   325,   121,   121,    -1,   322,   120,   120,   121,
     121,    -1,   120,   330,   121,    -1,   120,   321,   330,   121,
      -1,   131,   132,    -1,   131,   267,   132,    -1,   131,   268,
     132,    -1,   131,   144,   132,    -1,   327,   131,   132,    -1,
     327,   131,   267,   132,    -1,   327,   131,   144,   132,    -1,
     327,   131,   268,   132,    -1,   120,   121,    -1,   120,   354,
     121,    -1,   120,   355,   121,    -1,   327,   120,   121,    -1,
     327,   120,   354,   121,    -1,   327,   120,   355,   121,    -1,
     120,   331,   121,    -1,   120,   321,   331,   121,    -1,   120,
     121,    -1,   120,   354,   121,    -1,   120,   355,   121,    -1,
     328,   120,   121,    -1,   328,   120,   354,   121,    -1,   328,
     120,   355,   121,    -1,   117,    -1,   117,   284,    -1,   117,
     329,    -1,   117,   284,   329,    -1,   329,    -1,   327,    -1,
     329,   327,    -1,   321,   329,    -1,   321,   329,   327,    -1,
     329,    -1,   328,    -1,   329,   328,    -1,   321,   329,    -1,
     321,   329,   328,    -1,   316,    -1,   329,   316,    -1,   321,
     329,   316,    -1,   332,   321,    -1,   338,   321,    -1,   320,
      -1,   329,   320,    -1,   321,   329,   320,    -1,   333,   321,
      -1,   314,    -1,   329,   314,    -1,   321,   329,   314,    -1,
     329,   321,   314,    -1,   315,    -1,   329,   315,    -1,   321,
     329,   315,    -1,   329,   321,   315,    -1,   318,    -1,   329,
     318,    -1,   321,   329,   318,    -1,   329,   321,   318,    -1,
     319,    -1,   329,   319,    -1,   321,   329,   319,    -1,   329,
     321,   319,    -1,   311,    -1,   329,   311,    -1,   321,   329,
     311,    -1,   329,   321,   311,    -1,   243,    -1,   127,   343,
     126,    -1,   127,   343,   125,   126,    -1,   264,    -1,   127,
     343,   126,     1,    -1,   127,   343,    -1,   127,   343,   125,
     126,     1,    -1,   127,   343,   125,    -1,   242,    -1,   219,
      -1,   263,    -1,   220,    -1,   339,    -1,   340,    -1,   343,
     125,   339,    -1,   343,   125,   340,    -1,   343,   339,    -1,
     343,   340,    -1,   332,    -1,   333,    -1,   332,   124,   339,
      -1,   332,     1,    -1,   332,   124,   340,    -1,   344,    -1,
     346,   125,   344,    -1,    37,   125,   344,    -1,    38,   125,
     344,    -1,   145,   125,   344,    -1,   347,   125,   344,    -1,
     345,    -1,   344,     1,    -1,   346,   125,   345,    -1,   347,
     125,   345,    -1,   298,    -1,   298,   330,    -1,   299,    -1,
     299,   330,    -1,   301,   333,    -1,   301,   330,    -1,   301,
     133,    -1,   301,   133,   333,    -1,   301,    -1,    65,    -1,
     301,   333,     1,    -1,   301,   330,     1,    -1,   350,    -1,
     352,   125,   350,    -1,   352,     1,   125,   350,    -1,   353,
     125,   350,    -1,   353,     1,   125,   350,    -1,     1,   125,
     350,    -1,   310,   125,   350,    -1,   310,     1,   125,   350,
      -1,   309,   125,   350,    -1,   309,     1,   125,   350,    -1,
     351,    -1,   352,   125,   351,    -1,   353,   125,   351,    -1,
     353,     1,   125,   351,    -1,     1,   125,   351,    -1,   310,
     125,   351,    -1,   309,   125,   351,    -1,   309,     1,   125,
     351,    -1,   352,    -1,   352,   125,    51,    -1,   353,   125,
      51,    -1,   310,   125,    51,    -1,   309,   125,    51,    -1,
       1,   125,    51,    -1,   353,    -1,   352,   125,     1,    -1,
     353,     1,    -1,   361,    -1,   326,    -1,   376,    -1,   123,
      -1,   129,    -1,   245,   123,    -1,   379,    -1,   381,    -1,
     383,    -1,   360,    -1,   193,   123,    -1,   192,   123,    -1,
     191,   123,    -1,   362,    -1,   382,    -1,   377,    -1,   380,
      -1,   384,    -1,   383,     1,    -1,   265,    -1,   387,    -1,
     387,   120,   243,   121,    -1,   358,    -1,   359,   125,   358,
      -1,    -1,    86,   283,   120,   387,   121,   123,    -1,    86,
     283,   120,   387,   129,   359,   121,   123,    -1,    86,   283,
     120,   387,   129,   359,   129,   359,   121,   123,    -1,    86,
     283,   120,   387,   129,   359,   129,   359,   129,   359,   121,
     123,    -1,    86,   283,   120,   387,     3,   359,   121,   123,
      -1,    86,   283,   120,   387,     3,   359,   129,   359,   121,
     123,    -1,    86,   283,   120,   387,   129,   359,     3,   359,
     121,   123,    -1,    86,   120,   387,   121,   123,    -1,    86,
     120,   387,   129,   359,   121,   123,    -1,    86,   120,   387,
     129,   359,   129,   359,   121,   123,    -1,    86,   120,   387,
     129,   359,   129,   359,   129,   359,   121,   123,    -1,    86,
     120,   387,     3,   359,   121,   123,    -1,    86,   120,   387,
       3,   359,   129,   359,   121,   123,    -1,    86,   120,   387,
     129,   359,     3,   359,   121,   123,    -1,   214,   129,   356,
      -1,    52,   267,   129,   356,    -1,    52,   268,   129,   356,
      -1,    52,   129,   356,    -1,    53,   129,   356,    -1,   214,
     129,   365,    -1,    52,   267,   129,   365,    -1,    52,   268,
     129,   365,    -1,    52,   129,   365,    -1,    53,   129,   365,
      -1,   214,   129,   357,    -1,    52,   267,   129,   357,    -1,
      52,   268,   129,   357,    -1,    52,   129,   357,    -1,    52,
     129,    -1,    53,   129,   357,    -1,    53,   129,    -1,   214,
     129,   368,    -1,    52,   267,   129,   368,    -1,    52,   268,
     129,   368,    -1,    52,   129,   368,    -1,    53,   129,   368,
      -1,    80,    -1,    81,    -1,    53,    -1,    80,    -1,    81,
      -1,   300,   123,    -1,   300,   346,   123,    -1,   168,   123,
      -1,   368,   123,    -1,   302,   123,    -1,   302,   346,   123,
      -1,   303,   346,   123,    -1,   172,   123,    -1,    77,   214,
     124,   242,   123,    -1,    31,    77,   214,   124,   242,   123,
      -1,   302,     1,    -1,   300,     1,    -1,   368,     1,    -1,
     169,     1,    -1,   168,     1,    -1,   300,   347,    -1,   365,
      -1,   369,   365,    -1,   370,   365,    -1,   369,     1,   123,
      -1,   368,    -1,   369,   368,    -1,   356,    -1,   371,   356,
      -1,   372,   356,    -1,   357,    -1,   371,   357,    -1,   372,
     357,    -1,   371,   365,    -1,   372,   365,    -1,   371,   368,
      -1,   372,   368,    -1,   371,    -1,   369,    -1,   369,   371,
      -1,   370,   371,    -1,   372,    -1,   370,    -1,   369,   372,
      -1,   370,   372,    -1,   127,    -1,   377,   126,    -1,   375,
     374,    -1,   375,    -1,   375,   373,    -1,   123,    -1,   245,
     123,    -1,   265,   123,    -1,    54,   120,   245,   121,   356,
      -1,    54,   120,   265,   121,   356,    -1,    54,   120,   245,
     121,   356,    64,   356,    -1,    54,   120,   265,   121,   356,
      64,   356,    -1,    55,   120,   245,   121,   356,    -1,    55,
     120,   265,   121,   356,    -1,    54,   120,   265,    -1,   379,
       1,    -1,    56,   120,   245,   121,   356,    -1,    56,   120,
     265,   356,    -1,    56,   120,   121,   356,    -1,    57,   356,
      56,   120,   245,   121,   123,    -1,    57,   356,    56,   120,
     265,   123,    -1,    58,   120,   378,   378,   121,   356,    -1,
      58,   120,   378,   121,   356,    -1,    58,   120,   378,   378,
     245,   121,   356,    -1,    58,   120,   378,   378,   265,   356,
      -1,    58,   120,   121,   356,    -1,    58,   120,   214,   129,
     245,   121,   356,    -1,    58,   120,   214,   129,   245,   123,
     245,   121,   356,    -1,    58,   120,     1,    -1,    58,   120,
     265,     1,    -1,    58,   120,   378,     1,    -1,    58,   120,
     378,   265,     1,    -1,    58,   120,   378,   378,   265,    -1,
      58,   120,   378,   378,   121,   357,    -1,    58,   120,   378,
     378,   245,   121,   357,    -1,    58,   120,   378,   378,   265,
     357,    -1,    57,   356,    56,   120,   245,   121,    -1,    57,
     356,    56,   120,   245,    -1,    57,   356,    56,   120,   265,
      -1,    57,   356,    56,   120,    -1,    57,   356,    56,    -1,
      57,   356,    -1,    57,    -1,    56,     1,    -1,    56,   120,
     121,     1,    -1,    56,   120,   265,    -1,    56,   120,   245,
     121,   357,    -1,    56,   120,   265,   357,    -1,    59,   214,
     123,    -1,    60,   123,    -1,    61,   123,    -1,    62,   123,
      -1,    62,   245,   123,    -1,    62,   265,   123,    -1,    62,
     219,   123,    -1,    62,   220,   123,    -1,    62,   265,    -1,
      62,   220,    -1,    62,    -1,    59,    -1,   302,   334,   369,
     376,    -1,   302,   334,   376,    -1,   302,   336,   369,   376,
      -1,   302,   336,   376,    -1,   334,   369,   376,    -1,   334,
     376,    -1,   302,   334,   369,   377,    -1,   302,   334,   377,
      -1,   302,   336,   369,   377,    -1,   302,   336,   377,    -1,
     334,   369,   377,    -1,   334,   377,    -1,     5,    -1,   387,
       5,    -1,   385,    -1,   211,    -1,   302,   211,    -1,   366,
      -1,    76,   387,    -1,    76,    31,   387,    -1,    76,   214,
     387,    -1,   123,    -1,   363,   385,    -1,   363,   211,    -1,
     363,   366,    -1,   363,    76,   387,    -1,   363,    76,    31,
     387,    -1,   363,    76,   214,   387,    -1,   363,   129,    -1,
      31,   129,    -1,   101,   214,    -1,   101,   147,    -1,   393,
      -1,   363,   393,    -1,   213,    -1,   302,   213,    -1,   386,
      -1,   363,   213,    -1,   363,   386,    -1,   367,    -1,   363,
     367,    -1,   389,    -1,   391,   389,    -1,   390,   389,    -1,
     391,     1,    -1,   390,     1,    -1,   388,    -1,   391,   388,
      -1,   390,   211,    -1,   390,   363,   211,    -1,   391,    -1,
     390,    -1,    -1,   105,   387,   214,   127,   398,   126,    -1,
     105,   387,   147,   127,   398,   126,    -1,   105,   387,   127,
     398,   126,    -1,   301,   214,   387,   123,    -1,   214,    -1,
     119,   214,    -1,   118,   214,    -1,   395,    -1,   396,   125,
     395,    -1,   107,   396,   123,    -1,   107,   396,   214,   123,
      -1,   394,    -1,   397,    -1,   398,   394,    -1,   398,   397,
      -1,   108,   120,   243,   125,   243,   121,    -1,   106,   120,
     387,   125,   214,   121,    -1,   107,   120,   387,   125,   214,
     121,    -1,   105,   120,   387,   121,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   279,   279,   308,   367,   368,   468,   472,   475,   476,
     477,   526,   528,   533,   538,   543,   545,   550,   552,   557,
     559,   564,   566,   568,   570,   572,   576,   580,   593,   595,
     597,   599,   601,   607,   609,   614,   619,   624,   626,   628,
     633,   634,   638,   639,   650,   654,   655,   657,   662,   663,
     665,   668,   680,   691,   710,   712,   717,   718,   719,   720,
     721,   722,   723,   724,   725,   729,   730,   731,   732,   736,
     737,   738,   739,   740,   741,   742,   746,   748,   753,   755,
     757,   759,   761,   791,   793,   798,   800,   802,   804,   806,
     835,   837,   839,   844,   846,   851,   853,   857,   859,   861,
     863,   868,   871,   874,   877,   942,   944,   949,   951,   953,
     955,   957,   988,   992,   993,   994,   998,   999,  1000,  1004,
    1005,  1006,  1007,  1011,  1014,  1017,  1020,  1023,  1028,  1029,
    1031,  1033,  1035,  1037,  1042,  1046,  1049,  1052,  1055,  1058,
    1063,  1064,  1066,  1071,  1075,  1077,  1082,  1084,  1089,  1091,
    1096,  1101,  1103,  1108,  1110,  1112,  1114,  1119,  1121,  1123,
    1125,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,  1138,
    1139,  1140,  1142,  1143,  1145,  1149,  1152,  1153,  1154,  1155,
    1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,  1165,
    1167,  1168,  1172,  1173,  1174,  1178,  1182,  1183,  1184,  1188,
    1189,  1190,  1191,  1192,  1196,  1197,  1209,  1210,  1214,  1215,
    1216,  1217,  1218,  1219,  1220,  1221,  1225,  1229,  1230,  1234,
    1242,  1243,  1247,  1248,  1249,  1253,  1254,  1258,  1259,  1260,
    1261,  1262,  1263,  1303,  1304,  1308,  1316,  1317,  1325,  1326,
    1328,  1329,  1338,  1339,  1343,  1350,  1357,  1363,  1370,  1376,
    1385,  1392,  1398,  1404,  1410,  1416,  1422,  1433,  1438,  1439,
    1444,  1445,  1446,  1450,  1454,  1455,  1456,  1457,  1458,  1459,
    1460,  1473,  1474,  1475,  1476,  1477,  1478,  1479,  1480,  1481,
    1482,  1483,  1484,  1485,  1486,  1487,  1488,  1489,  1490,  1491,
    1492,  1493,  1494,  1495,  1497,  1498,  1499,  1500,  1501,  1503,
    1504,  1508,  1512,  1516,  1517,  1521,  1523,  1524,  1525,  1526,
    1527,  1528,  1529,  1530,  1531,  1533,  1534,  1535,  1536,  1537,
    1538,  1539,  1540,  1544,  1546,  1547,  1548,  1549,  1550,  1551,
    1552,  1553,  1554,  1556,  1557,  1558,  1559,  1560,  1561,  1562,
    1563,  1567,  1568,  1569,  1570,  1574,  1575,  1576,  1577,  1578,
    1582,  1583,  1584,  1585,  1586,  1587,  1588,  1589,  1590,  1592,
    1593,  1594,  1598,  1599,  1603,  1604,  1608,  1609,  1610,  1611,
    1612,  1613,  1614,  1615,  1619,  1620,  1624,  1625,  1626,  1627,
    1628,  1629,  1630,  1634,  1635,  1636,  1637,  1638,  1642,  1643,
    1644,  1645,  1646,  1650,  1658,  1659,  1660,  1661,  1662,  1663,
    1664,  1665,  1666,  1670,  1671,  1672,  1673,  1674,  1676,  1677,
    1678,  1679,  1683,  1684,  1685,  1687,  1688,  1692,  1693,  1694,
    1696,  1697,  1701,  1702,  1703,  1705,  1706,  1710,  1711,  1712,
    1716,  1717,  1718,  1722,  1723,  1724,  1725,  1726,  1728,  1729,
    1730,  1731,  1733,  1734,  1735,  1736,  1738,  1739,  1740,  1741,
    1745,  1746,  1747,  1748,  1749,  1751,  1752,  1753,  1754,  1758,
    1759,  1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,
    1772,  1773,  1774,  1775,  1779,  1780,  1781,  1785,  1786,  1787,
    1788,  1790,  1791,  1793,  1794,  1799,  1801,  1806,  1810,  1811,
    1812,  1814,  1815,  1817,  1818,  1823,  1825,  1830,  1834,  1835,
    1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,  1844,  1845,
    1849,  1850,  1854,  1855,  1860,  1861,  1865,  1866,  1867,  1868,
    1869,  1870,  1871,  1875,  1876,  1880,  1884,  1888,  1895,  1896,
    1897,  1898,  1899,  1903,  1904,  1955,  1956,  1957,  1958,  1959,
    1960,  1961,  1965,  1966,  1967,  1968,  1969,  1976,  1977,  1978,
    1979,  1983,  1984,  1985,  1987,  1988,  1992,  1993,  1994,  1996,
    1997,  2001,  2002,  2003,  2005,  2006,  2010,  2011,  2012,  2016,
    2017,  2018,  2022,  2023,  2024,  2025,  2026,  2027,  2028,  2029,
    2030,  2032,  2033,  2034,  2035,  2036,  2037,  2038,  2039,  2041,
    2042,  2043,  2044,  2046,  2047,  2048,  2049,  2051,  2058,  2062,
    2066,  2073,  2074,  2078,  2083,  2084,  2088,  2089,  2090,  2091,
    2097,  2098,  2099,  2103,  2104,  2105,  2106,  2110,  2112,  2116,
    2117,  2118,  2119,  2120,  2121,  2125,  2126,  2127,  2128,  2129,
    2130,  2134,  2135,  2136,  2140,  2141,  2142,  2146,  2150,  2151,
    2155,  2156,  2157,  2161,  2162,  2164,  2165,  2166,  2167,  2168,
    2170,  2171,  2172,  2173,  2174,  2178,  2179,  2183,  2184,  2185,
    2189,  2190,  2191,  2192,  2193,  2194,  2195,  2196,  2197,  2199,
    2200,  2202,  2203,  2204,  2205,  2206,  2210,  2211,  2215,  2216,
    2220,  2224,  2225,  2226,  2231,  2232,  2236,  2237,  2238,  2239,
    2240,  2241,  2242,  2243,  2244,  2245,  2246,  2247,  2248,  2249,
    2250,  2251,  2252,  2253,  2254,  2255,  2256,  2257,  2258,  2259,
    2260,  2261,  2265,  2266,  2267,  2268,  2269,  2270,  2271,  2272,
    2273,  2274,  2275,  2276,  2277,  2278,  2279,  2280,  2281,  2282,
    2283,  2284,  2285,  2286,  2287,  2288,  2294,  2296,  2298,  2300,
    2302,  2304,  2306,  2308,  2310,  2312,  2317,  2318,  2322,  2328,
    2334,  2341,  2351,  2352,  2353,  2354,  2358,  2359,  2360,  2362,
    2363,  2364,  2366,  2367,  2368,  2372,  2376,  2384,  2393,  2402,
    2403,  2405,  2406,  2410,  2417,  2424,  2427,  2440,  2454,  2457,
    2459,  2461,  2466,  2467,  2471,  2472,  2473,  2474,  2475,  2476,
    2477,  2478,  2482,  2483,  2484,  2485,  2486,  2487,  2488,  2489,
    2490,  2491,  2495,  2496,  2497,  2498,  2499,  2500,  2501,  2502,
    2503,  2504,  2508,  2509,  2510,  2511,  2512,  2513,  2514,  2515,
    2516,  2517,  2518,  2519,  2523,  2524,  2525,  2526,  2527,  2528,
    2529,  2530,  2531,  2532,  2536,  2537,  2541,  2542,  2543,  2544,
    2545,  2546,  2547,  2548,  2549,  2551,  2553,  2571,  2589,  2590,
    2594,  2595,  2596,  2597,  2598,  2599,  2600,  2601,  2602,  2620,
    2637,  2638,  2639,  2640,  2641,  2642,  2643,  2644,  2645,  2646,
    2647,  2648,  2649,  2667,  2684,  2685,  2686,  2687,  2688,  2689,
    2690,  2691,  2692,  2693,  2694,  2695,  2696,  2714,  2731,  2732,
    2736,  2737,  2738,  2739,  2740,  2744,  2745,  2752,  2754,  2763,
    2772,  2781,  2790,  2791,  2792,  2793,  2797,  2798,  2799,  2800,
    2801,  2802,  2803,  2804,  2805,  2809,  2813,  2814,  2815,  2816,
    2817,  2822,  2831,  2840,  2849,  2863,  2864,  2869,  2873,  2874,
    2875,  2876,  2877,  2882,  2891,  2900,  2909,  2923,  2924,  2973,
    2974,  2975,  2976,  2988,  2989,  2990,  2995,  2996,  2997,  2998,
    2999,  3003,  3004,  3008,  3009,  3010,  3014,  3015,  3019,  3020,
    3021,  3022,  3023,  3024,  3025,  3026,  3027,  3028,  3029,  3030,
    3031,  3032,  3033,  3034,  3038,  3039,  3040,  3041,  3042,  3043,
    3044,  3045,  3049,  3050,  3051,  3052,  3056,  3057,  3058,  3059,
    3060,  3064,  3065,  3066,  3067,  3068,  3072,  3073,  3075,  3077,
    3079,  3084,  3085,  3087,  3089,  3094,  3095,  3096,  3097,  3101,
    3102,  3103,  3104,  3108,  3109,  3110,  3111,  3115,  3116,  3117,
    3118,  3122,  3123,  3124,  3125,  3129,  3130,  3131,  3147,  3148,
    3149,  3150,  3163,  3179,  3180,  3185,  3186,  3190,  3191,  3192,
    3193,  3196,  3197,  3201,  3202,  3203,  3207,  3211,  3215,  3216,
    3217,  3218,  3219,  3228,  3237,  3238,  3239,  3240,  3244,  3245,
    3249,  3250,  3255,  3256,  3257,  3258,  3259,  3260,  3279,  3280,
    3284,  3285,  3286,  3287,  3288,  3289,  3291,  3292,  3293,  3294,
    3298,  3299,  3300,  3301,  3302,  3304,  3305,  3306,  3310,  3311,
    3312,  3313,  3314,  3315,  3319,  3320,  3321,  3326,  3327,  3328,
    3329,  3330,  3331,  3332,  3333,  3334,  3335,  3336,  3337,  3338,
    3342,  3343,  3344,  3345,  3346,  3347,  3348,  3352,  3353,  3357,
    3358,  3359,  3363,  3364,  3365,  3366,  3368,  3369,  3370,  3372,
    3373,  3374,  3375,  3377,  3378,  3379,  3383,  3384,  3385,  3386,
    3387,  3389,  3390,  3391,  3392,  3393,  3397,  3398,  3399,  3400,
    3401,  3402,  3403,  3405,  3406,  3407,  3408,  3409,  3413,  3414,
    3415,  3419,  3420,  3424,  3425,  3426,  3427,  3431,  3432,  3433,
    3435,  3436,  3437,  3441,  3445,  3446,  3448,  3449,  3450,  3454,
    3455,  3456,  3457,  3461,  3462,  3466,  3467,  3468,  3472,  3473,
    3474,  3475,  3476,  3477,  3478,  3482,  3483,  3484,  3485,  3489,
    3490,  3491,  3492,  3496,  3500,  3504,  3506,  3509,  3515,  3516,
    3517,  3521,  3522,  3523,  3524,  3525,  3526,  3530,  3531,  3535,
    3536,  3537,  3539,  3540,  3542,  3543,  3544,  3545,  3546,  3548,
    3549,  3553,  3554,  3555,  3556,  3560,  3561,  3562,  3563,  3565,
    3566,  3567,  3568,  3569,  3570,  3571,  3574,  3578,  3579,  3583,
    3584,  3588,  3589,  3590,  3591,  3592,  3593,  3594,  3595,  3599,
    3600,  3601,  3602,  3608,  3609,  3611,  3612,  3615,  3616,  3619,
    3620,  3621,  3622,  3623,  3624,  3628,  3629,  3641,  3642,  3645,
    3648,  3650,  3651,  3652,  3662,  3664,  3665,  3667,  3668,  3669,
    3670,  3680,  3681,  3682,  3683,  3684,  3685,  3689,  3690,  3698,
    3700,  3701,  3703,  3705,  3709,  3710,  3711,  3712,  3713,  3717,
    3718,  3719,  3721,  3726,  3727,  3728,  3732,  3733,  3734,  3738,
    3742,  3743,  3744,  3748,  3749,  3753,  3754,  3758,  3759,  3760,
    3761,  3765,  3769,  3773,  3777
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "LONG", "SIGNED", "UNSIGNED", "FLOAT",
  "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST", "STRUCT", "UNION",
  "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH", "WHILE", "DO",
  "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX", "ELSE", "CLASS",
  "THISCLASS", "CLASS_NAME", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "BOOL",
  "_BOOL", "_COMPLEX", "_IMAGINARY", "RESTRICT", "'*'", "'<'", "'>'",
  "'('", "')'", "'~'", "';'", "'='", "','", "'}'", "'{'", "'.'", "':'",
  "'$'", "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'", "'%'", "'^'",
  "'|'", "'?'", "$accept", "guess_type", "type", "base_strict_type",
  "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "simple_postfix_expression", "argument_expression_list",
  "argument_expression_list_error", "common_unary_expression",
  "unary_expression", "simple_unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "simple_postfix_expression_error", "common_unary_expression_error",
  "unary_expression_error", "simple_unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    42,    60,    62,
      40,    41,   126,    59,    61,    44,   125,   123,    46,    58,
      36,    91,    93,    38,    43,    45,    33,    47,    37,    94,
     124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   142,   143,   143,   144,   144,   145,   146,   147,   147,
     147,   148,   148,   149,   150,   151,   151,   152,   152,   153,
     153,   154,   154,   154,   154,   154,   154,   154,   155,   155,
     155,   155,   155,   156,   156,   157,   158,   159,   159,   159,
     160,   160,   161,   161,   161,   162,   162,   162,   163,   163,
     163,   163,   163,   163,   164,   164,   165,   165,   165,   165,
     165,   165,   165,   165,   165,   166,   166,   166,   166,   167,
     167,   167,   167,   167,   167,   167,   168,   168,   169,   169,
     169,   169,   169,   170,   170,   171,   171,   171,   171,   171,
     172,   172,   172,   173,   173,   174,   174,   174,   174,   174,
     174,   174,   174,   174,   174,   175,   175,   176,   176,   176,
     176,   176,   177,   178,   178,   178,   179,   179,   179,   180,
     180,   180,   180,   181,   181,   181,   181,   181,   182,   182,
     182,   182,   182,   182,   183,   184,   184,   184,   184,   184,
     185,   185,   185,   186,   187,   187,   188,   188,   189,   189,
     190,   191,   191,   192,   192,   192,   192,   193,   193,   193,
     193,   194,   194,   194,   194,   194,   194,   194,   194,   194,
     194,   194,   194,   194,   194,   195,   195,   195,   195,   195,
     195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
     195,   195,   195,   195,   195,   195,   196,   196,   196,   197,
     197,   197,   197,   197,   198,   198,   199,   199,   200,   200,
     200,   200,   200,   200,   200,   200,   201,   202,   202,   203,
     204,   204,   205,   205,   205,   206,   206,   207,   207,   207,
     207,   207,   207,   208,   208,   209,   210,   210,   210,   210,
     210,   210,   210,   210,   211,   211,   211,   211,   211,   211,
     212,   213,   213,   213,   213,   213,   213,   214,   215,   215,
     216,   216,   216,   217,   218,   218,   218,   218,   218,   218,
     218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
     218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
     218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
     218,   219,   220,   221,   221,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   223,   223,   223,   223,   223,   223,   223,
     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
     223,   224,   224,   224,   224,   225,   225,   225,   225,   225,
     226,   226,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   227,   227,   228,   228,   229,   229,   229,   229,
     229,   229,   229,   229,   230,   230,   231,   231,   231,   231,
     231,   231,   231,   232,   232,   232,   232,   232,   233,   233,
     233,   233,   233,   234,   235,   235,   235,   235,   235,   235,
     235,   235,   235,   236,   236,   236,   236,   236,   236,   236,
     236,   236,   237,   237,   237,   237,   237,   238,   238,   238,
     238,   238,   239,   239,   239,   239,   239,   240,   240,   240,
     241,   241,   241,   242,   242,   242,   242,   242,   242,   242,
     242,   242,   242,   242,   242,   242,   242,   242,   242,   242,
     243,   243,   243,   243,   243,   243,   243,   243,   243,   244,
     244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
     245,   245,   245,   245,   246,   246,   246,   247,   247,   247,
     247,   247,   247,   247,   247,   247,   247,   247,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   249,   249,
     249,   249,   249,   249,   249,   249,   249,   249,   249,   249,
     250,   250,   251,   251,   252,   252,   253,   253,   253,   253,
     253,   253,   253,   254,   254,   254,   254,   254,   255,   255,
     255,   255,   255,   256,   256,   256,   256,   256,   256,   256,
     256,   256,   257,   257,   257,   257,   257,   257,   257,   257,
     257,   258,   258,   258,   258,   258,   259,   259,   259,   259,
     259,   260,   260,   260,   260,   260,   261,   261,   261,   262,
     262,   262,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   264,   264,   264,   264,   264,   265,   265,   265,   265,
     265,   265,   265,   266,   266,   266,   266,   267,   268,   269,
     269,   269,   269,   269,   269,   270,   270,   270,   270,   270,
     270,   271,   271,   271,   272,   272,   272,   273,   274,   274,
     275,   275,   275,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   277,   277,   278,   278,   278,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   280,   280,   281,   281,
     282,   283,   283,   283,   284,   284,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   286,   286,   287,   287,   287,   287,
     287,   287,   287,   287,   287,   287,   288,   288,   289,   289,
     289,   289,   290,   290,   290,   290,   291,   291,   291,   291,
     291,   291,   291,   291,   291,   292,   293,   293,   294,   295,
     295,   295,   295,   296,   296,   296,   296,   296,   296,   296,
     296,   296,   297,   297,   298,   298,   298,   298,   298,   298,
     298,   298,   299,   299,   299,   299,   299,   299,   299,   299,
     299,   299,   300,   300,   300,   300,   300,   300,   300,   300,
     300,   300,   301,   301,   301,   301,   301,   301,   301,   301,
     301,   301,   301,   301,   302,   302,   302,   302,   302,   302,
     302,   302,   302,   302,   303,   303,   304,   304,   304,   304,
     304,   304,   304,   304,   304,   304,   304,   304,   305,   305,
     306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
     307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
     307,   307,   307,   307,   308,   308,   308,   308,   308,   308,
     308,   308,   308,   308,   308,   308,   308,   308,   309,   309,
     310,   310,   310,   310,   310,   311,   311,   311,   311,   311,
     311,   311,   311,   311,   311,   311,   312,   312,   312,   312,
     312,   312,   312,   312,   312,   313,   314,   314,   314,   314,
     314,   315,   315,   315,   315,   316,   316,   317,   318,   318,
     318,   318,   318,   319,   319,   319,   319,   320,   320,   321,
     321,   321,   321,   322,   322,   322,   323,   323,   323,   323,
     323,   324,   324,   325,   325,   325,   326,   326,   327,   327,
     327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
     327,   327,   327,   327,   328,   328,   328,   328,   328,   328,
     328,   328,   329,   329,   329,   329,   330,   330,   330,   330,
     330,   331,   331,   331,   331,   331,   332,   332,   332,   332,
     332,   333,   333,   333,   333,   334,   334,   334,   334,   335,
     335,   335,   335,   336,   336,   336,   336,   337,   337,   337,
     337,   338,   338,   338,   338,   339,   339,   339,   340,   340,
     340,   340,   340,   341,   341,   342,   342,   343,   343,   343,
     343,   343,   343,   344,   344,   344,   345,   345,   346,   346,
     346,   346,   346,   346,   347,   347,   347,   347,   348,   348,
     349,   349,   350,   350,   350,   350,   350,   350,   351,   351,
     352,   352,   352,   352,   352,   352,   352,   352,   352,   352,
     353,   353,   353,   353,   353,   353,   353,   353,   354,   354,
     354,   354,   354,   354,   355,   355,   355,   356,   356,   356,
     356,   356,   356,   356,   356,   356,   356,   356,   356,   356,
     357,   357,   357,   357,   357,   357,   357,   358,   358,   359,
     359,   359,   360,   360,   360,   360,   360,   360,   360,   360,
     360,   360,   360,   360,   360,   360,   361,   361,   361,   361,
     361,   361,   361,   361,   361,   361,   362,   362,   362,   362,
     362,   362,   362,   362,   362,   362,   362,   362,   363,   363,
     363,   364,   364,   365,   365,   365,   365,   366,   366,   366,
     366,   366,   366,   367,   368,   368,   368,   368,   368,   369,
     369,   369,   369,   370,   370,   371,   371,   371,   372,   372,
     372,   372,   372,   372,   372,   373,   373,   373,   373,   374,
     374,   374,   374,   375,   376,   377,   377,   377,   378,   378,
     378,   379,   379,   379,   379,   379,   379,   380,   380,   381,
     381,   381,   381,   381,   381,   381,   381,   381,   381,   381,
     381,   382,   382,   382,   382,   382,   382,   382,   382,   382,
     382,   382,   382,   382,   382,   382,   382,   382,   382,   382,
     382,   383,   383,   383,   383,   383,   383,   383,   383,   384,
     384,   384,   384,   385,   385,   385,   385,   385,   385,   386,
     386,   386,   386,   386,   386,   387,   387,   388,   388,   388,
     388,   388,   388,   388,   388,   388,   388,   388,   388,   388,
     388,   388,   388,   388,   388,   388,   388,   389,   389,   389,
     389,   389,   389,   389,   390,   390,   390,   390,   390,   391,
     391,   391,   391,   392,   392,   392,   393,   393,   393,   394,
     395,   395,   395,   396,   396,   397,   397,   398,   398,   398,
     398,   399,   400,   401,   402
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     1,     2,     2,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     2,     6,     6,     5,     5,     6,     6,
       5,     5,     7,     7,     6,     6,     7,     7,     6,     6,
       4,     5,     4,     6,     4,     1,     1,     1,     1,     3,
       2,     1,     2,     2,     2,     1,     4,     4,     3,     4,
       4,     3,     3,     2,     2,     4,     4,     3,     4,     3,
       3,     2,     2,     1,     4,     4,     3,     4,     4,     3,
       3,     2,     2,     4,     4,     3,     4,     3,     3,     2,
       2,     1,     1,     3,     3,     1,     1,     3,     3,     2,
       2,     2,     2,     2,     4,     2,     4,     5,     5,     4,
       2,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     4,     1,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     2,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     5,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     2,     1,     3,     3,     1,     1,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     1,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       2,     2,     3,     2,     5,     6,     6,     3,     2,     5,
       1,     1,     1,     1,     1,     4,     1,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     1,
       3,     3,     1,     5,     5,     5,     5,     4,     4,     4,
       4,     5,     5,     5,     5,     4,     4,     4,     4,     5,
       5,     5,     5,     5,     5,     5,     5,     3,     3,     2,
       2,     1,     3,     3,     3,     3,     1,     2,     3,     3,
       2,     2,     2,     1,     2,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     1,     3,     2,     1,     2,     2,
       2,     4,     4,     3,     3,     4,     5,     4,     6,     6,
       4,     5,     4,     6,     6,     2,     2,     2,     5,     3,
       5,     6,     5,     7,     7,     8,     8,     7,     7,     3,
       3,     3,     4,     3,     5,     5,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     4,     4,     1,     1,     2,     2,     3,
       5,     2,     3,     5,     5,     5,     1,     3,     2,     2,
       3,     3,     2,     3,     3,     4,     3,     3,     3,     3,
       3,     3,     4,     4,     4,     1,     1,     4,     3,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     1,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     2,     4,     5,     1,     1,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     4,     5,     3,     3,
       1,     3,     3,     3,     3,     1,     1,     1,     4,     4,
       4,     3,     4,     4,     4,     3,     1,     3,     4,     3,
       4,     4,     4,     4,     3,     2,     3,     3,     3,     3,
       2,     2,     2,     3,     4,     1,     1,     2,     3,     3,
       3,     3,     2,     2,     2,     3,     4,     1,     1,     1,
       1,     1,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     1,     2,     3,     6,     5,     3,     4,
       2,     3,     3,     3,     3,     4,     4,     4,     2,     3,
       3,     3,     4,     4,     3,     4,     2,     3,     3,     3,
       4,     4,     1,     2,     2,     3,     1,     1,     2,     2,
       3,     1,     1,     2,     2,     3,     1,     2,     3,     2,
       2,     1,     2,     3,     2,     1,     2,     3,     3,     1,
       2,     3,     3,     1,     2,     3,     3,     1,     2,     3,
       3,     1,     2,     3,     3,     1,     3,     4,     1,     4,
       2,     5,     3,     1,     1,     1,     1,     1,     1,     3,
       3,     2,     2,     1,     1,     3,     2,     3,     1,     3,
       3,     3,     3,     3,     1,     2,     3,     3,     1,     2,
       1,     2,     2,     2,     2,     3,     1,     1,     3,     3,
       1,     3,     4,     3,     4,     3,     3,     4,     3,     4,
       1,     3,     3,     4,     3,     3,     3,     4,     1,     3,
       3,     3,     3,     3,     1,     3,     2,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     2,     2,     2,
       1,     1,     1,     1,     1,     2,     1,     1,     4,     1,
       3,     0,     6,     8,    10,    12,     8,    10,    10,     5,
       7,     9,    11,     7,     9,     9,     3,     4,     4,     3,
       3,     3,     4,     4,     3,     3,     3,     4,     4,     3,
       2,     3,     2,     3,     4,     4,     3,     3,     1,     1,
       1,     1,     1,     2,     3,     2,     2,     2,     3,     3,
       2,     5,     6,     2,     2,     2,     2,     2,     2,     1,
       2,     2,     3,     1,     2,     1,     2,     2,     1,     2,
       2,     2,     2,     2,     2,     1,     1,     2,     2,     1,
       1,     2,     2,     1,     2,     2,     1,     2,     1,     2,
       2,     5,     5,     7,     7,     5,     5,     3,     2,     5,
       4,     4,     7,     6,     6,     5,     7,     6,     4,     7,
       9,     3,     4,     4,     5,     5,     6,     7,     6,     6,
       5,     5,     4,     3,     2,     1,     2,     4,     3,     5,
       4,     3,     2,     2,     2,     3,     3,     3,     3,     2,
       2,     1,     1,     4,     3,     4,     3,     3,     2,     4,
       3,     4,     3,     3,     2,     1,     2,     1,     1,     2,
       1,     2,     3,     3,     1,     2,     2,     2,     3,     4,
       4,     2,     2,     2,     2,     1,     2,     1,     2,     1,
       2,     2,     1,     2,     1,     2,     2,     2,     2,     1,
       2,     2,     3,     1,     1,     0,     6,     6,     5,     4,
       1,     2,     2,     1,     3,     3,     4,     1,     1,     2,
       2,     6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1315,   257,     6,   625,   626,   627,   628,   629,   687,   688,
     689,   690,   691,   693,   696,   697,   694,   695,   681,   682,
     686,   692,   782,   783,   637,  1160,   235,   705,   939,   940,
       0,     0,   943,  1158,  1159,   706,   707,   698,     0,     0,
       0,     0,     0,   944,   945,   709,   708,   710,   711,   630,
     982,     0,  1284,   830,   701,     8,     4,     0,     0,     0,
    1278,     0,  1297,   906,   824,     0,   700,     0,   676,   678,
     832,   834,   683,   826,   828,   765,   699,     0,     0,   677,
     679,     0,     0,     0,     0,     0,  1005,   680,     0,   941,
       0,     0,     0,  1280,  1302,  1277,  1299,  1309,  1304,     0,
       0,     0,  1295,     0,  1292,  1275,     0,     0,  1281,     0,
       0,     0,     0,  1294,  1293,     0,   684,   983,   680,   984,
     897,   896,   906,   938,   895,   925,   996,     0,   937,  1001,
       0,     0,     0,     0,     0,     0,  1170,     0,   237,   236,
       0,     0,   245,     0,   244,     2,     3,     0,     5,     0,
     639,   638,     0,     0,   657,     0,     0,     0,     0,   769,
       0,   749,   748,     0,  1173,   627,   690,   691,  1167,   831,
       8,  1279,  1298,   906,   825,   833,   835,   827,   829,  1005,
    1013,   680,     0,     0,  1044,     0,     0,     0,  1054,     0,
       0,   897,     0,   896,     0,     0,   915,     0,     0,   619,
     620,   621,   622,   623,  1067,   624,   920,   818,   890,   812,
       0,   822,     0,   814,   816,   765,   820,     0,     0,  1066,
       0,     0,  1070,  1080,     0,     0,     0,     0,     0,     0,
    1006,     0,   713,   714,   715,   716,   717,   719,   722,   723,
     720,   721,   712,   718,   735,   724,     0,     0,   729,   728,
     730,   731,  1203,   727,     0,     0,   802,   726,   808,   804,
     806,   810,   725,     0,  1179,     0,     0,     0,     0,  1268,
    1274,   627,     0,  1291,  1286,  1300,     0,  1287,  1303,  1285,
    1301,  1296,  1308,  1311,     0,     0,     0,     0,     0,  1306,
    1307,  1310,  1305,     1,     0,  1282,  1283,  1276,     0,     0,
     478,   263,     0,     0,     0,     0,     0,     0,   372,   373,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     367,     0,   370,     0,     0,   366,   368,   369,   371,     0,
     265,     0,   264,   305,   272,   271,   258,   477,     0,   362,
     374,     0,   376,   383,   388,   394,     0,   403,   412,   417,
     422,   427,   430,   433,   450,     0,   511,   510,   514,   516,
     523,   528,   533,   542,   551,   556,   561,   566,   569,   572,
       0,   260,   295,   296,   297,   298,     0,     0,     0,     0,
       0,   685,   985,     0,   927,     0,   932,     0,     0,     0,
       0,     0,     0,     0,   938,   997,  1002,     0,   907,   999,
     909,  1004,  1000,   698,     4,   229,   228,   227,   233,     0,
     264,   374,   219,   514,     0,   206,   249,     0,     0,   248,
     255,     0,     0,  1161,  1162,     0,   168,     0,   169,   170,
       0,     0,     0,     0,     0,   172,   246,     0,     0,     0,
       0,    29,    31,   163,   175,   188,     0,   187,     0,   116,
     119,     0,   195,   128,     0,   164,   140,     0,   167,   183,
     196,   199,     0,     0,   264,     0,     0,   176,     0,  1009,
     680,     0,    12,    18,     0,   837,   836,   844,   838,     0,
     840,   842,   765,   849,   848,   250,   256,   247,     0,     0,
     239,   238,   670,   631,   634,   669,   673,   659,     0,     0,
       0,   222,   223,   224,   225,     0,   217,     0,   778,   771,
       0,     0,   768,   775,   770,     0,     0,   781,   772,     0,
       0,   751,   750,     0,     0,     0,     0,     0,  1006,  1014,
       0,  1046,     0,     0,  1264,  1270,     0,  1266,  1272,  1055,
    1168,     0,     0,     0,  1169,   914,     0,   264,   617,   618,
       0,     0,     0,     0,   639,   638,   640,     0,   752,     0,
       0,   690,     0,     0,  1064,   819,     8,   906,   813,   823,
     815,   817,   821,   938,   895,   680,   987,   986,     0,     0,
       0,   919,     0,     0,   918,     0,     0,     0,  1096,     0,
     916,   917,  1007,     0,  1008,     0,     0,  1177,  1165,  1176,
      76,  1174,   716,   717,  1163,   906,   803,   809,   805,   807,
     811,   680,     0,  1178,  1175,  1166,     0,  1180,     0,  1267,
    1273,  1181,     0,     0,     0,     0,     0,     0,     0,     0,
    1262,     0,     0,     0,   724,     0,     0,     0,   157,  1100,
    1101,   727,     0,     0,     0,   264,     0,   374,     0,     0,
     514,   601,   606,     0,  1098,  1185,  1188,  1106,  1097,  1110,
       0,     0,     0,     0,  1207,  1205,  1099,  1112,     0,  1113,
    1104,  1111,     0,  1114,  1204,     0,     0,  1288,   906,     0,
       0,     0,  1298,     0,   895,  1013,   680,     0,     0,     0,
       0,  1274,  1312,     0,     0,   433,     0,     0,   942,   488,
       0,     0,   323,     0,   364,   355,   513,   512,   503,     0,
     350,   498,   351,   499,     0,   884,   874,   882,   876,   878,
     880,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   360,   508,   273,     0,     0,     0,   788,
     784,   786,   790,  1058,     0,   261,     0,   300,   301,     0,
     342,     0,   341,     0,   480,    93,     0,   270,   479,     0,
     313,   314,     0,     0,     0,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   459,     0,     0,   353,   501,
     352,   500,     0,     0,     0,     0,     0,     0,     0,   395,
     534,     0,     0,   393,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   702,     0,   321,   322,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   703,   704,     0,     0,     0,  1327,  1328,     0,
       0,     0,   901,     0,     0,     0,   905,     0,     0,     0,
     931,   930,   928,   929,   938,   997,  1002,   908,   910,  1024,
      10,     9,     0,     0,     0,   680,   986,   207,     0,     0,
     264,   206,     0,     0,   856,   850,   852,   854,     0,     0,
       0,    16,    20,     0,   185,   184,   186,     0,     0,     0,
       0,   367,     0,   264,     0,    26,     0,    21,    28,    24,
       0,    25,    23,    22,    30,    32,   190,    83,   191,   122,
     162,     0,     0,     0,     0,   132,     0,     0,   134,     0,
       0,   143,   161,   200,   197,   202,   201,   198,   203,   115,
       0,     0,     0,   906,   746,   177,  1021,     0,  1017,   680,
       0,    11,    17,   736,   922,  1066,     0,     0,     0,  1010,
       0,     0,   173,   165,   192,   181,     0,   180,     0,   166,
     906,   179,     0,   639,   638,   845,   839,   841,   843,     0,
       0,     0,   636,   672,     0,     0,     7,   212,   208,   767,
       0,     0,     0,     0,  1043,  1050,  1051,  1052,    62,    53,
      92,    39,    38,    57,    69,    45,    48,     0,    74,    56,
       0,     0,     0,  1034,  1036,     0,  1033,  1035,     0,    41,
      44,   938,  1007,   998,  1015,  1003,  1024,  1016,     0,  1025,
    1028,  1045,  1047,  1263,  1269,  1265,  1271,  1049,  1056,  1053,
    1057,   913,   911,   912,  1093,  1075,  1084,   644,   643,     0,
       0,   478,   753,     0,     0,   478,   754,     0,     0,     0,
     968,   906,     0,     0,   680,   986,     0,     0,     0,   960,
       0,     0,     0,     0,     0,  1065,   989,     0,     0,   988,
    1069,  1068,     0,   889,  1092,   892,  1078,  1086,     0,   888,
    1091,   891,  1076,  1085,     0,  1095,  1089,   893,  1071,  1081,
       0,  1090,   894,  1073,  1082,   946,   947,   950,   949,   948,
       0,   951,   953,     0,     0,     0,     0,    77,     0,  1164,
    1182,     0,     0,     0,     0,     0,     0,  1246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   264,     0,
    1098,  1244,  1103,  1105,     0,     0,  1252,  1253,  1254,     0,
    1260,     0,     0,     0,     0,     0,     0,   158,   144,  1109,
    1108,  1107,     0,     0,     0,   607,     0,  1102,     0,     0,
       0,     0,   473,     0,     0,   478,     0,     0,     0,     0,
    1186,  1189,  1191,     0,  1187,  1190,  1192,     0,  1218,  1115,
    1289,  1290,   237,   236,     0,     0,     0,  1014,     0,     0,
    1270,     0,  1272,  1273,     0,     0,  1171,     0,     0,   796,
     264,     0,   502,   798,   792,   794,   800,  1060,     0,   490,
     489,     0,   331,   332,     0,     0,     0,     0,   339,   340,
       0,     0,     0,     0,     0,     0,     0,     0,   885,   875,
     883,   877,   879,   881,   680,   992,   991,     0,   870,   860,
     868,   862,   864,   866,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   507,     0,
     259,     0,   789,   785,   787,   791,  1059,     0,     0,   478,
       0,     0,     0,   105,     0,   299,   478,     0,     0,    94,
     478,     0,     0,   481,   312,   308,   346,   483,   484,   345,
     485,   311,     0,     0,   455,   451,   302,   377,   517,   378,
     518,   379,   519,   384,   524,   385,   525,   389,   529,   390,
     530,   397,   536,   398,   537,   396,   535,   408,   547,   404,
     543,   409,   548,   405,   544,   415,   554,   413,   552,   420,
     559,   418,   557,   425,   564,   423,   562,   428,   567,   431,
     570,   597,     0,   613,     0,     0,     0,     0,   457,   453,
     482,   320,   317,     0,   486,   487,   319,     0,     0,   456,
     452,   380,   520,   381,   521,   382,   522,   386,   526,   387,
     527,   391,   531,   392,   532,   401,   540,   402,   541,   399,
     538,   400,   539,   410,   549,   406,   545,   411,   550,   407,
     546,   416,   555,   414,   553,   421,   560,   419,   558,   426,
     565,   424,   563,   429,   568,   432,   571,   598,     0,     0,
       0,     0,   458,   454,     0,     0,  1320,  1323,     0,     0,
    1318,  1329,  1330,     0,     0,   900,   898,   899,   904,   902,
     903,   234,   232,   231,   230,   264,   680,   989,   241,     0,
     207,   240,   127,     0,   125,   857,   851,   853,   855,     0,
     680,     0,    15,    19,     0,   182,  1021,   680,     0,   139,
       0,   137,   857,     0,   264,   680,     0,    27,    84,   117,
     120,   118,   121,   129,   130,   131,   133,   141,   142,   114,
     112,   113,    13,   738,   741,     0,     0,   934,  1066,     0,
       0,     0,  1022,  1018,     0,     0,   737,   906,   923,  1011,
    1012,   906,   193,   194,   178,     0,     0,     0,     0,   632,
     633,   635,     0,     0,   662,   658,     0,     0,     0,     0,
       0,   226,   218,   216,     0,     0,     0,    36,    37,    75,
      54,     0,    55,     0,    64,    61,    72,    67,    73,    60,
      90,    39,    70,    63,    91,    59,    71,    68,     0,    58,
       0,   716,    33,    35,    34,  1037,  1038,     0,   652,   642,
       0,   647,   641,     0,   478,   755,     0,     0,     0,   986,
       0,   958,   969,   970,   963,   961,   962,     0,   990,   971,
       0,     0,   964,     0,     0,     0,  1079,  1087,  1066,  1077,
    1072,  1074,  1083,   957,     0,     0,     0,   954,   732,   733,
     734,   478,     0,     0,  1139,  1149,  1144,     0,     0,     0,
    1140,  1151,  1145,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1243,  1231,     0,  1208,   264,     0,     0,
       0,  1251,  1257,  1258,  1255,  1256,     0,     0,     0,     0,
     145,  1136,  1146,  1141,     0,   159,   604,   602,     0,     0,
       0,   471,   608,   605,   603,   472,   609,     0,  1015,  1269,
    1271,  1172,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   354,   797,   799,   793,   795,   801,  1061,     0,
     491,   330,   326,   493,   494,   495,   329,     0,     0,   492,
     338,   335,     0,   496,   497,   337,     0,     0,   292,   290,
       0,     0,   976,   680,     0,     0,     0,     0,     0,     0,
     994,     0,   993,     0,     0,     0,   871,   861,   869,   863,
     865,   867,     0,   267,     0,   266,   294,     0,     0,     0,
       0,     0,     0,  1334,     0,     0,     0,   359,     0,   375,
     515,   262,   108,   106,   344,   343,    99,   103,   309,     0,
     310,   306,   307,   614,     0,     0,     0,     0,     0,     0,
     318,   315,   316,     0,     0,     0,     0,  1322,  1321,  1325,
       0,     0,     0,  1317,  1316,     0,   986,   218,     0,     0,
     123,   126,     0,     0,     0,     0,     0,  1022,     0,   135,
     138,     0,    14,   478,     0,     0,   747,     0,   906,   935,
    1023,  1019,  1020,   739,   742,   924,   174,   846,     0,   243,
     242,     0,   661,     0,   213,   214,   204,   209,   210,   220,
       0,     0,    51,    46,    49,    52,    47,    50,    37,    43,
      40,    42,     0,     0,  1041,  1042,   651,     0,   646,     0,
     989,   988,   959,   972,   973,   966,   965,   967,  1063,  1062,
       0,   956,   955,    79,  1137,  1147,  1142,     0,  1138,  1148,
    1143,     0,     0,     0,     0,     0,  1247,  1221,     0,     0,
    1220,  1250,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1228,     0,  1209,  1232,  1210,  1233,     0,
       0,     0,  1121,   942,  1121,     0,     0,   155,     0,     0,
       0,   160,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   504,   327,   328,   324,   325,   336,   333,   334,
     291,   886,     0,   991,     0,   974,   977,   978,   276,   277,
       0,   995,   979,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   268,   280,   281,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   509,   348,   347,   475,   615,
     442,   589,   434,   573,   446,   593,   438,   581,   476,   616,
     443,   590,   435,   574,   447,   594,   439,   582,   444,   591,
     436,   575,   448,   595,   440,   583,   445,   592,   437,   576,
     449,   596,   441,   584,  1324,  1326,  1319,   858,     0,   124,
     150,  1023,     0,   136,    86,   936,     0,     0,   847,     0,
       0,     0,     0,     0,     0,   205,     0,   221,     0,     0,
    1039,  1040,  1029,     0,     0,     0,     0,   952,  1211,  1212,
    1215,  1216,  1219,  1249,     0,     0,     0,     0,     0,     0,
       0,  1225,  1234,     0,     0,     0,  1119,     0,  1117,  1129,
       0,  1121,     0,  1121,     0,     0,     0,     0,   506,   505,
     993,   975,   887,   980,   981,   274,   275,   872,   284,   285,
       0,     0,     0,     0,   278,   279,   288,   289,     0,     0,
     293,  1332,  1333,  1331,   859,     0,   740,   743,   745,   744,
       0,     0,   215,   211,     0,  1026,  1031,     0,     0,     0,
       0,     0,     0,     0,  1239,  1223,     0,     0,  1224,  1236,
       0,  1227,  1238,     0,     0,  1121,     0,  1121,     0,  1121,
       0,  1122,     0,     0,     0,   148,     0,   153,     0,   156,
       0,   873,   282,   283,     0,   286,   287,   171,  1027,  1213,
    1214,     0,     0,  1222,  1229,     0,  1226,  1237,  1133,  1120,
       0,     0,     0,  1130,     0,     0,  1121,  1121,     0,  1121,
     147,   146,   151,   149,     0,     0,   375,   515,   269,     0,
       0,  1118,     0,     0,  1121,  1126,     0,     0,  1123,     0,
       0,   154,  1230,  1134,  1135,  1131,     0,     0,     0,     0,
    1121,   152,     0,  1127,  1128,  1124,     0,  1132,     0,  1125
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   207,    54,    55,   977,   329,   437,   438,   439,   440,
     441,   442,   443,   444,   991,   992,   993,   994,   995,   996,
     997,   998,   999,  1000,  1001,  1002,   254,   255,   445,   446,
      57,   330,   331,   748,   777,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,  2134,  2135,  2136,   459,   642,
     643,   644,   460,   461,   462,   463,  1825,   405,   501,   406,
     502,   407,   503,   504,   869,   408,   409,    58,    59,    60,
      61,    62,   332,   333,   334,   335,   336,  1003,  1004,   337,
     338,   703,   751,  1288,   339,   647,   705,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   736,   831,   649,  1345,   356,   706,   357,   650,   708,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   651,   652,  1129,  1347,   550,   551,   209,    64,   494,
     495,   210,    66,   211,   212,    67,    68,    69,    70,    71,
      72,   213,   117,   214,   260,   934,   935,   215,   216,   217,
      76,    77,    78,    79,    80,   218,   743,  1207,   263,   467,
      82,    83,   484,   485,   879,  1244,   721,  1052,  1053,   123,
      84,   468,    86,   469,   126,   127,   128,   938,   129,   118,
      88,  1101,  1102,  1103,    89,   576,  1235,   471,   578,  1237,
     132,   184,   472,   473,   186,   942,   134,  1021,  1556,  1009,
    1010,  1557,   187,   188,   189,   190,   744,  1208,   222,   223,
     224,   225,   226,   227,   655,   656,  2056,  2057,   657,   658,
     659,    92,   474,   264,    93,    94,   265,   266,   267,   662,
     663,   664,   665,   268,   666,   900,  1640,  1132,   669,   670,
     671,  1133,   673,    95,    96,   371,    97,    98,    99,   100,
     101,   102,   837,  1417,  1418,   838,   839,   372,   373,   374,
     375
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1563
static const int yypact[] =
{
   37865, -1563, -1563, -1563, -1563,    16, -1563, -1563, -1563, -1563,
   -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563,
   -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563,
     994,    77, -1563, -1563, -1563, -1563, -1563, -1563,   -14,    -1,
     214,   120,   338, -1563, -1563, -1563, -1563, -1563, -1563, -1563,
    2546,  2908, -1563, -1563, -1563,   249, -1563,   252,   120,   459,
   -1563,    45,   290,   850, -1563,   134, -1563,   730, -1563,   310,
   -1563, -1563, -1563, -1563, -1563,   686, -1563,   817,   330, -1563,
     444,  1519, 37481,  2996,    50, 38148, -1563,   432,   374, -1563,
    1857, 40809, 35977, -1563, -1563, -1563, -1563, -1563, -1563, 37961,
   37087,   634, -1563,    77, -1563, -1563,   338,   338,   644,   533,
     338, 29416,   120, -1563, -1563,   342, -1563,  2546, -1563, -1563,
   -1563,   602, -1563,   746,   883, -1563, -1563, 38242, -1563, -1563,
    2908,  2644,  1393,  2295,  1890, 24272, -1563,   667,   566,   326,
   30505, 40350, -1563, 30629, -1563, -1563, -1563,   120, -1563,  1237,
    1189,  1261,   173, 40350, -1563, 40083, 30753, 40350, 30877, -1563,
   31001, -1563, -1563,   120, -1563, -1563,   606,   590, -1563, -1563,
    1058, -1563,   290,   355, -1563, -1563, -1563, -1563, -1563,  1217,
    1823,   432,  2644,  1476,  1890, 40809, 40809,   185, -1563,  1221,
     632,   692,   590,   768,   432,  1288, -1563, 27956,   721, -1563,
   -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563,   580, -1563,
     662, -1563,   701, -1563, -1563,   787, -1563,   769,  1660, 35045,
     216,   387, -1563, -1563,   531,   592,   842,   855,   224,   872,
   -1563,   224, -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563,
   -1563, -1563, -1563, -1563, -1563, -1563,   914,   917, -1563, -1563,
   -1563, -1563, -1563, -1563,   143,    94, -1563, -1563, -1563, -1563,
   -1563, -1563, -1563, 37673, -1563, 18123, 36386, 40909, 18260, -1563,
     891,   984,  1093, -1563, -1563,   290, 37577, -1563, -1563, -1563,
   -1563, -1563, -1563, -1563,   310,   444, 38712, 40809, 38991, -1563,
   -1563, -1563, -1563, -1563,   929,   644,   644, -1563, 29416,   423,
   -1563, -1563, 29489, 29562, 29562,   966, 40528, 29416, -1563, -1563,
     982,   985, 40528, 29416,   992,   999,  1012,  1026,  1039, 29635,
   -1563, 24512, -1563,   338, 10346, -1563, -1563, -1563, -1563,  1016,
   -1563,    95,  1027, -1563, -1563,    77, -1563, -1563, 13260, -1563,
    1986, 28029, -1563,   815,    57,  1320, 29416,  1196,  1570,  1049,
    1060,  1076,  1213,   181,  1986,  1081,   702, -1563,  1986, -1563,
    1033,  1414,  1634,  1219,  1650,  1167,  1110,  1209,  1305,   186,
    1986,   644, -1563, -1563, -1563, -1563,  1280,    73, 40172,  1266,
    1293, -1563, -1563, 28102, -1563, 28175, -1563,   698,   726,  1285,
    1310,  2644,  2603,  2605,   746, -1563, -1563,   902, -1563, -1563,
   -1563, -1563, -1563,   982,  1016, -1563, -1563, -1563, -1563,   431,
     725, -1563,  1320, -1563,  1634, 35151, -1563, 24392, 40083, -1563,
     770, 39816, 39084, -1563, -1563,  1314, -1563,   120, -1563, -1563,
      77, 39270, 38898,  5732, 40439, -1563, -1563,  1351,  1346,  1346,
     679, -1563,  1318, -1563, -1563, -1563,   100,   918,   104, -1563,
   -1563, 29877,  1334, -1563,  1282, -1563, -1563,   816, -1563, -1563,
   -1563,  1357, 30009, 30133,   489,  1011,   702, 36182, 38336, -1563,
     432,  1857, -1563, -1563, 36080, -1563, -1563,  1366, -1563,   120,
   -1563, -1563, -1563,  2298, 40528, -1563,   770, -1563, 30257, 30381,
    1390,  1398, -1563,  1397, -1563,  1399, -1563, -1563,  3055,  1402,
     335, -1563, -1563, -1563, -1563,   859,   222, 35151,   957, -1563,
   31125, 31249, -1563,   957, -1563, 31373, 31497,   957, -1563, 31621,
   31745, -1563, -1563,  2908,  2908,  2908, 22504,   902,  1217,  1823,
     902, -1563, 28248, 36386, -1563,   891, 36386, -1563,   891, -1563,
   -1563,  2908,  2908,   902, -1563, -1563,  1420,   148, -1563, -1563,
    1429,  1432, 39905,  1468,  1441,  1451, -1563, 31869, -1563, 31993,
     673, -1563, 34837, 28321,  2908, -1563,  1574,   580, -1563, -1563,
   -1563, -1563, -1563,   746,  1440,   432,   818,   147,   160,  1690,
    1464, -1563, 39549,  1470, -1563, 39638,  1478, 39727,  1486, 39994,
   -1563, -1563, -1563,  1301, -1563, 29416,   120, -1563, -1563,  1490,
   -1563, -1563,   606,   590, -1563,  1495, -1563, -1563, -1563, -1563,
   -1563,   432,  1358,   632, -1563, -1563,  1504, -1563, 18397, -1563,
     891, -1563,   259, 28394,  1508,  1513,  1521,   251, 18534,  1528,
      77,  1533,  1539, 18671,   982,  1983,  1553,  1562,    77, -1563,
   -1563,  1016,  1564,  1567,  1579,  1382, 16748,  1986, 16890, 25474,
    1986,  1986, -1563, 17027, 37769, -1563, -1563, -1563, -1563, -1563,
   18808, 18945, 19082, 19219, -1563, -1563, -1563,   891, 19356, -1563,
   -1563, -1563, 19493, -1563, -1563,   338,   338,   644,   537,   120,
    1413,  1566, -1563,   746,    50, -1563,   432,  2644, 40809, 40809,
   36386, -1563, -1563, 38805, 29416,   262,  1581,   336, -1563, -1563,
   24648,   107, -1563, 13590, -1563, -1563,  1002, -1563, -1563, 28467,
   -1563, -1563, -1563, -1563, 40528,  1588, -1563, -1563, -1563, -1563,
   -1563, 35463, 40528, 24784,    77, 35567, 40528, 29416,   338,   338,
     338, 29416, 24904, -1563, -1563, -1563, 13766, 13908, 14050, -1563,
   -1563, -1563, -1563, 35873,  1591,   244, 22640, -1563, -1563,   166,
   -1563,   744, -1563, 22776,  1589, -1563, 22912, -1563, -1563,  1540,
   -1563, -1563, 25547,  1556, 29416, -1563, -1563, -1563, -1563, -1563,
   -1563, -1563, -1563, -1563, -1563, -1563, 28029,   179, -1563, -1563,
   -1563, -1563, 29416, 29416, 29416, 29416, 29416, 29416, 29416,  1320,
    1634, 29416, 29416, -1563, 29416, 28029, 28029, 28029, 28029, 28029,
   29416, 29416, 14192, 28029, -1563,  1557, -1563, -1563, 25620,  1578,
   29416, 28029, 29416, 29416, 29416, 29416, 29416, 29416, 29416, 29416,
   29416, 29416, 29416, 28029, 28029, 28029, 28029, 28029, 29416, 29416,
   14334, 28029, -1563, -1563,   472,   580, 40439, -1563, -1563, 37183,
   40172, 40172, -1563,  1586,  1598,  1601, -1563,  1608,  1615,  1618,
   -1563, -1563, -1563, -1563,   746, -1563, -1563, -1563, -1563,  1592,
   -1563, -1563, 24272, 24272, 34941,   432,   827, -1563,   771,   996,
     976, 35151,  1062,  1593,  1623, -1563, -1563, -1563,  2298, 35255,
   39177, -1563, -1563,    77, -1563, -1563, -1563, 36284,  1621,    77,
   35359,  2206, 25040,  1306, 39363, -1563,  1639, -1563,   891, -1563,
     891, -1563, -1563, -1563,   891, -1563,  1637, -1563,  1023, -1563,
   -1563,  3450,  3450,  1346,  1346, -1563,  1346,    86, -1563,  1346,
    1346, -1563, -1563,   948, -1563,  1357,   948, -1563,  1357,  1170,
   28540,  2411, 29416,   637, -1563,  1641,   746, 38430, -1563,   432,
    2644, -1563, -1563,   825,   721, 35045, 29745,   571,   224, -1563,
     224,  2908, -1563, -1563, -1563, -1563,   210, -1563,   235, -1563,
     489, 36182, 24272, -1563, -1563,  1649, -1563, -1563, -1563, 40083,
   40083, 29416,    77, -1563, 34473,   242, -1563,   659,   892, -1563,
   40083,    77,  1079,    77,  2198, -1563, -1563, -1563, -1563, -1563,
   -1563,  1346, -1563, -1563, -1563, -1563, -1563, 36486,  1467, -1563,
   23048,  4680, 23184, -1563, -1563, 12908, -1563, -1563, 39456, -1563,
   -1563,   746,  1217, -1563,  1823, -1563,   746, -1563, 28248, -1563,
   -1563, -1563, -1563, -1563,   891, -1563,   891, -1563, -1563, -1563,
   -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563,  1399,   281,
     286,  1642, -1563, 32117, 32241,  1646, -1563, 32365, 32489, 32613,
   -1563,  1088,   353,   365,  2219,  2357,  1652,  1657,  1658, -1563,
    1651,  1656,  1659,   432,   902,  1890,   147, 38524, 28613,   818,
   -1563, -1563, 40261, -1563, -1563,   580, -1563, -1563, 40261, -1563,
   -1563,   580, -1563, -1563, 40261, -1563, -1563,   580, -1563, -1563,
   40261, -1563,   580, -1563, -1563, -1563, -1563, -1563, -1563, -1563,
    1661,  1664, -1563,  1211,  1669,  1671,   280, -1563, 23320, -1563,
   -1563, 19630,  1666,  1668, 19767, 29416, 29416, -1563, 28686, 28759,
    1670,  1678,  1682,  8199,  1684,    77, 25693,  2812,  1477, 25766,
   -1563,  1725, -1563, -1563, 25839,  1686, -1563, -1563, -1563,  1689,
    1691, 25912, 17164,   338,  1687, 29416, 29416,    77, -1563, -1563,
   -1563, -1563, 22232,   386, 28029, -1563,  1444, -1563, 29416, 14476,
   14618, 28029, -1563, 29416, 14760,  1504, 19904, 20041, 20178, 20315,
   -1563, -1563, -1563, 20452, -1563, -1563, -1563, 20589, -1563, -1563,
     644,   644,  1695,  1699, 34596, 34719,   902, -1563,   902, 36386,
   -1563, 36386, -1563, -1563,  1696, 28029, -1563, 28029,   853, -1563,
     489,  1701, -1563, -1563, -1563, -1563, -1563, 35873,  1704,  1589,
   -1563,  1609, -1563, -1563, 25985,  1616, 29416,  1622, -1563, -1563,
   26058,  1633, 29416,  1706, 40705, 24272, 38054, 29416,  1710, -1563,
   -1563, -1563, -1563, -1563,   432,  1709,  1716,  1707,  1712, -1563,
   -1563, -1563, -1563, -1563, 35671, 26131,  1722,  1723,  1724, 29416,
    1715, 35775,  1726,   550,   327,   376,  1727,  1732, -1563,  1734,
   -1563,    77, -1563, -1563, -1563, -1563, -1563, 29416,   338,   236,
   36586, 23456,  1711, -1563, 28029, -1563,   239, 36686, 23592, -1563,
     270, 36786, 23728, -1563, -1563, -1563, -1563,   869,  1735, -1563,
   -1563, -1563, 26204,  5823, -1563, -1563,  1711, -1563, -1563, -1563,
   -1563, -1563, -1563,   815,  1033,   815,  1033,    57,  1414,    57,
    1414,  1320,  1634,  1320,  1634,  1320,  1634, -1563, -1563,  1196,
    1219, -1563, -1563,  1196,  1219, -1563, -1563,  1570,  1650, -1563,
   -1563,  1049,  1167, -1563, -1563,  1060,  1110,  1076,  1209,  1213,
    1305, -1563,    71, -1563, 26277,  1719,  6544,  1728, -1563, -1563,
   -1563, -1563, -1563,   935, -1563, -1563, -1563, 26350,  7351, -1563,
   -1563, -1563, -1563, -1563, -1563, -1563, -1563,   815,  1033,   815,
    1033,    57,  1414,    57,  1414,  1320,  1634,  1320,  1634,  1320,
    1634,  1320,  1634, -1563, -1563,  1196,  1219, -1563, -1563,  1196,
    1219, -1563, -1563,  1570,  1650, -1563, -1563,  1049,  1167, -1563,
   -1563,  1060,  1110,  1076,  1209,  1213,  1305, -1563, 26423,  1729,
    8504,  1730, -1563, -1563,    77,    77, -1563, -1563,   184,  1207,
   -1563, -1563, -1563, 37282, 37381, -1563, -1563, -1563, -1563, -1563,
   -1563, -1563, -1563, -1563, -1563,   792,  2484,   827, -1563, 24272,
      77, -1563, -1563, 24272, -1563,   923, -1563, -1563, -1563,   390,
     432,  2644, -1563, -1563,   377,  1641,  1592,   432,  2644, -1563,
    1740, -1563,   953,   411,  1802,  2908,  1741, -1563, -1563, -1563,
   -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563,  3087,
   -1563, -1563, -1563, -1563, -1563, 23864,  2497,   721, 35045, 22096,
     641,   902,   746, -1563,   902, 29416, -1563,   624, -1563, -1563,
   -1563,  1742,  1637,  1589,  1641,  1153, 24272,  1163,  1165, -1563,
   -1563, -1563, 32737, 32861,  1743, -1563,  3255, 40439, 40439, 40439,
   40439, -1563, -1563, -1563, 29416,  1746, 28832, -1563,   891, -1563,
   -1563, 28905, -1563, 28978, -1563, -1563, -1563,  1517,  1467, -1563,
   -1563,  1346, -1563, -1563, -1563, -1563, -1563,  1517,  1467, -1563,
   29051,  7534, -1563, -1563, -1563, -1563, -1563, 20726, -1563, -1563,
     194, -1563, -1563,   200,  1738, -1563, 32985, 33109,   432,  2357,
    1750, -1563, -1563, -1563, -1563, -1563, -1563,   902,   818, -1563,
    1758,  1765, -1563,  1759,  1760,  1764, -1563, -1563, 35045, -1563,
   -1563, -1563, -1563, -1563, 29416,  1779,  1220, -1563, -1563, -1563,
   -1563,   297, 36886, 24000, -1563, -1563, -1563, 20863, 22232, 22232,
   -1563, -1563, -1563, 21000, 26496, 17301, 26569, 26642, 25219, 26715,
   17438, 22368,  1774,  1775, 22368, 29416, 29124,  1849, 26788,  1691,
    9033,   338, 22368,  1786, 12723,  8199, -1563,  1525, 26861,  9301,
   26934, -1563, -1563, -1563, -1563, -1563,   113,   338,  1789,  1020,
   -1563, -1563, -1563, -1563, 21137, -1563, -1563, -1563,  1794,  1795,
      77, -1563, -1563, -1563, -1563, -1563, -1563, 40083, -1563, -1563,
   -1563, -1563, 27007,  1791,  9731,  1793, 27080,  1796, 10794,  1797,
    1816,  1817, -1563, -1563, -1563, -1563, -1563, -1563, -1563, 14902,
   -1563, -1563, -1563,  1069,  1819, -1563, -1563, 27153, 10930, -1563,
   -1563, -1563,  1103, -1563, -1563, -1563, 27226, 11226, -1563, -1563,
    1824,  1186, -1563,  2694,  1826,  1830,  1833,  1812,  1827, 24272,
    1716, 38618,  1709, 29416, 24272, 29416,  1800, -1563, -1563, -1563,
   -1563, -1563,  1829, -1563, 29197, -1563, -1563,  1831,  1834, 29416,
   29416,  1839, 40617, -1563,    77,    77, 29416, -1563, 15044, -1563,
   -1563,   644, -1563, -1563, -1563, -1563, -1563, -1563, -1563, 15186,
   -1563, -1563, -1563, -1563, 28029, 15328, 15470, 28029, 15612, 15754,
   -1563, -1563, -1563, 15896, 16038, 16180, 16322, -1563, -1563, -1563,
     472,  1848,   406, -1563, -1563,   432,   827,  1951,  1214, 24272,
   -1563, -1563,  1847,   902,   902,  1346,   902,  1592,  1863, -1563,
   -1563,  1862, -1563,   317, 36986, 24136, -1563,   432,   755, -1563,
     746, -1563, -1563,  1861,  1864, -1563, -1563, -1563,  1228, -1563,
   -1563, 34473,  1869, 34473, -1563,  1870, 35151, -1563,  1872, -1563,
   29416, 28248,  2735, -1563, -1563,  2735, -1563, -1563, -1563,  2735,
   -1563, -1563, 21274, 21411, -1563, -1563, -1563, 34473, -1563, 34473,
     147,   818, -1563, -1563, -1563, -1563, -1563, -1563, -1563,  1890,
   27299, -1563, -1563, -1563, -1563, -1563, -1563, 21548, -1563, -1563,
   -1563, 21685,  8199,  5997,  8199,  5997, 13415, -1563, 25310, 17575,
   -1563, -1563, 22368, 22368, 27372,  8199, 27445, 25128,  1877, 11751,
   27518,   133, 21822, -1563, 29416, -1563, 13415, -1563, 12723,  8199,
   11969, 29270,   338,  1879,   338,   174,  1889, -1563,    77, 29416,
   29416,    77, 28029, 28029, 28029, 28029, 28029, 28029, 28029, 28029,
   16464, 16606, -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563,
   -1563, -1563,   432,  1716,  1896, -1563, -1563, -1563, -1563, -1563,
    1229,  1709, -1563,  1897,  1904,  1900,  1905,  1239,  1906,  1908,
   24272, 29416, 24512, -1563, -1563, -1563,  1910,  1911,  1915,  1916,
   29416,  1928,  1929,  1931,  1933, -1563, -1563, -1563, -1563, -1563,
   -1563, -1563, -1563,   336, -1563, -1563, -1563,   336, -1563, -1563,
   -1563, -1563, -1563,   336, -1563, -1563, -1563,   336, -1563, -1563,
   -1563,   336, -1563, -1563, -1563,   336, -1563, -1563, -1563,   336,
   -1563, -1563, -1563,   336, -1563, -1563, -1563, -1563,  1272, -1563,
   -1563,  1592, 28029, -1563, -1563, -1563, 29416, 29416, -1563, 33233,
   33357, 34473, 33481, 33605, 40439, -1563, 40439, -1563, 12233, 21959,
   -1563, -1563, -1563, 33729, 33853, 33977, 34101, -1563,  1965,  1987,
   -1563, -1563, -1563, -1563,  8199, 29416, 29343,  1879, 17712, 17849,
   12474, -1563, 13415, 25310, 27591, 17986, -1563,  1116,   419, -1563,
      64,   338,  1937,   338,   713,   416,  1935,  1122, -1563, -1563,
    1709, -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563, -1563,
    1279,  1934,  1936,  1942, -1563, -1563, -1563, -1563,  1939,  1940,
   -1563, -1563, -1563, -1563, -1563,  1944, -1563, -1563, -1563, -1563,
   34225, 34349, -1563, -1563, 27664, -1563, -1563,  8199,  8199, 27737,
   25401,  8199, 27810, 25128,  1952, -1563,  8199, 29416, -1563, -1563,
   25310, -1563, -1563,  1953,   338,   338, 29416,   338,  1956,   338,
    1125, -1563,   130,  1346,   452, -1563,   458, -1563,  1947, -1563,
      77, -1563, -1563, -1563, 28832, -1563, -1563, -1563, -1563, -1563,
   -1563,  1952,  8199, -1563, -1563, 27883, -1563, -1563, -1563, -1563,
    1144,  1962,  1168, -1563,  1181,  1961,   338,   338,  1964,   338,
   -1563, -1563, -1563, -1563,   713,   457, -1563, -1563, -1563,  8199,
    1966, -1563,  1968,  1969,   338, -1563,  1262,  1311, -1563,  1234,
     647, -1563, -1563, -1563, -1563, -1563,  1332,  1972,  1973,  1976,
     338, -1563,  1979, -1563, -1563, -1563,  1335, -1563,  1981, -1563
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1563,  2115,   212, 10723, -1563,  2077, -1563, -1563, -1563, -1563,
   -1563, -1563,  1611,  1631,  -980, -1563,  -967,  -208,   124,   128,
    -923,  -812,  -669, -1563,  -709,  -700, -1563, -1563,  1632,  1635,
   -1563,  5175,   846, -1563,  -158,   757,   759, -1563, -1563, -1563,
   -1563,  1640, -1563, -1563, -1563,  -625, -1507,   -55, -1563, -1563,
   -1563, -1563,   219,  1963,  -120,   -72,   603,  -831, -1563,  -847,
   -1563,  -839, -1563,  1142,  -149,  1263,  -952,    10,  1841,    72,
    1842,    28,     0, -1563,  1212, -1563,    67,  8524,  3663, -1563,
    4141, -1563,  -649,  -774,   207,  4793,  1811, -1563,  -279,   584,
     658,  -117, -1563,   332,  -495,  -183,  -179,    96,    99,  -238,
    9718,  3352,  -212,  9485,  -803,  1930, -1563,   482,  6031,  1813,
    -209,   710,   758,  1136,   368,   146,   202,   206,   279,   308,
      66,  5768,  1483,  7587,  -791,  1180,  1534, 11279,   -74,  1159,
    -127,  1268, 11532,  8782, -1563, -1563, -1563,   -79,   -54,   -23,
   -1563,  6962, -1563,   165,  2478,   651,  -440,  2931,  9361, -1563,
   11960, -1563, -1563, -1563,   -47,  3251, -1563, -1563,  1515,  6947,
      25, -1563, -1563,  1313,  1713,  1407,  1837,   -70,   -63,  3495,
    8694,  4349,  3812,  -382,  -114,  -221,   630,  -933,    74,  3349,
   -1563, -1563, -1074, -1563,  1538,  -408, -1227,  8004,  1124,  -675,
     -28,   451,   114,  1717,  -243,  -793,  -462,  -924,  -530,  -929,
    -919,   319,   711,  1143,   -13,  1878,  -719,  1421,   229,  -478,
    -456, -1563,  -108,   -82,  5288,   333,    30,  -677, -1563, -1563,
   -1563,  2056, -1563,    90,  2064,   -50,  2970,   -64,  1892,  1034,
    1036, -1563, -1563, -1563,   -88,   108, -1562,     6, -1563, -1563,
   -1563,   260, -1563,  2072,   -44,    19,  2065,  1626, -1563, -1563,
   -1563,  2075,  -825,   391, -1563,  -813,   897, -1563, -1563, -1563,
   -1563
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1315
static const yytype_int16 yytable[] =
{
      63,  1480,  1022,   269,  1246,   943,   505,  1493,   174,  1722,
    1505,  1481,   947,  1147,  1421,   220,  1433,   395,   412,   389,
     284,  1541,   221,   488,  1434,   498,  1422,  1409,   175,  1597,
     107,   109,  1432,  1535,  1354,  1545,   510,  1270,   515,  1411,
     519,   114,   278,   689,  1277,   390,  1271,  1281,   280,   108,
    1250,   122,   285,  1278,   183,   183,  1282,   387,   139,   176,
     695,   115,   780,   148,   388,   151,  1890,  2127,   395,   695,
     195,   489,  1763,   147,  1036,   695,     1,  1537,  1901,  1547,
       1,   162,   173,   122,   511,   208,   516,  1453,   520,   949,
     122,   105,    63,   103,  1555,   599,   754,   534,   537,    63,
      63,   906,   392,   294,  1077,   908,   110,  1083,  1209,  1089,
     172,  1094,   377,  1287,    91,   380,  1902,   276,   297,   111,
     275,   533,   536,     1,   286,   295,   296,   208,   776,   299,
     122,   122,   781,  2167,  1522,   410,  1902,     1,   297,   148,
     464,   477,   803,   464,   597,   104,   811,   491,     2,   493,
       1,     1,   493,   477,   171,   506,   464,   477,   464,  1353,
     464,  1070,     2,   522,   274,    74,   749,  1272,   142,  1069,
     196,   283,   143,   148,   496,     2,     1,  2061,   619,   297,
    1296,   197,   122,   147,   120,  2128,   539,     1,  1538,  2124,
    1548,   785,   786,  2129,   833,  1846,   185,   547,   801,   270,
    -474,  1848,   174,   829,   660,   396,    91,   284,   148,   284,
     555,  1502,   174,   287,    91,  1553,   323,   580,   162,   567,
     600,   755,   175,   690,   941,     1,   907,     1,   122,   789,
     755,   122,   175,   755,  1903,   183,  1503,  -109,   278,   285,
    -100,   285,  1904,  1514,   280,     1,   937,   178,   183,   297,
     612,  2168,  1117,   176,  2047,  2124,   396,    74,  1454,  2169,
     614,   149,  1904,   605,    74,    74,   598,   562,   645,   872,
     137,  -104,   676,  1711,   668,   756,   678,   855,   563,   801,
   -1063, -1063,  1558,     1,     1, -1063,    63,  1561,    63,     1,
    1541,   677,  1273,   535,   538,  2062,   679,  1541,   -82,   497,
     412,  1541,  1327,  2063,  1545,  1273,   715,  1779, -1048,  1780,
   -1048,  1545,   715,   693,   682,  1545,   275,  1847,   -89,   972,
    -650,   547,   802,  1849,   376,   972,  -645,   830,  2046,     1,
    1393,  1539,   297,  1549,   112,   757,   907,   581,     1,   145,
     146,   582,   745,   105,    51,     1,   981,   297,  1547,   897,
     899,   901,   903,   829,   580,  1547,   617,   621,     1,  1547,
     692,   755,  -109,   976,   697,  -100,   583,   135,  1515,   702,
       2,  1118,  1268,   697,   620,   136,   667,   148,   835,   697,
       1,   297,   615,   547,   571,   547,   702,  1290,   583,     1,
     185,   122,  1673,     1,  1677,   691,  -104,   122,   946,  1602,
     688,  1600,   287,  1195,  1675,   221,  1679,  1559,  1603,   546,
     148,   297,  1562,  1013,     1,   835,   144,   870,   506,     1,
      26,   874,   567,   -82,   297,   943,  1038,   885,   297,  1013,
     886,   835,   874,   893,   835,  1154,   154,  1043,  1161,  1047,
    1694,   178,   860,   -89,   418,  1023,  1703,  1455,  1025,   419,
     689,   178,  1744,    74,  1057,     1,   695,   158,  1069,  1548,
       1,     1,   464,   464,   148,   856,  1548,   933,   208,   378,
    1548,   122,   145,   146,   960,     1,  1655,  1197,   582,   964,
    1058,  1490,   526,   162,   965,  1044,   741,  1048,   464,   464,
     585,  1788,     1,  1941,   229,   984,   984,   984,  1795,   943,
     978,  1745,   133,  1297,  1299,  1301,   148,   982,   584,   704,
     464,   464,   585,   183,   183,   464,   464,  1791,  1493,   464,
     464,  1504,  1862,   122,   122,   122,   704,   122,   672,  2006,
     122,  2133,   586,  1361,  1363,  1365,   881,  2137,  1800,  2126,
       1,   122,   122,   122,   698,   898,  1554,   148,   904,    50,
     861,  1714,   835,   493,  1818,   297,   862,   464,  1811,   464,
     522,  1812,  1051,   547,   122,  1693,  1499,   148,  1500,  1732,
     159,  1702,   586,  1298,  1300,  1302,  1741,   122,  2191,   252,
     571,   393,  1075,     1,  2172,  1081,   140,  1087,   141,  1092,
    1414,  1415,  1787,   588,  1587,   843,  1106,   847,  1421,  1421,
    1434,  1015,  1549,  1362,  1364,  1366,   145,   146,  1432,  1549,
    1422,  1422,  1592,  1549,   284,  1331,   756,  1015,   749,   174,
    1335,  1840,  1541,   617,  1189,  1191,   617,     1,  1128,  2173,
    1135,  1841,   571,  1844,   293,  1247,  1545,  1452,  1148,   175,
       1,  1024,   586,  1397,  1026,   749,   285,  1069,  1401,   297,
       1,   396, -1088,   749,   145,   146,   587,   298,  1578,   937,
     645,   645,   645,   645,   526,     1,   668,   668,   668,   668,
     579,  1743,   571,   749,  1311,  1313,     1,  1315,   148,  1183,
    1547,   924,   927,  2173,   417,  1829,  1824,   122,  1827,    -8,
       2,  1498, -1088,   567,  1180,  1181,   587,   145,   146,   580,
    1200,     2,  1375,  1377,  1379,  1381,  2070,   924,   927,   805,
     806,   807,   180, -1094,  1223,   524,     1,   589,   941,   937,
    2133,  1228,  1238,   547,  1248,  1228,  1238,   583,     1,   924,
     927,   523,  1200,   383,   924,   927,  -216,  -897,   924,   927,
     937,   145,   146,  1261,  1815,   412,   412,  1253,  1254,  1255,
     617,   621,  1172,  1176,   145,   146,  1057,   542,     1,  1284,
     697,  1809, -1088,  1291,  1485,  1552,   587,  1940,   667,   667,
     667,   667,  1947,  2201,     1,  1060,  1804,  -478,  -478,  -478,
     617,  1035,  1058,  1517,   707,  1805,  2133,   937,  1518,   553,
     416,  1548,  1536,  1542,  1546,     1,  1190,  1192,  1193,   976,
    1049,   707,   902,  -216,   155,  1351,   252,   688,  1105,  1356,
    1953,  1076,   529,  -766,  1082,  -766,  1088,   523,  1093,   850,
    1507,  1508,   808,   582,  1541,  1473,  1474,   556,  1475,   389,
     809,  1477,  1478,   810,  1416,   148,  1419,  2008,  1545,   835,
     835,   835,   145,   146,  -216,   412,   552,   851,  1516,   863,
    -216,   585,   756,     1,  1512,   390,     1,   152,   178,   153,
    1811,  1812,   410,  1435,   208,  1205,   384,  1489,   978,  1274,
     148,   982,   145,   146,   388,  2015,  1275,   385,   162,  1445,
     567,     2,  1547,  1148,   133,   919,   920,   567,   741,  1460,
    1462,   714,  1464,   525,   835,   558,  1337,  1205,  -478,   383,
    1339,  -478,  1513,  1527,    32,     1,   180,  1555,  1264,   145,
     146,  -216,  1560,  1563,   557,    26,   685,  -216,  2030,   756,
     672,   672,   672,   672,  1403,  -265,  -265,  -265,  1405,  1566,
       2,   122,   782,   148,  1549,    43,    44,   208,  1067,   120,
     122,   395,   921,  1328,   156,  1497,   157,   864,   122,  1068,
     122,  1501,   783,   784,  1495,  -478,  -478,  -478,   563,  1580,
     148,   933,   410,   590,  -478,  -478,  -478,   145,   146,   506,
     506,  1394,   493,   714,   464,   493,   591,  1567,   979,     1,
     506,  1523,   148,  1525,   980,  1581,   448,  -216,  1749,   448,
    1758,  2027,   593,  1548,  1759,  1171,  1175,     1,  2080,   105,
    1332,   571,   448,   196,   448,  1336,   448,  -926,   122,  1217,
    1218,  1219,   929,   133,   197,  1065,  1519,   674,   759,   760,
     761,  1520,    51,  1961,   943,   106,   392,  1845,  1398,  1578,
    -480,  -480,  -480,  1402,   595,  1911,   571,   596,  1934,   493,
     493,  1789,  -265,   464,   464,   571,  -265,   464,   464,   464,
    1790,   148,   571,   694,   122,   122,  1770,   741,  1750,   571,
    1759,   103,  1542,  1546,   122,   488,   122,   208,   547,  1542,
    1546,  1789,   835,  1542,  1546,   148,  -478,  -478,   835,  1338,
    1799,   148,     1,  2095,   835,  -478,   714,   148,  -478,  -890,
     835,     1,   148,   145,   146,  -216,     1,   685,   105,  1528,
    1439,  -216,   723,   756,  1844,   724,   148,  1404,   412,  1340,
     571,   645,   727,   489,   645,  1438,   749,   668,  1715,   728,
     668,   980,  1220,  1128,   675,  1135,   571,  1319,  1323,   396,
    1221,   762,   729,  1222,  1637,   930,  1549,  1406,   396,   763,
    1015,  1907,   764,   753,  1716,  1908,   730,  1650,   701,  1279,
     812,  -480,   645,  1291,   756,  1385,  1389,  1014,   668,   731,
    1017,  1851,  1646,  1320,  1324,   701,   645,   645,   645,   645,
     813,   814,   668,   668,   668,   668,   135,  -479,  -479,  -479,
    2030,  1441,   797,   525,   464,   464,   122,   980,   122,   383,
    1923,  1386,  1390,  2102,  1759,  2103,   145,   146,   835,   798,
     148,  1606,   804,  1524,  1612,   145,   146,   835,   791,   792,
       1,  1691,   105,  -890,  1095,  1696,   799,  1700,  -925,   667,
    2178,  1705,   667,  1095,  1927,   410,   208,  2060,  1759,   800,
     937,   819,   820,  2083,   985,   986,   987,  2123,   492,  1096,
       1,  2124,  1653,  2139,  1726,  2125,  2165,  2140,  1096,   826,
    2124,  1726,  1027,  1029,  2166,  1097,  1172,  1176,  1172,  1176,
     667,   148,   924,   927,  1097,  2180,   924,   927,    65,  2124,
     937,   414,  1817,   937,   667,   667,   667,   667,   862,   617,
    1583,   617,  1819,  2065,  1820,  1098,  1099,  1751,   980,  2182,
     980,  -925,  -925,  2124,  1098,  1099,  -925,  1669,  -479,  1670,
     825,  1586,  2183,  -925,  1095,  1931,  2124,  1589,   448,   448,
    2184,   862,  2031,  1590,   793,   794,  -656,  1187,  -656,  1591,
     958,   828,   412,   685,   145,   146,   412,  -925,  -925,  1096,
     787,   788,  1595,  2007,   448,   448,  1596,   821,   822,   862,
    -925,  -925,  -925,   133,   540,  1097,   541,  2018,  2072,   827,
      65,   913,   914,   862,   862,  2199,   448,   448,  2077,  2124,
      65,   448,   448,  2200,   862,   448,   448,    65,    65,  1303,
    1305,   672,  1686,   915,   672,  1098,  1099,   916,  1851,   917,
    -906,  -906,   133,  2197,  2130,  -906,  2132,  2124,  -655,   412,
    -655,  2094,  -906,   840,  1542,  1546,   579,   862,  2141,  1367,
    1369,   832,   133,   448,   862,   448,   852,   412,   918,   479,
    1681,   544,   672,   541,  1777,  1778,  -906,  -906,  1781,   148,
     841,   479,  1100,   835,   835,   479,   672,   672,   672,   672,
      32,   853,  2198,   756,   883,   148,  2124,   392,  1782,  1435,
    1525,   905,  1578,   410,  1605,  1307,  1309,  1611,  2160,  1792,
    2162,   122,  2164,  2202,  1650,   855,  2208,  2124,   122,   912,
    2124,    43,    44,  1801,   148,   122,   499,    28,    29,  1037,
     512,     1,    32,   252,   895,  1371,  1373,   531,   252,    38,
     922,  1109,   790,   541,   962,  1652,   122,   722,  1808,  2186,
    2187,   122,  2189,   726,   122,  1304,  1306,   148,  1845,  1171,
    1175,  1171,  1175,    43,    44,   393,   410,  2196,   969,   756,
     685,  1152,   464,   464,   398,  2175,   970,   835,   835,   835,
     835,   971,     1,  2206,   972,  1368,  1370,   695,   695,   975,
     695,   695,  1658,  1659,  1660,   695,   695,   695,   695,   867,
    1184,  1283,   141,     1,    65,  1308,  1310,     2,   815,   816,
      28,    29,  1031,   414,    65,    32,    65,  1290,  1350,     1,
       1,  1032,    38,   844,  1033,   848,   464,   464,  1039,   122,
    1187,   197,   937,   937,  2031,  1372,  1374,   122,  1040,  1355,
    -896,     1,  -896,  -896,   795,   796,    43,    44,   567,  1072,
    1532,   685,  1533,    28,    29,  1078,  1542,  1546,    32, -1043,
     532, -1043,   412,  1084,   756,    38,  1632,   412,   645,   645,
    1690,  1090,     1,  1943,   668,   668,  1107,  1695,  1128,     1,
     645,  1128,  1108,  1699,  1128,     1,   668,  1110,  1637,    43,
      44,   983,  1128,  1115,  1704,  1128,     1,  1114,   685,  1944,
    1530,  1116,  1531,   856,   817,   818,   160,  -896,  1134,  1838,
    1891,  1015,   756,   571,  1894,  1833,  1136,  1836,  -896,  1834,
    1148,  1837,  1137,     1,   823,   824,  1905,   506,  1469,  1471,
    1470,  1472,   412,  1145,   695,   695,   695,   695,   695,   695,
     695,   695,  1146,  -896,  1028,  1030,  1056,  1149,     2,   479,
    1150,  1071,   135,  1185,  1166,  1168,  1167,  1169,  1866,  1870,
     479,  2019,  1151,  2022,  1196,   383,  1225,  2010,  -896,  -896,
    -896,  1606,  1267,   412,  1612,  1279,   667,   667,  1425,   410,
    1442,   208,  1653,   385,   410,   289,   292,  2033,   667,  2035,
    1426,   924,   927,  1427,    28,    29,  1013,  1423,  1424,    32,
    1428,  1443,  1261,  1061,  1962,  1963,    38,  1429,  1459,  2020,
    1430,  2023,   479,   571,   749,   749,   749,   749,   749,   749,
     749,   749,  1467,  1468,    28,    29,  1486,  1506,  -758,    32,
      43,    44,  -761,  1571,   695,  2034,    38,  2036,  1572,  1573,
    1416,  1633,  1593,  1574,  1594,   924,   927,   559,  1575,   410,
    1598,  1576,  1599,   122,   122,  1608,   122,  1609,  1625,  1624,
      43,    44,  1626,  1112,  1628,     1,   654,  1647,   148,  1641,
   -1062, -1062,  1642,  1667,  1643, -1062,  1668,   418,  1017,  1671,
     448,   464,  1682,   464,  -937,  1689,   835,  1708,  1719,  1721,
    1724,  1973,  1977,   412,  1983,  1987,  1226,  1753,  1723,  1991,
    1995,  1999,  2003,  1734,  1735,  1736,  1739,   464,  1766,   464,
     122,  1742,  1746,  1747,   749,  1748,  1760,  1769,  1774,  1776,
       1,  1798,  1802,  1816,  -764,  2176,  1821,  1266,   672,   672,
    1830,  1852,  1128,  1128,  1128,  1128,  -906,  -906,   645,  1853,
     672,  -906,  1128,  1128,   668,  1128,  1854,  1128,  -906,   448,
     448,  1855,  1856,   448,   448,   448,  1857,  -937,  -937,  1128,
    1861,  2100,  -937,  1882,  1883,  1888,  1892,   741,  1148,  -937,
    1906,  1650,  -906,  -906,  1909,  1910,   393,   845,  1950,   849,
    1913,  2058,  1915,  2058,  1015,  1917,  1919,  1312,  1314,   756,
    1316,    28,    29,  -937,  -937,  2177,    32,  1920,  1921,   579,
    1924,  1865,  1869,    38,  1938,  1930,  -937,  1935,  -937,  2101,
     410,  1936,   547,  1881,  1937,  1376,  1378,  1380,  1382,  1939,
    1951,    65,  -231,  1954,    28,    29,  1955,    43,    44,    32,
    1960,  2005,  1866,  1870,  2009,   896,    38,    51,   697,   697,
     697,   697,   697,   697,   697,   697,   667,  2012,  1056,  2013,
    2016,   571,  2021,  2017,  2024,  1440,  2026,  2045,   414,   414,
      43,    44,  2059,  1449,   765,   766,   767,   768,   769,   770,
     771,   772,   773,   774,  1463,  1020,  2064,  2071,  2073,   464,
     464,   464,   464,   464,   835,  2074,   835,    18,    19,  2107,
     448,   448,  2075,   464,   464,   464,   464,  2076,  2078,  1859,
    2079,  1008,  2084,  2085,  1128,  2170,  2171,  2086,  2087,  2090,
    2091,  2108,  2092,   645,  2093,   645,  2138,    28,    29,   668,
    2131,   668,    32,  2144,  1148,  1650,  2142,  2147,  2143,    38,
     466,  2145,  2146,   466,  2174,  2153,  2158,    56,   697,  2163,
    2058,  1187,  2058,  2181,  2185,   953,   466,  2188,   466,  2193,
     466,  2194,  2195,    43,    44,  2203,  2204,  1062,   414,  2205,
     464,   464,  2207,  1143,  2209,   954,   955,  1128,  1128,   956,
     775,  1128,  1483,  1128,   959,    53,  1128,   741,   113,  2190,
     645,  1668,  1521,  1828,  1017,  1431,   668,   680,   681,  1476,
     733,  1511,   734,  1251,  1650,    56,  1148,  1806,   672,   882,
    1148,   613,   150,  2058,  2058,   890,  2058,   479,  2058,   725,
    2028,  1509,  1128,  1259,  2159,   288,   277,  1113,   479,    56,
     661,   667,    56,   667,   279,   291,  1130,   281,   253,    56,
       0,  2004,     0,     0,  1148,  1650,    56,    56,  1570,  1128,
       0,     0,     0,     0,     0,  2058,  2058,     0,  2058,    56,
    1148,     0,   379,     0,     0,     0,     0,   169,   654,   654,
     654,   654,     0,  2058,    56,     0,     0,    53,     0,     0,
       0,  2043,   404,     0,    53,    53,     0,   404,   253,  2058,
     404,     0,     1,     0,     0,     0,     0,     0,   667,  1224,
     253,     0,    56,   404,   253,   404,     0,   404,   924,   927,
       0,   924,   927,  -982,     0,  1289,     0,     2,  1584,     0,
      18,    19,   924,   927,   924,   927,   120,     0,     0,     0,
       0,  1008,   253,   253,     0,     0,     0,     0,  1008,     0,
       0,  1008,    28,    29,   404,     0,     0,    32,     0,     0,
      28,    29,     0,     0,    38,    32,     0,   554,     0,     0,
       0,  1289,    38,    28,    29,     0,    56,     0,    32,  1622,
       0,     1,     0,     0,     0,    38,     0,     0,    43,    44,
       0,     0,     0,   672,     0,   672,    43,    44,     0,   924,
     927,     0,  1526,    50,     0,     0,     2,     0,     0,    43,
      44,  1688,     0,     0,   565,     0,    50,     0,     0,   562,
     253,     0,     0,   253,   253,   641,     0,     0,  1710,     0,
     563,     0,     0,    56,     0,     0,     0,     0,   448,   448,
       1,   414,     0,    56,   253,    56,     0,     0,     0,    28,
      29,     0,    28,    29,    32,     0,     0,    32,     0,     0,
     672,    38,     0,   253,    38,     2,  2119,     0,  2122,   253,
       0,   169,   466,   466,   120,     0,     0,     0,   404,     0,
       0,   169,     0,    53,     0,    43,    44,  1717,    43,    44,
       0,     0,   448,   448,     1,     0,   400,     0,   466,   466,
       0,     0,     0,  1668,  1017,   925,   928,     0,     0,  1737,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     2,
     466,   466,     0,    38,     0,   466,   466,     0,   120,   466,
     466,   925,   928,  2157,     0,    56,     0,     0,     0,     0,
     404,     0,   404,     0,     0,     0,  1484,    43,    44,     0,
       0,     0,     0,   925,   928,     0,     0,   562,   925,   928,
       0,  1496,   925,   928,     0,    28,    29,   466,   563,   466,
      32,     0,    56,     0,   404,    56,     0,    38,   253,    56,
       1,  1020,     0,     0,   884,  1510,     0,     0,    56,   253,
       0,    56,     0,     0,     0,  1008,  1008,  1008,     0,     0,
       0,    43,    44,     0,     0,     2,     0,     0,    50,     0,
     565,    51,  1482,     0,   120,     0,     0,     0,     0,   404,
     404,     0,     0,     0,    56,    56,     0,     0,     0,     0,
       0,   404,     0,     0,     0,     0,   963,     0,    28,    29,
    1570,   253,     0,    32,     0,   404,   404,     0,     0,     0,
      38,    28,    29,     0,     0,   414,    32,     0,     0,   414,
       0,     0,   565,    38,    56,     0,     0,   404,   404,     0,
      18,    19,   404,   404,    43,    44,   404,   404,     0,     0,
       0,    50,  1585,   641,   864,     0,     0,    43,    44,     0,
     253,     0,     0,   253,    50,   563,     0,    51,     0,   481,
      28,    29,   565,  1008,     0,    32,   932,     0,     0,    56,
       0,   481,    38,     0,   404,   481,   404,  1657,     0,    56,
     404,  1662,   414,     0,  1664,     0,  1666,     1,     0,   654,
       0,     0,   654,  1623,     0,     0,    43,    44,     0,    56,
     414,  1130,    56,    50,    56,     0,    56,   448,     0,   448,
       0,     0,     2,    56,     0,  1813,     0,    28,    29,    28,
      29,   120,    32,     0,    32,     0,     0,     0,     0,    38,
     654,    38,     0,   448,     0,   448,     0,  1289,     0,     0,
       0,     0,     0,  1289,   654,   654,   654,   654,     0,     0,
       0,     0,  1858,    43,    44,    43,    44,     0,    28,    29,
       0,     0,     0,    32,   857,     0,   858,     0,     0,     0,
      38,     0,     0,     0,     0,     0,     0,   641,   641,   641,
     641,   609,  -478,     0,     0,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,     0,    43,    44,     0,     0,     0,     0,
       0,  1718,     0,     0,    51,   253,   253,   253,    28,    29,
      56,     0,     0,    32,     0,     0,     0,   404,     0,     0,
      38,     0,     0,  1738,   719,  1008,  1008,     0,     0,     0,
     719,   253,  1008,  1008,     0,     0,  1008,  1008,   253,   253,
     404,     0,   253,   253,    43,    44,     0,     0,   169,   404,
       0,    50,     0,     0,  1226,  1199,     0,     0,     0,     0,
      56,     0,     0,   641,     0,     0,     0,     0,     0,     0,
     641,     0,     0,   641,     0,     0,     0,     0,     0,     0,
       0,   466,   466,     0,     0,     0,     0,  1199,     0,     0,
       0,     0,     0,  -478,  -478,   414,    18,    19,     0,     0,
     414,     0,     0,  -478,     0,   448,   448,   448,   448,   448,
       0,     0,  -478,  -478,  -478,  -478,  -478,     0,     0,   448,
     448,   448,   448,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,     0,    38,   877,
       0,     0,     0,  1945,   466,  1948,     0,     0,     0,     0,
     877,     1,     0,    56,     0,     0,    56,    56,    56,  1956,
    1958,     0,    43,    44,     0,   414,     0,     0,     0,     0,
       0,    75,  1631,     0,     0,     0,     2,     0,     0,   404,
     404,    56,     0,     0,     0,   120,   448,   448,    56,     0,
    2025,   565,     0,     0,     0,     0,   253,    56,     0,     0,
       0,     0,   968,     0,    56,     0,   414,   253,     0,   404,
       0,    56,     0,   466,   466,     0,     0,   466,   466,   466,
       0,     0,    28,    29,     0,     0,   565,    32,     0,     0,
       0,     0,     0,     0,    38,   565,     0,     0,     0,     1,
    1008,     0,   565,     0,     0,     0,   925,   928,     0,   565,
     925,   928,     0,    75,    56,     0,     0,     0,    43,    44,
       0,     0,    56,    75,     2,    50,     0,     0,    51,  1814,
      75,    75,     0,   191,   192,     0,     0,     0,    56,   404,
    1020,     0,     0,     0,     0,     0,    56,    56,     0,     0,
       0,   404,     0,     0,     0,     0,   973,    56,  -671,     0,
     565,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,    29,   482,     0,     0,    32,   565,   641,   253,   641,
       0,     0,    38,  -671,   482,   253,   414,     0,   482,     0,
       0,     0,  -671,  -671,  -478,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,     0,    43,    44,     0,     0,
       0,     0,     0,    50,   466,   466,    51,  1008,  1008,     0,
     404,   404,     0,     0,   404,   404,   404,     0,     0,  -671,
    -671,  2081,     0,     0,  -671,     0,     0,     0,     0,     0,
    2088,  -671,     0,     0,    56,   404,   654,   654,     0,    56,
       0,     0,     0,     0,     0,    56,  1130,     0,  1130,   654,
       0,    56,   654,     0,     0,  -671,  -671,    56,     0,     0,
     654,     0,  -671,  1130,     0,  -671,     0,     0,   974,     0,
     972,  -671,     0,     0,     0,   641,     0,     0,   641,     0,
       0,   641,     0,     0,     0,     0,  2096,  2098,     0,  1232,
    1242,     0,     0,  1232,  1242,  -478,  -478,    75,     0,     0,
       0,     0,     0,     0,     0,  -478,     0,    75,     0,    75,
    -478,  -478,  -478,     0,  -478,  -478,  -478,  -478,  -478,   641,
       0,     0,     0,     0,     0,     0,   618,   622,     0,     0,
       0,     0,  1967,   641,   641,   641,   641,  1662,     0,     0,
    1666,    81,     0,     0,     0,     0,  1822,  1946,  -660,  1949,
       0,   404,   404,     0,     0,     0,   253,     0,   253,     0,
       0,     0,     0,  1957,  1959,    56,     0,     0,     0,     0,
       0,     0,     0,  -660,    56,     0,     0,     0,     0,     0,
       0,     0,  -660,  -660,     0,     0,     0,     0,     0,     0,
       0,   253,   404,    56,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1680,  1020,     0,     0,     0,     0,  1008,
    1008,   253,  1683,     0,     0,  1020,     0,     0,   253,  -660,
    -660,     0,     0,    81,  -660,     0,     0,     0,     0,     0,
       0,  -660,     0,    81,     0,     0,     0,   253,   641,    87,
      81,    81,   482,     0,   253,   641,     0,  1448,   253,   641,
       0,     0,     0,   482,     0,  -660,  -660,     0,  1448,     0,
       0,     0,  -660,     0,     0,  -660,     0,     0,  1823,     0,
     972,  -660,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   483,     0,     0,     0,     0,     0,     0,     0,
     130,     0,     0,     0,   483,     0,     0,     0,   483,     0,
    1130,  1130,  1130,  1130,     0,   482,  1130,     0,     0,     0,
     654,   654,     0,  1130,     0,  1130,     0,     0,     0,     0,
     163,   181,   194,     0,     0,     0,     0,  1130,     0,   231,
       0,    87,   466,   466,     0,     0,     0,     0,    87,    87,
       0,   300,     0,     1,   301,   105,     0,     0,     0,     0,
       0,     0,     0,   355,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   925,   928,     0,     2,   194,
     397,   399,   401,   402,     0,  2082,   609,     0,     0,   470,
       0,     0,   470,     0,  2089,     0,   466,   466,     0,     0,
      56,    56,     0,   618,     0,   470,   618,   470,     0,   470,
       0,  1020,     0,     0,     0,   305,   404,     0,     0,     0,
     404,   306,   307,     0,     0,     0,     0,    81,     0,   925,
     928,   530,   399,   401,     0,   310,     0,    81,     0,    81,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
    2097,  2099,   312,   313,   314,   315,   316,   317,   318,     0,
       0,     0,   641,     0,     0,    56,     0,   560,   575,     0,
     709,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     323,   324,  1130,   404,     0,     0,     0,  1020,     0,   404,
     404,  1130,     0,  1130,    56,    56,    56,    56,     0,     0,
       0,     0,     0,   565,     0,     0,     0,     0,     0,     0,
       0,     0,   611,     0,     0,     0,     0,     0,     0,     0,
     648,     0,     0,     0,    75,   181,   394,     0,     0,     0,
     618,   622,  1173,  1177,     0,   686,     0,    87,     0,     0,
       0,     0,     0,   404,   404,  1130,  1130,     0,     0,  1130,
       0,  1130,     0,     0,  1130,     0,     0,     0,  1130,     0,
     618,     0,     0,     0,     0,    56,     0,     0,     0,     0,
       0,     0,   878,     0,     0,     0,   752,   394,     0,   253,
     641,     0,     0,   878,     0,   641,   641,     0,     0,     0,
    1130,     0,     0,     0,     0,     0,     0,     0,   641,     0,
       0,   641,   609,   565,     0,     0,     0,     0,     0,   641,
       0,     0,     0,     0,   573,     0,     0,  1130,     0,     0,
       0,     0,  1730,     0,     0,     0,     0,     0,     0,  1730,
       0,     0,     0,     0,     0,   878,     0,     0,     0,     0,
     397,   399,   401,     0,    56,     0,     0,     0,     0,     0,
       0,   466,     0,   466,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   865,     0,     0,     0,     0,     0,
       0,   470,     0,     0,     0,     0,     0,   466,     0,   466,
       0,   683,   130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   404,     0,    56,     0,
       0,   404,     0,     0,     0,     0,     0,     0,     0,     0,
     482,   470,   470,     0,     0,     0,   939,     0,     0,    56,
     950,   482,     0,   470,     0,     0,     0,     0,     0,     0,
       0,     0,   163,     0,     0,     0,     0,   470,   470,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   865,     0,     0,   470,
     470,     0,     0,   125,   470,   470,   404,     0,   470,   470,
       0,     0,   194,   194,   194,     0,     0,     0,     0,     0,
       0,   253,   641,     0,  1019,     0,   854,     0,     0,     0,
     194,   194,   859,     0,   179,   125,     0,     0,   404,     0,
     404,     0,   230,    56,     0,     0,   470,     0,   470,     0,
       0,  1054,     0,  1063,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   404,     0,   404,     0,   401,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   565,   125,   125,    81,     0,     0,  1104,     0,   466,
     466,   466,   466,   466,     0,     0,     0,     0,     0,   641,
     641,     0,   936,   466,   466,   466,   466,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     648,     0,   925,   928,     0,   925,   928,     0,     0,     0,
       0,     0,     0,     0,   528,     0,   925,   928,   925,   928,
       0,     0,     0,     0,   779,     0,     0,     0,     0,     0,
       0,     0,   648,   648,   648,   648,     0,     0,     0,     0,
       0,     0,  1011,     0,     0,  1016,     0,   404,     0,   404,
     466,   466,     0,     0,     0,     0,  1188,     0,  1011,     0,
     592,     0,   686,   594,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   573,
       0,     0,     0,   925,   928,     0,     0,     0,     0,     0,
    1234,     0,   573,     0,  1234,   125,     0,     0,     0,  1252,
       0,  1607,     0,  1256,  1613,     0,     0,     0,   179,     0,
       0,     0,   865,     0,     0,     0,   404,   404,   404,   404,
     404,    56,     0,    56,     0,     0,     0,     0,     0,     0,
     404,   404,   404,   404,   752,     0,     0,     0,     0,     0,
       0,     0,  1654,     0,     0,     0,     0,     0,  1295,     0,
     878,     0,     0,     0,     0,     0,  1173,  1177,  1173,  1177,
       0,   878,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1349,     0,     0,     0,   618,
     752,   618,     0,  1360,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   404,   404,     0,
       0,     0,   683,  1413,     0,     0,     0,     0,   683,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1436,     0,     0,     0,     0,     0,     0,
     865,     0,     0,     0,     0,     0,     0,   163,   865,  1450,
       0,     0,     0,     0,     0,     0,  1457,     0,     0,   865,
       0,  1465,     0,     0,     0,   125,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   465,     0,   230,   465,     0,     0,     0,     0,  1494,
       0,     0,     0,     0,   575,     0,  1140,   465,     0,   465,
     130,   465,     0,     0,     0,     0,     0,     0,     0,     0,
     939,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   470,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   399,     0,   125,   125,   125,     0,  1012,
       0,     0,   594,     0,     0,     0,     0,     0,     0,    85,
       0,     0,     0,   125,   125,   125,     0,   939,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1019,     0,     0,     0,   125,   683,     0,     0,     0,     0,
       0,     0,  1456,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   470,   470,     0,     0,   470,   470,   470,     0,
      85,     0,     0,  1568,   397,     0,     0,     0,     0,   646,
       0,     0,     0,     0,   401,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1286,     0,     0,     0,     0,
       0,    85,    85,     0,     0,  1492,     0,     0,     0,    85,
     573,    85,     0,     0,     0,     0,     0,     0,    85,    85,
       0,     0,     0,     0,     0,     0,   936,     0,  1318,  1322,
    1326,  1330,  1334,   648,     0,  1343,   648,     0,     0,     0,
       0,  1286,     0,     0,     0,   648,     0,     0,     0,    85,
      85,     0,     0,     0,     0,     0,  1384,  1388,  1392,  1396,
    1400,     0,     0,  1343,     0,     0,     0,  1648,  1649,   230,
       0,     0,     0,   936,   648,     0,  1295,     0,     0,     0,
    1661,     0,     0,  1360,     0,  1665,     0,     0,   648,   648,
     648,   648,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    85,     0,   470,   470,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     394,     0,     0,     0,     0,     0,   865,     0,     0,   573,
       0,   573,     0,     0,     0,     0,   752,     0,     0,     0,
       0,     0,   752,   865,     0,  1713,     0,    85,  1867,  1871,
      85,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   622,     0,  1234,   622,     0,     0,     0,     0,     0,
    1234,     0,   622,   465,   465,     0,     0,     0,     0,     0,
       0,     0,    85,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    85,  1755,     0,     0,   465,
     465,     0,     0,     0,     0,    85,     0,    85,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   465,   465,     0,     0,     0,   465,   465,     0,     0,
     465,   465,     0,     0,     0,     0,     0,  1005,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   683,     0,   683,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   465,     0,
     465,     0,     0,     0,   125,     0,     0,     0,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      85,     0,     0,   125,     0,     0,   244,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
     592,     0,   594,   125,     0,   245,    38,   246,     0,   646,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     247,     0,    85,     0,     0,  1785,     0,     0,     0,  1629,
      43,    44,   248,   249,   250,   251,   205,     0,     0,     0,
    1794,   646,   646,   646,   646,     0,  1540,   397,     0,     0,
       0,     0,     0,     0,   194,     0,     0,  1656,     0,     0,
       0,     0,     0,     0,  1663,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1807,     0,   575,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   622,   622,     0,     0,     0,     0,  1343,     0,
    1343,   470,   470,     0,     0,     0,   125,   125,     0,     0,
       0,     0,    85,    85,    85,     0,    85,  1286,  1019,    85,
       0,     0,     0,  1286,     0,     0,     0,  1005,     0,     0,
      85,    85,    85,     0,  1005,     0,     0,  1005,     0,     0,
       0,     0,     0,     0,   340,     0,     0,     0,     0,  1019,
       0,    85,     0,     0,     0,   470,   470,     0,   397,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   411,     0,
       0,     0,     0,     0,     0,     0,     0,   575,     0,     0,
       0,     0,     0,     0,     0,     0,   683,     0,     0,     0,
       0,     0,     0,  1797,     0,     0,     0,     0,     0,     0,
     648,   648,     0,     0,     0,     0,     0,     0,     0,     0,
     648,     0,   648,   648,     0,     0,   648,     0,     0,     0,
       0,  1456,     0,   573,   648,     0,  1810,   648,     0,  1016,
     411,     0,     0,     0,     0,     0,     0,     0,   592,     0,
     594,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    85,     0,     0,     0,
       0,     0,    85,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   465,   465,     0,     0,     0,     0,     0,     0,
       0,     0,  1932,     0,   854,     0,     0,     0,     0,     0,
       0,     0,   573,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   573,     0,     0,  1019,     0,     0,     0,
       0,   411,     0,     0,     0,     0,   710,   712,  1964,     0,
     411,     0,     0,     0,     0,     0,   411,     0,     0,     0,
       0,  1755,     0,     0,     0,   465,  1661,   340,     0,  1665,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   411,     0,     0,     0,     0,   411,
       0,  1005,     0,  1005,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     470,     0,   470,     0,     0,   865,   411,     0,   411,     0,
       0,     0,     0,  1019,   465,   465,     0,     0,   465,   465,
     465,     0,     0,     0,  1019,     0,   470,     0,   470,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   401,     0,
     411,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   648,   648,   648,   648,     0,     0,
     648,     0,     0,     0,   648,   648,     0,   648,     0,   648,
       0,    85,     0,     0,     0,     0,     0,     0,     0,  1005,
       0,   648,   646,     0,     0,   646,     0,     0,     0,     0,
       0,  2066,  2067,     0,   646,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,     0,     0,
      85,     0,     0,     0,     0,     0,     0,     0,   683,   683,
       0,  2011,     0,   646,     0,     0,     0,     0,     0,     0,
      85,     0,     0,     0,     0,     0,     0,   646,   646,   646,
     646,     0,     0,     0,     0,   447,     0,     0,   447,   411,
       0,     0,     0,     0,     0,   465,   465,     0,     0,     0,
       0,   447,     0,   447,     0,   447,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1011,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   411,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   470,   470,
     470,   470,   470,     0,     0,     0,     0,     0,     0,     0,
    1019,   125,   470,   470,   470,   470,     0,     0,   340,     0,
       0,     0,     0,     0,     0,     0,   648,     0,     0,     0,
       0,     0,     0,    85,    85,   648,     0,   648,     0,     0,
       0,     0,  1005,     0,     0,     0,   411,     0,     0,  1005,
       0,     0,  1966,  1005,     0,     0,     0,  1969,  1971,  1975,
    1979,  1981,  1985,     0,     0,     0,  1989,  1993,  1997,  2001,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   470,
     470,     0,     0,     0,     0,     0,  1019,     0,     0,   648,
     648,     0,     0,   648,     0,   648,     0,     0,   648,     0,
       0,     0,   648,     0,     0,     0,     0,     0,  2161,     0,
       0,     0,     0,     0,     0,     0,     0,   411,     0,     0,
       0,     0,     0,  1201,     0,     0,  1019,     0,     0,     0,
       0,     0,     0,     0,   648,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     340,     0,     0,     0,   340,  1257,     0,     0,     0,     0,
       0,   648,     0,     0,     0,    85,     0,    85,     0,   411,
       0,     0,     0,     0,     0,     0,   411,     0,     0,   411,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   340,
       0,     0,     0,     0,     0,   411,   411,   411,   411,   411,
     411,   411,     0,     0,   411,   411,     0,   411,   411,   411,
     411,   411,   411,   411,   411,     0,   340,     0,     0,     0,
       0,     0,     0,     0,   340,   411,   411,   411,   411,   411,
     411,   411,   411,   411,   411,   411,   411,   411,   411,   411,
     411,   411,   411,     0,   340,     0,  1005,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   447,   447,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   957,
       0,     0,     0,   465,   465,   411,   411,     0,     0,     0,
       0,     0,   125,   447,   447,     0,     0,     0,     0,     0,
       0,     0,  1005,     0,  1005,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   447,   447,     0,     0,     0,
     447,   447,     0,     0,   447,   447,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   465,   465,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   411,     0,   411,     0,     0,     0,     0,
       0,     0,   447,   300,   447,     1,   301,   105,   302,     0,
     303,   304,     0,     0,  1005,     0,     0,     0,     0,   646,
     646,     0,     0,     0,     0,   411,     0,     0,     0,   646,
       2,   646,   646,     0,   411,   646,     0,     0,     0,   120,
       0,     0,     0,   646,     0,     0,   646,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   411,     0,   411,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,    28,    29,     0,     0,
       0,    32,     0,     0,    85,     0,   309,   310,    38,     0,
       0,     0,     0,     0,   300,     0,     1,   301,   105,   302,
     311,   303,   304,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,     0,     0,     0,     0,     0,   891,
       0,     2,   892,   735,   322,     0,     0,     0,     0,     0,
       0,   411,   323,   324,     0,   325,   326,   327,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   370,
       0,     0,     0,     0,     0,     0,     0,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,     0,     0,     0,
       0,   411,     0,     0,     0,     0,     0,   309,   310,     0,
       0,     0,   411,     0,     0,     0,  1131,     0,    85,     0,
       0,   311,     0,     0,     0,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,   340,   340,
     320,     0,     0,   321,  1162,   322,  1005,     0,  1163,     0,
    1170,  1174,     0,   323,   324,  1762,   325,   326,   327,   328,
       0,     0,   465,     0,   465,   549,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   465,     0,
     465,     0,     0,     0,     0,     0,     0,     0,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,     0,     0,
       0,     0,     0,   646,   646,   646,   646,     0,   411,   646,
     411,     0,     0,   646,   646,     2,   646,     0,   646,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     646,     0,   411,     0,     0,     0,     0,     0,     0,  1119,
    1120,  1121,   626,  1122,  1123,  1124,  1125,   631,   632,  1126,
     411,     0,   305,     0,   411,     0,     0,   340,   306,   307,
     308,   411,     0,     0,     0,   411,    32,     0,     0,     0,
       0,   309,   310,  1127,     0,   636,   637,   638,     0,     0,
       0,     0,   370,     0,     0,   311,     0,     0,     0,   312,
     313,   314,   315,   316,   317,   318,   319,    43,    44,     0,
       0,     0,     0,     0,   320,     0,     0,   321,  -473,   322,
     639,     0,  -473,     0,   252,     0,   640,   323,   324,     0,
     325,   326,   327,   328,     0,     0,     0,     0,     0,     0,
       0,     0,   358,     0,     0,     0,     0,     0,     0,   447,
       0,   549,     0,   549,     0,     0,     0,     0,     0,     0,
     465,   465,   465,   465,   465,     0,   413,     0,     0,     0,
       0,     0,     0,     0,   465,   465,   465,   465,     0,     0,
       0,     0,     0,     0,     0,   646,     0,     0,     0,     0,
       0,     0,     0,     0,   646,     0,   646,     0,     0,    85,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   447,   447,
       0,     0,   447,   447,   447,     0,     0,     0,   413,     0,
       0,     0,   411,     0,     0,     0,   411,     0,     0,     0,
       0,   465,   465,     0,     0,     0,     0,     0,   646,   646,
       0,     0,   646,     0,   646,     0,     0,   646,     0,     0,
       0,   646,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   411,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   411,     0,
       0,     0,     0,   646,  1007,     0,     0,     0,     0,   411,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   411,     0,   340,
     646,     0,     0,     0,   411,     0,   411,     0,     0,   413,
       0,   549,     0,     0,   711,   713,     0,     0,   413,     0,
       0,     0,     0,   411,   413,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   358,     0,     0,     0,   447,
     447,     0,     0,   370,     0,     0,     0,     0,     0,     0,
       0,     0,   413,     0,     0,     0,     0,   413,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   549,     0,     0,     0,     0,   411,     0,     0,  1604,
       0,     0,  1610,     0,     0,     0,     0,     0,     0,     0,
       0,  1627,     0,     0,   413,     0,   413,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1651,     0,     0,     0,     0,     0,     0,     0,   413,     0,
       0,     0,     0,     0,  1170,  1174,  1170,  1174,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   370,     0,     0,     0,   370,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   411,     0,  1007,     0,   411,   411,   411,     0,
       0,  1007,     0,     0,  1007,     0,     0,   340,     0,     0,
       0,     0,   411,   411,     0,     0,     0,     0,     0,   340,
       0,     0,     0,     0,   370,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,   413,   411,   411,
       0,   411,   411,     0,     0,     0,   411,   411,   411,   411,
       0,   370,     2,     0,     0,     0,     0,     0,     0,   370,
       0,     0,   411,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   413,     0,     0,     0,   411,   370,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,     0,     0,
       0,     0,     0,   411,     0,     0,   358,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     0,   312,   313,   314,   315,
     316,   317,   318,   319,   413,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,  1162,   322,     0,     0,  1767,
       0,     0,     0,  1768,   323,   324,     0,   325,   326,   327,
     328,     0,     0,     0,     0,     0,     0,   447,   447,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1007,     0,
     549,     0,   340,   340,     0,   411,   411,   411,   411,   411,
     411,   411,   411,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   413,     0,     0,     0,     0,
       0,  1202,     0,     0,     0,     0,     0,     0,     0,   549,
       0,   447,   447,   411,   411,     0,     0,     0,     0,     0,
       0,     0,     0,   411,     0,     0,     0,     0,   358,     0,
       0,     0,   358,  1258,     0,     0,     0,     0,  1007,     0,
    1007,     0,     0,     0,     0,     0,     0,   413,     0,     0,
       0,     0,     0,     0,   413,     0,     0,   413,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   411,     0,   358,     0,   411,
     411,     0,     0,   413,   413,   413,   413,   413,   413,   413,
       0,     0,   413,   413,     0,   413,   413,   413,   413,   413,
     413,   413,   413,     0,   358,     0,   549,     0,     0,     0,
       0,     0,   358,   413,   413,   413,   413,   413,   413,   413,
     413,   413,   413,   413,   413,   413,   413,   413,   413,   413,
     413,     0,   358,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1007,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   549,     0,     0,
       0,     0,     0,   413,   413,     0,  1864,  1868,     0,     0,
       0,     0,     0,     0,     0,     0,  1877,     0,  1880,  1604,
       0,     0,  1610,   370,   370,     0,     0,     0,     0,   340,
    1651,     0,     0,  1893,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   340,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   413,    73,   413,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   413,     0,   549,   447,     0,   447,     0,
       0,     0,   413,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   116,     0,     0,     0,     0,   549,     0,     0,
       0,     0,   447,     0,   447,     0,     0,     0,     0,     0,
       0,   413,   219,   413,     0,     0,     0,     0,     0,  1007,
       0,     0,   370,     0,   177,     0,  1007,     0,     0,     0,
    1007,     0,     0,   259,    73,     0,     0,     0,     0,     0,
       0,    73,    73,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   219,     0,     0,     0,     0,   381,
       0,     0,   415,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   413,
       0,     0,   507,   480,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   480,     0,     0,     0,   480,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   413,
       0,     0,     0,     0,     0,     0,     0,   259,   259,     0,
     413,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2038,  2039,  2040,  2041,     0,     0,  2042,     0,     0,     0,
    1864,  1868,     0,  1877,     0,  1880,   358,   358,     0,     0,
       0,   570,     0,     0,     0,     0,     0,  2051,     0,     0,
       0,     0,     0,     0,   447,   447,   447,   447,   447,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   447,   447,
     447,   447,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   608,     0,     0,   259,   259,
     259,     0,     0,     0,     0,     0,     0,     0,   177,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   177,   259,
      73,     0,     0,  1007,     0,     0,   413,     0,   413,     0,
       0,     0,     0,   549,     0,     0,     0,     0,   718,     0,
       0,     0,     0,     0,   718,   447,   447,     0,     0,     0,
     413,     0,     0,   740,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   370,     0,     0,     0,   413,  1007,
       0,  1007,   413,     0,     0,   358,     0,     0,     0,   413,
       0,     0,     0,   413,     0,     0,     0,     0,  1007,     0,
       0,     0,     0,     0,     0,   836,     0,     0,     0,     0,
       0,     0,  2042,     0,     0,     0,     0,     0,     0,     0,
       0,  2118,     0,  2121,     0,     0,     0,     0,     0,     0,
       0,     0,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,     0,     0,   871,   507,     0,     0,     0,   880,
       0,  1007,     0,     0,     0,     0,     0,   570,   887,     2,
       0,   894,     0,   876,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   876,  2149,  2150,     0,     0,  2118,
       0,  2121,     0,     0,  2154,     0,     0,     0,  2156,     0,
       0,     0,     0,     0,     0,   945,   305,     0,     0,     0,
       0,   961,   306,   307,   308,     0,     0,     0,     0,   570,
       0,     0,     0,     0,     0,   309,   310,     0,     0,     0,
    2156,     0,     0,     0,     0,     0,   967,     0,     0,   311,
       0,     0,     0,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,  2192,   320,   570,
     413,   321,  1162,   322,   413,     0,  1163,     0,     0,     0,
       0,   323,   324,  1772,   325,   326,   327,   328,   259,     0,
       0,   549,     0,   549,     0,   259,     0,     0,   259,   219,
       0,     0,   370,     0,     0,     0,     0,   549,   549,   219,
       0,     0,     0,     0,   370,     0,   413,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   413,     0,     0,   219,
       0,     0,   219,     0,   219,  -897,   219,   413,  -897,  -897,
    -897,     0,  -897,  -897,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   413,     0,   358,     0,     0,
       0,     0,   413,     0,   413,     0,     0,     0,     0,     0,
       0,     0,     0,  1007,     0,     0,     0,     0,     0,     0,
       0,   413,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1144,     0,  -897,
       0,     0,     0,     0,     0,  -897,  -897,  -897,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -897,     0,
       0,     0,   259,   259,   259,   259,     0,     0,     0,     0,
       0,     0,  -897,     0,   413,     0,  -897,  -897,  -897,  -897,
    -897,  -897,  -897,  -897,     0,     0,     0,     0,     0,     0,
     259,   259,   259,     0,     0,   177,  -897,  -897,     0,  -897,
    -897,  -897,  1204,     0,  -897,  -897,     0,  -897,  -897,  -897,
    -897,     0,     0,     0,     0,     0,   259,   370,   370,     0,
       0,     0,     0,  1231,  1241,   740,     0,  1231,  1241,     0,
       0,     0,     0,     0,  1204,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1263,     0,     0,   259,     0,
       0,     0,     0,     0,     0,   259,     0,     0,   259,   549,
       0,     0,     0,     0,     0,     0,     0,     0,   549,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     413,     0,     0,     0,   413,   413,   413,     0,     0,     0,
       0,     0,     0,     0,     0,   358,     0,     0,     0,     0,
     413,   413,     0,     0,     0,     0,     0,   358,     0,     0,
       0,     0,     0,     0,   549,   549,   836,   836,   836,     0,
       0,     0,     0,     0,     0,     0,   413,   413,   570,   413,
     413,     0,     0,     0,   413,   413,   413,   413,     0,   415,
     415,   219,     0,     0,     0,     0,     0,     0,     0,     0,
     413,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   570,     0,     0,   413,     0,     0,     0,
       0,  1447,   570,     0,     0,     0,     0,     0,     0,   570,
       0,     0,  1447,   116,   740,   653,   570,     0,     0,     0,
       0,   413,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1488,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   370,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   570,   738,   415,
       0,     0,   370,     0,     0,     0,   507,   507,     0,     0,
       0,     0,     0,   570,     0,     0,     0,   507,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     358,   358,     0,   413,   413,   413,   413,   413,   413,   413,
     413,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   259,   259,   259,     0,     0,     0,     0,     0,
     608,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   413,   413,     0,     0,     0,     0,     0,     0,     0,
       0,   413,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    90,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   219,     0,     0,     0,     0,   219,
     738,     0,     0,     0,     0,  1588,     0,     0,     0,     0,
       0,  1588,     0,     0,     0,     0,     0,   219,     0,     0,
       0,     0,     0,   413,     0,     0,     0,   413,   413,     0,
       0,     0,     0,     0,   119,   131,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,     0,     0,   259,     0,     0,   259,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   182,   131,     0,  1144,
       0,   228,     0,     0,     0,     0,    90,     0,     0,     0,
       0,     0,     0,    90,    90,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,   382,     0,     0,     0,     0,     0,     0,   259,   259,
     259,   259,     0,     0,   391,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,     0,   259,     0,     0,     0,   358,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1685,
       0,     0,   415,   219,     0,   358,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   527,   608,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   543,     0,
     300,     0,     1,   301,   105,   302,  1729,   303,   304,     0,
       0,     0,     0,  1729,     0,     0,     0,     0,     0,     0,
    1142,     0,     0,   577,     0,     0,     0,     2,     0,     0,
       0,     0,   259,   259,     0,     0,  1160,     0,     0,   259,
     259,     0,     0,   259,   259,     0,     0,   653,   653,   653,
     653,  1119,  1120,  1121,   626,  1122,  1123,  1124,  1125,   631,
     632,  1126,     0,     0,   305,     0,     0,   131,     0,     0,
     306,   307,   308,     0,     0,     0,     0,     0,    32,     0,
     182,     0,     0,   309,   310,  1127,     0,   636,   637,   638,
     687,     0,    90,     0,     0,     0,   738,   311,     0,     0,
       0,   312,   313,   314,   315,   316,   317,   318,   319,    43,
      44,     0,     0,     0,     0,     0,   320,     0,     0,   321,
       0,   322,   639,     0,  1160,     0,   252,     0,   640,   323,
     324,     0,   325,   326,   327,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1293,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     836,   836,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   415,     0,     0,  1346,
     415,     0,     0,     0,     0,     0,     0,  1358,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1410,     0,   866,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
     570,     0,     0,   415,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   415,  1826,   415,  1826,     0,     0,
       0,   940,     0,     0,   948,     0,     0,     0,     0,   738,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   300,     0,     1,   301,   105,
     302,   866,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   131,   131,
       0,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   131,     0,     0,     0,
     570,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,   259,  1055,     0,  1064,   305,
     259,   259,     0,     0,     0,   306,   307,   308,     0,  1066,
       0,     0,     0,   259,     0,     0,   259,     0,   309,   310,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     0,   312,   313,   314,   315,
     316,   317,   318,   319,   507,   543,     0,     0,     0,     0,
       0,   320,     0,     0,   321,  1162,   322,     0,     0,  1767,
       0,     0,     0,  1775,   323,   324,     0,   325,   326,   327,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   415,     0,   219,     0,
       0,   415,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1186,     0,     0,     0,     0,     0,     0,   687,   653,     0,
       0,   653,  1615,  1617,   740,  1620,     0,     0,     0,     0,
       0,     0,     0,  1630,     0,     0,     0,     0,     0,     0,
       0,  1639,     0,     0,     0,  1236,     0,     0,  1160,  1236,
       0,     0,     0,     0,     0,     0,   415,     0,     0,   653,
       0,     0,     0,     0,     0,   124,  1160,   866,     0,     0,
       0,  1160,     0,   653,   653,   653,   653,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,   259,     0,     0,
       0,     0,     0,     0,     0,     0,   124,   124,     0,     0,
       0,     0,  1674,     0,  1678,     0,     0,     0,   570,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1698,     0,     0,     0,     0,     0,  1707,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   124,   124,     0,     0,     0,     0,
       0,     0,  1160,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,   259,     0,     0,   750,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   778,     0,     0,   866,  1437,
       0,     0,     0,   258,     0,   866,   124,     0,     0,  1160,
       0,     0,     0,   866,  1451,     0,     0,     0,     0,     0,
       0,  1458,     0,     0,   866,   119,   131,   415,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   574,   740,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1160,     0,     0,     0,   131,     0,     0,     0,     0,
       0,     0,     0,  1491,  1160,     0,     0,     0,     0,   577,
       0,     0,     0,     0,     0,   131,     0,   124,     0,     0,
       0,     0,     0,     0,     0,   940,     0,   258,   258,     0,
     124,   415,     0,   415,     0,     0,     0,     0,     0,     0,
     684,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1160,     0,     0,     0,     0,
       0,   569,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   940,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,     0,   607,     0,     0,   258,   258,
     258,     0,     0,     0,     0,     0,     0,     0,  1569,     0,
       0,     2,     0,     0,     0,     0,     0,  1577,     0,   258,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   124,     0,     0,   717,     0,
       0,   574,     0,     0,   717,     0,     0,     0,   305,     0,
       0,     0,     0,   739,   306,   307,   308,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,   124,     0,     0,
       0,   311,     0,     0,     0,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,  1162,   322,  1645,  1139,  1163,     0,
       0,   574,     0,   323,   324,     0,   325,   326,   327,   328,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   653,   653,   569,     0,     0,
       0,  1160,     0,  1160,     0,     0,  1160,   653,     0,     0,
       0,   866,  1884,  1887,     0,  1889,     0,   124,   124,   124,
       0,   124,     0,     0,   684,  1160,     0,  1900,   866,     0,
    1236,     0,     0,     0,     0,   124,   124,   124,  1720,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1236,   569,
       0,     0,     0,     0,     0,  1236,   124,     0,   574,  1160,
       0,     0,     0,  1160,     0,     0,     0,     0,     0,     0,
       0,   574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1160,     0,   750,     0,     0,   569,
       0,     0,     0,  1160,     0,     0,     0,     0,     0,     0,
    1294,     0,  1896,     0,     1,   301,   105,   302,   258,   303,
     304,     0,     0,     0,     0,   258,     0,     0,   258,  1317,
    1321,  1325,  1329,  1333,     0,     0,  1342,  1348,     0,     2,
       0,     0,   750,     0,     0,  1359,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1383,  1387,  1391,
    1395,  1399,     0,     0,  1342,  1412,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,     0,     0,     0,     0,     0,
       0,   684,     0,     0,     0,   309,   310,   684,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     0,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,  1162,   322,  1897,     0,  1163,     0,     0,     0,
       0,   323,   324,     0,   325,   326,   327,   328,     0,     0,
    1786,     0,   258,   258,   258,   258,     0,  1160,     0,     0,
       0,     0,   261,     0,  1793,     0,     0,     0,     0,     0,
       0,  1796,     0,     0,     0,   653,  1160,     0,     0,   391,
     258,   258,   258,  1160,     0,     0,     0,  1889,     0,  2049,
       0,     0,  1203,     0,     0,     0,     0,     0,  2055,     0,
    1458,     0,   577,     0,     0,     0,   258,     0,     0,     0,
       0,     0,     0,  1230,  1240,   739,     0,  1230,  1240,     0,
       0,     0,     0,     0,  1203,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1262,     0,     0,   258,     0,
       0,     0,     0,     0,     0,   258,     0,     0,   258,   738,
       0,     0,     0,     0,     0,     0,   261,   261,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1850,     0,   574,     0,     0,     0,     0,     0,
     572,   574,     0,     0,     0,     0,   124,     0,     0,     0,
       0,     0,   577,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   569,     0,
       0,     0,     0,     0,   610,   124,     0,   261,   261,   261,
       0,     0,  2110,  2113,   574,  1160,     0,  1160,     0,   574,
     653,  1160,   653,     0,     0,   124,     0,     0,   261,     0,
    1139,     0,     0,   569,     0,   574,     0,     0,     0,     0,
       0,     0,   569,     0,     0,     0,     0,   720,     0,   569,
       0,     0,     0,   720,   739,     0,   569,     0,  1294,     0,
       0,     0,   742,     0,     0,  1359,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1160,     0,     0,  1160,
       0,     0,   574,     0,     0,     0,     0,   653,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1933,     0,  1342,
       0,  1342,     0,     0,     0,     0,     0,   569,     0,     0,
       0,     0,   300,     0,     1,   301,   105,   302,   750,   303,
     304,     0,  1160,   569,   750,     0,     0,     0,   124,   124,
       0,     0,     0,     0,     0,     0,     0,     0,   574,     2,
     574,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   572,     0,     0,     0,
       0,     0,   258,   258,   258,     0,     0,     0,     0,  1437,
     607,     0,     0,     0,     0,     0,   305,     0,  1754,     0,
       0,     0,   306,   307,   308,     0,   737,     0,     0,     0,
       0,  1796,     0,     0,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   572,   311,
     866,     0,     0,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,  1162,   322,     0,     0,  1767,     0,     0,     0,
    1914,   323,   324,     0,   325,   326,   327,   328,   572,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     684,     0,   684,     0,     0,     0,     0,   261,     0,     0,
     258,     0,     0,   258,   261,     0,   258,   261,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   548,     0,     0,   737,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   258,     0,  1720,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   258,   258,
     258,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   258,     0,   258,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1684,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   607,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   696,     0,     0,     0,
       0,   261,   261,   261,   261,   548,  1728,     0,     0,     0,
       0,   548,     0,  1728,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   261,
     261,   261,   258,   258,     0,     0,     0,     0,     0,   258,
     258,  1206,     0,   258,   258,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   261,     0,     0,     0,     0,
       0,     0,  1233,  1243,   742,     0,  1233,  1243,     0,     0,
       0,     0,     0,  1206,     0,     0,     0,     0,     0,     0,
       0,   548,     0,   548,  1265,     0,     0,   261,     0,     0,
       0,     0,     0,     0,   261,     0,     0,   261,  1141,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1159,     0,     0,     0,  1164,     0,
       0,     0,     0,     0,     0,   574,     0,     0,     0,     0,
       0,     0,   574,     0,     0,     0,     0,     0,     0,   124,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     574,     0,   574,     0,     0,   574,     0,     0,   574,     0,
       0,     0,     0,     0,   737,     0,     0,   572,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1245,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1159,  1164,     0,     0,     0,     0,     0,     0,
       0,     0,   572,     0,     0,     0,     0,     0,     0,     0,
       0,   572,     0,     0,  1006,     0,     0,     0,   572,  1292,
       0,     0,     0,   742,     0,   572,     0,     0,     0,     0,
       0,     0,     0,   124,     0,     0,     0,   258,     0,     0,
     569,   574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   548,   574,  1754,     0,     0,     0,  1344,  1968,  1970,
    1974,  1978,  1980,  1984,     0,  1357,     0,  1988,  1992,  1996,
    2000,     0,     0,     0,     0,     0,   572,     0,     0,     0,
       0,     0,     0,     0,     0,  1408,     0,     0,     0,     0,
       0,     0,   572,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   548,     0,     0,     0,     0,     0,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,   261,   261,   261,     0,     0,     0,     0,     0,   610,
     569,     0,     0,     0,     2,     0,     0,   737,     0,     0,
       0,     0,     0,     0,   258,   258,     0,     0,     0,     0,
     258,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   258,     0,     0,   258,     0,     0,     0,
       0,   305,  1194,     0,   258,     0,     0,   306,   307,   308,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     309,   310,     0,     0,     0,     0,  1970,  1974,  1980,  1984,
    1988,  1992,  1996,  2000,   311,     0,     0,     0,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,  1006,     0,   321,     0,   322,   261,
       0,  1006,   261,   746,  1006,   261,   323,   324,   747,   325,
     326,   327,   328,     0,     0,     0,     0,   574,   574,     0,
     574,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   261,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   739,     0,     0,   261,   261,   261,
     261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   124,     0,     0,     0,     0,     0,
     261,     0,   261,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1687,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   610,   258,   258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1614,  1616,     0,  1619,     0,  1731,     0,     0,   569,     0,
       0,  1141,  1731,     0,  1164,     0,     0,     0,     0,  1638,
       0,     0,     0,     0,     0,     0,  1159,  1164,     0,     0,
       0,   261,   261,     0,     0,     0,     0,     0,   261,   261,
       0,     0,   261,   261,  1159,  1164,     0,     0,  1006,  1159,
     548,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   258,   258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1672,     0,  1676,     0,     0,     0,     0,     0,     0,   548,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1697,     0,     0,     0,     0,     0,  1706,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1006,     0,
    1006,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1159,     0,     0,     0,   739,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,     0,     0,  1159,  1164,     0,
       0,   138,     0,     0,     0,     0,   548,     0,     0,     0,
       0,     0,     0,     0,     0,   300,     0,     1,   301,   105,
     302,     0,   303,   304,   161,   170,   193,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,  1006,     0,     0,  1159,
       0,  1164,     0,     0,     0,     0,     0,   548,     0,     0,
       0,     0,  1159,  1164,     0,     0,   261,     0,     0,   572,
       0,     0,     0,   121,   121,     0,     0,     0,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,     0,     0,
     490,     0,     0,     0,     0,     0,     0,     0,   309,   310,
       0,     0,     0,     0,     0,     0,   521,     0,     0,     0,
       0,     0,   311,  1159,     0,  1164,   312,   313,   314,   315,
     316,   317,   318,   319,     0,   121,     0,     0,     0,     0,
       0,   320,     0,     0,   321,  1162,   322,     0,     0,  1767,
       0,     0,     0,  1918,   323,   324,     0,   325,   326,   327,
     328,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   161,   566,     0,     0,   548,     0,     0,     0,   572,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,   261,   261,     0,     0,   548,     0,   261,
     261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   261,     0,     0,   261,   170,     0,     0,  1006,
       0,     0,     0,   261,     0,   305,  1006,     0,     0,   170,
    1006,   306,   307,   308,     0,     0,     0,     0,     0,   566,
       0,     0,     0,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     0,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,  1162,   322,     0,     0,  1163,     0,     0,     0,     0,
     323,   324,  1926,   325,   326,   327,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1860,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1159,
    1164,  1159,  1164,   742,  1159,  1879,     0,     0,     0,     0,
    1614,  1886,     0,  1638,   121,  1164,     0,     0,     0,     0,
     121,     0,     0,  1159,  1164,  1638,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   566,  1159,     0,  1164,
       0,  1159,     0,  1164,     0,   261,   261,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1159,  1164,     0,     0,     0,   572,     0,     0,
     566,  1159,  1164,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1006,     0,     0,   161,     0,     0,     0,
       0,     0,     0,   548,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,     0,     0,   261,   261,     0,   121,   121,   121,  1006,
     121,  1006,     0,   121,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,   121,   121,     0,  1006,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   521,     0,   566,     0,   121,     0,     0,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     309,   310,     0,   742,     0,     0,     0,     0,     0,     0,
       0,  1006,     0,     0,   311,     0,     0,     0,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,  1159,   321,  1162,   322,     0,
       0,  1163,     0,     0,     0,     0,   323,   324,  1929,   325,
     326,   327,   328,     0,  1159,     0,     0,     0,     0,  1164,
     256,  1159,  1879,     0,  1164,  1638,     0,  2048,     0,  2050,
       0,     0,     0,     0,     0,  1164,  2054,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1182,     0,     0,     0,     0,     0,     0,     0,
     121,     0,     0,     0,     0,     0,   566,     0,     0,     0,
     478,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   478,     0,     0,     0,   478,   737,     0,     0,
       0,   548,     0,   548,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   548,   548,     0,
       0,     0,     0,     0,   256,   256,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1972,  1976,     0,  1982,  1986,     0,     0,
       0,  1990,  1994,  1998,  2002,     0,     0,     0,   568,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1006,     0,     0,     0,     0,     0,     0,
    2109,  2112,     0,  1159,  1164,  1159,     0,     0,     0,  1159,
    1879,     0,   606,     0,     0,   256,   256,   256,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   256,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   716,     0,     0,     0,     0,
       0,   716,     0,     0,  1159,  1164,     0,  1159,  1879,     0,
       0,   161,  2155,   566,     0,     0,     0,     0,     0,     0,
     566,     0,     0,     0,     0,   566,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
    1972,  1976,  1982,  1986,  1990,  1994,  1998,  2002,     0,     0,
    1159,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   121,     0,     0,     0,     0,     0,
       0,     0,     0,   121,     0,     0,     0,     0,   566,   548,
       0,     0,     0,   257,   121,     0,     0,     0,   548,     0,
       0,     0,     0,     0,   566,   257,     0,     0,     0,   257,
       0,     0,     0,     0,   568,     0,     0,     0,     0,     0,
     875,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   875,     0,     0,     0,     0,     0,   257,   257,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1006,   566,     0,     0,   548,   548,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   568,     0,     0,     0,
       0,     0,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,     0,   966,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   121,   121,     2,
       0,     0,     0,     0,     0,     0,   568,   121,     0,   121,
       0,     0,     0,     0,     0,   257,     0,     0,   257,   257,
     257,     0,     0,     0,     0,   256,     0,     0,     0,     0,
       0,     0,   256,     0,     0,   256,   305,     0,     0,   257,
       0,     0,   306,   307,   308,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   309,   310,     0,   257,     0,
       0,     0,     0,     0,   257,     0,     0,     0,     0,   311,
       0,     0,     0,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,  1162,   322,  1897,     0,  1163,     0,     0,     0,
       0,   323,   324,     0,   325,   326,   327,   328,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
       0,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   256,
     256,   256,   256,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   257,     0,     0,   256,   256,   256,
    2052,     0,     1,   301,   105,   302,     0,   303,   304,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   256,     0,     0,     0,     2,     0,     0,
    1229,  1239,     0,     0,  1229,  1239,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,     0,     0,     0,   256,     0,     0,     0,     0,
       0,     0,   256,     0,   305,   256,     0,     0,     0,     0,
     306,   307,   308,     0,     0,     0,     0,     0,     0,     0,
       0,   262,     0,   309,   310,     0,     0,     0,   257,     0,
       0,     0,     0,     0,     0,   257,     0,   311,   257,     0,
       0,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
    1162,   322,  1897,     0,  1163,     0,     0,     0,     0,   323,
     324,   262,   325,   326,   327,   328,     0,     0,     0,     0,
       0,     0,     0,   262,     0,   568,     0,   262,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   262,   262,     0,     0,     0,
     568,     0,     0,     0,     0,     0,     0,     0,  1446,   568,
       0,     0,     0,     0,     0,     0,   568,     0,     0,  1446,
       0,     0,     0,   568,   121,     0,     0,     0,     0,     0,
       0,   121,     0,     0,     0,     0,     0,     0,   121,     0,
       0,     0,   257,   257,   257,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
       0,   566,     0,     0,   121,     0,     0,   121,     0,     0,
     257,   257,   257,   262,   568,     0,   262,   262,   262,     0,
       0,     0,     0,     0,   300,     0,     1,   301,   105,   302,
     568,   303,   304,     0,     0,     0,   257,   262,     0,     0,
       0,     0,     0,   257,   257,     0,     0,   257,   257,     0,
       0,     2,     0,     0,     0,     0,   262,     0,     0,     0,
       0,     0,   262,     0,     0,     0,     0,     0,   257,   256,
     256,   256,     0,     0,     0,   257,     0,   606,   257,     0,
       0,     0,   121,     0,     0,     0,     0,     0,   305,     0,
     121,     0,     0,     0,   306,   307,   308,     0,     0,     0,
       0,   566,     0,     0,     0,     0,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     0,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,     0,   322,     0,     0,  2104,  2105,
    1018,     0,     0,   323,   324,     0,   325,   326,   327,   328,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   262,     0,     0,     0,     0,     0,   256,     0,     0,
     256,     0,   262,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   257,     0,     0,     0,     0,     0,     0,     0,
       0,   256,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,   256,   256,   256,   256,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   256,     0,
     256,     0,     0,     0,     0,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,   262,     0,     0,     0,
       0,     0,     0,   262,     0,     0,   262,     0,     0,     0,
       0,     0,     2,   606,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   121,   121,     0,   121,
       0,     0,     0,  1727,     0,     0,     0,     0,     0,     0,
    1727,     0,   257,   257,   257,     0,     0,     0,     0,   305,
     257,     0,     0,     0,     0,   306,   307,   308,     0,   256,
     256,     0,     0,     0,     0,     0,   256,   256,   309,   310,
     256,   256,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,   121,     0,     0,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,  2116,   322,  2117,     0,  1158,
       0,     0,     0,     0,   323,   324,     0,   325,   326,   327,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     262,   262,   262,   262,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     257,     0,     0,   257,     0,     0,   257,     0,   262,   262,
     262,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,     0,     0,     0,     0,     0,
       0,   262,   262,     0,   257,   262,   262,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   257,   257,
     257,   257,     0,     0,     0,     0,   262,     0,     0,     0,
       0,     0,     0,   262,     0,     0,   262,     0,     0,     0,
       0,   257,     0,   257,  -478,     0,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,     0,     0,   256,     0,     0,   568,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,     0,   257,     0,     0,     0,     0,  -478,     0,
       0,     0,     0,     0,  -478,  -478,  -478,     0,     0,     0,
       0,     0,   257,   257,     0,     0,     0,  -478,  -478,   257,
     257,     0,     0,   257,   257,     0,     0,     0,     0,     0,
       0,  -478,     0,     0,     0,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,     0,     0,     0,     0,     0,     0,   262,
    -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,     0,
     262,  -478,     0,  -478,  -478,     0,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,     0,     0,   568,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   256,   256,     0,     0,     0,     0,   256,   256,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     256,     0,     0,   256,     0,     0,     0,     0,     0,   758,
       0,   256,     0,     0,     0,   759,   760,   761,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,     0,
     262,   262,   262,     0,     0,     0,     0,     0,   262,     0,
       0,     0,     0,     0,  -363,     0,     0,     0,     0,     0,
       0,     0,  -363,  -363,     0,     0,     0,  -363,     0,     0,
       0,     0,     0,  -363,  -363,  -363,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -363,     0,
       0,     0,     0,     0,     0,     0,     0,   257,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,   762,     0,
       0,  -363,  1550,  -363,  -363,     0,   763,     0,     0,   764,
       0,  -363,  -363,  -363,     0,  -363,  -363,  -363,  -363,  -363,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   262,     0,
       0,   262,     0,     0,   262,     0,     0,     0,     0,     0,
       0,     0,     0,   256,   256,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   568,     0,     0,     0,     0,
       0,     0,   262,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   262,   262,   262,   262,
       0,     0,     0,     0,   257,   257,     0,     0,     0,     0,
     257,   257,     0,     0,     0,     0,     0,     0,     0,   262,
       0,   262,     0,   257,     0,     0,   257,     0,     0,     0,
       0,   256,   256,     0,   257,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,     0,     0,     0,     0,     0,
       0,   262,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     262,   262,     0,     0,     0,     0,     0,   262,   262,     0,
       0,   262,   262,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -363,   758,     0,  -363,  -363,  -363,  -363,   759,   760,   761,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,     0,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,     0,     0,  -363,  -363,     0,  -363,     0,
       0,  -363,  -363,  -363,  -363,  -363,   257,   257,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,     0,  -363,     0,  -363,  -363,
    -363,     0,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
     762,  -363,  -363,  -363,  -363,  -363,  -363,  -363,   763,  -363,
    -363,   764,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   257,   257,  -478,     0,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,     0,   262,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -478,     0,     0,     0,     0,     0,  -478,  -478,  -478,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -478,
    -478,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -478,     0,     0,     0,  -478,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,     0,     0,     0,     0,     0,
       0,     0,  -478,  -478,  -478,  -478,  -478,  -478,     0,  -478,
    -478,     0,     0,  -478,     0,  -478,  -478,     0,  -478,  -478,
    -478,  -478,  -478,  -478,  -478,  -478,  -478,     0,     0,     0,
       0,     0,   262,   262,     0,     0,     0,     0,   262,   262,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   262,     0,     0,   262,     0,     0,     0,     0,     0,
    -365,  1210,   262,  -365,  -365,  -365,  -365,  1211,  1212,  1213,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,     0,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,  -365,  -365,     0,     0,  -365,  -365,     0,  -365,     0,
       0,  -365,  -365,  -365,  -365,  -365,     0,     0,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,     0,  -365,     0,  -365,  -365,
    -365,     0,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    1214,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  1215,  -365,
    -365,  1216,  -365,  -365,  -365,  -365,  -365,  -365,  -365,  -365,
    -365,  -365,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,   262,  -470,  1155,     0,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,     0,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,     0,
       0,  -470,  -470,     0,  -470,     0,     0,  -470,  -470,  -470,
    -470,  -470,   262,   262,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,     0,  -470,     0,  -470,  -470,  -470,     0,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -303,   300,
       0,     1,   301,   105,   302,  -303,   303,   304,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,     2,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,     0,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,     0,     0,   305,  -303,     0,  -303,     0,     0,   306,
     307,   308,  -303,  -303,     0,     0,  -303,  -303,  -303,  -303,
    -303,  -303,   309,   310,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,     0,  -303,     0,   311,  -303,  -303,     0,
     312,   313,   314,   315,   316,   317,   318,   319,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,   320,  -303,  -303,   321,  1260,
     322,  -303,  -303,  1158,  -303,  -303,  -303,  -303,   323,   324,
    -303,   325,   326,   327,   328,  -303,  -303,  -303,  -303,  -303,
    -304,   300,     0,     1,   301,   105,   302,  -304,   303,   304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,     2,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,     0,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,     0,     0,   305,  -304,     0,  -304,     0,
       0,   306,   307,   308,  -304,  -304,     0,     0,  -304,  -304,
    -304,  -304,  -304,  -304,   309,   310,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,     0,  -304,     0,   311,  -304,
    -304,     0,   312,   313,   314,   315,   316,   317,   318,   319,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,   320,  -304,  -304,
     321,  1162,   322,  -304,  -304,  1163,  -304,  -304,  -304,  -304,
     323,   324,  -304,   325,   326,   327,   328,  -304,  -304,  -304,
    -304,  -304,  -599,   300,     0,     1,   301,   105,   302,  -599,
     303,   304,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,
       2,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,     0,  -599,  -599,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,  -599,  -599,     0,     0,   305,  -599,     0,
    -599,     0,     0,   306,   307,   308,  -599,  -599,     0,     0,
    -599,  -599,  -599,  -599,  -599,  -599,   309,   310,  -599,  -599,
    -599,  -599,  -599,  -599,  -599,  -599,  -599,     0,  -599,     0,
     311,  -599,  -599,     0,   312,   313,   314,   315,   316,   317,
     318,   319,  -599,  -599,  -599,  -599,  -599,  -599,  -599,   320,
    -599,  -599,   321,  -599,   322,  -599,  -599,  -599,  -599,   746,
    -599,  1341,   323,   324,  -599,   325,   326,   327,   328,  -599,
    -599,  -599,  -599,  -599,  -600,   300,     0,     1,   301,   105,
     302,  -600,   303,   304,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,     2,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,     0,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,     0,     0,   305,
    -600,     0,  -600,     0,     0,   306,   307,   308,  -600,  -600,
       0,     0,  -600,  -600,  -600,  -600,  -600,  -600,   309,   310,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,     0,
    -600,     0,   311,  -600,  -600,     0,   312,   313,   314,   315,
     316,   317,   318,   319,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,   320,  -600,  -600,   321,  -600,   322,  -600,  -600,  -600,
    -600,   746,  -600,  1407,   323,   324,  -600,   325,   326,   327,
     328,  -600,  -600,  -600,  -600,  -600,  -610,   300,     0,     1,
     301,   105,   302,  -610,   303,   304,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,     2,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,     0,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,     0,
       0,   305,  -610,     0,  -610,     0,     0,   306,   307,   308,
    -610,  -610,     0,     0,  -610,  -610,  -610,  -610,  -610,  -610,
     309,   310,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,     0,  -610,     0,   311,  -610,  -610,     0,   312,   313,
     314,   315,   316,   317,   318,   319,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,   320,  -610,  -610,   321,  -610,   322,  -610,
    -610,  1158,  -610,  -610,  -610,  -610,   323,   324,  -610,   325,
     326,   327,   328,  -610,  -610,  -610,  -610,  -610,  -612,   300,
       0,     1,   301,   105,   302,  -612,   303,   304,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,     2,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,     0,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,     0,     0,   305,  -612,     0,  -612,     0,     0,   306,
     307,   308,  -612,  -612,     0,     0,  -612,  -612,  -612,  -612,
    -612,  -612,   309,   310,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,     0,  -612,     0,   311,  -612,  -612,     0,
     312,   313,   314,   315,   316,   317,   318,   319,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,   320,  -612,  -612,   321,  1162,
     322,  -612,  -612,  1163,  -612,  -612,  -612,  -612,   323,   324,
    -612,   325,   326,   327,   328,  -612,  -612,  -612,  -612,  -612,
    -611,   300,     0,     1,   301,   105,   302,  -611,   303,   304,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,     2,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,     0,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,     0,     0,   305,  -611,     0,  -611,     0,
       0,   306,   307,   308,  -611,  -611,     0,     0,  -611,  -611,
    -611,  -611,  -611,  -611,   309,   310,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,     0,  -611,     0,   311,  -611,
    -611,     0,   312,   313,   314,   315,   316,   317,   318,   319,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,   320,  -611,  -611,
     321,  -611,   322,  -611,  -611,  1158,  -611,  -611,  -611,  -611,
     323,   324,  -611,   325,   326,   327,   328,  -611,  -611,  -611,
    -611,  -611,  -356,  1922,     0,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,     0,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,     0,     0,  -356,  -356,     0,
    -356,     0,     0,  -356,  -356,  -356,  -356,  -356,     0,     0,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,     0,  -356,     0,
    -356,  -356,  -356,     0,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -361,  1965,     0,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,     0,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,     0,     0,  -361,
    -361,     0,  -361,     0,     0,  -361,  -361,  -361,  -361,  -361,
       0,     0,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,     0,
    -361,     0,  -361,  -361,  -361,     0,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -349,   300,     0,     1,
     301,   105,   302,  -349,   303,   304,  -349,  -349,  -349,  -349,
    -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,
    -349,  -349,  -349,  -349,     2,  -349,  -349,  -349,  -349,  -349,
    -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,
    -349,  -349,  -349,  -349,  -349,  -349,  -349,     0,  -349,  -349,
    -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,     0,
       0,   305,  -349,     0,  -349,     0,     0,   306,   307,   308,
    -349,  -349,     0,     0,  -349,  -349,  -349,  -349,  -349,  -349,
     309,   310,  -349,  -349,  -349,  -349,  -349,  -349,  -349,  -349,
    -349,     0,  -349,     0,   311,  -349,  -349,     0,   312,   313,
     314,   315,   316,   317,   318,   319,  -349,  -349,  -349,  -349,
    -349,  -349,  -349,   320,  -349,  -349,   321,  -349,   322,  -349,
    -349,  -349,  -349,   746,  -349,  -349,   323,   324,  -349,   325,
     326,   327,   328,  -349,  -349,  -349,  -349,  -349,  -577,   300,
       0,     1,   301,   105,   302,  -577,   303,   304,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,     2,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,     0,     0,   305,  -577,     0,  -577,     0,     0,   306,
     307,   308,  -577,  -577,     0,     0,  -577,  -577,  -577,  -577,
    -577,  -577,   309,   310,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,     0,  -577,     0,   311,  -577,  -577,     0,
     312,   313,   314,   315,   316,   317,   318,   319,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,   320,  -577,  -577,   321,  -577,
     322,  -577,  -577,  -577,  -577,   746,  -577,  -577,   323,   324,
    -577,   325,   326,   327,   328,  -577,  -577,  -577,  -577,  -577,
    -585,   300,     0,     1,   301,   105,   302,  -585,   303,   304,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,     2,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,     0,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,     0,     0,   305,  -585,     0,  -585,     0,
       0,   306,   307,   308,  -585,  -585,     0,     0,  -585,  -585,
    -585,  -585,  -585,  -585,   309,   310,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,     0,  -585,     0,   311,  -585,
    -585,     0,   312,   313,   314,   315,   316,   317,   318,   319,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,   320,  -585,  -585,
     321,  -585,   322,  -585,  -585,  -585,  -585,   746,  -585,  -585,
     323,   324,  -585,   325,   326,   327,   328,  -585,  -585,  -585,
    -585,  -585,  -578,   300,     0,     1,   301,   105,   302,  -578,
     303,   304,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
       2,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,     0,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,     0,     0,   305,  -578,     0,
    -578,     0,     0,   306,   307,   308,  -578,  -578,     0,     0,
    -578,  -578,  -578,  -578,  -578,  -578,   309,   310,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,     0,
     311,  -578,  -578,     0,   312,   313,   314,   315,   316,   317,
     318,   319,  -578,  -578,  -578,  -578,  -578,  -578,  -578,   320,
    -578,  -578,   321,  -578,   322,  -578,  -578,  -578,  -578,   746,
    -578,  -578,   323,   324,  -578,   325,   326,   327,   328,  -578,
    -578,  -578,  -578,  -578,  -586,   300,     0,     1,   301,   105,
     302,  -586,   303,   304,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,     2,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,     0,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,     0,     0,   305,
    -586,     0,  -586,     0,     0,   306,   307,   308,  -586,  -586,
       0,     0,  -586,  -586,  -586,  -586,  -586,  -586,   309,   310,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,     0,
    -586,     0,   311,  -586,  -586,     0,   312,   313,   314,   315,
     316,   317,   318,   319,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,   320,  -586,  -586,   321,  -586,   322,  -586,  -586,  -586,
    -586,   746,  -586,  -586,   323,   324,  -586,   325,   326,   327,
     328,  -586,  -586,  -586,  -586,  -586,  -579,   300,     0,     1,
     301,   105,   302,  -579,   303,   304,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,     2,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,     0,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,     0,
       0,   305,  -579,     0,  -579,     0,     0,   306,   307,   308,
    -579,  -579,     0,     0,  -579,  -579,  -579,  -579,  -579,  -579,
     309,   310,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,     0,  -579,     0,   311,  -579,  -579,     0,   312,   313,
     314,   315,   316,   317,   318,   319,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,   320,  -579,  -579,   321,  -579,   322,  -579,
    -579,  -579,  -579,   746,  -579,  -579,   323,   324,  -579,   325,
     326,   327,   328,  -579,  -579,  -579,  -579,  -579,  -587,   300,
       0,     1,   301,   105,   302,  -587,   303,   304,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,     2,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,     0,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,     0,     0,   305,  -587,     0,  -587,     0,     0,   306,
     307,   308,  -587,  -587,     0,     0,  -587,  -587,  -587,  -587,
    -587,  -587,   309,   310,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,     0,  -587,     0,   311,  -587,  -587,     0,
     312,   313,   314,   315,   316,   317,   318,   319,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,   320,  -587,  -587,   321,  -587,
     322,  -587,  -587,  -587,  -587,   746,  -587,  -587,   323,   324,
    -587,   325,   326,   327,   328,  -587,  -587,  -587,  -587,  -587,
    -580,   300,     0,     1,   301,   105,   302,  -580,   303,   304,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,     2,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,     0,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,     0,     0,   305,  -580,     0,  -580,     0,
       0,   306,   307,   308,  -580,  -580,     0,     0,  -580,  -580,
    -580,  -580,  -580,  -580,   309,   310,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,     0,  -580,     0,   311,  -580,
    -580,     0,   312,   313,   314,   315,   316,   317,   318,   319,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,   320,  -580,  -580,
     321,  -580,   322,  -580,  -580,  -580,  -580,   746,  -580,  -580,
     323,   324,  -580,   325,   326,   327,   328,  -580,  -580,  -580,
    -580,  -580,  -588,   300,     0,     1,   301,   105,   302,  -588,
     303,   304,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
       2,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,     0,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,     0,     0,   305,  -588,     0,
    -588,     0,     0,   306,   307,   308,  -588,  -588,     0,     0,
    -588,  -588,  -588,  -588,  -588,  -588,   309,   310,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,     0,  -588,     0,
     311,  -588,  -588,     0,   312,   313,   314,   315,   316,   317,
     318,   319,  -588,  -588,  -588,  -588,  -588,  -588,  -588,   320,
    -588,  -588,   321,  -588,   322,  -588,  -588,  -588,  -588,   746,
    -588,  -588,   323,   324,  -588,   325,   326,   327,   328,  -588,
    -588,  -588,  -588,  -588,  -358,  2068,     0,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,     0,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,     0,     0,  -358,
    -358,     0,  -358,     0,     0,  -358,  -358,  -358,  -358,  -358,
       0,     0,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,     0,
    -358,     0,  -358,  -358,  -358,     0,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -357,  2069,     0,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,     0,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,     0,
       0,  -357,  -357,     0,  -357,     0,     0,  -357,  -357,  -357,
    -357,  -357,     0,     0,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,     0,  -357,     0,  -357,  -357,  -357,     0,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -363,   758,
       0,  -363,  -363,  -363,  -363,   759,   760,   761,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,     0,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,     0,     0,  -363,  -363,     0,  -363,     0,     0,  -363,
    -363,  -363,  -363,  -363,     0,     0,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,     0,  -363,     0,  -363,  -363,  -363,     0,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,   762,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  1153,  -363,  -363,   764,
       0,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -470,  1155,     0,  -470,  -470,  -470,  -470,     0,  -470,  -470,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,     0,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,     0,     0,  -470,  -470,     0,  -470,     0,
       0,  -470,  -470,  -470,  -470,  -470,     0,     0,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,     0,  -470,     0,  -470,  -470,
    -470,     0,  -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,
    -470,  -470,  -470,  -470,  -470,  -470,  -470,  -470,     0,     0,
    -470,  -470,  -470,  -470,     0,  -470,  -470,  -470,  1156,  -470,
    -470,  -470,     0,  -470,  -470,  -470,  -470, -1116,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2, -1116, -1116, -1116, -1116,
   -1116, -1116, -1116, -1116, -1116, -1116, -1116, -1116, -1116, -1116,
   -1116, -1116, -1116, -1116, -1116, -1116, -1116, -1116,     0, -1116,
   -1116, -1116, -1116, -1116, -1116, -1116, -1116, -1116, -1116, -1116,
       0,     0,   305, -1116,     0, -1116,     0,     0,   306,   307,
     308, -1116, -1116,     0,     0, -1116, -1116, -1116, -1116, -1116,
   -1116,   309,   310, -1116, -1116, -1116, -1116, -1116, -1116, -1116,
   -1116, -1116,     0, -1116,     0,   311, -1116, -1116,     0,   312,
     313,   314,   315,   316,   317,   318,   319, -1116, -1116, -1116,
   -1116, -1116, -1116, -1116,   320,     0,     0,   321,  1162,   322,
   -1116,     0,  1163, -1116, -1116,     0, -1116,   323,   324,     0,
     325,   326,   327,   328, -1259,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1259, -1259, -1259, -1259, -1259, -1259, -1259,
   -1259, -1259, -1259, -1259, -1259, -1259, -1259, -1259, -1259, -1259,
   -1259, -1259, -1259, -1259, -1259,     0, -1259, -1259, -1259, -1259,
   -1259, -1259, -1259, -1259, -1259, -1259, -1259,     0,     0,   305,
   -1259,     0, -1259,     0,     0,   306,   307,   308, -1259, -1259,
       0,     0, -1259, -1259, -1259, -1259, -1259, -1259,   309,   310,
   -1259, -1259, -1259, -1259, -1259, -1259, -1259, -1259, -1259,     0,
   -1259,     0,   311, -1259, -1259,     0,   312,   313,   314,   315,
     316,   317,   318,   319, -1259, -1259, -1259, -1259, -1259, -1259,
   -1259,   320,     0,     0,   321,  1162,   322,  1645,     0,  1163,
   -1259, -1259,     0, -1259,   323,   324,     0,   325,   326,   327,
     328, -1217,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217,
   -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217,
   -1217, -1217,     0, -1217, -1217, -1217, -1217, -1217, -1217, -1217,
   -1217, -1217, -1217, -1217,     0,     0,   305, -1217,     0, -1217,
       0,     0,   306,   307,   308, -1217, -1217,     0,     0, -1217,
   -1217, -1217, -1217, -1217, -1217,   309,   310, -1217, -1217, -1217,
   -1217, -1217, -1217, -1217, -1217, -1217,     0, -1217,     0,   311,
   -1217, -1217,     0,   312,   313,   314,   315,   316,   317,   318,
     319, -1217, -1217, -1217, -1217, -1217, -1217, -1217,   320,     0,
       0,   321,  1873,   322, -1217,     0,  1163, -1217, -1217,     0,
   -1217,   323,   324,     0,   325,   326,   327,   328, -1248,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1248, -1248, -1248,
   -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248,
   -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248, -1248,     0,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,     0,     0,   305, -1248,     0, -1248,     0,     0,   306,
     307,   308, -1248, -1248,     0,     0, -1248,    32, -1248, -1248,
   -1248, -1248,   309,   310,  1127, -1248,   636,   637,   638, -1248,
   -1248, -1248, -1248,     0, -1248,     0,   311, -1248, -1248,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
   -1248, -1248, -1248, -1248, -1248,   320,     0,     0,   321,  1162,
     322,   639,     0,  1163, -1248,   252,     0,   640,   323,   324,
       0,   325,   326,   327,   328,  -611,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,     0,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,     0,     0,
     305,  -611,     0,  -611,     0,     0,   306,   307,   308,  -611,
    -611,     0,     0,  -611,  -611,  -611,  -611,  -611,  -611,   309,
     310,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
       0,  -611,     0,   311,  -611,  -611,     0,   312,   313,   314,
     315,   316,   317,   318,   319,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,   320,     0,     0,   321,  -611,   322,  1157,     0,
    1158,  -611,  -611,     0,  -611,   323,   324,     0,   325,   326,
     327,   328, -1240,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240,     0, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240,     0,     0,   305, -1240,     0,
   -1240,     0,     0,   306,   307,   308, -1240, -1240,     0,     0,
   -1240, -1240, -1240, -1240, -1240, -1240,   309,   310, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240,     0, -1240,     0,
     311, -1240, -1240,     0,   312,   313,   314,   315,   316,   317,
     318,   319, -1240, -1240, -1240, -1240, -1240, -1240, -1240,   320,
       0,     0,   321,  2114,   322, -1240,     0,  1158, -1240, -1240,
       0, -1240,   323,   324,     0,   325,   326,   327,   328, -1241,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1241, -1241,
   -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241,
   -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241,
       0, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241, -1241,
   -1241, -1241,     0,     0,   305, -1241,     0, -1241,     0,     0,
     306,   307,   308, -1241, -1241,     0,     0, -1241, -1241, -1241,
   -1241, -1241, -1241,   309,   310, -1241, -1241, -1241, -1241, -1241,
   -1241, -1241, -1241, -1241,     0, -1241,     0,   311, -1241, -1241,
       0,   312,   313,   314,   315,   316,   317,   318,   319, -1241,
   -1241, -1241, -1241, -1241, -1241, -1241,   320,     0,     0,   321,
    1162,   322,  2115,     0,  1163, -1241, -1241,     0, -1241,   323,
     324,     0,   325,   326,   327,   328, -1235,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235,     0,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,     0,
       0,   305, -1235,     0, -1235,     0,     0,   306,   307,   308,
   -1235, -1235,     0,     0, -1235,    32, -1235, -1235, -1235, -1235,
     309,   310,  1127, -1235,   636,   637,   638, -1235, -1235, -1235,
   -1235,     0, -1235,     0,   311, -1235, -1235,     0,   312,   313,
     314,   315,   316,   317,   318,   319,    43,    44, -1235, -1235,
   -1235, -1235, -1235,   320,     0,     0,   321,  1162,   322,   639,
       0,  1163, -1235,   252,     0,   640,   323,   324,     0,   325,
     326,   327,   328, -1183,   614,     0, -1183, -1183, -1183, -1183,
       0, -1183, -1183,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183,     0, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183,     0,     0, -1183, -1183,
       0, -1183,     0,     0, -1183, -1183, -1183, -1183, -1183,     0,
       0, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,     0, -1183,
       0, -1183, -1183, -1183,     0, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183,     0,     0, -1183,     0, -1183,   615,     0, -1183, -1183,
   -1183,     0, -1183, -1183, -1183,     0, -1183, -1183, -1183, -1183,
   -1206,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,     0,     0,   305,   244,     0, -1206,     0,
       0,   306,   307,   308,    28,    29,     0,     0, -1206,    32,
   -1206, -1206, -1206, -1206,   309,   634,   635,   246,   636,   637,
     638, -1206, -1206, -1206, -1206,     0, -1206,     0,   311, -1206,
     247,     0,   312,   313,   314,   315,   316,   317,   318,   319,
      43,    44,   248,   249,   250,   251,   205,   320,     0,     0,
     321,     0,   322,   639,     0, -1206, -1206,   252,     0,   640,
     323,   324,     0,   325,   326,   327,   328, -1184,   614,     0,
   -1184, -1184, -1184, -1184,     0, -1184, -1184,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,     0, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
       0,     0, -1184, -1184,     0, -1184,     0,     0, -1184, -1184,
   -1184, -1184, -1184,     0,     0, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184,     0, -1184,     0, -1184, -1184, -1184,     0, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184,     0,     0, -1184,     0, -1184,
     615,     0, -1184, -1184, -1184,     0, -1184, -1184, -1184,     0,
   -1184, -1184, -1184, -1184, -1245,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1245, -1245, -1245, -1245, -1245, -1245, -1245,
   -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245, -1245,
   -1245, -1245, -1245, -1245, -1245,     0,  1119,  1120,  1121,   626,
    1122,  1123,  1124,  1125,   631,   632,  1126,     0,     0,   305,
   -1245,     0, -1245,     0,     0,   306,   307,   308, -1245, -1245,
       0,     0, -1245,    32, -1245, -1245, -1245, -1245,   309,   310,
    1127, -1245,   636,   637,   638, -1245, -1245, -1245, -1245,     0,
   -1245,     0,   311, -1245, -1245,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44, -1245, -1245, -1245, -1245,
   -1245,   320,     0,     0,   321,     0,   322,   639,     0, -1245,
   -1245,   252,     0,   640,   323,   324,     0,   325,   326,   327,
     328, -1261,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1261, -1261, -1261, -1261, -1261, -1261, -1261, -1261, -1261, -1261,
   -1261, -1261, -1261, -1261, -1261, -1261, -1261, -1261, -1261, -1261,
   -1261, -1261,     0, -1261, -1261, -1261, -1261, -1261, -1261, -1261,
   -1261, -1261, -1261, -1261,     0,     0,   305, -1261,     0, -1261,
       0,     0,   306,   307,   308, -1261, -1261,     0,     0, -1261,
   -1261, -1261, -1261, -1261, -1261,   309,   310, -1261, -1261, -1261,
   -1261, -1261, -1261, -1261, -1261, -1261,     0, -1261,     0,   311,
   -1261, -1261,     0,   312,   313,   314,   315,   316,   317,   318,
     319, -1261, -1261, -1261, -1261, -1261, -1261, -1261,   320,     0,
       0,   321,     0,   322,  1138,     0, -1261, -1261,   746,     0,
   -1261,   323,   324,     0,   325,   326,   327,   328, -1196,  1165,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,     0,     0,   305,   244,     0, -1196,     0,     0,   306,
     307,   308,    28,    29,     0,     0, -1196,    32, -1196, -1196,
   -1196, -1196,   309,   634,   635,   246,   636,   637,   638, -1196,
   -1196, -1196, -1196,     0, -1196,     0,   311, -1196,   247,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
     248,   249,   250,   251,   205,   320,     0,     0,   321,     0,
     322,   639,     0, -1196, -1196,   252,     0,   640,   323,   324,
       0,   325,   326,   327,   328, -1200,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,    18,
      19,   242,   243,    22,    23,    24,     0,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,     0,     0,
     305,   244,     0, -1200,     0,     0,   306,   307,   308,    28,
      29,     0,     0, -1200,    32, -1200, -1200, -1200, -1200,   309,
     634,   635,   246,   636,   637,   638, -1200, -1200, -1200, -1200,
       0, -1200,     0,   311, -1200,   247,     0,   312,   313,   314,
     315,   316,   317,   318,   319,    43,    44,   248,   249,   250,
     251,   205,   320,     0,     0,   321,     0,   322,   639,     0,
   -1200, -1200,   252,     0,   640,   323,   324,     0,   325,   326,
     327,   328, -1195,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   199,   200,   201,   202,   203,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,    18,    19,   242,   243,
      22,    23,    24,     0,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,     0,     0,   305,   244,     0,
   -1195,     0,     0,   306,   307,   308,    28,    29,     0,     0,
   -1195,    32, -1195, -1195, -1195, -1195,   309,   634,   635,   246,
     636,   637,   638, -1195, -1195, -1195, -1195,     0, -1195,     0,
     311, -1195,   247,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,   248,   249,   250,   251,   205,   320,
       0,     0,   321,     0,   322,   639,     0, -1195, -1195,   252,
       0,   640,   323,   324,     0,   325,   326,   327,   328, -1199,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,    18,    19,   242,   243,    22,    23,    24,
       0,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,     0,     0,   305,   244,     0, -1199,     0,     0,
     306,   307,   308,    28,    29,     0,     0, -1199,    32, -1199,
   -1199, -1199, -1199,   309,   634,   635,   246,   636,   637,   638,
   -1199, -1199, -1199, -1199,     0, -1199,     0,   311, -1199,   247,
       0,   312,   313,   314,   315,   316,   317,   318,   319,    43,
      44,   248,   249,   250,   251,   205,   320,     0,     0,   321,
       0,   322,   639,     0, -1199, -1199,   252,     0,   640,   323,
     324,     0,   325,   326,   327,   328, -1103,  1178,     0, -1103,
   -1103, -1103, -1103,     0, -1103, -1103,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1103, -1103, -1103, -1103, -1103, -1103,
   -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103,
   -1103, -1103, -1103, -1103, -1103, -1103, -1103,     0, -1103, -1103,
   -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103,     0,
       0, -1103, -1103,     0, -1103,     0,     0, -1103, -1103, -1103,
   -1103, -1103,     0,     0, -1103, -1103, -1103, -1103, -1103, -1103,
   -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103,
   -1103,     0, -1103,     0, -1103, -1103, -1103,     0, -1103, -1103,
   -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103,
   -1103, -1103, -1103, -1103,     0,     0, -1103,     0, -1103, -1103,
       0, -1103, -1103, -1103,     0, -1103, -1103, -1103,     0, -1103,
   -1103, -1103, -1103, -1105,  1179,     0, -1105, -1105, -1105, -1105,
       0, -1105, -1105,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105,     0, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105, -1105,     0,     0, -1105, -1105,
       0, -1105,     0,     0, -1105, -1105, -1105, -1105, -1105,     0,
       0, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,     0, -1105,
       0, -1105, -1105, -1105,     0, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105,     0,     0, -1105,     0, -1105, -1105,     0, -1105, -1105,
   -1105,     0, -1105, -1105, -1105,     0, -1105, -1105, -1105, -1105,
   -1150,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,     0,     0,   305,   244,     0, -1150,     0,
       0,   306,   307,   308,    28,    29,     0,     0, -1150,    32,
   -1150, -1150, -1150, -1150,   309,   634,   635,   246,   636,   637,
     638, -1150, -1150, -1150, -1150,     0, -1150,     0,   311, -1150,
     247,     0,   312,   313,   314,   315,   316,   317,   318,   319,
      43,    44,   248,   249,   250,   251,   205,   320,     0,     0,
     321,     0,   322,   639,     0, -1150, -1150,   252,     0,   640,
     323,   324,     0,   325,   326,   327,   328, -1152,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,    18,    19,   242,   243,    22,    23,    24,     0,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
       0,     0,   305,   244,     0, -1152,     0,     0,   306,   307,
     308,    28,    29,     0,     0, -1152,    32, -1152, -1152, -1152,
   -1152,   309,   634,   635,   246,   636,   637,   638, -1152, -1152,
   -1152, -1152,     0, -1152,     0,   311, -1152,   247,     0,   312,
     313,   314,   315,   316,   317,   318,   319,    43,    44,   248,
     249,   250,   251,   205,   320,     0,     0,   321,     0,   322,
     639,     0, -1152, -1152,   252,     0,   640,   323,   324,     0,
     325,   326,   327,   328, -1197,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   199,   200,   201,   202,   203,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,    18,    19,
     242,   243,    22,    23,    24,     0,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,     0,     0,   305,
     244,     0, -1197,     0,     0,   306,   307,   308,    28,    29,
       0,     0, -1197,    32, -1197, -1197, -1197, -1197,   309,   634,
     635,   246,   636,   637,   638, -1197, -1197, -1197, -1197,     0,
   -1197,     0,   311, -1197,   247,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,   248,   249,   250,   251,
     205,   320,     0,     0,   321,     0,   322,   639,     0, -1197,
   -1197,   252,     0,   640,   323,   324,     0,   325,   326,   327,
     328, -1201,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,    18,    19,   242,   243,    22,
      23,    24,     0,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,     0,     0,   305,   244,     0, -1201,
       0,     0,   306,   307,   308,    28,    29,     0,     0, -1201,
      32, -1201, -1201, -1201, -1201,   309,   634,   635,   246,   636,
     637,   638, -1201, -1201, -1201, -1201,     0, -1201,     0,   311,
   -1201,   247,     0,   312,   313,   314,   315,   316,   317,   318,
     319,    43,    44,   248,   249,   250,   251,   205,   320,     0,
       0,   321,     0,   322,   639,     0, -1201, -1201,   252,     0,
     640,   323,   324,     0,   325,   326,   327,   328, -1198,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,     0,     0,   305,   244,     0, -1198,     0,     0,   306,
     307,   308,    28,    29,     0,     0, -1198,    32, -1198, -1198,
   -1198, -1198,   309,   634,   635,   246,   636,   637,   638, -1198,
   -1198, -1198, -1198,     0, -1198,     0,   311, -1198,   247,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
     248,   249,   250,   251,   205,   320,     0,     0,   321,     0,
     322,   639,     0, -1198, -1198,   252,     0,   640,   323,   324,
       0,   325,   326,   327,   328, -1202,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,    18,
      19,   242,   243,    22,    23,    24,     0,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,     0,     0,
     305,   244,     0, -1202,     0,     0,   306,   307,   308,    28,
      29,     0,     0, -1202,    32, -1202, -1202, -1202, -1202,   309,
     634,   635,   246,   636,   637,   638, -1202, -1202, -1202, -1202,
       0, -1202,     0,   311, -1202,   247,     0,   312,   313,   314,
     315,   316,   317,   318,   319,    43,    44,   248,   249,   250,
     251,   205,   320,     0,     0,   321,     0,   322,   639,     0,
   -1202, -1202,   252,     0,   640,   323,   324,     0,   325,   326,
     327,   328, -1193,   614,     0, -1193, -1193, -1193, -1193,     0,
   -1193, -1193,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193,     0, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193,     0,     0, -1193, -1193,     0,
   -1193,     0,     0, -1193, -1193, -1193, -1193, -1193,     0,     0,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193,     0, -1193,     0,
   -1193, -1193, -1193,     0, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193,
       0,     0, -1193,     0, -1193,   615,     0, -1193, -1193, -1193,
       0, -1193, -1193, -1193,     0, -1193, -1193, -1193, -1193, -1194,
     614,     0, -1194, -1194, -1194, -1194,     0, -1194, -1194,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1194, -1194, -1194,
   -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,
   -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,
       0, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,
   -1194, -1194,     0,     0, -1194, -1194,     0, -1194,     0,     0,
   -1194, -1194, -1194, -1194, -1194,     0,     0, -1194, -1194, -1194,
   -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,
   -1194, -1194, -1194, -1194,     0, -1194,     0, -1194, -1194, -1194,
       0, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,
   -1194, -1194, -1194, -1194, -1194, -1194, -1194,     0,     0, -1194,
       0, -1194,   615,     0, -1194, -1194, -1194,     0, -1194, -1194,
   -1194,     0, -1194, -1194, -1194, -1194, -1030,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1030, -1030, -1030, -1030, -1030,
   -1030, -1030, -1030, -1030, -1030, -1030, -1030, -1030, -1030, -1030,
   -1030, -1030, -1030, -1030, -1030, -1030, -1030,     0, -1030, -1030,
   -1030, -1030, -1030, -1030, -1030, -1030, -1030, -1030, -1030,     0,
       0,   305, -1030,     0, -1030,     0,     0,   306,   307,   308,
   -1030, -1030,     0,     0, -1030, -1030, -1030, -1030, -1030, -1030,
     309,   310, -1030, -1030, -1030, -1030, -1030, -1030, -1030, -1030,
   -1030,     0, -1030,     0,   311, -1030, -1030,     0,   312,   313,
     314,   315,   316,   317,   318,   319, -1030, -1030, -1030, -1030,
   -1030, -1030, -1030,   320,     0,     0,   321,     0,   322, -1030,
       0,  1842,  1843,  1018,     0, -1030,   323,   324,     0,   325,
     326,   327,   328, -1156,   614,     0, -1156, -1156, -1156, -1156,
       0, -1156, -1156,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156,
   -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156,
   -1156, -1156, -1156, -1156,     0, -1156, -1156, -1156, -1156, -1156,
   -1156, -1156, -1156, -1156, -1156, -1156,     0,     0, -1156, -1156,
       0, -1156,     0,     0, -1156, -1156, -1156, -1156, -1156,     0,
       0, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156,
   -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156,     0, -1156,
       0, -1156, -1156, -1156,     0, -1156, -1156, -1156, -1156, -1156,
   -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156, -1156,
   -1156,     0,     0, -1156,     0, -1156,   615,     0, -1156, -1156,
   -1156,     0, -1156, -1156, -1156,     0, -1156, -1156, -1156, -1156,
   -1157,   614,     0, -1157, -1157, -1157, -1157,     0, -1157, -1157,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
   -1157,     0, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157,     0,     0, -1157, -1157,     0, -1157,     0,
       0, -1157, -1157, -1157, -1157, -1157,     0,     0, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157,     0, -1157,     0, -1157, -1157,
   -1157,     0, -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,
   -1157, -1157, -1157, -1157, -1157, -1157, -1157, -1157,     0,     0,
   -1157,     0, -1157,   615,     0, -1157, -1157, -1157,     0, -1157,
   -1157, -1157,     0, -1157, -1157, -1157, -1157, -1153,   614,     0,
   -1153, -1153, -1153, -1153,     0, -1153, -1153,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,     0, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
       0,     0, -1153, -1153,     0, -1153,     0,     0, -1153, -1153,
   -1153, -1153, -1153,     0,     0, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153,     0, -1153,     0, -1153, -1153, -1153,     0, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153,     0,     0, -1153,     0, -1153,
     615,     0, -1153, -1153, -1153,     0, -1153, -1153, -1153,     0,
   -1153, -1153, -1153, -1153, -1032,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1032, -1032, -1032, -1032, -1032, -1032, -1032,
   -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032,
   -1032, -1032, -1032, -1032, -1032,     0, -1032, -1032, -1032, -1032,
   -1032, -1032, -1032, -1032, -1032, -1032, -1032,     0,     0,   305,
   -1032,     0, -1032,     0,     0,   306,   307,   308, -1032, -1032,
       0,     0, -1032, -1032, -1032, -1032, -1032, -1032,   309,   310,
   -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032, -1032,     0,
   -1032,     0,   311, -1032, -1032,     0,   312,   313,   314,   315,
     316,   317,   318,   319, -1032, -1032, -1032, -1032, -1032, -1032,
   -1032,   320,     0,     0,   321,     0,   322, -1032,     0, -1032,
    2029,  1018,     0, -1032,   323,   324,     0,   325,   326,   327,
     328, -1026,  2032,     0, -1026, -1026, -1026, -1026,     0, -1026,
   -1026,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1026,
   -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026,
   -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026,
   -1026, -1026,     0, -1026, -1026, -1026, -1026, -1026, -1026, -1026,
   -1026, -1026, -1026, -1026,     0,     0, -1026, -1026,     0, -1026,
       0,     0, -1026, -1026, -1026, -1026, -1026,     0,     0, -1026,
   -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026,
   -1026, -1026, -1026, -1026, -1026, -1026,     0, -1026,     0, -1026,
   -1026, -1026,     0, -1026, -1026, -1026, -1026, -1026, -1026, -1026,
   -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026, -1026,     0,
       0, -1026,     0, -1026, -1026,     0, -1026, -1026, -1026,     0,
   -1026, -1026, -1026,     0, -1026, -1026, -1026, -1026, -1154,   614,
       0, -1154, -1154, -1154, -1154,     0, -1154, -1154,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,     0,
   -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154,     0,     0, -1154, -1154,     0, -1154,     0,     0, -1154,
   -1154, -1154, -1154, -1154,     0,     0, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154,     0, -1154,     0, -1154, -1154, -1154,     0,
   -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154,     0,     0, -1154,     0,
   -1154,   615,     0, -1154, -1154, -1154,     0, -1154, -1154, -1154,
       0, -1154, -1154, -1154, -1154, -1155,   614,     0, -1155, -1155,
   -1155, -1155,     0, -1155, -1155,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155,     0, -1155, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,     0,     0,
   -1155, -1155,     0, -1155,     0,     0, -1155, -1155, -1155, -1155,
   -1155,     0,     0, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
       0, -1155,     0, -1155, -1155, -1155,     0, -1155, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155, -1155, -1155,     0,     0, -1155,     0, -1155,   615,     0,
   -1155, -1155, -1155,     0, -1155, -1155, -1155,     0, -1155, -1155,
   -1155, -1155, -1242,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242,     0, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242,     0,     0,   305, -1242,     0,
   -1242,     0,     0,   306,   307,   308, -1242, -1242,     0,     0,
   -1242, -1242, -1242, -1242, -1242, -1242,   309,   310, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242, -1242,     0, -1242,     0,
     311, -1242, -1242,     0,   312,   313,   314,   315,   316,   317,
     318,   319, -1242, -1242, -1242, -1242, -1242, -1242, -1242,   320,
       0,     0,   321,     0,   322, -1242,     0, -1242, -1242, -1242,
       0, -1242,   323,   324,     0,   325,   326,   327,   328, -1027,
    2106,     0, -1027, -1027, -1027, -1027,     0, -1027, -1027,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1027, -1027, -1027,
   -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027,
   -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027,
       0, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027,
   -1027, -1027,     0,     0, -1027, -1027,     0, -1027,     0,     0,
   -1027, -1027, -1027, -1027, -1027,     0,     0, -1027, -1027, -1027,
   -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027,
   -1027, -1027, -1027, -1027,     0, -1027,     0, -1027, -1027, -1027,
       0, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027, -1027,
   -1027, -1027, -1027, -1027, -1027, -1027, -1027,     0,     0, -1027,
       0, -1027, -1027,     0, -1027, -1027, -1027,     0, -1027, -1027,
   -1027,     0, -1027, -1027, -1027, -1027,  -933,   580,     0,  -933,
    -933,  -933,  -933,     0,  -933,  -933,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -933,  -933,  -933,  -933,  -933,  -933,
    -933,  -933,  -933,  -933,  -933,  -933,  -933,  -933,  -933,  -933,
    -933,  -933,  -933,  -933,  -933,  -933,  -933,     0,     0,  -933,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -933,  -933,     0,  -933,     0,     0,  -933,  -933,  -933,
    -933,  -933,     0,     0,  -933,  -933,  -933,  -933,  -933,  -933,
    -933,  -933,  -933,  -933,  -933,     0,     0,  -933,  -933,  -933,
    -933,     0,  -933,     0,  -933,  -933,  -933,     0,  -933,  -933,
    -933,  -933,  -933,  -933,  -933,  -933,  -933,  -933,  -933,  -933,
    -933,  -933,  -933,  -933,     0,     0,  -933,   850,  -933,  -933,
       0,   582,  -933,  -933,     0,     0,  -933,  -933,     0,  -933,
    -933,  -933,  -933,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   199,   200,   201,   202,   203,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,    18,    19,   242,   243,
      22,    23,    24,     0,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,     0,     0,   305,   244,     0,
       0,     0,     0,   306,   307,   308,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   309,   634,   635,   246,
     636,   637,   638,     0,     0,     0,     0,     0,     0,     0,
     311,     0,   247,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,   248,   249,   250,   251,   205,   320,
       0,     0,   321,     0,   322,   639,     0,     0,     0,   252,
       0,   640,   323,   324,     0,   325,   326,   327,   328,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
    1119,  1120,  1121,   626,  1122,  1123,  1124,  1125,   631,   632,
    1126,     0,     0,   305,   244,     0,     0,     0,     0,   306,
     307,   308,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   309,   634,   635,   246,   636,   637,   638,     0,
       0,     0,     0,     0,     0,     0,   311,     0,   247,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
     248,   249,   250,   251,   205,   320,     0,     0,   321,     0,
     322,   639,     0,     0,     0,   252,     0,   640,   323,   324,
       0,   325,   326,   327,   328,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   199,   200,   201,   202,   203,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,    18,    19,
     242,   243,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
     244,     0,     0,     0,     0,   306,   307,   308,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   309,   634,
      38,   246,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,   247,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,   248,   249,   250,   251,
     205,   320,     0,     0,   321,     0,   322,   988,     0,   989,
     990,   746,     0,     0,   323,   324,     0,   325,   326,   327,
     328,  1269,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   305,   244,     0,     0,     0,
       0,   306,   307,   308,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   309,   634,    38,   246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
     247,     0,   312,   313,   314,   315,   316,   317,   318,   319,
      43,    44,   248,   249,   250,   251,   205,   320,     0,     0,
     321,     0,   322,   988,     0,   989,  -110,   746,     0,     0,
     323,   324,     0,   325,   326,   327,   328,  1276,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   199,   200,   201,   202,   203,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   305,   244,     0,     0,     0,     0,   306,   307,   308,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     309,   634,    38,   246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,   247,     0,   312,   313,
     314,   315,   316,   317,   318,   319,    43,    44,   248,   249,
     250,   251,   205,   320,     0,     0,   321,     0,   322,   988,
       0,   989,   -98,   746,     0,     0,   323,   324,     0,   325,
     326,   327,   328,  1280,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   199,   200,   201,   202,   203,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,    18,    19,   242,   243,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   305,   244,     0,
       0,     0,     0,   306,   307,   308,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   309,   634,    38,   246,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,   247,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,   248,   249,   250,   251,   205,   320,
       0,     0,   321,     0,   322,   988,     0,   989,  -102,   746,
       0,     0,   323,   324,     0,   325,   326,   327,   328,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   305,   244,     0,     0,     0,     0,   306,
     307,   308,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   309,   634,    38,   246,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,   247,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
     248,   249,   250,   251,   205,   320,     0,     0,   321,     0,
     322,  1534,     0,   989,   -65,   746,     0,     0,   323,   324,
       0,   325,   326,   327,   328,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   199,   200,   201,   202,   203,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,    18,    19,
     242,   243,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
     244,     0,     0,     0,     0,   306,   307,   308,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   309,   634,
      38,   246,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,   247,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,   248,   249,   250,   251,
     205,   320,     0,     0,   321,     0,   322,  1543,     0,   989,
    1544,   746,     0,     0,   323,   324,     0,   325,   326,   327,
     328,  1601,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   305,   244,     0,     0,     0,
       0,   306,   307,   308,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   309,   634,    38,   246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
     247,     0,   312,   313,   314,   315,   316,   317,   318,   319,
      43,    44,   248,   249,   250,   251,   205,   320,     0,     0,
     321,     0,   322,   988,     0,   989,   -81,   746,     0,     0,
     323,   324,     0,   325,   326,   327,   328,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   199,   200,   201,   202,   203,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   305,   244,     0,     0,     0,     0,   306,   307,   308,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     309,   634,    38,   246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,   247,     0,   312,   313,
     314,   315,   316,   317,   318,   319,    43,    44,   248,   249,
     250,   251,   205,   320,     0,     0,   321,     0,   322,  1543,
       0,   989,  -107,   746,     0,     0,   323,   324,     0,   325,
     326,   327,   328,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   199,   200,   201,   202,   203,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,    18,    19,   242,   243,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   305,   244,     0,
       0,     0,     0,   306,   307,   308,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   309,   634,    38,   246,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,   247,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,   248,   249,   250,   251,   205,   320,
       0,     0,   321,     0,   322,  1543,     0,   989,   -97,   746,
       0,     0,   323,   324,     0,   325,   326,   327,   328,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   305,   244,     0,     0,     0,     0,   306,
     307,   308,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   309,   634,    38,   246,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,   247,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
     248,   249,   250,   251,   205,   320,     0,     0,   321,     0,
     322,  1543,     0,   989,  -101,   746,     0,     0,   323,   324,
       0,   325,   326,   327,   328,  1803,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   199,   200,   201,   202,   203,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,    18,    19,
     242,   243,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
     244,     0,     0,     0,     0,   306,   307,   308,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   309,   634,
      38,   246,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,   247,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,   248,   249,   250,   251,
     205,   320,     0,     0,   321,     0,   322,   988,     0,   989,
     -88,   746,     0,     0,   323,   324,     0,   325,   326,   327,
     328,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   305,   244,     0,     0,     0,
       0,   306,   307,   308,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   309,   634,    38,   246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
     247,     0,   312,   313,   314,   315,   316,   317,   318,   319,
      43,    44,   248,   249,   250,   251,   205,   320,     0,     0,
     321,     0,   322,  1543,     0,   989,   -78,   746,     0,     0,
     323,   324,     0,   325,   326,   327,   328,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   199,   200,   201,   202,   203,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   305,   244,     0,     0,     0,     0,   306,   307,   308,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     309,   634,    38,   246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,   247,     0,   312,   313,
     314,   315,   316,   317,   318,   319,    43,    44,   248,   249,
     250,   251,   205,   320,     0,     0,   321,     0,   322,  1543,
       0,   989,   -85,   746,     0,     0,   323,   324,     0,   325,
     326,   327,   328,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   199,   200,   201,   202,   203,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   305,    27,     0,
       0,     0,     0,   306,   307,   308,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,   309,   403,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,    40,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,    45,    46,    47,    48,   205,   320,
       0,     0,   321,   300,   322,     1,   301,   105,   302,     0,
     303,   304,   323,   324,     0,   325,   326,   327,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   199,   200,   201,   202,   203,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   868,    27,     0,
       0,     0,     0,   306,   307,   308,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,   309,   403,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,    40,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,    45,    46,    47,    48,   205,   320,
       0,     0,   321,   300,   322,     1,   301,   105,   302,     0,
     303,   304,   323,   324,     0,   325,   326,   327,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   305,    27,     0,
       0,     0,     0,   306,   307,   308,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,   309,   403,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,    40,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,    45,    46,    47,    48,     0,   320,
       0,     0,   321,   735,   322,     0,     0,     0,     0,     0,
       0,     0,   323,   324,     0,   325,   326,   327,   328,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1198,    27,     0,     0,     0,     0,   306,
     307,   308,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,   309,   403,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,    40,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
      45,    46,    47,    48,     0,   320,     0,     0,   709,   735,
     322,     0,     0,     0,     0,     0,     0,     0,   323,   324,
       0,   325,   326,   327,   328,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
      27,     0,     0,     0,     0,   306,   307,   308,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,   309,   403,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,    40,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,    45,    46,    47,    48,
       0,   320,     0,     0,   321,   300,   322,     1,   301,   105,
     302,   252,   303,   304,   323,   324,     0,   325,   326,   327,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
      27,     0,     0,     0,     0,   306,   307,   308,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,   309,   403,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,    40,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,    45,    46,    47,    48,
       0,   320,     0,     0,   709,   735,   322,     0,     0,     0,
       0,     0,     0,     0,   323,   324,     0,   325,   326,   327,
     328,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     8,     9,    10,   561,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   305,    27,     0,     0,     0,
       0,   306,   307,   308,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,   309,   403,    38,    39,     0,   300,
       0,     1,   301,   105,   302,     0,   303,   304,   311,     0,
      40,     0,   312,   313,   314,   315,   316,   317,   318,   319,
      43,    44,    45,    46,    47,    48,     2,   891,     0,     0,
     892,   735,   322,     0,     0,     0,     0,     0,     0,     0,
     323,   324,     0,   325,   326,   327,   328,     0,     0,     0,
    1119,  1120,  1121,   626,  1122,  1123,  1124,  1125,   631,   632,
    1126,     0,     0,   305,     0,     0,     0,     0,     0,   306,
     307,   308,     0,     0,     0,     0,     0,    32,     0,     0,
       0,     0,   309,   310,  1127,     0,   636,   637,   638,     0,
    1876,     0,     1,   301,   105,   302,   311,   303,   304,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
       0,     0,     0,     0,     0,   320,     0,     2,   321,  1162,
     322,   639,     0,  1163,     0,   252,     0,   640,   323,   324,
       0,   325,   326,   327,   328,     0,     0,     0,     0,     0,
       0,  1119,  1120,  1121,   626,  1122,  1123,  1124,  1125,   631,
     632,  1126,     0,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,   309,   310,  1127,     0,   636,   637,   638,
       0,   300,     0,     1,   301,   105,   302,   311,   303,   304,
       0,   312,   313,   314,   315,   316,   317,   318,   319,    43,
      44,     0,     0,     0,     0,     0,   320,     0,     2,   321,
       0,   322,   639,     0,     0,     0,   252,     0,   640,   323,
     324,     0,   325,   326,   327,   328,     0,     0,     0,     0,
       0,     0,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,     0,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,   309,   310,  1127,     0,   636,   637,
     638,     0,   300,     0,     1,   301,   105,   302,   311,   303,
     304,     0,   312,   313,   314,   315,   316,   317,   318,   319,
      43,    44,     0,     0,     0,     0,     0,   320,     0,     2,
     321,     0,   322,   639,     0,     0,     0,   252,     0,   640,
     323,   324,     0,   325,   326,   327,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     2,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,  1162,   322,  2115,     0,  1163,     0,     0,     0,
       0,   323,   324,     0,   325,   326,   327,   328,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     2,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,     0,   322,  1157,     0,  1158,
       0,     0,     0,     0,   323,   324,     0,   325,   326,   327,
     328,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   321,  1285,   322,
       0,     0,     0,     0,   746,     0,     0,   323,   324,     0,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,  1352,   322,     0,     0,     0,     0,   746,     0,     0,
     323,   324,     0,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,     0,   322,  1138,     0,     0,     0,
     746,     0,     0,   323,   324,     0,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
    1634,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   321,  1162,   322,     0,
       0,  1163,     0,     0,     0,     0,   323,   324,     0,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       2,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
    1635,   322,  1636,     0,     0,     0,     0,     0,     0,   323,
     324,     0,   325,   326,   327,   328,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     2,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,     0,     0,     0,     0,   320,
       0,     0,   321,     0,   322,  1644,     0,  1158,     0,     0,
       0,     0,   323,   324,     0,   325,   326,   327,   328,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,     0,     0,     2,   312,   313,   314,
     315,   316,   317,   318,   319,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,   321,  1692,   322,     0,     0,
       0,     0,   746,     0,     0,   323,   324,     0,   325,   326,
     327,   328,     0,   305,     0,     0,     0,     0,     0,   306,
     307,   308,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     2,
     312,   313,   314,   315,   316,   317,   318,   319,     0,     0,
       0,     0,     0,     0,     0,   320,     0,     0,   321,  1701,
     322,     0,     0,     0,     0,   746,     0,     0,   323,   324,
       0,   325,   326,   327,   328,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     2,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,  1733,   322,     0,     0,  1158,     0,     0,     0,
       0,   323,   324,     0,   325,   326,   327,   328,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     2,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,     0,   322,     0,     0,  1158,
       0,     0,     0,     0,   323,   324,  1761,   325,   326,   327,
     328,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   321,     0,   322,
       0,     0,  1764,     0,     0,     0,  1765,   323,   324,     0,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,     0,   322,     0,     0,  1158,     0,     0,     0,     0,
     323,   324,  1771,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,     0,   322,     0,     0,  1764,     0,
       0,     0,  1773,   323,   324,     0,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   321,  1872,   322,     0,
       0,  1158,     0,     0,     0,     0,   323,   324,     0,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       2,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
    1874,   322,     0,     0,  1158,     0,     0,     0,     0,   323,
     324,     0,   325,   326,   327,   328,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     2,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,     0,     0,     0,     0,   320,
       0,     0,   321,  1875,   322,     0,     0,  1163,     0,     0,
       0,     0,   323,   324,     0,   325,   326,   327,   328,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,     0,     0,     2,   312,   313,   314,
     315,   316,   317,   318,   319,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,   321,  1878,   322,     0,     0,
    1158,     0,     0,     0,     0,   323,   324,     0,   325,   326,
     327,   328,     0,   305,     0,     0,     0,     0,     0,   306,
     307,   308,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     2,
     312,   313,   314,   315,   316,   317,   318,   319,     0,     0,
       0,     0,     0,     0,     0,   320,     0,     0,   321,  1635,
     322,  1636,     0,     0,     0,     0,     0,     0,   323,   324,
       0,   325,   326,   327,   328,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,  1898,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     2,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,     0,   322,  1895,     0,  1158,     0,     0,     0,
       0,   323,   324,     0,   325,   326,   327,   328,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     2,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,  1899,   322,  1636,     0,     0,
       0,     0,     0,     0,   323,   324,     0,   325,   326,   327,
     328,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   321,     0,   322,
       0,     0,  1764,     0,     0,     0,  1912,   323,   324,     0,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,     0,   322,     0,     0,  1764,     0,     0,     0,  1916,
     323,   324,     0,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,     0,   322,     0,     0,  1158,     0,
       0,     0,     0,   323,   324,  1925,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   321,     0,   322,     0,
       0,  1158,     0,     0,     0,     0,   323,   324,  1928,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       2,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
    2037,   322,     0,     0,  1158,     0,     0,     0,     0,   323,
     324,     0,   325,   326,   327,   328,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     2,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,     0,     0,     0,     0,   320,
       0,     0,   321,  1873,   322,     0,     0,  1163,     0,     0,
       0,     0,   323,   324,     0,   325,   326,   327,   328,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,     0,     0,     2,   312,   313,   314,
     315,   316,   317,   318,   319,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,   321,  2044,   322,     0,     0,
    1158,     0,     0,     0,     0,   323,   324,     0,   325,   326,
     327,   328,     0,   305,     0,     0,     0,     0,     0,   306,
     307,   308,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     2,
     312,   313,   314,   315,   316,   317,   318,   319,     0,     0,
       0,     0,     0,     0,     0,   320,     0,     0,   321,  1899,
     322,  1636,     0,     0,     0,     0,     0,     0,   323,   324,
       0,   325,   326,   327,   328,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     2,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,  2120,   322,     0,     0,  1158,     0,     0,     0,
       0,   323,   324,     0,   325,   326,   327,   328,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     2,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,     0,   322,     0,     0,     0,
    2148,  1018,     0,     0,   323,   324,     0,   325,   326,   327,
     328,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   321,  2151,   322,
       0,     0,  1158,     0,     0,     0,     0,   323,   324,     0,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,  2152,   322,     0,     0,  1158,     0,     0,     0,     0,
     323,   324,     0,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,  2179,   322,     0,     0,  1158,     0,
       0,     0,     0,   323,   324,     0,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   321,     0,   322,     0,
       0,     0,     0,     0,     0,     0,   323,   324,   545,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       2,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
       0,   322,     0,     0,     0,     0,   746,     0,     0,   323,
     324,     0,   325,   326,   327,   328,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     2,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,     0,     0,     0,     0,   320,
       0,     0,   321,     0,   322,     0,     0,     0,     0,     0,
       0,     0,   323,   324,   842,   325,   326,   327,   328,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,     0,     0,     2,   312,   313,   314,
     315,   316,   317,   318,   319,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,   321,     0,   322,     0,     0,
       0,     0,     0,     0,     0,   323,   324,   846,   325,   326,
     327,   328,     0,   305,     0,     0,     0,     0,     0,   306,
     307,   308,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     2,
     312,   313,   314,   315,   316,   317,   318,   319,     0,     0,
       0,     0,     0,     0,     0,   320,     0,     0,   321,     0,
     322,     0,     0,     0,     0,  1018,     0,     0,   323,   324,
       0,   325,   326,   327,   328,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     2,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,     0,   322,     0,     0,     0,     0,     0,     0,
       0,   323,   324,  1059,   325,   326,   327,   328,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     2,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,     0,   322,     0,     0,     0,
       0,     0,     0,  1111,   323,   324,     0,   325,   326,   327,
     328,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,  1479,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   321,   735,   322,
       0,     0,     0,     0,     0,     0,     0,   323,   324,     0,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,     0,   322,     0,     0,     0,     0,   746,     0,     0,
     323,   324,     0,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,     0,   322,     0,     0,     0,     0,
       0,     0,     0,   323,   324,  1582,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   321,  1618,   322,     0,
       0,     0,     0,     0,     0,     0,   323,   324,     0,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       2,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
       0,   322,     0,     0,     0,     0,     0,     0,  1621,   323,
     324,     0,   325,   326,   327,   328,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,  1832,     0,     1,   301,
     105,   302,     0,   303,   304,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     2,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,     0,     0,     0,     0,   320,
       0,     0,   321,     0,   322,     0,     0,     0,     0,  1831,
       0,     0,   323,   324,     0,   325,   326,   327,   328,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,  1835,
       0,     1,   301,   105,   302,     0,   303,   304,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,     0,     0,     2,   312,   313,   314,
     315,   316,   317,   318,   319,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,   321,     0,   322,     0,     0,
       0,     0,   746,     0,     0,   323,   324,     0,   325,   326,
     327,   328,     0,   305,     0,     0,     0,     0,     0,   306,
     307,   308,  1839,     0,     1,   301,   105,   302,     0,   303,
     304,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     2,
     312,   313,   314,   315,   316,   317,   318,   319,     0,     0,
       0,     0,     0,     0,     0,   320,     0,     0,   321,     0,
     322,     0,     0,     0,     0,   746,     0,     0,   323,   324,
       0,   325,   326,   327,   328,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     2,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,     0,   322,     0,     0,     0,     0,   746,     0,
       0,   323,   324,     0,   325,   326,   327,   328,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     2,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,  1885,   322,     0,     0,     0,
       0,     0,     0,     0,   323,   324,     0,   325,   326,   327,
     328,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,  1952,     0,   322,
       0,     0,     0,     0,  1831,     0,     0,   323,   324,     0,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,  2053,   322,     0,     0,     0,     0,     0,     0,     0,
     323,   324,     0,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,  2111,   322,     0,     0,     0,     0,
       0,     0,     0,   323,   324,     0,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     699,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   321,     0,   322,     0,
       0,     0,     0,     0,     0,     0,   323,   324,     0,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       2,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   700,
       0,   322,     0,     0,     0,     0,     0,     0,     0,   323,
     324,     0,   325,   326,   327,   328,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,   699,     0,     1,   301,
     105,   302,     0,   303,   304,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     2,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,     0,     0,     0,     0,   320,
       0,     0,   709,     0,   322,     0,     0,     0,     0,     0,
       0,     0,   323,   324,     0,   325,   326,   327,   328,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,     0,     0,     0,   312,   313,   314,
     315,   316,   317,   318,   319,  -921,   580,     0,  -921,  -921,
    -921,     0,   320,     0,     0,   732,     0,   322,     0,     0,
       0,     0,     0,     0,     0,   323,   324,     0,   325,   326,
     327,   328,     0,  -921,  -921,  -921,  -921,  -921,  -921,  -921,
    -921,  -921,  -921,  -921,  -921,  -921,  -921,  -921,  -921,  -921,
    -921,  -921,  -921,  -921,  -921,  -921,     0,     0,  -921,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -921,  -921,     0,  -921,     0,     0,  -921,  -921,     0,  -921,
    -921,     0,     0,  -921,  -921,  -921,  -921,  -921,  -921,     0,
    -921,  -921,  -921,  -921,     0,     0,  -921,  -921,  -921,  -921,
       0,  -921,     0,  -921,  -921,  -921,     0,  -921,  -921,  -921,
    -921,  -921,  -921,  -921,     0,  -921,  -921,  -921,  -921,  -921,
    -921,  -921,  -921,     0,     0,  -921,   581,  -921,  -921,     0,
     582,  -921,     0,     0,     0,  -921,  -921,  -189,   909,     0,
    -189,  -189,  -189,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,     0,
    -189,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -189,  -189,     0,  -189,     0,     0,  -189,  -189,
       0,  -189,  -189,     0,     0,  -189,  -189,  -189,  -189,  -189,
    -189,     0,  -189,  -189,  -189,  -189,     0,     0,  -189,  -189,
    -189,  -189,     0,  -189,     0,  -189,  -189,  -189,     0,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,     0,     0,  -189,     0,  -189,
     910,     0,   911,  -189,     0,     0,     0,  -189,  -189,  -253,
     923,     0,     1,   301,   105,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,  -253,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   421,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   422,    32,   423,
     424,    35,    36,     0,   403,    38,    39,   425,     0,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   433,
       0,   434,   435,  -251,   926,  -253,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,  -251,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   421,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   422,    32,   423,   424,    35,    36,     0,   403,    38,
      39,   425,     0,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   433,     0,   434,   435,  -254,   923,  -251,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
    -254,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   421,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   422,    32,   423,   424,    35,
      36,     0,   403,    38,    39,   425,     0,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   433,     0,   434,
     435,  -252,   926,  -254,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,  -252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   421,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   422,
      32,   423,   424,    35,    36,     0,   403,    38,    39,   425,
       0,     0,   426,   427,   428,   429,     0,   430,     0,   431,
     432,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   433,     0,   434,   435,     0,   420,  -252,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   421,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   422,    32,   423,   424,    35,    36,     0,
     403,    38,    39,   425,     0,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   433,     0,   434,   435,     0,
     486,   436,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   421,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   422,    32,   423,
     424,    35,    36,     0,   403,    38,    39,   425,     0,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   433,
       0,   434,   435,     0,   508,   487,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   421,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   422,    32,   423,   424,    35,    36,     0,   403,    38,
      39,   425,     0,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   433,     0,   434,   435,     0,   513,   509,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   421,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   422,    32,   423,   424,    35,
      36,     0,   403,    38,    39,   425,     0,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   433,     0,   434,
     435,     0,   517,   514,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   421,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   422,
      32,   423,   424,    35,    36,     0,   403,    38,    39,   425,
       0,     0,   426,   427,   428,   429,     0,   430,     0,   431,
     432,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   433,     0,   434,   435,     0,   923,   518,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   421,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   422,    32,   423,   424,    35,    36,     0,
     403,    38,    39,   425,     0,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   433,     0,   434,   435,     0,
     926,  -776,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   421,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   422,    32,   423,
     424,    35,    36,     0,   403,    38,    39,   425,     0,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   433,
       0,   434,   435,     0,   923,  -777,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   421,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   422,    32,   423,   424,    35,    36,     0,   403,    38,
      39,   425,     0,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   433,     0,   434,   435,     0,   926,  -773,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   421,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   422,    32,   423,   424,    35,
      36,     0,   403,    38,    39,   425,     0,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   433,     0,   434,
     435,     0,   923,  -774,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   421,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   422,
      32,   423,   424,    35,    36,     0,   403,    38,    39,   425,
       0,     0,   426,   427,   428,   429,     0,   430,     0,   431,
     432,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   433,     0,   434,   435,     0,   926,  -779,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   421,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   422,    32,   423,   424,    35,    36,     0,
     403,    38,    39,   425,     0,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   433,     0,   434,   435,     0,
    1041,  -780,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   421,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   422,    32,   423,
     424,    35,    36,     0,   403,    38,    39,   425,     0,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   433,
       0,   434,   435,     0,  1045,  1042,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   421,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   422,    32,   423,   424,    35,    36,     0,   403,    38,
      39,   425,     0,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   433,     0,   434,   435,     0,   923,  1046,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   421,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   422,    32,   423,   424,    35,
      36,     0,   403,    38,    39,   425,     0,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   433,     0,   434,
     435,     0,   926,  -756,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   421,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   422,
      32,   423,   424,    35,    36,     0,   403,    38,    39,   425,
       0,     0,   426,   427,   428,   429,     0,   430,     0,   431,
     432,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   433,     0,   434,   435,     0,   923,  -757,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   421,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   422,    32,   423,   424,    35,    36,     0,
     403,    38,    39,   425,     0,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   433,     0,   434,   435,     0,
     926,  -759,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   421,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   422,    32,   423,
     424,    35,    36,     0,   403,    38,    39,   425,     0,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   433,
       0,   434,   435,     0,  1564,  -760,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   421,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   422,    32,   423,   424,    35,    36,     0,   403,    38,
      39,   425,     0,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   433,     0,   434,   435,     0,   923,  1565,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   421,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   422,    32,   423,   424,    35,
      36,     0,   403,    38,    39,   425,     0,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   433,     0,   434,
     435,     0,   926,  -674,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   421,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   422,
      32,   423,   424,    35,    36,     0,   403,    38,    39,   425,
       0,     0,   426,   427,   428,   429,     0,   430,     0,   431,
     432,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   433,     0,   434,   435,     0,   923,  -675,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   421,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   422,    32,   423,   424,    35,    36,     0,
     403,    38,    39,   425,     0,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   433,     0,   434,   435,     0,
     926,  -762,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   421,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   422,    32,   423,
     424,    35,    36,     0,   403,    38,    39,   425,     0,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   433,
       0,   434,   435,     0,   923,  -763,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   421,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   422,    32,   423,   424,    35,    36,     0,   403,    38,
      39,   425,     0,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   433,     0,   434,   435,     0,   926,  -667,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   421,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   422,    32,   423,   424,    35,
      36,     0,   403,    38,    39,   425,     0,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   433,     0,   434,
     435,     0,   923,  -668,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   421,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   422,
      32,   423,   424,    35,    36,     0,   403,    38,    39,   425,
       0,     0,   426,   427,   428,   429,     0,   430,     0,   431,
     432,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   433,     0,   434,   435,     0,   926,  -663,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   421,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   422,    32,   423,   424,    35,    36,     0,
     403,    38,    39,   425,     0,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   433,     0,   434,   435,     0,
     923,  -664,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   421,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   422,    32,   423,
     424,    35,    36,     0,   403,    38,    39,   425,     0,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   433,
       0,   434,   435,     0,   926,  -653,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   421,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   422,    32,   423,   424,    35,    36,     0,   403,    38,
      39,   425,     0,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   433,     0,   434,   435,     0,   923,  -654,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   421,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   422,    32,   423,   424,    35,
      36,     0,   403,    38,    39,   425,     0,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   433,     0,   434,
     435,     0,   926,  -648,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   421,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   422,
      32,   423,   424,    35,    36,     0,   403,    38,    39,   425,
       0,     0,   426,   427,   428,   429,     0,   430,     0,   431,
     432,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   433,     0,   434,   435,     0,   923,  -649,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   421,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   422,    32,   423,   424,    35,    36,     0,
     403,    38,    39,   425,     0,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   433,     0,   434,   435,     0,
     926,  -665,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   421,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   422,    32,   423,
     424,    35,    36,     0,   403,    38,    39,   425,     0,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   433,
       0,   434,   435,     0,   300,  -666,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   421,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   422,    32,   423,   424,    35,    36,     0,   403,    38,
      39,   425,     0,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   433,     0,   434,   435,   420,     0,     1,
     301,   105,     0,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   199,   200,   201,   202,   203,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   305,    27,     0,   421,     0,     0,   306,   307,     0,
      28,    29,     0,     0,   422,    32,   423,   424,    35,    36,
       0,   403,    38,    39,   425,     0,     0,   426,   427,   428,
     429,     0,   430,     0,   431,   432,    40,     0,   312,   313,
     314,   315,   316,   317,   318,     0,    43,    44,    45,    46,
      47,    48,   205,    50,     0,     0,   433,     0,   434,   435,
     486,     0,     1,   301,   105,     0,   323,   324,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   421,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   422,    32,   423,
     424,    35,    36,     0,   403,    38,    39,   425,     0,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,   198,   433,
       1,   434,   435,     0,     0,     0,     0,     0,     0,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,   561,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   204,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,   198,     0,     1,     0,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   562,  1050,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   563,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   204,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     1,     0,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   864,  1050,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   563,     2,   199,   200,   201,   202,   203,     8,
       9,    10,   561,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     1,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   562,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   563,     0,   564,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     1,     0,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   864,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   563,     2,   199,   200,   201,   202,   203,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,    18,
      19,   242,   243,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   244,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     245,    38,   246,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   247,     0,     0,     0,     0,
       0,     0,     1,     0,     0,    43,    44,   248,   249,   250,
     251,   205,    50,     0,     0,   864,     0,     0,     0,     0,
       0,     0,  1444,     0,     0,     0,   563,     2,   199,   200,
     201,   202,   203,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,    18,    19,   242,   243,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   244,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   245,    38,   246,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   247,
       0,     0,     0,     0,     0,     0,     1,     0,     0,    43,
      44,   248,   249,   250,   251,   205,    50,     0,     0,   864,
       0,     0,     0,     0,     0,     0,  1461,     0,     0,     0,
     563,     2,   199,   200,   201,   202,   203,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,    18,    19,   242,
     243,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   244,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   245,    38,
     246,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   247,     0,     0,     0,     0,     0,     0,
       1,     0,     0,    43,    44,   248,   249,   250,   251,   205,
      50,     0,     0,  1226,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1227,     2,   199,   200,   201,   202,
     203,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,    18,    19,   242,   243,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   244,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   245,    38,   246,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   247,     0,     0,
       0,     0,     0,     0,     1,     0,     0,    43,    44,   248,
     249,   250,   251,   205,    50,     0,     0,  1226,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1249,     2,
     199,   200,   201,   202,   203,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,    18,    19,   242,   243,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   244,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   245,    38,   246,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   247,     0,     0,     0,     0,     0,     0,     1,     0,
       0,    43,    44,   248,   249,   250,   251,   205,    50,     0,
       0,  1226,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1725,     2,   199,   200,   201,   202,   203,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,    18,
      19,   242,   243,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   244,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     245,    38,   246,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   247,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,   248,   249,   250,
     251,   205,    50,     0,     0,  1226,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,  1740,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       1,     0,     0,    43,    44,    45,    46,    47,    48,     0,
      50,     0,     0,   864,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   563,     2,     3,     4,   271,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,   272,    31,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,    42,     1,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,     0,     0,    51,     0,     0,
       0,     0,     0,     0,     0,     0,   273,     0,     2,   199,
     200,   201,   202,   203,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,   421,     0,
       0,     0,     0,     0,    28,    29,     0,     0,   422,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     1,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   205,    50,     0,     0,
     951,     0,   434,     0,     0,     0,     0,     0,     0,   952,
       2,   199,   200,   201,   202,   203,     8,     9,    10,   561,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     1,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   205,    50,
       0,     0,   931,     0,     0,     0,     0,     0,     0,     0,
       0,   932,     2,   199,   200,   201,   202,   203,     8,     9,
      10,   561,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,   616,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     205,    50,     0,     0,    51,     0,     0,     0,     0,     0,
       0,     0,     0,   932,     2,   199,   200,   201,   202,   203,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   244,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   245,    38,   246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   247,  1529,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   248,   249,
     250,   251,   205,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   252,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -66,     0,     0,     0,     0,     0,     0,     0,
     -66,   -66,     0,     0,     0,   -66,     0,     0,     0,     0,
       0,   -66,   -66,   -66,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -66,  1752,     0,     0,
       0,     0,     0,     0,     0,     0,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,     0,     0,     0,     0,     0,     0,  1530,
       0,  1531,   -66,     0,     2,   199,   200,   201,   202,   203,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   244,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   245,    38,   246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   247,  1756,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   248,   249,
     250,   251,   205,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -111,     0,     2,   199,   200,   201,   202,   203,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   244,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   245,    38,   246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   247,  1757,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   248,   249,
     250,   251,   205,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -95,     0,     2,   199,   200,   201,   202,   203,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   244,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   245,    38,   246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   247,  1863,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   248,   249,
     250,   251,   205,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -96,     0,     2,   199,   200,   201,   202,   203,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   244,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   245,    38,   246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   247,  2014,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   248,   249,
     250,   251,   205,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -80,     0,     2,   199,   200,   201,   202,   203,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   244,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   245,    38,   246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   247, -1313,   290,     0,
       1,     0,     0,     0,     0,     0,    43,    44,   248,   249,
     250,   251,   205,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -87,     0,     0,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,    30,    31,     0,    32,    33,    34,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     1,    40,    41,     0,
       0,     0,    42,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,     0,     0,    51,     0,     0,
      52,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     1,     0,     0,     0,     0,
     834,     0,     0,    43,    44,    45,    46,    47,    48,   205,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1420,
       2,   199,   200,   201,   202,   203,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     1,     0,     0,     0,     0,   834,
       0,     0,    43,    44,    45,    46,    47,    48,   205,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1783,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,   164,     0,     1,     0,     0,     0,   834,     0,
       0,    43,    44,    45,    46,    47,    48,   205,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1784,     0,     2,
       3,     4,   165,     6,     7,     8,     9,    10,   166,   167,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    26,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   164,     0,
       1,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,     0,
       0,    51,     0,     0,   168,     2,     3,     4,   165,     6,
       7,     8,     9,    10,   166,   167,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   601,     0,     1,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,     0,     0,    51,     0,     0,
     168,     2,   199,   200,   201,   202,   203,   232,   233,   234,
     602,   603,   237,   238,   239,   240,   241,    18,    19,   242,
     243,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   244,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   245,    38,
     246,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -941,     0,  -941,   247,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,   248,   249,   250,   251,   205,
      50,     0,     0,    51,     0,     0,   604,  -941,  -941,  -941,
    -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,
    -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,  -941,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -941,     0,     0,     0,     0,
       0,     0,     0,  -941,  -941,     0,     0,     0,  -941,     0,
       0,     0,     0,     0,  -941,  -941,  -941,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,  -941,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -941,
    -941,  -941,  -941,  -941,  -941,  -941,  -941,     0,     0,  -941,
       0,     0,  -941,     2,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,    30,    31,     0,    32,    33,    34,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0, -1314,   282,     0,     1,    40,    41,     0,     0,     0,
      42,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,    49,    50,     0,     0,    51,     0,     0,    52,     2,
       3,     4,   165,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    26,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,    33,    34,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,   198,     0,     1,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,     0,
       0,    51,     2,   199,   200,   201,   202,   203,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   204,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,   198,
       0,     1,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     205,    50,     0,     0,  1226,  1712,     2,   199,   200,   201,
     202,   203,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   204,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,   198,     0,     1,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,   205,     0,     0,     0,     0,   206,
       2,   199,   200,   201,   202,   203,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   204,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,   944,     0,     1,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   205,     0,
       0,     0,     0,   386,     2,   199,   200,   201,   202,   203,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   204,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,  1487,     0,     1,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   205,     0,     0,     0,     0,   206,     2,   199,
     200,   201,   202,   203,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   204,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,   198,     0,     1,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   205,     0,     0,     0,
       0,   386,     2,   199,   200,   201,   202,   203,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   204,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,   198,
       0,     1,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     205,     0,     0,     0,     0,  1579,     2,   199,   200,   201,
     202,   203,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   204,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,   164,     0,     1,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,   205,     0,     0,     0,     0,  1942,
       2,     3,     4,   165,     6,     7,     8,     9,    10,   561,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,   164,     0,     1,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,    49,    50,
       0,     0,    51,     2,     3,     4,   165,     6,     7,     8,
       9,    10,   561,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,   888,
       0,     1,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,    49,    50,     0,     0,    51,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   244,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   245,    38,   246,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,     0,     0,   247,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     248,   249,   250,   251,   205,     0,     0,     0,   889,     2,
       3,     4,   165,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    26,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     1,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,     0,
       0,    51,     2,   199,   200,   201,   202,   203,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     205,    50,     0,     0,    51,     2,   199,   200,   201,   202,
     203,     8,     9,    10,   561,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,    51,     2,   199,
     200,   201,   202,   203,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     1,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   205,     0,     0,     0,
     724,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   205,
       0,     0,     0,  1466,     2,   199,   200,   201,   202,   203,
     232,   233,   234,  1551,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   244,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   245,    38,   246,     0,     0,     0,     0,     0,     0,
    1073,     0,     1,     0,     0,     0,   247,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   248,   249,
     250,   251,   205,    50,     0,     0,    51,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    1074,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   204,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,  1079,
       0,     1,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,   205,     2,   199,   200,   201,
     202,   203,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,  1080,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   204,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,  1085,     0,
       1,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,   205,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,  1086,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   204,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,   873,     0,     1,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,   205,     2,   199,   200,   201,   202,   203,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   244,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   245,    38,   246,     0,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,     0,   247,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,   248,   249,
     250,   251,   205,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,  1034,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     204,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     1,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,   205,     2,   199,   200,   201,   202,   203,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,  1091,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   204,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     205,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   500,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   205,
       2,   199,   200,   201,   202,   203,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,   834,
       0,     0,    43,    44,    45,    46,    47,    48,   205,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   204,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,   205,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   244,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
     475,   476,     0,     0,     0,   245,    38,   246,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
     247,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   248,   249,   250,   251,   205,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     1,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,   205,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   244,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   245,    38,   246,     0,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,     0,   247,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     248,   249,   250,   251,   205,     2,     0,     0,     0,     0,
       0,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,     2,   199,   200,   201,   202,   203,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,    18,
      19,   242,   243,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   244,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     245,    38,   246,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   247,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,   248,   249,   250,
     251,   205,    50,     0,     0,   864,  1709,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   563,     2,   199,   200,
     201,   202,   203,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,    18,    19,   242,   243,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   244,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   245,    38,   246,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   247,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,   248,   249,   250,   251,   205,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   252,     2,   199,   200,
     201,   202,   203,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,    18,    19,   242,   243,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   244,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   245,    38,   246,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   247,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,   248,   249,   250,   251,   205
};

static const yytype_int16 yycheck[] =
{
       0,   930,   532,    91,   723,   467,   155,   940,    82,  1236,
     962,   930,   468,   638,   839,    85,   863,   131,   135,   127,
      99,  1001,    85,   143,   863,   152,   839,   830,    82,  1103,
      30,    31,   863,  1000,   808,  1002,   156,   746,   158,   830,
     160,    41,    92,   286,   753,   127,   746,   756,    92,    30,
     725,    51,    99,   753,    82,    83,   756,   127,    58,    82,
     298,    42,   341,    63,   127,    65,  1628,     3,   182,   307,
      83,   143,     1,    63,   552,   313,     3,  1000,  1640,  1002,
       3,    81,    82,    83,   156,    85,   158,   880,   160,   471,
      90,     5,    92,    77,  1018,     1,     1,   185,   186,    99,
     100,     1,   130,   103,   582,     1,   120,   585,     1,   587,
      82,   589,   112,   762,     0,   115,     3,    92,     5,   120,
      92,   185,   186,     3,    99,   106,   107,   127,   340,   110,
     130,   131,   341,     3,   981,   135,     3,     3,     5,   139,
     140,   141,   354,   143,     1,   129,   358,   147,    28,   149,
       3,     3,   152,   153,    82,   155,   156,   157,   158,   808,
     160,     1,    28,   163,    92,     0,   324,     1,   123,   577,
     120,    99,   127,   173,     1,    28,     3,     3,   266,     5,
       1,   131,   182,   173,    37,   121,     1,     3,  1000,   125,
    1002,   134,   135,   129,   121,     1,    82,   197,    17,    91,
     129,     1,   276,    17,   268,   131,    92,   286,   208,   288,
     210,     1,   286,    99,   100,  1008,   130,     1,   218,   219,
     126,   126,   276,   287,   467,     3,   126,     3,   228,   346,
     126,   231,   286,   126,   121,   263,     1,     1,   288,   286,
       1,   288,   129,     1,   288,     3,   467,    82,   276,     5,
     263,   121,     1,   276,   121,   125,   182,    92,   883,   129,
       1,   127,   129,   263,    99,   100,   123,   120,   268,   418,
      58,     1,   272,  1225,   268,   127,   276,   391,   131,    17,
     120,   121,     1,     3,     3,   125,   286,     1,   288,     3,
    1270,   272,   126,   185,   186,   121,   286,  1277,     1,   126,
     417,  1281,   797,   129,  1271,   126,   306,   123,   123,   125,
     125,  1278,   312,   288,   286,  1282,   288,   123,     1,   125,
     126,   321,   141,   123,   112,   125,   126,   141,  1890,     3,
     825,  1000,     5,  1002,   120,   335,   126,   121,     3,   117,
     118,   125,   323,     5,   120,     3,   124,     5,  1271,   437,
     438,   439,   440,    17,     1,  1278,   266,   267,     3,  1282,
     288,   126,   126,    28,   298,   126,     1,   118,   126,   302,
      28,   120,   128,   307,   266,   123,   268,   377,   378,   313,
       3,     5,   123,   383,   219,   385,   319,     1,     1,     3,
     276,   391,  1195,     3,  1197,   287,   126,   397,   468,  1108,
     286,   121,   288,   141,  1195,   468,  1197,   126,  1108,   197,
     410,     5,   126,   527,     3,   415,   126,   417,   418,     3,
      65,   421,   422,   126,     5,   887,   553,   427,     5,   543,
     430,   431,   432,   433,   434,   647,   126,   557,   650,   559,
    1214,   276,    11,   126,   118,   533,  1220,   887,   536,   123,
     693,   286,   125,   288,   562,     3,   694,   127,   866,  1271,
       3,     3,   462,   463,   464,   391,  1278,   467,   468,   127,
    1282,   471,   117,   118,   474,     3,    90,   141,   125,   479,
     562,   937,   127,   483,   484,   557,   321,   559,   488,   489,
     125,  1443,     3,  1720,   120,   523,   524,   525,   121,   961,
     500,   125,    51,   782,   783,   784,   506,   507,   121,   302,
     510,   511,   125,   541,   542,   515,   516,   127,  1451,   519,
     520,   961,  1596,   523,   524,   525,   319,   527,   268,   123,
     530,    73,     1,   812,   813,   814,   422,   121,   127,   120,
       3,   541,   542,   543,   121,   437,  1008,   547,   440,   117,
     119,  1226,   552,   553,  1506,     5,   125,   557,  1491,   559,
     560,  1494,   562,   563,   564,  1214,   948,   567,   950,  1244,
     126,  1220,     1,   782,   783,   784,  1251,   577,   121,   127,
     415,   130,   582,     3,   126,   585,   127,   587,   129,   589,
     118,   119,  1439,     1,  1072,   383,   596,   385,  1423,  1424,
    1439,   527,  1271,   812,   813,   814,   117,   118,  1439,  1278,
    1423,  1424,  1090,  1282,   693,   798,   127,   543,   776,   693,
     799,  1550,  1602,   533,   688,   689,   536,     3,   628,  2136,
     630,  1550,   467,  1557,     0,   723,  1603,   880,   638,   693,
       3,   533,     1,   826,   536,   803,   693,  1055,   827,     5,
       3,   577,   121,   811,   117,   118,   125,   124,  1066,   880,
     660,   661,   662,   663,   127,     3,   660,   661,   662,   663,
     219,   121,   507,   831,   791,   792,     3,   794,   678,   679,
    1603,   462,   463,  2190,   118,  1524,  1517,   687,  1519,   123,
      28,   120,   121,   693,   675,   676,   125,   117,   118,     1,
     700,    28,   819,   820,   821,   822,  1933,   488,   489,     7,
       8,     9,    82,   121,   714,   125,     3,   125,   961,   940,
      73,   721,   722,   723,   724,   725,   726,     1,     3,   510,
     511,   125,   732,   131,   515,   516,    11,   131,   519,   520,
     961,   117,   118,   743,   120,   862,   863,   728,   729,   730,
     660,   661,   662,   663,   117,   118,   864,   125,     3,   759,
     694,   120,   121,   763,   127,  1008,   125,  1719,   660,   661,
     662,   663,  1724,   126,     3,   563,  1485,     7,     8,     9,
     690,   552,   864,   124,   302,  1485,    73,  1008,   129,   127,
     123,  1603,  1000,  1001,  1002,     3,   688,   689,   690,    28,
     127,   319,   123,    11,   118,   805,   127,   693,   596,   809,
    1734,   582,   182,   127,   585,   129,   587,   125,   589,   121,
     969,   970,   120,   125,  1804,   913,   914,   126,   916,   937,
     128,   919,   920,   131,   834,   835,   836,  1789,  1805,   839,
     840,   841,   117,   118,   119,   962,   125,   121,   975,   124,
     125,   125,   127,     3,   974,   937,     3,   127,   693,   129,
    1793,  1794,   862,   863,   864,   700,   120,   937,   868,   125,
     870,   871,   117,   118,   937,   120,   132,   131,   878,   879,
     880,    28,  1805,   883,   433,    69,    70,   887,   723,   889,
     890,   120,   892,   125,   894,   126,   800,   732,   128,   131,
     801,   131,   974,   991,    79,     3,   276,  1831,   743,   117,
     118,   119,  1039,  1040,   127,    65,   286,   125,  1842,   127,
     660,   661,   662,   663,   828,     7,     8,     9,   829,  1049,
      28,   931,   117,   933,  1603,   110,   111,   937,   120,    37,
     940,  1055,   126,   797,   127,   945,   129,   120,   948,   131,
     950,   951,   137,   138,   129,     7,     8,     9,   131,  1067,
     960,   961,   962,   121,     7,     8,     9,   117,   118,   969,
     970,   825,   972,   120,   974,   975,   121,  1049,   119,     3,
     980,   981,   982,   983,   125,  1067,   140,    11,  1267,   143,
     121,  1830,   120,  1805,   125,   662,   663,     3,  1950,     5,
     798,   836,   156,   120,   158,   799,   160,   124,  1008,     7,
       8,     9,     1,   562,   131,   564,   124,   126,     7,     8,
       9,   129,   120,  1742,  1486,    31,  1054,  1557,   826,  1437,
       7,     8,     9,   827,   120,  1660,   871,   120,  1713,  1039,
    1040,   118,   124,  1043,  1044,   880,   128,  1047,  1048,  1049,
     127,  1051,   887,   124,  1054,  1055,   121,   892,  1267,   894,
     125,    77,  1270,  1271,  1064,  1185,  1066,  1067,  1068,  1277,
    1278,   118,  1072,  1281,  1282,  1075,   128,   120,  1078,   800,
     127,  1081,     3,  2012,  1084,   128,   120,  1087,   131,     1,
    1090,     3,  1092,   117,   118,   119,     3,   467,     5,   991,
     124,   125,   120,   127,  2028,   120,  1106,   828,  1225,   801,
     945,  1111,   120,  1185,  1114,   119,  1274,  1111,  1226,   120,
    1114,   125,   120,  1123,    31,  1125,   961,   795,   796,  1055,
     128,   120,   120,   131,  1134,   124,  1805,   829,  1064,   128,
    1066,   121,   131,   127,  1226,   125,   120,  1147,   302,   126,
     117,   128,  1152,  1153,   127,   823,   824,   527,  1152,   120,
     530,  1569,  1143,   795,   796,   319,  1166,  1167,  1168,  1169,
     137,   138,  1166,  1167,  1168,  1169,   118,     7,     8,     9,
    2104,   119,   133,   125,  1184,  1185,  1186,   125,  1188,   131,
     121,   823,   824,  2024,   125,  2026,   117,   118,  1198,   139,
    1200,  1111,   121,   124,  1114,   117,   118,  1207,    12,    13,
       3,  1211,     5,   125,     3,  1215,   140,  1217,     1,  1111,
    2144,  1221,  1114,     3,   121,  1225,  1226,  1904,   125,    16,
    1451,    12,    13,  1952,   523,   524,   525,   121,     1,    28,
       3,   125,  1152,   121,  1244,   129,   121,   125,    28,   139,
     125,  1251,   541,   542,   129,    44,  1166,  1167,  1168,  1169,
    1152,  1261,  1043,  1044,    44,   121,  1047,  1048,     0,   125,
    1491,   135,   119,  1494,  1166,  1167,  1168,  1169,   125,  1189,
    1068,  1191,   119,  1908,   119,    74,    75,  1268,   125,   121,
     125,    74,    75,   125,    74,    75,    79,  1189,   128,  1191,
     133,  1072,   121,    86,     3,   119,   125,  1078,   462,   463,
     129,   125,  1842,  1084,   118,   119,   127,   687,   129,  1090,
     474,    16,  1439,   693,   117,   118,  1443,   110,   111,    28,
      10,    11,   121,   119,   488,   489,   125,   118,   119,   125,
     123,   124,   125,   892,   123,    44,   125,   119,   119,   140,
      82,    69,    70,   125,   125,   121,   510,   511,   119,   125,
      92,   515,   516,   129,   125,   519,   520,    99,   100,   785,
     786,  1111,  1207,    91,  1114,    74,    75,    95,  1786,    97,
      74,    75,   931,   121,  2061,    79,  2063,   125,   127,  1506,
     129,   119,    86,   127,  1602,  1603,   945,   125,   119,   815,
     816,   121,   951,   557,   125,   559,   121,  1524,   126,   141,
    1198,   123,  1152,   125,  1414,  1415,   110,   111,  1418,  1419,
     127,   153,   121,  1423,  1424,   157,  1166,  1167,  1168,  1169,
      79,   121,   121,   127,   120,  1435,   125,  1465,  1419,  1439,
    1440,   123,  1850,  1443,  1111,   787,   788,  1114,  2125,  1449,
    2127,  1451,  2129,   121,  1454,  1569,   121,   125,  1458,   125,
     125,   110,   111,  1463,  1464,  1465,   153,    74,    75,     1,
     157,     3,    79,   127,   123,   817,   818,     1,   127,    86,
     123,   123,   346,   125,   118,  1152,  1486,   307,  1488,  2166,
    2167,  1491,  2169,   313,  1494,   785,   786,  1497,  2028,  1166,
    1167,  1168,  1169,   110,   111,  1054,  1506,  2184,   118,   127,
     880,   129,  1512,  1513,   121,  2140,   118,  1517,  1518,  1519,
    1520,   124,     3,  2200,   125,   815,   816,  1765,  1766,   127,
    1768,  1769,    88,    89,    90,  1773,  1774,  1775,  1776,   415,
     127,     1,   129,     3,   276,   787,   788,    28,   134,   135,
      74,    75,   132,   417,   286,    79,   288,     1,     1,     3,
       3,   132,    86,   383,   132,   385,  1566,  1567,   127,  1569,
     940,   131,  1793,  1794,  2104,   817,   818,  1577,   127,     1,
       6,     3,     8,     9,    14,    15,   110,   111,  1588,   125,
     123,   961,   125,    74,    75,   125,  1804,  1805,    79,   123,
     124,   125,  1719,   125,   127,    86,   129,  1724,  1608,  1609,
       1,   125,     3,  1721,  1608,  1609,   126,     1,  1618,     3,
    1620,  1621,   127,     1,  1624,     3,  1620,   123,  1628,   110,
     111,   507,  1632,   120,     1,  1635,     3,   129,  1008,  1721,
     123,   120,   125,  1569,    10,    11,   127,    73,   120,  1541,
    1631,  1577,   127,  1488,   129,  1531,   123,  1533,    84,  1531,
    1660,  1533,   123,     3,    14,    15,  1647,  1667,   911,   912,
     911,   912,  1789,   120,  1912,  1913,  1914,  1915,  1916,  1917,
    1918,  1919,   120,   109,   541,   542,   562,   123,    28,   421,
     123,     1,   118,   127,   660,   661,   660,   661,  1608,  1609,
     432,  1821,   123,  1823,   123,   131,   118,  1795,   134,   135,
     136,  1621,   121,  1830,  1624,   126,  1608,  1609,   132,  1719,
     127,  1721,  1632,   131,  1724,    99,   100,  1847,  1620,  1849,
     132,  1512,  1513,   132,    74,    75,  1850,   840,   841,    79,
     132,   118,  1742,   563,  1744,  1745,    86,   132,   127,  1821,
     132,  1823,   484,  1588,  1912,  1913,  1914,  1915,  1916,  1917,
    1918,  1919,   123,   126,    74,    75,   125,   118,   126,    79,
     110,   111,   126,   121,  2012,  1847,    86,  1849,   121,   121,
    1780,    56,   121,   132,   120,  1566,  1567,   127,   132,  1789,
     121,   132,   121,  1793,  1794,   129,  1796,   129,   120,   129,
     110,   111,   120,   623,   120,     3,   268,   120,  1808,   123,
     120,   121,   123,   118,   123,   125,  1186,   118,  1188,   123,
     974,  1821,   121,  1823,     1,   121,  1826,   121,   118,   120,
     118,  1765,  1766,  1950,  1768,  1769,   120,   126,   131,  1773,
    1774,  1775,  1776,   121,   121,   121,   131,  1847,   129,  1849,
    1850,   125,   125,   121,  2012,   121,   121,   129,   129,   129,
       3,   121,   121,   121,   126,  2144,   123,   743,  1608,  1609,
     124,   121,  1872,  1873,  1874,  1875,    74,    75,  1878,   121,
    1620,    79,  1882,  1883,  1878,  1885,   121,  1887,    86,  1043,
    1044,   132,   132,  1047,  1048,  1049,   132,    74,    75,  1899,
     121,  2021,    79,   129,   129,    56,   120,  1742,  1908,    86,
     121,  1911,   110,   111,   120,   120,  1465,   383,   118,   385,
     129,  1902,   129,  1904,  1850,   129,   129,   791,   792,   127,
     794,    74,    75,   110,   111,  2144,    79,   121,   121,  1488,
     121,  1608,  1609,    86,   132,   121,   123,   121,   125,  2021,
    1950,   121,  1952,  1620,   121,   819,   820,   821,   822,   132,
     131,   693,    11,   132,    74,    75,   132,   110,   111,    79,
     131,   123,  1882,  1883,   127,   437,    86,   120,  1912,  1913,
    1914,  1915,  1916,  1917,  1918,  1919,  1878,   124,   864,   127,
     129,  1826,   123,   129,   124,   871,   124,   120,   862,   863,
     110,   111,   123,   879,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,   890,   532,   127,   121,   121,  2019,
    2020,  2021,  2022,  2023,  2024,   121,  2026,    44,    45,    64,
    1184,  1185,   132,  2033,  2034,  2035,  2036,   132,   132,  1588,
     132,   526,   132,   132,  2044,  2133,  2134,   132,   132,   121,
     121,    64,   121,  2053,   121,  2055,   121,    74,    75,  2053,
     123,  2055,    79,   121,  2064,  2065,   132,   123,   132,    86,
     140,   132,   132,   143,   127,   123,   123,     0,  2012,   123,
    2061,  1451,  2063,   121,   123,   474,   156,   123,   158,   123,
     160,   123,   123,   110,   111,   123,   123,   563,   962,   123,
    2100,  2101,   123,   120,   123,   474,   474,  2107,  2108,   474,
     124,  2111,   932,  2113,   474,     0,  2116,  1952,    41,  2174,
    2120,  1491,   980,  1520,  1494,   862,  2120,   286,   286,   917,
     319,   972,   319,   726,  2134,    58,  2136,  1486,  1878,   422,
    2140,   263,    65,  2124,  2125,   432,  2127,   879,  2129,   312,
    1831,   971,  2152,   732,  2124,    99,    92,   623,   890,    82,
     268,  2053,    85,  2055,    92,   100,   628,    92,    91,    92,
      -1,  1780,    -1,    -1,  2174,  2175,    99,   100,  1054,  2179,
      -1,    -1,    -1,    -1,    -1,  2166,  2167,    -1,  2169,   112,
    2190,    -1,   115,    -1,    -1,    -1,    -1,    82,   660,   661,
     662,   663,    -1,  2184,   127,    -1,    -1,    92,    -1,    -1,
      -1,  1878,   135,    -1,    99,   100,    -1,   140,   141,  2200,
     143,    -1,     3,    -1,    -1,    -1,    -1,    -1,  2120,   714,
     153,    -1,   155,   156,   157,   158,    -1,   160,  2019,  2020,
      -1,  2022,  2023,    37,    -1,   762,    -1,    28,  1068,    -1,
      44,    45,  2033,  2034,  2035,  2036,    37,    -1,    -1,    -1,
      -1,   746,   185,   186,    -1,    -1,    -1,    -1,   753,    -1,
      -1,   756,    74,    75,   197,    -1,    -1,    79,    -1,    -1,
      74,    75,    -1,    -1,    86,    79,    -1,   210,    -1,    -1,
      -1,   808,    86,    74,    75,    -1,   219,    -1,    79,  1119,
      -1,     3,    -1,    -1,    -1,    86,    -1,    -1,   110,   111,
      -1,    -1,    -1,  2053,    -1,  2055,   110,   111,    -1,  2100,
    2101,    -1,   124,   117,    -1,    -1,    28,    -1,    -1,   110,
     111,  1207,    -1,    -1,   219,    -1,   117,    -1,    -1,   120,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,  1224,    -1,
     131,    -1,    -1,   276,    -1,    -1,    -1,    -1,  1512,  1513,
       3,  1225,    -1,   286,   287,   288,    -1,    -1,    -1,    74,
      75,    -1,    74,    75,    79,    -1,    -1,    79,    -1,    -1,
    2120,    86,    -1,   306,    86,    28,  2053,    -1,  2055,   312,
      -1,   276,   462,   463,    37,    -1,    -1,    -1,   321,    -1,
      -1,   286,    -1,   288,    -1,   110,   111,  1227,   110,   111,
      -1,    -1,  1566,  1567,     3,    -1,   121,    -1,   488,   489,
      -1,    -1,    -1,  1793,  1794,   462,   463,    -1,    -1,  1249,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    28,
     510,   511,    -1,    86,    -1,   515,   516,    -1,    37,   519,
     520,   488,   489,  2120,    -1,   378,    -1,    -1,    -1,    -1,
     383,    -1,   385,    -1,    -1,    -1,   932,   110,   111,    -1,
      -1,    -1,    -1,   510,   511,    -1,    -1,   120,   515,   516,
      -1,   943,   519,   520,    -1,    74,    75,   557,   131,   559,
      79,    -1,   415,    -1,   417,   418,    -1,    86,   421,   422,
       3,  1018,    -1,    -1,   427,   971,    -1,    -1,   431,   432,
      -1,   434,    -1,    -1,    -1,  1000,  1001,  1002,    -1,    -1,
      -1,   110,   111,    -1,    -1,    28,    -1,    -1,   117,    -1,
     415,   120,   121,    -1,    37,    -1,    -1,    -1,    -1,   462,
     463,    -1,    -1,    -1,   467,   468,    -1,    -1,    -1,    -1,
      -1,   474,    -1,    -1,    -1,    -1,   479,    -1,    74,    75,
    1436,   484,    -1,    79,    -1,   488,   489,    -1,    -1,    -1,
      86,    74,    75,    -1,    -1,  1439,    79,    -1,    -1,  1443,
      -1,    -1,   467,    86,   507,    -1,    -1,   510,   511,    -1,
      44,    45,   515,   516,   110,   111,   519,   520,    -1,    -1,
      -1,   117,  1068,   526,   120,    -1,    -1,   110,   111,    -1,
     533,    -1,    -1,   536,   117,   131,    -1,   120,    -1,   141,
      74,    75,   507,  1108,    -1,    79,   129,    -1,    -1,   552,
      -1,   153,    86,    -1,   557,   157,   559,  1154,    -1,   562,
     563,  1158,  1506,    -1,  1161,    -1,  1163,     3,    -1,  1111,
      -1,    -1,  1114,  1119,    -1,    -1,   110,   111,    -1,   582,
    1524,  1123,   585,   117,   587,    -1,   589,  1821,    -1,  1823,
      -1,    -1,    28,   596,    -1,  1495,    -1,    74,    75,    74,
      75,    37,    79,    -1,    79,    -1,    -1,    -1,    -1,    86,
    1152,    86,    -1,  1847,    -1,  1849,    -1,  1214,    -1,    -1,
      -1,    -1,    -1,  1220,  1166,  1167,  1168,  1169,    -1,    -1,
      -1,    -1,  1588,   110,   111,   110,   111,    -1,    74,    75,
      -1,    -1,    -1,    79,   121,    -1,   121,    -1,    -1,    -1,
      86,    -1,    -1,    -1,    -1,    -1,    -1,   660,   661,   662,
     663,   263,     7,    -1,    -1,    10,    11,    12,    13,    14,
      15,    16,    17,    -1,   110,   111,    -1,    -1,    -1,    -1,
      -1,  1227,    -1,    -1,   120,   688,   689,   690,    74,    75,
     693,    -1,    -1,    79,    -1,    -1,    -1,   700,    -1,    -1,
      86,    -1,    -1,  1249,   306,  1270,  1271,    -1,    -1,    -1,
     312,   714,  1277,  1278,    -1,    -1,  1281,  1282,   721,   722,
     723,    -1,   725,   726,   110,   111,    -1,    -1,   693,   732,
      -1,   117,    -1,    -1,   120,   700,    -1,    -1,    -1,    -1,
     743,    -1,    -1,   746,    -1,    -1,    -1,    -1,    -1,    -1,
     753,    -1,    -1,   756,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   911,   912,    -1,    -1,    -1,    -1,   732,    -1,    -1,
      -1,    -1,    -1,   118,   119,  1719,    44,    45,    -1,    -1,
    1724,    -1,    -1,   128,    -1,  2019,  2020,  2021,  2022,  2023,
      -1,    -1,   137,   138,   139,   140,   141,    -1,    -1,  2033,
    2034,  2035,  2036,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    -1,    86,   421,
      -1,    -1,    -1,  1723,   974,  1725,    -1,    -1,    -1,    -1,
     432,     3,    -1,   836,    -1,    -1,   839,   840,   841,  1739,
    1740,    -1,   110,   111,    -1,  1789,    -1,    -1,    -1,    -1,
      -1,     0,   120,    -1,    -1,    -1,    28,    -1,    -1,   862,
     863,   864,    -1,    -1,    -1,    37,  2100,  2101,   871,    -1,
    1826,   836,    -1,    -1,    -1,    -1,   879,   880,    -1,    -1,
      -1,    -1,   484,    -1,   887,    -1,  1830,   890,    -1,   892,
      -1,   894,    -1,  1043,  1044,    -1,    -1,  1047,  1048,  1049,
      -1,    -1,    74,    75,    -1,    -1,   871,    79,    -1,    -1,
      -1,    -1,    -1,    -1,    86,   880,    -1,    -1,    -1,     3,
    1485,    -1,   887,    -1,    -1,    -1,  1043,  1044,    -1,   894,
    1047,  1048,    -1,    82,   937,    -1,    -1,    -1,   110,   111,
      -1,    -1,   945,    92,    28,   117,    -1,    -1,   120,  1495,
      99,   100,    -1,    37,    38,    -1,    -1,    -1,   961,   962,
    1557,    -1,    -1,    -1,    -1,    -1,   969,   970,    -1,    -1,
      -1,   974,    -1,    -1,    -1,    -1,     1,   980,     3,    -1,
     945,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,   141,    -1,    -1,    79,   961,  1000,  1001,  1002,
      -1,    -1,    86,    28,   153,  1008,  1950,    -1,   157,    -1,
      -1,    -1,    37,    38,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    -1,   110,   111,    -1,    -1,
      -1,    -1,    -1,   117,  1184,  1185,   120,  1602,  1603,    -1,
    1043,  1044,    -1,    -1,  1047,  1048,  1049,    -1,    -1,    74,
      75,  1951,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
    1960,    86,    -1,    -1,  1067,  1068,  1608,  1609,    -1,  1072,
      -1,    -1,    -1,    -1,    -1,  1078,  1618,    -1,  1620,  1621,
      -1,  1084,  1624,    -1,    -1,   110,   111,  1090,    -1,    -1,
    1632,    -1,   117,  1635,    -1,   120,    -1,    -1,   123,    -1,
     125,   126,    -1,    -1,    -1,  1108,    -1,    -1,  1111,    -1,
      -1,  1114,    -1,    -1,    -1,    -1,  2016,  2017,    -1,   721,
     722,    -1,    -1,   725,   726,   118,   119,   276,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   128,    -1,   286,    -1,   288,
     133,   134,   135,    -1,   137,   138,   139,   140,   141,  1152,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,    -1,
      -1,    -1,  1759,  1166,  1167,  1168,  1169,  1764,    -1,    -1,
    1767,     0,    -1,    -1,    -1,    -1,     1,  1723,     3,  1725,
      -1,  1184,  1185,    -1,    -1,    -1,  1189,    -1,  1191,    -1,
      -1,    -1,    -1,  1739,  1740,  1198,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,  1207,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1224,  1225,  1226,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1198,  1831,    -1,    -1,    -1,    -1,  1804,
    1805,  1244,  1207,    -1,    -1,  1842,    -1,    -1,  1251,    74,
      75,    -1,    -1,    82,    79,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    -1,    92,    -1,    -1,    -1,  1270,  1271,     0,
      99,   100,   421,    -1,  1277,  1278,    -1,   879,  1281,  1282,
      -1,    -1,    -1,   432,    -1,   110,   111,    -1,   890,    -1,
      -1,    -1,   117,    -1,    -1,   120,    -1,    -1,   123,    -1,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    -1,    -1,   153,    -1,    -1,    -1,   157,    -1,
    1872,  1873,  1874,  1875,    -1,   484,  1878,    -1,    -1,    -1,
    1882,  1883,    -1,  1885,    -1,  1887,    -1,    -1,    -1,    -1,
      81,    82,    83,    -1,    -1,    -1,    -1,  1899,    -1,    90,
      -1,    92,  1512,  1513,    -1,    -1,    -1,    -1,    99,   100,
      -1,     1,    -1,     3,     4,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1512,  1513,    -1,    28,   130,
     131,   132,   133,   134,    -1,  1951,  1008,    -1,    -1,   140,
      -1,    -1,   143,    -1,  1960,    -1,  1566,  1567,    -1,    -1,
    1423,  1424,    -1,   533,    -1,   156,   536,   158,    -1,   160,
      -1,  2028,    -1,    -1,    -1,    65,  1439,    -1,    -1,    -1,
    1443,    71,    72,    -1,    -1,    -1,    -1,   276,    -1,  1566,
    1567,   182,   183,   184,    -1,    85,    -1,   286,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
    2016,  2017,   102,   103,   104,   105,   106,   107,   108,    -1,
      -1,    -1,  1485,    -1,    -1,  1488,    -1,   218,   219,    -1,
     120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,   131,  2044,  1506,    -1,    -1,    -1,  2104,    -1,  1512,
    1513,  2053,    -1,  2055,  1517,  1518,  1519,  1520,    -1,    -1,
      -1,    -1,    -1,  1488,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,    -1,    -1,    -1,   693,   276,   131,    -1,    -1,    -1,
     660,   661,   662,   663,    -1,   286,    -1,   288,    -1,    -1,
      -1,    -1,    -1,  1566,  1567,  2107,  2108,    -1,    -1,  2111,
      -1,  2113,    -1,    -1,  2116,    -1,    -1,    -1,  2120,    -1,
     690,    -1,    -1,    -1,    -1,  1588,    -1,    -1,    -1,    -1,
      -1,    -1,   421,    -1,    -1,    -1,   324,   182,    -1,  1602,
    1603,    -1,    -1,   432,    -1,  1608,  1609,    -1,    -1,    -1,
    2152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1621,    -1,
      -1,  1624,  1224,  1588,    -1,    -1,    -1,    -1,    -1,  1632,
      -1,    -1,    -1,    -1,   219,    -1,    -1,  2179,    -1,    -1,
      -1,    -1,  1244,    -1,    -1,    -1,    -1,    -1,    -1,  1251,
      -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,    -1,    -1,
     391,   392,   393,    -1,  1667,    -1,    -1,    -1,    -1,    -1,
      -1,  1821,    -1,  1823,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   415,    -1,    -1,    -1,    -1,    -1,
      -1,   422,    -1,    -1,    -1,    -1,    -1,  1847,    -1,  1849,
      -1,   286,   433,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1719,    -1,  1721,    -1,
      -1,  1724,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     879,   462,   463,    -1,    -1,    -1,   467,    -1,    -1,  1742,
     471,   890,    -1,   474,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   483,    -1,    -1,    -1,    -1,   488,   489,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   507,    -1,    -1,   510,
     511,    -1,    -1,    51,   515,   516,  1789,    -1,   519,   520,
      -1,    -1,   523,   524,   525,    -1,    -1,    -1,    -1,    -1,
      -1,  1804,  1805,    -1,   532,    -1,   391,    -1,    -1,    -1,
     541,   542,   397,    -1,    82,    83,    -1,    -1,  1821,    -1,
    1823,    -1,    90,  1826,    -1,    -1,   557,    -1,   559,    -1,
      -1,   562,    -1,   564,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1847,    -1,  1849,    -1,   579,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1826,   130,   131,   693,    -1,    -1,   595,    -1,  2019,
    2020,  2021,  2022,  2023,    -1,    -1,    -1,    -1,    -1,  1882,
    1883,    -1,   467,  2033,  2034,  2035,  2036,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     628,    -1,  2019,  2020,    -1,  2022,  2023,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   182,    -1,  2033,  2034,  2035,  2036,
      -1,    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   660,   661,   662,   663,    -1,    -1,    -1,    -1,
      -1,    -1,   527,    -1,    -1,   530,    -1,  1950,    -1,  1952,
    2100,  2101,    -1,    -1,    -1,    -1,   687,    -1,   543,    -1,
     228,    -1,   693,   231,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   564,
      -1,    -1,    -1,  2100,  2101,    -1,    -1,    -1,    -1,    -1,
     721,    -1,   577,    -1,   725,   263,    -1,    -1,    -1,   727,
      -1,  1111,    -1,   731,  1114,    -1,    -1,    -1,   276,    -1,
      -1,    -1,   743,    -1,    -1,    -1,  2019,  2020,  2021,  2022,
    2023,  2024,    -1,  2026,    -1,    -1,    -1,    -1,    -1,    -1,
    2033,  2034,  2035,  2036,   762,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1152,    -1,    -1,    -1,    -1,    -1,   776,    -1,
     879,    -1,    -1,    -1,    -1,    -1,  1166,  1167,  1168,  1169,
      -1,   890,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   803,    -1,    -1,    -1,  1189,
     808,  1191,    -1,   811,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2100,  2101,    -1,
      -1,    -1,   687,   831,    -1,    -1,    -1,    -1,   693,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   864,    -1,    -1,    -1,    -1,    -1,    -1,
     871,    -1,    -1,    -1,    -1,    -1,    -1,   878,   879,   880,
      -1,    -1,    -1,    -1,    -1,    -1,   887,    -1,    -1,   890,
      -1,   892,    -1,    -1,    -1,   433,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     931,   140,    -1,   471,   143,    -1,    -1,    -1,    -1,   940,
      -1,    -1,    -1,    -1,   945,    -1,   633,   156,    -1,   158,
     951,   160,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     961,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   974,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   984,    -1,   523,   524,   525,    -1,   527,
      -1,    -1,   530,    -1,    -1,    -1,    -1,    -1,    -1,     0,
      -1,    -1,    -1,   541,   542,   543,    -1,  1008,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1018,    -1,    -1,    -1,   562,   880,    -1,    -1,    -1,    -1,
      -1,    -1,   887,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1043,  1044,    -1,    -1,  1047,  1048,  1049,    -1,
      51,    -1,    -1,  1054,  1055,    -1,    -1,    -1,    -1,   268,
      -1,    -1,    -1,    -1,  1065,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   762,    -1,    -1,    -1,    -1,
      -1,    82,    83,    -1,    -1,   940,    -1,    -1,    -1,    90,
     945,    92,    -1,    -1,    -1,    -1,    -1,    -1,    99,   100,
      -1,    -1,    -1,    -1,    -1,    -1,   961,    -1,   795,   796,
     797,   798,   799,  1111,    -1,   802,  1114,    -1,    -1,    -1,
      -1,   808,    -1,    -1,    -1,  1123,    -1,    -1,    -1,   130,
     131,    -1,    -1,    -1,    -1,    -1,   823,   824,   825,   826,
     827,    -1,    -1,   830,    -1,    -1,    -1,  1145,  1146,   687,
      -1,    -1,    -1,  1008,  1152,    -1,  1154,    -1,    -1,    -1,
    1158,    -1,    -1,  1161,    -1,  1163,    -1,    -1,  1166,  1167,
    1168,  1169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   182,    -1,  1184,  1185,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1055,    -1,    -1,    -1,    -1,    -1,  1207,    -1,    -1,  1064,
      -1,  1066,    -1,    -1,    -1,    -1,  1214,    -1,    -1,    -1,
      -1,    -1,  1220,  1224,    -1,  1226,    -1,   228,  1608,  1609,
     231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1621,    -1,  1244,  1624,    -1,    -1,    -1,    -1,    -1,
    1251,    -1,  1632,   462,   463,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   276,  1274,    -1,    -1,   488,
     489,    -1,    -1,    -1,    -1,   286,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   510,   511,    -1,    -1,    -1,   515,   516,    -1,    -1,
     519,   520,    -1,    -1,    -1,    -1,    -1,   526,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1186,    -1,  1188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
     559,    -1,    -1,    -1,   892,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,    -1,    -1,   931,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
     948,    -1,   950,   951,    -1,    85,    86,    87,    -1,   628,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,   433,    -1,    -1,  1436,    -1,    -1,    -1,  1126,
     110,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
    1451,   660,   661,   662,   663,    -1,   126,  1458,    -1,    -1,
      -1,    -1,    -1,    -1,  1465,    -1,    -1,  1154,    -1,    -1,
      -1,    -1,    -1,    -1,  1161,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1486,    -1,  1488,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1882,  1883,    -1,    -1,    -1,    -1,  1195,    -1,
    1197,  1512,  1513,    -1,    -1,    -1,  1054,  1055,    -1,    -1,
      -1,    -1,   523,   524,   525,    -1,   527,  1214,  1526,   530,
      -1,    -1,    -1,  1220,    -1,    -1,    -1,   746,    -1,    -1,
     541,   542,   543,    -1,   753,    -1,    -1,   756,    -1,    -1,
      -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,    -1,  1557,
      -1,   562,    -1,    -1,    -1,  1566,  1567,    -1,  1569,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   135,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1588,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1451,    -1,    -1,    -1,
      -1,    -1,    -1,  1458,    -1,    -1,    -1,    -1,    -1,    -1,
    1608,  1609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1618,    -1,  1620,  1621,    -1,    -1,  1624,    -1,    -1,    -1,
      -1,  1486,    -1,  1488,  1632,    -1,  1491,  1635,    -1,  1494,
     197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1186,    -1,
    1188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,    -1,    -1,    -1,
      -1,    -1,   693,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   911,   912,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1713,    -1,  1569,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1577,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1588,    -1,    -1,  1734,    -1,    -1,    -1,
      -1,   298,    -1,    -1,    -1,    -1,   303,   304,  1746,    -1,
     307,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,    -1,
      -1,  1759,    -1,    -1,    -1,   974,  1764,   324,    -1,  1767,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   341,    -1,    -1,    -1,    -1,   346,
      -1,  1000,    -1,  1002,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1821,    -1,  1823,    -1,    -1,  1826,   383,    -1,   385,    -1,
      -1,    -1,    -1,  1831,  1043,  1044,    -1,    -1,  1047,  1048,
    1049,    -1,    -1,    -1,  1842,    -1,  1847,    -1,  1849,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1859,    -1,
     417,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1872,  1873,  1874,  1875,    -1,    -1,
    1878,    -1,    -1,    -1,  1882,  1883,    -1,  1885,    -1,  1887,
      -1,   892,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1108,
      -1,  1899,  1111,    -1,    -1,  1114,    -1,    -1,    -1,    -1,
      -1,  1909,  1910,    -1,  1123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1465,    -1,    -1,
     931,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1793,  1794,
      -1,  1796,    -1,  1152,    -1,    -1,    -1,    -1,    -1,    -1,
     951,    -1,    -1,    -1,    -1,    -1,    -1,  1166,  1167,  1168,
    1169,    -1,    -1,    -1,    -1,   140,    -1,    -1,   143,   526,
      -1,    -1,    -1,    -1,    -1,  1184,  1185,    -1,    -1,    -1,
      -1,   156,    -1,   158,    -1,   160,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1850,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   563,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2019,  2020,
    2021,  2022,  2023,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2028,  1569,  2033,  2034,  2035,  2036,    -1,    -1,   595,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2044,    -1,    -1,    -1,
      -1,    -1,    -1,  1054,  1055,  2053,    -1,  2055,    -1,    -1,
      -1,    -1,  1271,    -1,    -1,    -1,   623,    -1,    -1,  1278,
      -1,    -1,  1759,  1282,    -1,    -1,    -1,  1764,  1765,  1766,
    1767,  1768,  1769,    -1,    -1,    -1,  1773,  1774,  1775,  1776,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2100,
    2101,    -1,    -1,    -1,    -1,    -1,  2104,    -1,    -1,  2107,
    2108,    -1,    -1,  2111,    -1,  2113,    -1,    -1,  2116,    -1,
      -1,    -1,  2120,    -1,    -1,    -1,    -1,    -1,  2126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,    -1,    -1,
      -1,    -1,    -1,   700,    -1,    -1,  2144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2152,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     727,    -1,    -1,    -1,   731,   732,    -1,    -1,    -1,    -1,
      -1,  2179,    -1,    -1,    -1,  1186,    -1,  1188,    -1,   746,
      -1,    -1,    -1,    -1,    -1,    -1,   753,    -1,    -1,   756,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   776,
      -1,    -1,    -1,    -1,    -1,   782,   783,   784,   785,   786,
     787,   788,    -1,    -1,   791,   792,    -1,   794,   795,   796,
     797,   798,   799,   800,   801,    -1,   803,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   811,   812,   813,   814,   815,   816,
     817,   818,   819,   820,   821,   822,   823,   824,   825,   826,
     827,   828,   829,    -1,   831,    -1,  1485,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   462,   463,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   474,
      -1,    -1,    -1,  1512,  1513,   862,   863,    -1,    -1,    -1,
      -1,    -1,  1850,   488,   489,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1531,    -1,  1533,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   510,   511,    -1,    -1,    -1,
     515,   516,    -1,    -1,   519,   520,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1566,  1567,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   930,    -1,   932,    -1,    -1,    -1,    -1,
      -1,    -1,   557,     1,   559,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,  1603,    -1,    -1,    -1,    -1,  1608,
    1609,    -1,    -1,    -1,    -1,   962,    -1,    -1,    -1,  1618,
      28,  1620,  1621,    -1,   971,  1624,    -1,    -1,    -1,    37,
      -1,    -1,    -1,  1632,    -1,    -1,  1635,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1000,    -1,  1002,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,  1465,    -1,    84,    85,    86,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      98,     8,     9,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    28,   120,   121,   122,    -1,    -1,    -1,    -1,    -1,
      -1,  1068,   130,   131,    -1,   133,   134,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,  1108,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,
      -1,    -1,  1119,    -1,    -1,    -1,   628,    -1,  1569,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,  1145,  1146,
     117,    -1,    -1,   120,   121,   122,  1805,    -1,   125,    -1,
     662,   663,    -1,   130,   131,   132,   133,   134,   135,   136,
      -1,    -1,  1821,    -1,  1823,   197,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1847,    -1,
    1849,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,  1872,  1873,  1874,  1875,    -1,  1225,  1878,
    1227,    -1,    -1,  1882,  1883,    28,  1885,    -1,  1887,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1899,    -1,  1249,    -1,    -1,    -1,    -1,    -1,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    1267,    -1,    65,    -1,  1271,    -1,    -1,  1274,    71,    72,
      73,  1278,    -1,    -1,    -1,  1282,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    -1,    88,    89,    90,    -1,    -1,
      -1,    -1,   324,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,
     123,    -1,   125,    -1,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,   974,
      -1,   383,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,
    2019,  2020,  2021,  2022,  2023,    -1,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2033,  2034,  2035,  2036,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2044,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2053,    -1,  2055,    -1,    -1,  1850,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1043,  1044,
      -1,    -1,  1047,  1048,  1049,    -1,    -1,    -1,   197,    -1,
      -1,    -1,  1439,    -1,    -1,    -1,  1443,    -1,    -1,    -1,
      -1,  2100,  2101,    -1,    -1,    -1,    -1,    -1,  2107,  2108,
      -1,    -1,  2111,    -1,  2113,    -1,    -1,  2116,    -1,    -1,
      -1,  2120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1485,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1495,    -1,
      -1,    -1,    -1,  2152,   526,    -1,    -1,    -1,    -1,  1506,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1524,    -1,  1526,
    2179,    -1,    -1,    -1,  1531,    -1,  1533,    -1,    -1,   298,
      -1,   563,    -1,    -1,   303,   304,    -1,    -1,   307,    -1,
      -1,    -1,    -1,  1550,   313,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   324,    -1,    -1,    -1,  1184,
    1185,    -1,    -1,   595,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   341,    -1,    -1,    -1,    -1,   346,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   623,    -1,    -1,    -1,    -1,  1603,    -1,    -1,  1111,
      -1,    -1,  1114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1123,    -1,    -1,   383,    -1,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   417,    -1,
      -1,    -1,    -1,    -1,  1166,  1167,  1168,  1169,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   727,    -1,    -1,    -1,   731,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1719,    -1,   746,    -1,  1723,  1724,  1725,    -1,
      -1,   753,    -1,    -1,   756,    -1,    -1,  1734,    -1,    -1,
      -1,    -1,  1739,  1740,    -1,    -1,    -1,    -1,    -1,  1746,
      -1,    -1,    -1,    -1,   776,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,   526,  1765,  1766,
      -1,  1768,  1769,    -1,    -1,    -1,  1773,  1774,  1775,  1776,
      -1,   803,    28,    -1,    -1,    -1,    -1,    -1,    -1,   811,
      -1,    -1,  1789,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   563,    -1,    -1,    -1,  1805,   831,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,  1830,    -1,    -1,   595,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   623,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,    -1,    -1,    -1,    -1,    -1,    -1,  1512,  1513,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   930,    -1,
     932,    -1,  1909,  1910,    -1,  1912,  1913,  1914,  1915,  1916,
    1917,  1918,  1919,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   694,    -1,    -1,    -1,    -1,
      -1,   700,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   971,
      -1,  1566,  1567,  1950,  1951,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1960,    -1,    -1,    -1,    -1,   727,    -1,
      -1,    -1,   731,   732,    -1,    -1,    -1,    -1,  1000,    -1,
    1002,    -1,    -1,    -1,    -1,    -1,    -1,   746,    -1,    -1,
      -1,    -1,    -1,    -1,   753,    -1,    -1,   756,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2012,    -1,   776,    -1,  2016,
    2017,    -1,    -1,   782,   783,   784,   785,   786,   787,   788,
      -1,    -1,   791,   792,    -1,   794,   795,   796,   797,   798,
     799,   800,   801,    -1,   803,    -1,  1068,    -1,    -1,    -1,
      -1,    -1,   811,   812,   813,   814,   815,   816,   817,   818,
     819,   820,   821,   822,   823,   824,   825,   826,   827,   828,
     829,    -1,   831,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1119,    -1,    -1,
      -1,    -1,    -1,   862,   863,    -1,  1608,  1609,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1618,    -1,  1620,  1621,
      -1,    -1,  1624,  1145,  1146,    -1,    -1,    -1,    -1,  2126,
    1632,    -1,    -1,  1635,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2144,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   930,     0,   932,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   962,    -1,  1227,  1821,    -1,  1823,    -1,
      -1,    -1,   971,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,    -1,    -1,    -1,  1249,    -1,    -1,
      -1,    -1,  1847,    -1,  1849,    -1,    -1,    -1,    -1,    -1,
      -1,  1000,    85,  1002,    -1,    -1,    -1,    -1,    -1,  1271,
      -1,    -1,  1274,    -1,    82,    -1,  1278,    -1,    -1,    -1,
    1282,    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1068,
      -1,    -1,   155,   141,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   153,    -1,    -1,    -1,   157,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,    -1,
    1119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1872,  1873,  1874,  1875,    -1,    -1,  1878,    -1,    -1,    -1,
    1882,  1883,    -1,  1885,    -1,  1887,  1145,  1146,    -1,    -1,
      -1,   219,    -1,    -1,    -1,    -1,    -1,  1899,    -1,    -1,
      -1,    -1,    -1,    -1,  2019,  2020,  2021,  2022,  2023,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2033,  2034,
    2035,  2036,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   287,
     288,    -1,    -1,  1485,    -1,    -1,  1225,    -1,  1227,    -1,
      -1,    -1,    -1,  1495,    -1,    -1,    -1,    -1,   306,    -1,
      -1,    -1,    -1,    -1,   312,  2100,  2101,    -1,    -1,    -1,
    1249,    -1,    -1,   321,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1526,    -1,    -1,    -1,  1267,  1531,
      -1,  1533,  1271,    -1,    -1,  1274,    -1,    -1,    -1,  1278,
      -1,    -1,    -1,  1282,    -1,    -1,    -1,    -1,  1550,    -1,
      -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,
      -1,    -1,  2044,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2053,    -1,  2055,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,   417,   418,    -1,    -1,    -1,   422,
      -1,  1603,    -1,    -1,    -1,    -1,    -1,   415,   431,    28,
      -1,   434,    -1,   421,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   432,  2107,  2108,    -1,    -1,  2111,
      -1,  2113,    -1,    -1,  2116,    -1,    -1,    -1,  2120,    -1,
      -1,    -1,    -1,    -1,    -1,   468,    65,    -1,    -1,    -1,
      -1,   474,    71,    72,    73,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    84,    85,    -1,    -1,    -1,
    2152,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,  2179,   117,   507,
    1439,   120,   121,   122,  1443,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,   132,   133,   134,   135,   136,   526,    -1,
      -1,  1723,    -1,  1725,    -1,   533,    -1,    -1,   536,   552,
      -1,    -1,  1734,    -1,    -1,    -1,    -1,  1739,  1740,   562,
      -1,    -1,    -1,    -1,  1746,    -1,  1485,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1495,    -1,    -1,   582,
      -1,    -1,   585,    -1,   587,     1,   589,  1506,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1524,    -1,  1526,    -1,    -1,
      -1,    -1,  1531,    -1,  1533,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1805,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1550,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   635,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,
      -1,    -1,   660,   661,   662,   663,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,  1603,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
     688,   689,   690,    -1,    -1,   693,   122,   123,    -1,   125,
     126,   127,   700,    -1,   130,   131,    -1,   133,   134,   135,
     136,    -1,    -1,    -1,    -1,    -1,   714,  1909,  1910,    -1,
      -1,    -1,    -1,   721,   722,   723,    -1,   725,   726,    -1,
      -1,    -1,    -1,    -1,   732,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   743,    -1,    -1,   746,    -1,
      -1,    -1,    -1,    -1,    -1,   753,    -1,    -1,   756,  1951,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1960,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1719,    -1,    -1,    -1,  1723,  1724,  1725,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1734,    -1,    -1,    -1,    -1,
    1739,  1740,    -1,    -1,    -1,    -1,    -1,  1746,    -1,    -1,
      -1,    -1,    -1,    -1,  2016,  2017,   839,   840,   841,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1765,  1766,   836,  1768,
    1769,    -1,    -1,    -1,  1773,  1774,  1775,  1776,    -1,   862,
     863,   864,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1789,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   871,    -1,    -1,  1805,    -1,    -1,    -1,
      -1,   879,   880,    -1,    -1,    -1,    -1,    -1,    -1,   887,
      -1,    -1,   890,   891,   892,   268,   894,    -1,    -1,    -1,
      -1,  1830,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   937,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   945,   321,   962,
      -1,    -1,  2144,    -1,    -1,    -1,   969,   970,    -1,    -1,
      -1,    -1,    -1,   961,    -1,    -1,    -1,   980,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1909,  1910,    -1,  1912,  1913,  1914,  1915,  1916,  1917,  1918,
    1919,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1000,  1001,  1002,    -1,    -1,    -1,    -1,    -1,
    1008,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1950,  1951,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1960,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1067,    -1,    -1,    -1,    -1,  1072,
     433,    -1,    -1,    -1,    -1,  1078,    -1,    -1,    -1,    -1,
      -1,  1084,    -1,    -1,    -1,    -1,    -1,  1090,    -1,    -1,
      -1,    -1,    -1,  2012,    -1,    -1,    -1,  2016,  2017,    -1,
      -1,    -1,    -1,    -1,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1108,    -1,    -1,  1111,    -1,    -1,  1114,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    83,    -1,  1127,
      -1,    87,    -1,    -1,    -1,    -1,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    99,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1152,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,  1166,  1167,
    1168,  1169,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1189,    -1,  1191,    -1,    -1,    -1,  2126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1207,
      -1,    -1,  1225,  1226,    -1,  2144,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   181,  1224,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
       1,    -1,     3,     4,     5,     6,  1244,     8,     9,    -1,
      -1,    -1,    -1,  1251,    -1,    -1,    -1,    -1,    -1,    -1,
     633,    -1,    -1,   219,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,  1270,  1271,    -1,    -1,   649,    -1,    -1,  1277,
    1278,    -1,    -1,  1281,  1282,    -1,    -1,   660,   661,   662,
     663,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    -1,    -1,   263,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,
     276,    -1,    -1,    84,    85,    86,    -1,    88,    89,    90,
     286,    -1,   288,    -1,    -1,    -1,   709,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,   737,    -1,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   764,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1423,  1424,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1439,    -1,    -1,   802,
    1443,    -1,    -1,    -1,    -1,    -1,    -1,   810,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   830,    -1,   415,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   433,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1485,    -1,    -1,
    1488,    -1,    -1,  1506,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1517,  1518,  1519,  1520,    -1,    -1,
      -1,   467,    -1,    -1,   470,    -1,    -1,    -1,    -1,   892,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,   507,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,   525,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   541,   542,    -1,    -1,    -1,
    1588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1602,  1603,   562,    -1,   564,    65,
    1608,  1609,    -1,    -1,    -1,    71,    72,    73,    -1,   575,
      -1,    -1,    -1,  1621,    -1,    -1,  1624,    -1,    84,    85,
      -1,    -1,    -1,    -1,  1632,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,  1667,   611,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1719,    -1,  1721,    -1,
      -1,  1724,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     686,    -1,    -1,    -1,    -1,    -1,    -1,   693,  1111,    -1,
      -1,  1114,  1115,  1116,  1742,  1118,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1134,    -1,    -1,    -1,   721,    -1,    -1,  1141,   725,
      -1,    -1,    -1,    -1,    -1,    -1,  1789,    -1,    -1,  1152,
      -1,    -1,    -1,    -1,    -1,    51,  1159,   743,    -1,    -1,
      -1,  1164,    -1,  1166,  1167,  1168,  1169,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1804,  1805,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    83,    -1,    -1,
      -1,    -1,  1195,    -1,  1197,    -1,    -1,    -1,  1826,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1216,    -1,    -1,    -1,    -1,    -1,  1222,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,  1245,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1882,  1883,    -1,    -1,   324,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   341,    -1,    -1,   864,   865,
      -1,    -1,    -1,    91,    -1,   871,   182,    -1,    -1,  1292,
      -1,    -1,    -1,   879,   880,    -1,    -1,    -1,    -1,    -1,
      -1,   887,    -1,    -1,   890,   891,   892,  1950,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   219,  1952,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1344,    -1,    -1,    -1,   931,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   939,  1357,    -1,    -1,    -1,    -1,   945,
      -1,    -1,    -1,    -1,    -1,   951,    -1,   263,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   961,    -1,   185,   186,    -1,
     276,  2024,    -1,  2026,    -1,    -1,    -1,    -1,    -1,    -1,
     286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1408,    -1,    -1,    -1,    -1,
      -1,   219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1008,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1054,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,  1063,    -1,   287,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,   306,    -1,
      -1,   397,    -1,    -1,   312,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,   321,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   433,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,   121,   122,   123,   633,   125,    -1,
      -1,   467,    -1,   130,   131,    -1,   133,   134,   135,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1608,  1609,   415,    -1,    -1,
      -1,  1614,    -1,  1616,    -1,    -1,  1619,  1620,    -1,    -1,
      -1,  1207,  1625,  1626,    -1,  1628,    -1,   523,   524,   525,
      -1,   527,    -1,    -1,   530,  1638,    -1,  1640,  1224,    -1,
    1226,    -1,    -1,    -1,    -1,   541,   542,   543,  1234,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1244,   467,
      -1,    -1,    -1,    -1,    -1,  1251,   562,    -1,   564,  1672,
      -1,    -1,    -1,  1676,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   577,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1697,    -1,   762,    -1,    -1,   507,
      -1,    -1,    -1,  1706,    -1,    -1,    -1,    -1,    -1,    -1,
     776,    -1,     1,    -1,     3,     4,     5,     6,   526,     8,
       9,    -1,    -1,    -1,    -1,   533,    -1,    -1,   536,   795,
     796,   797,   798,   799,    -1,    -1,   802,   803,    -1,    28,
      -1,    -1,   808,    -1,    -1,   811,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   823,   824,   825,
     826,   827,    -1,    -1,   830,   831,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,   687,    -1,    -1,    -1,    84,    85,   693,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,   121,   122,   123,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,   133,   134,   135,   136,    -1,    -1,
    1436,    -1,   660,   661,   662,   663,    -1,  1860,    -1,    -1,
      -1,    -1,    91,    -1,  1450,    -1,    -1,    -1,    -1,    -1,
      -1,  1457,    -1,    -1,    -1,  1878,  1879,    -1,    -1,  1465,
     688,   689,   690,  1886,    -1,    -1,    -1,  1890,    -1,  1892,
      -1,    -1,   700,    -1,    -1,    -1,    -1,    -1,  1901,    -1,
    1486,    -1,  1488,    -1,    -1,    -1,   714,    -1,    -1,    -1,
      -1,    -1,    -1,   721,   722,   723,    -1,   725,   726,    -1,
      -1,    -1,    -1,    -1,   732,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   743,    -1,    -1,   746,    -1,
      -1,    -1,    -1,    -1,    -1,   753,    -1,    -1,   756,  1952,
      -1,    -1,    -1,    -1,    -1,    -1,   185,   186,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1568,    -1,   880,    -1,    -1,    -1,    -1,    -1,
     219,   887,    -1,    -1,    -1,    -1,   892,    -1,    -1,    -1,
      -1,    -1,  1588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   836,    -1,
      -1,    -1,    -1,    -1,   263,   931,    -1,   266,   267,   268,
      -1,    -1,  2045,  2046,   940,  2048,    -1,  2050,    -1,   945,
    2053,  2054,  2055,    -1,    -1,   951,    -1,    -1,   287,    -1,
    1126,    -1,    -1,   871,    -1,   961,    -1,    -1,    -1,    -1,
      -1,    -1,   880,    -1,    -1,    -1,    -1,   306,    -1,   887,
      -1,    -1,    -1,   312,   892,    -1,   894,    -1,  1154,    -1,
      -1,    -1,   321,    -1,    -1,  1161,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2109,    -1,    -1,  2112,
      -1,    -1,  1008,    -1,    -1,    -1,    -1,  2120,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1713,    -1,  1195,
      -1,  1197,    -1,    -1,    -1,    -1,    -1,   945,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,  1214,     8,
       9,    -1,  2155,   961,  1220,    -1,    -1,    -1,  1054,  1055,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1064,    28,
    1066,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   415,    -1,    -1,    -1,
      -1,    -1,  1000,  1001,  1002,    -1,    -1,    -1,    -1,  1785,
    1008,    -1,    -1,    -1,    -1,    -1,    65,    -1,  1274,    -1,
      -1,    -1,    71,    72,    73,    -1,   321,    -1,    -1,    -1,
      -1,  1807,    -1,    -1,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    98,
    1826,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
     129,   130,   131,    -1,   133,   134,   135,   136,   507,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1186,    -1,  1188,    -1,    -1,    -1,    -1,   526,    -1,    -1,
    1108,    -1,    -1,  1111,   533,    -1,  1114,   536,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,   433,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1152,    -1,  1932,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1166,  1167,
    1168,  1169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1189,    -1,  1191,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1207,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1224,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,    -1,    -1,
      -1,   660,   661,   662,   663,   307,  1244,    -1,    -1,    -1,
      -1,   313,    -1,  1251,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   688,
     689,   690,  1270,  1271,    -1,    -1,    -1,    -1,    -1,  1277,
    1278,   700,    -1,  1281,  1282,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   714,    -1,    -1,    -1,    -1,
      -1,    -1,   721,   722,   723,    -1,   725,   726,    -1,    -1,
      -1,    -1,    -1,   732,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   383,    -1,   385,   743,    -1,    -1,   746,    -1,    -1,
      -1,    -1,    -1,    -1,   753,    -1,    -1,   756,   633,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   649,    -1,    -1,    -1,   653,    -1,
      -1,    -1,    -1,    -1,    -1,  1451,    -1,    -1,    -1,    -1,
      -1,    -1,  1458,    -1,    -1,    -1,    -1,    -1,    -1,  1465,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1486,    -1,  1488,    -1,    -1,  1491,    -1,    -1,  1494,    -1,
      -1,    -1,    -1,    -1,   709,    -1,    -1,   836,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   723,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   737,   738,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   871,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   880,    -1,    -1,   526,    -1,    -1,    -1,   887,   764,
      -1,    -1,    -1,   892,    -1,   894,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1569,    -1,    -1,    -1,  1485,    -1,    -1,
    1488,  1577,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   563,  1588,  1759,    -1,    -1,    -1,   802,  1764,  1765,
    1766,  1767,  1768,  1769,    -1,   810,    -1,  1773,  1774,  1775,
    1776,    -1,    -1,    -1,    -1,    -1,   945,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   830,    -1,    -1,    -1,    -1,
      -1,    -1,   961,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   623,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,  1000,  1001,  1002,    -1,    -1,    -1,    -1,    -1,  1008,
    1588,    -1,    -1,    -1,    28,    -1,    -1,   892,    -1,    -1,
      -1,    -1,    -1,    -1,  1602,  1603,    -1,    -1,    -1,    -1,
    1608,  1609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1621,    -1,    -1,  1624,    -1,    -1,    -1,
      -1,    65,   694,    -1,  1632,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    85,    -1,    -1,    -1,    -1,  1912,  1913,  1914,  1915,
    1916,  1917,  1918,  1919,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,   746,    -1,   120,    -1,   122,  1108,
      -1,   753,  1111,   127,   756,  1114,   130,   131,   132,   133,
     134,   135,   136,    -1,    -1,    -1,    -1,  1793,  1794,    -1,
    1796,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1152,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1742,    -1,    -1,  1166,  1167,  1168,
    1169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1850,    -1,    -1,    -1,    -1,    -1,
    1189,    -1,  1191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1207,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1224,  1804,  1805,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1115,  1116,    -1,  1118,    -1,  1244,    -1,    -1,  1826,    -1,
      -1,  1126,  1251,    -1,  1129,    -1,    -1,    -1,    -1,  1134,
      -1,    -1,    -1,    -1,    -1,    -1,  1141,  1142,    -1,    -1,
      -1,  1270,  1271,    -1,    -1,    -1,    -1,    -1,  1277,  1278,
      -1,    -1,  1281,  1282,  1159,  1160,    -1,    -1,   930,  1164,
     932,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1882,  1883,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1195,    -1,  1197,    -1,    -1,    -1,    -1,    -1,    -1,   971,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1216,    -1,    -1,    -1,    -1,    -1,  1222,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1000,    -1,
    1002,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1245,    -1,    -1,    -1,  1952,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    -1,  1292,  1293,    -1,
      -1,    58,    -1,    -1,    -1,    -1,  1068,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    81,    82,    83,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,  1108,    -1,    -1,  1344,
      -1,  1346,    -1,    -1,    -1,    -1,    -1,  1119,    -1,    -1,
      -1,    -1,  1357,  1358,    -1,    -1,  1485,    -1,    -1,  1488,
      -1,    -1,    -1,   130,   131,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
     147,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,
      -1,    -1,    98,  1408,    -1,  1410,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,   182,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,   218,   219,    -1,    -1,  1227,    -1,    -1,    -1,  1588,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,  1602,  1603,    -1,    -1,  1249,    -1,  1608,
    1609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1621,    -1,    -1,  1624,   263,    -1,    -1,  1271,
      -1,    -1,    -1,  1632,    -1,    65,  1278,    -1,    -1,   276,
    1282,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,   286,
      -1,    -1,    -1,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,   132,   133,   134,   135,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1594,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1614,
    1615,  1616,  1617,  1742,  1619,  1620,    -1,    -1,    -1,    -1,
    1625,  1626,    -1,  1628,   391,  1630,    -1,    -1,    -1,    -1,
     397,    -1,    -1,  1638,  1639,  1640,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   433,  1672,    -1,  1674,
      -1,  1676,    -1,  1678,    -1,  1804,  1805,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1697,  1698,    -1,    -1,    -1,  1826,    -1,    -1,
     467,  1706,  1707,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1485,    -1,    -1,   483,    -1,    -1,    -1,
      -1,    -1,    -1,  1495,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1882,  1883,    -1,   523,   524,   525,  1531,
     527,  1533,    -1,   530,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   541,   542,   543,    -1,  1550,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   560,    -1,   562,    -1,   564,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
     577,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    85,    -1,  1952,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1603,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,  1860,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
     134,   135,   136,    -1,  1879,    -1,    -1,    -1,    -1,  1884,
      91,  1886,  1887,    -1,  1889,  1890,    -1,  1892,    -1,  1894,
      -1,    -1,    -1,    -1,    -1,  1900,  1901,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     687,    -1,    -1,    -1,    -1,    -1,   693,    -1,    -1,    -1,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   153,    -1,    -1,    -1,   157,  1952,    -1,    -1,
      -1,  1723,    -1,  1725,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1739,  1740,    -1,
      -1,    -1,    -1,    -1,   185,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1765,  1766,    -1,  1768,  1769,    -1,    -1,
      -1,  1773,  1774,  1775,  1776,    -1,    -1,    -1,   219,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1805,    -1,    -1,    -1,    -1,    -1,    -1,
    2045,  2046,    -1,  2048,  2049,  2050,    -1,    -1,    -1,  2054,
    2055,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   287,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   306,    -1,    -1,    -1,    -1,
      -1,   312,    -1,    -1,  2109,  2110,    -1,  2112,  2113,    -1,
      -1,   878,  2117,   880,    -1,    -1,    -1,    -1,    -1,    -1,
     887,    -1,    -1,    -1,    -1,   892,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,
    1912,  1913,  1914,  1915,  1916,  1917,  1918,  1919,    -1,    -1,
    2155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   931,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   940,    -1,    -1,    -1,    -1,   945,  1951,
      -1,    -1,    -1,   141,   951,    -1,    -1,    -1,  1960,    -1,
      -1,    -1,    -1,    -1,   961,   153,    -1,    -1,    -1,   157,
      -1,    -1,    -1,    -1,   415,    -1,    -1,    -1,    -1,    -1,
     421,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   432,    -1,    -1,    -1,    -1,    -1,   185,   186,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2012,  1008,    -1,    -1,  2016,  2017,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,   484,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1054,  1055,    28,
      -1,    -1,    -1,    -1,    -1,    -1,   507,  1064,    -1,  1066,
      -1,    -1,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,    -1,    -1,   526,    -1,    -1,    -1,    -1,
      -1,    -1,   533,    -1,    -1,   536,    65,    -1,    -1,   287,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    85,    -1,   306,    -1,
      -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,   121,   122,   123,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,   133,   134,   135,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1186,
      -1,  1188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   660,
     661,   662,   663,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   421,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   432,    -1,    -1,   688,   689,   690,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   714,    -1,    -1,    -1,    28,    -1,    -1,
     721,   722,    -1,    -1,   725,   726,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   746,    -1,    -1,    -1,    -1,
      -1,    -1,   753,    -1,    65,   756,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    91,    -1,    84,    85,    -1,    -1,    -1,   526,    -1,
      -1,    -1,    -1,    -1,    -1,   533,    -1,    98,   536,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
     121,   122,   123,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,   141,   133,   134,   135,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   153,    -1,   836,    -1,   157,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   185,   186,    -1,    -1,    -1,
     871,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   879,   880,
      -1,    -1,    -1,    -1,    -1,    -1,   887,    -1,    -1,   890,
      -1,    -1,    -1,   894,  1451,    -1,    -1,    -1,    -1,    -1,
      -1,  1458,    -1,    -1,    -1,    -1,    -1,    -1,  1465,    -1,
      -1,    -1,   660,   661,   662,   663,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1486,
      -1,  1488,    -1,    -1,  1491,    -1,    -1,  1494,    -1,    -1,
     688,   689,   690,   263,   945,    -1,   266,   267,   268,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
     961,     8,     9,    -1,    -1,    -1,   714,   287,    -1,    -1,
      -1,    -1,    -1,   721,   722,    -1,    -1,   725,   726,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   306,    -1,    -1,    -1,
      -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,   746,  1000,
    1001,  1002,    -1,    -1,    -1,   753,    -1,  1008,   756,    -1,
      -1,    -1,  1569,    -1,    -1,    -1,    -1,    -1,    65,    -1,
    1577,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,  1588,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,    -1,   122,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,   131,    -1,   133,   134,   135,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   421,    -1,    -1,    -1,    -1,    -1,  1108,    -1,    -1,
    1111,    -1,   432,  1114,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   879,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   890,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   484,  1166,  1167,  1168,  1169,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1189,    -1,
    1191,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,   526,    -1,    -1,    -1,
      -1,    -1,    -1,   533,    -1,    -1,   536,    -1,    -1,    -1,
      -1,    -1,    28,  1224,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1793,  1794,    -1,  1796,
      -1,    -1,    -1,  1244,    -1,    -1,    -1,    -1,    -1,    -1,
    1251,    -1,  1000,  1001,  1002,    -1,    -1,    -1,    -1,    65,
    1008,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,  1270,
    1271,    -1,    -1,    -1,    -1,    -1,  1277,  1278,    84,    85,
    1281,  1282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,  1850,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,   121,   122,   123,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     660,   661,   662,   663,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1108,    -1,    -1,  1111,    -1,    -1,  1114,    -1,   688,   689,
     690,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   714,    -1,    -1,    -1,    -1,    -1,
      -1,   721,   722,    -1,  1152,   725,   726,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1166,  1167,
    1168,  1169,    -1,    -1,    -1,    -1,   746,    -1,    -1,    -1,
      -1,    -1,    -1,   753,    -1,    -1,   756,    -1,    -1,    -1,
      -1,  1189,    -1,  1191,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    -1,    -1,    -1,  1224,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1485,    -1,    -1,  1488,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1244,    -1,    -1,    -1,
      -1,    -1,    -1,  1251,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,  1270,  1271,    -1,    -1,    -1,    84,    85,  1277,
    1278,    -1,    -1,  1281,  1282,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,   879,
     117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
     890,   128,    -1,   130,   131,    -1,   133,   134,   135,   136,
     137,   138,   139,   140,   141,    -1,    -1,  1588,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1602,  1603,    -1,    -1,    -1,    -1,  1608,  1609,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1621,    -1,    -1,  1624,    -1,    -1,    -1,    -1,    -1,     1,
      -1,  1632,    -1,    -1,    -1,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
    1000,  1001,  1002,    -1,    -1,    -1,    -1,    -1,  1008,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1485,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
      -1,   123,   124,   125,   126,    -1,   128,    -1,    -1,   131,
      -1,   133,   134,   135,    -1,   137,   138,   139,   140,   141,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1108,    -1,
      -1,  1111,    -1,    -1,  1114,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1804,  1805,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1826,    -1,    -1,    -1,    -1,
      -1,    -1,  1152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1166,  1167,  1168,  1169,
      -1,    -1,    -1,    -1,  1602,  1603,    -1,    -1,    -1,    -1,
    1608,  1609,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1189,
      -1,  1191,    -1,  1621,    -1,    -1,  1624,    -1,    -1,    -1,
      -1,  1882,  1883,    -1,  1632,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1224,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1244,    -1,    -1,    -1,    -1,    -1,
      -1,  1251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1270,  1271,    -1,    -1,    -1,    -1,    -1,  1277,  1278,    -1,
      -1,  1281,  1282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,  1804,  1805,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1882,  1883,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,  1485,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,    -1,    -1,   128,    -1,   130,   131,    -1,   133,   134,
     135,   136,   137,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,  1602,  1603,    -1,    -1,    -1,    -1,  1608,  1609,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1621,    -1,    -1,  1624,    -1,    -1,    -1,    -1,    -1,
       0,     1,  1632,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1804,  1805,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,  1882,  1883,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
      -1,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,   131,    -1,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,   121,   122,
     123,    -1,   125,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,   121,   122,   123,    -1,   125,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,   121,   122,   123,    -1,   125,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,   121,
     122,   123,    -1,   125,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,   121,   122,   123,    -1,
     125,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,   121,   122,   123,    -1,   125,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
     121,   122,   123,    -1,   125,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,   121,   122,   123,
      -1,   125,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,    -1,   125,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,   125,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,   125,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
     122,   123,    -1,   125,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
     125,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,   125,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,   122,   123,
      -1,   125,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,    -1,   125,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,   125,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,   125,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
     122,   123,    -1,   125,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
     125,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,   125,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,   122,   123,
      -1,   125,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,    -1,   125,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,   125,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,   125,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
     122,   123,    -1,   125,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
     125,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,   125,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,   121,   122,   123,
      -1,   125,   126,   127,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      88,    89,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,   136,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    88,    89,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
     122,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,   136,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,    -1,   125,   126,   127,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,   122,   123,
      -1,   125,   126,   127,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,   127,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
     122,   123,    -1,   125,   126,   127,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,    -1,   125,   126,   127,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,   122,   123,
      -1,   125,   126,   127,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,   127,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
     122,   123,    -1,   125,   126,   127,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,    -1,   125,   126,   127,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,   122,   123,
      -1,   125,   126,   127,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,     1,   122,     3,     4,     5,     6,    -1,
       8,     9,   130,   131,    -1,   133,   134,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,     1,   122,     3,     4,     5,     6,    -1,
       8,     9,   130,   131,    -1,   133,   134,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,    -1,   120,   121,
     122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,    -1,   120,     1,   122,     3,     4,     5,
       6,   127,     8,     9,   130,   131,    -1,   133,   134,   135,
     136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    84,    85,    86,    87,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    28,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    -1,    88,    89,    90,    -1,
       1,    -1,     3,     4,     5,     6,    98,     8,     9,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    28,   120,   121,
     122,   123,    -1,   125,    -1,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,    90,
      -1,     1,    -1,     3,     4,     5,     6,    98,     8,     9,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,    -1,    -1,    -1,    -1,    -1,   117,    -1,    28,   120,
      -1,   122,   123,    -1,    -1,    -1,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,
      90,    -1,     1,    -1,     3,     4,     5,     6,    98,     8,
       9,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,    -1,    -1,    -1,    -1,   117,    -1,    28,
     120,    -1,   122,   123,    -1,    -1,    -1,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,   121,   122,   123,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,   133,   134,   135,   136,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,    -1,    -1,   127,    -1,    -1,   130,   131,    -1,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,    -1,    -1,
     127,    -1,    -1,   130,   131,    -1,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
     121,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,   130,
     131,    -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,   125,    -1,    -1,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,   130,   131,    -1,   133,   134,
     135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,   133,   134,   135,   136,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,   134,   135,
     136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,
      -1,    -1,   125,    -1,    -1,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,    -1,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,   132,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,    -1,   122,    -1,    -1,   125,    -1,
      -1,    -1,   129,   130,   131,    -1,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,
     135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,
     122,   123,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,   133,   134,   135,   136,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,   121,   122,   123,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,
      -1,    -1,   125,    -1,    -1,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,    -1,   122,    -1,    -1,   125,    -1,    -1,    -1,   129,
     130,   131,    -1,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,    -1,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,   131,   132,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,
     135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,
     122,   123,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,   133,   134,   135,   136,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,   127,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,   130,
     131,    -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,   131,   132,   133,   134,   135,   136,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,   134,
     135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,    -1,   127,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,   131,   132,   133,   134,   135,   136,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
      -1,    -1,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,   131,   132,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,
     131,    -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,    -1,   127,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,   130,   131,    -1,   133,   134,
     135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,    -1,   127,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
      -1,   130,   131,    -1,   133,   134,   135,   136,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,
      -1,    -1,    -1,    -1,   127,    -1,    -1,   130,   131,    -1,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
     131,    -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,     0,     1,    -1,     3,     4,
       5,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,
     135,   136,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,   121,   122,   123,    -1,
     125,   126,    -1,    -1,    -1,   130,   131,     0,     1,    -1,
       3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,   125,   126,    -1,    -1,    -1,   130,   131,     0,
       1,    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,     0,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,     0,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,     0,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,     1,    -1,     3,
       4,     5,    -1,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,   122,   123,
       1,    -1,     3,     4,     5,    -1,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,     1,   120,
       3,   122,   123,    -1,    -1,    -1,    -1,    -1,    -1,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,     1,    -1,     3,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,   121,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,   121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,   131,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
     131,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   131,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,   131,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   131,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    76,    77,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,   105,     3,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   129,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    78,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,   129,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   129,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,     1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   129,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   127,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,    -1,    -1,   123,
      -1,   125,   126,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   126,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   126,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   126,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   126,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,     0,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   126,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    76,    77,    -1,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,   100,   101,    -1,
      -1,    -1,   105,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
     123,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,     3,    -1,    -1,    -1,    -1,
     107,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,     3,    -1,    -1,    -1,    -1,   107,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,     1,    -1,     3,    -1,    -1,    -1,   107,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,   123,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
     123,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,   123,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,   123,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    76,    77,    -1,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     0,     1,    -1,     3,   100,   101,    -1,    -1,    -1,
     105,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,   123,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,   121,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,   121,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,    -1,
      -1,    -1,    -1,   121,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,   121,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
      -1,   121,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,    -1,    -1,    -1,    -1,   121,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,   121,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,   120,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
     120,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
      -1,    -1,    -1,   120,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      80,    81,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,   121,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   127,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    53,    65,    66,    74,    75,
      76,    77,    79,    80,    81,    82,    83,    85,    86,    87,
     100,   101,   105,   110,   111,   112,   113,   114,   115,   116,
     117,   120,   123,   143,   144,   145,   147,   172,   209,   210,
     211,   212,   213,   214,   270,   273,   274,   277,   278,   279,
     280,   281,   282,   283,   285,   289,   292,   293,   294,   295,
     296,   297,   302,   303,   312,   313,   314,   321,   322,   326,
     329,   334,   363,   366,   367,   385,   386,   388,   389,   390,
     391,   392,   393,    77,   129,     5,    31,   214,   387,   214,
     120,   120,   120,   147,   214,   387,   283,   284,   321,   329,
      37,   145,   214,   311,   312,   314,   316,   317,   318,   320,
     321,   329,   332,   333,   338,   118,   123,   144,   145,   214,
     127,   129,   123,   127,   126,   117,   118,   209,   214,   127,
     147,   214,   127,   129,   126,   118,   127,   129,   127,   126,
     127,   145,   214,   321,     1,    31,    37,    38,   123,   143,
     145,   211,   213,   214,   270,   280,   281,   283,   285,   314,
     318,   321,   329,   332,   333,   334,   336,   344,   345,   346,
     347,    37,    38,   145,   321,   346,   120,   131,     1,    29,
      30,    31,    32,    33,    65,   116,   121,   143,   214,   269,
     273,   275,   276,   283,   285,   289,   290,   291,   297,   301,
     309,   310,   350,   351,   352,   353,   354,   355,   329,   120,
     314,   321,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    46,    47,    66,    85,    87,   100,   112,   113,
     114,   115,   127,   147,   168,   169,   269,   274,   275,   283,
     286,   290,   292,   300,   365,   368,   369,   370,   375,   376,
     377,    31,    76,   129,   211,   213,   302,   366,   367,   385,
     386,   393,     1,   211,   279,   296,   302,   334,   363,   389,
       1,   388,   389,     0,   214,   387,   387,     5,   124,   387,
       1,     4,     6,     8,     9,    65,    71,    72,    73,    84,
      85,    98,   102,   103,   104,   105,   106,   107,   108,   109,
     117,   120,   122,   130,   131,   133,   134,   135,   136,   147,
     173,   174,   214,   215,   216,   217,   218,   221,   222,   226,
     227,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   247,   249,   250,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   387,   399,   400,   401,   402,   144,   214,   127,   147,
     214,   283,   329,   131,   120,   131,   121,   309,   310,   354,
     355,   329,   332,   333,   311,   316,   320,   321,   121,   321,
     121,   321,   321,    85,   147,   199,   201,   203,   207,   208,
     214,   227,   233,   250,   255,   301,   123,   118,   118,   123,
       1,    68,    78,    80,    81,    88,    91,    92,    93,    94,
      96,    98,    99,   120,   122,   123,   126,   148,   149,   150,
     151,   152,   153,   154,   155,   170,   171,   173,   174,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   190,
     194,   195,   196,   197,   214,   222,   247,   301,   313,   315,
     321,   329,   334,   335,   364,    80,    81,   214,   269,   273,
     283,   286,   289,   297,   304,   305,     1,   126,   196,   197,
     145,   214,     1,   214,   271,   272,     1,   126,   272,   305,
      65,   200,   202,   204,   205,   206,   214,   301,     1,   126,
     196,   197,   305,     1,   126,   196,   197,     1,   126,   196,
     197,   145,   214,   125,   125,   125,   127,   329,   314,   318,
     321,     1,   124,   369,   376,   377,   369,   376,   377,     1,
     123,   125,   125,   329,   123,   132,   144,   214,   242,   263,
     267,   268,   125,   127,   147,   214,   126,   127,   126,   127,
     321,    37,   120,   131,   133,   143,   145,   214,   269,   275,
     283,   285,   290,   311,   312,   321,   327,   329,   330,   333,
       1,   121,   125,     1,   121,   125,     1,   125,     1,   125,
     121,   121,   314,   120,   314,   120,   120,     1,   123,     1,
     126,     1,    37,    38,   123,   214,   269,   275,   283,   286,
     290,   321,   346,   347,     1,   123,     1,   365,   368,   376,
     377,   365,   368,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    85,    86,    88,    89,    90,   123,
     129,   147,   191,   192,   193,   214,   222,   227,   243,   245,
     250,   263,   264,   265,   326,   356,   357,   360,   361,   362,
     369,   370,   371,   372,   373,   374,   376,   377,   379,   380,
     381,   382,   383,   384,   126,    31,   214,   387,   214,   209,
     210,   212,   213,   311,   312,   318,   321,   329,   334,   336,
     369,   377,   211,   302,   124,   241,   242,   262,   121,     1,
     120,   174,   218,   223,   226,   228,   248,   249,   251,   120,
     227,   250,   227,   250,   120,   214,   269,   275,   283,   286,
     290,   308,   267,   120,   120,   308,   267,   120,   120,   120,
     120,   120,   120,   228,   251,   121,   243,   245,   265,   275,
     283,   285,   290,   298,   348,   387,   127,   132,   175,   176,
     219,   224,   243,   127,     1,   126,   127,   214,     1,     7,
       8,     9,   120,   128,   131,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,   124,   244,   176,   219,   220,
     230,   252,   117,   137,   138,   134,   135,    10,    11,   233,
     255,    12,    13,   118,   119,    14,    15,   133,   139,   140,
      16,    17,   141,   244,   121,     7,     8,     9,   120,   128,
     131,   244,   117,   137,   138,   134,   135,    10,    11,    12,
      13,   118,   119,    14,    15,   133,   139,   140,    16,    17,
     141,   244,   121,   121,   107,   214,   301,   394,   397,   398,
     127,   127,   132,   144,   267,   268,   132,   144,   267,   268,
     121,   121,   121,   121,   311,   316,   320,   121,   121,   311,
      11,   119,   125,   124,   120,   321,   329,   330,    65,   206,
     214,   301,   206,     1,   214,   269,   283,   286,   297,   306,
     301,   334,   335,   120,   147,   214,   214,   301,     1,   120,
     306,   117,   120,   214,   301,   123,   326,   376,   377,   376,
     377,   376,   123,   376,   377,   123,     1,   126,     1,     1,
     123,   125,   125,    69,    70,    91,    95,    97,   126,    69,
      70,   126,   123,     1,   194,   195,     1,   194,   195,     1,
     124,   120,   129,   214,   287,   288,   311,   317,   319,   321,
     329,   336,   337,   338,     1,   301,   309,   352,   329,   315,
     321,   120,   129,   154,   155,   170,   171,   173,   174,   183,
     214,   301,   118,   147,   214,   214,   269,   283,   286,   118,
     118,   124,   125,     1,   123,   127,    28,   146,   214,   119,
     125,   124,   214,   330,   332,   344,   344,   344,   123,   125,
     126,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   219,   220,   222,   242,   263,   300,   341,
     342,   311,   314,   316,   318,   320,   311,   318,   127,   243,
     264,   339,   340,   376,   377,   376,   377,   344,   345,   344,
     345,   132,   132,   132,    51,   350,   351,     1,   272,   127,
     127,     1,   126,   196,   197,     1,   126,   196,   197,   127,
     121,   214,   309,   310,   321,   329,   330,   354,   355,   132,
     144,   267,   268,   321,   329,   333,   329,   120,   131,   327,
       1,     1,   125,     1,    51,   214,   350,   351,   125,     1,
      51,   214,   350,   351,   125,     1,    51,   214,   350,   351,
     125,    51,   214,   350,   351,     3,    28,    44,    74,    75,
     121,   323,   324,   325,   243,   144,   214,   126,   127,   123,
     123,   129,   267,   268,   129,   120,   120,     1,   120,    52,
      53,    54,    56,    57,    58,    59,    62,    86,   214,   265,
     326,   356,   379,   383,   120,   214,   123,   123,   123,   219,
     220,   245,   265,   120,   283,   120,   120,   187,   214,   123,
     123,   123,   129,   128,   244,     1,   128,   123,   125,   245,
     265,   244,   121,   125,   245,     1,   371,   372,   371,   372,
     356,   357,   365,   368,   356,   357,   365,   368,     1,     1,
     387,   387,   145,   214,   127,   127,   329,   318,   321,   369,
     377,   369,   377,   377,   242,   141,   123,   141,    65,   143,
     214,   227,   250,   275,   283,   285,   290,   299,   349,     1,
       1,     7,     8,     9,   120,   128,   131,     7,     8,     9,
     120,   128,   131,   214,   300,   118,   120,   131,   214,   269,
     275,   283,   286,   290,   321,   328,   329,   331,   214,   269,
     275,   283,   286,   290,   307,   245,   348,   376,   214,   131,
     331,   307,   243,   387,   387,   387,   243,   227,   250,   349,
     121,   214,   275,   283,   285,   290,   330,   121,   128,     1,
     166,   167,     1,   126,   125,   132,     1,   166,   167,   126,
       1,   166,   167,     1,   214,   121,   220,   224,   225,   264,
       1,   214,   245,   265,   219,   243,     1,   230,   252,   230,
     252,   230,   252,   231,   253,   231,   253,   232,   254,   232,
     254,   233,   255,   233,   255,   233,   255,   219,   220,   235,
     256,   219,   220,   235,   256,   219,   220,   236,   257,   219,
     220,   237,   258,   219,   220,   238,   259,   239,   260,   240,
     261,   129,   219,   220,   245,   246,   265,   266,   219,   243,
       1,   214,   121,   224,   225,     1,   214,   245,   265,   219,
     243,   230,   252,   230,   252,   230,   252,   231,   253,   231,
     253,   232,   254,   232,   254,   233,   255,   233,   255,   233,
     255,   233,   255,   219,   220,   235,   256,   219,   220,   235,
     256,   219,   220,   236,   257,   219,   220,   237,   258,   219,
     220,   238,   259,   239,   260,   240,   261,   129,   245,   246,
     265,   266,   219,   243,   118,   119,   214,   395,   396,   214,
     126,   394,   397,   398,   398,   132,   132,   132,   132,   132,
     132,   207,   199,   201,   203,   214,   321,   329,   119,   124,
     330,   119,   127,   118,   127,   214,   269,   283,   286,   330,
     321,   329,   336,   337,   187,   288,   311,   321,   329,   127,
     214,   127,   214,   330,   214,   321,   120,   123,   126,   177,
     178,   177,   178,   376,   376,   376,   216,   376,   376,     1,
     341,   342,   121,   267,   268,   127,   125,     1,   301,   309,
     352,   329,   311,   319,   321,   129,   326,   214,   120,   315,
     315,   214,     1,     1,   288,   208,   118,   206,   206,   267,
     268,   271,   196,   197,     1,   126,   272,   124,   129,   124,
     129,   205,   201,   214,   124,   214,   124,   376,   377,     1,
     123,   125,   123,   125,   123,   158,   159,   162,   163,   164,
     126,   156,   159,   123,   126,   158,   159,   162,   163,   164,
     124,    37,   336,   337,   338,   339,   340,   343,     1,   126,
     272,     1,   126,   272,     1,   126,   196,   197,   321,   329,
     330,   121,   121,   121,   132,   132,   132,   329,   327,   121,
     354,   355,   132,   144,   267,   268,   350,   351,   301,   350,
     350,   350,   351,   121,   120,   121,   125,   324,   121,   121,
     121,     1,   166,   167,   356,   357,   365,   368,   129,   129,
     356,   357,   365,   368,   245,   265,   245,   265,   121,   245,
     265,   129,   267,   268,   129,   120,   120,   356,   120,   220,
     265,   120,   129,    56,     1,   121,   123,   214,   245,   265,
     378,   123,   123,   123,   123,   123,   387,   120,   243,   243,
     214,   356,   357,   365,   368,    90,   220,   264,    88,    89,
      90,   243,   264,   220,   264,   243,   264,   118,   318,   377,
     377,   123,   245,   246,   265,   266,   245,   246,   265,   266,
     143,   144,   121,   143,   275,   283,   285,   290,   330,   121,
       1,   214,   121,   224,   225,     1,   214,   245,   265,     1,
     214,   121,   224,   225,     1,   214,   245,   265,   121,   121,
     330,   208,   121,   321,   331,   354,   355,   267,   268,   118,
     329,   120,   328,   131,   118,   131,   214,   269,   275,   283,
     286,   290,   331,   121,   121,   121,   121,   267,   268,   131,
     131,   331,   125,   121,   125,   125,   125,   121,   121,   230,
     252,   387,     1,   126,   219,   243,     1,     1,   121,   125,
     121,   132,   132,     1,   125,   129,   129,   125,   129,   129,
     121,   132,   132,   129,   129,   129,   129,   214,   214,   123,
     125,   214,   387,   126,   126,   321,   329,   201,   208,   118,
     127,   127,   214,   329,   321,   121,   329,   311,   121,   127,
     127,   214,   121,     1,   166,   167,   287,   321,   214,   120,
     311,   319,   319,   267,   268,   120,   121,   119,   208,   119,
     119,   123,     1,   123,   199,   198,   301,   199,   198,   203,
     124,   127,     1,   160,   161,     1,   160,   161,   377,     1,
     341,   342,   125,   126,   339,   340,     1,   123,     1,   123,
     329,   327,   121,   121,   121,   132,   132,   132,   330,   333,
     245,   121,   324,     1,   356,   357,   365,   368,   356,   357,
     365,   368,   121,   121,   121,   121,     1,   356,   121,   245,
     356,   357,   129,   129,   265,   121,   245,   265,    56,   265,
     378,   387,   120,   356,   129,   123,     1,   123,     1,   121,
     265,   378,     3,   121,   129,   387,   121,   121,   125,   120,
     120,   187,   129,   129,   129,   129,   129,   129,   129,   129,
     121,   121,     1,   121,   121,   132,   132,   121,   132,   132,
     121,   119,   321,   329,   331,   121,   121,   121,   132,   132,
     208,   328,   121,   354,   355,   267,   268,   208,   267,   268,
     118,   131,   120,   339,   132,   132,   267,   268,   267,   268,
     131,   348,   214,   214,   243,     1,   220,   264,   219,   220,
     219,   220,   242,   262,   219,   220,   242,   262,   219,   220,
     219,   220,   242,   262,   219,   220,   242,   262,   219,   220,
     242,   262,   219,   220,   242,   262,   219,   220,   242,   262,
     219,   220,   242,   262,   395,   123,   123,   119,   208,   127,
     376,   311,   124,   127,     1,   120,   129,   129,   119,   196,
     197,   123,   196,   197,   124,   330,   124,   203,   343,   126,
     339,   340,     1,   196,   197,   196,   197,   121,   356,   356,
     356,   356,   356,   357,   121,   120,   378,   121,   245,   265,
     245,   356,     1,   121,   245,   265,   358,   359,   387,   123,
     359,     3,   121,   129,   127,   187,   243,   243,     1,     1,
     328,   121,   119,   121,   121,   132,   132,   119,   132,   132,
     208,   267,   268,   348,   132,   132,   132,   132,   267,   268,
     121,   121,   121,   121,   119,   341,   267,   268,   267,   268,
     196,   197,   199,   199,   125,   126,     1,    64,    64,   245,
     265,   121,   245,   265,   121,   123,   121,   123,   356,   357,
     121,   356,   357,   121,   125,   129,   120,     3,   121,   129,
     359,   123,   359,    73,   187,   188,   189,   121,   121,   121,
     125,   119,   132,   132,   121,   132,   132,   123,   126,   356,
     356,   121,   121,   123,   356,   245,   356,   357,   123,   358,
     359,   243,   359,   123,   359,   121,   129,     3,   121,   129,
     376,   376,   126,   188,   127,   187,   230,   252,   339,   121,
     121,   121,   121,   121,   129,   123,   359,   359,   123,   359,
     189,   121,   356,   123,   123,   123,   359,   121,   121,   121,
     129,   126,   121,   123,   123,   123,   359,   123,   121,   123
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 143: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11320 "grammar.ec"
	break;
      case 144: /* "type" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11329 "grammar.ec"
	break;
      case 145: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11338 "grammar.ec"
	break;
      case 146: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 11347 "grammar.ec"
	break;
      case 147: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11356 "grammar.ec"
	break;
      case 148: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11365 "grammar.ec"
	break;
      case 149: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11374 "grammar.ec"
	break;
      case 150: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11383 "grammar.ec"
	break;
      case 151: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11392 "grammar.ec"
	break;
      case 152: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11401 "grammar.ec"
	break;
      case 153: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11410 "grammar.ec"
	break;
      case 154: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11419 "grammar.ec"
	break;
      case 155: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11428 "grammar.ec"
	break;
      case 156: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11437 "grammar.ec"
	break;
      case 157: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11446 "grammar.ec"
	break;
      case 158: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11455 "grammar.ec"
	break;
      case 159: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11464 "grammar.ec"
	break;
      case 160: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11473 "grammar.ec"
	break;
      case 161: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11482 "grammar.ec"
	break;
      case 162: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11491 "grammar.ec"
	break;
      case 163: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11500 "grammar.ec"
	break;
      case 164: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11509 "grammar.ec"
	break;
      case 165: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11518 "grammar.ec"
	break;
      case 166: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11527 "grammar.ec"
	break;
      case 167: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11536 "grammar.ec"
	break;
      case 168: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11545 "grammar.ec"
	break;
      case 169: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11554 "grammar.ec"
	break;
      case 173: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11563 "grammar.ec"
	break;
      case 174: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11572 "grammar.ec"
	break;
      case 177: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11581 "grammar.ec"
	break;
      case 178: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11590 "grammar.ec"
	break;
      case 179: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11599 "grammar.ec"
	break;
      case 180: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11608 "grammar.ec"
	break;
      case 183: /* "property" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 11617 "grammar.ec"
	break;
      case 194: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11626 "grammar.ec"
	break;
      case 195: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11635 "grammar.ec"
	break;
      case 196: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11644 "grammar.ec"
	break;
      case 197: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11653 "grammar.ec"
	break;
      case 198: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 11662 "grammar.ec"
	break;
      case 199: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11671 "grammar.ec"
	break;
      case 200: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11680 "grammar.ec"
	break;
      case 201: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11689 "grammar.ec"
	break;
      case 202: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11698 "grammar.ec"
	break;
      case 203: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11707 "grammar.ec"
	break;
      case 204: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11716 "grammar.ec"
	break;
      case 205: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11725 "grammar.ec"
	break;
      case 206: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 11734 "grammar.ec"
	break;
      case 207: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11743 "grammar.ec"
	break;
      case 208: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 11752 "grammar.ec"
	break;
      case 209: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 241 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11761 "grammar.ec"
	break;
      case 210: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11770 "grammar.ec"
	break;
      case 211: /* "class" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11779 "grammar.ec"
	break;
      case 212: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11788 "grammar.ec"
	break;
      case 213: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11797 "grammar.ec"
	break;
      case 214: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 11806 "grammar.ec"
	break;
      case 215: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11815 "grammar.ec"
	break;
      case 216: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11824 "grammar.ec"
	break;
      case 221: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11833 "grammar.ec"
	break;
      case 222: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11842 "grammar.ec"
	break;
      case 224: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11851 "grammar.ec"
	break;
      case 225: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11860 "grammar.ec"
	break;
      case 227: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11869 "grammar.ec"
	break;
      case 230: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11878 "grammar.ec"
	break;
      case 231: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11887 "grammar.ec"
	break;
      case 232: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11896 "grammar.ec"
	break;
      case 233: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11905 "grammar.ec"
	break;
      case 235: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11914 "grammar.ec"
	break;
      case 236: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11923 "grammar.ec"
	break;
      case 237: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11932 "grammar.ec"
	break;
      case 238: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11941 "grammar.ec"
	break;
      case 239: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11950 "grammar.ec"
	break;
      case 240: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11959 "grammar.ec"
	break;
      case 241: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11968 "grammar.ec"
	break;
      case 242: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11977 "grammar.ec"
	break;
      case 243: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11986 "grammar.ec"
	break;
      case 245: /* "expression" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11995 "grammar.ec"
	break;
      case 247: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12004 "grammar.ec"
	break;
      case 250: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12013 "grammar.ec"
	break;
      case 252: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12022 "grammar.ec"
	break;
      case 253: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12031 "grammar.ec"
	break;
      case 254: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12040 "grammar.ec"
	break;
      case 255: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12049 "grammar.ec"
	break;
      case 256: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12058 "grammar.ec"
	break;
      case 257: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12067 "grammar.ec"
	break;
      case 258: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12076 "grammar.ec"
	break;
      case 259: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12085 "grammar.ec"
	break;
      case 260: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12094 "grammar.ec"
	break;
      case 261: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12103 "grammar.ec"
	break;
      case 262: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12112 "grammar.ec"
	break;
      case 263: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12121 "grammar.ec"
	break;
      case 264: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12130 "grammar.ec"
	break;
      case 265: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12139 "grammar.ec"
	break;
      case 267: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12148 "grammar.ec"
	break;
      case 268: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12157 "grammar.ec"
	break;
      case 269: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12166 "grammar.ec"
	break;
      case 270: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12175 "grammar.ec"
	break;
      case 271: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 12184 "grammar.ec"
	break;
      case 272: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 12193 "grammar.ec"
	break;
      case 274: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12202 "grammar.ec"
	break;
      case 275: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12211 "grammar.ec"
	break;
      case 276: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12220 "grammar.ec"
	break;
      case 278: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12229 "grammar.ec"
	break;
      case 279: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12238 "grammar.ec"
	break;
      case 280: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12247 "grammar.ec"
	break;
      case 281: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12256 "grammar.ec"
	break;
      case 282: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12265 "grammar.ec"
	break;
      case 283: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12274 "grammar.ec"
	break;
      case 284: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12283 "grammar.ec"
	break;
      case 285: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12292 "grammar.ec"
	break;
      case 286: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12301 "grammar.ec"
	break;
      case 287: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12310 "grammar.ec"
	break;
      case 288: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 12319 "grammar.ec"
	break;
      case 289: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12328 "grammar.ec"
	break;
      case 290: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12337 "grammar.ec"
	break;
      case 291: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12346 "grammar.ec"
	break;
      case 292: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12355 "grammar.ec"
	break;
      case 293: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12364 "grammar.ec"
	break;
      case 294: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12373 "grammar.ec"
	break;
      case 295: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12382 "grammar.ec"
	break;
      case 296: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12391 "grammar.ec"
	break;
      case 298: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12400 "grammar.ec"
	break;
      case 299: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12409 "grammar.ec"
	break;
      case 300: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12418 "grammar.ec"
	break;
      case 301: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12427 "grammar.ec"
	break;
      case 302: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12436 "grammar.ec"
	break;
      case 303: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12445 "grammar.ec"
	break;
      case 304: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12454 "grammar.ec"
	break;
      case 305: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12463 "grammar.ec"
	break;
      case 309: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12472 "grammar.ec"
	break;
      case 310: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12481 "grammar.ec"
	break;
      case 311: /* "direct_declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12490 "grammar.ec"
	break;
      case 312: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12499 "grammar.ec"
	break;
      case 313: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12508 "grammar.ec"
	break;
      case 314: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12517 "grammar.ec"
	break;
      case 315: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12526 "grammar.ec"
	break;
      case 316: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12535 "grammar.ec"
	break;
      case 317: /* "direct_declarator_function_start_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12544 "grammar.ec"
	break;
      case 318: /* "direct_declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12553 "grammar.ec"
	break;
      case 319: /* "direct_declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12562 "grammar.ec"
	break;
      case 320: /* "direct_declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12571 "grammar.ec"
	break;
      case 321: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 270 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 12580 "grammar.ec"
	break;
      case 323: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12589 "grammar.ec"
	break;
      case 324: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 271 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 12598 "grammar.ec"
	break;
      case 325: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 272 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 12607 "grammar.ec"
	break;
      case 326: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 12616 "grammar.ec"
	break;
      case 327: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12625 "grammar.ec"
	break;
      case 328: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12634 "grammar.ec"
	break;
      case 329: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 12643 "grammar.ec"
	break;
      case 330: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12652 "grammar.ec"
	break;
      case 331: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12661 "grammar.ec"
	break;
      case 332: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12670 "grammar.ec"
	break;
      case 333: /* "declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12679 "grammar.ec"
	break;
      case 334: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12688 "grammar.ec"
	break;
      case 335: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12697 "grammar.ec"
	break;
      case 336: /* "declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12706 "grammar.ec"
	break;
      case 337: /* "declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12715 "grammar.ec"
	break;
      case 338: /* "declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12724 "grammar.ec"
	break;
      case 339: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12733 "grammar.ec"
	break;
      case 340: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12742 "grammar.ec"
	break;
      case 341: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12751 "grammar.ec"
	break;
      case 342: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12760 "grammar.ec"
	break;
      case 343: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 12769 "grammar.ec"
	break;
      case 344: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12778 "grammar.ec"
	break;
      case 345: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12787 "grammar.ec"
	break;
      case 346: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12796 "grammar.ec"
	break;
      case 347: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12805 "grammar.ec"
	break;
      case 348: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12814 "grammar.ec"
	break;
      case 349: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12823 "grammar.ec"
	break;
      case 350: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12832 "grammar.ec"
	break;
      case 351: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12841 "grammar.ec"
	break;
      case 352: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12850 "grammar.ec"
	break;
      case 353: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12859 "grammar.ec"
	break;
      case 354: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12868 "grammar.ec"
	break;
      case 355: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12877 "grammar.ec"
	break;
      case 356: /* "statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12886 "grammar.ec"
	break;
      case 357: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12895 "grammar.ec"
	break;
      case 361: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12904 "grammar.ec"
	break;
      case 362: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12913 "grammar.ec"
	break;
      case 363: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 12922 "grammar.ec"
	break;
      case 365: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 12931 "grammar.ec"
	break;
      case 369: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12940 "grammar.ec"
	break;
      case 370: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12949 "grammar.ec"
	break;
      case 371: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12958 "grammar.ec"
	break;
      case 372: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12967 "grammar.ec"
	break;
      case 373: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12976 "grammar.ec"
	break;
      case 374: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12985 "grammar.ec"
	break;
      case 375: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 12994 "grammar.ec"
	break;
      case 376: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13003 "grammar.ec"
	break;
      case 377: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13012 "grammar.ec"
	break;
      case 378: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13021 "grammar.ec"
	break;
      case 379: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13030 "grammar.ec"
	break;
      case 380: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13039 "grammar.ec"
	break;
      case 381: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13048 "grammar.ec"
	break;
      case 382: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13057 "grammar.ec"
	break;
      case 383: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13066 "grammar.ec"
	break;
      case 384: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13075 "grammar.ec"
	break;
      case 385: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13084 "grammar.ec"
	break;
      case 386: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13093 "grammar.ec"
	break;
      case 387: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 13102 "grammar.ec"
	break;
      case 388: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 231 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13111 "grammar.ec"
	break;
      case 389: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 231 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13120 "grammar.ec"
	break;
      case 390: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13129 "grammar.ec"
	break;
      case 391: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13138 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 280 "grammar.y"
    {
      (yyval.specifier) = null;
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 309 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 367 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 369 "grammar.y"
    {
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);
      FreeIdentifier((yyvsp[(1) - (2)].id));
      FreeIdentifier((yyvsp[(2) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #else
      Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
      Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
      yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 468 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 472 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 476 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 478 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 527 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 529 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 534 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(1) - (3)].list), FreeSpecifier); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 539 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(2) - (4)].list), FreeSpecifier) ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 544 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 546 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 551 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 553 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 558 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 560 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 565 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 567 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 569 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 571 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 573 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 577 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 581 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 594 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 596 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 598 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 600 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 602 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 608 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 610 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 615 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 620 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 625 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 627 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 629 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 633 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 634 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 638 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 640 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 650 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 654 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 656 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 658 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 662 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 664 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 666 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 669 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 681 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 692 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 711 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 713 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 717 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 718 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 719 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 720 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 721 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 722 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 62:

/* Line 1464 of yacc.c  */
#line 723 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 64:

/* Line 1464 of yacc.c  */
#line 725 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 730 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 731 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 732 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 736 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 737 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 738 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 739 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 740 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 741 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 742 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 747 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 749 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 754 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 756 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 758 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 760 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 762 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 792 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 794 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 799 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 801 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 803 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 805 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 807 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 836 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 838 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 840 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 845 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 847 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 852 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 854 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 858 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 860 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 862 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 864 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 869 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 872 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 875 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 878 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 943 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 945 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 950 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 952 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 954 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 956 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 958 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 988 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 992 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 993 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 994 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 998 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 999 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 1000 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 1004 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 1005 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 121:

/* Line 1464 of yacc.c  */
#line 1006 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 1012 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 1015 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 1018 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 1021 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 127:

/* Line 1464 of yacc.c  */
#line 1024 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 1030 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 1032 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 1034 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 1036 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 1038 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 1042 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1047 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1050 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1053 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1056 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 139:

/* Line 1464 of yacc.c  */
#line 1059 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1065 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1067 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1071 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1076 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1078 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1083 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1085 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1090 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1092 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1097 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1102 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1104 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1109 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1111 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1126 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1130 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1131 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1133 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1134 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1135 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1136 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1137 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1138 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1139 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1140 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1142 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1143 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1145 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1149 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1152 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1153 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1155 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1156 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1157 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1158 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1159 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1160 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1161 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1162 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1163 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1164 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1165 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1167 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1168 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1172 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1173 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1174 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1182 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1183 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1184 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 1188 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 1191 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1192 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1196 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1197 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1209 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1210 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1214 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1215 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1216 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1217 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1218 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1219 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1220 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1221 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1225 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1229 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1230 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1234 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1242 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 1243 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); ;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 1253 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 1254 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 1261 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1262 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1263 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1303 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1304 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1309 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1316 "grammar.y"
    { (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1318 "grammar.y"
    {
      (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1325 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1326 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1328 "grammar.y"
    { (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1330 "grammar.y"
    {
      (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1338 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1339 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1344 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1351 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1358 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1364 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1371 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace(0, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1377 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass(0, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1386 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1393 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1399 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1405 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1411 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1417 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1423 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1434 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1454 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1455 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1456 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1457 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1458 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1459 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 1461 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1473 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1475 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 1476 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1477 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1478 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1479 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1480 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1481 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1482 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1483 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1491 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1492 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1493 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 293:

/* Line 1464 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 294:

/* Line 1464 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 299:

/* Line 1464 of yacc.c  */
#line 1503 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 1504 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1508 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1512 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 1516 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1517 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 306:

/* Line 1464 of yacc.c  */
#line 1523 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1524 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1525 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1526 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1530 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1531 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1533 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1537 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1538 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 1539 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1540 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1547 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1550 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1551 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1552 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1553 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1554 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1556 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1557 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1558 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1559 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1560 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1561 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1562 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1563 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1567 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1568 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 1569 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 344:

/* Line 1464 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 345:

/* Line 1464 of yacc.c  */
#line 1574 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1576 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1577 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1578 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1582 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1583 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1584 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1585 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 354:

/* Line 1464 of yacc.c  */
#line 1586 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1587 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 356:

/* Line 1464 of yacc.c  */
#line 1588 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1589 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1592 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 360:

/* Line 1464 of yacc.c  */
#line 1593 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 361:

/* Line 1464 of yacc.c  */
#line 1594 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 366:

/* Line 1464 of yacc.c  */
#line 1608 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1609 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 368:

/* Line 1464 of yacc.c  */
#line 1610 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1611 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1612 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1613 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 372:

/* Line 1464 of yacc.c  */
#line 1614 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 373:

/* Line 1464 of yacc.c  */
#line 1615 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 375:

/* Line 1464 of yacc.c  */
#line 1620 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 377:

/* Line 1464 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1627 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1628 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 381:

/* Line 1464 of yacc.c  */
#line 1629 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 382:

/* Line 1464 of yacc.c  */
#line 1630 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 384:

/* Line 1464 of yacc.c  */
#line 1635 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 386:

/* Line 1464 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 389:

/* Line 1464 of yacc.c  */
#line 1643 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 390:

/* Line 1464 of yacc.c  */
#line 1644 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1645 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 392:

/* Line 1464 of yacc.c  */
#line 1646 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1651 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 395:

/* Line 1464 of yacc.c  */
#line 1659 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1660 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 397:

/* Line 1464 of yacc.c  */
#line 1661 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1662 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1663 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1664 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 401:

/* Line 1464 of yacc.c  */
#line 1665 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 402:

/* Line 1464 of yacc.c  */
#line 1666 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 404:

/* Line 1464 of yacc.c  */
#line 1671 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1672 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1673 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 407:

/* Line 1464 of yacc.c  */
#line 1674 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 408:

/* Line 1464 of yacc.c  */
#line 1676 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1677 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 410:

/* Line 1464 of yacc.c  */
#line 1678 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 411:

/* Line 1464 of yacc.c  */
#line 1679 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 413:

/* Line 1464 of yacc.c  */
#line 1684 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 415:

/* Line 1464 of yacc.c  */
#line 1687 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 418:

/* Line 1464 of yacc.c  */
#line 1693 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1694 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 420:

/* Line 1464 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 423:

/* Line 1464 of yacc.c  */
#line 1702 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1703 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 425:

/* Line 1464 of yacc.c  */
#line 1705 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 426:

/* Line 1464 of yacc.c  */
#line 1706 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 428:

/* Line 1464 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 429:

/* Line 1464 of yacc.c  */
#line 1712 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 431:

/* Line 1464 of yacc.c  */
#line 1717 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1718 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 434:

/* Line 1464 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1730 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1731 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1733 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1734 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1735 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1736 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1738 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1739 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 448:

/* Line 1464 of yacc.c  */
#line 1740 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1741 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 451:

/* Line 1464 of yacc.c  */
#line 1746 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1747 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 453:

/* Line 1464 of yacc.c  */
#line 1748 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1749 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1752 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 457:

/* Line 1464 of yacc.c  */
#line 1753 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1754 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 459:

/* Line 1464 of yacc.c  */
#line 1758 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1759 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1760 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1761 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1762 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1763 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1764 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1765 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1766 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1767 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1768 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1772 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 471:

/* Line 1464 of yacc.c  */
#line 1773 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1774 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 474:

/* Line 1464 of yacc.c  */
#line 1779 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 475:

/* Line 1464 of yacc.c  */
#line 1780 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 476:

/* Line 1464 of yacc.c  */
#line 1781 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 478:

/* Line 1464 of yacc.c  */
#line 1786 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 480:

/* Line 1464 of yacc.c  */
#line 1788 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1790 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 482:

/* Line 1464 of yacc.c  */
#line 1791 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1793 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1794 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1799 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1801 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 487:

/* Line 1464 of yacc.c  */
#line 1806 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 488:

/* Line 1464 of yacc.c  */
#line 1810 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); ;}
    break;

  case 490:

/* Line 1464 of yacc.c  */
#line 1812 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1814 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1815 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1817 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 494:

/* Line 1464 of yacc.c  */
#line 1818 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1823 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1825 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1830 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1834 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 499:

/* Line 1464 of yacc.c  */
#line 1835 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1836 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1837 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1838 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1839 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1840 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1841 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 506:

/* Line 1464 of yacc.c  */
#line 1842 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 507:

/* Line 1464 of yacc.c  */
#line 1843 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 508:

/* Line 1464 of yacc.c  */
#line 1844 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 509:

/* Line 1464 of yacc.c  */
#line 1845 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 515:

/* Line 1464 of yacc.c  */
#line 1861 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 517:

/* Line 1464 of yacc.c  */
#line 1866 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 1867 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 1868 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 1869 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 521:

/* Line 1464 of yacc.c  */
#line 1870 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 522:

/* Line 1464 of yacc.c  */
#line 1871 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 524:

/* Line 1464 of yacc.c  */
#line 1876 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 1880 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 526:

/* Line 1464 of yacc.c  */
#line 1884 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 527:

/* Line 1464 of yacc.c  */
#line 1888 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 529:

/* Line 1464 of yacc.c  */
#line 1896 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 1897 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 531:

/* Line 1464 of yacc.c  */
#line 1898 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 532:

/* Line 1464 of yacc.c  */
#line 1899 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 534:

/* Line 1464 of yacc.c  */
#line 1905 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         if((yyvsp[(1) - (2)].exp).identifier._class && !(yyvsp[(1) - (2)].exp).identifier._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(1) - (2)].exp).identifier.string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   ;}
    break;

  case 535:

/* Line 1464 of yacc.c  */
#line 1955 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 1956 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 1957 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 538:

/* Line 1464 of yacc.c  */
#line 1958 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 1959 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 540:

/* Line 1464 of yacc.c  */
#line 1960 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 1961 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 543:

/* Line 1464 of yacc.c  */
#line 1966 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 1967 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 1968 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 1969 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 1976 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 1977 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 549:

/* Line 1464 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 552:

/* Line 1464 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 554:

/* Line 1464 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 557:

/* Line 1464 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 559:

/* Line 1464 of yacc.c  */
#line 1996 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 560:

/* Line 1464 of yacc.c  */
#line 1997 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 562:

/* Line 1464 of yacc.c  */
#line 2002 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 2003 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 564:

/* Line 1464 of yacc.c  */
#line 2005 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 565:

/* Line 1464 of yacc.c  */
#line 2006 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 567:

/* Line 1464 of yacc.c  */
#line 2011 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 568:

/* Line 1464 of yacc.c  */
#line 2012 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 570:

/* Line 1464 of yacc.c  */
#line 2017 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 571:

/* Line 1464 of yacc.c  */
#line 2018 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 573:

/* Line 1464 of yacc.c  */
#line 2023 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 2024 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 2025 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 2026 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 2027 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 2028 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 2029 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 2030 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 581:

/* Line 1464 of yacc.c  */
#line 2032 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 582:

/* Line 1464 of yacc.c  */
#line 2033 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 583:

/* Line 1464 of yacc.c  */
#line 2034 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 584:

/* Line 1464 of yacc.c  */
#line 2035 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 2036 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 2037 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 2038 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 2039 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 2041 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 2042 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 2043 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 2044 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 2046 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 2047 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 2048 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 2049 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 597:

/* Line 1464 of yacc.c  */
#line 2052 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2059 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 599:

/* Line 1464 of yacc.c  */
#line 2063 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 600:

/* Line 1464 of yacc.c  */
#line 2067 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 602:

/* Line 1464 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 603:

/* Line 1464 of yacc.c  */
#line 2078 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 604:

/* Line 1464 of yacc.c  */
#line 2083 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2088 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2089 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2090 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2091 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2097 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2098 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2099 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 613:

/* Line 1464 of yacc.c  */
#line 2103 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 614:

/* Line 1464 of yacc.c  */
#line 2104 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 615:

/* Line 1464 of yacc.c  */
#line 2105 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 616:

/* Line 1464 of yacc.c  */
#line 2106 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 619:

/* Line 1464 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2118 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2119 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2120 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2121 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2125 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 630:

/* Line 1464 of yacc.c  */
#line 2130 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2134 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 632:

/* Line 1464 of yacc.c  */
#line 2135 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 633:

/* Line 1464 of yacc.c  */
#line 2136 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 634:

/* Line 1464 of yacc.c  */
#line 2140 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 635:

/* Line 1464 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2146 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 638:

/* Line 1464 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2151 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2156 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 642:

/* Line 1464 of yacc.c  */
#line 2157 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 643:

/* Line 1464 of yacc.c  */
#line 2161 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 644:

/* Line 1464 of yacc.c  */
#line 2162 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 645:

/* Line 1464 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2165 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2166 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2167 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 649:

/* Line 1464 of yacc.c  */
#line 2168 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 650:

/* Line 1464 of yacc.c  */
#line 2170 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 651:

/* Line 1464 of yacc.c  */
#line 2171 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 652:

/* Line 1464 of yacc.c  */
#line 2172 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 653:

/* Line 1464 of yacc.c  */
#line 2173 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2174 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2178 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2179 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2183 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2184 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2185 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2189 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2190 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2191 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2192 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2193 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 665:

/* Line 1464 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 666:

/* Line 1464 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 667:

/* Line 1464 of yacc.c  */
#line 2196 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2197 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2199 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 670:

/* Line 1464 of yacc.c  */
#line 2200 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 671:

/* Line 1464 of yacc.c  */
#line 2202 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 672:

/* Line 1464 of yacc.c  */
#line 2203 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 673:

/* Line 1464 of yacc.c  */
#line 2204 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 674:

/* Line 1464 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 675:

/* Line 1464 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 680:

/* Line 1464 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 681:

/* Line 1464 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2237 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 691:

/* Line 1464 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 692:

/* Line 1464 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 693:

/* Line 1464 of yacc.c  */
#line 2243 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 694:

/* Line 1464 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 695:

/* Line 1464 of yacc.c  */
#line 2245 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 696:

/* Line 1464 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 697:

/* Line 1464 of yacc.c  */
#line 2247 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 698:

/* Line 1464 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 702:

/* Line 1464 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 703:

/* Line 1464 of yacc.c  */
#line 2253 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 704:

/* Line 1464 of yacc.c  */
#line 2254 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 705:

/* Line 1464 of yacc.c  */
#line 2255 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2256 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2257 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2259 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2260 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2261 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2265 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2266 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2267 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 715:

/* Line 1464 of yacc.c  */
#line 2268 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 716:

/* Line 1464 of yacc.c  */
#line 2269 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 717:

/* Line 1464 of yacc.c  */
#line 2270 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 718:

/* Line 1464 of yacc.c  */
#line 2271 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 719:

/* Line 1464 of yacc.c  */
#line 2272 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 720:

/* Line 1464 of yacc.c  */
#line 2273 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 721:

/* Line 1464 of yacc.c  */
#line 2274 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 722:

/* Line 1464 of yacc.c  */
#line 2275 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 723:

/* Line 1464 of yacc.c  */
#line 2276 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 724:

/* Line 1464 of yacc.c  */
#line 2277 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 728:

/* Line 1464 of yacc.c  */
#line 2281 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 729:

/* Line 1464 of yacc.c  */
#line 2282 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2283 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2284 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2285 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2286 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2287 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2288 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2295 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2297 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2299 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2301 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2303 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2305 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2307 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2309 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2311 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2313 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2317 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2318 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2323 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2329 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2335 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2342 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      ;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2351 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2352 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2353 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2354 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2358 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2359 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2360 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2362 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2363 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2364 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2366 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2367 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2368 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2372 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2377 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2385 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2394 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2402 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2404 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2405 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2406 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2411 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2418 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2425 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2428 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2441 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2455 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2460 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2471 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2472 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2477 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2478 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2482 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2483 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2484 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2485 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2496 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2497 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2498 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2500 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2501 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2502 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2503 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 814:

/* Line 1464 of yacc.c  */
#line 2510 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2511 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2512 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2513 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2515 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2516 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 821:

/* Line 1464 of yacc.c  */
#line 2517 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 822:

/* Line 1464 of yacc.c  */
#line 2518 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2519 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 824:

/* Line 1464 of yacc.c  */
#line 2523 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2524 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 826:

/* Line 1464 of yacc.c  */
#line 2525 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2526 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2527 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2528 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2529 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2530 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2531 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2532 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 834:

/* Line 1464 of yacc.c  */
#line 2536 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2537 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 836:

/* Line 1464 of yacc.c  */
#line 2541 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 837:

/* Line 1464 of yacc.c  */
#line 2542 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2543 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2544 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 840:

/* Line 1464 of yacc.c  */
#line 2545 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2546 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2547 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2548 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2550 "grammar.y"
    { _DeclClass(0, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2551 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass(0, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 846:

/* Line 1464 of yacc.c  */
#line 2554 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2572 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2590 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 850:

/* Line 1464 of yacc.c  */
#line 2594 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2595 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2596 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2597 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2598 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2599 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2600 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2601 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2603 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2621 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2637 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 861:

/* Line 1464 of yacc.c  */
#line 2638 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2639 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2640 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2641 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2642 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2643 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2644 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 868:

/* Line 1464 of yacc.c  */
#line 2645 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 869:

/* Line 1464 of yacc.c  */
#line 2646 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2647 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 871:

/* Line 1464 of yacc.c  */
#line 2648 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2650 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 873:

/* Line 1464 of yacc.c  */
#line 2668 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2684 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2685 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2686 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2687 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2688 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2689 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2690 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 881:

/* Line 1464 of yacc.c  */
#line 2691 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2692 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 883:

/* Line 1464 of yacc.c  */
#line 2693 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 884:

/* Line 1464 of yacc.c  */
#line 2694 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2695 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2697 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 887:

/* Line 1464 of yacc.c  */
#line 2715 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 888:

/* Line 1464 of yacc.c  */
#line 2731 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 889:

/* Line 1464 of yacc.c  */
#line 2732 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2736 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 891:

/* Line 1464 of yacc.c  */
#line 2737 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 892:

/* Line 1464 of yacc.c  */
#line 2738 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 893:

/* Line 1464 of yacc.c  */
#line 2739 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2740 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2746 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   ;}
    break;

  case 897:

/* Line 1464 of yacc.c  */
#line 2752 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); ;}
    break;

  case 898:

/* Line 1464 of yacc.c  */
#line 2755 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 899:

/* Line 1464 of yacc.c  */
#line 2764 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 900:

/* Line 1464 of yacc.c  */
#line 2773 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      ;}
    break;

  case 901:

/* Line 1464 of yacc.c  */
#line 2782 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      ;}
    break;

  case 902:

/* Line 1464 of yacc.c  */
#line 2790 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 903:

/* Line 1464 of yacc.c  */
#line 2791 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 904:

/* Line 1464 of yacc.c  */
#line 2792 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 905:

/* Line 1464 of yacc.c  */
#line 2793 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 2797 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 907:

/* Line 1464 of yacc.c  */
#line 2798 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 2799 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 2800 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 910:

/* Line 1464 of yacc.c  */
#line 2801 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 911:

/* Line 1464 of yacc.c  */
#line 2802 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 912:

/* Line 1464 of yacc.c  */
#line 2803 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 913:

/* Line 1464 of yacc.c  */
#line 2804 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 914:

/* Line 1464 of yacc.c  */
#line 2805 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 916:

/* Line 1464 of yacc.c  */
#line 2813 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 917:

/* Line 1464 of yacc.c  */
#line 2814 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 918:

/* Line 1464 of yacc.c  */
#line 2815 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 919:

/* Line 1464 of yacc.c  */
#line 2816 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 2817 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 2823 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 2832 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 923:

/* Line 1464 of yacc.c  */
#line 2841 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 924:

/* Line 1464 of yacc.c  */
#line 2850 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 928:

/* Line 1464 of yacc.c  */
#line 2873 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 929:

/* Line 1464 of yacc.c  */
#line 2874 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 930:

/* Line 1464 of yacc.c  */
#line 2875 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 2876 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 2877 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 2883 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 2892 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 935:

/* Line 1464 of yacc.c  */
#line 2901 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 936:

/* Line 1464 of yacc.c  */
#line 2910 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 939:

/* Line 1464 of yacc.c  */
#line 2973 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 940:

/* Line 1464 of yacc.c  */
#line 2974 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 2975 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 2977 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 2988 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 2989 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 945:

/* Line 1464 of yacc.c  */
#line 2990 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 2995 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 2996 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 2997 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 2998 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 2999 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 951:

/* Line 1464 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 3004 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 953:

/* Line 1464 of yacc.c  */
#line 3008 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 3009 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 3010 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 956:

/* Line 1464 of yacc.c  */
#line 3014 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 958:

/* Line 1464 of yacc.c  */
#line 3019 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 3020 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 960:

/* Line 1464 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 961:

/* Line 1464 of yacc.c  */
#line 3022 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 962:

/* Line 1464 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 963:

/* Line 1464 of yacc.c  */
#line 3024 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 3025 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 965:

/* Line 1464 of yacc.c  */
#line 3026 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 966:

/* Line 1464 of yacc.c  */
#line 3027 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 967:

/* Line 1464 of yacc.c  */
#line 3028 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 968:

/* Line 1464 of yacc.c  */
#line 3029 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 969:

/* Line 1464 of yacc.c  */
#line 3030 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 970:

/* Line 1464 of yacc.c  */
#line 3031 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 971:

/* Line 1464 of yacc.c  */
#line 3032 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 972:

/* Line 1464 of yacc.c  */
#line 3033 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 973:

/* Line 1464 of yacc.c  */
#line 3034 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 974:

/* Line 1464 of yacc.c  */
#line 3038 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 975:

/* Line 1464 of yacc.c  */
#line 3039 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 976:

/* Line 1464 of yacc.c  */
#line 3040 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 977:

/* Line 1464 of yacc.c  */
#line 3041 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 978:

/* Line 1464 of yacc.c  */
#line 3042 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 979:

/* Line 1464 of yacc.c  */
#line 3043 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 980:

/* Line 1464 of yacc.c  */
#line 3044 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 981:

/* Line 1464 of yacc.c  */
#line 3045 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 982:

/* Line 1464 of yacc.c  */
#line 3049 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 983:

/* Line 1464 of yacc.c  */
#line 3050 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 984:

/* Line 1464 of yacc.c  */
#line 3051 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 985:

/* Line 1464 of yacc.c  */
#line 3052 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 986:

/* Line 1464 of yacc.c  */
#line 3056 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 3058 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 989:

/* Line 1464 of yacc.c  */
#line 3059 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 990:

/* Line 1464 of yacc.c  */
#line 3060 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 991:

/* Line 1464 of yacc.c  */
#line 3064 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 993:

/* Line 1464 of yacc.c  */
#line 3066 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 994:

/* Line 1464 of yacc.c  */
#line 3067 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 995:

/* Line 1464 of yacc.c  */
#line 3068 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 997:

/* Line 1464 of yacc.c  */
#line 3074 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 998:

/* Line 1464 of yacc.c  */
#line 3076 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 999:

/* Line 1464 of yacc.c  */
#line 3078 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 1000:

/* Line 1464 of yacc.c  */
#line 3080 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 1002:

/* Line 1464 of yacc.c  */
#line 3086 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1003:

/* Line 1464 of yacc.c  */
#line 3088 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1004:

/* Line 1464 of yacc.c  */
#line 3090 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 1006:

/* Line 1464 of yacc.c  */
#line 3095 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1007:

/* Line 1464 of yacc.c  */
#line 3096 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1008:

/* Line 1464 of yacc.c  */
#line 3097 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1010:

/* Line 1464 of yacc.c  */
#line 3102 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1011:

/* Line 1464 of yacc.c  */
#line 3103 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1012:

/* Line 1464 of yacc.c  */
#line 3104 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3109 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1015:

/* Line 1464 of yacc.c  */
#line 3110 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3111 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3116 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1019:

/* Line 1464 of yacc.c  */
#line 3117 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3118 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3123 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1023:

/* Line 1464 of yacc.c  */
#line 3124 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3125 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3129 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3130 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3132 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3147 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3148 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3149 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3151 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3164 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3179 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1034:

/* Line 1464 of yacc.c  */
#line 3181 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3185 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3186 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3190 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3191 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3192 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1040:

/* Line 1464 of yacc.c  */
#line 3193 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3196 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1042:

/* Line 1464 of yacc.c  */
#line 3197 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1043:

/* Line 1464 of yacc.c  */
#line 3201 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3202 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1045:

/* Line 1464 of yacc.c  */
#line 3203 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3207 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3211 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3215 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1049:

/* Line 1464 of yacc.c  */
#line 3216 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1050:

/* Line 1464 of yacc.c  */
#line 3217 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1051:

/* Line 1464 of yacc.c  */
#line 3218 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1052:

/* Line 1464 of yacc.c  */
#line 3220 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   ;}
    break;

  case 1053:

/* Line 1464 of yacc.c  */
#line 3228 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1054:

/* Line 1464 of yacc.c  */
#line 3237 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1055:

/* Line 1464 of yacc.c  */
#line 3238 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3239 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3240 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3244 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3245 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1060:

/* Line 1464 of yacc.c  */
#line 3249 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1061:

/* Line 1464 of yacc.c  */
#line 3250 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1062:

/* Line 1464 of yacc.c  */
#line 3255 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1063:

/* Line 1464 of yacc.c  */
#line 3256 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3257 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1065:

/* Line 1464 of yacc.c  */
#line 3258 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3259 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1067:

/* Line 1464 of yacc.c  */
#line 3261 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1068:

/* Line 1464 of yacc.c  */
#line 3279 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1069:

/* Line 1464 of yacc.c  */
#line 3280 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1070:

/* Line 1464 of yacc.c  */
#line 3284 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1071:

/* Line 1464 of yacc.c  */
#line 3285 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1072:

/* Line 1464 of yacc.c  */
#line 3286 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1073:

/* Line 1464 of yacc.c  */
#line 3287 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1074:

/* Line 1464 of yacc.c  */
#line 3288 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1075:

/* Line 1464 of yacc.c  */
#line 3289 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1076:

/* Line 1464 of yacc.c  */
#line 3291 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1077:

/* Line 1464 of yacc.c  */
#line 3292 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1078:

/* Line 1464 of yacc.c  */
#line 3293 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1079:

/* Line 1464 of yacc.c  */
#line 3294 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1080:

/* Line 1464 of yacc.c  */
#line 3298 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1081:

/* Line 1464 of yacc.c  */
#line 3299 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1082:

/* Line 1464 of yacc.c  */
#line 3300 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1083:

/* Line 1464 of yacc.c  */
#line 3301 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1084:

/* Line 1464 of yacc.c  */
#line 3302 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1085:

/* Line 1464 of yacc.c  */
#line 3304 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1086:

/* Line 1464 of yacc.c  */
#line 3305 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1087:

/* Line 1464 of yacc.c  */
#line 3306 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1089:

/* Line 1464 of yacc.c  */
#line 3311 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1090:

/* Line 1464 of yacc.c  */
#line 3312 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1091:

/* Line 1464 of yacc.c  */
#line 3313 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1092:

/* Line 1464 of yacc.c  */
#line 3314 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1093:

/* Line 1464 of yacc.c  */
#line 3315 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1095:

/* Line 1464 of yacc.c  */
#line 3320 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1098:

/* Line 1464 of yacc.c  */
#line 3327 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1100:

/* Line 1464 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1101:

/* Line 1464 of yacc.c  */
#line 3330 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1102:

/* Line 1464 of yacc.c  */
#line 3331 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1110:

/* Line 1464 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1111:

/* Line 1464 of yacc.c  */
#line 3343 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3344 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3345 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3346 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3347 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3348 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3352 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3353 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3357 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3358 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3359 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3363 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3364 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3365 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3366 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3368 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3369 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3370 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3372 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3373 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3374 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3375 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3377 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3378 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3379 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3384 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3385 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3387 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3389 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3390 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3391 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3392 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3393 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3397 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3398 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3399 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3400 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3401 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3402 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3403 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3405 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1154:

/* Line 1464 of yacc.c  */
#line 3406 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3407 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3408 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3409 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3413 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; ;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3414 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; ;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3415 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; ;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3419 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3420 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3424 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3425 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3426 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3427 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3431 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3432 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3433 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3435 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3436 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3437 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3441 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3445 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3446 "grammar.y"
    { structDeclMode = defaultDeclMode;  ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3448 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3449 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3450 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3454 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3455 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3456 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3457 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3461 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3462 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1185:

/* Line 1464 of yacc.c  */
#line 3466 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3467 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3468 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3472 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3473 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3474 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3475 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1192:

/* Line 1464 of yacc.c  */
#line 3476 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1193:

/* Line 1464 of yacc.c  */
#line 3477 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1194:

/* Line 1464 of yacc.c  */
#line 3478 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3482 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1196:

/* Line 1464 of yacc.c  */
#line 3483 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1197:

/* Line 1464 of yacc.c  */
#line 3484 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3485 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1199:

/* Line 1464 of yacc.c  */
#line 3489 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3490 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3491 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3492 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3496 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3500 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3505 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1206:

/* Line 1464 of yacc.c  */
#line 3507 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3510 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3515 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3516 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3517 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3521 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3523 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3524 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3525 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1216:

/* Line 1464 of yacc.c  */
#line 3526 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3530 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3535 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3536 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1221:

/* Line 1464 of yacc.c  */
#line 3537 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3539 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3540 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3542 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3543 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3544 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3545 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3546 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3548 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3549 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3553 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3554 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3555 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3556 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3560 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3561 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3562 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3563 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1239:

/* Line 1464 of yacc.c  */
#line 3565 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1240:

/* Line 1464 of yacc.c  */
#line 3566 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3567 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3568 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3569 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3570 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1245:

/* Line 1464 of yacc.c  */
#line 3571 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1246:

/* Line 1464 of yacc.c  */
#line 3574 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3578 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3579 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3583 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3584 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3588 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3589 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3590 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3591 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3592 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3593 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3594 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3595 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3599 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3600 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3601 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3602 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3608 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3610 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3611 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3613 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1267:

/* Line 1464 of yacc.c  */
#line 3615 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1268:

/* Line 1464 of yacc.c  */
#line 3616 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1269:

/* Line 1464 of yacc.c  */
#line 3619 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1270:

/* Line 1464 of yacc.c  */
#line 3620 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1271:

/* Line 1464 of yacc.c  */
#line 3621 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1272:

/* Line 1464 of yacc.c  */
#line 3622 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1273:

/* Line 1464 of yacc.c  */
#line 3623 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1274:

/* Line 1464 of yacc.c  */
#line 3624 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1275:

/* Line 1464 of yacc.c  */
#line 3628 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1276:

/* Line 1464 of yacc.c  */
#line 3630 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1277:

/* Line 1464 of yacc.c  */
#line 3641 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1278:

/* Line 1464 of yacc.c  */
#line 3643 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1279:

/* Line 1464 of yacc.c  */
#line 3646 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1280:

/* Line 1464 of yacc.c  */
#line 3649 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1281:

/* Line 1464 of yacc.c  */
#line 3650 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1282:

/* Line 1464 of yacc.c  */
#line 3651 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1283:

/* Line 1464 of yacc.c  */
#line 3653 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1284:

/* Line 1464 of yacc.c  */
#line 3662 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1285:

/* Line 1464 of yacc.c  */
#line 3664 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1286:

/* Line 1464 of yacc.c  */
#line 3666 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1287:

/* Line 1464 of yacc.c  */
#line 3667 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1288:

/* Line 1464 of yacc.c  */
#line 3668 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1289:

/* Line 1464 of yacc.c  */
#line 3669 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1290:

/* Line 1464 of yacc.c  */
#line 3671 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1291:

/* Line 1464 of yacc.c  */
#line 3680 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1292:

/* Line 1464 of yacc.c  */
#line 3681 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1293:

/* Line 1464 of yacc.c  */
#line 3682 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1294:

/* Line 1464 of yacc.c  */
#line 3683 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1295:

/* Line 1464 of yacc.c  */
#line 3684 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1296:

/* Line 1464 of yacc.c  */
#line 3685 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1297:

/* Line 1464 of yacc.c  */
#line 3689 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1298:

/* Line 1464 of yacc.c  */
#line 3691 "grammar.y"
    {
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   ;}
    break;

  case 1299:

/* Line 1464 of yacc.c  */
#line 3698 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1300:

/* Line 1464 of yacc.c  */
#line 3700 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1301:

/* Line 1464 of yacc.c  */
#line 3701 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1302:

/* Line 1464 of yacc.c  */
#line 3704 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1303:

/* Line 1464 of yacc.c  */
#line 3705 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1304:

/* Line 1464 of yacc.c  */
#line 3709 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1305:

/* Line 1464 of yacc.c  */
#line 3710 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1306:

/* Line 1464 of yacc.c  */
#line 3711 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1309:

/* Line 1464 of yacc.c  */
#line 3717 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1310:

/* Line 1464 of yacc.c  */
#line 3718 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1311:

/* Line 1464 of yacc.c  */
#line 3720 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1312:

/* Line 1464 of yacc.c  */
#line 3722 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1315:

/* Line 1464 of yacc.c  */
#line 3728 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1316:

/* Line 1464 of yacc.c  */
#line 3732 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1317:

/* Line 1464 of yacc.c  */
#line 3733 "grammar.y"
    { Symbol symbol = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1318:

/* Line 1464 of yacc.c  */
#line 3734 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1319:

/* Line 1464 of yacc.c  */
#line 3738 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1320:

/* Line 1464 of yacc.c  */
#line 3742 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1321:

/* Line 1464 of yacc.c  */
#line 3743 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1322:

/* Line 1464 of yacc.c  */
#line 3744 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1323:

/* Line 1464 of yacc.c  */
#line 3748 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1324:

/* Line 1464 of yacc.c  */
#line 3749 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1325:

/* Line 1464 of yacc.c  */
#line 3753 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1326:

/* Line 1464 of yacc.c  */
#line 3754 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1327:

/* Line 1464 of yacc.c  */
#line 3758 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1328:

/* Line 1464 of yacc.c  */
#line 3759 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1329:

/* Line 1464 of yacc.c  */
#line 3760 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1330:

/* Line 1464 of yacc.c  */
#line 3761 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1331:

/* Line 1464 of yacc.c  */
#line 3765 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1332:

/* Line 1464 of yacc.c  */
#line 3769 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1333:

/* Line 1464 of yacc.c  */
#line 3773 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1334:

/* Line 1464 of yacc.c  */
#line 3777 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 22689 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3780 "grammar.y"


