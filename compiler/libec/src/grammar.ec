/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING   "eC expects all declarations to precede statements in the block (C89 style)\n"

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 107 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     LONG = 294,
     SIGNED = 295,
     UNSIGNED = 296,
     FLOAT = 297,
     DOUBLE = 298,
     CONST = 299,
     VOLATILE = 300,
     VOID = 301,
     VALIST = 302,
     STRUCT = 303,
     UNION = 304,
     ENUM = 305,
     ELLIPSIS = 306,
     CASE = 307,
     DEFAULT = 308,
     IF = 309,
     SWITCH = 310,
     WHILE = 311,
     DO = 312,
     FOR = 313,
     GOTO = 314,
     CONTINUE = 315,
     BREAK = 316,
     RETURN = 317,
     IFX = 318,
     ELSE = 319,
     CLASS = 320,
     THISCLASS = 321,
     CLASS_NAME = 322,
     PROPERTY = 323,
     SETPROP = 324,
     GETPROP = 325,
     NEWOP = 326,
     RENEW = 327,
     DELETE = 328,
     EXT_DECL = 329,
     EXT_STORAGE = 330,
     IMPORT = 331,
     DEFINE = 332,
     VIRTUAL = 333,
     ATTRIB = 334,
     PUBLIC = 335,
     PRIVATE = 336,
     TYPED_OBJECT = 337,
     ANY_OBJECT = 338,
     _INCREF = 339,
     EXTENSION = 340,
     ASM = 341,
     TYPEOF = 342,
     WATCH = 343,
     STOPWATCHING = 344,
     FIREWATCHERS = 345,
     WATCHABLE = 346,
     CLASS_DESIGNER = 347,
     CLASS_NO_EXPANSION = 348,
     CLASS_FIXED = 349,
     ISPROPSET = 350,
     CLASS_DEFAULT_PROPERTY = 351,
     PROPERTY_CATEGORY = 352,
     CLASS_DATA = 353,
     CLASS_PROPERTY = 354,
     SUBCLASS = 355,
     NAMESPACE = 356,
     NEW0OP = 357,
     RENEW0 = 358,
     VAARG = 359,
     DBTABLE = 360,
     DBFIELD = 361,
     DBINDEX = 362,
     DATABASE_OPEN = 363,
     ALIGNOF = 364,
     ATTRIB_DEP = 365,
     __ATTRIB = 366,
     BOOL = 367,
     _BOOL = 368,
     _COMPLEX = 369,
     _IMAGINARY = 370,
     RESTRICT = 371,
     THREAD = 372
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 37 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 305 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 330 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  295
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   39495

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  143
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  257
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1301
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2167

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   372

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   137,     2,     2,   131,   139,   134,     2,
     121,   122,   118,   135,   126,   136,   129,   138,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   130,   124,
     119,   125,   120,   142,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   132,     2,   133,   140,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   128,   141,   127,   123,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   188,   191,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   924,   929,   934,   940,
     949,   952,   954,   956,   959,   966,   973,   979,   985,   992,
     999,  1005,  1011,  1019,  1027,  1034,  1041,  1049,  1057,  1064,
    1071,  1076,  1082,  1087,  1094,  1099,  1101,  1103,  1105,  1107,
    1111,  1114,  1116,  1119,  1122,  1125,  1127,  1132,  1137,  1141,
    1146,  1151,  1155,  1159,  1162,  1165,  1170,  1175,  1179,  1184,
    1188,  1192,  1195,  1198,  1200,  1202,  1206,  1210,  1212,  1214,
    1218,  1222,  1225,  1228,  1231,  1234,  1237,  1240,  1245,  1251,
    1257,  1260,  1265,  1267,  1269,  1271,  1273,  1275,  1277,  1279,
    1281,  1283,  1285,  1287,  1292,  1294,  1298,  1302,  1306,  1310,
    1314,  1318,  1320,  1324,  1328,  1332,  1336,  1338,  1342,  1346,
    1350,  1354,  1357,  1359,  1362,  1366,  1370,  1374,  1378,  1382,
    1386,  1390,  1392,  1396,  1400,  1404,  1408,  1412,  1416,  1420,
    1424,  1426,  1430,  1434,  1438,  1442,  1444,  1448,  1452,  1456,
    1460,  1462,  1466,  1470,  1474,  1478,  1480,  1484,  1488,  1490,
    1494,  1498,  1500,  1506,  1512,  1518,  1524,  1530,  1536,  1542,
    1548,  1554,  1560,  1566,  1572,  1578,  1584,  1590,  1596,  1598,
    1602,  1606,  1610,  1614,  1618,  1622,  1626,  1630,  1632,  1634,
    1636,  1638,  1640,  1642,  1644,  1646,  1648,  1650,  1652,  1654,
    1658,  1662,  1665,  1667,  1671,  1675,  1677,  1679,  1682,  1685,
    1689,  1693,  1697,  1701,  1705,  1709,  1713,  1716,  1719,  1722,
    1725,  1728,  1734,  1741,  1748,  1751,  1757,  1759,  1761,  1763,
    1768,  1770,  1774,  1778,  1782,  1786,  1790,  1794,  1796,  1800,
    1804,  1808,  1812,  1814,  1818,  1822,  1826,  1830,  1832,  1835,
    1839,  1843,  1847,  1851,  1855,  1859,  1863,  1865,  1869,  1873,
    1877,  1881,  1885,  1889,  1893,  1897,  1899,  1903,  1907,  1911,
    1915,  1917,  1921,  1925,  1929,  1933,  1935,  1939,  1943,  1947,
    1951,  1953,  1957,  1961,  1963,  1967,  1971,  1973,  1979,  1985,
    1991,  1997,  2002,  2007,  2012,  2017,  2023,  2029,  2035,  2041,
    2046,  2051,  2056,  2061,  2067,  2073,  2079,  2085,  2091,  2097,
    2103,  2109,  2113,  2117,  2120,  2123,  2125,  2129,  2133,  2137,
    2141,  2143,  2146,  2150,  2154,  2157,  2160,  2163,  2165,  2168,
    2172,  2176,  2178,  2180,  2182,  2184,  2186,  2188,  2190,  2192,
    2194,  2196,  2198,  2200,  2202,  2204,  2206,  2208,  2210,  2214,
    2218,  2220,  2224,  2227,  2229,  2232,  2235,  2238,  2243,  2248,
    2252,  2256,  2261,  2267,  2272,  2279,  2286,  2291,  2297,  2302,
    2309,  2316,  2319,  2322,  2325,  2331,  2335,  2341,  2348,  2354,
    2362,  2370,  2379,  2388,  2396,  2404,  2408,  2412,  2416,  2421,
    2425,  2431,  2437,  2439,  2441,  2443,  2445,  2447,  2449,  2451,
    2453,  2455,  2458,  2460,  2462,  2464,  2466,  2468,  2470,  2472,
    2474,  2476,  2478,  2480,  2482,  2484,  2486,  2488,  2490,  2495,
    2500,  2505,  2507,  2509,  2511,  2513,  2515,  2517,  2519,  2521,
    2523,  2525,  2527,  2529,  2531,  2533,  2535,  2537,  2539,  2541,
    2543,  2545,  2547,  2549,  2551,  2553,  2555,  2557,  2559,  2564,
    2569,  2574,  2576,  2578,  2581,  2584,  2588,  2594,  2597,  2601,
    2607,  2613,  2619,  2621,  2625,  2628,  2631,  2635,  2639,  2642,
    2646,  2650,  2655,  2659,  2663,  2667,  2671,  2675,  2679,  2684,
    2689,  2694,  2696,  2698,  2703,  2707,  2710,  2714,  2718,  2722,
    2726,  2730,  2734,  2738,  2742,  2746,  2750,  2754,  2758,  2760,
    2762,  2764,  2767,  2769,  2772,  2774,  2777,  2779,  2782,  2784,
    2787,  2789,  2792,  2794,  2797,  2799,  2802,  2804,  2807,  2809,
    2812,  2814,  2817,  2819,  2822,  2824,  2827,  2829,  2832,  2834,
    2837,  2839,  2842,  2844,  2847,  2849,  2852,  2854,  2857,  2859,
    2862,  2864,  2867,  2869,  2872,  2874,  2877,  2879,  2882,  2884,
    2887,  2889,  2892,  2894,  2896,  2898,  2901,  2903,  2906,  2908,
    2911,  2913,  2916,  2921,  2927,  2929,  2931,  2933,  2936,  2938,
    2941,  2943,  2946,  2948,  2951,  2956,  2962,  2964,  2967,  2969,
    2972,  2974,  2977,  2979,  2982,  2984,  2987,  2989,  2992,  2997,
    3003,  3005,  3008,  3010,  3013,  3015,  3018,  3020,  3023,  3025,
    3028,  3030,  3033,  3038,  3044,  3048,  3052,  3054,  3058,  3062,
    3066,  3070,  3072,  3074,  3076,  3081,  3086,  3091,  3095,  3100,
    3105,  3110,  3114,  3116,  3120,  3125,  3129,  3134,  3139,  3144,
    3149,  3153,  3156,  3160,  3164,  3168,  3172,  3175,  3178,  3181,
    3185,  3190,  3192,  3194,  3197,  3201,  3205,  3209,  3213,  3216,
    3219,  3222,  3226,  3231,  3233,  3235,  3237,  3239,  3241,  3246,
    3248,  3250,  3252,  3254,  3256,  3258,  3260,  3262,  3264,  3269,
    3271,  3274,  3278,  3285,  3291,  3295,  3300,  3303,  3307,  3311,
    3315,  3319,  3324,  3329,  3334,  3337,  3341,  3345,  3349,  3354,
    3359,  3363,  3368,  3371,  3375,  3379,  3383,  3388,  3393,  3395,
    3398,  3401,  3405,  3407,  3409,  3412,  3415,  3419,  3421,  3423,
    3426,  3429,  3433,  3435,  3438,  3442,  3445,  3448,  3450,  3453,
    3457,  3460,  3462,  3465,  3469,  3473,  3475,  3478,  3482,  3486,
    3488,  3491,  3495,  3499,  3501,  3504,  3508,  3512,  3514,  3517,
    3521,  3525,  3527,  3531,  3536,  3538,  3543,  3546,  3552,  3556,
    3558,  3560,  3562,  3564,  3566,  3568,  3572,  3576,  3579,  3582,
    3584,  3586,  3590,  3593,  3597,  3599,  3603,  3607,  3611,  3615,
    3619,  3621,  3624,  3628,  3632,  3634,  3637,  3639,  3642,  3645,
    3648,  3651,  3655,  3657,  3659,  3663,  3667,  3669,  3673,  3678,
    3682,  3687,  3691,  3695,  3700,  3704,  3709,  3711,  3715,  3719,
    3724,  3728,  3732,  3736,  3741,  3743,  3747,  3751,  3755,  3759,
    3763,  3765,  3769,  3772,  3774,  3776,  3778,  3780,  3782,  3785,
    3787,  3789,  3791,  3793,  3796,  3799,  3802,  3804,  3806,  3808,
    3810,  3812,  3815,  3817,  3819,  3824,  3832,  3834,  3838,  3839,
    3846,  3855,  3866,  3879,  3888,  3899,  3910,  3916,  3924,  3934,
    3946,  3954,  3964,  3974,  3978,  3983,  3988,  3992,  3996,  4000,
    4005,  4010,  4014,  4018,  4022,  4027,  4032,  4036,  4039,  4043,
    4046,  4050,  4055,  4060,  4064,  4068,  4070,  4072,  4074,  4076,
    4078,  4081,  4085,  4088,  4091,  4094,  4098,  4102,  4105,  4111,
    4118,  4121,  4124,  4127,  4130,  4133,  4136,  4138,  4141,  4144,
    4148,  4150,  4153,  4155,  4158,  4161,  4163,  4166,  4169,  4172,
    4175,  4178,  4181,  4183,  4185,  4188,  4191,  4193,  4195,  4198,
    4201,  4203,  4206,  4209,  4211,  4214,  4216,  4219,  4222,  4228,
    4234,  4242,  4250,  4256,  4262,  4266,  4269,  4275,  4280,  4285,
    4293,  4300,  4307,  4313,  4321,  4328,  4333,  4341,  4351,  4355,
    4360,  4365,  4371,  4377,  4384,  4392,  4399,  4406,  4412,  4418,
    4423,  4427,  4430,  4432,  4435,  4440,  4444,  4450,  4455,  4459,
    4462,  4465,  4468,  4472,  4476,  4480,  4484,  4487,  4490,  4492,
    4494,  4499,  4503,  4508,  4512,  4516,  4519,  4524,  4528,  4533,
    4537,  4541,  4544,  4546,  4549,  4551,  4553,  4556,  4558,  4561,
    4565,  4569,  4571,  4574,  4577,  4580,  4584,  4589,  4594,  4597,
    4600,  4603,  4606,  4608,  4611,  4613,  4616,  4618,  4621,  4624,
    4626,  4629,  4631,  4634,  4637,  4640,  4643,  4645,  4648,  4651,
    4655,  4657,  4659,  4660,  4667,  4674,  4680,  4685,  4687,  4690,
    4693,  4695,  4699,  4703,  4708,  4710,  4712,  4715,  4718,  4725,
    4732,  4739
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     389,     0,    -1,   215,   118,    -1,   215,   119,    -1,   148,
      -1,   215,   215,    -1,    28,    -1,    28,    -1,   146,    -1,
     146,   119,   209,   120,    -1,   146,   119,   209,    11,    -1,
     298,   333,    -1,   331,    -1,   298,   121,   122,    -1,   123,
     298,   121,   122,    -1,    78,   298,   333,    -1,    78,   331,
      -1,   298,   334,    -1,   332,    -1,    78,   298,   334,    -1,
      78,   332,    -1,   149,   373,    -1,   152,   373,    -1,   152,
     124,    -1,   150,   373,    -1,   151,   373,    -1,   149,   124,
      -1,   149,   323,   124,    -1,   149,   374,    -1,   153,    -1,
     152,   374,    -1,   154,    -1,   154,   124,    -1,   297,   333,
      -1,   297,   335,    -1,   297,   334,    -1,   157,   373,    -1,
     157,   374,    -1,   158,    -1,   157,    -1,   223,   125,   338,
      -1,   338,    -1,   223,   125,   339,    -1,   223,   125,     1,
      -1,   339,    -1,   161,    -1,   163,   126,   161,    -1,   164,
     126,   161,    -1,   162,    -1,   163,   126,   162,    -1,   164,
     126,   162,    -1,   163,   126,     1,    -1,   164,   126,     1,
      -1,   126,    -1,   163,   124,    -1,   164,   124,    -1,   165,
      -1,   159,    -1,   168,   165,    -1,   168,   159,    -1,   166,
     165,    -1,   166,   159,    -1,   168,   124,    -1,   166,   124,
      -1,   124,    -1,   166,    -1,   163,    -1,   166,   163,    -1,
     168,   163,    -1,   160,    -1,   167,   160,    -1,   168,   160,
      -1,   166,   160,    -1,   166,   164,    -1,   164,    -1,   163,
       1,    -1,   170,   127,    -1,   170,     1,   127,    -1,   297,
     215,   128,   168,    -1,   297,   215,   128,   167,     1,    -1,
     297,   215,   128,   167,    -1,   297,   215,   128,    -1,   297,
     215,   128,     1,    -1,   172,   127,    -1,   172,     1,   127,
      -1,   298,   215,   128,   168,    -1,   298,   215,   128,   167,
       1,    -1,   298,   215,   128,   167,    -1,   298,   215,   128,
      -1,   298,   215,   128,     1,    -1,   299,   215,   128,   167,
     127,    -1,   299,   215,   128,   168,   127,    -1,   299,   215,
     128,   127,    -1,   175,   127,    -1,   175,     1,   127,    -1,
     148,   128,   167,    -1,   215,   128,   167,    -1,   148,   128,
     168,    -1,   148,   128,    -1,   148,   128,   167,     1,    -1,
     148,   128,     1,    -1,   215,   128,   168,    -1,   215,   128,
      -1,   215,   128,   167,     1,    -1,   215,   128,     1,    -1,
     177,   127,    -1,   177,     1,   127,    -1,   128,   168,    -1,
     128,   167,     1,    -1,   128,     1,    -1,   128,    -1,   128,
     167,    -1,   223,   125,   338,    -1,   223,   125,   339,    -1,
     223,   125,     1,    -1,   223,     1,    -1,   178,    -1,   180,
     126,   178,    -1,   181,   126,   178,    -1,   179,    -1,   180,
     126,   179,    -1,   181,   126,   179,    -1,   180,     1,    -1,
      68,   303,   215,   128,    -1,    68,   303,   327,   215,   128,
      -1,    68,   303,   128,    -1,    68,   303,   327,   128,    -1,
      68,     1,   128,    -1,   182,    -1,   183,    69,   373,    -1,
     183,    70,   373,    -1,   183,    95,   373,    -1,   183,    91,
      -1,   183,    97,   217,    -1,   183,   127,    -1,    99,   303,
     215,   128,    -1,    99,   303,   327,   215,   128,    -1,    99,
     303,   128,    -1,    99,   303,   327,   128,    -1,    99,     1,
     128,    -1,   185,    -1,   186,    69,   373,    -1,   186,    70,
     373,    -1,   186,   127,    -1,   215,    -1,   188,   215,    -1,
     188,   373,    -1,    73,   373,    -1,   189,    -1,   190,   189,
      -1,    88,   121,   188,   122,   373,    -1,    88,   121,   242,
     122,   128,   190,   127,    -1,   242,   129,    88,   121,   242,
     122,   128,   190,   127,    -1,    89,   121,   242,   126,   188,
     122,    -1,   242,   129,    89,   121,   242,   126,   188,   122,
      -1,    89,   121,   242,   122,    -1,   242,   129,    89,   121,
     242,   122,    -1,    90,    -1,    90,   188,    -1,   223,   129,
      90,    -1,   242,   129,    90,   188,    -1,   196,   124,    -1,
     180,   124,    -1,   155,    -1,   184,    -1,   361,   155,    -1,
     361,   184,    -1,   187,    -1,    91,    -1,    93,    -1,    94,
      -1,    99,   121,   215,   122,   125,   338,   124,    -1,   124,
      -1,   361,   130,    -1,   361,   121,   215,   122,    -1,   156,
      -1,   298,    -1,   298,   285,    -1,   361,   298,   285,    -1,
     361,   298,    -1,   361,   174,    -1,   361,   171,    -1,    98,
     298,   285,    -1,   191,    -1,    92,   215,    -1,    92,   148,
      -1,    96,   215,    -1,   174,    -1,   171,    -1,   180,    -1,
     172,     1,    -1,   175,     1,    -1,   361,   156,    -1,   361,
     172,     1,    -1,   361,   175,     1,    -1,   181,    -1,   195,
      -1,   197,   195,    -1,   198,   195,    -1,   196,    -1,   197,
       1,    -1,   198,     1,    -1,   197,   196,    -1,   198,   196,
      -1,   298,    -1,   298,   327,    -1,   298,    -1,   298,   327,
      -1,    65,   215,    -1,    65,   215,   125,   200,    -1,    65,
     215,   130,   199,    -1,    65,   215,   130,   199,   125,   200,
      -1,    65,   147,    -1,    65,   147,   125,   200,    -1,    65,
     147,   130,   199,    -1,    65,   147,   130,   199,   125,   200,
      -1,   215,    -1,   215,    -1,   215,   125,   202,    -1,   232,
      -1,   298,   215,   125,   204,    -1,   298,   327,   215,   125,
     204,    -1,   201,    -1,   203,    -1,   205,    -1,   206,    -1,
     207,   126,   206,    -1,   204,    -1,   202,    -1,   200,    -1,
     215,   125,   204,    -1,   215,   125,   202,    -1,   215,   125,
     200,    -1,   208,    -1,   209,   126,   208,    -1,    65,    -1,
     210,   215,    -1,   210,   146,    -1,   215,   210,   215,    -1,
     215,   210,   146,    -1,   210,   215,   119,   207,   120,    -1,
     210,   146,   119,   207,   120,    -1,   215,   210,   215,   119,
     207,   120,    -1,   215,   210,   146,   119,   207,   120,    -1,
     214,   127,    -1,   213,   124,    -1,   211,   128,   127,    -1,
     213,   128,   127,    -1,   210,   215,   124,    -1,   210,   145,
     124,    -1,   211,   130,   302,    -1,   211,   128,   198,    -1,
     213,   128,   198,    -1,   211,   128,   197,    -1,   213,   128,
     197,    -1,   211,   128,     1,    -1,   213,   128,     1,    -1,
       3,    -1,   219,    -1,   121,   244,   122,    -1,   384,    -1,
     131,   384,    -1,   131,   384,   129,   384,    -1,     4,    -1,
     215,    -1,   174,    -1,    85,   121,   373,   122,    -1,    85,
     121,   244,   122,    -1,    85,   121,   345,   122,   336,    -1,
      85,   121,   345,   122,   121,   345,   122,   336,    -1,   218,
     215,    -1,   218,    -1,   217,    -1,   121,   122,    -1,    71,
     305,   328,   132,   264,   133,    -1,    71,   305,   328,   132,
     265,   133,    -1,    71,   305,   132,   264,   133,    -1,    71,
     305,   132,   265,   133,    -1,   102,   305,   328,   132,   264,
     133,    -1,   102,   305,   328,   132,   265,   133,    -1,   102,
     305,   132,   264,   133,    -1,   102,   305,   132,   265,   133,
      -1,    72,   264,   304,   328,   132,   264,   133,    -1,    72,
     264,   304,   328,   132,   265,   133,    -1,    72,   264,   304,
     132,   264,   133,    -1,    72,   264,   304,   132,   265,   133,
      -1,   103,   264,   304,   328,   132,   264,   133,    -1,   103,
     264,   304,   328,   132,   265,   133,    -1,   103,   264,   304,
     132,   264,   133,    -1,   103,   264,   304,   132,   265,   133,
      -1,    65,   121,   297,   122,    -1,    65,   121,   297,   327,
     122,    -1,    65,   121,   215,   122,    -1,   104,   121,   242,
     126,   345,   122,    -1,    98,   121,   215,   122,    -1,   396,
      -1,   397,    -1,   398,    -1,   399,    -1,   132,   224,   133,
      -1,   132,   133,    -1,   176,    -1,   177,     1,    -1,   121,
     244,    -1,   121,   262,    -1,   216,    -1,   223,   132,   244,
     133,    -1,   223,   132,   262,   133,    -1,   223,   121,   122,
      -1,   223,   121,   224,   122,    -1,   223,   121,   225,   122,
      -1,   223,   129,   215,    -1,   223,     7,   215,    -1,   223,
       8,    -1,   223,     9,    -1,   246,   132,   244,   133,    -1,
     246,   132,   262,   133,    -1,   246,   121,   122,    -1,   246,
     121,   224,   122,    -1,   246,   129,   215,    -1,   246,     7,
     215,    -1,   246,     8,    -1,   246,     9,    -1,   242,    -1,
     220,    -1,   224,   126,   242,    -1,   224,   126,   220,    -1,
     261,    -1,   221,    -1,   224,   126,   261,    -1,   224,   126,
     221,    -1,   224,   126,    -1,     8,   227,    -1,     9,   227,
      -1,   228,   229,    -1,   228,   220,    -1,     6,   227,    -1,
       6,   121,   346,   122,    -1,     6,   121,    65,   145,   122,
      -1,     6,   121,    65,   144,   122,    -1,   109,   227,    -1,
     109,   121,   346,   122,    -1,   226,    -1,   223,    -1,   134,
      -1,   118,    -1,   135,    -1,   136,    -1,   123,    -1,   137,
      -1,    73,    -1,    84,    -1,   227,    -1,   121,   345,   122,
     229,    -1,   229,    -1,   230,   118,   229,    -1,   230,   138,
     229,    -1,   230,   139,   229,    -1,   250,   118,   229,    -1,
     250,   138,   229,    -1,   250,   139,   229,    -1,   230,    -1,
     231,   135,   230,    -1,   231,   136,   230,    -1,   251,   135,
     230,    -1,   251,   136,   230,    -1,   231,    -1,   232,    10,
     231,    -1,   232,    11,   231,    -1,   252,    10,   231,    -1,
     252,    11,   231,    -1,   234,   119,    -1,   232,    -1,   233,
     232,    -1,   234,   120,   232,    -1,   234,    12,   232,    -1,
     234,    13,   232,    -1,   253,   119,   232,    -1,   253,   120,
     232,    -1,   253,    12,   232,    -1,   253,    13,   232,    -1,
     234,    -1,   235,    14,   234,    -1,   235,    15,   234,    -1,
     254,    14,   234,    -1,   254,    15,   234,    -1,   235,    14,
     220,    -1,   235,    15,   220,    -1,   254,    14,   220,    -1,
     254,    15,   220,    -1,   235,    -1,   236,   134,   235,    -1,
     255,   134,   235,    -1,   236,   134,   220,    -1,   255,   134,
     220,    -1,   236,    -1,   237,   140,   236,    -1,   256,   140,
     236,    -1,   237,   140,   220,    -1,   256,   140,   220,    -1,
     237,    -1,   238,   141,   237,    -1,   257,   141,   237,    -1,
     238,   141,   220,    -1,   257,   141,   220,    -1,   238,    -1,
     239,    16,   238,    -1,   258,    16,   238,    -1,   239,    -1,
     240,    17,   239,    -1,   259,    17,   239,    -1,   240,    -1,
     240,   142,   244,   130,   241,    -1,   240,   142,   262,   130,
     241,    -1,   259,   142,   244,   130,   241,    -1,   259,   142,
     262,   130,   241,    -1,   240,   142,   245,   130,   241,    -1,
     240,   142,   263,   130,   241,    -1,   259,   142,   245,   130,
     241,    -1,   259,   142,   263,   130,   241,    -1,   240,   142,
     244,   130,   220,    -1,   240,   142,   262,   130,   220,    -1,
     259,   142,   244,   130,   220,    -1,   259,   142,   262,   130,
     220,    -1,   240,   142,   245,   130,   220,    -1,   240,   142,
     263,   130,   220,    -1,   259,   142,   245,   130,   220,    -1,
     259,   142,   263,   130,   220,    -1,   241,    -1,   227,   243,
     242,    -1,   248,   243,   242,    -1,   241,   243,   242,    -1,
     260,   243,   242,    -1,   227,   243,   220,    -1,   248,   243,
     220,    -1,   241,   243,   220,    -1,   260,   243,   220,    -1,
     125,    -1,    18,    -1,    19,    -1,    20,    -1,    21,    -1,
      22,    -1,    23,    -1,    24,    -1,    25,    -1,    26,    -1,
      27,    -1,   242,    -1,   244,   126,   242,    -1,   262,   126,
     242,    -1,   262,   122,    -1,   220,    -1,   244,   126,   220,
      -1,   262,   126,   220,    -1,   222,    -1,     1,    -1,   223,
       1,    -1,   175,     1,    -1,   223,     7,     1,    -1,   246,
       7,     1,    -1,   223,   121,   224,    -1,   223,   121,   225,
      -1,   223,   129,     1,    -1,   246,   121,   225,    -1,   246,
     129,     1,    -1,     8,   248,    -1,     9,   248,    -1,   228,
     249,    -1,   228,   221,    -1,     6,   248,    -1,     6,   121,
     346,   122,     1,    -1,     6,   121,    65,   145,   122,     1,
      -1,     6,   121,    65,   144,   122,     1,    -1,   109,   248,
      -1,   109,   121,   346,   122,     1,    -1,   247,    -1,   246,
      -1,   248,    -1,   121,   345,   122,   249,    -1,   249,    -1,
     230,   118,   249,    -1,   230,   138,   249,    -1,   230,   139,
     249,    -1,   250,   118,   249,    -1,   250,   138,   249,    -1,
     250,   139,   249,    -1,   250,    -1,   231,   135,   250,    -1,
     231,   136,   250,    -1,   251,   135,   250,    -1,   251,   136,
     250,    -1,   251,    -1,   232,    10,   251,    -1,   232,    11,
     251,    -1,   252,    10,   251,    -1,   252,    11,   251,    -1,
     252,    -1,   233,   252,    -1,   234,   120,   252,    -1,   234,
      12,   252,    -1,   234,    13,   252,    -1,   253,   119,   252,
      -1,   253,   120,   252,    -1,   253,    12,   252,    -1,   253,
      13,   252,    -1,   253,    -1,   235,    14,   253,    -1,   235,
      15,   253,    -1,   254,    14,   253,    -1,   254,    15,   253,
      -1,   235,    14,   221,    -1,   235,    15,   221,    -1,   254,
      14,   221,    -1,   254,    15,   221,    -1,   254,    -1,   236,
     134,   254,    -1,   255,   134,   254,    -1,   236,   134,   221,
      -1,   255,   134,   221,    -1,   255,    -1,   237,   140,   255,
      -1,   256,   140,   255,    -1,   237,   140,   221,    -1,   256,
     140,   221,    -1,   256,    -1,   238,   141,   256,    -1,   257,
     141,   256,    -1,   238,   141,   221,    -1,   257,   141,   221,
      -1,   257,    -1,   239,    16,   257,    -1,   258,    16,   257,
      -1,   258,    -1,   240,    17,   258,    -1,   259,    17,   258,
      -1,   259,    -1,   240,   142,   244,   130,   259,    -1,   240,
     142,   262,   130,   259,    -1,   259,   142,   244,   130,   259,
      -1,   259,   142,   262,   130,   259,    -1,   240,   142,   244,
     130,    -1,   240,   142,   262,   130,    -1,   259,   142,   244,
     130,    -1,   259,   142,   262,   130,    -1,   240,   142,   245,
     130,   259,    -1,   240,   142,   263,   130,   259,    -1,   259,
     142,   245,   130,   259,    -1,   259,   142,   263,   130,   259,
      -1,   240,   142,   245,   130,    -1,   240,   142,   263,   130,
      -1,   259,   142,   245,   130,    -1,   259,   142,   263,   130,
      -1,   240,   142,   244,   130,   221,    -1,   240,   142,   262,
     130,   221,    -1,   259,   142,   244,   130,   221,    -1,   259,
     142,   262,   130,   221,    -1,   240,   142,   245,   130,   221,
      -1,   240,   142,   263,   130,   221,    -1,   259,   142,   245,
     130,   221,    -1,   259,   142,   263,   130,   221,    -1,   240,
     142,   130,    -1,   259,   142,   130,    -1,   240,   142,    -1,
     259,   142,    -1,   260,    -1,   227,   243,   261,    -1,   248,
     243,   261,    -1,   227,   243,   221,    -1,   248,   243,   221,
      -1,   261,    -1,   242,     1,    -1,   244,   126,   261,    -1,
     262,   126,   261,    -1,   244,   244,    -1,   262,   244,    -1,
     244,   262,    -1,   221,    -1,   220,     1,    -1,   244,   126,
     221,    -1,   262,   126,   221,    -1,   241,    -1,   260,    -1,
      29,    -1,    30,    -1,    31,    -1,   117,    -1,    32,    -1,
      33,    -1,   116,    -1,    29,    -1,    30,    -1,    31,    -1,
     117,    -1,    32,    -1,    33,    -1,   116,    -1,   215,    -1,
     215,   125,   264,    -1,   215,   125,   265,    -1,   268,    -1,
     269,   126,   268,    -1,   269,   126,    -1,    50,    -1,   270,
     215,    -1,   270,   148,    -1,   273,   127,    -1,   270,   215,
     128,   127,    -1,   270,   148,   128,   127,    -1,   270,   128,
     269,    -1,   270,   128,     1,    -1,   270,   215,   128,   269,
      -1,   270,   215,   128,   269,     1,    -1,   270,   215,   128,
       1,    -1,   270,   215,   128,   269,   124,   197,    -1,   270,
     215,   128,   269,   124,   198,    -1,   270,   148,   128,   269,
      -1,   270,   148,   128,   269,     1,    -1,   270,   148,   128,
       1,    -1,   270,   148,   128,   269,   124,   197,    -1,   270,
     148,   128,   269,   124,   198,    -1,   270,   215,    -1,   270,
     148,    -1,   276,   127,    -1,   274,   130,   302,   128,   127,
      -1,   274,   128,   127,    -1,   274,   130,   302,   128,   269,
      -1,   274,   130,   302,   128,   269,     1,    -1,   274,   130,
     302,   128,     1,    -1,   274,   130,   302,   128,   269,   124,
     197,    -1,   274,   130,   302,   128,   269,   124,   198,    -1,
     274,   130,   302,   128,   269,     1,   124,   197,    -1,   274,
     130,   302,   128,   269,     1,   124,   198,    -1,   274,   130,
     302,   128,     1,   124,   197,    -1,   274,   130,   302,   128,
       1,   124,   198,    -1,   270,   128,   269,    -1,   270,   128,
       1,    -1,   274,   128,   269,    -1,   274,   128,   269,     1,
      -1,   274,   128,     1,    -1,   274,   128,   269,   124,   197,
      -1,   274,   128,   269,   124,   198,    -1,   275,    -1,   292,
      -1,   276,    -1,   293,    -1,   318,    -1,    44,    -1,    45,
      -1,   279,    -1,   280,    -1,   281,   280,    -1,    46,    -1,
      34,    -1,    35,    -1,    36,    -1,    37,    -1,    38,    -1,
      47,    -1,    39,    -1,    42,    -1,    43,    -1,    40,    -1,
      41,    -1,    85,    -1,   289,    -1,   271,    -1,   145,    -1,
      87,   121,   242,   122,    -1,   100,   121,   145,   122,    -1,
     100,   121,   215,   122,    -1,    66,    -1,    82,    -1,    83,
      -1,   113,    -1,   112,    -1,   114,    -1,   115,    -1,    46,
      -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,    38,
      -1,    47,    -1,    39,    -1,    42,    -1,    43,    -1,    40,
      -1,    41,    -1,    85,    -1,   289,    -1,   271,    -1,   148,
      -1,   113,    -1,   112,    -1,   114,    -1,   115,    -1,    87,
     121,   242,   122,    -1,   100,   121,   145,   122,    -1,   100,
     121,   215,   122,    -1,    66,    -1,   335,    -1,   335,   323,
      -1,   130,   264,    -1,   335,   130,   264,    -1,   335,   130,
     264,   130,   264,    -1,   130,   265,    -1,   335,   130,   265,
      -1,   335,   130,   264,   130,   265,    -1,   335,   130,   265,
     130,   265,    -1,   335,   130,   265,   130,   264,    -1,   284,
      -1,   285,   126,   284,    -1,   294,   215,    -1,   294,   146,
      -1,   294,   318,   215,    -1,   294,   318,   146,    -1,   288,
     127,    -1,   286,   128,   127,    -1,   294,   128,   127,    -1,
     294,   318,   128,   127,    -1,   286,   128,   197,    -1,   286,
     128,   198,    -1,   286,   128,     1,    -1,   294,   128,   197,
      -1,   294,   128,   198,    -1,   294,   128,     1,    -1,   294,
     318,   128,   197,    -1,   294,   318,   128,   198,    -1,   294,
     318,   128,     1,    -1,   286,    -1,   286,    -1,   286,   119,
     207,   120,    -1,   290,   130,   302,    -1,   293,   127,    -1,
     291,   128,   127,    -1,   290,   128,   127,    -1,   294,   128,
     127,    -1,   291,   128,   197,    -1,   291,   128,   198,    -1,
     291,   128,     1,    -1,   290,   128,   197,    -1,   290,   128,
     198,    -1,   290,   128,     1,    -1,   294,   128,   197,    -1,
     294,   128,   198,    -1,   294,   128,     1,    -1,    48,    -1,
      49,    -1,   280,    -1,   295,   280,    -1,   282,    -1,   295,
     282,    -1,   272,    -1,   295,   272,    -1,   287,    -1,   295,
     287,    -1,   280,    -1,   296,   280,    -1,   282,    -1,   296,
     282,    -1,   144,    -1,   296,   144,    -1,   272,    -1,   296,
     272,    -1,   287,    -1,   296,   287,    -1,   266,    -1,   297,
     266,    -1,   280,    -1,   297,   280,    -1,   283,    -1,   297,
     283,    -1,   272,    -1,   297,   272,    -1,   287,    -1,   297,
     287,    -1,   266,    -1,   298,   266,    -1,   280,    -1,   298,
     280,    -1,   282,    -1,   298,   282,    -1,   144,    -1,   298,
     144,    -1,   287,    -1,   298,   287,    -1,   272,    -1,   298,
     272,    -1,   267,    -1,   299,   267,    -1,   280,    -1,   299,
     280,    -1,   282,    -1,   299,   282,    -1,   144,    -1,   299,
     144,    -1,   277,    -1,   299,   277,    -1,   278,    -1,   299,
     278,    -1,    81,    -1,    80,    -1,   266,    -1,   301,   266,
      -1,   280,    -1,   301,   280,    -1,   283,    -1,   301,   283,
      -1,   215,    -1,   301,   215,    -1,   215,   119,   209,   120,
      -1,   301,   215,   119,   209,   120,    -1,   301,    -1,   294,
      -1,   266,    -1,   303,   266,    -1,   280,    -1,   303,   280,
      -1,   283,    -1,   303,   283,    -1,   215,    -1,   303,   215,
      -1,   215,   119,   209,   120,    -1,   303,   215,   119,   209,
     120,    -1,   266,    -1,   304,   266,    -1,   280,    -1,   304,
     280,    -1,   283,    -1,   304,   283,    -1,   287,    -1,   304,
     287,    -1,   272,    -1,   304,   272,    -1,   215,    -1,   304,
     215,    -1,   215,   119,   209,   120,    -1,   304,   215,   119,
     209,   120,    -1,   266,    -1,   305,   266,    -1,   280,    -1,
     305,   280,    -1,   283,    -1,   305,   283,    -1,   287,    -1,
     305,   287,    -1,   272,    -1,   305,   272,    -1,   215,    -1,
     305,   215,    -1,   215,   119,   209,   120,    -1,   305,   215,
     119,   209,   120,    -1,   307,   126,     1,    -1,   306,   126,
       1,    -1,   215,    -1,   307,   126,   215,    -1,   306,   126,
     215,    -1,   349,   126,   215,    -1,   350,   126,   215,    -1,
     309,    -1,   146,    -1,    37,    -1,   146,   132,   264,   133,
      -1,   146,   132,   265,   133,    -1,   146,   132,   145,   133,
      -1,   146,   132,   133,    -1,   308,   132,   264,   133,    -1,
     308,   132,   265,   133,    -1,   308,   132,   145,   133,    -1,
     308,   132,   133,    -1,   215,    -1,   121,   329,   122,    -1,
     121,   318,   329,   122,    -1,   121,   330,   122,    -1,   121,
     318,   330,   122,    -1,   309,   132,   264,   133,    -1,   309,
     132,   265,   133,    -1,   309,   132,   145,   133,    -1,   309,
     132,   133,    -1,   309,   121,    -1,   310,   351,   122,    -1,
     310,   352,   122,    -1,   310,   307,   122,    -1,   310,   306,
     122,    -1,   310,   122,    -1,   310,   306,    -1,   310,     1,
      -1,   310,   349,   121,    -1,   310,   298,   215,   121,    -1,
     311,    -1,   309,    -1,   308,   121,    -1,   314,   351,   122,
      -1,   314,   352,   122,    -1,   314,   307,   122,    -1,   314,
     306,   122,    -1,   314,   122,    -1,   314,   306,    -1,   314,
       1,    -1,   314,   349,   121,    -1,   314,   298,   215,   121,
      -1,   315,    -1,   308,    -1,    74,    -1,    75,    -1,   323,
      -1,    86,   121,   384,   122,    -1,    79,    -1,   110,    -1,
     111,    -1,     3,    -1,    28,    -1,    75,    -1,    74,    -1,
      44,    -1,   320,    -1,   320,   121,   244,   122,    -1,   321,
      -1,   322,   321,    -1,   322,   126,   321,    -1,   319,   121,
     121,   322,   122,   122,    -1,   319,   121,   121,   122,   122,
      -1,   121,   327,   122,    -1,   121,   318,   327,   122,    -1,
     132,   133,    -1,   132,   264,   133,    -1,   132,   265,   133,
      -1,   132,   145,   133,    -1,   324,   132,   133,    -1,   324,
     132,   264,   133,    -1,   324,   132,   145,   133,    -1,   324,
     132,   265,   133,    -1,   121,   122,    -1,   121,   351,   122,
      -1,   121,   352,   122,    -1,   324,   121,   122,    -1,   324,
     121,   351,   122,    -1,   324,   121,   352,   122,    -1,   121,
     328,   122,    -1,   121,   318,   328,   122,    -1,   121,   122,
      -1,   121,   351,   122,    -1,   121,   352,   122,    -1,   325,
     121,   122,    -1,   325,   121,   351,   122,    -1,   325,   121,
     352,   122,    -1,   118,    -1,   118,   281,    -1,   118,   326,
      -1,   118,   281,   326,    -1,   326,    -1,   324,    -1,   326,
     324,    -1,   318,   326,    -1,   318,   326,   324,    -1,   326,
      -1,   325,    -1,   326,   325,    -1,   318,   326,    -1,   318,
     326,   325,    -1,   313,    -1,   326,   313,    -1,   318,   326,
     313,    -1,   329,   318,    -1,   335,   318,    -1,   317,    -1,
     326,   317,    -1,   318,   326,   317,    -1,   330,   318,    -1,
     311,    -1,   326,   311,    -1,   318,   326,   311,    -1,   326,
     318,   311,    -1,   312,    -1,   326,   312,    -1,   318,   326,
     312,    -1,   326,   318,   312,    -1,   315,    -1,   326,   315,
      -1,   318,   326,   315,    -1,   326,   318,   315,    -1,   316,
      -1,   326,   316,    -1,   318,   326,   316,    -1,   326,   318,
     316,    -1,   308,    -1,   326,   308,    -1,   318,   326,   308,
      -1,   326,   318,   308,    -1,   242,    -1,   128,   340,   127,
      -1,   128,   340,   126,   127,    -1,   261,    -1,   128,   340,
     127,     1,    -1,   128,   340,    -1,   128,   340,   126,   127,
       1,    -1,   128,   340,   126,    -1,   241,    -1,   220,    -1,
     260,    -1,   221,    -1,   336,    -1,   337,    -1,   340,   126,
     336,    -1,   340,   126,   337,    -1,   340,   336,    -1,   340,
     337,    -1,   329,    -1,   330,    -1,   329,   125,   336,    -1,
     329,     1,    -1,   329,   125,   337,    -1,   341,    -1,   343,
     126,   341,    -1,    37,   126,   341,    -1,    38,   126,   341,
      -1,   146,   126,   341,    -1,   344,   126,   341,    -1,   342,
      -1,   341,     1,    -1,   343,   126,   342,    -1,   344,   126,
     342,    -1,   295,    -1,   295,   327,    -1,   296,    -1,   296,
     327,    -1,   298,   330,    -1,   298,   327,    -1,   298,   134,
      -1,   298,   134,   330,    -1,   298,    -1,    65,    -1,   298,
     330,     1,    -1,   298,   327,     1,    -1,   347,    -1,   349,
     126,   347,    -1,   349,     1,   126,   347,    -1,   350,   126,
     347,    -1,   350,     1,   126,   347,    -1,     1,   126,   347,
      -1,   307,   126,   347,    -1,   307,     1,   126,   347,    -1,
     306,   126,   347,    -1,   306,     1,   126,   347,    -1,   348,
      -1,   349,   126,   348,    -1,   350,   126,   348,    -1,   350,
       1,   126,   348,    -1,     1,   126,   348,    -1,   307,   126,
     348,    -1,   306,   126,   348,    -1,   306,     1,   126,   348,
      -1,   349,    -1,   349,   126,    51,    -1,   350,   126,    51,
      -1,   307,   126,    51,    -1,   306,   126,    51,    -1,     1,
     126,    51,    -1,   350,    -1,   349,   126,     1,    -1,   350,
       1,    -1,   358,    -1,   323,    -1,   373,    -1,   124,    -1,
     130,    -1,   244,   124,    -1,   376,    -1,   378,    -1,   380,
      -1,   357,    -1,   194,   124,    -1,   193,   124,    -1,   192,
     124,    -1,   359,    -1,   379,    -1,   374,    -1,   377,    -1,
     381,    -1,   380,     1,    -1,   262,    -1,   384,    -1,   384,
     121,   242,   122,    -1,   132,   215,   133,   384,   121,   242,
     122,    -1,   355,    -1,   356,   126,   355,    -1,    -1,    86,
     280,   121,   384,   122,   124,    -1,    86,   280,   121,   384,
     130,   356,   122,   124,    -1,    86,   280,   121,   384,   130,
     356,   130,   356,   122,   124,    -1,    86,   280,   121,   384,
     130,   356,   130,   356,   130,   356,   122,   124,    -1,    86,
     280,   121,   384,     3,   356,   122,   124,    -1,    86,   280,
     121,   384,     3,   356,   130,   356,   122,   124,    -1,    86,
     280,   121,   384,   130,   356,     3,   356,   122,   124,    -1,
      86,   121,   384,   122,   124,    -1,    86,   121,   384,   130,
     356,   122,   124,    -1,    86,   121,   384,   130,   356,   130,
     356,   122,   124,    -1,    86,   121,   384,   130,   356,   130,
     356,   130,   356,   122,   124,    -1,    86,   121,   384,     3,
     356,   122,   124,    -1,    86,   121,   384,     3,   356,   130,
     356,   122,   124,    -1,    86,   121,   384,   130,   356,     3,
     356,   122,   124,    -1,   215,   130,   353,    -1,    52,   264,
     130,   353,    -1,    52,   265,   130,   353,    -1,    52,   130,
     353,    -1,    53,   130,   353,    -1,   215,   130,   362,    -1,
      52,   264,   130,   362,    -1,    52,   265,   130,   362,    -1,
      52,   130,   362,    -1,    53,   130,   362,    -1,   215,   130,
     354,    -1,    52,   264,   130,   354,    -1,    52,   265,   130,
     354,    -1,    52,   130,   354,    -1,    52,   130,    -1,    53,
     130,   354,    -1,    53,   130,    -1,   215,   130,   365,    -1,
      52,   264,   130,   365,    -1,    52,   265,   130,   365,    -1,
      52,   130,   365,    -1,    53,   130,   365,    -1,    80,    -1,
      81,    -1,    53,    -1,    80,    -1,    81,    -1,   297,   124,
      -1,   297,   343,   124,    -1,   169,   124,    -1,   365,   124,
      -1,   299,   124,    -1,   299,   343,   124,    -1,   300,   343,
     124,    -1,   173,   124,    -1,    77,   215,   125,   241,   124,
      -1,    31,    77,   215,   125,   241,   124,    -1,   299,     1,
      -1,   297,     1,    -1,   365,     1,    -1,   170,     1,    -1,
     169,     1,    -1,   297,   344,    -1,   362,    -1,   366,   362,
      -1,   367,   362,    -1,   366,     1,   124,    -1,   365,    -1,
     366,   365,    -1,   353,    -1,   368,   353,    -1,   369,   353,
      -1,   354,    -1,   368,   354,    -1,   369,   354,    -1,   368,
     362,    -1,   369,   362,    -1,   368,   365,    -1,   369,   365,
      -1,   368,    -1,   366,    -1,   366,   368,    -1,   367,   368,
      -1,   369,    -1,   367,    -1,   366,   369,    -1,   367,   369,
      -1,   128,    -1,   374,   127,    -1,   372,   371,    -1,   372,
      -1,   372,   370,    -1,   124,    -1,   244,   124,    -1,   262,
     124,    -1,    54,   121,   244,   122,   353,    -1,    54,   121,
     262,   122,   353,    -1,    54,   121,   244,   122,   353,    64,
     353,    -1,    54,   121,   262,   122,   353,    64,   353,    -1,
      55,   121,   244,   122,   353,    -1,    55,   121,   262,   122,
     353,    -1,    54,   121,   262,    -1,   376,     1,    -1,    56,
     121,   244,   122,   353,    -1,    56,   121,   262,   353,    -1,
      56,   121,   122,   353,    -1,    57,   353,    56,   121,   244,
     122,   124,    -1,    57,   353,    56,   121,   262,   124,    -1,
      58,   121,   375,   375,   122,   353,    -1,    58,   121,   375,
     122,   353,    -1,    58,   121,   375,   375,   244,   122,   353,
      -1,    58,   121,   375,   375,   262,   353,    -1,    58,   121,
     122,   353,    -1,    58,   121,   215,   130,   244,   122,   353,
      -1,    58,   121,   215,   130,   244,   124,   244,   122,   353,
      -1,    58,   121,     1,    -1,    58,   121,   262,     1,    -1,
      58,   121,   375,     1,    -1,    58,   121,   375,   262,     1,
      -1,    58,   121,   375,   375,   262,    -1,    58,   121,   375,
     375,   122,   354,    -1,    58,   121,   375,   375,   244,   122,
     354,    -1,    58,   121,   375,   375,   262,   354,    -1,    57,
     353,    56,   121,   244,   122,    -1,    57,   353,    56,   121,
     244,    -1,    57,   353,    56,   121,   262,    -1,    57,   353,
      56,   121,    -1,    57,   353,    56,    -1,    57,   353,    -1,
      57,    -1,    56,     1,    -1,    56,   121,   122,     1,    -1,
      56,   121,   262,    -1,    56,   121,   244,   122,   354,    -1,
      56,   121,   262,   354,    -1,    59,   215,   124,    -1,    60,
     124,    -1,    61,   124,    -1,    62,   124,    -1,    62,   244,
     124,    -1,    62,   262,   124,    -1,    62,   220,   124,    -1,
      62,   221,   124,    -1,    62,   262,    -1,    62,   221,    -1,
      62,    -1,    59,    -1,   299,   331,   366,   373,    -1,   299,
     331,   373,    -1,   299,   333,   366,   373,    -1,   299,   333,
     373,    -1,   331,   366,   373,    -1,   331,   373,    -1,   299,
     331,   366,   374,    -1,   299,   331,   374,    -1,   299,   333,
     366,   374,    -1,   299,   333,   374,    -1,   331,   366,   374,
      -1,   331,   374,    -1,     5,    -1,   384,     5,    -1,   382,
      -1,   212,    -1,   299,   212,    -1,   363,    -1,    76,   384,
      -1,    76,    31,   384,    -1,    76,   215,   384,    -1,   124,
      -1,   360,   382,    -1,   360,   212,    -1,   360,   363,    -1,
     360,    76,   384,    -1,   360,    76,    31,   384,    -1,   360,
      76,   215,   384,    -1,   360,   130,    -1,    31,   130,    -1,
     101,   215,    -1,   101,   148,    -1,   390,    -1,   360,   390,
      -1,   214,    -1,   299,   214,    -1,   383,    -1,   360,   214,
      -1,   360,   383,    -1,   364,    -1,   360,   364,    -1,   386,
      -1,   388,   386,    -1,   387,   386,    -1,   388,     1,    -1,
     387,     1,    -1,   385,    -1,   388,   385,    -1,   387,   212,
      -1,   387,   360,   212,    -1,   388,    -1,   387,    -1,    -1,
     105,   384,   215,   128,   395,   127,    -1,   105,   384,   148,
     128,   395,   127,    -1,   105,   384,   128,   395,   127,    -1,
     298,   215,   384,   124,    -1,   215,    -1,   120,   215,    -1,
     119,   215,    -1,   392,    -1,   393,   126,   392,    -1,   107,
     393,   124,    -1,   107,   393,   215,   124,    -1,   391,    -1,
     394,    -1,   395,   391,    -1,   395,   394,    -1,   108,   121,
     242,   126,   242,   122,    -1,   106,   121,   384,   126,   215,
     122,    -1,   107,   121,   384,   126,   215,   122,    -1,   105,
     121,   384,   122,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   280,   280,   309,   368,   369,   479,   483,   486,   487,
     488,   537,   539,   544,   549,   554,   556,   561,   563,   568,
     570,   575,   577,   579,   581,   583,   587,   591,   604,   606,
     608,   610,   612,   618,   620,   625,   630,   635,   637,   639,
     644,   645,   649,   650,   661,   665,   666,   668,   673,   674,
     676,   679,   691,   702,   721,   723,   728,   729,   730,   731,
     732,   733,   734,   735,   748,   752,   753,   754,   755,   759,
     760,   761,   762,   763,   764,   765,   769,   771,   776,   778,
     780,   782,   784,   814,   816,   821,   823,   825,   827,   829,
     858,   860,   862,   867,   869,   874,   876,   880,   882,   884,
     886,   891,   894,   897,   900,   965,   967,   972,   974,   976,
     978,   980,  1011,  1015,  1016,  1017,  1021,  1022,  1023,  1027,
    1028,  1029,  1030,  1034,  1037,  1040,  1043,  1046,  1051,  1052,
    1054,  1056,  1058,  1060,  1065,  1069,  1072,  1075,  1078,  1081,
    1086,  1087,  1089,  1094,  1098,  1100,  1105,  1107,  1112,  1114,
    1119,  1124,  1126,  1131,  1133,  1135,  1137,  1142,  1144,  1146,
    1148,  1153,  1154,  1155,  1156,  1157,  1158,  1159,  1160,  1161,
    1162,  1163,  1165,  1166,  1168,  1172,  1175,  1176,  1177,  1178,
    1179,  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1187,  1188,
    1190,  1191,  1195,  1196,  1197,  1201,  1205,  1206,  1207,  1211,
    1212,  1213,  1214,  1215,  1219,  1220,  1232,  1233,  1237,  1238,
    1239,  1240,  1241,  1242,  1243,  1244,  1248,  1252,  1253,  1257,
    1265,  1266,  1270,  1271,  1272,  1276,  1277,  1281,  1282,  1283,
    1284,  1285,  1286,  1326,  1327,  1331,  1339,  1340,  1348,  1349,
    1351,  1352,  1361,  1362,  1366,  1373,  1380,  1386,  1393,  1399,
    1408,  1415,  1421,  1427,  1433,  1439,  1445,  1456,  1461,  1462,
    1467,  1468,  1469,  1473,  1477,  1478,  1479,  1480,  1481,  1482,
    1483,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,  1504,
    1505,  1506,  1507,  1508,  1509,  1510,  1511,  1512,  1513,  1514,
    1515,  1516,  1517,  1518,  1520,  1521,  1522,  1523,  1524,  1526,
    1527,  1531,  1535,  1539,  1540,  1544,  1546,  1547,  1548,  1549,
    1550,  1551,  1552,  1553,  1554,  1556,  1557,  1558,  1559,  1560,
    1561,  1562,  1563,  1590,  1591,  1592,  1593,  1597,  1598,  1599,
    1600,  1601,  1605,  1606,  1607,  1608,  1610,  1611,  1612,  1613,
    1616,  1617,  1621,  1622,  1631,  1632,  1633,  1634,  1635,  1636,
    1637,  1638,  1642,  1643,  1647,  1648,  1649,  1650,  1651,  1652,
    1653,  1657,  1658,  1659,  1660,  1661,  1665,  1666,  1667,  1668,
    1669,  1673,  1681,  1682,  1683,  1684,  1685,  1686,  1687,  1688,
    1689,  1693,  1694,  1695,  1696,  1697,  1699,  1700,  1701,  1702,
    1706,  1707,  1708,  1710,  1711,  1715,  1716,  1717,  1719,  1720,
    1724,  1725,  1726,  1728,  1729,  1733,  1734,  1735,  1739,  1740,
    1741,  1745,  1746,  1747,  1748,  1749,  1751,  1752,  1753,  1754,
    1756,  1757,  1758,  1759,  1761,  1762,  1763,  1764,  1768,  1769,
    1770,  1771,  1772,  1774,  1775,  1776,  1777,  1781,  1782,  1783,
    1784,  1785,  1786,  1787,  1788,  1789,  1790,  1791,  1795,  1796,
    1797,  1798,  1802,  1803,  1804,  1808,  1809,  1810,  1811,  1813,
    1814,  1816,  1817,  1822,  1824,  1829,  1857,  1858,  1859,  1860,
    1862,  1863,  1864,  1865,  1867,  1868,  1872,  1873,  1882,  1883,
    1887,  1888,  1889,  1890,  1891,  1892,  1893,  1897,  1898,  1902,
    1906,  1910,  1917,  1918,  1919,  1920,  1921,  1925,  1926,  1977,
    1978,  1979,  1980,  1981,  1982,  1983,  1987,  1988,  1989,  1990,
    1991,  1998,  1999,  2000,  2001,  2005,  2006,  2007,  2009,  2010,
    2014,  2015,  2016,  2018,  2019,  2023,  2024,  2025,  2027,  2028,
    2032,  2033,  2034,  2038,  2039,  2040,  2044,  2045,  2046,  2047,
    2048,  2049,  2050,  2051,  2052,  2054,  2055,  2056,  2057,  2058,
    2059,  2060,  2061,  2063,  2064,  2065,  2066,  2068,  2069,  2070,
    2071,  2073,  2081,  2085,  2090,  2097,  2098,  2102,  2107,  2108,
    2112,  2113,  2114,  2115,  2121,  2122,  2123,  2127,  2128,  2129,
    2130,  2134,  2136,  2140,  2141,  2142,  2143,  2144,  2145,  2146,
    2150,  2151,  2152,  2153,  2154,  2155,  2156,  2160,  2161,  2162,
    2166,  2167,  2168,  2172,  2176,  2177,  2181,  2182,  2183,  2187,
    2188,  2190,  2191,  2192,  2193,  2194,  2196,  2197,  2198,  2199,
    2200,  2204,  2205,  2209,  2210,  2211,  2215,  2216,  2217,  2218,
    2219,  2220,  2221,  2222,  2223,  2225,  2226,  2228,  2229,  2230,
    2231,  2232,  2236,  2237,  2241,  2242,  2246,  2250,  2251,  2252,
    2257,  2258,  2262,  2263,  2264,  2265,  2266,  2267,  2268,  2269,
    2270,  2271,  2272,  2273,  2274,  2275,  2276,  2277,  2278,  2279,
    2280,  2281,  2282,  2283,  2284,  2285,  2286,  2287,  2291,  2292,
    2293,  2294,  2295,  2296,  2297,  2298,  2299,  2300,  2301,  2302,
    2303,  2304,  2305,  2306,  2307,  2308,  2309,  2310,  2311,  2312,
    2313,  2314,  2320,  2322,  2324,  2326,  2328,  2330,  2332,  2334,
    2336,  2338,  2343,  2344,  2348,  2354,  2360,  2367,  2377,  2378,
    2379,  2380,  2384,  2385,  2386,  2388,  2389,  2390,  2392,  2393,
    2394,  2398,  2402,  2410,  2419,  2428,  2429,  2431,  2432,  2436,
    2443,  2450,  2453,  2466,  2480,  2483,  2485,  2487,  2492,  2493,
    2497,  2498,  2499,  2500,  2501,  2502,  2503,  2504,  2508,  2509,
    2510,  2511,  2512,  2513,  2514,  2515,  2516,  2517,  2521,  2522,
    2523,  2524,  2525,  2526,  2527,  2528,  2529,  2530,  2534,  2535,
    2536,  2537,  2538,  2539,  2540,  2541,  2542,  2543,  2544,  2545,
    2549,  2550,  2551,  2552,  2553,  2554,  2555,  2556,  2557,  2558,
    2562,  2563,  2567,  2568,  2569,  2570,  2571,  2572,  2573,  2574,
    2575,  2577,  2579,  2597,  2615,  2616,  2620,  2621,  2622,  2623,
    2624,  2625,  2626,  2627,  2628,  2646,  2663,  2664,  2665,  2666,
    2667,  2668,  2669,  2670,  2671,  2672,  2673,  2674,  2675,  2693,
    2710,  2711,  2712,  2713,  2714,  2715,  2716,  2717,  2718,  2719,
    2720,  2721,  2722,  2740,  2757,  2758,  2762,  2763,  2764,  2765,
    2766,  2770,  2771,  2778,  2780,  2789,  2798,  2807,  2816,  2817,
    2818,  2819,  2823,  2824,  2825,  2826,  2827,  2828,  2829,  2830,
    2831,  2835,  2839,  2840,  2841,  2842,  2843,  2848,  2857,  2866,
    2875,  2889,  2890,  2895,  2899,  2900,  2901,  2902,  2903,  2908,
    2917,  2926,  2935,  2949,  2950,  2999,  3000,  3001,  3002,  3014,
    3015,  3016,  3021,  3022,  3023,  3024,  3025,  3029,  3030,  3034,
    3035,  3036,  3040,  3041,  3045,  3046,  3047,  3048,  3049,  3050,
    3051,  3052,  3053,  3054,  3055,  3056,  3057,  3058,  3059,  3060,
    3064,  3065,  3066,  3067,  3068,  3069,  3070,  3071,  3075,  3076,
    3077,  3078,  3082,  3083,  3084,  3085,  3086,  3090,  3091,  3092,
    3093,  3094,  3098,  3099,  3101,  3103,  3105,  3110,  3111,  3113,
    3115,  3120,  3121,  3122,  3123,  3127,  3128,  3129,  3130,  3134,
    3135,  3136,  3137,  3141,  3142,  3143,  3144,  3148,  3149,  3150,
    3151,  3155,  3156,  3157,  3174,  3175,  3176,  3177,  3190,  3207,
    3208,  3213,  3214,  3218,  3219,  3220,  3221,  3224,  3225,  3229,
    3230,  3231,  3235,  3239,  3243,  3244,  3245,  3246,  3247,  3256,
    3265,  3266,  3267,  3268,  3272,  3273,  3277,  3278,  3283,  3284,
    3285,  3286,  3287,  3288,  3307,  3308,  3312,  3313,  3314,  3315,
    3316,  3317,  3319,  3320,  3321,  3322,  3326,  3327,  3328,  3329,
    3330,  3332,  3333,  3334,  3338,  3339,  3340,  3341,  3342,  3343,
    3347,  3348,  3349,  3354,  3355,  3356,  3357,  3358,  3359,  3360,
    3361,  3362,  3363,  3364,  3365,  3366,  3370,  3371,  3372,  3373,
    3374,  3375,  3376,  3380,  3381,  3382,  3386,  3387,  3388,  3392,
    3393,  3394,  3395,  3397,  3398,  3399,  3401,  3402,  3403,  3404,
    3406,  3407,  3408,  3412,  3413,  3414,  3415,  3416,  3418,  3419,
    3420,  3421,  3422,  3426,  3427,  3428,  3429,  3430,  3431,  3432,
    3434,  3435,  3436,  3437,  3438,  3442,  3443,  3444,  3448,  3449,
    3453,  3454,  3455,  3456,  3460,  3461,  3462,  3464,  3465,  3466,
    3470,  3474,  3475,  3477,  3478,  3479,  3483,  3484,  3485,  3486,
    3490,  3491,  3495,  3496,  3497,  3501,  3502,  3503,  3504,  3505,
    3506,  3507,  3511,  3512,  3513,  3514,  3518,  3519,  3520,  3521,
    3525,  3529,  3533,  3535,  3538,  3544,  3545,  3546,  3550,  3551,
    3552,  3553,  3554,  3555,  3559,  3560,  3564,  3565,  3566,  3568,
    3569,  3571,  3572,  3573,  3574,  3575,  3577,  3578,  3582,  3583,
    3584,  3585,  3589,  3590,  3591,  3592,  3594,  3595,  3596,  3597,
    3598,  3599,  3600,  3603,  3607,  3608,  3612,  3613,  3617,  3618,
    3619,  3620,  3621,  3622,  3623,  3624,  3628,  3629,  3630,  3631,
    3637,  3638,  3640,  3641,  3644,  3645,  3648,  3649,  3650,  3651,
    3652,  3653,  3657,  3658,  3670,  3671,  3674,  3677,  3679,  3680,
    3681,  3691,  3693,  3694,  3696,  3697,  3698,  3699,  3709,  3710,
    3711,  3712,  3713,  3714,  3718,  3719,  3728,  3730,  3731,  3733,
    3735,  3739,  3740,  3741,  3742,  3743,  3747,  3748,  3749,  3751,
    3756,  3757,  3758,  3762,  3763,  3764,  3768,  3772,  3773,  3774,
    3778,  3779,  3783,  3784,  3788,  3789,  3790,  3791,  3795,  3799,
    3803,  3807
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "LONG", "SIGNED", "UNSIGNED", "FLOAT",
  "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST", "STRUCT", "UNION",
  "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH", "WHILE", "DO",
  "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX", "ELSE", "CLASS",
  "THISCLASS", "CLASS_NAME", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "BOOL",
  "_BOOL", "_COMPLEX", "_IMAGINARY", "RESTRICT", "THREAD", "'*'", "'<'",
  "'>'", "'('", "')'", "'~'", "';'", "'='", "','", "'}'", "'{'", "'.'",
  "':'", "'$'", "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'", "'%'",
  "'^'", "'|'", "'?'", "$accept", "guess_type", "type", "base_strict_type",
  "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "constant", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "argument_expression_list", "argument_expression_list_error",
  "common_unary_expression", "unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "common_unary_expression_error", "unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    42,    60,
      62,    40,    41,   126,    59,    61,    44,   125,   123,    46,
      58,    36,    91,    93,    38,    43,    45,    33,    47,    37,
      94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   143,   144,   144,   145,   145,   146,   147,   148,   148,
     148,   149,   149,   150,   151,   152,   152,   153,   153,   154,
     154,   155,   155,   155,   155,   155,   155,   155,   156,   156,
     156,   156,   156,   157,   157,   158,   159,   160,   160,   160,
     161,   161,   162,   162,   162,   163,   163,   163,   164,   164,
     164,   164,   164,   164,   165,   165,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   167,   167,   167,   167,   168,
     168,   168,   168,   168,   168,   168,   169,   169,   170,   170,
     170,   170,   170,   171,   171,   172,   172,   172,   172,   172,
     173,   173,   173,   174,   174,   175,   175,   175,   175,   175,
     175,   175,   175,   175,   175,   176,   176,   177,   177,   177,
     177,   177,   178,   179,   179,   179,   180,   180,   180,   181,
     181,   181,   181,   182,   182,   182,   182,   182,   183,   183,
     183,   183,   183,   183,   184,   185,   185,   185,   185,   185,
     186,   186,   186,   187,   188,   188,   189,   189,   190,   190,
     191,   192,   192,   193,   193,   193,   193,   194,   194,   194,
     194,   195,   195,   195,   195,   195,   195,   195,   195,   195,
     195,   195,   195,   195,   195,   196,   196,   196,   196,   196,
     196,   196,   196,   196,   196,   196,   196,   196,   196,   196,
     196,   196,   196,   196,   196,   196,   197,   197,   197,   198,
     198,   198,   198,   198,   199,   199,   200,   200,   201,   201,
     201,   201,   201,   201,   201,   201,   202,   203,   203,   204,
     205,   205,   206,   206,   206,   207,   207,   208,   208,   208,
     208,   208,   208,   209,   209,   210,   211,   211,   211,   211,
     211,   211,   211,   211,   212,   212,   212,   212,   212,   212,
     213,   214,   214,   214,   214,   214,   214,   215,   216,   216,
     217,   217,   217,   218,   219,   219,   219,   219,   219,   219,
     219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
     219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
     219,   219,   219,   219,   219,   219,   219,   219,   219,   219,
     219,   220,   221,   222,   222,   223,   223,   223,   223,   223,
     223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
     223,   223,   223,   224,   224,   224,   224,   225,   225,   225,
     225,   225,   226,   226,   226,   226,   226,   226,   226,   226,
     226,   226,   227,   227,   228,   228,   228,   228,   228,   228,
     228,   228,   229,   229,   230,   230,   230,   230,   230,   230,
     230,   231,   231,   231,   231,   231,   232,   232,   232,   232,
     232,   233,   234,   234,   234,   234,   234,   234,   234,   234,
     234,   235,   235,   235,   235,   235,   235,   235,   235,   235,
     236,   236,   236,   236,   236,   237,   237,   237,   237,   237,
     238,   238,   238,   238,   238,   239,   239,   239,   240,   240,
     240,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   242,   242,
     242,   242,   242,   242,   242,   242,   242,   243,   243,   243,
     243,   243,   243,   243,   243,   243,   243,   243,   244,   244,
     244,   244,   245,   245,   245,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   247,   247,   247,   247,
     247,   247,   247,   247,   247,   247,   248,   248,   249,   249,
     250,   250,   250,   250,   250,   250,   250,   251,   251,   251,
     251,   251,   252,   252,   252,   252,   252,   253,   253,   253,
     253,   253,   253,   253,   253,   253,   254,   254,   254,   254,
     254,   254,   254,   254,   254,   255,   255,   255,   255,   255,
     256,   256,   256,   256,   256,   257,   257,   257,   257,   257,
     258,   258,   258,   259,   259,   259,   260,   260,   260,   260,
     260,   260,   260,   260,   260,   260,   260,   260,   260,   260,
     260,   260,   260,   260,   260,   260,   260,   260,   260,   260,
     260,   260,   260,   260,   260,   261,   261,   261,   261,   261,
     262,   262,   262,   262,   262,   262,   262,   263,   263,   263,
     263,   264,   265,   266,   266,   266,   266,   266,   266,   266,
     267,   267,   267,   267,   267,   267,   267,   268,   268,   268,
     269,   269,   269,   270,   271,   271,   272,   272,   272,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   274,   274,   275,   275,   275,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   277,   277,   278,   278,   279,   280,   280,   280,
     281,   281,   282,   282,   282,   282,   282,   282,   282,   282,
     282,   282,   282,   282,   282,   282,   282,   282,   282,   282,
     282,   282,   282,   282,   282,   282,   282,   282,   283,   283,
     283,   283,   283,   283,   283,   283,   283,   283,   283,   283,
     283,   283,   283,   283,   283,   283,   283,   283,   283,   283,
     283,   283,   284,   284,   284,   284,   284,   284,   284,   284,
     284,   284,   285,   285,   286,   286,   286,   286,   287,   287,
     287,   287,   288,   288,   288,   288,   288,   288,   288,   288,
     288,   289,   290,   290,   291,   292,   292,   292,   292,   293,
     293,   293,   293,   293,   293,   293,   293,   293,   294,   294,
     295,   295,   295,   295,   295,   295,   295,   295,   296,   296,
     296,   296,   296,   296,   296,   296,   296,   296,   297,   297,
     297,   297,   297,   297,   297,   297,   297,   297,   298,   298,
     298,   298,   298,   298,   298,   298,   298,   298,   298,   298,
     299,   299,   299,   299,   299,   299,   299,   299,   299,   299,
     300,   300,   301,   301,   301,   301,   301,   301,   301,   301,
     301,   301,   301,   301,   302,   302,   303,   303,   303,   303,
     303,   303,   303,   303,   303,   303,   304,   304,   304,   304,
     304,   304,   304,   304,   304,   304,   304,   304,   304,   304,
     305,   305,   305,   305,   305,   305,   305,   305,   305,   305,
     305,   305,   305,   305,   306,   306,   307,   307,   307,   307,
     307,   308,   308,   308,   308,   308,   308,   308,   308,   308,
     308,   308,   309,   309,   309,   309,   309,   309,   309,   309,
     309,   310,   311,   311,   311,   311,   311,   312,   312,   312,
     312,   313,   313,   314,   315,   315,   315,   315,   315,   316,
     316,   316,   316,   317,   317,   318,   318,   318,   318,   319,
     319,   319,   320,   320,   320,   320,   320,   321,   321,   322,
     322,   322,   323,   323,   324,   324,   324,   324,   324,   324,
     324,   324,   324,   324,   324,   324,   324,   324,   324,   324,
     325,   325,   325,   325,   325,   325,   325,   325,   326,   326,
     326,   326,   327,   327,   327,   327,   327,   328,   328,   328,
     328,   328,   329,   329,   329,   329,   329,   330,   330,   330,
     330,   331,   331,   331,   331,   332,   332,   332,   332,   333,
     333,   333,   333,   334,   334,   334,   334,   335,   335,   335,
     335,   336,   336,   336,   337,   337,   337,   337,   337,   338,
     338,   339,   339,   340,   340,   340,   340,   340,   340,   341,
     341,   341,   342,   342,   343,   343,   343,   343,   343,   343,
     344,   344,   344,   344,   345,   345,   346,   346,   347,   347,
     347,   347,   347,   347,   348,   348,   349,   349,   349,   349,
     349,   349,   349,   349,   349,   349,   350,   350,   350,   350,
     350,   350,   350,   350,   351,   351,   351,   351,   351,   351,
     352,   352,   352,   353,   353,   353,   353,   353,   353,   353,
     353,   353,   353,   353,   353,   353,   354,   354,   354,   354,
     354,   354,   354,   355,   355,   355,   356,   356,   356,   357,
     357,   357,   357,   357,   357,   357,   357,   357,   357,   357,
     357,   357,   357,   358,   358,   358,   358,   358,   358,   358,
     358,   358,   358,   359,   359,   359,   359,   359,   359,   359,
     359,   359,   359,   359,   359,   360,   360,   360,   361,   361,
     362,   362,   362,   362,   363,   363,   363,   363,   363,   363,
     364,   365,   365,   365,   365,   365,   366,   366,   366,   366,
     367,   367,   368,   368,   368,   369,   369,   369,   369,   369,
     369,   369,   370,   370,   370,   370,   371,   371,   371,   371,
     372,   373,   374,   374,   374,   375,   375,   375,   376,   376,
     376,   376,   376,   376,   377,   377,   378,   378,   378,   378,
     378,   378,   378,   378,   378,   378,   378,   378,   379,   379,
     379,   379,   379,   379,   379,   379,   379,   379,   379,   379,
     379,   379,   379,   379,   379,   379,   379,   379,   380,   380,
     380,   380,   380,   380,   380,   380,   381,   381,   381,   381,
     382,   382,   382,   382,   382,   382,   383,   383,   383,   383,
     383,   383,   384,   384,   385,   385,   385,   385,   385,   385,
     385,   385,   385,   385,   385,   385,   385,   385,   385,   385,
     385,   385,   385,   385,   386,   386,   386,   386,   386,   386,
     386,   387,   387,   387,   387,   387,   388,   388,   388,   388,
     389,   389,   389,   390,   390,   390,   391,   392,   392,   392,
     393,   393,   394,   394,   395,   395,   395,   395,   396,   397,
     398,   399
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     4,     4,     5,     8,
       2,     1,     1,     2,     6,     6,     5,     5,     6,     6,
       5,     5,     7,     7,     6,     6,     7,     7,     6,     6,
       4,     5,     4,     6,     4,     1,     1,     1,     1,     3,
       2,     1,     2,     2,     2,     1,     4,     4,     3,     4,
       4,     3,     3,     2,     2,     4,     4,     3,     4,     3,
       3,     2,     2,     1,     1,     3,     3,     1,     1,     3,
       3,     2,     2,     2,     2,     2,     2,     4,     5,     5,
       2,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     1,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     2,     1,     2,     3,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     1,     3,
       3,     1,     5,     5,     5,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     2,     1,     3,     3,     1,     1,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     2,     2,     2,     2,
       2,     5,     6,     6,     2,     5,     1,     1,     1,     4,
       1,     3,     3,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     2,     3,
       3,     3,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     3,     3,     1,     3,     3,     1,     5,     5,     5,
       5,     4,     4,     4,     4,     5,     5,     5,     5,     4,
       4,     4,     4,     5,     5,     5,     5,     5,     5,     5,
       5,     3,     3,     2,     2,     1,     3,     3,     3,     3,
       1,     2,     3,     3,     2,     2,     2,     1,     2,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       1,     3,     2,     1,     2,     2,     2,     4,     4,     3,
       3,     4,     5,     4,     6,     6,     4,     5,     4,     6,
       6,     2,     2,     2,     5,     3,     5,     6,     5,     7,
       7,     8,     8,     7,     7,     3,     3,     3,     4,     3,
       5,     5,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     4,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     4,
       4,     1,     1,     2,     2,     3,     5,     2,     3,     5,
       5,     5,     1,     3,     2,     2,     3,     3,     2,     3,
       3,     4,     3,     3,     3,     3,     3,     3,     4,     4,
       4,     1,     1,     4,     3,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     1,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     3,     3,     1,     3,     3,     3,
       3,     1,     1,     1,     4,     4,     4,     3,     4,     4,
       4,     3,     1,     3,     4,     3,     4,     4,     4,     4,
       3,     2,     3,     3,     3,     3,     2,     2,     2,     3,
       4,     1,     1,     2,     3,     3,     3,     3,     2,     2,
       2,     3,     4,     1,     1,     1,     1,     1,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     1,
       2,     3,     6,     5,     3,     4,     2,     3,     3,     3,
       3,     4,     4,     4,     2,     3,     3,     3,     4,     4,
       3,     4,     2,     3,     3,     3,     4,     4,     1,     2,
       2,     3,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     3,     1,     2,     3,     2,     2,     1,     2,     3,
       2,     1,     2,     3,     3,     1,     2,     3,     3,     1,
       2,     3,     3,     1,     2,     3,     3,     1,     2,     3,
       3,     1,     3,     4,     1,     4,     2,     5,     3,     1,
       1,     1,     1,     1,     1,     3,     3,     2,     2,     1,
       1,     3,     2,     3,     1,     3,     3,     3,     3,     3,
       1,     2,     3,     3,     1,     2,     1,     2,     2,     2,
       2,     3,     1,     1,     3,     3,     1,     3,     4,     3,
       4,     3,     3,     4,     3,     4,     1,     3,     3,     4,
       3,     3,     3,     4,     1,     3,     3,     3,     3,     3,
       1,     3,     2,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       1,     2,     1,     1,     4,     7,     1,     3,     0,     6,
       8,    10,    12,     8,    10,    10,     5,     7,     9,    11,
       7,     9,     9,     3,     4,     4,     3,     3,     3,     4,
       4,     3,     3,     3,     4,     4,     3,     2,     3,     2,
       3,     4,     4,     3,     3,     1,     1,     1,     1,     1,
       2,     3,     2,     2,     2,     3,     3,     2,     5,     6,
       2,     2,     2,     2,     2,     2,     1,     2,     2,     3,
       1,     2,     1,     2,     2,     1,     2,     2,     2,     2,
       2,     2,     1,     1,     2,     2,     1,     1,     2,     2,
       1,     2,     2,     1,     2,     1,     2,     2,     5,     5,
       7,     7,     5,     5,     3,     2,     5,     4,     4,     7,
       6,     6,     5,     7,     6,     4,     7,     9,     3,     4,
       4,     5,     5,     6,     7,     6,     6,     5,     5,     4,
       3,     2,     1,     2,     4,     3,     5,     4,     3,     2,
       2,     2,     3,     3,     3,     3,     2,     2,     1,     1,
       4,     3,     4,     3,     3,     2,     4,     3,     4,     3,
       3,     2,     1,     2,     1,     1,     2,     1,     2,     3,
       3,     1,     2,     2,     2,     3,     4,     4,     2,     2,
       2,     2,     1,     2,     1,     2,     1,     2,     2,     1,
       2,     1,     2,     2,     2,     2,     1,     2,     2,     3,
       1,     1,     0,     6,     6,     5,     4,     1,     2,     2,
       1,     3,     3,     4,     1,     1,     2,     2,     6,     6,
       6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1282,   257,     6,   590,   591,   592,   594,   595,   653,   654,
     655,   656,   657,   659,   662,   663,   660,   661,   647,   648,
     652,   658,   748,   749,   603,  1127,   235,   671,   905,   906,
       0,     0,   909,  1125,  1126,   672,   673,   664,     0,     0,
       0,     0,     0,   910,   911,   675,   674,   676,   677,   596,
     593,   948,     0,  1251,   796,   667,     8,     4,     0,     0,
       0,  1245,     0,  1264,   872,   790,     0,   666,     0,   642,
     644,   798,   800,   649,   792,   794,   731,   665,     0,     0,
     643,   645,     0,     0,     0,     0,     0,   971,   646,     0,
     907,     0,     0,     0,  1247,  1269,  1244,  1266,  1276,  1271,
       0,     0,     0,  1262,     0,  1259,  1242,     0,     0,  1248,
       0,     0,     0,     0,  1261,  1260,     0,   650,   949,   646,
     950,   863,   862,   872,   904,   861,   891,   962,     0,   903,
     967,     0,     0,     0,     0,     0,     0,  1137,     0,   237,
     236,     0,     0,   245,     0,   244,     2,     3,     0,     5,
       0,   605,   604,     0,     0,   623,     0,     0,     0,     0,
     735,     0,   715,   714,     0,  1140,   592,   656,   657,  1134,
     797,     8,  1246,  1265,   872,   791,   799,   801,   793,   795,
     971,   979,   646,     0,     0,  1010,     0,     0,     0,  1020,
       0,     0,   863,     0,   862,     0,     0,   881,     0,     0,
     583,   584,   585,   587,   588,  1033,   589,   586,   886,   784,
     856,   778,     0,   788,     0,   780,   782,   731,   786,     0,
       0,  1032,     0,     0,  1036,  1046,     0,     0,     0,     0,
       0,     0,   972,     0,   679,   680,   681,   682,   683,   685,
     688,   689,   686,   687,   678,   684,   701,   690,     0,     0,
     695,   694,   696,   697,  1170,   693,     0,     0,   768,   692,
     774,   770,   772,   776,   691,     0,  1146,     0,     0,     0,
       0,  1235,  1241,   592,     0,  1258,  1253,  1267,     0,  1254,
    1270,  1252,  1268,  1263,  1275,  1278,     0,     0,     0,     0,
       0,  1273,  1274,  1277,  1272,     1,     0,  1249,  1250,  1243,
       0,     0,   456,   263,     0,     0,     0,     0,     0,     0,
     350,   351,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   345,     0,   348,     0,     0,   344,   346,   347,
     349,     0,   265,     0,   264,   305,   272,   271,   258,   455,
       0,   342,   352,     0,   354,   361,   366,   372,     0,   381,
     390,   395,   400,   405,   408,   411,   428,     0,   477,   476,
     478,   480,   487,   492,   497,   506,   515,   520,   525,   530,
     533,   536,     0,   260,   295,   296,   297,   298,     0,     0,
       0,     0,     0,   651,   951,     0,   893,     0,   898,     0,
       0,     0,     0,     0,     0,     0,   904,   963,   968,     0,
     873,   965,   875,   970,   966,   664,     4,   229,   228,   227,
     233,     0,   264,   352,   219,   478,     0,   206,   249,     0,
       0,   248,   255,     0,     0,  1128,  1129,     0,   168,     0,
     169,   170,     0,     0,     0,     0,     0,   172,   246,     0,
       0,     0,     0,    29,    31,   163,   175,   188,     0,   187,
       0,   116,   119,     0,   195,   128,     0,   164,   140,     0,
     167,   183,   196,   199,     0,     0,   264,     0,     0,   176,
       0,   975,   646,     0,    12,    18,     0,   803,   802,   810,
     804,     0,   806,   808,   731,   815,   814,   250,   256,   247,
       0,     0,   239,   238,   636,   597,   600,   635,   639,   625,
       0,     0,     0,   222,   223,   224,   225,     0,   217,     0,
     744,   737,     0,     0,   734,   741,   736,     0,     0,   747,
     738,     0,     0,   717,   716,     0,     0,     0,     0,     0,
     972,   980,     0,  1012,     0,     0,  1231,  1237,     0,  1233,
    1239,  1021,  1135,     0,     0,     0,  1136,   880,     0,   264,
     581,   582,     0,     0,     0,     0,   605,   604,   606,     0,
     718,     0,     0,   656,     0,     0,  1030,   785,     8,   872,
     779,   789,   781,   783,   787,   904,   861,   646,   953,   952,
       0,     0,     0,   885,     0,     0,   884,     0,     0,     0,
    1062,     0,   882,   883,   973,     0,   974,     0,     0,  1144,
    1132,  1143,    76,  1141,   682,   683,  1130,   872,   769,   775,
     771,   773,   777,   646,     0,  1145,  1142,  1133,     0,  1147,
       0,  1234,  1240,  1148,     0,     0,     0,     0,     0,     0,
       0,     0,  1229,     0,     0,     0,   690,     0,     0,     0,
     157,  1066,  1067,   693,     0,     0,     0,   264,     0,   352,
       0,     0,   478,   565,   570,     0,  1064,  1152,  1155,  1072,
    1063,  1076,     0,     0,     0,     0,  1174,  1172,  1065,  1078,
       0,  1079,  1070,  1077,     0,  1080,  1171,     0,     0,  1255,
     872,     0,     0,     0,  1265,     0,   861,   979,   646,     0,
       0,     0,     0,  1241,  1279,     0,     0,   411,     0,     0,
     908,     0,   336,   470,     0,   332,   466,   333,   467,     0,
     850,   840,   848,   842,   844,   846,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   340,   474,
     273,     0,     0,     0,   754,   750,   752,   756,  1024,     0,
     261,     0,   300,   301,     0,   324,     0,   323,     0,   458,
      93,     0,   270,   457,     0,   313,   314,     0,     0,     0,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     437,     0,     0,   335,   469,   334,   468,     0,     0,     0,
       0,     0,     0,     0,   373,   498,     0,     0,   371,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   668,
       0,   321,   322,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   669,   670,     0,
       0,     0,  1294,  1295,     0,     0,     0,   867,     0,     0,
       0,   871,     0,     0,     0,   897,   896,   894,   895,   904,
     963,   968,   874,   876,   990,    10,     9,     0,     0,     0,
     646,   952,   207,     0,     0,   264,   206,     0,     0,   822,
     816,   818,   820,     0,     0,     0,    16,    20,     0,   185,
     184,   186,     0,     0,     0,     0,   345,     0,   264,     0,
      26,     0,    21,    28,    24,     0,    25,    23,    22,    30,
      32,   190,    83,   191,   122,   162,     0,     0,     0,     0,
     132,     0,     0,   134,     0,     0,   143,   161,   200,   197,
     202,   201,   198,   203,   115,     0,     0,     0,   872,   712,
     177,   987,     0,   983,   646,     0,    11,    17,   702,   888,
    1032,     0,     0,     0,   976,     0,     0,   173,   165,   192,
     181,     0,   180,     0,   166,   872,   179,     0,   605,   604,
     811,   805,   807,   809,     0,     0,     0,   602,   638,     0,
       0,     7,   212,   208,   733,     0,     0,     0,     0,  1009,
    1016,  1017,  1018,    64,    53,    92,    39,    38,    57,    69,
      45,    48,     0,    74,    56,     0,     0,     0,  1000,  1002,
       0,   999,  1001,     0,    41,    44,   904,   973,   964,   981,
     969,   990,   982,     0,   991,   994,  1011,  1013,  1230,  1236,
    1232,  1238,  1015,  1022,  1019,  1023,   879,   877,   878,  1059,
    1041,  1050,   610,   609,     0,     0,   456,   719,     0,     0,
     456,   720,     0,     0,     0,   934,   872,     0,     0,   646,
     952,     0,     0,     0,   926,     0,     0,     0,     0,     0,
    1031,   955,     0,     0,   954,  1035,  1034,     0,   855,  1058,
     858,  1044,  1052,     0,   854,  1057,   857,  1042,  1051,     0,
    1061,  1055,   859,  1037,  1047,     0,  1056,   860,  1039,  1048,
     912,   913,   916,   915,   914,     0,   917,   919,     0,     0,
       0,     0,    77,     0,  1131,  1149,     0,     0,     0,     0,
       0,     0,  1213,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   264,     0,  1064,  1211,  1069,  1071,     0,
       0,  1219,  1220,  1221,     0,  1227,     0,     0,     0,     0,
       0,     0,   158,   144,  1075,  1074,  1073,     0,     0,     0,
     571,     0,  1068,     0,     0,     0,     0,   451,     0,     0,
     456,     0,     0,     0,     0,  1153,  1156,  1158,     0,  1154,
    1157,  1159,     0,  1185,  1081,  1256,  1257,   237,   236,     0,
       0,     0,   980,     0,     0,  1237,     0,  1239,  1240,     0,
       0,  1138,     0,     0,   762,   264,   764,   758,   760,   766,
    1026,     0,     0,     0,     0,     0,     0,   851,   841,   849,
     843,   845,   847,   646,   958,   957,     0,   836,   826,   834,
     828,   830,   832,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   259,     0,   755,
     751,   753,   757,  1025,     0,     0,   456,     0,     0,     0,
     105,     0,   299,   456,     0,     0,    94,   456,     0,     0,
     459,   312,   308,   328,   461,   462,   327,   463,   311,     0,
       0,   433,   429,   302,   355,   481,   356,   482,   357,   483,
     362,   488,   363,   489,   367,   493,   368,   494,   375,   500,
     376,   501,   374,   499,   386,   511,   382,   507,   387,   512,
     383,   508,   393,   518,   391,   516,   398,   523,   396,   521,
     403,   528,   401,   526,   406,   531,   409,   534,   561,     0,
     577,     0,     0,     0,     0,   435,   431,   460,   320,   317,
       0,   464,   465,   319,     0,     0,   434,   430,   358,   484,
     359,   485,   360,   486,   364,   490,   365,   491,   369,   495,
     370,   496,   379,   504,   380,   505,   377,   502,   378,   503,
     388,   513,   384,   509,   389,   514,   385,   510,   394,   519,
     392,   517,   399,   524,   397,   522,   404,   529,   402,   527,
     407,   532,   410,   535,   562,     0,     0,     0,     0,   436,
     432,     0,     0,  1287,  1290,     0,     0,  1285,  1296,  1297,
       0,     0,   866,   864,   865,   870,   868,   869,   234,   232,
     231,   230,   264,   646,   955,   241,     0,   207,   240,   127,
       0,   125,   823,   817,   819,   821,     0,   646,     0,    15,
      19,     0,   182,   987,   646,     0,   139,     0,   137,   823,
       0,   264,   646,     0,    27,    84,   117,   120,   118,   121,
     129,   130,   131,   133,   141,   142,   114,   112,   113,    13,
     704,   707,     0,     0,   900,  1032,     0,     0,     0,   988,
     984,     0,     0,   703,   872,   889,   977,   978,   872,   193,
     194,   178,     0,     0,     0,     0,   598,   599,   601,     0,
       0,   628,   624,     0,     0,     0,     0,     0,   226,   218,
     216,     0,     0,     0,    36,    37,    75,    54,     0,    55,
       0,    63,    61,    72,    67,    73,    60,    90,    39,    70,
      62,    91,    59,    71,    68,     0,    58,     0,   682,    33,
      35,    34,  1003,  1004,     0,   618,   608,     0,   613,   607,
       0,   456,   721,     0,     0,     0,   952,     0,   924,   935,
     936,   929,   927,   928,     0,   956,   937,     0,     0,   930,
       0,     0,     0,  1045,  1053,  1032,  1043,  1038,  1040,  1049,
     923,     0,     0,     0,   920,   698,   699,   700,   456,     0,
       0,  1106,  1116,  1111,     0,     0,     0,  1107,  1118,  1112,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1210,  1198,     0,  1175,   264,     0,     0,     0,  1218,  1224,
    1225,  1222,  1223,     0,     0,     0,     0,   145,  1103,  1113,
    1108,     0,   159,   568,   566,     0,     0,     0,   449,   572,
     569,   567,   450,   573,     0,   981,  1236,  1238,  1139,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   763,
     765,   759,   761,   767,  1027,     0,   292,   290,     0,     0,
     942,   646,     0,     0,     0,     0,     0,     0,   960,     0,
     959,     0,     0,     0,   837,   827,   835,   829,   831,   833,
       0,   267,     0,   266,   294,     0,     0,     0,     0,     0,
       0,  1301,     0,     0,     0,     0,   353,   479,   262,   108,
     106,   326,   325,    99,   103,   309,     0,   310,   306,   307,
     578,     0,     0,     0,     0,     0,     0,   318,   315,   316,
       0,     0,     0,     0,  1289,  1288,  1292,     0,     0,     0,
    1284,  1283,     0,   952,   218,     0,     0,   123,   126,     0,
       0,     0,     0,     0,   988,     0,   135,   138,     0,    14,
     456,     0,     0,   713,     0,   872,   901,   989,   985,   986,
     705,   708,   890,   174,   812,     0,   243,   242,     0,   627,
       0,   213,   214,   204,   209,   210,   220,     0,     0,    51,
      46,    49,    52,    47,    50,    37,    43,    40,    42,     0,
       0,  1007,  1008,   617,     0,   612,     0,   955,   954,   925,
     938,   939,   932,   931,   933,  1029,  1028,     0,   922,   921,
      79,  1104,  1114,  1109,     0,  1105,  1115,  1110,     0,     0,
       0,     0,     0,  1214,  1188,     0,     0,  1187,  1217,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1195,     0,  1176,  1199,  1177,  1200,     0,     0,     0,  1088,
     908,  1088,     0,     0,   155,     0,     0,     0,   160,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   471,
     291,   852,     0,   957,     0,   940,   943,   944,   276,   277,
       0,   961,   945,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   268,   280,   281,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   475,   330,   329,   453,   579,
     420,   553,   412,   537,   424,   557,   416,   545,   454,   580,
     421,   554,   413,   538,   425,   558,   417,   546,   422,   555,
     414,   539,   426,   559,   418,   547,   423,   556,   415,   540,
     427,   560,   419,   548,  1291,  1293,  1286,   824,     0,   124,
     150,   989,     0,   136,    86,   902,     0,     0,   813,     0,
       0,     0,     0,     0,     0,   205,     0,   221,     0,     0,
    1005,  1006,   995,     0,     0,     0,     0,   918,  1178,  1179,
    1182,  1183,  1186,  1216,     0,     0,     0,     0,     0,     0,
       0,  1192,  1201,     0,     0,     0,     0,  1086,     0,  1083,
    1096,     0,  1088,     0,  1088,     0,     0,     0,     0,   473,
     472,   959,   941,   853,   946,   947,   274,   275,   838,   284,
     285,     0,     0,     0,     0,   278,   279,   288,   289,     0,
       0,   293,  1299,  1300,  1298,   825,     0,   706,   709,   711,
     710,     0,     0,   215,   211,     0,   992,   997,     0,     0,
       0,     0,     0,     0,     0,  1206,  1190,     0,     0,  1191,
    1203,     0,  1194,  1205,     0,     0,     0,  1088,     0,  1088,
       0,  1088,     0,  1089,     0,     0,     0,   148,     0,   153,
       0,   156,     0,   839,   282,   283,     0,   286,   287,   171,
     993,  1180,  1181,     0,     0,  1189,  1196,     0,  1193,  1204,
       0,  1100,  1087,     0,     0,     0,  1097,     0,     0,  1088,
    1088,     0,  1088,   147,   146,   151,   149,     0,     0,   353,
     479,   269,     0,     0,     0,  1084,     0,     0,  1088,  1093,
       0,     0,  1090,     0,     0,   154,  1197,     0,  1101,  1102,
    1098,     0,     0,     0,     0,  1088,   152,     0,     0,  1094,
    1095,  1091,     0,  1085,  1099,     0,  1092
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   209,    55,    56,   972,   331,   439,   440,   441,   442,
     443,   444,   445,   446,   986,   987,   988,   989,   990,   991,
     992,   993,   994,   995,   996,   997,   256,   257,   447,   448,
      58,   332,   333,   743,   772,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,  2086,  2087,  2088,   461,   644,
     645,   646,   462,   463,   464,   465,  1782,   407,   503,   408,
     504,   409,   505,   506,   864,   410,   411,    59,    60,    61,
      62,    63,   334,   335,   336,   337,   338,   998,   999,   339,
     340,   746,  1265,   341,   649,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   731,
     826,   651,  1322,   358,   359,   652,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   653,   654,  1124,
    1324,   552,   553,   211,    65,   496,   497,   212,    67,   213,
     214,    68,    69,    70,    71,    72,    73,   215,   118,   216,
     262,   929,   930,   217,   218,   219,    77,    78,    79,    80,
      81,   220,   738,  1200,   265,   469,    83,    84,   486,   487,
     874,  1223,   716,  1047,  1048,   124,    85,   470,    87,   471,
     127,   128,   129,   933,   130,   119,    89,  1096,  1097,  1098,
      90,   578,  1214,   473,   580,  1216,   133,   185,   474,   475,
     187,   937,   135,  1016,  1533,  1004,  1005,  1534,   188,   189,
     190,   191,   739,  1201,   224,   225,   226,   227,   228,   229,
     657,   658,  2007,  2008,   659,   660,   661,    93,   476,   266,
      94,    95,   267,   268,   269,   664,   665,   666,   667,   270,
     668,   895,  1617,  1127,   671,   672,   673,  1128,   675,    96,
      97,   373,    98,    99,   100,   101,   102,   103,   832,  1394,
    1395,   833,   834,   374,   375,   376,   377
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1556
static const int yypact[] =
{
   36385, -1556, -1556, -1556, -1556,   787, -1556, -1556, -1556, -1556,
   -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556,
   -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556,
     917,    74, -1556, -1556, -1556, -1556, -1556, -1556,   -34,     8,
      25,   738,   167, -1556, -1556, -1556, -1556, -1556, -1556, -1556,
   -1556,  2516,  2277, -1556, -1556, -1556,   214, -1556,   257,   738,
     473, -1556,   518,    66,  1080, -1556,   288, -1556,   782, -1556,
     335, -1556, -1556, -1556, -1556, -1556,   814, -1556,   809,   316,
   -1556,   367,  1140, 35993,  3045,    30, 36677, -1556,   361,   383,
   -1556,  1822, 11879, 34681, -1556, -1556, -1556, -1556, -1556, -1556,
   36488, 35594,   585, -1556,    74, -1556, -1556,   167,   167,   583,
     524,   167, 28164,   738, -1556, -1556,   277, -1556,  2516, -1556,
   -1556, -1556,   537, -1556,   185,  1085, -1556, -1556, 36772, -1556,
   -1556,  2277,  2446,  2142,  2755,  2519, 22746, -1556,   552,   542,
     604, 29259, 38903, -1556, 29384, -1556, -1556, -1556,   738, -1556,
    1007,  1116,  1212,   191, 38903, -1556, 38633, 29509, 38903, 29634,
   -1556, 29759, -1556, -1556,   738, -1556, -1556,   939,   557, -1556,
   -1556,   252, -1556,    66,   641, -1556, -1556, -1556, -1556, -1556,
    1456,  1796,   361,  2446,  1559,  2519, 11879, 11879,   203, -1556,
    1301,   589,   599,   557,   942,   361,  1321, -1556, 26704,   645,
   -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556,
     453, -1556,   386, -1556,   669, -1556, -1556,   739, -1556,   729,
    1871, 33731,    12,   509, -1556, -1556,   626,   658,   688,   748,
     307,   756, -1556,   307, -1556, -1556, -1556, -1556, -1556, -1556,
   -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556,   804,   815,
   -1556, -1556, -1556, -1556, -1556, -1556,    39,    69, -1556, -1556,
   -1556, -1556, -1556, -1556, -1556, 36189, -1556, 16552,  9710, 39378,
   16690, -1556,   833,   897,  1050, -1556, -1556,    66, 36091, -1556,
   -1556, -1556, -1556, -1556, -1556, -1556,   335,   367, 37247, 11879,
   37529, -1556, -1556, -1556, -1556, -1556,   873,   583,   583, -1556,
   28164,   317, -1556, -1556, 28237, 28310, 28310,   903, 39083, 28164,
   -1556, -1556,   924,   927, 39083, 28164,   954,   965,   979,   991,
    1020, 28383, -1556, 10395, -1556,   167, 24441, -1556, -1556, -1556,
   -1556,   932, -1556,    97,  1044, -1556, -1556,    74, -1556, -1556,
   11763, -1556,  2321, 26777, -1556,   996,  1120,  1271, 28164,  1017,
    1424,  1060,  1014,  1043,  1187,    72,  2321,  1100,   608, -1556,
    2321, -1556,  1021,  1323,  1497,  1153,  1592,  1137,  1149,  1151,
    1290,   126,  2321,   583, -1556, -1556, -1556, -1556,  1179,   270,
   38723,  1190,  1205, -1556, -1556, 26850, -1556, 26923, -1556,   683,
     764,  1260,  1280,  2446,  2757,  2812,   185, -1556, -1556,   931,
   -1556, -1556, -1556, -1556, -1556,   924,   932, -1556, -1556, -1556,
   -1556,   694,   657, -1556,  1271, -1556,  1497, 33847, -1556, 22867,
   38633, -1556,   670, 38363, 37623, -1556, -1556,  1238, -1556,   738,
   -1556, -1556,    74, 37811, 37435, 23718, 38993, -1556, -1556,   883,
    1281,  1281,   960, -1556,  1294, -1556, -1556, -1556,   111,   907,
     119, -1556, -1556, 28626,  1307, -1556,  1391, -1556, -1556,   101,
   -1556, -1556, -1556,  1356, 28759, 28884,   495,   199,   608, 34887,
   36867, -1556,   361,  1822, -1556, -1556, 34784, -1556, -1556,  1353,
   -1556,   738, -1556, -1556, -1556,  1939, 39083, -1556,   670, -1556,
   29009, 29134,  1368,  1381, -1556,  1378, -1556,  1387, -1556, -1556,
    3438,  1396,   742, -1556, -1556, -1556, -1556,  1002,   719, 33847,
     665, -1556, 29884, 30009, -1556,   665, -1556, 30134, 30259,   665,
   -1556, 30384, 30509, -1556, -1556,  2277,  2277,  2277, 20965,   931,
    1456,  1796,   931, -1556, 26996,  9710, -1556,   833,  9710, -1556,
     833, -1556, -1556,  2277,  2277,   931, -1556, -1556,  1407,   258,
   -1556, -1556,  1412,  1416, 38453,  1461,  1401,  1443, -1556, 30634,
   -1556, 30759,   554, -1556, 10611, 27069,  2277, -1556,  1226,   453,
   -1556, -1556, -1556, -1556, -1556,   185,  1420,   361,   289,   181,
     414,   625,  1431, -1556, 38093,  1452, -1556, 38183,  1458, 38273,
    1465, 38543, -1556, -1556, -1556,  1183, -1556, 28164,   738, -1556,
   -1556,  1460, -1556, -1556,   939,   557, -1556,  1468, -1556, -1556,
   -1556, -1556, -1556,   361,  1343,   589, -1556, -1556,  1475, -1556,
   16828, -1556,   833, -1556,   187, 27142,  1473,  1507,  1511,   282,
   16966,  1518,    74,  1522,  1523, 17104,   924,  1999,  1537,  1540,
      74, -1556, -1556,   932,  1532,  1539,  1541,  1345, 15025,  2321,
   15310, 24514,  2321,  2321, -1556, 15448, 36287, -1556, -1556, -1556,
   -1556, -1556, 17242, 17380, 17518, 17656, -1556, -1556, -1556,   833,
   17794, -1556, -1556, -1556, 17932, -1556, -1556,   167,   167,   583,
     727,   738,  1348,  1544, -1556,   185,    30, -1556,   361,  2446,
   11879, 11879,  9710, -1556, -1556, 37341, 28164,   321,  1549,   381,
   -1556, 22988, -1556, -1556, 27215, -1556, -1556, -1556, -1556, 39083,
    1555, -1556, -1556, -1556, -1556, -1556, 34162, 39083, 23125,    74,
   34267, 39083, 28164,   167,   167,   167, 28164, 10395, -1556, -1556,
   -1556, 12009, 12165, 12308, -1556, -1556, -1556, -1556, 34576,  1546,
     102, 21102, -1556, -1556,   124, -1556,   271, -1556, 21239,  1548,
   -1556, 21376, -1556, -1556,  1478, -1556, -1556, 24587,  1490, 28164,
   -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556,
   -1556, 26777,   154, -1556, -1556, -1556, -1556, 28164, 28164, 28164,
   28164, 28164, 28164, 28164,  1271,  1497, 28164, 28164, -1556, 28164,
   26777, 26777, 26777, 26777, 26777, 28164, 28164, 12451, 26777, -1556,
    1519, -1556, -1556, 24660,  1531, 28164, 26777, 28164, 28164, 28164,
   28164, 28164, 28164, 28164, 28164, 28164, 28164, 28164, 26777, 26777,
   26777, 26777, 26777, 28164, 28164, 12594, 26777, -1556, -1556,   594,
     453, 38993, -1556, -1556, 35693, 38723, 38723, -1556,  1543,  1545,
    1553, -1556,  1554,  1557,  1558, -1556, -1556, -1556, -1556,   185,
   -1556, -1556, -1556, -1556,  1562, -1556, -1556, 22746, 22746, 33626,
     361,   722, -1556,   682,  1026,  1285, 33847,  1062,  1573,  1590,
   -1556, -1556, -1556,  1939, 33952, 37717, -1556, -1556,    74, -1556,
   -1556, -1556, 34990,  1582,    74, 34057,  1440, 23246,  1462, 37905,
   -1556,  1587, -1556,   833, -1556,   833, -1556, -1556, -1556,   833,
   -1556,  1591, -1556,   981, -1556, -1556,  3816,  3816,  1281,  1281,
   -1556,  1281,   176, -1556,  1281,  1281, -1556, -1556,   922, -1556,
    1356,   922, -1556,  1356,  1011, 27288,  2212, 28164,   776, -1556,
    1586,   185, 36962, -1556,   361,  2446, -1556, -1556,  1045,   645,
   33731, 28493,   642,   307, -1556,   307,  2277, -1556, -1556, -1556,
   -1556,   256, -1556,   284, -1556,   495, 34887, 22746, -1556, -1556,
    1595, -1556, -1556, -1556, 38633, 38633, 28164,    74, -1556, 33259,
     226, -1556,   856,   947, -1556, 38633,    74,   784,    74,  2291,
   -1556, -1556, -1556, -1556, -1556, -1556,  1281, -1556, -1556, -1556,
   -1556, -1556, 11496,  1429, -1556, 21513, 39278, 21650, -1556, -1556,
   11154, -1556, -1556, 37999, -1556, -1556,   185,  1456, -1556,  1796,
   -1556,   185, -1556, 26996, -1556, -1556, -1556, -1556, -1556,   833,
   -1556,   833, -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556,
   -1556, -1556, -1556,  1387,   261,   374,  1593, -1556, 30884, 31009,
    1594, -1556, 31134, 31259, 31384, -1556,   222,   421,   476,  1311,
    1585,  1597,  1600,  1604, -1556,  1596,  1598,  1601,   361,   931,
    2519,   181, 37057, 27361,   289, -1556, -1556, 38813, -1556, -1556,
     453, -1556, -1556, 38813, -1556, -1556,   453, -1556, -1556, 38813,
   -1556, -1556,   453, -1556, -1556, 38813, -1556,   453, -1556, -1556,
   -1556, -1556, -1556, -1556, -1556,  1605,  1560, -1556,  1251,  1606,
    1608,   352, -1556, 21787, -1556, -1556, 18070,  1603,  1609, 18208,
   28164, 28164, -1556, 27434, 27507,  1610,  1615,  1617, 23425,  1621,
      74, 24733,  2460,  1433, 24806, -1556,  1687, -1556, -1556, 24879,
    1620, -1556, -1556, -1556,  1624,  1628, 24952, 15586,   167,  1634,
   28164, 28164,    74, -1556, -1556, -1556, -1556, 20691,   790, 26777,
   -1556,  1299, -1556, 28164, 12737, 12880, 26777, -1556, 28164, 13023,
    1475, 18346, 18484, 18622, 18760, -1556, -1556, -1556, 18898, -1556,
   -1556, -1556, 19036, -1556, -1556,   583,   583,  1638,  1644, 33383,
   33507,   931, -1556,   931,  9710, -1556,  9710, -1556, -1556,  1640,
   26777, -1556, 26777,   728, -1556,   495, -1556, -1556, -1556, -1556,
   34576,  1645,  1647, 39173, 22746, 36582, 28164,  1656, -1556, -1556,
   -1556, -1556, -1556,   361,  1658,  1665,  1655,  1669, -1556, -1556,
   -1556, -1556, -1556, 34372, 25025,  1667,  1668,  1670, 28164,  1661,
   34477,  1672,   565,    85,   113,  1673,  1674, -1556,    74, -1556,
   -1556, -1556, -1556, -1556, 28164,   167,   299, 35093, 21924,  1678,
   -1556, 26777, -1556,   300, 35193, 22061, -1556,   311, 35293, 22198,
   -1556, -1556, -1556, -1556,   985,  1686, -1556, -1556, -1556, 25098,
    6146, -1556, -1556,  1678, -1556, -1556, -1556, -1556, -1556, -1556,
     996,  1021,   996,  1021,  1120,  1323,  1120,  1323,  1271,  1497,
    1271,  1497,  1271,  1497, -1556, -1556,  1017,  1153, -1556, -1556,
    1017,  1153, -1556, -1556,  1424,  1592, -1556, -1556,  1060,  1137,
   -1556, -1556,  1014,  1149,  1043,  1151,  1187,  1290, -1556,    67,
   -1556, 25171,  1680,  8500,  1681, -1556, -1556, -1556, -1556, -1556,
    1047, -1556, -1556, -1556, 25244,  9322, -1556, -1556, -1556, -1556,
   -1556, -1556, -1556, -1556,   996,  1021,   996,  1021,  1120,  1323,
    1120,  1323,  1271,  1497,  1271,  1497,  1271,  1497,  1271,  1497,
   -1556, -1556,  1017,  1153, -1556, -1556,  1017,  1153, -1556, -1556,
    1424,  1592, -1556, -1556,  1060,  1137, -1556, -1556,  1014,  1149,
    1043,  1151,  1187,  1290, -1556, 25317,  1682, 10840,  1683, -1556,
   -1556,    74,    74, -1556, -1556,   564,  1237, -1556, -1556, -1556,
   35793, 35893, -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556,
   -1556, -1556,   938,  2005,   722, -1556, 22746,    74, -1556, -1556,
   22746, -1556,   653, -1556, -1556, -1556,   494,   361,  2446, -1556,
   -1556,   373,  1586,  1562,   361,  2446, -1556,  1692, -1556,   799,
     508,  1150,  2277,  1695, -1556, -1556, -1556, -1556, -1556, -1556,
   -1556, -1556, -1556, -1556, -1556, -1556,  2777, -1556, -1556, -1556,
   -1556, -1556, 22335,  2152,   645, 33731, 20554,   690,   931,   185,
   -1556,   931, 28164, -1556,   895, -1556, -1556, -1556,  1696,  1591,
    1548,  1586,  1081, 22746,  1111,  1113, -1556, -1556, -1556, 31509,
   31634,  1671, -1556,  4332, 38993, 38993, 38993, 38993, -1556, -1556,
   -1556, 28164,  1694, 27580, -1556,   833, -1556, -1556, 27653, -1556,
   27726, -1556, -1556, -1556,  1438,  1429, -1556, -1556,  1281, -1556,
   -1556, -1556, -1556, -1556,  1438,  1429, -1556, 27799,  5944, -1556,
   -1556, -1556, -1556, -1556, 19174, -1556, -1556,   132, -1556, -1556,
     233,  1693, -1556, 31759, 31884,   361,  1585,  1701, -1556, -1556,
   -1556, -1556, -1556, -1556,   931,   289, -1556,  1704,  1705, -1556,
    1700,  1703,  1710, -1556, -1556, 33731, -1556, -1556, -1556, -1556,
   -1556, 28164,  1712,  1146, -1556, -1556, -1556, -1556,   333, 35393,
   22472, -1556, -1556, -1556, 19312, 20691, 20691, -1556, -1556, -1556,
   19450, 25390, 15724, 25463, 25536, 23516, 25609, 15862, 20828,  1707,
    1708, 20828, 28164, 27872,  1789, 25682,  1628, 23772,   167, 20828,
    1725, 11304, 23425, -1556,  1474, 25755, 23857, 25828, -1556, -1556,
   -1556, -1556, -1556,   114,   167,  1726,  1144, -1556, -1556, -1556,
   -1556, 19588, -1556, -1556, -1556,  1732,  1733,    74, -1556, -1556,
   -1556, -1556, -1556, -1556, 38633, -1556, -1556, -1556, -1556, 25901,
    1717, 23930,  1727, 25974,  1728, 24003,  1729,  1738,  1740, -1556,
   -1556, -1556, -1556, -1556, -1556, 13166, -1556, -1556,  1742,  1127,
   -1556,  2454,  1744,  1745,  1751,  1722,  1743, 22746,  1665, 37152,
    1658, 28164, 22746, 28164,  1758, -1556, -1556, -1556, -1556, -1556,
    1749, -1556, 27945, -1556, -1556,  1750,  1752, 28164, 28164,  1755,
    4900, -1556,    74,    74, 28164, 13309, -1556, -1556,   583, -1556,
   -1556, -1556, -1556, -1556, -1556, -1556, 13452, -1556, -1556, -1556,
   -1556, 26777, 13595, 13738, 26777, 13881, 14024, -1556, -1556, -1556,
   14167, 14310, 14453, 14596, -1556, -1556, -1556,   594,  1764,    52,
   -1556, -1556,   361,   722,  1878,  1139, 22746, -1556, -1556,  1763,
     931,   931,  1281,   931,  1562,  1769, -1556, -1556,  1767, -1556,
     344, 35493, 22609, -1556,   361,   984, -1556,   185, -1556, -1556,
    1768,  1773, -1556, -1556, -1556,  1208, -1556, -1556, 33259,  1780,
   33259, -1556,  1784, 33847, -1556,  1785, -1556, 28164, 26996,  2626,
   -1556, -1556,  2626, -1556, -1556, -1556,  2626, -1556, -1556, 19726,
   19864, -1556, -1556, -1556, 33259, -1556, 33259,   181,   289, -1556,
   -1556, -1556, -1556, -1556, -1556, -1556,  2519, 26047, -1556, -1556,
   -1556, -1556, -1556, -1556, 20002, -1556, -1556, -1556, 20140, 23425,
   11625, 23425, 11625, 15167, -1556, 23607, 16000, -1556, -1556, 20828,
   20828, 26120, 23425, 26193, 23334,  1798, 24076, 26266,   118, 20278,
   -1556, 28164, -1556, 15167, -1556, 11304, 23425, 24149, 28018,    15,
    1781,    15,   174,  1795, -1556,    74, 28164, 28164,    74, 26777,
   26777, 26777, 26777, 26777, 26777, 26777, 26777, 14739, 14882, -1556,
   -1556, -1556,   361,  1665,  1802, -1556, -1556, -1556, -1556, -1556,
    1218,  1658, -1556,  1803,  1805,  1797,  1806,  1227,  1814,  1815,
   22746, 28164, 10395, -1556, -1556, -1556,  1818,  1819,  1821,  1823,
   28164,  1807,  1809,  1813,  1816, -1556, -1556, -1556, -1556, -1556,
   -1556, -1556, -1556,   381, -1556, -1556, -1556,   381, -1556, -1556,
   -1556, -1556, -1556,   381, -1556, -1556, -1556,   381, -1556, -1556,
   -1556,   381, -1556, -1556, -1556,   381, -1556, -1556, -1556,   381,
   -1556, -1556, -1556,   381, -1556, -1556, -1556, -1556,  1231, -1556,
   -1556,  1562, 26777, -1556, -1556, -1556, 28164, 28164, -1556, 32009,
   32134, 33259, 32259, 32384, 38993, -1556, 38993, -1556, 24222, 20416,
   -1556, -1556, -1556, 32509, 32634, 32759, 32884, -1556,  1864,  1891,
   -1556, -1556, -1556, -1556, 23425, 28164, 28091,  1781, 16138, 16276,
   24295, -1556, 15167, 23607, 26339, 16414,    74, -1556,   901,   221,
   -1556,   213,    15,  1834,    15,   323,   398,  1837,  1182, -1556,
   -1556,  1658, -1556, -1556, -1556, -1556, -1556, -1556, -1556, -1556,
   -1556,  1234,  1828,  1829,  1841, -1556, -1556, -1556, -1556,  1831,
    1835, -1556, -1556, -1556, -1556, -1556,  1851, -1556, -1556, -1556,
   -1556, 33009, 33134, -1556, -1556, 26412, -1556, -1556, 23425, 23425,
   26485, 24368, 23425, 26558, 23334,  1853, -1556, 23425, 28164, -1556,
   -1556, 23607, -1556, -1556,  1845,  1855,    15,    15, 28164,    15,
    1856,    15,   995, -1556,   244,  1281,   530, -1556,   388, -1556,
    1859, -1556,    74, -1556, -1556, -1556, 27580, -1556, -1556, -1556,
   -1556, -1556, -1556,  1853, 23425, -1556, -1556, 26631, -1556, -1556,
     167, -1556, -1556,  1189,  1868,  1249, -1556,  1168,  1867,    15,
      15,  1869,    15, -1556, -1556, -1556, -1556,   323,   545, -1556,
   -1556, -1556, 23425,   632,  1873, -1556,  1876,  1877,    15, -1556,
    1250,  1252, -1556,  1201,   705, -1556, -1556, 28164, -1556, -1556,
   -1556,  1258,  1883,  1884,  1885,    15, -1556,  1888,  1887, -1556,
   -1556, -1556,  1308, -1556, -1556,  1893, -1556
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1556,  3586,    56,  9331, -1556,  1989, -1556, -1556, -1556, -1556,
   -1556, -1556,  1536,  1547,  -987, -1556,  -961,  -263,   106,   107,
    -923,  -886,  -630, -1556,  -713,  -561, -1556, -1556,  1550,  1551,
   -1556,  4689,  5017, -1556,    42,   704,   714, -1556, -1556, -1556,
   -1556,  1552, -1556, -1556, -1556,  -637, -1441,  -107, -1556, -1556,
   -1556, -1556,  4773,  5164,   -81,   -22,   525,  -843, -1556,  -816,
   -1556,  -826, -1556,  1057,  -123,  1167,  -920,    21,  1747,    82,
    1753,    31,     0, -1556,  1126, -1556, -1556,  6551,  4573, -1556,
    4861,  -223,  1236, -1556,  3352, -1556,  -325,   588,   611,  1035,
   -1556,   531,  -647,    58,    75,    77,   142,  -221,  8369,  4297,
    -291,  8116,  -640,  3867, -1556,  3918,  -320,   758,   624,  1521,
     546,   159,   161,   177,   210,   245,   887,   526,  -508,  6862,
    -634,   994,  1817,  9886,   -56,  1075,  -142,  2384,  9877,  7477,
   -1556, -1556, -1556,   -75,    -2,   -23, -1556,  6332, -1556,   997,
    2173,   582,  -807,  2715,  8025, -1556, 10402, -1556, -1556, -1556,
     -71,  3230, -1556, -1556,  2360,  5978,    -1, -1556, -1556,  1298,
    1612,  1326,  1746,   -70,   -33,  7129,  8618,   263,  3328,  -368,
    -127,  -301,   838,  -890,    54,  2856, -1556, -1556, -1081, -1556,
    1138,  -531, -1171,  6686,   143,  -699,   -76,   251,   152,  1630,
    -264,  -804,  -457,  -966,  -530,  -915,  -919,   268,  1049,  1082,
     -62,  1800,  -717,  1334,  -312,  -481,  -416, -1556,  -109,   -61,
    6118,   598,   -13,  -836, -1556, -1556, -1556,  1966, -1556,  1697,
    1975,   -47,  3702,   -20,  1799,   961,   968, -1556, -1556, -1556,
     -90,  1502, -1555,  -256, -1556, -1556, -1556,   -69, -1556,  1984,
       9,    19,  1982,  1535, -1556, -1556, -1556,  1994,  -795,   356,
   -1556,  -791,   806, -1556, -1556, -1556, -1556
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1282
static const yytype_int16 yytable[] =
{
      64,  1225,   271,  1142,  1017,   397,  1458,   184,   184,  1518,
    1457,   500,   938,   582,   670,  1409,   222,  1574,   775,   391,
     106,  1229,   196,   776,   691,   286,  1015,   175,  1247,   287,
     108,   110,  1411,   507,  1512,  1254,  1522,  1482,  1258,  1398,
     599,   115,  1410,  1399,  1680,  1470,   280,  1532,  1064,   109,
    1847,   771,   123,   223,   942,   394,   397,   299,   389,   140,
     177,   116,  1858,   490,   149,   798,   152,   392,  1720,   806,
     601,  1430,  1514,  1031,  1524,  1432,   512,     1,   517,   697,
     521,   176,   163,   174,   123,   148,   210,   111,   697,   796,
     299,   123,   278,    64,   697,   390,   536,   539,   749,   288,
      64,    64,   282,  1072,   296,   944,  1078,   299,  1084,  1515,
    1089,  1525,   901,   379,   173,   138,   382,  1859,   299,   299,
     903,  1859,   491,   299,   277,  1249,   297,   298,   210,   112,
     301,   123,   123,  1803,   583,   513,   412,   518,   584,   522,
     149,   466,   479,   824,   466,  1304,   113,  2006,   493,  1481,
     495,   197,    92,   495,   479,  1273,   508,   466,   479,   466,
    1499,   466,   198,   600,   524,   172,   535,   538,   932,   378,
     914,   915,   106,  1370,   149,   276,  1956,  2012,   621,   299,
    1248,   106,   285,   123,     1,  1386,   398,  1255,   616,   184,
    1259,  1388,   498,   145,     1,   148,   602,  -452,   549,  1530,
     924,   674,   184,   614,   541,   936,   754,   755,   756,     2,
     149,  1702,   557,   286,   797,   286,  2079,   287,   121,   287,
     163,   569,   175,  -856,   750,     1,   299,  1491,   916,     1,
     123,  1245,   175,   123,  1805,   186,  1860,   398,   902,  1703,
    1997,  1431,  1030,   280,  1861,    92,   750,  2120,  1861,  1266,
     662,  1250,   289,    92,   548,   177,  1804,  1479,   967,  -616,
    1518,     1,  1535,    86,     1,   607,   850,  1518,   825,   692,
     647,  1518,  1071,     1,   678,  1077,   176,  1083,   680,  1088,
       1,  1250,   299,  1112,  1669,  1480,   176,  1522,    64,   695,
      64,     1,  1996,   679,  1522,  1266,  2013,   867,  1522,   282,
    -109,  -100,   564,   134,  2014,     2,   386,   325,   710,   681,
       1,   617,  -104,   565,   710,    86,     2,   387,   499,   684,
     757,   277,   299,   549,   925,  1524,     1, -1014,   758, -1014,
    1064,   759,  1524,   136,   -82,  2080,  1524,   752,   796,  2076,
     146,   147,  2078,  2081,   740,   -89,    86,    86,  -856,   892,
     894,   896,   898,  1492,    86,     1,    86,  1806,  1149,   967,
    -611,  1156,  1525,    86,    86,  1516,  2121,  1526,   744,  1525,
    2076,   136,   694,  1525,  2122,  1538,     1,     1,   527,   149,
     830,   137,   395,   902,   385,   549,   751,   549,  1536,     1,
    1579,     1,   828,   123,    86,    86,  2085,  1251,   824,   123,
     941,     1,  1008,  1113,  1252,   380,   670,   670,   670,   670,
    1062,   750,   149,  1033,     2,  1065,   150,   830,  1008,   865,
     508,  1063,   582,   869,   569,   938,  -109,  -100,    52,   880,
     186,   691,   881,   830,   869,   888,   830,   223,  -104,   700,
     690,   838,   289,   842,   159,  1018,    86,   851,  1020,   979,
     979,   979,  1274,  1276,  1278,  1052,     1,  1275,  1277,  1279,
     -82,  2085,   155,  1190,   466,   466,   149,   184,   184,   928,
     210,   -89,   581,   123,  1577,   697,   955,   585,  1038,    51,
    1042,   959,  1338,  1340,  1342,   163,   960,  1339,  1341,  1343,
     466,   466,  1819,    86,   160,  1752,    86,     1,     1,   938,
    1745,  1539,   973,  1053,   231,  1015,  1672,  1891,   149,   977,
     585,     1,   466,   466,   555,  2125,  1467,   466,   466,  1064,
    2089,   466,   466,  1192,  1690,   123,   123,   123,    86,   123,
    1555,  1699,   123,     1,  1264, -1029, -1029,  1039,  1470,  1043,
   -1029,    86,  1580,   123,   123,   123,  1531,   584,     1,   149,
    1650,    86,  1654,    86,   830,   495,  1652,     1,  1656,   466,
     862,   466,   524,  1775,  1046,   549,   123,     1,  1801,   149,
     299,   146,   147,  1409,   932,  1476,   876,  1477,  1768,   123,
    1330,  1769,     2,  1010,  1070,   295,  1564,  1076,   299,  1082,
    1411,  1087,  1518,   674,   674,   674,   674,     1,  1101,  1010,
    1744,   141,   587,   142,  1569,  1398,  1398,     1,  1798,  1399,
    1399,  1429,  1797,   146,   147,   800,   801,   802,  1526,  1522,
     286,  1055,  1748,   751,   287,  1526,  1066,   588,  1226,  1526,
    1123,   586,  1130,   398,   932,   587,  1757,   299,   372,   175,
    1143,  1634,   143,   588,     1,  1639,   144,  2126,  1641,   300,
    1643,  1781,   978,  1784,  1100,   932,    86,  1524,   254,   590,
       1,   419,   647,   647,   647,   647,    -8,  2145,  -216,   385,
    1184,  1186,  -456,  -456,  -456,  1786,   418,  -456,  -456,  -456,
     149,  1178,  1044,   526,   582,     1,   134,  1701,  1736,   123,
    1737,   588,   936,   176,  1525,   569,  1175,  1176,    86,    28,
      29,  1195,   932,  2126,    32,   855,    26,  1051,     1,  1202,
     971,    38,  2021,  1391,  1392,   544,  1207,  1217,   549,  1227,
    1207,  1217,     1,   420,   551,   525,  1903,  1195,   421,   803,
       1,     1,  1513,  1519,  1523,    43,    44,   804,  1238,  1529,
     805,     1,  1232,  1233,  1234,     1, -1028, -1028, -1054,  1761,
    1052, -1028,   589,  2147,  1261,  1563,     2,  1890,  1268,   146,
     147,  1566,  1897,  1475, -1054,   585,     2,  1567,   589,   528,
     971,   554,  1746,  1568,  1518,   146,   147,  -216,  2085,     1,
   -1060,  1747,   858,  -216,   591,   751,  -456,     1,    86,    86,
      86,  1267,    86,     1,  -456,    86,   558,  -456,  1053,  -456,
    1328,  1522,  -456,   709,  1333,   845,    86,    86,    86,   584,
     592,  1766, -1054,   744,   856,   134,   589,  1060,  1450,  1451,
     857,  1452,  1532,   391,  1454,  1455,  1958,    86,  1493,  1393,
     149,  1396,  2156,  1980,   830,   830,   830,   146,   147,  1524,
     744,  1484,  1485,   859,   976,   146,   147,   690,   744,   709,
     670,  1308,   372,   670,   565,   528,   560,   412,  1412,   210,
    1768,  1769,  1466,   973,   104,   149,   977,   559,   744,  1312,
     593,   392,  1314,   163,  1422,   569,  1525,   595,  1143,  1374,
    1632,  1243,   569,  1555,  1437,  1439,   846,  1441,  1489,   830,
     587,   670,  1537,  1540,   146,   147,  1504,  1378,     1,   390,
    1380,  1762,   146,   147,  1462,   670,   670,   670,   670,  1501,
     153,   551,   154,   551,  -265,  -265,  -265,   105,  1746,  1706,
       1,   181,   106,   397,  1707,   597,   123,  1756,   149,  -456,
    -456,  -456,   210,   156,     1,   123,   598,   157,  1316,   158,
    1474,     1,  -732,   123,  -732,   123,  1478,  1490,   107,  -216,
    1526,  1305,    86,  1557,  1309,   149,   928,   412,    86,     2,
     676,  1977,    32,  1543,   508,   508,  1382,   495,   121,   466,
     495,  1313,  1884,   394,   104,   508,  1500,   149,  1502,  1371,
    2031,  1494,  1375,  1911,  1519,  1523,  1495,     1,  -458,  -458,
    -458,  1519,  1523,    43,    44,  1519,  1523,    75,   696,  1379,
    1868,  1558,  1051,   123,  1802,  1315,   938,   890,   494,  1417,
       1,   254,  1801,   146,   147,  1808,  1772,  1426,  -457,  -457,
    -457,   531,  1544,  2075,   709,  2011,  1015,  2076,  1440,   786,
     787,  2077,  -265,  1381,   495,   495,  -265,   674,   466,   466,
     674,  1317,   466,   466,   466,   718,   149,  2046,   719,   123,
     123,  -456,    52,     1,  1002,   106,   146,   147,  -216,   123,
     748,   123,   210,   549,  -216,   525,   751,   830,   527,  1383,
     149,  -863,  1496,   830,   385,   722,   149,  1497,   674,   830,
     179,   677,   149,     1,   897,   830,   723,   149,   254,  1980,
      75,   551,   674,   674,   674,   674,  1673,    75,    75,   490,
     724,   149,   146,   147,   398,  1965,   647,  1715,  1256,   647,
    -458,  1716,   725,   398,   777,  1010,   181,  2118,  1123,  1560,
    1130,  2076,   974,   372,    32,  2119,   687,   932,   975,  1614,
    2131,  2053,  1526,  2054,   778,   779,   788,   789,   134,   807,
    -457,   726,  1627,     1,  1674,    26,  1415,   647,  1268,  1090,
      86,   551,   975,     1,   793,    43,    44,  1623,   491,   808,
     809,   647,   647,   647,   647,   814,   815,   932,     2,  1727,
     932,   414,   751,  1716,  1091,  1472,  2082,   134,  2084,   466,
     466,   123,  1418,   123,   794,  2034,  1090,   699,   975,    86,
    1092,   581,  1547,   830,   792,   149,   699,   134,   146,   147,
     830,  1774,   699,   795,   412,   210,   197,   857,  1917,    86,
    -892,  1091,  1808,  1639,    28,    29,  1643,   198,   573,    32,
    1093,  1094,   799,  1684,  -872,  -872,    38,  1092,  2016,  -872,
    1684,  1776,  -862,  1777,  -862,  -862,  -872,   975,   149,   975,
       1,  2113,   106,  2115,  -622,  2117,  -622,  1881,   372,  1658,
      43,    44,   372,   857,  1090,   780,   781,  1093,  1094,  1957,
    -872,  -872,  1166,  1170,  1708,   857,  1864,  1002,   161,  1981,
    1865,   820,   816,   817,  1002,   179,  1555,  1002,   751,  1091,
    1015,   782,   783,  2140,  2141,   179,  2143,    75,     1,   821,
    2137,  1015,   822,   744,  2076,  1092,  -216,   372,  2138,  -862,
     395,   827,  2151,   717,  2091,  1095,   823,   687,  2092,   721,
    -862,  2134,    86,    86,     1,  2076,  1519,  1523,   835,  2162,
     736,  1296,  1300,  2154,   372,  1093,  1094,  2076,  1968,   670,
     670,  2155,   372,   836,   857,  -862,  1297,  1301,  2023,     2,
    -621,   670,  -621,  1664,   857,   136,  1668,  2028,   121,  1362,
    1366,  2045,   372,   857,  2093,   146,   147,   857,   385,   878,
     857,  -862,  -862,  -862,  1363,  1367,   394,  1009,  1280,  1282,
    1012,  2136,  2152,  1572,  2153,  2076,  2076,  1573,  2076,   839,
    2158,   843,   847,   784,  2076,    28,    29,  1635,  1636,  1637,
      32,  1734,  1735,  1284,  1286,  1738,   149,    38,  1344,  1346,
     830,   830,   848,   146,   147,  -216,  1285,  1287,   656,   254,
    1416,  -216,   149,   751,   573,  1739,  1412,  1502,   900,   850,
     412,    43,    44,  1348,  1350,   542,  1749,   543,   123,    51,
    2165,  1627,   564,   907,  2076,   123,  1349,  1351,   790,   791,
    1758,   149,   123,   565,    86,   546,    86,   543,  1802,   932,
     932,  1002,   501,   551,   414,  2128,   514,  -891,   810,   811,
     908,   909,  1032,   123,     1,  1765,   573,  1104,   123,   543,
    1015,   123,   957,   751,   149,  1147,  1179,  -948,   142,  1260,
     917,     1,   910,   412,    18,    19,   911,   964,   912,   466,
     466,  1267,   551,     1,   830,   830,   830,   830,  1519,  1523,
     965,   697,   697,   966,   697,   697,   573,   812,   813,   697,
     697,   697,   697,   967,    28,    29,   674,   674,   913,    32,
    1327,  1002,     1,  1002,   970,  1981,    38,  1182,   674,  1034,
    -891,  -891,  1332,   687,     1,  -891,  -872,  -872,  1281,  1283,
    1026,  -872,  -891,   466,   466,  1027,   123,  1015,  -872,  1028,
      43,    44,   198,  1509,   123,  1510,  1547,  1067,    51,  1056,
     533,   751,  1507,  1609,  1508,   569,  -891,  -891,  1345,  1347,
    1893,  1035,  -872,  -872,   980,   981,   982,   891,  1073,   670,
    -891,  -891,  -891,   699,  1079,   647,   647,  1102,     1,   551,
     751,  1085,  1022,  1024,   272,  1123,  1103,   647,  1123,  1105,
     851,  1123,   751,  1109,  1851,  1614,   818,   819,  1010,  1123,
    1446,  1448,  1123,     2,  1790,  1791,  1793,  1794,  1894,  1107,
    1447,  1449,   121,  1161,  1163,  1023,  1025,  1848,  1110,  1002,
    1162,  1164,  1111,    28,    29,   291,   294,  1143,    32,  1129,
     551,  1400,  1401,  1862,   508,    38,  1131,  1132,   697,   697,
     697,   697,   697,   697,   697,   697,  1144,   416,  1140,    28,
      29,  1141,  1960,  1145,    32,  1146,   372,   372,  1244,    43,
      44,    38,  1180,  1191,  1204,  1256,  1402,   412,  1403,   210,
    1008,  1571,   412, -1009,   534, -1009,  1404,  1405,   537,   540,
    1406,  1407,   179,   395,   387,    43,    44,  1969,  1198,  1972,
    1238,  1419,  1912,  1913,  1582,    86,   564,  1588,  1815,  1420,
    1436,  1444,  1463,   687,  1483,   736,   581,   565,  1445,  1548,
    -724,  -727,  1549,  1983,  1198,  1985,  1550,  1570,  1575,  1551,
    1576,  1552,   551,  1585,  1553,  1241,  1602,  1393,  1603,  1586,
    1601,   697,  1605,  1610,  1618,  1629,   412,   670,  1619,   670,
     123,   123,  1620,   123,   551,  1624,  1970,  1644,  1973,  1166,
    1170,  1166,  1170,   420,  1648,   149,   674,  1665,  1125,  1666,
     622,  2129,   669,  1182,  1002,  1677,  2130,   372,   466,  1679,
     466,  1002,  1984,   830,  1986,  1002,  1205,  1681,  1682,  1692,
    1693,   693,  1694,  1697,   687,  1778,  1705,  -903,  1700,  1704,
     656,   656,   656,   656,   466,  1710,   466,   123,  1717,    86,
    1723,  1726,  1731,  1733,  1755,   670,  1816,  1759,  1773,  1787,
    -730,  1288,  1290,  1809,  1292,     1,  1810,  1811,   573,  1123,
    1123,  1123,  1123,  1812,  1818,   647,  1813,  1839,  1840,  1123,
    1123,   687,  1123,  1814,  1123,  1845,  1849,  1870,  1863,  1352,
    1354,  1356,  1358,  1866,  1867,  1888,  1123,  1872,  1874,  1876,
    1877,  1010,  1878,   573,  1880,  1143,  1885,  1886,  1627,   785,
    -903,  -903,   573,  1887,     1,  -903,  1889,  1900,  2009,   573,
    2009,  1901,  -903,  1904,   736,  1905,   573,  1910,  1955,  -231,
    2051,  1959,   414,   414,  1962,  1963,    28,    29,  1966,     2,
     412,    32,   549,  1967,  1971,  2010,  -903,  -903,    38,  1974,
    1976,   744,   744,   744,   744,   744,   744,   744,   744,  1995,
    -903,  1460,  -903,  2015,  2022,  2024,  1975,  2025,  2058,  2041,
    2026,  2042,    43,    44,   674,  2043,   674,   573,  2044,  2027,
     416,   893,     1,    52,   899,    28,    29,  2029,  2030,  2052,
      32,  2035,  2036,   573,  2037,  2059,  2038,    38,  2083,  2090,
    1486,  2094,  2095,  2096,  2097,   619,   623,     2,  2098,   466,
     466,   466,   466,   466,   830,  2099,   830,  2105,  2110,  2111,
    2116,    43,    44,   466,   466,   466,   466,  2127,  1002,    57,
    2135,  2139,   414,  2142,  1123,  2123,  2124,  2148,   551,   561,
    2149,  2150,   674,   647,   744,   647,  2074,  2159,  2160,  2161,
    2163,  2164,   948,    28,    29,  1143,  1627,  2166,    32,  1645,
    2144,  1012,  1785,   949,  1408,    38,   950,   951,   954,   372,
     114,  2009,  1498,  2009,  1002,   682,  1002,  1019,  1453,  1331,
    1021,   683,  1488,    18,    19,  1763,   885,  1230,    57,    43,
      44,   466,   466,  1002,   877,   151,  1978,  1561,  1123,  1123,
     720,  1236,  1123,  2112,  1123,   615,   290,  1123,   279,   663,
      86,   647,    57,    28,    29,    57,  1473,   281,    32,    28,
      29,   255,    57,   293,    32,    38,  1627,   283,  1143,    57,
      57,    38,  1143,  1954,     0,  2009,  2009,     0,  2009,     0,
    2009,     0,    57,     0,  1123,   381,  1002,     0,  1599,    43,
      44,     0,     0,     0,     0,    43,    44,    57,     0,     0,
    1138,     0,     0,    51,     0,   406,   859,  1143,  1627,  2133,
     406,   255,  1123,   406,     0,     0,     0,   565,  2009,  2009,
       0,  2009,     0,   255,  1143,    57,   406,   255,   406,     0,
     406,     0,     0,     0,     0,     1,     0,  2009,     0,     0,
       0,     0,     0,     0,   669,   669,   669,   669,     0,     0,
       0,     0,     0,     0,  2009,   255,   255,     0,     0,     0,
       2,     0,     0,  1822,  1826,     0,     0,   406,     0,   121,
       0,     0,  1185,  1187,  1188,  1838,     0,  1662,     0,     0,
    1675,   556,   840,     0,   844,     0,     0,   551,     0,   551,
      57,     0,     0,     0,     0,     1,    28,    29,   372,     0,
       0,    32,  1695,   551,   551,     0,    28,    29,    38,     0,
     372,    32,   619,     0,     0,   619,     0,     0,    38,   414,
       2,     0,     0,     0,   656,     0,     0,   656,     0,   121,
       0,     0,    43,    44,   255,     0,  1125,   255,   255,   643,
       0,     0,    43,    44,   400,     0,  1182,    57,     0,     0,
      51,     0,     0,    52,     0,     0,     0,    57,   255,    57,
       1,     0,   927,     0,     0,   656,    28,    29,  1002,     0,
       0,    32,     0,     0,     0,     0,     0,   255,    38,   656,
     656,   656,   656,   255,     0,     2,  1645,  1289,  1291,  1012,
    1293,     0,   406,     0,   121,   483,     0,     0,     0,     0,
       0,     0,    43,    44,     0,     0,     0,   483,     0,     0,
      51,   483,     0,    52,  1459,  1353,  1355,  1357,  1359,   760,
     761,   762,   763,   764,   765,   766,   767,   768,   769,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,   619,
     623,  1167,  1171,    38,     0,    28,    29,     0,     0,    57,
      32,     0,     0,     0,   406,     0,   406,    38,   416,   416,
       0,     0,  1057,     0,    66,     0,     0,    43,    44,   619,
       0,     0,   372,   372,     0,    51,     0,     0,    52,     0,
       0,    43,    44,     0,     0,     0,    57,     0,   406,    57,
       0,     0,   255,    57,     0,     0,  1503,     0,   879,     0,
       0,     0,    57,   255,     0,    57,     0,   551,     0,     0,
       0,     0,     0,  1993,     0,     0,   551,     0,   611,     0,
       0,     0,  1108,     0,     0,     0,   770,     0,     0,     1,
       0,   414,     0,   406,   406,   414,     0,     0,    57,    57,
       0,     0,   573,     0,     0,   406,  1770,    66,     0,     0,
     958,     0,     0,     0,     2,   255,     0,    66,   416,   406,
     406,   714,     0,   121,    66,    66,     0,   714,  1505,     0,
       0,     0,   551,   551,     0,     0,     0,     0,    57,     0,
       0,   406,   406,     0,    18,    19,   406,   406,     0,     0,
     406,   406,     0,     0,     0,     0,     0,   643,   414,     0,
      28,    29,     0,     0,   255,    32,   481,   255,    28,    29,
       0,     0,    38,    32,    28,    29,   414,     0,   481,    32,
      38,     0,   481,    57,     0,     0,    38,     0,   406,     0,
     406,     0,     0,    57,   406,     0,    43,    44,     0,     0,
      18,    19,   573,     0,    43,    44,     0,    52,     0,     0,
      43,    44,    51,    57,     0,  1205,    57,     0,    57,     0,
      57,  1608,     0,     0,     0,     0,     0,    57,  1645,  1012,
      28,    29,     0,    28,    29,    32,   872,     0,    32,     0,
       0,  2070,    38,  2073,   372,    38,     0,   872,   669,  1923,
    1927,   669,  1933,  1937,     0,     0,     0,  1941,  1945,  1949,
    1953,     0,   372,     0,     0,     0,    43,    44,     0,    43,
      44,     0,     0,  -456,    51,     0,  -456,  -456,  -456,  -456,
    -456,  -456,  -456,  -456,     0,     0,     0,     0,     0,   669,
       0,   643,   643,   643,   643,     0,     0,     0,     0,   963,
       0,     0,    66,   669,   669,   669,   669,     0,     0,  2109,
       0,     0,    66,   372,    66,  1895,     0,  1898,     0,   255,
     255,   255,     0,     0,    57,     0,  1646,     0,  1647,     0,
     406,  1906,  1908,     0,     0,     0,     0,   736,   255,     0,
       0,     0,     0,     0,     0,   255,   255,   406,     0,   255,
     255,     0,   414,     0,     0,    76,   406,   414,     0,     0,
       0,     0,     0,   656,   656,   416,     0,    57,     0,     0,
     643,     0,     0,  1125,     0,  1125,   656,   643,     0,   656,
     643,     0,     0,     0,  1461,  -456,  -456,   656,     0,     0,
    1125,     0,     0,     0,     0,  -456,   699,   699,   699,   699,
     699,   699,   699,   699,  -456,  -456,  -456,  -456,  -456,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     573,   414,     0,  1487,  -456,  -456,  -456,  -456,  -456,  -456,
    -456,  -456,  -456,  -456,  -456,     0,     0,     0,    76,     0,
       0,     0,     0,  1583,     0,     0,  1589,   481,    76,     0,
       0,     0,     0,     0,     0,    76,    76,     0,   481,     0,
      57,     0,   414,    57,    57,    57,     0,     0,     0,    28,
      29,    28,    29,     0,    32,     0,    32,     0,     0,     0,
       0,    38,     0,    38,  1630,     0,   406,   406,    57,   699,
       0,     0,     0,     0,     0,    57,    88,   484,  1167,  1171,
    1167,  1171,     0,   255,    57,    43,    44,    43,    44,   484,
     481,    57,     0,   484,   255,     0,   406,   402,    57,   852,
    1562,   619,     0,   619,     0,     0,    28,    29,  1003,  1211,
    1221,    32,     0,  1211,  1221,  2032,  -456,  -456,    38,   736,
       0,     0,     0,     0,  2039,     0,  -456,     0,   131,     0,
       0,  -456,  -456,  -456,     0,  -456,  -456,  -456,  -456,  -456,
       0,    57,    43,    44,     0,     0,     0,     0,     0,    57,
       0,  1600,     0,     0,   853,   414,     0,   416,   164,   182,
     195,   416,     0,     0,     0,    57,   406,   233,     0,    88,
       0,     0,     0,    57,    57,     0,    88,    88,   406,     0,
    2047,  2049,     0,     0,    57,     0,     0,  1125,  1125,  1125,
    1125,     0,     0,  1125,     0,     0,     0,   656,   656,     0,
    1125,     0,  1125,     0,   643,   255,   643,   195,   399,   401,
     403,   404,   255,    76,  1125,     0,     0,   472,     0,     0,
     472,     0,     0,    76,   416,    76,     0,     0,     0,     0,
       0,     0,     0,   472,     0,   472,     0,   472,     0,     0,
    1795,     0,   416,  1676,     0,     0,     0,   406,   406,     0,
       0,   406,   406,   406,     0,     0,     0,     0,     0,   532,
     401,   403,     0,     0,     0,  1696,     0,  1425,     1,     0,
       0,    57,   406,     0,     0,     0,    57,     0,  1425,     0,
       0,     0,    57,     0,     0,     0,     0,     0,    57,  1203,
       0,     0,     0,     2,    57,     0,   562,   577,     0,    66,
       0,     0,   192,   193,     0,     0,     0,   669,   669,     0,
       0,     0,   643,     0,     0,   643,     0,     0,   643,   669,
       0,  1003,     0,     0,     0,     0,     0,     0,  1003,     0,
       0,  1003,     0,     0,     0,     0,     0,     0,     0,    28,
      29,   613,     0,     0,    32,     0,     0,     0,     0,     0,
       0,    38,  1125,     0,   182,     0,   643,     0,   484,     0,
       0,  1125,     0,  1125,   688,     0,    88,     0,     0,   484,
     643,   643,   643,   643,     0,    43,    44,     0,     0,     0,
       0,     0,     0,    51,     0,     0,    52,     0,   406,   406,
       0,     0,     0,   255,     0,   255,   611,     0,     0,     0,
       0,     0,    57,     0,     0,     0,     0,     0,     0,    57,
       0,     0,   255,   406,    57,     0,  1125,  1125,   416,     0,
    1125,   484,  1125,   416,     0,  1125,     0,     0,     0,  1125,
       0,     0,   255,     0,     0,     0,     0,     0,     0,   255,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,     0,     0,     0,     0,   255,   643,     0,     0,
       0,     0,  1125,   255,   643,     0,     0,   255,   643,   399,
     401,   403,     0,     0,     0,     0,     0,     0,   481,     0,
       0,     0,     0,     0,     0,     0,     0,   416,     0,   481,
    1125,     0,     0,   860,     0,     0,     0,     0,     0,     0,
     472,     0,  1823,  1827,     0,     0,     0,     0,     0,  1771,
       0,   131,     0,     0,     0,  1583,     0,     0,  1589,     0,
       0,     0,     0,     0,     0,     0,  1630,     0,   416,     0,
       0,     0,     0,    82,     0,     0,     0,     0,     0,     0,
     472,   472,     0,    82,     0,   934,     0,     0,     0,   945,
      82,    82,   472,     0,     0,     0,     0,   669,     0,     0,
       0,   164,     0,     0,     0,     0,   472,   472,     0,     0,
       0,     0,     0,     0,     0,  1003,  1003,  1003,     0,     0,
       0,     0,     0,     0,     0,   860,     0,     0,   472,   472,
       0,     0,   485,   472,   472,     0,   611,   472,   472,     0,
     126,   195,   195,   195,   485,     0,     0,     0,   485,    57,
      57,     0,     0,     0,     0,     0,  1688,     0,     0,   195,
     195,     0,     0,  1688,     0,   406,     0,     0,     0,   406,
      76,   180,   126,     0,     0,   472,     0,   472,     0,   232,
    1049,   416,  1058,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   403,     0,   968,
       0,  -637,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   643,     0,     0,    57,     0,     0,     0,     0,   126,
     126,     0,     0,  1003,   342,     0,  -637,     0,     0,     0,
       0,     0,   406,     0,     0,  -637,  -637,     0,   406,   406,
       0,     0,     0,    57,    57,    57,    57,     0,   413,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1896,     0,
    1899,     0,     0,     0,     0,   669,     0,   669,    82,     0,
       0,   530,  -637,  -637,  1907,  1909,     0,  -637,    82,     0,
      82,     0,     0,     0,  -637,     0,     0,     0,     0,     0,
       0,     0,   406,   406,     0,     0,  1823,  1827,     0,     0,
       0,     0,     0,     0,     0,  1183,     0,     0,  -637,  -637,
     413,   688,     0,     0,    57,     0,  -637,     0,   594,  -637,
       0,   596,   969,     0,   967,  -637,     0,     0,   255,   643,
       0,     0,  1213,   669,   643,   643,  1213,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    54,   643,     0,   484,
     643,     0,     0,   126,   860,     0,     0,     0,   643,     0,
     484,     0,     0,     0,     0,     0,   180,  1003,  1003,     0,
       0,     0,     0,     0,  1003,  1003,     0,     0,  1003,  1003,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    57,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   413,   873,     0,     0,   702,   705,   707,     0,
       0,   413,     0,     0,   873,     0,   406,   413,    57,   170,
       0,   406,     0,   728,     0,     0,     0,     0,   342,    54,
       0,     0,     0,     0,     0,     0,    54,    54,     0,    57,
       0,     0,     0,     0,     0,   413,     0,     0,     0,     0,
     413,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1413,   873,     0,  2033,     0,
       0,   126,   860,     0,     0,     0,     0,  2040,     0,   164,
     860,  1427,     0,     0,     0,   406,     0,   413,  1434,   413,
       0,   860,     0,  1442,     0,     0,     0,     0,     0,     0,
     255,   643,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   126,     0,     0,     0,   406,     0,   406,
       0,   413,    57,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,  2048,  2050,     0,     0,     0,     0,     0,
       0,  1471,     0,   406,     0,   406,   577,     0,     0,     0,
       0,   232,   131,     0,     0,     0,     0,   567,     0,     0,
       0,     0,   934,     0,     0,     0,     0,   302,     0,     1,
     303,   106,  1003,     0,     0,   472,     0,     0,   643,   643,
       0,     0,     0,     0,     0,   401,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,   126,   126,   126,     0,  1007,     0,   934,
     596,     0,     0,     0,   170,     0,     0,     0,     0,     0,
       0,   126,   126,   126,   170,     0,    54,     0,     0,     0,
     413,   307,     0,     0,     0,     0,     0,   308,   309,   406,
       0,   406,   126,     0,   472,   472,     0,     0,   472,   472,
     472,   312,     0,     0,     0,  1545,   399,     0,     0,     0,
       0,     0,     0,     0,   313,     0,   403,   413,   314,   315,
     316,   317,   318,   319,   320,    82,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   704,     0,  1003,
    1003,     0,     0,     0,     0,     0,     0,   325,   326,   342,
       0,     0,     0,     0,     0,     0,     0,     0,   406,   406,
     406,   406,   406,    57,     0,    57,     0,     0,     0,     0,
     620,   624,   406,   406,   406,   406,     0,   413,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   567,     0,     0,     0,     0,   468,     0,
       0,   468,     0,     0,     0,     0,     0,   232,     0,     0,
       0,     0,     0,     0,   468,     0,   468,     0,   468,     0,
     360,     0,     0,     0,     0,   472,   472,     0,     0,     0,
     406,   406,     0,     0,     0,     0,     0,     0,   413,     0,
       0,     0,     0,     0,   415,   567,   860,     0,     0,   860,
       0,  1671,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   342,     0,     0,     0,   342,  1213,
       0,     0,     0,     0,     0,     0,  1213,     0,     0,     0,
       0,     0,     0,   413,     0,   567,     0,     0,     0,     0,
     413,     0,     0,   413,   873,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   873,   415,     0,     0,     0,
       0,  1003,  1003,   342,     0,     0,     0,     0,     0,   413,
     413,   413,   413,   413,   413,   413,     0,     0,   413,   413,
       0,   413,   413,   413,   413,   413,   413,   413,   413,     0,
     342,     0,     0,     0,     0,     0,     0,     0,   342,   413,
     413,   413,   413,   413,   413,   413,   413,   413,   413,   413,
     413,   413,   413,   413,   413,   413,   413,     0,   342,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   413,
     413,     0,     0,     0,     0,   126,     0,     0,   415,     0,
       0,     0,   703,   706,   708,     0,     0,   415,     0,     0,
       0,     0,     0,   415,     0,     0,     0,   620,     0,   729,
     620,     0,     0,     0,   360,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   126,     0,     0,     0,     0,     0,
       0,   415,     0,     0,     0,     0,   415,     0,     0,  1742,
       0,   594,     0,   596,   126,     0,     0,   413,     0,   413,
       0,   170,     0,     0,  1751,     0,     0,  1194,     0,     0,
       0,   399,     0,     0,     0,     0,     0,     0,   195,     0,
       0,     0,     0,   415,     0,   415,     0,     0,     0,   413,
       0,     0,     0,  1194,     0,     0,     0,     0,   413,  1764,
       0,   577,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   468,   468,  1779,     0,  -626,     0,   415,     0,     0,
       0,     0,     0,     0,     0,   472,   472,   413,     0,   413,
       0,     0,     0,     0,     0,     0,     0,   468,   468,     0,
    -626,     0,     0,     0,   620,   624,  1168,  1172,     0,  -626,
    -626,     0,     0,     0,     0,     0,     0,   126,   126,   468,
     468,     0,     0,     0,   468,   468,     0,     0,   468,   468,
       0,     0,     0,     0,   620,     0,     0,     0,     0,   472,
     472,     0,   399,     0,     0,     0,  -626,  -626,     0,   357,
       0,  -626,     0,     0,     0,   413,     0,   567,  -626,     0,
       0,   577,     0,     0,     0,     0,   468,     0,   468,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -626,  -626,     0,     0,   415,     0,     0,     0,
    -626,     0,   567,  -626,     0,   413,  1780,     0,   967,  -626,
       0,   567,     0,     0,     0,     0,   413,     0,   567,     0,
       0,     0,     0,     0,     0,   567,     0,     0,     0,     0,
       0,     0,     0,   415,     0,     0,     0,     0,     0,     0,
       0,     0,   342,   342,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   594,
       0,   596,     0,     0,     0,   360,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   567,  1882,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   567,   415,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   413,     0,   413,     0,
       0,     0,     0,     0,     0,     0,     0,   650,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     413,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   413,     0,     0,     0,
     413,     0,     0,   342,     0,     0,     0,   413,     0,     0,
       0,   413,     0,     0,   415,     0,     0,     0,     0,     0,
       0,     0,     0,   747,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   472,     0,   472,     0,     0,   860,
     360,     0,     0,     0,   360,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   415,
     472,     0,   472,     0,     0,     0,   415,     0,     0,   415,
       0,     0,   403,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   360,
       0,     0,     0,     0,     0,   415,   415,   415,   415,   415,
     415,   415,     0,     0,   415,   415,     0,   415,   415,   415,
     415,   415,   415,   415,   415,     0,   360,     0,     0,     0,
       0,     0,     0,     0,   360,   415,   415,   415,   415,   415,
     415,   415,   415,   415,   415,   415,   415,   415,   415,   415,
     415,   415,   415,     0,   360,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   413,     0,
     126,     0,   413,   468,   468,   415,   415,     0,     0,  1657,
       0,     0,     0,     0,     0,     0,  1659,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1584,     0,
       0,  1590,     0,     0,   413,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   413,   472,   472,   472,   472,   472,
     449,  1014,     0,   449,     0,   413,   468,     0,     0,   472,
     472,   472,   472,   415,     0,   415,   449,     0,   449,  1631,
     449,     0,     0,   413,     0,   342,     0,     0,     0,     0,
     413,     0,   413,  1168,  1172,  1168,  1172,     0,     0,     0,
       0,     0,     0,     0,   126,   415,     0,     0,     0,   413,
       0,     0,     0,     0,   415,     0,   620,     0,   620,     0,
       0,     0,     0,     0,  1099,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,   468,   468,   472,   472,   468,
     468,   468,     0,   415,     0,   415,   774,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   650,     2,     0,
       0,     0,   413,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,   650,
     650,   650,   650,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,   415,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,   467,     0,     0,   467,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,     0,     0,   467,  1231,
     467,   415,   467,  1235,     0,     0,     0,     0,     0,   413,
       0,     0,   415,   413,   413,   413,     0,     0,     0,     0,
       0,     0,     0,     0,   342,     0,   468,   468,     0,   413,
     413,   567,     0,     0,   747,     0,   342,     0,   360,   360,
       0,     0,     0,     0,     0,     0,     0,     0,  1272,     0,
       0,     0,     0,     0,   413,   413,     0,   413,   413,     0,
       0,     0,   413,   413,   413,   413,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1326,     0,     0,   413,     0,
     747,     0,     0,  1337,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   413,     0,     0,     0,     0,     0,
       0,     0,   415,  1390,   415,     0,     0,     0,     0,     0,
       0,   648,     0,     0,     0,   126,     0,     0,     0,   413,
       0,     0,     0,     0,     0,     0,   415,     0,     0,     0,
       0,   567,     0,   449,   449,     0,     0,     0,   450,     0,
       0,   450,   415,     0,     0,   952,   415,     0,     0,   360,
       0,     0,     0,   415,   450,     0,   450,   415,   450,   449,
     449,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   449,   449,     0,     0,     0,   449,   449,  1135,     0,
     449,   449,     0,     0,     0,     0,     0,     0,   342,   342,
       0,   413,   413,   413,   413,   413,   413,   413,   413,     0,
       0,     0,     0,     0,     0,     0,     0,   919,   922,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   449,     0,
     449,     0,   413,   413,     0,     0,     0,     0,     0,     0,
       0,     0,   413,   919,   922,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   919,   922,  1824,  1828,     0,
     919,   922,     0,     0,   919,   922,     0,     0,     0,     0,
     624,     0,     0,   624,     0,     0,     0,     0,     0,     0,
    1014,   624,     0,     0,   413,     0,     0,     0,   413,   413,
       0,     0,     0,     0,     0,   467,   467,     0,     0,     0,
    1263,     0,     0,     0,   415,     0,     0,     0,   415,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   467,   467,     0,     0,     0,   468,   468,     0,     0,
       0,     0,     0,  1295,  1299,  1303,  1307,  1311,     0,   567,
    1320,     0,     0,   467,   467,     0,  1263,     0,   467,   467,
     415,     0,   467,   467,     0,     0,     0,     0,     0,  1000,
     415,  1361,  1365,  1369,  1373,  1377,     0,     0,  1320,     0,
       0,   415,     0,   650,     0,     0,   650,     0,     0,     0,
     468,   468,     0,     0,     0,   650,     0,     0,     0,   415,
     467,   360,   467,     0,     0,     0,   415,     0,   415,     0,
     342,     0,     0,     0,     0,     0,     0,  1625,  1626,     0,
       0,     0,     0,     0,   650,   415,  1272,     0,   342,     0,
    1638,     0,     0,  1337,     0,  1642,     0,     0,   650,   650,
     650,   650,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   450,   450,     0,     0,     0,     0,     0,     0,     0,
       0,   648,     0,   953,     0,     0,     0,     0,   415,   342,
       0,     0,     0,     0,     0,     0,     0,   450,   450,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   648,   648,   648,   648,     0,     0,   450,
     450,     0,     0,     0,   450,   450,     0,     0,   450,   450,
       0,   624,   624,     0,     0,     0,     0,     0,  1712,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   450,     0,   450,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   415,     0,     0,     0,   415,
     415,   415,  1000,     0,     0,     0,     0,     0,     0,  1000,
     360,     0,  1000,     0,     0,   415,   415,     0,     0,     0,
       0,     0,   360,     0,     0,     0,     0,     0,   920,   923,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     415,   415,     0,   415,   415,   468,     0,   468,   415,   415,
     415,   415,     0,     0,   920,   923,     0,     0,   449,     0,
       0,     0,     0,     0,   415,     0,     0,     0,     0,     0,
       0,   468,     0,   468,     0,     0,   920,   923,     0,     0,
     415,   920,   923,     0,     0,   920,   923,     0,     0,     0,
       0,     0,     0,     0,  1606,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   415,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1633,     0,     0,     0,     0,   449,   449,  1640,
       0,   449,   449,   449,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1320,     0,  1320,     0,   467,   467,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   360,   360,     0,   415,   415,   415,
     415,   415,   415,   415,   415,     0,     0,     0,     0,     0,
    1014,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   919,   922,     0,     0,   919,   922,     0,   415,   415,
       0,     0,     0,     0,     0,     0,     0,     0,   415,     0,
     467,  1014,     0,     0,     0,     0,   468,   468,   468,   468,
     468,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     468,   468,   468,   468,     0,     0,  1000,     0,  1000,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   449,   449,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     415,     0,   650,   650,   415,   415,     0,     0,     0,     0,
       0,     0,   650,     0,   650,   650,     0,     0,   650,   467,
     467,     0,     0,   467,   467,   467,   650,     0,     0,   650,
       0,     0,     0,     0,     0,     0,     0,     0,   468,   468,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -863,     0,     0,  -863,  -863,
    -863,     0,  -863,  -863,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1000,     0,     0,   648,     0,     0,
     648,     0,     0,     0,     0,     0,     0,     0,     0,   648,
       0,     0,     0,     0,     0,     0,   450,     0,     0,  1014,
       0,     0,     0,     0,     0,     0,   360,     0,     0,     0,
       0,  1914,     0,     0,     0,     0,     0,     0,   648,  -863,
       0,     0,     0,  1712,   360,  -863,  -863,  -863,  1638,     0,
       0,  1642,   648,   648,   648,   648,     0,     0,  -863,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     467,   467,  -863,     0,     0,     0,  -863,  -863,  -863,  -863,
    -863,  -863,  -863,  -863,     0,   450,   450,     0,     0,   450,
     450,   450,     0,     0,   221,   360,     0,  -863,  -863,     0,
    -863,  -863,  -863,     0,     0,  -863,  -863,     0,  -863,  -863,
    -863,  -863,     0,     0,     0,  1014,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1014,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   221,     0,     0,  1000,
       0,     0,     0,     0,   417,     0,  1000,     0,     0,     0,
    1000,     0,     0,     0,     0,     0,   650,   650,   650,   650,
       0,     0,   650,     0,   509,     0,   650,   650,     0,   650,
       0,   650,     0,     0,     0,     0,     0,   302,     0,     1,
     303,   106,   304,   650,   305,   306,     0,     0,     0,     0,
       0,     0,     0,  2017,  2018,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,   449,   449,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   450,   450,     0,     0,
       0,     0,   920,   923,     0,     0,   920,   923,     0,     0,
       0,   307,     0,     0,     0,     0,     0,   308,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,   312,   449,   449,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     0,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,   919,   922,   322,     0,     0,   323,  1157,   324,
       0,     0,  1158,     0,     0,  1014,     0,   325,   326,  1719,
     327,   328,   329,   330,     0,     0,     0,     0,     0,  1916,
       0,   650,     0,     0,  1919,  1921,  1925,  1929,  1931,  1935,
     650,     0,   650,  1939,  1943,  1947,  1951,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   919,   922,     0,     0,
       0,     0,     0,  1000,     0,     0,     0,     0,     0,     0,
       0,     0,    74,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     467,   467,  1014,     0,     0,   650,   650,     0,   831,   650,
       0,   650,     0,     0,   650,     0,     0,     0,   650,  1000,
       0,  1000,     0,     0,     0,  2114,     0,     0,     0,     0,
       0,     0,     0,   117,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1014,     0,     0,     0,   866,   509,     0,
       0,   650,   875,     0,   467,   467,     0,     0,     0,     0,
       0,   882,     0,     0,   889,   178,     0,     0,     0,     0,
       0,     0,     0,     0,   261,    74,     0,     0,     0,   650,
       0,     0,    74,    74,     0,     0,     0,     0,     0,     0,
       0,  1000,     0,     0,  2157,     0,   648,   648,   940,     0,
     383,     0,     0,     0,   956,     0,   648,     0,   648,   648,
       0,     0,   648,     0,     0,     0,     0,   449,     0,   449,
     648,     0,     0,   648,   482,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   482,     0,     0,     0,
     482,     0,     0,   449,     0,   449,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   450,   450,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   261,   261,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   221,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   221,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   572,     0,     0,     0,     0,     0,     0,
     450,   450,   221,     0,     0,   221,     0,   221,     0,   221,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   610,     0,     0,
     261,   261,   261,     0,     0,     0,     0,     0,     0,     0,
     178,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     178,   261,    74,  1000,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   467,
     713,   467,     0,     0,     0,     0,   713,     0,     0,     0,
       0,     0,     0,   920,   923,   735,     0,     0,   449,   449,
     449,   449,   449,     0,     0,   467,     0,   467,     0,     0,
       0,     0,   449,   449,   449,   449,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    91,     0,     0,     0,
     648,   648,   648,   648,     0,     0,   648,     0,     0,     0,
     648,   648,     0,   648,     0,   648,     0,   920,   923,     0,
       0,     0,     0,     0,     0,     0,     0,   648,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   120,   132,     0,
     449,   449,   919,   922,     0,   919,   922,     0,  1126,   572,
       0,     0,     0,     0,     0,   871,   919,   922,   919,   922,
       0,     0,     0,     0,     0,     0,   871,     0,     0,   183,
     132,     0,     0,     0,   230,     0,     0,     0,     0,    91,
       0,     0,  1165,  1169,     0,     0,    91,    91,     0,     0,
       0,     0,     0,     0,     0,   450,     0,   450,     0,     0,
       0,   572,     0,     0,   384,     0,     0,     0,     0,     0,
       0,     0,   831,   831,   831,     0,     0,   393,   962,     0,
       0,   450,     0,   450,   919,   922,     0,     0,     0,     0,
     467,   467,   467,   467,   467,   417,   417,   221,     0,     0,
       0,   572,     0,     0,   467,   467,   467,   467,     0,     0,
       0,     0,     0,     0,     0,   648,     0,     0,     0,     0,
     261,     0,     0,     0,   648,     0,   648,   261,   529,     0,
     261,     0,     0,     0,     0,     0,     0,   745,     0,     0,
       0,   545,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   773,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   579,     0,     0,
    1465,     0,   467,   467,     0,     0,     0,     0,     0,   648,
     648,     0,     0,   648,     0,   648,     0,     0,   648,     0,
       0,     0,   648,     0,     0,   417,     0,     0,     0,     0,
       0,     0,   509,   509,     0,     0,     0,     0,     0,     0,
       0,   132,     0,   509,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   183,   648,     0,     0,     0,  1139,
       0,     0,     0,     0,   689,     0,    91,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   450,   450,   450,   450,
     450,     0,     0,   648,   261,   261,   261,   261,     0,     0,
     450,   450,   450,   450,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   261,   261,   261,     0,     0,   178,     0,     0,
       0,     0,     0,  1197,     0,     0,     0,     0,     0,     0,
     221,   261,     0,     0,     0,   221,     0,     0,  1210,  1220,
     735,  1565,  1210,  1220,     0,     0,     0,  1565,     0,  1197,
       0,     0,     0,   221,     0,     0,     0,     0,   450,   450,
    1240,     0,     0,   261,     0,     0,     0,     0,     0,     0,
     261,     0,     0,   261,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   861,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   132,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   655,   920,   923,     0,   920,   923,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   920,   923,   920,
     923,     0,     0,     0,     0,   935,     0,     0,   943,     0,
       0,     0,     0,   572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   417,   221,     0,   733,  1134,     0,     0,     0,
       0,     0,     0,     0,     0,   861,     0,     0,   572,     0,
       0,     0,     0,     0,     0,     0,  1424,   572,     0,     0,
       0,   132,   132,   132,   572,   920,   923,  1424,   117,   735,
       0,   572,     0,     0,  1581,     0,     0,  1587,     0,   132,
     132,     0,     0,     0,     0,     0,  1604,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1050,     0,  1059,     0,     0,     0,     0,     0,     0,     0,
       0,   396,     0,  1061,     0,  1628,     0,     0,     0,     0,
       0,     0,   572,     0,     0,     0,     0,     0,     0,  1165,
    1169,  1165,  1169,     0,     0,     0,     0,     0,   572,     0,
       0,     0,     0,     0,     0,     0,     0,   733,     0,   545,
       0,     0,     0,     0,     0,     0,     0,     0,   745,     0,
       0,     0,   396,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1271,     0,     0,     0,     0,   261,   261,   261,
       0,     0,     0,     0,     0,   610,     0,     0,     0,     0,
       0,  1294,  1298,  1302,  1306,  1310,     0,     0,  1319,  1325,
     575,     0,     0,     0,   745,     0,     0,  1336,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1360,
    1364,  1368,  1372,  1376,  1181,     0,  1319,  1389,   831,   831,
       0,   689,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   417,     0,     0,     0,   417,     0,
       0,     0,  1215,     0,     0,     0,  1215,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   685,     0,     0,
       0,     0,     0,     0,   861,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   261,     0,     0,   261,     0,
       0,   261,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1139,     0,     0,     0,     0,     0,
       0,   417,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   417,  1783,   417,  1783,     0,     0,     0,   261,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   261,   261,   261,   261,  1137,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1155,     0,     0,   261,     0,   261,     0,
       0,     0,   849,     0,   655,   655,   655,   655,   854,     0,
       0,     0,  1661,     0,     0,   610,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   861,  1414,     0,     0,     0,
       0,     0,   861,     0,     0,  1687,     0,     0,     0,     0,
     861,  1428,  1687,   733,     0,     0,   733,     0,  1435,   260,
       0,   861,   120,   132,     0,     0,     0,     0,     0,   261,
     261,     0,     0,     0,     0,     0,   261,   261,     0,   733,
     261,   261,     0,     0,  1155,     0,     0,     0,   931,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,     0,     0,     0,
    1468,  1270,   509,     0,     0,     0,   579,     0,     0,     0,
       0,     0,   132,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   935,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   417,     0,   221,  1006,  1323,
     417,  1011,     0,   260,   260,     0,     0,  1335,     0,     0,
       0,     0,  1134,     0,  1006,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1387,     0,   935,
       0,     0,     0,     0,     0,   575,     0,     0,   571,     0,
    1271,     0,     0,  1821,  1825,     0,     0,  1336,   575,     0,
       0,     0,     0,  1834,     0,  1837,  1581,     0,     0,  1587,
       0,     0,     0,     0,   417,     0,     0,  1628,     0,     0,
    1850,     0,     0,     0,     0,  1546,     0,     0,     0,     0,
       0,  1319,   609,  1319,  1554,   260,   260,   260,     0,   733,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   260,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   712,     0,     0,     0,     0,
       0,   712,     0,     0,   261,     0,     0,   572,     0,     0,
     734,     0,  1711,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   685,     0,
       0,     0,     0,     0,   685,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   417,     0,
       0,     0,     0,     0,     0,     0,   861,     0,     0,   861,
       0,  1215,     0,     0,   571,     0,     0,   572,     0,  1678,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1215,
       0,   261,   261,     0,     0,     0,  1215,   261,   261,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     261,     0,     0,   261,     0,     0,     0,     0,     0,     0,
       0,   261,     0,     0,     0,     0,   571,  1988,  1989,  1990,
    1991,     0,   417,  1992,   417,     0,     0,  1821,  1825,     0,
    1834,     0,  1837,     0,     0,     0,     0,     0,   655,     0,
       0,   655,  1592,  1594,  2001,  1597,     0,     0,     0,     0,
       0,     0,     0,  1607,     0,     0,   571,     0,     0,     0,
       0,  1616,     0,     0,     0,     0,     0,     0,  1155,     0,
       0,     0,     0,     0,   685,   260,     0,     0,     0,   655,
       0,  1433,   260,     0,     0,   260,  1155,     0,     0,     0,
       0,  1155,     0,   655,   655,   655,   655,     0,     0,     0,
       0,     0,   735,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1651,     0,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1469,     0,     0,     0,     0,   575,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   931,  1155,     0,     0,     0,
       0,     0,     0,   261,   261,     0,     0,     0,     0,  1743,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1992,  1750,     0,   572,     0,   263,     0,     0,
    1753,  2069,     0,  2072,     0,     0,     0,     0,   393,     0,
       0,  1155,   931,     0,     0,     0,     0,     0,     0,   260,
     260,   260,   260,     0,     0,     0,     0,     0,     0,  1435,
       0,   579,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   260,   260,   260,
       0,   261,   261,     0,     0,     0,  2101,  2102,  1196,   396,
    2069,     0,  2072,  1155,     0,  2106,   260,     0,   575,  2108,
     575,     0,     0,  1209,  1219,   734,  1155,  1209,  1219,     0,
       0,     0,     0,     0,  1196,     0,     0,     0,     0,     0,
       0,   263,   263,     0,     0,  1239,     0,     0,   260,     0,
       0,     0,  2108,     0,     0,   260,     0,     0,   260,     0,
       0,  1807,     0,     0,   735,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   574,  1155,     0,     0,
    2146,   579,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1711,     0,     0,
       0,     0,  1918,  1920,  1924,  1928,  1930,  1934,     0,     0,
       0,  1938,  1942,  1946,  1950,     0,     0,     0,     0,     0,
     612,     0,     0,   263,   263,   263,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   571,     0,
     685,     0,   685,     0,   263,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   715,     0,     0,     0,     0,     0,   715,
       0,     0,     0,   571,     0,     0,     0,     0,   737,     0,
       0,     0,   571,     0,     0,     0,     0,  1883,     0,   571,
       0,     0,     0,     0,   734,     0,   571,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   571,     0,     0,
    1920,  1924,  1930,  1934,  1938,  1942,  1946,  1950,  1414,     0,
       0,     0,     0,   571,     0,     0,     0,     0,     0,   732,
       0,     0,   574,     0,     0,     0,     0,   655,   655,     0,
    1753,     0,     0,  1155,     0,  1155,     0,     0,  1155,   655,
       0,     0,     0,     0,  1841,  1844,     0,  1846,     0,   861,
       0,     0,   260,   260,   260,     0,     0,  1155,     0,  1857,
     609,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   574,     0,     0,     0,     0,     0,
       0,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,  1155,     0,     0,     0,  1155,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,   574,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   732,     0,   263,     0,     0,     0,   685,     0,     0,
     263,     0,     0,   263,  1754,   307,     0,   550,  1678,     0,
       0,   308,   309,   310,     0,     0,     0,     0,     0,     0,
     260,     0,     0,   260,   311,   312,   260,     0,     0,     0,
       0,     0,  1433,     0,   575,     0,     0,  1767,   313,     0,
    1011,     0,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,  1157,   324,   260,     0,  1724,     0,     0,     0,
    1725,   325,   326,     0,   327,   328,   329,   330,   260,   260,
     260,   260,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   260,     0,   260,     0,     0,     0,     0,     0,   698,
     125,     0,     0,     0,     0,   849,     0,  1660,   550,  1155,
     609,     0,     0,   575,   550,     0,     0,   263,   263,   263,
     263,     0,     0,     0,   575,     0,     0,   655,  1155,     0,
    1686,   125,   125,     0,     0,  1155,     0,  1686,     0,  1846,
       0,  1999,     0,     0,     0,   263,   263,   263,     0,     0,
    2005,     0,     0,     0,   260,   260,  1199,     0,     0,     0,
       0,   260,   260,     0,   263,   260,   260,     0,     0,     0,
       0,  1212,  1222,   737,     0,  1212,  1222,     0,     0,   125,
     125,  1136,  1199,     0,   550,     0,   550,     0,     0,     0,
       0,     0,     0,  1242,   733,     0,   263,  1154,     0,     0,
       0,  1159,     0,   263,     0,     0,   263,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   732,     0,     0,
     732,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1224,     0,     0,     0,     0,   576,
       0,     0,     0,   732,     0,     0,     0,     0,  1154,  1159,
       0,     0,     0,     0,     0,     0,   574,  2061,  2064,     0,
    1155,     0,  1155,     0,     0,   655,  1155,   655,     0,     0,
       0,     0,     0,     0,     0,  1269,     0,     0,     0,   685,
     685,     0,  1961,   125,     0,     0,     0,     0,     0,     0,
       0,   574,     0,     0,     0,     0,   125,  1001,     0,     0,
     574,     0,     0,     0,     0,     0,   686,   574,     0,     0,
       0,     0,   737,  1321,   574,     0,     0,     0,     0,     0,
       0,  1334,  1155,     0,     0,  1155,     0,     0,     0,     0,
       0,     0,     0,   655,   550,     0,  1006,     0,     0,   260,
       0,  1385,   571,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   574,     0,     0,     0,  1155,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   574,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   550,     0,     0,     0,     0,     0,
       0,     0,     0,   732,     0,     0,     0,     0,     0,     0,
       0,   125,     0,     0,     0,     0,     0,   576,     0,     0,
     263,   263,   263,     0,     0,     0,     0,     0,   612,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   571,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,     0,     0,   260,   260,     0,     0,
       0,     0,   260,   260,     0,  1189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   260,     0,     0,   260,     0,
       0,     0,     0,     0,     0,     0,   260,   576,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1001,     0,     0,     0,     0,     0,     0,  1001,     0,     0,
    1001,     0,     0,     0,     0,     0,     0,     0,   263,     0,
       0,   263,     0,     0,   263,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   125,   125,     0,   125,     0,     0,
     686,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   125,   125,     0,     0,     0,     0,     0,     0,
       0,     0,   263,     0,     0,     0,     0,   734,     0,     0,
       0,     0,   125,     0,   576,     0,   263,   263,   263,   263,
       0,     0,     0,     0,     0,     0,     0,   576,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   263,
       0,   263,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1663,  1591,  1593,   612,  1596,
       0,     0,     0,     0,     0,     0,     0,  1136,   260,   260,
    1159,     0,     0,     0,     0,  1615,     0,     0,  1689,     0,
       0,     0,  1154,  1159,     0,  1689,     0,     0,     0,     0,
     571,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1154,  1159,   263,   263,     0,  1154,     0,     0,     0,   263,
     263,     0,     0,   263,   263,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1001,     0,   550,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1649,   686,  1653,     0,
       0,     0,     0,   686,     0,     0,   260,   260,     0,     0,
       0,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,   550,     0,     0,     0,     0,
    1154,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1001,     0,  1001,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   734,
       0,     0,     0,   122,     0,  1154,  1159,   307,     0,     0,
     139,     0,     0,   308,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,   312,     0,     0,
       0,     0,     0,   162,   171,   194,     0,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,   550,     0,     0,     0,     0,  1154,     0,  1159,
     322,     0,     0,   323,  1157,   324,     0,     0,  1158,     0,
    1154,  1159,     0,   325,   326,  1729,   327,   328,   329,   330,
       0,     0,   122,   122,     0,     0,     0,     0,     0,     0,
       0,     0,  1001,     0,     0,     0,     0,     0,     0,   492,
       0,     0,     0,   550,     0,     0,     0,   263,     0,     0,
     574,     0,     0,   576,     0,   523,     0,     0,     0,     0,
     576,  1154,     0,  1159,     0,   125,     0,     0,     0,     0,
       0,     0,     0,     0,   122,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,     0,     0,     0,     0,     0,
       0,   162,   568,   576,     0,     0,     0,     0,   576,     0,
       0,     0,     0,     0,   125,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   576,   550,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     574,     0,     0,     0,     0,     0,   171,   550,     0,     0,
       0,     0,     0,     0,   263,   263,     0,     0,     0,   171,
     263,   263,     0,     0,     0,     0,     0,  1001,     0,   568,
       0,   576,     0,   263,  1001,     0,   263,     0,  1001,     0,
       0,     0,     0,     0,   263,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   125,     0,
       0,     0,     0,     0,     0,     0,     0,   576,     0,   576,
       0,     0,     0,     0,     0,     0,     0,  1817,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1154,  1159,  1154,
    1159,   618,  1154,  1836,     0,     0,     0,     0,  1591,  1843,
       0,  1615,     0,  1159,   122,   737,     0,     0,     0,     0,
     122,  1154,  1159,  1615,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,  1154,   568,  1159,     0,  1154,
       0,  1159,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,    28,    29,   263,   263,     0,    32,
       0,     0,     0,     0,     0,   247,    38,   248,     0,   686,
     568,   686,     0,     0,     0,     0,     0,     0,   574,     0,
     249,     0,     0,     0,     0,     0,   162,     0,     0,     0,
      43,    44,   250,   251,   252,   253,   206,   207,     0,     0,
       0,  1001,     0,     0,     0,     0,     0,     0,   254,     0,
       0,   550,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   122,   122,   122,     0,
     122,     0,     0,   122,   263,   263,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   122,   122,  1001,     0,  1001,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   523,     0,   568,  1001,   122,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   737,     0,     0,
       0,     0,     0,  1154,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1001,
       0,     0,  1154,     0,     0,     0,     0,  1159,     0,  1154,
    1836,     0,  1159,  1615,     0,  1998,     0,  2000,     0,   259,
       0,     0,     0,  1159,  2004,     0,     0,     0,   258,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1177,     0,     0,     0,     0,     0,   732,   259,
     122,     0,     0,     0,     0,     0,   568,     0,   480,     0,
       0,   259,     0,     0,     0,   259,     0,     0,     0,     0,
     480,     0,     0,     0,   480,     0,   576,     0,     0,     0,
     550,     0,   550,   576,     0,     0,     0,     0,     0,     0,
     125,     0,     0,   259,   259,     0,   550,   550,     0,     0,
       0,     0,   258,   258,     0,     0,     0,     0,     0,     0,
       0,   576,     0,   576,     0,     0,   576,     0,     0,   576,
       0,  1922,  1926,     0,  1932,  1936,     0,     0,     0,  1940,
    1944,  1948,  1952,     0,     0,     0,     0,   570,     0,     0,
       0,  2060,  2063,     0,  1154,  1159,  1154,     0,     0,     0,
    1154,  1836,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1001,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   259,     0,     0,   259,   259,   259,     0,     0,
       0,   608,     0,     0,   258,   258,   258,     0,     0,     0,
       0,     0,     0,     0,   125,     0,   259,     0,     0,     0,
       0,     0,   576,     0,     0,   258,  1154,  1159,     0,  1154,
    1836,     0,     0,   576,  2107,   259,     0,     0,     0,     0,
       0,   259,     0,     0,   711,     0,     0,     0,     0,     0,
     711,     0,     0,     0,   162,     0,   568,     0,     0,     0,
       0,     0,     0,   568,     0,     0,     0,     0,   568,     0,
       0,     0,     0,  1154,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1922,  1926,
    1932,  1936,  1940,  1944,  1948,  1952,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   122,     0,     0,
       0,     0,     0,     0,     0,     0,   122,     0,     0,     0,
     550,   568,     0,     0,     0,     0,     0,   122,     0,   550,
       0,     0,     0,     0,     0,     0,     0,   568,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,     0,     0,   570,     0,     0,     0,     0,     0,   870,
       0,   259,     0,     0,     0,     0,     0,     0,     0,     0,
     870,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1001,     0,     0,   568,   550,   550,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   570,     0,     0,     0,     0,
       0,     0,     0,   259,     0,     0,     0,     0,   576,   576,
       0,   576,   961,     0,     0,     0,     0,     0,     0,     0,
     122,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     122,     0,   122,     0,     0,   570,   302,     0,     1,   303,
     106,   304,     0,   305,   306,   259,     0,     0,     0,     0,
       0,     0,   259,     0,   258,   259,     0,     0,     0,     0,
       0,   258,     0,     2,   258,   125,     0,     0,     0,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,     0,     0,     0,   308,   309,   310,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,   311,
     405,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,   264,    40,     0,   314,   315,   316,
     317,   318,   319,   320,   321,    43,    44,    45,    46,    47,
      48,     0,   122,   322,   122,     0,   323,   730,   324,     0,
       0,     0,     0,     0,     0,     0,   325,   326,     0,   327,
     328,   329,   330,     0,     0,     0,     0,     0,     0,   259,
     259,   259,   259,     0,   264,     0,     0,     0,   258,   258,
     258,   258,     0,     0,     0,     0,   264,     0,     0,     0,
     264,     0,     0,     0,     0,     0,     0,   259,   259,   259,
       0,     0,     0,     0,     0,     0,   258,   258,   258,     0,
       0,     0,     0,     0,     0,     0,   259,     0,   264,   264,
       0,     0,     0,   259,   259,   258,     0,   259,   259,     0,
       0,     0,  1208,  1218,     0,     0,  1208,  1218,     0,     0,
       0,     0,   199,     0,     1,     0,     0,     0,   259,     0,
       0,     0,     0,     0,     0,   259,     0,   258,   259,     0,
       0,     0,     0,     0,   258,     0,     0,   258,     0,     2,
     200,   201,   202,   203,   204,     8,     9,    10,   563,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,   264,     0,     0,
     264,   264,   264,     0,     0,     0,   205,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,   264,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     264,    40,     0,     0,     0,     0,   264,   570,     0,     0,
       0,    43,    44,    45,    46,    47,    48,   206,   207,    51,
       0,     0,   564,  1045,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   565,     0,     0,     0,     0,     0,     0,
       0,   259,   570,     0,     0,     0,     0,     0,     0,   122,
    1423,   570,   259,     0,     0,     0,   122,     0,   570,     0,
       0,  1423,     0,   122,     0,   570,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   122,     0,   568,     0,     0,   122,
       0,     0,   122,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   264,   570,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   264,     0,     0,     0,
       0,   302,   570,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,   259,   259,   259,     0,     0,   122,     0,     0,
     259,   258,   258,   258,     0,   122,     0,     0,   264,   608,
       0,     0,     0,     0,     0,     0,   568,     0,     0,     0,
       0,     0,     0,     0,     0,   307,     0,     0,     0,     0,
       0,   308,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,   312,     0,     0,     0,     0,
     264,     0,     0,     0,     0,     0,     0,   264,   313,     0,
     264,     0,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,  1157,   324,     0,     0,  1724,     0,     0,     0,
    1732,   325,   326,     0,   327,   328,   329,   330,     0,     0,
     259,     0,     0,   259,     0,     0,   259,     0,     0,   258,
       0,     0,   258,     0,     0,   258,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,     0,     0,   258,     0,     0,     0,     0,   259,   259,
     259,   259,     0,     0,     0,     0,     0,   258,   258,   258,
     258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,     0,   259,   264,   264,   264,   264,     0,     0,
     258,     0,   258,     0,     0,     0,     0,     0,     0,     0,
     259,   122,   122,     0,   122,     0,     0,     0,     0,   608,
       0,     0,   264,   264,   264,     0,     0,     0,     0,     0,
     259,     0,     0,     0,     0,     0,     0,   259,     0,  1685,
       0,   264,     0,     0,     0,     0,  1685,     0,   264,   264,
       0,     0,   264,   264,   259,   259,     0,     0,     0,     0,
       0,   259,   259,   258,   258,   259,   259,     0,   122,     0,
     258,   258,     0,   264,   258,   258,     0,     0,     0,     0,
     264,     0,     0,   264,     0,   753,     0,     0,     0,     0,
       0,   754,   755,   756,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -343,     0,     0,     0,     0,     0,     0,     0,  -343,  -343,
       0,     0,     0,  -343,     0,     0,     0,     0,     0,  -343,
    -343,  -343,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -343,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,   757,   264,     0,  -343,  1527,
    -343,  -343,     0,   758,     0,     0,   759,   264,  -343,  -343,
    -343,     0,  -343,  -343,  -343,  -343,  -343,     0,     0,     0,
       0,     0,     0,     0,     0,  -456,     0,  -456,  -456,  -456,
    -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,
    -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,
    -456,  -456,  -456,     0,     0,     0,     0,     0,     0,   259,
       0,     0,     0,     0,     0,     0,     0,     0,   258,     0,
       0,   570,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -456,
       0,     0,     0,     0,     0,  -456,  -456,  -456,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -456,  -456,
       0,     0,     0,     0,     0,     0,     0,   264,   264,   264,
       0,     0,  -456,     0,     0,   264,  -456,  -456,  -456,  -456,
    -456,  -456,  -456,  -456,     0,     0,     0,     0,     0,     0,
       0,     0,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,
    -456,     0,     0,  -456,     0,  -456,  -456,     0,  -456,  -456,
    -456,  -456,  -456,  -456,  -456,  -456,  -456,     0,     0,     0,
       0,   570,     0,     0,     0,     0,   259,   259,     0,     0,
       0,     0,   259,   259,     0,   258,   258,     0,     0,     0,
       0,   258,   258,     0,     0,   259,     0,     0,   259,     0,
       0,     0,     0,     0,   258,     0,   259,   258,     0,     0,
       0,     0,     0,     0,     0,   258,     0,  1506,     0,     0,
       0,     0,     0,     0,     0,   264,     0,     0,   264,     0,
       0,   264,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,     0,     0,   264,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -66,   264,   264,   264,   264,     0,     0,     0,
     -66,   -66,     0,     0,     0,   -66,     0,     0,     0,     0,
       0,   -66,   -66,   -66,     0,     0,   264,     0,   264,     0,
       0,     0,     0,     0,     0,     0,   -66,     0,     0,     0,
       0,     0,     0,     0,     0,   264,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,     0,     0,     0,     0,     0,     0,
    1507,     0,  1508,   -66,     0,   264,   302,     0,     1,   303,
     106,   304,   264,   305,   306,     0,     0,     0,   259,   259,
       0,     0,     0,     0,     0,     0,     0,   258,   258,   264,
     264,     0,     0,     2,     0,     0,   264,   264,     0,     0,
     264,   264,     0,     0,     0,     0,     0,     0,     0,   570,
       0,     0,     0,     0,     0,     0,     0,  1114,  1115,  1116,
     628,  1117,  1118,  1119,  1120,   633,   634,  1121,     0,     0,
     307,     0,     0,     0,     0,     0,   308,   309,   310,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,   311,
     312,  1122,     0,   638,   639,   640,   259,   259,     0,     0,
       0,     0,     0,   313,     0,   258,   258,   314,   315,   316,
     317,   318,   319,   320,   321,    43,    44,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,  -451,   324,   641,
       0,  -451,     0,   254,     0,   642,   325,   326,     0,   327,
     328,   329,   330,  -343,   753,     0,  -343,  -343,  -343,  -343,
     754,   755,   756,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,     0,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,     0,     0,  -343,  -343,
       0,  -343,     0,     0,  -343,  -343,  -343,  -343,  -343,     0,
       0,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,     0,  -343,
       0,  -343,  -343,  -343,   264,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,   757,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,   758,  -343,  -343,   759,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,     0,     2,   200,   201,
     202,   203,   204,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   246,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   247,    38,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   249,
       0,   264,   264,     0,     0,     0,     0,   264,   264,    43,
      44,   250,   251,   252,   253,   206,   207,     0,     0,     0,
     264,     0,     0,   264,     0,     0,     0,   254,     0,  -448,
    1150,   264,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
       0,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,     0,     0,  -448,  -448,     0,  -448,     0,     0,
    -448,  -448,  -448,  -448,  -448,     0,     0,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,     0,  -448,     0,  -448,  -448,  -448,
       0,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   264,   264,  -303,   302,     0,     1,   303,
     106,   304,  -303,   305,   306,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,     2,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,     0,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,     0,     0,
     307,  -303,     0,  -303,     0,     0,   308,   309,   310,  -303,
    -303,   264,   264,  -303,  -303,  -303,  -303,  -303,  -303,   311,
     312,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
       0,  -303,     0,   313,  -303,  -303,     0,   314,   315,   316,
     317,   318,   319,   320,   321,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,   322,  -303,  -303,   323,  1237,   324,  -303,
    -303,  1153,  -303,  -303,  -303,  -303,   325,   326,  -303,   327,
     328,   329,   330,  -303,  -303,  -303,  -303,  -303,  -304,   302,
       0,     1,   303,   106,   304,  -304,   305,   306,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,     2,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,     0,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,     0,     0,   307,  -304,     0,  -304,     0,     0,   308,
     309,   310,  -304,  -304,     0,     0,  -304,  -304,  -304,  -304,
    -304,  -304,   311,   312,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,     0,  -304,     0,   313,  -304,  -304,     0,
     314,   315,   316,   317,   318,   319,   320,   321,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,   322,  -304,  -304,   323,
    1157,   324,  -304,  -304,  1158,  -304,  -304,  -304,  -304,   325,
     326,  -304,   327,   328,   329,   330,  -304,  -304,  -304,  -304,
    -304,  -563,   302,     0,     1,   303,   106,   304,  -563,   305,
     306,  -563,  -563,  -563,  -563,  -563,  -563,  -563,  -563,  -563,
    -563,  -563,  -563,  -563,  -563,  -563,  -563,  -563,  -563,     2,
    -563,  -563,  -563,  -563,  -563,  -563,  -563,  -563,  -563,  -563,
    -563,  -563,  -563,  -563,  -563,  -563,  -563,  -563,  -563,  -563,
    -563,  -563,     0,  -563,  -563,  -563,  -563,  -563,  -563,  -563,
    -563,  -563,  -563,  -563,     0,     0,   307,  -563,     0,  -563,
       0,     0,   308,   309,   310,  -563,  -563,     0,     0,  -563,
    -563,  -563,  -563,  -563,  -563,   311,   312,  -563,  -563,  -563,
    -563,  -563,  -563,  -563,  -563,  -563,     0,  -563,     0,   313,
    -563,  -563,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -563,  -563,  -563,  -563,  -563,  -563,  -563,  -563,   322,
    -563,  -563,   323,  -563,   324,  -563,  -563,  -563,  -563,   741,
    -563,  1318,   325,   326,  -563,   327,   328,   329,   330,  -563,
    -563,  -563,  -563,  -563,  -564,   302,     0,     1,   303,   106,
     304,  -564,   305,   306,  -564,  -564,  -564,  -564,  -564,  -564,
    -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,
    -564,  -564,     2,  -564,  -564,  -564,  -564,  -564,  -564,  -564,
    -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,
    -564,  -564,  -564,  -564,  -564,     0,  -564,  -564,  -564,  -564,
    -564,  -564,  -564,  -564,  -564,  -564,  -564,     0,     0,   307,
    -564,     0,  -564,     0,     0,   308,   309,   310,  -564,  -564,
       0,     0,  -564,  -564,  -564,  -564,  -564,  -564,   311,   312,
    -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,  -564,     0,
    -564,     0,   313,  -564,  -564,     0,   314,   315,   316,   317,
     318,   319,   320,   321,  -564,  -564,  -564,  -564,  -564,  -564,
    -564,  -564,   322,  -564,  -564,   323,  -564,   324,  -564,  -564,
    -564,  -564,   741,  -564,  1384,   325,   326,  -564,   327,   328,
     329,   330,  -564,  -564,  -564,  -564,  -564,  -574,   302,     0,
       1,   303,   106,   304,  -574,   305,   306,  -574,  -574,  -574,
    -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,
    -574,  -574,  -574,  -574,  -574,     2,  -574,  -574,  -574,  -574,
    -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,
    -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,     0,  -574,
    -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,
       0,     0,   307,  -574,     0,  -574,     0,     0,   308,   309,
     310,  -574,  -574,     0,     0,  -574,  -574,  -574,  -574,  -574,
    -574,   311,   312,  -574,  -574,  -574,  -574,  -574,  -574,  -574,
    -574,  -574,     0,  -574,     0,   313,  -574,  -574,     0,   314,
     315,   316,   317,   318,   319,   320,   321,  -574,  -574,  -574,
    -574,  -574,  -574,  -574,  -574,   322,  -574,  -574,   323,  -574,
     324,  -574,  -574,  1153,  -574,  -574,  -574,  -574,   325,   326,
    -574,   327,   328,   329,   330,  -574,  -574,  -574,  -574,  -574,
    -576,   302,     0,     1,   303,   106,   304,  -576,   305,   306,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,     2,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,     0,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,     0,     0,   307,  -576,     0,  -576,     0,
       0,   308,   309,   310,  -576,  -576,     0,     0,  -576,  -576,
    -576,  -576,  -576,  -576,   311,   312,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,     0,  -576,     0,   313,  -576,
    -576,     0,   314,   315,   316,   317,   318,   319,   320,   321,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,   322,  -576,
    -576,   323,  1157,   324,  -576,  -576,  1158,  -576,  -576,  -576,
    -576,   325,   326,  -576,   327,   328,   329,   330,  -576,  -576,
    -576,  -576,  -576,  -575,   302,     0,     1,   303,   106,   304,
    -575,   305,   306,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,     2,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,     0,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,     0,     0,   307,  -575,
       0,  -575,     0,     0,   308,   309,   310,  -575,  -575,     0,
       0,  -575,  -575,  -575,  -575,  -575,  -575,   311,   312,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,     0,  -575,
       0,   313,  -575,  -575,     0,   314,   315,   316,   317,   318,
     319,   320,   321,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,   322,  -575,  -575,   323,  -575,   324,  -575,  -575,  1153,
    -575,  -575,  -575,  -575,   325,   326,  -575,   327,   328,   329,
     330,  -575,  -575,  -575,  -575,  -575,  -337,  1879,     0,  -337,
    -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,
    -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,
    -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,
    -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,
    -337,  -337,  -337,  -337,  -337,  -337,  -337,     0,  -337,  -337,
    -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,     0,
       0,  -337,  -337,     0,  -337,     0,     0,  -337,  -337,  -337,
    -337,  -337,     0,     0,  -337,  -337,  -337,  -337,  -337,  -337,
    -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,
    -337,     0,  -337,     0,  -337,  -337,  -337,     0,  -337,  -337,
    -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,
    -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,
    -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,
    -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -341,
    1915,     0,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,
    -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,
    -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,
    -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,
    -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,
       0,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,
    -341,  -341,     0,     0,  -341,  -341,     0,  -341,     0,     0,
    -341,  -341,  -341,  -341,  -341,     0,     0,  -341,  -341,  -341,
    -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,
    -341,  -341,  -341,  -341,     0,  -341,     0,  -341,  -341,  -341,
       0,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,
    -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,
    -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,
    -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,  -341,
    -341,  -341,  -331,   302,     0,     1,   303,   106,   304,  -331,
     305,   306,  -331,  -331,  -331,  -331,  -331,  -331,  -331,  -331,
    -331,  -331,  -331,  -331,  -331,  -331,  -331,  -331,  -331,  -331,
       2,  -331,  -331,  -331,  -331,  -331,  -331,  -331,  -331,  -331,
    -331,  -331,  -331,  -331,  -331,  -331,  -331,  -331,  -331,  -331,
    -331,  -331,  -331,     0,  -331,  -331,  -331,  -331,  -331,  -331,
    -331,  -331,  -331,  -331,  -331,     0,     0,   307,  -331,     0,
    -331,     0,     0,   308,   309,   310,  -331,  -331,     0,     0,
    -331,  -331,  -331,  -331,  -331,  -331,   311,   312,  -331,  -331,
    -331,  -331,  -331,  -331,  -331,  -331,  -331,     0,  -331,     0,
     313,  -331,  -331,     0,   314,   315,   316,   317,   318,   319,
     320,   321,  -331,  -331,  -331,  -331,  -331,  -331,  -331,  -331,
     322,  -331,  -331,   323,  -331,   324,  -331,  -331,  -331,  -331,
     741,  -331,  -331,   325,   326,  -331,   327,   328,   329,   330,
    -331,  -331,  -331,  -331,  -331,  -541,   302,     0,     1,   303,
     106,   304,  -541,   305,   306,  -541,  -541,  -541,  -541,  -541,
    -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,
    -541,  -541,  -541,     2,  -541,  -541,  -541,  -541,  -541,  -541,
    -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,
    -541,  -541,  -541,  -541,  -541,  -541,     0,  -541,  -541,  -541,
    -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,     0,     0,
     307,  -541,     0,  -541,     0,     0,   308,   309,   310,  -541,
    -541,     0,     0,  -541,  -541,  -541,  -541,  -541,  -541,   311,
     312,  -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,
       0,  -541,     0,   313,  -541,  -541,     0,   314,   315,   316,
     317,   318,   319,   320,   321,  -541,  -541,  -541,  -541,  -541,
    -541,  -541,  -541,   322,  -541,  -541,   323,  -541,   324,  -541,
    -541,  -541,  -541,   741,  -541,  -541,   325,   326,  -541,   327,
     328,   329,   330,  -541,  -541,  -541,  -541,  -541,  -549,   302,
       0,     1,   303,   106,   304,  -549,   305,   306,  -549,  -549,
    -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,
    -549,  -549,  -549,  -549,  -549,  -549,     2,  -549,  -549,  -549,
    -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,
    -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,     0,
    -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,  -549,
    -549,     0,     0,   307,  -549,     0,  -549,     0,     0,   308,
     309,   310,  -549,  -549,     0,     0,  -549,  -549,  -549,  -549,
    -549,  -549,   311,   312,  -549,  -549,  -549,  -549,  -549,  -549,
    -549,  -549,  -549,     0,  -549,     0,   313,  -549,  -549,     0,
     314,   315,   316,   317,   318,   319,   320,   321,  -549,  -549,
    -549,  -549,  -549,  -549,  -549,  -549,   322,  -549,  -549,   323,
    -549,   324,  -549,  -549,  -549,  -549,   741,  -549,  -549,   325,
     326,  -549,   327,   328,   329,   330,  -549,  -549,  -549,  -549,
    -549,  -542,   302,     0,     1,   303,   106,   304,  -542,   305,
     306,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,
    -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,     2,
    -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,
    -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,
    -542,  -542,     0,  -542,  -542,  -542,  -542,  -542,  -542,  -542,
    -542,  -542,  -542,  -542,     0,     0,   307,  -542,     0,  -542,
       0,     0,   308,   309,   310,  -542,  -542,     0,     0,  -542,
    -542,  -542,  -542,  -542,  -542,   311,   312,  -542,  -542,  -542,
    -542,  -542,  -542,  -542,  -542,  -542,     0,  -542,     0,   313,
    -542,  -542,     0,   314,   315,   316,   317,   318,   319,   320,
     321,  -542,  -542,  -542,  -542,  -542,  -542,  -542,  -542,   322,
    -542,  -542,   323,  -542,   324,  -542,  -542,  -542,  -542,   741,
    -542,  -542,   325,   326,  -542,   327,   328,   329,   330,  -542,
    -542,  -542,  -542,  -542,  -550,   302,     0,     1,   303,   106,
     304,  -550,   305,   306,  -550,  -550,  -550,  -550,  -550,  -550,
    -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,
    -550,  -550,     2,  -550,  -550,  -550,  -550,  -550,  -550,  -550,
    -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,
    -550,  -550,  -550,  -550,  -550,     0,  -550,  -550,  -550,  -550,
    -550,  -550,  -550,  -550,  -550,  -550,  -550,     0,     0,   307,
    -550,     0,  -550,     0,     0,   308,   309,   310,  -550,  -550,
       0,     0,  -550,  -550,  -550,  -550,  -550,  -550,   311,   312,
    -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,  -550,     0,
    -550,     0,   313,  -550,  -550,     0,   314,   315,   316,   317,
     318,   319,   320,   321,  -550,  -550,  -550,  -550,  -550,  -550,
    -550,  -550,   322,  -550,  -550,   323,  -550,   324,  -550,  -550,
    -550,  -550,   741,  -550,  -550,   325,   326,  -550,   327,   328,
     329,   330,  -550,  -550,  -550,  -550,  -550,  -543,   302,     0,
       1,   303,   106,   304,  -543,   305,   306,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,     2,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,     0,  -543,
    -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
       0,     0,   307,  -543,     0,  -543,     0,     0,   308,   309,
     310,  -543,  -543,     0,     0,  -543,  -543,  -543,  -543,  -543,
    -543,   311,   312,  -543,  -543,  -543,  -543,  -543,  -543,  -543,
    -543,  -543,     0,  -543,     0,   313,  -543,  -543,     0,   314,
     315,   316,   317,   318,   319,   320,   321,  -543,  -543,  -543,
    -543,  -543,  -543,  -543,  -543,   322,  -543,  -543,   323,  -543,
     324,  -543,  -543,  -543,  -543,   741,  -543,  -543,   325,   326,
    -543,   327,   328,   329,   330,  -543,  -543,  -543,  -543,  -543,
    -551,   302,     0,     1,   303,   106,   304,  -551,   305,   306,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,     2,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,     0,  -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,     0,     0,   307,  -551,     0,  -551,     0,
       0,   308,   309,   310,  -551,  -551,     0,     0,  -551,  -551,
    -551,  -551,  -551,  -551,   311,   312,  -551,  -551,  -551,  -551,
    -551,  -551,  -551,  -551,  -551,     0,  -551,     0,   313,  -551,
    -551,     0,   314,   315,   316,   317,   318,   319,   320,   321,
    -551,  -551,  -551,  -551,  -551,  -551,  -551,  -551,   322,  -551,
    -551,   323,  -551,   324,  -551,  -551,  -551,  -551,   741,  -551,
    -551,   325,   326,  -551,   327,   328,   329,   330,  -551,  -551,
    -551,  -551,  -551,  -544,   302,     0,     1,   303,   106,   304,
    -544,   305,   306,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,     2,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,     0,  -544,  -544,  -544,  -544,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,     0,     0,   307,  -544,
       0,  -544,     0,     0,   308,   309,   310,  -544,  -544,     0,
       0,  -544,  -544,  -544,  -544,  -544,  -544,   311,   312,  -544,
    -544,  -544,  -544,  -544,  -544,  -544,  -544,  -544,     0,  -544,
       0,   313,  -544,  -544,     0,   314,   315,   316,   317,   318,
     319,   320,   321,  -544,  -544,  -544,  -544,  -544,  -544,  -544,
    -544,   322,  -544,  -544,   323,  -544,   324,  -544,  -544,  -544,
    -544,   741,  -544,  -544,   325,   326,  -544,   327,   328,   329,
     330,  -544,  -544,  -544,  -544,  -544,  -552,   302,     0,     1,
     303,   106,   304,  -552,   305,   306,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,     2,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,  -552,  -552,
    -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,     0,
       0,   307,  -552,     0,  -552,     0,     0,   308,   309,   310,
    -552,  -552,     0,     0,  -552,  -552,  -552,  -552,  -552,  -552,
     311,   312,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
    -552,     0,  -552,     0,   313,  -552,  -552,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -552,  -552,  -552,  -552,
    -552,  -552,  -552,  -552,   322,  -552,  -552,   323,  -552,   324,
    -552,  -552,  -552,  -552,   741,  -552,  -552,   325,   326,  -552,
     327,   328,   329,   330,  -552,  -552,  -552,  -552,  -552,  -339,
    2019,     0,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
       0,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,     0,     0,  -339,  -339,     0,  -339,     0,     0,
    -339,  -339,  -339,  -339,  -339,     0,     0,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,     0,  -339,     0,  -339,  -339,  -339,
       0,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -338,  2020,     0,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,     0,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,     0,     0,  -338,  -338,     0,
    -338,     0,     0,  -338,  -338,  -338,  -338,  -338,     0,     0,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,     0,  -338,     0,
    -338,  -338,  -338,     0,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,  -338,
    -338,  -338,  -338,  -338,  -338,  -343,   753,     0,  -343,  -343,
    -343,  -343,   754,   755,   756,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,     0,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,     0,     0,
    -343,  -343,     0,  -343,     0,     0,  -343,  -343,  -343,  -343,
    -343,     0,     0,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
       0,  -343,     0,  -343,  -343,  -343,     0,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,   757,  -343,  -343,  -343,
    -343,  -343,  -343,  -343,  1148,  -343,  -343,   759,     0,  -343,
    -343,  -343,  -343,  -343,  -343,  -343,  -343,  -343,  -456,     0,
    -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,
    -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,
    -456,  -456,  -456,  -456,  -456,  -456,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -456,     0,     0,     0,     0,     0,  -456,  -456,
    -456,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -456,  -456,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -456,     0,     0,     0,  -456,
    -456,  -456,  -456,  -456,  -456,  -456,  -456,     0,     0,     0,
       0,     0,     0,     0,     0,  -456,  -456,  -456,  -456,  -456,
    -456,     0,  -456,  -456,     0,     0,  -456,     0,  -456,  -456,
       0,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,  -456,
    -448,  1150,     0,  -448,  -448,  -448,  -448,     0,  -448,  -448,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,     0,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,     0,     0,  -448,  -448,     0,  -448,     0,
       0,  -448,  -448,  -448,  -448,  -448,     0,     0,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,     0,  -448,     0,  -448,  -448,
    -448,     0,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,
    -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,  -448,     0,
       0,  -448,  -448,  -448,  -448,     0,  -448,  -448,  -448,  1151,
    -448,  -448,  -448,     0,  -448,  -448,  -448,  -448, -1082,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,     0,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082,     0,     0,   307, -1082,     0, -1082,     0,     0,   308,
     309,   310, -1082, -1082,     0,     0, -1082, -1082, -1082, -1082,
   -1082, -1082,   311,   312, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082,     0, -1082,     0,   313, -1082, -1082,     0,
     314,   315,   316,   317,   318,   319,   320,   321, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082,   322,     0,     0,   323,
    1157,   324, -1082,     0,  1158, -1082, -1082,     0, -1082,   325,
     326,     0,   327,   328,   329,   330, -1226,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1226, -1226, -1226, -1226, -1226,
   -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226,
   -1226, -1226, -1226, -1226, -1226, -1226, -1226,     0, -1226, -1226,
   -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226,     0,
       0,   307, -1226,     0, -1226,     0,     0,   308,   309,   310,
   -1226, -1226,     0,     0, -1226, -1226, -1226, -1226, -1226, -1226,
     311,   312, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226,
   -1226,     0, -1226,     0,   313, -1226, -1226,     0,   314,   315,
     316,   317,   318,   319,   320,   321, -1226, -1226, -1226, -1226,
   -1226, -1226, -1226, -1226,   322,     0,     0,   323,  1157,   324,
    1622,     0,  1158, -1226, -1226,     0, -1226,   325,   326,     0,
     327,   328,   329,   330, -1184,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184,     0, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184,     0,     0,   307,
   -1184,     0, -1184,     0,     0,   308,   309,   310, -1184, -1184,
       0,     0, -1184, -1184, -1184, -1184, -1184, -1184,   311,   312,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,     0,
   -1184,     0,   313, -1184, -1184,     0,   314,   315,   316,   317,
     318,   319,   320,   321, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184,   322,     0,     0,   323,  1830,   324, -1184,     0,
    1158, -1184, -1184,     0, -1184,   325,   326,     0,   327,   328,
     329,   330, -1215,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215,     0,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,     0,     0,   307, -1215,     0,
   -1215,     0,     0,   308,   309,   310, -1215, -1215,     0,     0,
   -1215,    32, -1215, -1215, -1215, -1215,   311,   312,  1122, -1215,
     638,   639,   640, -1215, -1215, -1215, -1215,     0, -1215,     0,
     313, -1215, -1215,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44, -1215, -1215, -1215, -1215, -1215, -1215,
     322,     0,     0,   323,  1157,   324,   641,     0,  1158, -1215,
     254,     0,   642,   325,   326,     0,   327,   328,   329,   330,
    -575,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,     0,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,     0,     0,   307,  -575,     0,  -575,     0,
       0,   308,   309,   310,  -575,  -575,     0,     0,  -575,  -575,
    -575,  -575,  -575,  -575,   311,   312,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,     0,  -575,     0,   313,  -575,
    -575,     0,   314,   315,   316,   317,   318,   319,   320,   321,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,   322,     0,
       0,   323,  -575,   324,  1152,     0,  1153,  -575,  -575,     0,
    -575,   325,   326,     0,   327,   328,   329,   330, -1207,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1207, -1207, -1207,
   -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207,
   -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207,     0,
   -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207,
   -1207,     0,     0,   307, -1207,     0, -1207,     0,     0,   308,
     309,   310, -1207, -1207,     0,     0, -1207, -1207, -1207, -1207,
   -1207, -1207,   311,   312, -1207, -1207, -1207, -1207, -1207, -1207,
   -1207, -1207, -1207,     0, -1207,     0,   313, -1207, -1207,     0,
     314,   315,   316,   317,   318,   319,   320,   321, -1207, -1207,
   -1207, -1207, -1207, -1207, -1207, -1207,   322,     0,     0,   323,
    2065,   324, -1207,     0,  1153, -1207, -1207,     0, -1207,   325,
     326,     0,   327,   328,   329,   330, -1208,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1208, -1208, -1208, -1208, -1208,
   -1208, -1208, -1208, -1208, -1208, -1208, -1208, -1208, -1208, -1208,
   -1208, -1208, -1208, -1208, -1208, -1208, -1208,     0, -1208, -1208,
   -1208, -1208, -1208, -1208, -1208, -1208, -1208, -1208, -1208,     0,
       0,   307, -1208,     0, -1208,     0,     0,   308,   309,   310,
   -1208, -1208,     0,     0, -1208, -1208, -1208, -1208, -1208, -1208,
     311,   312, -1208, -1208, -1208, -1208, -1208, -1208, -1208, -1208,
   -1208,     0, -1208,     0,   313, -1208, -1208,     0,   314,   315,
     316,   317,   318,   319,   320,   321, -1208, -1208, -1208, -1208,
   -1208, -1208, -1208, -1208,   322,     0,     0,   323,  1157,   324,
    2066,     0,  1158, -1208, -1208,     0, -1208,   325,   326,     0,
     327,   328,   329,   330, -1202,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1202, -1202, -1202, -1202, -1202, -1202, -1202,
   -1202, -1202, -1202, -1202, -1202, -1202, -1202, -1202, -1202, -1202,
   -1202, -1202, -1202, -1202, -1202,     0,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,     0,     0,   307,
   -1202,     0, -1202,     0,     0,   308,   309,   310, -1202, -1202,
       0,     0, -1202,    32, -1202, -1202, -1202, -1202,   311,   312,
    1122, -1202,   638,   639,   640, -1202, -1202, -1202, -1202,     0,
   -1202,     0,   313, -1202, -1202,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44, -1202, -1202, -1202, -1202,
   -1202, -1202,   322,     0,     0,   323,  1157,   324,   641,     0,
    1158, -1202,   254,     0,   642,   325,   326,     0,   327,   328,
     329,   330, -1150,   616,     0, -1150, -1150, -1150, -1150,     0,
   -1150, -1150,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150,     0, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150,     0,     0, -1150, -1150,     0,
   -1150,     0,     0, -1150, -1150, -1150, -1150, -1150,     0,     0,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150,     0, -1150,     0,
   -1150, -1150, -1150,     0, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150, -1150,
   -1150,     0,     0, -1150,     0, -1150,   617,     0, -1150, -1150,
   -1150,     0, -1150, -1150, -1150,     0, -1150, -1150, -1150, -1150,
   -1173,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,     0,     0,   307,   246,     0, -1173,     0,
       0,   308,   309,   310,    28,    29,     0,     0, -1173,    32,
   -1173, -1173, -1173, -1173,   311,   636,   637,   248,   638,   639,
     640, -1173, -1173, -1173, -1173,     0, -1173,     0,   313, -1173,
     249,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,   250,   251,   252,   253,   206,   207,   322,     0,
       0,   323,     0,   324,   641,     0, -1173, -1173,   254,     0,
     642,   325,   326,     0,   327,   328,   329,   330, -1151,   616,
       0, -1151, -1151, -1151, -1151,     0, -1151, -1151,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,     0,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151,     0,     0, -1151, -1151,     0, -1151,     0,     0, -1151,
   -1151, -1151, -1151, -1151,     0,     0, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151,     0, -1151,     0, -1151, -1151, -1151,     0,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151,     0,     0, -1151,
       0, -1151,   617,     0, -1151, -1151, -1151,     0, -1151, -1151,
   -1151,     0, -1151, -1151, -1151, -1151, -1212,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1212, -1212, -1212, -1212, -1212,
   -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212,
   -1212, -1212, -1212, -1212, -1212, -1212, -1212,     0,  1114,  1115,
    1116,   628,  1117,  1118,  1119,  1120,   633,   634,  1121,     0,
       0,   307, -1212,     0, -1212,     0,     0,   308,   309,   310,
   -1212, -1212,     0,     0, -1212,    32, -1212, -1212, -1212, -1212,
     311,   312,  1122, -1212,   638,   639,   640, -1212, -1212, -1212,
   -1212,     0, -1212,     0,   313, -1212, -1212,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44, -1212, -1212,
   -1212, -1212, -1212, -1212,   322,     0,     0,   323,     0,   324,
     641,     0, -1212, -1212,   254,     0,   642,   325,   326,     0,
     327,   328,   329,   330, -1228,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1228, -1228, -1228, -1228, -1228, -1228, -1228,
   -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228,
   -1228, -1228, -1228, -1228, -1228,     0, -1228, -1228, -1228, -1228,
   -1228, -1228, -1228, -1228, -1228, -1228, -1228,     0,     0,   307,
   -1228,     0, -1228,     0,     0,   308,   309,   310, -1228, -1228,
       0,     0, -1228, -1228, -1228, -1228, -1228, -1228,   311,   312,
   -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228,     0,
   -1228,     0,   313, -1228, -1228,     0,   314,   315,   316,   317,
     318,   319,   320,   321, -1228, -1228, -1228, -1228, -1228, -1228,
   -1228, -1228,   322,     0,     0,   323,     0,   324,  1133,     0,
   -1228, -1228,   741,     0, -1228,   325,   326,     0,   327,   328,
     329,   330, -1163,  1160,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,     0,     0,   307,   246,     0,
   -1163,     0,     0,   308,   309,   310,    28,    29,     0,     0,
   -1163,    32, -1163, -1163, -1163, -1163,   311,   636,   637,   248,
     638,   639,   640, -1163, -1163, -1163, -1163,     0, -1163,     0,
     313, -1163,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,     0,     0,   323,     0,   324,   641,     0, -1163, -1163,
     254,     0,   642,   325,   326,     0,   327,   328,   329,   330,
   -1167,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,     0,     0,   307,   246,     0, -1167,     0,
       0,   308,   309,   310,    28,    29,     0,     0, -1167,    32,
   -1167, -1167, -1167, -1167,   311,   636,   637,   248,   638,   639,
     640, -1167, -1167, -1167, -1167,     0, -1167,     0,   313, -1167,
     249,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,   250,   251,   252,   253,   206,   207,   322,     0,
       0,   323,     0,   324,   641,     0, -1167, -1167,   254,     0,
     642,   325,   326,     0,   327,   328,   329,   330, -1162,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,     0,     0,   307,   246,     0, -1162,     0,     0,   308,
     309,   310,    28,    29,     0,     0, -1162,    32, -1162, -1162,
   -1162, -1162,   311,   636,   637,   248,   638,   639,   640, -1162,
   -1162, -1162, -1162,     0, -1162,     0,   313, -1162,   249,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
     250,   251,   252,   253,   206,   207,   322,     0,     0,   323,
       0,   324,   641,     0, -1162, -1162,   254,     0,   642,   325,
     326,     0,   327,   328,   329,   330, -1166,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,     0,
       0,   307,   246,     0, -1166,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1166,    32, -1166, -1166, -1166, -1166,
     311,   636,   637,   248,   638,   639,   640, -1166, -1166, -1166,
   -1166,     0, -1166,     0,   313, -1166,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,     0,     0,   323,     0,   324,
     641,     0, -1166, -1166,   254,     0,   642,   325,   326,     0,
     327,   328,   329,   330, -1069,  1173,     0, -1069, -1069, -1069,
   -1069,     0, -1069, -1069,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1069, -1069, -1069, -1069, -1069, -1069, -1069, -1069,
   -1069, -1069, -1069, -1069, -1069, -1069, -1069, -1069, -1069, -1069,
   -1069, -1069, -1069, -1069, -1069,     0, -1069, -1069, -1069, -1069,
   -1069, -1069, -1069, -1069, -1069, -1069, -1069,     0,     0, -1069,
   -1069,     0, -1069,     0,     0, -1069, -1069, -1069, -1069, -1069,
       0,     0, -1069, -1069, -1069, -1069, -1069, -1069, -1069, -1069,
   -1069, -1069, -1069, -1069, -1069, -1069, -1069, -1069, -1069,     0,
   -1069,     0, -1069, -1069, -1069,     0, -1069, -1069, -1069, -1069,
   -1069, -1069, -1069, -1069, -1069, -1069, -1069, -1069, -1069, -1069,
   -1069, -1069, -1069,     0,     0, -1069,     0, -1069, -1069,     0,
   -1069, -1069, -1069,     0, -1069, -1069, -1069,     0, -1069, -1069,
   -1069, -1069, -1071,  1174,     0, -1071, -1071, -1071, -1071,     0,
   -1071, -1071,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071,
   -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071,
   -1071, -1071, -1071,     0, -1071, -1071, -1071, -1071, -1071, -1071,
   -1071, -1071, -1071, -1071, -1071,     0,     0, -1071, -1071,     0,
   -1071,     0,     0, -1071, -1071, -1071, -1071, -1071,     0,     0,
   -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071,
   -1071, -1071, -1071, -1071, -1071, -1071, -1071,     0, -1071,     0,
   -1071, -1071, -1071,     0, -1071, -1071, -1071, -1071, -1071, -1071,
   -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071, -1071,
   -1071,     0,     0, -1071,     0, -1071, -1071,     0, -1071, -1071,
   -1071,     0, -1071, -1071, -1071,     0, -1071, -1071, -1071, -1071,
   -1117,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,     0,     0,   307,   246,     0, -1117,     0,
       0,   308,   309,   310,    28,    29,     0,     0, -1117,    32,
   -1117, -1117, -1117, -1117,   311,   636,   637,   248,   638,   639,
     640, -1117, -1117, -1117, -1117,     0, -1117,     0,   313, -1117,
     249,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,   250,   251,   252,   253,   206,   207,   322,     0,
       0,   323,     0,   324,   641,     0, -1117, -1117,   254,     0,
     642,   325,   326,     0,   327,   328,   329,   330, -1119,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,     0,     0,   307,   246,     0, -1119,     0,     0,   308,
     309,   310,    28,    29,     0,     0, -1119,    32, -1119, -1119,
   -1119, -1119,   311,   636,   637,   248,   638,   639,   640, -1119,
   -1119, -1119, -1119,     0, -1119,     0,   313, -1119,   249,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
     250,   251,   252,   253,   206,   207,   322,     0,     0,   323,
       0,   324,   641,     0, -1119, -1119,   254,     0,   642,   325,
     326,     0,   327,   328,   329,   330, -1164,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,     0,
       0,   307,   246,     0, -1164,     0,     0,   308,   309,   310,
      28,    29,     0,     0, -1164,    32, -1164, -1164, -1164, -1164,
     311,   636,   637,   248,   638,   639,   640, -1164, -1164, -1164,
   -1164,     0, -1164,     0,   313, -1164,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,     0,     0,   323,     0,   324,
     641,     0, -1164, -1164,   254,     0,   642,   325,   326,     0,
     327,   328,   329,   330, -1168,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,     0,     0,   307,
     246,     0, -1168,     0,     0,   308,   309,   310,    28,    29,
       0,     0, -1168,    32, -1168, -1168, -1168, -1168,   311,   636,
     637,   248,   638,   639,   640, -1168, -1168, -1168, -1168,     0,
   -1168,     0,   313, -1168,   249,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,   250,   251,   252,   253,
     206,   207,   322,     0,     0,   323,     0,   324,   641,     0,
   -1168, -1168,   254,     0,   642,   325,   326,     0,   327,   328,
     329,   330, -1165,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,     0,     0,   307,   246,     0,
   -1165,     0,     0,   308,   309,   310,    28,    29,     0,     0,
   -1165,    32, -1165, -1165, -1165, -1165,   311,   636,   637,   248,
     638,   639,   640, -1165, -1165, -1165, -1165,     0, -1165,     0,
     313, -1165,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,     0,     0,   323,     0,   324,   641,     0, -1165, -1165,
     254,     0,   642,   325,   326,     0,   327,   328,   329,   330,
   -1169,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,     0,     0,   307,   246,     0, -1169,     0,
       0,   308,   309,   310,    28,    29,     0,     0, -1169,    32,
   -1169, -1169, -1169, -1169,   311,   636,   637,   248,   638,   639,
     640, -1169, -1169, -1169, -1169,     0, -1169,     0,   313, -1169,
     249,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,   250,   251,   252,   253,   206,   207,   322,     0,
       0,   323,     0,   324,   641,     0, -1169, -1169,   254,     0,
     642,   325,   326,     0,   327,   328,   329,   330, -1160,   616,
       0, -1160, -1160, -1160, -1160,     0, -1160, -1160,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,     0,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160,     0,     0, -1160, -1160,     0, -1160,     0,     0, -1160,
   -1160, -1160, -1160, -1160,     0,     0, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160,     0, -1160,     0, -1160, -1160, -1160,     0,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160,     0,     0, -1160,
       0, -1160,   617,     0, -1160, -1160, -1160,     0, -1160, -1160,
   -1160,     0, -1160, -1160, -1160, -1160, -1161,   616,     0, -1161,
   -1161, -1161, -1161,     0, -1161, -1161,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1161, -1161, -1161, -1161, -1161, -1161,
   -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161,
   -1161, -1161, -1161, -1161, -1161, -1161, -1161,     0, -1161, -1161,
   -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161,     0,
       0, -1161, -1161,     0, -1161,     0,     0, -1161, -1161, -1161,
   -1161, -1161,     0,     0, -1161, -1161, -1161, -1161, -1161, -1161,
   -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161,
   -1161,     0, -1161,     0, -1161, -1161, -1161,     0, -1161, -1161,
   -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161, -1161,
   -1161, -1161, -1161, -1161, -1161,     0,     0, -1161,     0, -1161,
     617,     0, -1161, -1161, -1161,     0, -1161, -1161, -1161,     0,
   -1161, -1161, -1161, -1161,  -996,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,  -996,  -996,  -996,  -996,  -996,  -996,  -996,
    -996,  -996,  -996,  -996,  -996,  -996,  -996,  -996,  -996,  -996,
    -996,  -996,  -996,  -996,  -996,     0,  -996,  -996,  -996,  -996,
    -996,  -996,  -996,  -996,  -996,  -996,  -996,     0,     0,   307,
    -996,     0,  -996,     0,     0,   308,   309,   310,  -996,  -996,
       0,     0,  -996,  -996,  -996,  -996,  -996,  -996,   311,   312,
    -996,  -996,  -996,  -996,  -996,  -996,  -996,  -996,  -996,     0,
    -996,     0,   313,  -996,  -996,     0,   314,   315,   316,   317,
     318,   319,   320,   321,  -996,  -996,  -996,  -996,  -996,  -996,
    -996,  -996,   322,     0,     0,   323,     0,   324,  -996,     0,
    1799,  1800,  1013,     0,  -996,   325,   326,     0,   327,   328,
     329,   330, -1123,   616,     0, -1123, -1123, -1123, -1123,     0,
   -1123, -1123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1123, -1123, -1123, -1123, -1123, -1123, -1123, -1123, -1123, -1123,
   -1123, -1123, -1123, -1123, -1123, -1123, -1123, -1123, -1123, -1123,
   -1123, -1123, -1123,     0, -1123, -1123, -1123, -1123, -1123, -1123,
   -1123, -1123, -1123, -1123, -1123,     0,     0, -1123, -1123,     0,
   -1123,     0,     0, -1123, -1123, -1123, -1123, -1123,     0,     0,
   -1123, -1123, -1123, -1123, -1123, -1123, -1123, -1123, -1123, -1123,
   -1123, -1123, -1123, -1123, -1123, -1123, -1123,     0, -1123,     0,
   -1123, -1123, -1123,     0, -1123, -1123, -1123, -1123, -1123, -1123,
   -1123, -1123, -1123, -1123, -1123, -1123, -1123, -1123, -1123, -1123,
   -1123,     0,     0, -1123,     0, -1123,   617,     0, -1123, -1123,
   -1123,     0, -1123, -1123, -1123,     0, -1123, -1123, -1123, -1123,
   -1124,   616,     0, -1124, -1124, -1124, -1124,     0, -1124, -1124,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1124, -1124,
   -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124,
   -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124,
   -1124,     0, -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124,
   -1124, -1124, -1124,     0,     0, -1124, -1124,     0, -1124,     0,
       0, -1124, -1124, -1124, -1124, -1124,     0,     0, -1124, -1124,
   -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124,
   -1124, -1124, -1124, -1124, -1124,     0, -1124,     0, -1124, -1124,
   -1124,     0, -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124,
   -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124, -1124,     0,
       0, -1124,     0, -1124,   617,     0, -1124, -1124, -1124,     0,
   -1124, -1124, -1124,     0, -1124, -1124, -1124, -1124, -1120,   616,
       0, -1120, -1120, -1120, -1120,     0, -1120, -1120,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1120, -1120, -1120, -1120,
   -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120,
   -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120,     0,
   -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120,
   -1120,     0,     0, -1120, -1120,     0, -1120,     0,     0, -1120,
   -1120, -1120, -1120, -1120,     0,     0, -1120, -1120, -1120, -1120,
   -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120,
   -1120, -1120, -1120,     0, -1120,     0, -1120, -1120, -1120,     0,
   -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120,
   -1120, -1120, -1120, -1120, -1120, -1120, -1120,     0,     0, -1120,
       0, -1120,   617,     0, -1120, -1120, -1120,     0, -1120, -1120,
   -1120,     0, -1120, -1120, -1120, -1120,  -998,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,  -998,  -998,  -998,  -998,  -998,
    -998,  -998,  -998,  -998,  -998,  -998,  -998,  -998,  -998,  -998,
    -998,  -998,  -998,  -998,  -998,  -998,  -998,     0,  -998,  -998,
    -998,  -998,  -998,  -998,  -998,  -998,  -998,  -998,  -998,     0,
       0,   307,  -998,     0,  -998,     0,     0,   308,   309,   310,
    -998,  -998,     0,     0,  -998,  -998,  -998,  -998,  -998,  -998,
     311,   312,  -998,  -998,  -998,  -998,  -998,  -998,  -998,  -998,
    -998,     0,  -998,     0,   313,  -998,  -998,     0,   314,   315,
     316,   317,   318,   319,   320,   321,  -998,  -998,  -998,  -998,
    -998,  -998,  -998,  -998,   322,     0,     0,   323,     0,   324,
    -998,     0,  -998,  1979,  1013,     0,  -998,   325,   326,     0,
     327,   328,   329,   330,  -992,  1982,     0,  -992,  -992,  -992,
    -992,     0,  -992,  -992,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -992,  -992,  -992,  -992,  -992,  -992,  -992,  -992,
    -992,  -992,  -992,  -992,  -992,  -992,  -992,  -992,  -992,  -992,
    -992,  -992,  -992,  -992,  -992,     0,  -992,  -992,  -992,  -992,
    -992,  -992,  -992,  -992,  -992,  -992,  -992,     0,     0,  -992,
    -992,     0,  -992,     0,     0,  -992,  -992,  -992,  -992,  -992,
       0,     0,  -992,  -992,  -992,  -992,  -992,  -992,  -992,  -992,
    -992,  -992,  -992,  -992,  -992,  -992,  -992,  -992,  -992,     0,
    -992,     0,  -992,  -992,  -992,     0,  -992,  -992,  -992,  -992,
    -992,  -992,  -992,  -992,  -992,  -992,  -992,  -992,  -992,  -992,
    -992,  -992,  -992,     0,     0,  -992,     0,  -992,  -992,     0,
    -992,  -992,  -992,     0,  -992,  -992,  -992,     0,  -992,  -992,
    -992,  -992, -1121,   616,     0, -1121, -1121, -1121, -1121,     0,
   -1121, -1121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1121, -1121, -1121, -1121, -1121, -1121, -1121, -1121, -1121, -1121,
   -1121, -1121, -1121, -1121, -1121, -1121, -1121, -1121, -1121, -1121,
   -1121, -1121, -1121,     0, -1121, -1121, -1121, -1121, -1121, -1121,
   -1121, -1121, -1121, -1121, -1121,     0,     0, -1121, -1121,     0,
   -1121,     0,     0, -1121, -1121, -1121, -1121, -1121,     0,     0,
   -1121, -1121, -1121, -1121, -1121, -1121, -1121, -1121, -1121, -1121,
   -1121, -1121, -1121, -1121, -1121, -1121, -1121,     0, -1121,     0,
   -1121, -1121, -1121,     0, -1121, -1121, -1121, -1121, -1121, -1121,
   -1121, -1121, -1121, -1121, -1121, -1121, -1121, -1121, -1121, -1121,
   -1121,     0,     0, -1121,     0, -1121,   617,     0, -1121, -1121,
   -1121,     0, -1121, -1121, -1121,     0, -1121, -1121, -1121, -1121,
   -1122,   616,     0, -1122, -1122, -1122, -1122,     0, -1122, -1122,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1122, -1122,
   -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122,
   -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122,
   -1122,     0, -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122,
   -1122, -1122, -1122,     0,     0, -1122, -1122,     0, -1122,     0,
       0, -1122, -1122, -1122, -1122, -1122,     0,     0, -1122, -1122,
   -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122,
   -1122, -1122, -1122, -1122, -1122,     0, -1122,     0, -1122, -1122,
   -1122,     0, -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122,
   -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122, -1122,     0,
       0, -1122,     0, -1122,   617,     0, -1122, -1122, -1122,     0,
   -1122, -1122, -1122,     0, -1122, -1122, -1122, -1122, -1209,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1209, -1209, -1209,
   -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209,
   -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209,     0,
   -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209,
   -1209,     0,     0,   307, -1209,     0, -1209,     0,     0,   308,
     309,   310, -1209, -1209,     0,     0, -1209, -1209, -1209, -1209,
   -1209, -1209,   311,   312, -1209, -1209, -1209, -1209, -1209, -1209,
   -1209, -1209, -1209,     0, -1209,     0,   313, -1209, -1209,     0,
     314,   315,   316,   317,   318,   319,   320,   321, -1209, -1209,
   -1209, -1209, -1209, -1209, -1209, -1209,   322,     0,     0,   323,
       0,   324, -1209,     0, -1209, -1209, -1209,     0, -1209,   325,
     326,     0,   327,   328,   329,   330,  -993,  2057,     0,  -993,
    -993,  -993,  -993,     0,  -993,  -993,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -993,  -993,  -993,  -993,  -993,  -993,
    -993,  -993,  -993,  -993,  -993,  -993,  -993,  -993,  -993,  -993,
    -993,  -993,  -993,  -993,  -993,  -993,  -993,     0,  -993,  -993,
    -993,  -993,  -993,  -993,  -993,  -993,  -993,  -993,  -993,     0,
       0,  -993,  -993,     0,  -993,     0,     0,  -993,  -993,  -993,
    -993,  -993,     0,     0,  -993,  -993,  -993,  -993,  -993,  -993,
    -993,  -993,  -993,  -993,  -993,  -993,  -993,  -993,  -993,  -993,
    -993,     0,  -993,     0,  -993,  -993,  -993,     0,  -993,  -993,
    -993,  -993,  -993,  -993,  -993,  -993,  -993,  -993,  -993,  -993,
    -993,  -993,  -993,  -993,  -993,     0,     0,  -993,     0,  -993,
    -993,     0,  -993,  -993,  -993,     0,  -993,  -993,  -993,     0,
    -993,  -993,  -993,  -993,  -899,   582,     0,  -899,  -899,  -899,
    -899,     0,  -899,  -899,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,
    -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,
    -899,  -899,  -899,  -899,  -899,     0,     0,  -899,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -899,
    -899,     0,  -899,     0,     0,  -899,  -899,  -899,  -899,  -899,
       0,     0,  -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,
    -899,  -899,  -899,     0,     0,  -899,  -899,  -899,  -899,     0,
    -899,     0,  -899,  -899,  -899,     0,  -899,  -899,  -899,  -899,
    -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,  -899,
    -899,  -899,  -899,     0,     0,  -899,   845,  -899,  -899,     0,
     584,  -899,  -899,     0,     0,  -899,  -899,     0,  -899,  -899,
    -899,  -899,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,     0,     0,   307,   246,     0,     0,
       0,     0,   308,   309,   310,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   311,   636,   637,   248,   638,
     639,   640,     0,     0,     0,     0,     0,     0,     0,   313,
       0,   249,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,   250,   251,   252,   253,   206,   207,   322,
       0,     0,   323,     0,   324,   641,     0,     0,     0,   254,
       0,   642,   325,   326,     0,   327,   328,   329,   330,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
    1114,  1115,  1116,   628,  1117,  1118,  1119,  1120,   633,   634,
    1121,     0,     0,   307,   246,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   311,   636,   637,   248,   638,   639,   640,     0,
       0,     0,     0,     0,     0,     0,   313,     0,   249,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
     250,   251,   252,   253,   206,   207,   322,     0,     0,   323,
       0,   324,   641,     0,     0,     0,   254,     0,   642,   325,
     326,     0,   327,   328,   329,   330,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   246,     0,     0,     0,     0,   308,   309,   310,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   311,
     636,    38,   248,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,   249,     0,   314,   315,   316,
     317,   318,   319,   320,   321,    43,    44,   250,   251,   252,
     253,   206,   207,   322,     0,     0,   323,     0,   324,   983,
       0,   984,   985,   741,     0,     0,   325,   326,     0,   327,
     328,   329,   330,  1246,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,   246,     0,
       0,     0,     0,   308,   309,   310,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   311,   636,    38,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,     0,     0,   323,     0,   324,   983,     0,   984,  -110,
     741,     0,     0,   325,   326,     0,   327,   328,   329,   330,
    1253,     0,     1,   303,   106,   304,     0,   305,   306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,   246,     0,     0,     0,     0,
     308,   309,   310,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,   311,   636,    38,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,   249,
       0,   314,   315,   316,   317,   318,   319,   320,   321,    43,
      44,   250,   251,   252,   253,   206,   207,   322,     0,     0,
     323,     0,   324,   983,     0,   984,   -98,   741,     0,     0,
     325,   326,     0,   327,   328,   329,   330,  1257,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
      18,    19,   244,   245,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,   246,     0,     0,     0,     0,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     311,   636,    38,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,   249,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,   250,   251,
     252,   253,   206,   207,   322,     0,     0,   323,     0,   324,
     983,     0,   984,  -102,   741,     0,     0,   325,   326,     0,
     327,   328,   329,   330,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,   246,
       0,     0,     0,     0,   308,   309,   310,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,   311,   636,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,   249,     0,   314,   315,   316,   317,   318,
     319,   320,   321,    43,    44,   250,   251,   252,   253,   206,
     207,   322,     0,     0,   323,     0,   324,  1511,     0,   984,
     -65,   741,     0,     0,   325,   326,     0,   327,   328,   329,
     330,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   200,
     201,   202,   203,   204,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,    18,    19,   244,   245,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,   246,     0,     0,     0,
       0,   308,   309,   310,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   311,   636,    38,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
     249,     0,   314,   315,   316,   317,   318,   319,   320,   321,
      43,    44,   250,   251,   252,   253,   206,   207,   322,     0,
       0,   323,     0,   324,  1520,     0,   984,  1521,   741,     0,
       0,   325,   326,     0,   327,   328,   329,   330,  1578,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,    18,    19,   244,   245,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,   246,     0,     0,     0,     0,   308,   309,
     310,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   311,   636,    38,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,   249,     0,   314,
     315,   316,   317,   318,   319,   320,   321,    43,    44,   250,
     251,   252,   253,   206,   207,   322,     0,     0,   323,     0,
     324,   983,     0,   984,   -81,   741,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,    18,    19,
     244,   245,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
     246,     0,     0,     0,     0,   308,   309,   310,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   311,   636,
      38,   248,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,   249,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,   250,   251,   252,   253,
     206,   207,   322,     0,     0,   323,     0,   324,  1520,     0,
     984,  -107,   741,     0,     0,   325,   326,     0,   327,   328,
     329,   330,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     200,   201,   202,   203,   204,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,    18,    19,   244,   245,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   307,   246,     0,     0,
       0,     0,   308,   309,   310,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   311,   636,    38,   248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,   249,     0,   314,   315,   316,   317,   318,   319,   320,
     321,    43,    44,   250,   251,   252,   253,   206,   207,   322,
       0,     0,   323,     0,   324,  1520,     0,   984,   -97,   741,
       0,     0,   325,   326,     0,   327,   328,   329,   330,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   307,   246,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   311,   636,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,   249,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
     250,   251,   252,   253,   206,   207,   322,     0,     0,   323,
       0,   324,  1520,     0,   984,  -101,   741,     0,     0,   325,
     326,     0,   327,   328,   329,   330,  1760,     0,     1,   303,
     106,   304,     0,   305,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,   246,     0,     0,     0,     0,   308,   309,   310,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   311,
     636,    38,   248,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,   249,     0,   314,   315,   316,
     317,   318,   319,   320,   321,    43,    44,   250,   251,   252,
     253,   206,   207,   322,     0,     0,   323,     0,   324,   983,
       0,   984,   -88,   741,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307,   246,     0,
       0,     0,     0,   308,   309,   310,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   311,   636,    38,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,   249,     0,   314,   315,   316,   317,   318,   319,
     320,   321,    43,    44,   250,   251,   252,   253,   206,   207,
     322,     0,     0,   323,     0,   324,  1520,     0,   984,   -78,
     741,     0,     0,   325,   326,     0,   327,   328,   329,   330,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,   246,     0,     0,     0,     0,
     308,   309,   310,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,   311,   636,    38,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,   249,
       0,   314,   315,   316,   317,   318,   319,   320,   321,    43,
      44,   250,   251,   252,   253,   206,   207,   322,     0,     0,
     323,     0,   324,  1520,     0,   984,   -85,   741,     0,     0,
     325,   326,     0,   327,   328,   329,   330,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,    27,     0,     0,     0,     0,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     311,   405,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,    40,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,    45,    46,
      47,    48,   206,   207,   322,     0,     0,   323,   302,   324,
       1,   303,   106,   304,     0,   305,   306,   325,   326,     0,
     327,   328,   329,   330,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   863,    27,     0,     0,     0,     0,   308,   309,
     310,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,   311,   405,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,    40,     0,   314,
     315,   316,   317,   318,   319,   320,   321,    43,    44,    45,
      46,    47,    48,   206,   207,   322,     0,     0,   323,   302,
     324,     1,   303,   106,   304,     0,   305,   306,   325,   326,
       0,   327,   328,   329,   330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1193,    27,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,   311,   405,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,    40,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
      45,    46,    47,    48,     0,     0,   322,     0,     0,   323,
     730,   324,     0,     0,     0,     0,     0,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     307,    27,     0,     0,     0,     0,   308,   309,   310,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,   311,
     405,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,    40,     0,   314,   315,   316,
     317,   318,   319,   320,   321,    43,    44,    45,    46,    47,
      48,     0,     0,   322,     0,     0,   323,   302,   324,     1,
     303,   106,   304,   254,   305,   306,   325,   326,     0,   327,
     328,   329,   330,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       8,     9,    10,   563,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,    27,     0,     0,     0,     0,   308,   309,   310,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     311,   405,    38,    39,     0,   302,     0,     1,   303,   106,
     304,     0,   305,   306,   313,     0,    40,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,    45,    46,
      47,    48,     2,     0,   886,     0,     0,   887,   730,   324,
       0,     0,     0,     0,     0,     0,     0,   325,   326,     0,
     327,   328,   329,   330,     0,     0,  1114,  1115,  1116,   628,
    1117,  1118,  1119,  1120,   633,   634,  1121,     0,     0,   307,
       0,     0,     0,     0,     0,   308,   309,   310,     0,     0,
       0,     0,     0,    32,     0,     0,     0,     0,   311,   312,
    1122,     0,   638,   639,   640,     0,   302,     0,     1,   303,
     106,   304,   313,   305,   306,     0,   314,   315,   316,   317,
     318,   319,   320,   321,    43,    44,     0,     0,     0,     0,
       0,     0,   322,     2,     0,   323,  1157,   324,   641,     0,
    1158,     0,   254,     0,   642,   325,   326,     0,   327,   328,
     329,   330,     0,     0,     0,     0,     0,  1114,  1115,  1116,
     628,  1117,  1118,  1119,  1120,   633,   634,  1121,     0,     0,
     307,     0,     0,     0,     0,     0,   308,   309,   310,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,   311,
     312,  1122,     0,   638,   639,   640,     0,  1833,     0,     1,
     303,   106,   304,   313,   305,   306,     0,   314,   315,   316,
     317,   318,   319,   320,   321,    43,    44,     0,     0,     0,
       0,     0,     0,   322,     2,     0,   323,     0,   324,   641,
       0,     0,     0,   254,     0,   642,   325,   326,     0,   327,
     328,   329,   330,     0,     0,     0,     0,     0,  1114,  1115,
    1116,   628,  1117,  1118,  1119,  1120,   633,   634,  1121,     0,
       0,   307,     0,     0,     0,     0,     0,   308,   309,   310,
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0,
     311,   312,  1122,     0,   638,   639,   640,     0,   302,     0,
       1,   303,   106,   304,   313,   305,   306,     0,   314,   315,
     316,   317,   318,   319,   320,   321,    43,    44,     0,     0,
       0,     0,     0,     0,   322,     2,     0,   323,     0,   324,
     641,     0,     0,     0,   254,     0,   642,   325,   326,     0,
     327,   328,   329,   330,     0,     0,     0,     0,     0,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
       0,     0,   307,     0,     0,     0,     0,     0,   308,   309,
     310,     0,     0,     0,     0,     0,    32,     0,     0,     0,
       0,   311,   312,  1122,     0,   638,   639,   640,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   320,   321,    43,    44,   302,
       0,     1,   303,   106,   304,   322,   305,   306,   323,     0,
     324,   641,     0,     0,     0,   254,     0,   642,   325,   326,
       0,   327,   328,   329,   330,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   307,     0,     0,     0,     0,     0,   308,
     309,   310,    28,    29,     0,     0,     0,    32,     0,     0,
       2,     0,   311,   312,    38,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   320,   321,    43,    44,
       0,     0,     0,     0,     0,     0,   886,   307,     0,   887,
     730,   324,     0,   308,   309,   310,     0,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   311,   312,  1853,     0,
       1,   303,   106,   304,     0,   305,   306,     0,     0,     0,
     313,     0,     0,     0,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     2,     0,     0,     0,     0,
     322,     0,     0,   323,  1157,   324,  1622,     0,  1158,     0,
       0,     0,     0,   325,   326,     0,   327,   328,   329,   330,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,     0,     0,     0,     0,     0,   308,   309,
     310,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   323,  1157,
     324,  1854,     0,  1158,     0,     0,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,  1157,   324,     0,     0,  1724,     0,     0,     0,
    1871,   325,   326,     0,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     2,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,  1157,   324,     0,     0,  1724,
       0,     0,     0,  1875,   325,   326,     0,   327,   328,   329,
     330,   307,     0,     0,     0,     0,     0,   308,   309,   310,
    2002,     0,     1,   303,   106,   304,     0,   305,   306,     0,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     2,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,     0,     0,   323,  1157,   324,
    1854,     0,  1158,     0,     0,     0,     0,   325,   326,     0,
     327,   328,   329,   330,   307,     0,     0,     0,     0,     0,
     308,   309,   310,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
       2,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     323,  1157,   324,  1854,     0,  1158,     0,     0,     0,     0,
     325,   326,     0,   327,   328,   329,   330,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,     0,   324,     0,     0,  2055,  2056,
    1013,     0,     0,   325,   326,     0,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,  2067,   324,  2068,
       0,  1153,     0,     0,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   323,
    1157,   324,  2066,     0,  1158,     0,     0,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,     0,   324,     0,     0,     0,     0,   741,
       0,     0,   325,   326,   742,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     2,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,     0,   324,  1152,     0,
    1153,     0,     0,     0,     0,   325,   326,     0,   327,   328,
     329,   330,   307,     0,     0,     0,     0,     0,   308,   309,
     310,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   323,  1262,
     324,     0,     0,     0,     0,   741,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,  1329,   324,     0,     0,     0,     0,   741,     0,
       0,   325,   326,     0,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     2,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,     0,   324,  1133,     0,     0,
       0,   741,     0,     0,   325,   326,     0,   327,   328,   329,
     330,   307,     0,     0,     0,     0,     0,   308,   309,   310,
    1611,     0,     1,   303,   106,   304,     0,   305,   306,     0,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     2,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,     0,     0,   323,  1157,   324,
       0,     0,  1158,     0,     0,     0,     0,   325,   326,     0,
     327,   328,   329,   330,   307,     0,     0,     0,     0,     0,
     308,   309,   310,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
       2,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     323,  1612,   324,  1613,     0,     0,     0,     0,     0,     0,
     325,   326,     0,   327,   328,   329,   330,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,     0,   324,  1621,     0,  1153,     0,
       0,     0,     0,   325,   326,     0,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,  1691,   324,     0,
       0,  1153,     0,     0,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   323,
       0,   324,     0,     0,  1153,     0,     0,     0,     0,   325,
     326,  1718,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,     0,   324,     0,     0,  1721,     0,     0,
       0,  1722,   325,   326,     0,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     2,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,     0,   324,     0,     0,
    1153,     0,     0,     0,     0,   325,   326,  1728,   327,   328,
     329,   330,   307,     0,     0,     0,     0,     0,   308,   309,
     310,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   323,     0,
     324,     0,     0,  1721,     0,     0,     0,  1730,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,  1829,   324,     0,     0,  1153,     0,     0,     0,
       0,   325,   326,     0,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     2,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,  1831,   324,     0,     0,  1153,
       0,     0,     0,     0,   325,   326,     0,   327,   328,   329,
     330,   307,     0,     0,     0,     0,     0,   308,   309,   310,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     2,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,     0,     0,   323,  1832,   324,
       0,     0,  1158,     0,     0,     0,     0,   325,   326,     0,
     327,   328,   329,   330,   307,     0,     0,     0,     0,     0,
     308,   309,   310,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
       2,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     323,  1835,   324,     0,     0,  1153,     0,     0,     0,     0,
     325,   326,     0,   327,   328,   329,   330,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,  1612,   324,  1613,     0,     0,     0,
       0,     0,     0,   325,   326,     0,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,  1855,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,     0,   324,  1852,
       0,  1153,     0,     0,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   323,
    1856,   324,  1613,     0,     0,     0,     0,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,     0,   324,     0,     0,  1721,     0,     0,
       0,  1869,   325,   326,     0,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     2,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,     0,   324,     0,     0,
    1721,     0,     0,     0,  1873,   325,   326,     0,   327,   328,
     329,   330,   307,     0,     0,     0,     0,     0,   308,   309,
     310,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   323,  1987,
     324,     0,     0,  1153,     0,     0,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,  1830,   324,     0,     0,  1158,     0,     0,     0,
       0,   325,   326,     0,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     2,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,  1994,   324,     0,     0,  1153,
       0,     0,     0,     0,   325,   326,     0,   327,   328,   329,
     330,   307,     0,     0,     0,     0,     0,   308,   309,   310,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     2,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,     0,     0,   323,  1856,   324,
    1613,     0,     0,     0,     0,     0,     0,   325,   326,     0,
     327,   328,   329,   330,   307,     0,     0,     0,     0,     0,
     308,   309,   310,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
       2,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     323,  2071,   324,     0,     0,  1153,     0,     0,     0,     0,
     325,   326,     0,   327,   328,   329,   330,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,     0,   324,     0,     0,     0,  2100,
    1013,     0,     0,   325,   326,     0,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,  2103,   324,     0,
       0,  1153,     0,     0,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   323,
    2104,   324,     0,     0,  1153,     0,     0,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,  2132,   324,     0,     0,  1153,     0,     0,
       0,     0,   325,   326,     0,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     2,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,     0,   324,     0,     0,
       0,     0,     0,     0,     0,   325,   326,   547,   327,   328,
     329,   330,   307,     0,     0,     0,     0,     0,   308,   309,
     310,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   323,     0,
     324,     0,     0,     0,     0,   741,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,     0,   324,     0,     0,     0,     0,     0,     0,
       0,   325,   326,   837,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,   302,     0,     1,
     303,   106,   304,     0,   305,   306,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     2,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,     0,   324,     0,     0,     0,
       0,     0,     0,     0,   325,   326,   841,   327,   328,   329,
     330,   307,     0,     0,     0,     0,     0,   308,   309,   310,
     302,     0,     1,   303,   106,   304,     0,   305,   306,     0,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     2,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,     0,     0,   323,     0,   324,
       0,     0,     0,     0,  1013,     0,     0,   325,   326,     0,
     327,   328,   329,   330,   307,     0,     0,     0,     0,     0,
     308,   309,   310,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
       2,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     323,     0,   324,     0,     0,     0,     0,     0,     0,     0,
     325,   326,  1054,   327,   328,   329,   330,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,     0,   324,     0,     0,     0,     0,
       0,     0,  1106,   325,   326,     0,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,  1456,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,   323,   730,   324,     0,
       0,     0,     0,     0,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   323,
       0,   324,     0,     0,     0,     0,   741,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,     0,   324,     0,     0,     0,     0,     0,
       0,     0,   325,   326,  1559,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     2,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,  1595,   324,     0,     0,
       0,     0,     0,     0,     0,   325,   326,     0,   327,   328,
     329,   330,   307,     0,     0,     0,     0,     0,   308,   309,
     310,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   323,     0,
     324,     0,     0,     0,     0,     0,     0,  1598,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,  1789,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   323,     0,   324,     0,     0,     0,     0,  1788,     0,
       0,   325,   326,     0,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,  1792,     0,     1,
     303,   106,   304,     0,   305,   306,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     2,   314,   315,   316,   317,   318,
     319,   320,   321,     0,     0,     0,     0,     0,     0,     0,
       0,   322,     0,     0,   323,     0,   324,     0,     0,     0,
       0,   741,     0,     0,   325,   326,     0,   327,   328,   329,
     330,   307,     0,     0,     0,     0,     0,   308,   309,   310,
    1796,     0,     1,   303,   106,   304,     0,   305,   306,     0,
     311,   312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   313,     0,     0,     2,   314,   315,
     316,   317,   318,   319,   320,   321,     0,     0,     0,     0,
       0,     0,     0,     0,   322,     0,     0,   323,     0,   324,
       0,     0,     0,     0,   741,     0,     0,   325,   326,     0,
     327,   328,   329,   330,   307,     0,     0,     0,     0,     0,
     308,   309,   310,   302,     0,     1,   303,   106,   304,     0,
     305,   306,     0,   311,   312,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   313,     0,     0,
       2,   314,   315,   316,   317,   318,   319,   320,   321,     0,
       0,     0,     0,     0,     0,     0,     0,   322,     0,     0,
     323,     0,   324,     0,     0,     0,     0,   741,     0,     0,
     325,   326,     0,   327,   328,   329,   330,   307,     0,     0,
       0,     0,     0,   308,   309,   310,   302,     0,     1,   303,
     106,   304,     0,   305,   306,     0,   311,   312,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     313,     0,     0,     2,   314,   315,   316,   317,   318,   319,
     320,   321,     0,     0,     0,     0,     0,     0,     0,     0,
     322,     0,     0,   323,  1842,   324,     0,     0,     0,     0,
       0,     0,     0,   325,   326,     0,   327,   328,   329,   330,
     307,     0,     0,     0,     0,     0,   308,   309,   310,   302,
       0,     1,   303,   106,   304,     0,   305,   306,     0,   311,
     312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   313,     0,     0,     2,   314,   315,   316,
     317,   318,   319,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,   322,     0,     0,  1902,     0,   324,     0,
       0,     0,     0,  1788,     0,     0,   325,   326,     0,   327,
     328,   329,   330,   307,     0,     0,     0,     0,     0,   308,
     309,   310,   302,     0,     1,   303,   106,   304,     0,   305,
     306,     0,   311,   312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   313,     0,     0,     2,
     314,   315,   316,   317,   318,   319,   320,   321,     0,     0,
       0,     0,     0,     0,     0,     0,   322,     0,     0,   323,
    2003,   324,     0,     0,     0,     0,     0,     0,     0,   325,
     326,     0,   327,   328,   329,   330,   307,     0,     0,     0,
       0,     0,   308,   309,   310,   302,     0,     1,   303,   106,
     304,     0,   305,   306,     0,   311,   312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   313,
       0,     0,     2,   314,   315,   316,   317,   318,   319,   320,
     321,     0,     0,     0,     0,     0,     0,     0,     0,   322,
       0,     0,   323,  2062,   324,     0,     0,     0,     0,     0,
       0,     0,   325,   326,     0,   327,   328,   329,   330,   307,
       0,     0,     0,     0,     0,   308,   309,   310,   302,     0,
       1,   303,   106,   304,     0,   305,   306,     0,   311,   312,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   313,     0,     0,     2,   314,   315,   316,   317,
     318,   319,   320,   321,     0,     0,     0,     0,     0,     0,
       0,     0,   322,     0,     0,   323,     0,   324,     0,     0,
       0,     0,     0,     0,     0,   325,   326,     0,   327,   328,
     329,   330,   307,     0,     0,     0,     0,     0,   308,   309,
     310,   302,     0,     1,   303,   106,   304,     0,   305,   306,
       0,   311,   312,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   313,     0,     0,     2,   314,
     315,   316,   317,   318,   319,   320,   321,     0,     0,     0,
       0,     0,     0,     0,     0,   322,     0,     0,   701,     0,
     324,     0,     0,     0,     0,     0,     0,     0,   325,   326,
       0,   327,   328,   329,   330,   307,     0,     0,     0,     0,
       0,   308,   309,   310,   302,     0,     1,   303,   106,   304,
       0,   305,   306,     0,   311,   312,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   313,     0,
       0,     2,   314,   315,   316,   317,   318,   319,   320,   321,
       0,     0,     0,     0,     0,     0,     0,     0,   322,     0,
       0,   704,     0,   324,     0,     0,     0,     0,     0,     0,
       0,   325,   326,     0,   327,   328,   329,   330,   307,     0,
       0,     0,     0,     0,   308,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,   312,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   313,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   320,   321,  -887,   582,     0,  -887,  -887,  -887,     0,
       0,   322,     0,     0,   727,     0,   324,     0,     0,     0,
       0,     0,     0,     0,   325,   326,     0,   327,   328,   329,
     330,  -887,  -887,  -887,  -887,  -887,  -887,  -887,  -887,  -887,
    -887,  -887,  -887,  -887,  -887,  -887,  -887,  -887,  -887,  -887,
    -887,  -887,  -887,  -887,     0,     0,  -887,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -887,  -887,
       0,  -887,     0,     0,  -887,  -887,     0,  -887,  -887,     0,
       0,  -887,  -887,  -887,  -887,  -887,  -887,     0,  -887,  -887,
    -887,  -887,     0,     0,  -887,  -887,  -887,  -887,     0,  -887,
       0,  -887,  -887,  -887,     0,  -887,  -887,  -887,  -887,  -887,
    -887,  -887,     0,  -887,  -887,  -887,  -887,  -887,  -887,  -887,
    -887,  -887,     0,     0,  -887,   583,  -887,  -887,     0,   584,
    -887,     0,     0,     0,  -887,  -887,  -189,   904,     0,  -189,
    -189,  -189,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,     0,  -189,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -189,  -189,     0,  -189,     0,     0,  -189,  -189,     0,
    -189,  -189,     0,     0,  -189,  -189,  -189,  -189,  -189,  -189,
       0,  -189,  -189,  -189,  -189,     0,     0,  -189,  -189,  -189,
    -189,     0,  -189,     0,  -189,  -189,  -189,     0,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,     0,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,     0,     0,  -189,     0,  -189,
     905,     0,   906,  -189,     0,     0,     0,  -189,  -189,  -253,
     918,     0,     1,   303,   106,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,  -253,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,  -251,   921,  -253,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,  -251,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,  -254,
     918,  -251,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,  -254,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,  -252,   921,  -254,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,  -252,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     422,  -252,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   488,   438,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     510,   489,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   515,   511,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     519,   516,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   918,   520,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     921,  -742,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   918,  -743,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     921,  -739,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   918,  -740,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     921,  -745,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,  1036,  -746,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
    1040,  1037,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   918,  1041,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     921,  -722,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   918,  -723,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     921,  -725,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,  1541,  -726,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     918,  1542,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   921,  -640,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     918,  -641,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   921,  -728,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     918,  -729,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   921,  -633,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     918,  -634,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   921,  -629,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     918,  -630,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   921,  -619,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     918,  -620,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   921,  -614,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     918,  -615,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,     0,   921,  -631,     1,   303,   106,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   307,
      27,     0,   423,     0,     0,   308,   309,     0,    28,    29,
       0,     0,   424,    32,   425,   426,    35,    36,     0,   405,
      38,    39,   427,     0,     0,   428,   429,   430,   431,     0,
     432,     0,   433,   434,    40,     0,   314,   315,   316,   317,
     318,   319,   320,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   435,     0,   436,   437,     0,
     302,  -632,     1,   303,   106,   325,   326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   200,   201,
     202,   203,   204,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   307,    27,     0,   423,     0,     0,
     308,   309,     0,    28,    29,     0,     0,   424,    32,   425,
     426,    35,    36,     0,   405,    38,    39,   427,     0,     0,
     428,   429,   430,   431,     0,   432,     0,   433,   434,    40,
       0,   314,   315,   316,   317,   318,   319,   320,     0,    43,
      44,    45,    46,    47,    48,   206,   207,    51,     0,     0,
     435,     0,   436,   437,   422,     0,     1,   303,   106,     0,
     325,   326,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   307,    27,
       0,   423,     0,     0,   308,   309,     0,    28,    29,     0,
       0,   424,    32,   425,   426,    35,    36,     0,   405,    38,
      39,   427,     0,     0,   428,   429,   430,   431,     0,   432,
       0,   433,   434,    40,     0,   314,   315,   316,   317,   318,
     319,   320,     0,    43,    44,    45,    46,    47,    48,   206,
     207,    51,     0,     0,   435,     0,   436,   437,   488,     0,
       1,   303,   106,     0,   325,   326,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   307,    27,     0,   423,     0,     0,   308,   309,
       0,    28,    29,     0,     0,   424,    32,   425,   426,    35,
      36,     0,   405,    38,    39,   427,     0,     0,   428,   429,
     430,   431,     0,   432,     0,   433,   434,    40,     0,   314,
     315,   316,   317,   318,   319,   320,     0,    43,    44,    45,
      46,    47,    48,   206,   207,    51,     0,   199,   435,     1,
     436,   437,     0,     0,     0,     0,     0,     0,   325,   326,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   200,   201,   202,   203,   204,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   205,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     1,     0,    43,    44,    45,    46,
      47,    48,   206,   207,    51,     0,     0,   859,  1045,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   565,     2,
     200,   201,   202,   203,   204,     8,     9,    10,   563,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,   206,   207,    51,
       1,     0,   564,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   565,     0,   566,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     1,     0,    43,    44,    45,
      46,    47,    48,   206,   207,    51,     0,     0,   859,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   565,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   246,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   247,    38,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   249,     0,     0,     0,     0,     0,     0,     0,
       1,     0,    43,    44,   250,   251,   252,   253,   206,   207,
      51,     0,     0,   859,     0,     0,     0,     0,     0,     0,
    1421,     0,     0,     0,   565,     2,   200,   201,   202,   203,
     204,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,    18,    19,   244,   245,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   246,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   247,    38,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   249,     0,     0,
       0,     0,     0,     0,     0,     1,     0,    43,    44,   250,
     251,   252,   253,   206,   207,    51,     0,     0,   859,     0,
       0,     0,     0,     0,     0,  1438,     0,     0,     0,   565,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   246,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   247,    38,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   249,     0,     0,     0,     0,     0,     0,     0,
       1,     0,    43,    44,   250,   251,   252,   253,   206,   207,
      51,     0,     0,  1205,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1206,     2,   200,   201,   202,   203,
     204,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,    18,    19,   244,   245,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   246,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   247,    38,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   249,     0,     0,
       0,     0,     0,     0,     0,     1,     0,    43,    44,   250,
     251,   252,   253,   206,   207,    51,     0,     0,  1205,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1228,
       2,   200,   201,   202,   203,   204,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,    18,    19,   244,   245,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   246,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   247,    38,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   249,     0,     0,     0,     0,     0,     0,     0,
       1,     0,    43,    44,   250,   251,   252,   253,   206,   207,
      51,     0,     0,  1205,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1683,     2,   200,   201,   202,   203,
     204,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,    18,    19,   244,   245,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   246,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   247,    38,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   249,     0,     1,
       0,     0,     0,     0,     0,     0,     0,    43,    44,   250,
     251,   252,   253,   206,   207,    51,     0,     0,  1205,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,  1698,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     1,     0,    43,    44,    45,    46,
      47,    48,     0,     0,    51,     0,     0,   859,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   565,     2,
       3,     4,   273,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    26,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,   274,    31,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,    42,     1,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,    51,
       0,     0,    52,     0,     0,     0,     0,     0,     0,     0,
       0,   275,     2,   200,   201,   202,   203,   204,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,   423,     0,     0,     0,     0,     0,    28,    29,
       0,     0,   424,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       1,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     206,   207,    51,     0,     0,   946,     0,   436,     0,     0,
       0,     0,     0,     0,   947,     2,   200,   201,   202,   203,
     204,     8,     9,    10,   563,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     1,     0,     0,     0,    43,    44,    45,
      46,    47,    48,   206,   207,    51,     0,     0,   926,     0,
       0,     0,     0,     0,     0,     0,     0,   927,     2,   200,
     201,   202,   203,   204,     8,     9,    10,   563,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,  1709,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   206,   207,    51,     0,
       0,    52,     0,     0,     0,     0,     0,     0,     0,     0,
     927,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,  1713,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,   250,   251,   252,   253,   206,
     207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -111,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,  1714,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,   250,   251,   252,   253,   206,
     207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -95,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,  1820,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,   250,   251,   252,   253,   206,
     207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -96,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,  1964,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,   250,   251,   252,   253,   206,
     207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -80,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249, -1280,   292,     0,     1,     0,     0,
       0,     0,     0,    43,    44,   250,   251,   252,   253,   206,
     207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -87,     0,     2,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
      30,    31,     0,    32,    33,    34,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,     1,     0,     0,    42,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
      49,    50,    51,     0,     0,    52,     0,     0,    53,     0,
       0,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     1,     0,     0,     0,
     829,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1397,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     1,     0,     0,     0,
     829,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1740,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,   165,     0,     1,     0,     0,     0,
     829,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1741,     2,     3,     4,   166,     6,     7,     8,     9,    10,
     167,   168,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   165,    40,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
      50,    51,     0,     0,    52,     0,     0,   169,     0,     2,
       3,     4,   166,     6,     7,     8,     9,    10,   167,   168,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     603,    40,     1,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,    51,
       0,     0,    52,     0,     0,   169,     0,     2,   200,   201,
     202,   203,   204,   234,   235,   236,   604,   605,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   246,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   247,    38,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -907,   249,
    -907,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,   250,   251,   252,   253,   206,   207,    51,     0,     0,
      52,     0,     0,   606,     0,  -907,  -907,  -907,  -907,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -907,     0,     0,     0,     0,     0,     0,
       0,  -907,  -907,     0,     0,     0,  -907,     0,     0,     0,
       0,     0,  -907,  -907,  -907,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -907,     1,     0,
       0,     0,     0,     0,     0,     0,     0,  -907,  -907,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,     0,     0,  -907,     0,
       0,  -907,     0,     2,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,    30,    31,     0,    32,    33,    34,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,     0, -1281,   284,
      42,     1,     0,     0,     0,    43,    44,    45,    46,    47,
      48,    49,    50,    51,     0,     0,    52,     0,     0,    53,
       0,     0,     0,     0,     0,     0,     2,     3,     4,   166,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    26,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,    33,    34,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,   199,     0,     1,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,    49,    50,    51,     0,     0,    52,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   205,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,   199,     0,
       1,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   206,   207,
      51,     0,     0,  1205,  1670,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   205,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,   199,     0,     1,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,   206,   207,     0,     0,     0,     0,   208,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   205,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,   939,     0,
       1,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   206,   207,
       0,     0,     0,     0,   388,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   205,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,  1464,     0,     1,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,   206,   207,     0,     0,     0,     0,   208,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   205,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,   199,     0,
       1,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   206,   207,
       0,     0,     0,     0,   388,     2,   200,   201,   202,   203,
     204,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   205,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,   199,     0,     1,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,   206,   207,     0,     0,     0,     0,  1556,
       2,   200,   201,   202,   203,   204,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   205,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,   165,     0,
       1,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   206,   207,
       0,     0,     0,     0,  1892,     2,     3,     4,   166,     6,
       7,     8,     9,    10,   563,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,   165,     0,     1,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,    51,     0,     0,    52,     2,
       3,     4,   166,     6,     7,     8,     9,    10,   563,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,   883,     0,     1,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,    49,    50,    51,
       0,     0,    52,     2,   200,   201,   202,   203,   204,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,    18,
      19,   244,   245,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   246,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     247,    38,   248,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     0,     0,   249,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,   250,   251,   252,
     253,   206,   207,     0,     0,     0,   884,     2,     3,     4,
     166,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    26,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     1,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,    49,    50,    51,     0,     0,
      52,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,    51,     0,     0,    52,     2,   200,   201,   202,   203,
     204,     8,     9,    10,   563,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,   206,   207,    51,     0,     0,    52,     2,
     200,   201,   202,   203,   204,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,   206,   207,     0,
       0,     0,   719,     2,   200,   201,   202,   203,   204,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,   206,   207,     0,     0,     0,  1443,     2,   200,   201,
     202,   203,   204,   234,   235,   236,  1528,   238,   239,   240,
     241,   242,   243,    18,    19,   244,   245,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   246,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   247,    38,   248,     0,     0,     0,
       0,     0,     0,     0,  1068,     0,     1,     0,     0,   249,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,   250,   251,   252,   253,   206,   207,    51,     0,     0,
      52,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,  1069,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   205,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,  1074,     0,     1,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,  1075,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   205,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,  1080,     0,     1,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,  1081,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   205,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,   868,     0,     1,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,   249,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,   250,   251,   252,   253,   206,
     207,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,  1029,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   205,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,  1086,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   205,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   502,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
     829,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   205,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,   477,   478,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,   249,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,   250,   251,   252,   253,   206,
     207,     2,   200,   201,   202,   203,   204,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   206,
     207,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,   250,   251,   252,   253,   206,
     207,     2,   200,   201,   202,   203,   204,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,    18,    19,   244,
     245,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   247,    38,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,   250,   251,   252,   253,   206,
     207,    51,     0,     0,   859,  1667,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   565,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   246,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   247,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     250,   251,   252,   253,   206,   207,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1517,     2,   200,   201,   202,
     203,   204,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,    18,    19,   244,   245,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   246,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   247,    38,   248,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     250,   251,   252,   253,   206,   207
};

static const yytype_int16 yycheck[] =
{
       0,   718,    92,   640,   534,   132,   925,    83,    84,   996,
     925,   153,   469,     1,   270,   858,    86,  1098,   343,   128,
       5,   720,    84,   343,   288,   100,   534,    83,   741,   100,
      30,    31,   858,   156,   995,   748,   997,   957,   751,   834,
       1,    41,   858,   834,  1215,   935,    93,  1013,   579,    30,
    1605,   342,    52,    86,   470,   131,   183,     5,   128,    59,
      83,    42,  1617,   144,    64,   356,    66,   128,     1,   360,
       1,   875,   995,   554,   997,   882,   157,     3,   159,   300,
     161,    83,    82,    83,    84,    64,    86,   121,   309,    17,
       5,    91,    93,    93,   315,   128,   186,   187,     1,   100,
     100,   101,    93,   584,   104,   473,   587,     5,   589,   995,
     591,   997,     1,   113,    83,    59,   116,     3,     5,     5,
       1,     3,   144,     5,    93,     1,   107,   108,   128,   121,
     111,   131,   132,     1,   122,   157,   136,   159,   126,   161,
     140,   141,   142,    17,   144,   792,   121,   132,   148,   956,
     150,   121,     0,   153,   154,     1,   156,   157,   158,   159,
     976,   161,   132,   124,   164,    83,   186,   187,   469,   113,
      69,    70,     5,   820,   174,    93,   124,     3,   268,     5,
     741,     5,   100,   183,     3,   825,   132,   748,     1,   265,
     751,   825,     1,   127,     3,   174,   127,   130,   198,  1003,
       1,   270,   278,   265,     1,   469,     7,     8,     9,    28,
     210,   126,   212,   288,   142,   290,     3,   288,    37,   290,
     220,   221,   278,     1,   127,     3,     5,     1,   127,     3,
     230,   129,   288,   233,     1,    83,   122,   183,   127,   126,
     122,   878,   554,   290,   130,    93,   127,     3,   130,   757,
     270,   127,   100,   101,   198,   278,   124,     1,   126,   127,
    1247,     3,     1,     0,     3,   265,   393,  1254,   142,   289,
     270,  1258,   584,     3,   274,   587,   278,   589,   278,   591,
       3,   127,     5,     1,  1204,     1,   288,  1248,   288,   290,
     290,     3,  1847,   274,  1255,   803,   122,   420,  1259,   290,
       1,     1,   121,    52,   130,    28,   121,   131,   308,   288,
       3,   124,     1,   132,   314,    52,    28,   132,   127,   288,
     121,   290,     5,   323,   125,  1248,     3,   124,   129,   126,
     861,   132,  1255,   119,     1,   122,  1259,   337,    17,   126,
     118,   119,   121,   130,   325,     1,    83,    84,   126,   439,
     440,   441,   442,   127,    91,     3,    93,   124,   649,   126,
     127,   652,  1248,   100,   101,   995,   122,   997,   326,  1255,
     126,   119,   290,  1259,   130,     1,     3,     3,   126,   379,
     380,   124,   131,   127,   132,   385,   128,   387,   127,     3,
    1103,     3,   122,   393,   131,   132,    73,   126,    17,   399,
     470,     3,   529,   121,   133,   128,   662,   663,   664,   665,
     121,   127,   412,   555,    28,     1,   128,   417,   545,   419,
     420,   132,     1,   423,   424,   882,   127,   127,   121,   429,
     278,   695,   432,   433,   434,   435,   436,   470,   127,   122,
     288,   385,   290,   387,   128,   535,   183,   393,   538,   525,
     526,   527,   777,   778,   779,   564,     3,   777,   778,   779,
     127,    73,   127,   142,   464,   465,   466,   543,   544,   469,
     470,   127,   221,   473,   122,   696,   476,     1,   559,   118,
     561,   481,   807,   808,   809,   485,   486,   807,   808,   809,
     490,   491,  1573,   230,   127,   122,   233,     3,     3,   956,
    1420,   127,   502,   564,   121,  1013,  1205,  1678,   508,   509,
       1,     3,   512,   513,   128,   127,   932,   517,   518,  1050,
     122,   521,   522,   142,  1223,   525,   526,   527,   265,   529,
    1061,  1230,   532,     3,   757,   121,   122,   559,  1428,   561,
     126,   278,  1103,   543,   544,   545,  1003,   126,     3,   549,
    1190,   288,  1192,   290,   554,   555,  1190,     3,  1192,   559,
     417,   561,   562,  1483,   564,   565,   566,     3,  1534,   569,
       5,   118,   119,  1416,   875,   943,   424,   945,  1468,   579,
     803,  1471,    28,   529,   584,     0,  1067,   587,     5,   589,
    1416,   591,  1579,   662,   663,   664,   665,     3,   598,   545,
    1416,   128,   126,   130,  1085,  1400,  1401,     3,  1527,  1400,
    1401,   875,  1527,   118,   119,     7,     8,     9,  1248,  1580,
     695,   565,   128,   128,   695,  1255,     1,     1,   718,  1259,
     630,   122,   632,   579,   935,   126,   128,     5,   112,   695,
     640,  1149,   124,     1,     3,  1153,   128,  2088,  1156,   125,
    1158,  1494,   509,  1496,   598,   956,   393,  1580,   128,     1,
       3,   119,   662,   663,   664,   665,   124,   122,    11,   132,
     690,   691,     7,     8,     9,  1501,   124,     7,     8,     9,
     680,   681,   128,   126,     1,     3,   435,   122,   124,   689,
     126,     1,   956,   695,  1580,   695,   677,   678,   435,    74,
      75,   701,  1003,  2144,    79,    11,    65,   564,     3,   709,
      28,    86,  1883,   119,   120,   126,   716,   717,   718,   719,
     720,   721,     3,   119,   198,   126,  1692,   727,   124,   121,
       3,     3,   995,   996,   997,   110,   111,   129,   738,  1003,
     132,     3,   723,   724,   725,     3,   121,   122,   122,  1462,
     859,   126,   126,   121,   754,  1067,    28,  1677,   758,   118,
     119,  1073,  1682,   121,   122,     1,    28,  1079,   126,   128,
      28,   126,   119,  1085,  1761,   118,   119,   120,    73,     3,
     122,   128,   125,   126,   126,   128,   121,     3,   525,   526,
     527,     1,   529,     3,   129,   532,   127,   132,   859,   129,
     800,  1762,   132,   121,   804,   122,   543,   544,   545,   126,
     122,   121,   122,   771,   120,   564,   126,   566,   908,   909,
     126,   911,  1788,   932,   914,   915,  1746,   564,   970,   829,
     830,   831,   127,  1799,   834,   835,   836,   118,   119,  1762,
     798,   964,   965,   121,   125,   118,   119,   695,   806,   121,
    1106,   793,   326,  1109,   132,   128,   127,   857,   858,   859,
    1750,  1751,   932,   863,    77,   865,   866,   128,   826,   794,
     122,   932,   795,   873,   874,   875,  1762,   121,   878,   821,
      90,   738,   882,  1414,   884,   885,   122,   887,   969,   889,
     126,  1147,  1034,  1035,   118,   119,   986,   822,     3,   932,
     823,  1462,   118,   119,   128,  1161,  1162,  1163,  1164,   125,
     128,   385,   130,   387,     7,     8,     9,   130,   119,  1244,
       3,    83,     5,  1050,  1244,   121,   926,   128,   928,     7,
       8,     9,   932,   119,     3,   935,   121,   128,   796,   130,
     940,     3,   128,   943,   130,   945,   946,   969,    31,    11,
    1580,   792,   689,  1062,   793,   955,   956,   957,   695,    28,
     127,  1787,    79,  1044,   964,   965,   824,   967,    37,   969,
     970,   794,  1671,  1049,    77,   975,   976,   977,   978,   820,
    1900,   125,   821,  1700,  1247,  1248,   130,     3,     7,     8,
       9,  1254,  1255,   110,   111,  1258,  1259,     0,   125,   822,
    1637,  1062,   859,  1003,  1534,   795,  1463,   124,     1,   866,
       3,   128,  1978,   118,   119,  1546,   121,   874,     7,     8,
       9,   183,  1044,   122,   121,  1861,  1534,   126,   885,    12,
      13,   130,   125,   823,  1034,  1035,   129,  1106,  1038,  1039,
    1109,   796,  1042,  1043,  1044,   121,  1046,  1962,   121,  1049,
    1050,   129,   121,     3,   528,     5,   118,   119,   120,  1059,
     128,  1061,  1062,  1063,   126,   126,   128,  1067,   126,   824,
    1070,   132,   125,  1073,   132,   121,  1076,   130,  1147,  1079,
      83,    31,  1082,     3,   124,  1085,   121,  1087,   128,  2055,
      93,   565,  1161,  1162,  1163,  1164,  1205,   100,   101,  1180,
     121,  1101,   118,   119,  1050,   121,  1106,   122,   127,  1109,
     129,   126,   121,  1059,   118,  1061,   278,   122,  1118,  1063,
    1120,   126,   120,   597,    79,   130,   288,  1428,   126,  1129,
    2096,  1974,  1762,  1976,   138,   139,   119,   120,   887,   118,
     129,   121,  1142,     3,  1205,    65,   120,  1147,  1148,     3,
     887,   625,   126,     3,   140,   110,   111,  1138,  1180,   138,
     139,  1161,  1162,  1163,  1164,    12,    13,  1468,    28,   122,
    1471,   136,   128,   126,    28,   130,  2012,   926,  2014,  1179,
    1180,  1181,   120,  1183,   141,  1902,     3,   300,   126,   926,
      44,   940,  1049,  1193,   134,  1195,   309,   946,   118,   119,
    1200,   120,   315,    16,  1204,  1205,   121,   126,  1716,   946,
     125,    28,  1743,  1721,    74,    75,  1724,   132,   221,    79,
      74,    75,   122,  1223,    74,    75,    86,    44,  1865,    79,
    1230,   120,     6,   120,     8,     9,    86,   126,  1238,   126,
       3,  2077,     5,  2079,   128,  2081,   130,   120,   722,  1193,
     110,   111,   726,   126,     3,   135,   136,    74,    75,   120,
     110,   111,   664,   665,  1245,   126,   122,   741,   128,  1799,
     126,   134,   119,   120,   748,   278,  1807,   751,   128,    28,
    1788,    10,    11,  2119,  2120,   288,  2122,   290,     3,   140,
     122,  1799,   141,  1251,   126,    44,    11,   771,   130,    73,
    1049,   122,  2138,   309,   122,   122,    16,   469,   126,   315,
      84,   122,  1049,  1050,     3,   126,  1579,  1580,   128,  2155,
     323,   790,   791,   122,   798,    74,    75,   126,   120,  1585,
    1586,   130,   806,   128,   126,   109,   790,   791,   120,    28,
     128,  1597,   130,  1200,   126,   119,  1203,   120,    37,   818,
     819,   120,   826,   126,   120,   118,   119,   126,   132,   121,
     126,   135,   136,   137,   818,   819,  1442,   529,   780,   781,
     532,   122,   122,   122,   122,   126,   126,   126,   126,   385,
     122,   387,   122,   348,   126,    74,    75,    88,    89,    90,
      79,  1391,  1392,   782,   783,  1395,  1396,    86,   810,   811,
    1400,  1401,   122,   118,   119,   120,   782,   783,   270,   128,
     125,   126,  1412,   128,   417,  1396,  1416,  1417,   124,  1546,
    1420,   110,   111,   812,   813,   124,  1426,   126,  1428,   118,
     122,  1431,   121,   126,   126,  1435,   812,   813,    14,    15,
    1440,  1441,  1442,   132,  1181,   124,  1183,   126,  1978,  1750,
    1751,   925,   154,   927,   419,  2092,   158,     1,   135,   136,
      69,    70,     1,  1463,     3,  1465,   469,   124,  1468,   126,
    1978,  1471,   119,   128,  1474,   130,   128,    37,   130,     1,
     124,     3,    91,  1483,    44,    45,    95,   119,    97,  1489,
    1490,     1,   966,     3,  1494,  1495,  1496,  1497,  1761,  1762,
     119,  1722,  1723,   125,  1725,  1726,   509,    10,    11,  1730,
    1731,  1732,  1733,   126,    74,    75,  1585,  1586,   127,    79,
       1,   995,     3,   997,   128,  2055,    86,   689,  1597,   128,
      74,    75,     1,   695,     3,    79,    74,    75,   780,   781,
     133,    79,    86,  1543,  1544,   133,  1546,  2055,    86,   133,
     110,   111,   132,   124,  1554,   126,  1413,   126,   118,   565,
       1,   128,   124,   130,   126,  1565,   110,   111,   810,   811,
    1679,   128,   110,   111,   525,   526,   527,   439,   126,  1835,
     124,   125,   126,   696,   126,  1585,  1586,   127,     3,  1063,
     128,   126,   543,   544,    92,  1595,   128,  1597,  1598,   124,
    1546,  1601,   128,   130,   130,  1605,    14,    15,  1554,  1609,
     906,   907,  1612,    28,  1508,  1508,  1510,  1510,  1679,   625,
     906,   907,    37,   662,   663,   543,   544,  1608,   121,  1103,
     662,   663,   121,    74,    75,   100,   101,  1637,    79,   121,
    1114,   835,   836,  1624,  1644,    86,   124,   124,  1869,  1870,
    1871,  1872,  1873,  1874,  1875,  1876,   124,   136,   121,    74,
      75,   121,  1752,   124,    79,   124,  1140,  1141,   122,   110,
     111,    86,   128,   124,   119,   127,   133,  1677,   133,  1679,
    1807,   121,  1682,   124,   125,   126,   133,   133,   186,   187,
     133,   133,   695,  1442,   132,   110,   111,  1778,   701,  1780,
    1700,   128,  1702,  1703,  1106,  1442,   121,  1109,  1565,   119,
     128,   124,   126,   875,   119,   718,  1465,   132,   127,   122,
     127,   127,   122,  1804,   727,  1806,   122,   122,   122,   133,
     122,   133,  1206,   130,   133,   738,   121,  1737,   121,   130,
     130,  1962,   121,    56,   124,  1147,  1746,  2003,   124,  2005,
    1750,  1751,   124,  1753,  1228,   121,  1778,   119,  1780,  1161,
    1162,  1163,  1164,   119,   124,  1765,  1835,   122,   630,   122,
     268,  2096,   270,   935,  1248,   119,  2096,  1251,  1778,   121,
    1780,  1255,  1804,  1783,  1806,  1259,   121,   132,   119,   122,
     122,   289,   122,   132,   956,   124,   122,     1,   126,   126,
     662,   663,   664,   665,  1804,   127,  1806,  1807,   122,  1546,
     130,   130,   130,   130,   122,  2071,  1565,   122,   122,   125,
     127,   786,   787,   122,   789,     3,   122,   122,   831,  1829,
    1830,  1831,  1832,   133,   122,  1835,   133,   130,   130,  1839,
    1840,  1003,  1842,   133,  1844,    56,   121,   130,   122,   814,
     815,   816,   817,   121,   121,   133,  1856,   130,   130,   130,
     122,  1807,   122,   866,   122,  1865,   122,   122,  1868,   348,
      74,    75,   875,   122,     3,    79,   133,   119,  1859,   882,
    1861,   132,    86,   133,   887,   133,   889,   132,   124,    11,
    1971,   128,   857,   858,   125,   128,    74,    75,   130,    28,
    1900,    79,  1902,   130,   124,   124,   110,   111,    86,   125,
     125,  1869,  1870,  1871,  1872,  1873,  1874,  1875,  1876,   121,
     124,   927,   126,   128,   122,   122,  1783,   122,    64,   122,
     133,   122,   110,   111,  2003,   122,  2005,   940,   122,   133,
     419,   439,     3,   121,   442,    74,    75,   133,   133,  1971,
      79,   133,   133,   956,   133,    64,   133,    86,   124,   122,
     966,   133,   133,   122,   133,   268,   269,    28,   133,  1969,
    1970,  1971,  1972,  1973,  1974,   124,  1976,   124,   133,   124,
     124,   110,   111,  1983,  1984,  1985,  1986,   128,  1462,     0,
     122,   124,   957,   124,  1994,  2085,  2086,   124,  1472,   128,
     124,   124,  2071,  2003,  1962,  2005,  2006,   124,   124,   124,
     122,   124,   476,    74,    75,  2015,  2016,   124,    79,  1181,
    2127,  1183,  1497,   476,   857,    86,   476,   476,   476,  1503,
      41,  2012,   975,  2014,  1508,   288,  1510,   535,   912,   803,
     538,   288,   967,    44,    45,  1463,   434,   721,    59,   110,
     111,  2051,  2052,  1527,   424,    66,  1788,  1063,  2058,  2059,
     314,   727,  2062,  2076,  2064,   265,   100,  2067,    93,   270,
    1807,  2071,    83,    74,    75,    86,   938,    93,    79,    74,
      75,    92,    93,   101,    79,    86,  2086,    93,  2088,   100,
     101,    86,  2092,  1737,    -1,  2076,  2077,    -1,  2079,    -1,
    2081,    -1,   113,    -1,  2104,   116,  1580,    -1,  1114,   110,
     111,    -1,    -1,    -1,    -1,   110,   111,   128,    -1,    -1,
     121,    -1,    -1,   118,    -1,   136,   121,  2127,  2128,  2110,
     141,   142,  2132,   144,    -1,    -1,    -1,   132,  2119,  2120,
      -1,  2122,    -1,   154,  2144,   156,   157,   158,   159,    -1,
     161,    -1,    -1,    -1,    -1,     3,    -1,  2138,    -1,    -1,
      -1,    -1,    -1,    -1,   662,   663,   664,   665,    -1,    -1,
      -1,    -1,    -1,    -1,  2155,   186,   187,    -1,    -1,    -1,
      28,    -1,    -1,  1585,  1586,    -1,    -1,   198,    -1,    37,
      -1,    -1,   690,   691,   692,  1597,    -1,  1200,    -1,    -1,
    1206,   212,   385,    -1,   387,    -1,    -1,  1681,    -1,  1683,
     221,    -1,    -1,    -1,    -1,     3,    74,    75,  1692,    -1,
      -1,    79,  1228,  1697,  1698,    -1,    74,    75,    86,    -1,
    1704,    79,   535,    -1,    -1,   538,    -1,    -1,    86,  1204,
      28,    -1,    -1,    -1,  1106,    -1,    -1,  1109,    -1,    37,
      -1,    -1,   110,   111,   265,    -1,  1118,   268,   269,   270,
      -1,    -1,   110,   111,   122,    -1,  1428,   278,    -1,    -1,
     118,    -1,    -1,   121,    -1,    -1,    -1,   288,   289,   290,
       3,    -1,   130,    -1,    -1,  1147,    74,    75,  1762,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,   308,    86,  1161,
    1162,  1163,  1164,   314,    -1,    28,  1468,   786,   787,  1471,
     789,    -1,   323,    -1,    37,   142,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,   154,    -1,    -1,
     118,   158,    -1,   121,   122,   814,   815,   816,   817,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,   662,
     663,   664,   665,    86,    -1,    74,    75,    -1,    -1,   380,
      79,    -1,    -1,    -1,   385,    -1,   387,    86,   857,   858,
      -1,    -1,   565,    -1,     0,    -1,    -1,   110,   111,   692,
      -1,    -1,  1866,  1867,    -1,   118,    -1,    -1,   121,    -1,
      -1,   110,   111,    -1,    -1,    -1,   417,    -1,   419,   420,
      -1,    -1,   423,   424,    -1,    -1,   125,    -1,   429,    -1,
      -1,    -1,   433,   434,    -1,   436,    -1,  1901,    -1,    -1,
      -1,    -1,    -1,  1835,    -1,    -1,  1910,    -1,   265,    -1,
      -1,    -1,   625,    -1,    -1,    -1,   125,    -1,    -1,     3,
      -1,  1416,    -1,   464,   465,  1420,    -1,    -1,   469,   470,
      -1,    -1,  1465,    -1,    -1,   476,  1472,    83,    -1,    -1,
     481,    -1,    -1,    -1,    28,   486,    -1,    93,   957,   490,
     491,   308,    -1,    37,   100,   101,    -1,   314,   986,    -1,
      -1,    -1,  1966,  1967,    -1,    -1,    -1,    -1,   509,    -1,
      -1,   512,   513,    -1,    44,    45,   517,   518,    -1,    -1,
     521,   522,    -1,    -1,    -1,    -1,    -1,   528,  1483,    -1,
      74,    75,    -1,    -1,   535,    79,   142,   538,    74,    75,
      -1,    -1,    86,    79,    74,    75,  1501,    -1,   154,    79,
      86,    -1,   158,   554,    -1,    -1,    86,    -1,   559,    -1,
     561,    -1,    -1,   564,   565,    -1,   110,   111,    -1,    -1,
      44,    45,  1565,    -1,   110,   111,    -1,   121,    -1,    -1,
     110,   111,   118,   584,    -1,   121,   587,    -1,   589,    -1,
     591,   121,    -1,    -1,    -1,    -1,    -1,   598,  1750,  1751,
      74,    75,    -1,    74,    75,    79,   423,    -1,    79,    -1,
      -1,  2003,    86,  2005,  2078,    86,    -1,   434,  1106,  1722,
    1723,  1109,  1725,  1726,    -1,    -1,    -1,  1730,  1731,  1732,
    1733,    -1,  2096,    -1,    -1,    -1,   110,   111,    -1,   110,
     111,    -1,    -1,     7,   118,    -1,    10,    11,    12,    13,
      14,    15,    16,    17,    -1,    -1,    -1,    -1,    -1,  1147,
      -1,   662,   663,   664,   665,    -1,    -1,    -1,    -1,   486,
      -1,    -1,   278,  1161,  1162,  1163,  1164,    -1,    -1,  2071,
      -1,    -1,   288,  2147,   290,  1681,    -1,  1683,    -1,   690,
     691,   692,    -1,    -1,   695,    -1,  1184,    -1,  1186,    -1,
     701,  1697,  1698,    -1,    -1,    -1,    -1,  1700,   709,    -1,
      -1,    -1,    -1,    -1,    -1,   716,   717,   718,    -1,   720,
     721,    -1,  1677,    -1,    -1,     0,   727,  1682,    -1,    -1,
      -1,    -1,    -1,  1585,  1586,  1204,    -1,   738,    -1,    -1,
     741,    -1,    -1,  1595,    -1,  1597,  1598,   748,    -1,  1601,
     751,    -1,    -1,    -1,   927,   119,   120,  1609,    -1,    -1,
    1612,    -1,    -1,    -1,    -1,   129,  1869,  1870,  1871,  1872,
    1873,  1874,  1875,  1876,   138,   139,   140,   141,   142,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1783,  1746,    -1,   966,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    -1,    -1,    -1,    83,    -1,
      -1,    -1,    -1,  1106,    -1,    -1,  1109,   423,    93,    -1,
      -1,    -1,    -1,    -1,    -1,   100,   101,    -1,   434,    -1,
     831,    -1,  1787,   834,   835,   836,    -1,    -1,    -1,    74,
      75,    74,    75,    -1,    79,    -1,    79,    -1,    -1,    -1,
      -1,    86,    -1,    86,  1147,    -1,   857,   858,   859,  1962,
      -1,    -1,    -1,    -1,    -1,   866,     0,   142,  1161,  1162,
    1163,  1164,    -1,   874,   875,   110,   111,   110,   111,   154,
     486,   882,    -1,   158,   885,    -1,   887,   122,   889,   122,
    1063,  1184,    -1,  1186,    -1,    -1,    74,    75,   528,   716,
     717,    79,    -1,   720,   721,  1901,   119,   120,    86,  1902,
      -1,    -1,    -1,    -1,  1910,    -1,   129,    -1,    52,    -1,
      -1,   134,   135,   136,    -1,   138,   139,   140,   141,   142,
      -1,   932,   110,   111,    -1,    -1,    -1,    -1,    -1,   940,
      -1,  1114,    -1,    -1,   122,  1900,    -1,  1416,    82,    83,
      84,  1420,    -1,    -1,    -1,   956,   957,    91,    -1,    93,
      -1,    -1,    -1,   964,   965,    -1,   100,   101,   969,    -1,
    1966,  1967,    -1,    -1,   975,    -1,    -1,  1829,  1830,  1831,
    1832,    -1,    -1,  1835,    -1,    -1,    -1,  1839,  1840,    -1,
    1842,    -1,  1844,    -1,   995,   996,   997,   131,   132,   133,
     134,   135,  1003,   278,  1856,    -1,    -1,   141,    -1,    -1,
     144,    -1,    -1,   288,  1483,   290,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   157,    -1,   159,    -1,   161,    -1,    -1,
    1518,    -1,  1501,  1206,    -1,    -1,    -1,  1038,  1039,    -1,
      -1,  1042,  1043,  1044,    -1,    -1,    -1,    -1,    -1,   183,
     184,   185,    -1,    -1,    -1,  1228,    -1,   874,     3,    -1,
      -1,  1062,  1063,    -1,    -1,    -1,  1067,    -1,   885,    -1,
      -1,    -1,  1073,    -1,    -1,    -1,    -1,    -1,  1079,   709,
      -1,    -1,    -1,    28,  1085,    -1,   220,   221,    -1,   695,
      -1,    -1,    37,    38,    -1,    -1,    -1,  1585,  1586,    -1,
      -1,    -1,  1103,    -1,    -1,  1106,    -1,    -1,  1109,  1597,
      -1,   741,    -1,    -1,    -1,    -1,    -1,    -1,   748,    -1,
      -1,   751,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,   265,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      -1,    86,  1994,    -1,   278,    -1,  1147,    -1,   423,    -1,
      -1,  2003,    -1,  2005,   288,    -1,   290,    -1,    -1,   434,
    1161,  1162,  1163,  1164,    -1,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,    -1,  1179,  1180,
      -1,    -1,    -1,  1184,    -1,  1186,  1003,    -1,    -1,    -1,
      -1,    -1,  1193,    -1,    -1,    -1,    -1,    -1,    -1,  1200,
      -1,    -1,  1203,  1204,  1205,    -1,  2058,  2059,  1677,    -1,
    2062,   486,  2064,  1682,    -1,  2067,    -1,    -1,    -1,  2071,
      -1,    -1,  1223,    -1,    -1,    -1,    -1,    -1,    -1,  1230,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       0,    -1,    -1,    -1,    -1,    -1,  1247,  1248,    -1,    -1,
      -1,    -1,  2104,  1254,  1255,    -1,    -1,  1258,  1259,   393,
     394,   395,    -1,    -1,    -1,    -1,    -1,    -1,   874,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1746,    -1,   885,
    2132,    -1,    -1,   417,    -1,    -1,    -1,    -1,    -1,    -1,
     424,    -1,  1585,  1586,    -1,    -1,    -1,    -1,    -1,  1472,
      -1,   435,    -1,    -1,    -1,  1598,    -1,    -1,  1601,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1609,    -1,  1787,    -1,
      -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,
     464,   465,    -1,    93,    -1,   469,    -1,    -1,    -1,   473,
     100,   101,   476,    -1,    -1,    -1,    -1,  1835,    -1,    -1,
      -1,   485,    -1,    -1,    -1,    -1,   490,   491,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   995,   996,   997,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   509,    -1,    -1,   512,   513,
      -1,    -1,   142,   517,   518,    -1,  1203,   521,   522,    -1,
      52,   525,   526,   527,   154,    -1,    -1,    -1,   158,  1400,
    1401,    -1,    -1,    -1,    -1,    -1,  1223,    -1,    -1,   543,
     544,    -1,    -1,  1230,    -1,  1416,    -1,    -1,    -1,  1420,
     695,    83,    84,    -1,    -1,   559,    -1,   561,    -1,    91,
     564,  1900,   566,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   581,    -1,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1462,    -1,    -1,  1465,    -1,    -1,    -1,    -1,   131,
     132,    -1,    -1,  1103,   112,    -1,    28,    -1,    -1,    -1,
      -1,    -1,  1483,    -1,    -1,    37,    38,    -1,  1489,  1490,
      -1,    -1,    -1,  1494,  1495,  1496,  1497,    -1,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1681,    -1,
    1683,    -1,    -1,    -1,    -1,  2003,    -1,  2005,   278,    -1,
      -1,   183,    74,    75,  1697,  1698,    -1,    79,   288,    -1,
     290,    -1,    -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1543,  1544,    -1,    -1,  1839,  1840,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   689,    -1,    -1,   110,   111,
     198,   695,    -1,    -1,  1565,    -1,   118,    -1,   230,   121,
      -1,   233,   124,    -1,   126,   127,    -1,    -1,  1579,  1580,
      -1,    -1,   716,  2071,  1585,  1586,   720,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     0,  1598,    -1,   874,
    1601,    -1,    -1,   265,   738,    -1,    -1,    -1,  1609,    -1,
     885,    -1,    -1,    -1,    -1,    -1,   278,  1247,  1248,    -1,
      -1,    -1,    -1,    -1,  1254,  1255,    -1,    -1,  1258,  1259,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1644,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   300,   423,    -1,    -1,   304,   305,   306,    -1,
      -1,   309,    -1,    -1,   434,    -1,  1677,   315,  1679,    83,
      -1,  1682,    -1,   321,    -1,    -1,    -1,    -1,   326,    93,
      -1,    -1,    -1,    -1,    -1,    -1,   100,   101,    -1,  1700,
      -1,    -1,    -1,    -1,    -1,   343,    -1,    -1,    -1,    -1,
     348,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   859,   486,    -1,  1901,    -1,
      -1,   393,   866,    -1,    -1,    -1,    -1,  1910,    -1,   873,
     874,   875,    -1,    -1,    -1,  1746,    -1,   385,   882,   387,
      -1,   885,    -1,   887,    -1,    -1,    -1,    -1,    -1,    -1,
    1761,  1762,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,    -1,  1778,    -1,  1780,
      -1,   419,  1783,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   926,  1966,  1967,    -1,    -1,    -1,    -1,    -1,
      -1,   935,    -1,  1804,    -1,  1806,   940,    -1,    -1,    -1,
      -1,   473,   946,    -1,    -1,    -1,    -1,   221,    -1,    -1,
      -1,    -1,   956,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,  1462,    -1,    -1,   969,    -1,    -1,  1839,  1840,
      -1,    -1,    -1,    -1,    -1,   979,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   525,   526,   527,    -1,   529,    -1,  1003,
     532,    -1,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,
      -1,   543,   544,   545,   288,    -1,   290,    -1,    -1,    -1,
     528,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,  1900,
      -1,  1902,   564,    -1,  1038,  1039,    -1,    -1,  1042,  1043,
    1044,    85,    -1,    -1,    -1,  1049,  1050,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,  1060,   565,   102,   103,
     104,   105,   106,   107,   108,   695,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,  1579,
    1580,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   597,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1969,  1970,
    1971,  1972,  1973,  1974,    -1,  1976,    -1,    -1,    -1,    -1,
     268,   269,  1983,  1984,  1985,  1986,    -1,   625,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   417,    -1,    -1,    -1,    -1,   141,    -1,
      -1,   144,    -1,    -1,    -1,    -1,    -1,   689,    -1,    -1,
      -1,    -1,    -1,    -1,   157,    -1,   159,    -1,   161,    -1,
     112,    -1,    -1,    -1,    -1,  1179,  1180,    -1,    -1,    -1,
    2051,  2052,    -1,    -1,    -1,    -1,    -1,    -1,   696,    -1,
      -1,    -1,    -1,    -1,   136,   469,  1200,    -1,    -1,  1203,
      -1,  1205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   722,    -1,    -1,    -1,   726,  1223,
      -1,    -1,    -1,    -1,    -1,    -1,  1230,    -1,    -1,    -1,
      -1,    -1,    -1,   741,    -1,   509,    -1,    -1,    -1,    -1,
     748,    -1,    -1,   751,   874,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   885,   198,    -1,    -1,    -1,
      -1,  1761,  1762,   771,    -1,    -1,    -1,    -1,    -1,   777,
     778,   779,   780,   781,   782,   783,    -1,    -1,   786,   787,
      -1,   789,   790,   791,   792,   793,   794,   795,   796,    -1,
     798,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   806,   807,
     808,   809,   810,   811,   812,   813,   814,   815,   816,   817,
     818,   819,   820,   821,   822,   823,   824,    -1,   826,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   857,
     858,    -1,    -1,    -1,    -1,   887,    -1,    -1,   300,    -1,
      -1,    -1,   304,   305,   306,    -1,    -1,   309,    -1,    -1,
      -1,    -1,    -1,   315,    -1,    -1,    -1,   535,    -1,   321,
     538,    -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   926,    -1,    -1,    -1,    -1,    -1,
      -1,   343,    -1,    -1,    -1,    -1,   348,    -1,    -1,  1413,
      -1,   943,    -1,   945,   946,    -1,    -1,   925,    -1,   927,
      -1,   695,    -1,    -1,  1428,    -1,    -1,   701,    -1,    -1,
      -1,  1435,    -1,    -1,    -1,    -1,    -1,    -1,  1442,    -1,
      -1,    -1,    -1,   385,    -1,   387,    -1,    -1,    -1,   957,
      -1,    -1,    -1,   727,    -1,    -1,    -1,    -1,   966,  1463,
      -1,  1465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   464,   465,     1,    -1,     3,    -1,   419,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1489,  1490,   995,    -1,   997,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,    -1,
      28,    -1,    -1,    -1,   662,   663,   664,   665,    -1,    37,
      38,    -1,    -1,    -1,    -1,    -1,    -1,  1049,  1050,   512,
     513,    -1,    -1,    -1,   517,   518,    -1,    -1,   521,   522,
      -1,    -1,    -1,    -1,   692,    -1,    -1,    -1,    -1,  1543,
    1544,    -1,  1546,    -1,    -1,    -1,    74,    75,    -1,   112,
      -1,    79,    -1,    -1,    -1,  1063,    -1,   831,    86,    -1,
      -1,  1565,    -1,    -1,    -1,    -1,   559,    -1,   561,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,   528,    -1,    -1,    -1,
     118,    -1,   866,   121,    -1,  1103,   124,    -1,   126,   127,
      -1,   875,    -1,    -1,    -1,    -1,  1114,    -1,   882,    -1,
      -1,    -1,    -1,    -1,    -1,   889,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   565,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1140,  1141,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1181,
      -1,  1183,    -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   940,  1671,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   956,   625,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1204,    -1,  1206,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1244,    -1,    -1,    -1,
    1248,    -1,    -1,  1251,    -1,    -1,    -1,  1255,    -1,    -1,
      -1,  1259,    -1,    -1,   696,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1778,    -1,  1780,    -1,    -1,  1783,
     722,    -1,    -1,    -1,   726,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   741,
    1804,    -1,  1806,    -1,    -1,    -1,   748,    -1,    -1,   751,
      -1,    -1,  1816,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   771,
      -1,    -1,    -1,    -1,    -1,   777,   778,   779,   780,   781,
     782,   783,    -1,    -1,   786,   787,    -1,   789,   790,   791,
     792,   793,   794,   795,   796,    -1,   798,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   806,   807,   808,   809,   810,   811,
     812,   813,   814,   815,   816,   817,   818,   819,   820,   821,
     822,   823,   824,    -1,   826,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1416,    -1,
    1442,    -1,  1420,   906,   907,   857,   858,    -1,    -1,  1193,
      -1,    -1,    -1,    -1,    -1,    -1,  1200,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1106,    -1,
      -1,  1109,    -1,    -1,  1462,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1472,  1969,  1970,  1971,  1972,  1973,
     141,   534,    -1,   144,    -1,  1483,   969,    -1,    -1,  1983,
    1984,  1985,  1986,   925,    -1,   927,   157,    -1,   159,  1147,
     161,    -1,    -1,  1501,    -1,  1503,    -1,    -1,    -1,    -1,
    1508,    -1,  1510,  1161,  1162,  1163,  1164,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1546,   957,    -1,    -1,    -1,  1527,
      -1,    -1,    -1,    -1,   966,    -1,  1184,    -1,  1186,    -1,
      -1,    -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,  1038,  1039,  2051,  2052,  1042,
    1043,  1044,    -1,   995,    -1,   997,   343,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   630,    28,    -1,
      -1,    -1,  1580,    -1,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   662,
     663,   664,   665,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,  1063,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,   141,    -1,    -1,   144,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,    -1,    -1,   157,   722,
     159,  1103,   161,   726,    -1,    -1,    -1,    -1,    -1,  1677,
      -1,    -1,  1114,  1681,  1682,  1683,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1692,    -1,  1179,  1180,    -1,  1697,
    1698,  1465,    -1,    -1,   757,    -1,  1704,    -1,  1140,  1141,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   771,    -1,
      -1,    -1,    -1,    -1,  1722,  1723,    -1,  1725,  1726,    -1,
      -1,    -1,  1730,  1731,  1732,  1733,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   798,    -1,    -1,  1746,    -1,
     803,    -1,    -1,   806,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1762,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1204,   826,  1206,    -1,    -1,    -1,    -1,    -1,
      -1,   270,    -1,    -1,    -1,  1807,    -1,    -1,    -1,  1787,
      -1,    -1,    -1,    -1,    -1,    -1,  1228,    -1,    -1,    -1,
      -1,  1565,    -1,   464,   465,    -1,    -1,    -1,   141,    -1,
      -1,   144,  1244,    -1,    -1,   476,  1248,    -1,    -1,  1251,
      -1,    -1,    -1,  1255,   157,    -1,   159,  1259,   161,   490,
     491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   512,   513,    -1,    -1,    -1,   517,   518,   635,    -1,
     521,   522,    -1,    -1,    -1,    -1,    -1,    -1,  1866,  1867,
      -1,  1869,  1870,  1871,  1872,  1873,  1874,  1875,  1876,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   464,   465,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   559,    -1,
     561,    -1,  1900,  1901,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1910,   490,   491,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   513,  1585,  1586,    -1,
     517,   518,    -1,    -1,   521,   522,    -1,    -1,    -1,    -1,
    1598,    -1,    -1,  1601,    -1,    -1,    -1,    -1,    -1,    -1,
    1013,  1609,    -1,    -1,  1962,    -1,    -1,    -1,  1966,  1967,
      -1,    -1,    -1,    -1,    -1,   464,   465,    -1,    -1,    -1,
     757,    -1,    -1,    -1,  1416,    -1,    -1,    -1,  1420,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   490,   491,    -1,    -1,    -1,  1489,  1490,    -1,    -1,
      -1,    -1,    -1,   790,   791,   792,   793,   794,    -1,  1783,
     797,    -1,    -1,   512,   513,    -1,   803,    -1,   517,   518,
    1462,    -1,   521,   522,    -1,    -1,    -1,    -1,    -1,   528,
    1472,   818,   819,   820,   821,   822,    -1,    -1,   825,    -1,
      -1,  1483,    -1,  1106,    -1,    -1,  1109,    -1,    -1,    -1,
    1543,  1544,    -1,    -1,    -1,  1118,    -1,    -1,    -1,  1501,
     559,  1503,   561,    -1,    -1,    -1,  1508,    -1,  1510,    -1,
    2078,    -1,    -1,    -1,    -1,    -1,    -1,  1140,  1141,    -1,
      -1,    -1,    -1,    -1,  1147,  1527,  1149,    -1,  2096,    -1,
    1153,    -1,    -1,  1156,    -1,  1158,    -1,    -1,  1161,  1162,
    1163,  1164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   464,   465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   630,    -1,   476,    -1,    -1,    -1,    -1,  1580,  2147,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,   491,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   662,   663,   664,   665,    -1,    -1,   512,
     513,    -1,    -1,    -1,   517,   518,    -1,    -1,   521,   522,
      -1,  1839,  1840,    -1,    -1,    -1,    -1,    -1,  1251,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   559,    -1,   561,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1677,    -1,    -1,    -1,  1681,
    1682,  1683,   741,    -1,    -1,    -1,    -1,    -1,    -1,   748,
    1692,    -1,   751,    -1,    -1,  1697,  1698,    -1,    -1,    -1,
      -1,    -1,  1704,    -1,    -1,    -1,    -1,    -1,   464,   465,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1722,  1723,    -1,  1725,  1726,  1778,    -1,  1780,  1730,  1731,
    1732,  1733,    -1,    -1,   490,   491,    -1,    -1,   969,    -1,
      -1,    -1,    -1,    -1,  1746,    -1,    -1,    -1,    -1,    -1,
      -1,  1804,    -1,  1806,    -1,    -1,   512,   513,    -1,    -1,
    1762,   517,   518,    -1,    -1,   521,   522,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1787,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1149,    -1,    -1,    -1,    -1,  1038,  1039,  1156,
      -1,  1042,  1043,  1044,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1190,    -1,  1192,    -1,   906,   907,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1866,  1867,    -1,  1869,  1870,  1871,
    1872,  1873,  1874,  1875,  1876,    -1,    -1,    -1,    -1,    -1,
    1503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1038,  1039,    -1,    -1,  1042,  1043,    -1,  1900,  1901,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1910,    -1,
     969,  1534,    -1,    -1,    -1,    -1,  1969,  1970,  1971,  1972,
    1973,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1983,  1984,  1985,  1986,    -1,    -1,   995,    -1,   997,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1179,  1180,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1962,    -1,  1585,  1586,  1966,  1967,    -1,    -1,    -1,    -1,
      -1,    -1,  1595,    -1,  1597,  1598,    -1,    -1,  1601,  1038,
    1039,    -1,    -1,  1042,  1043,  1044,  1609,    -1,    -1,  1612,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2051,  2052,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1103,    -1,    -1,  1106,    -1,    -1,
    1109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1118,
      -1,    -1,    -1,    -1,    -1,    -1,   969,    -1,    -1,  1692,
      -1,    -1,    -1,    -1,    -1,    -1,  2078,    -1,    -1,    -1,
      -1,  1704,    -1,    -1,    -1,    -1,    -1,    -1,  1147,    65,
      -1,    -1,    -1,  1716,  2096,    71,    72,    73,  1721,    -1,
      -1,  1724,  1161,  1162,  1163,  1164,    -1,    -1,    84,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1179,  1180,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,  1038,  1039,    -1,    -1,  1042,
    1043,  1044,    -1,    -1,    86,  2147,    -1,   123,   124,    -1,
     126,   127,   128,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,    -1,    -1,    -1,  1788,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1799,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   128,    -1,    -1,  1248,
      -1,    -1,    -1,    -1,   136,    -1,  1255,    -1,    -1,    -1,
    1259,    -1,    -1,    -1,    -1,    -1,  1829,  1830,  1831,  1832,
      -1,    -1,  1835,    -1,   156,    -1,  1839,  1840,    -1,  1842,
      -1,  1844,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,  1856,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1866,  1867,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,  1489,  1490,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1179,  1180,    -1,    -1,
      -1,    -1,  1038,  1039,    -1,    -1,  1042,  1043,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    85,  1543,  1544,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,  1489,  1490,   118,    -1,    -1,   121,   122,   123,
      -1,    -1,   126,    -1,    -1,  1978,    -1,   131,   132,   133,
     134,   135,   136,   137,    -1,    -1,    -1,    -1,    -1,  1716,
      -1,  1994,    -1,    -1,  1721,  1722,  1723,  1724,  1725,  1726,
    2003,    -1,  2005,  1730,  1731,  1732,  1733,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1543,  1544,    -1,    -1,
      -1,    -1,    -1,  1462,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1489,  1490,  2055,    -1,    -1,  2058,  2059,    -1,   380,  2062,
      -1,  2064,    -1,    -1,  2067,    -1,    -1,    -1,  2071,  1508,
      -1,  1510,    -1,    -1,    -1,  2078,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2096,    -1,    -1,    -1,   419,   420,    -1,
      -1,  2104,   424,    -1,  1543,  1544,    -1,    -1,    -1,    -1,
      -1,   433,    -1,    -1,   436,    83,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    92,    93,    -1,    -1,    -1,  2132,
      -1,    -1,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1580,    -1,    -1,  2147,    -1,  1585,  1586,   470,    -1,
     118,    -1,    -1,    -1,   476,    -1,  1595,    -1,  1597,  1598,
      -1,    -1,  1601,    -1,    -1,    -1,    -1,  1778,    -1,  1780,
    1609,    -1,    -1,  1612,   142,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   154,    -1,    -1,    -1,
     158,    -1,    -1,  1804,    -1,  1806,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1489,  1490,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,   187,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   554,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   564,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   221,    -1,    -1,    -1,    -1,    -1,    -1,
    1543,  1544,   584,    -1,    -1,   587,    -1,   589,    -1,   591,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,
     268,   269,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   289,   290,  1762,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1778,
     308,  1780,    -1,    -1,    -1,    -1,   314,    -1,    -1,    -1,
      -1,    -1,    -1,  1489,  1490,   323,    -1,    -1,  1969,  1970,
    1971,  1972,  1973,    -1,    -1,  1804,    -1,  1806,    -1,    -1,
      -1,    -1,  1983,  1984,  1985,  1986,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
    1829,  1830,  1831,  1832,    -1,    -1,  1835,    -1,    -1,    -1,
    1839,  1840,    -1,  1842,    -1,  1844,    -1,  1543,  1544,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1856,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
    2051,  2052,  1969,  1970,    -1,  1972,  1973,    -1,   630,   417,
      -1,    -1,    -1,    -1,    -1,   423,  1983,  1984,  1985,  1986,
      -1,    -1,    -1,    -1,    -1,    -1,   434,    -1,    -1,    83,
      84,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,
      -1,    -1,   664,   665,    -1,    -1,   100,   101,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1778,    -1,  1780,    -1,    -1,
      -1,   469,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   834,   835,   836,    -1,    -1,   131,   486,    -1,
      -1,  1804,    -1,  1806,  2051,  2052,    -1,    -1,    -1,    -1,
    1969,  1970,  1971,  1972,  1973,   857,   858,   859,    -1,    -1,
      -1,   509,    -1,    -1,  1983,  1984,  1985,  1986,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1994,    -1,    -1,    -1,    -1,
     528,    -1,    -1,    -1,  2003,    -1,  2005,   535,   182,    -1,
     538,    -1,    -1,    -1,    -1,    -1,    -1,   326,    -1,    -1,
      -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   343,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   221,    -1,    -1,
     932,    -1,  2051,  2052,    -1,    -1,    -1,    -1,    -1,  2058,
    2059,    -1,    -1,  2062,    -1,  2064,    -1,    -1,  2067,    -1,
      -1,    -1,  2071,    -1,    -1,   957,    -1,    -1,    -1,    -1,
      -1,    -1,   964,   965,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   265,    -1,   975,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   278,  2104,    -1,    -1,    -1,   637,
      -1,    -1,    -1,    -1,   288,    -1,   290,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1969,  1970,  1971,  1972,
    1973,    -1,    -1,  2132,   662,   663,   664,   665,    -1,    -1,
    1983,  1984,  1985,  1986,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   690,   691,   692,    -1,    -1,   695,    -1,    -1,
      -1,    -1,    -1,   701,    -1,    -1,    -1,    -1,    -1,    -1,
    1062,   709,    -1,    -1,    -1,  1067,    -1,    -1,   716,   717,
     718,  1073,   720,   721,    -1,    -1,    -1,  1079,    -1,   727,
      -1,    -1,    -1,  1085,    -1,    -1,    -1,    -1,  2051,  2052,
     738,    -1,    -1,   741,    -1,    -1,    -1,    -1,    -1,    -1,
     748,    -1,    -1,   751,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   417,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   270,  1969,  1970,    -1,  1972,  1973,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1983,  1984,  1985,
    1986,    -1,    -1,    -1,    -1,   469,    -1,    -1,   472,    -1,
      -1,    -1,    -1,   831,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1204,  1205,    -1,   323,   635,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   509,    -1,    -1,   866,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   874,   875,    -1,    -1,
      -1,   525,   526,   527,   882,  2051,  2052,   885,   886,   887,
      -1,   889,    -1,    -1,  1106,    -1,    -1,  1109,    -1,   543,
     544,    -1,    -1,    -1,    -1,    -1,  1118,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     564,    -1,   566,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   132,    -1,   577,    -1,  1147,    -1,    -1,    -1,    -1,
      -1,    -1,   940,    -1,    -1,    -1,    -1,    -1,    -1,  1161,
    1162,  1163,  1164,    -1,    -1,    -1,    -1,    -1,   956,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,   613,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   757,    -1,
      -1,    -1,   183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   771,    -1,    -1,    -1,    -1,   995,   996,   997,
      -1,    -1,    -1,    -1,    -1,  1003,    -1,    -1,    -1,    -1,
      -1,   790,   791,   792,   793,   794,    -1,    -1,   797,   798,
     221,    -1,    -1,    -1,   803,    -1,    -1,   806,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   818,
     819,   820,   821,   822,   688,    -1,   825,   826,  1400,  1401,
      -1,   695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1416,    -1,    -1,    -1,  1420,    -1,
      -1,    -1,   716,    -1,    -1,    -1,   720,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,   738,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1103,    -1,    -1,  1106,    -1,
      -1,  1109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1122,    -1,    -1,    -1,    -1,    -1,
      -1,  1483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1494,  1495,  1496,  1497,    -1,    -1,    -1,  1147,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1161,  1162,  1163,  1164,   635,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   651,    -1,    -1,  1184,    -1,  1186,    -1,
      -1,    -1,   393,    -1,   662,   663,   664,   665,   399,    -1,
      -1,    -1,  1200,    -1,    -1,  1203,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   859,   860,    -1,    -1,    -1,
      -1,    -1,   866,    -1,    -1,  1223,    -1,    -1,    -1,    -1,
     874,   875,  1230,   701,    -1,    -1,   704,    -1,   882,    92,
      -1,   885,   886,   887,    -1,    -1,    -1,    -1,    -1,  1247,
    1248,    -1,    -1,    -1,    -1,    -1,  1254,  1255,    -1,   727,
    1258,  1259,    -1,    -1,   732,    -1,    -1,    -1,   469,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   926,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     934,   759,  1644,    -1,    -1,    -1,   940,    -1,    -1,    -1,
      -1,    -1,   946,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   956,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1677,    -1,  1679,   529,   797,
    1682,   532,    -1,   186,   187,    -1,    -1,   805,    -1,    -1,
      -1,    -1,  1121,    -1,   545,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   825,    -1,  1003,
      -1,    -1,    -1,    -1,    -1,   566,    -1,    -1,   221,    -1,
    1149,    -1,    -1,  1585,  1586,    -1,    -1,  1156,   579,    -1,
      -1,    -1,    -1,  1595,    -1,  1597,  1598,    -1,    -1,  1601,
      -1,    -1,    -1,    -1,  1746,    -1,    -1,  1609,    -1,    -1,
    1612,    -1,    -1,    -1,    -1,  1049,    -1,    -1,    -1,    -1,
      -1,  1190,   265,  1192,  1058,   268,   269,   270,    -1,   887,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,
      -1,   314,    -1,    -1,  1462,    -1,    -1,  1465,    -1,    -1,
     323,    -1,  1251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   689,    -1,
      -1,    -1,    -1,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1900,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1200,    -1,    -1,  1203,
      -1,  1205,    -1,    -1,   417,    -1,    -1,  1565,    -1,  1213,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1223,
      -1,  1579,  1580,    -1,    -1,    -1,  1230,  1585,  1586,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1598,    -1,    -1,  1601,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1609,    -1,    -1,    -1,    -1,   469,  1829,  1830,  1831,
    1832,    -1,  1974,  1835,  1976,    -1,    -1,  1839,  1840,    -1,
    1842,    -1,  1844,    -1,    -1,    -1,    -1,    -1,  1106,    -1,
      -1,  1109,  1110,  1111,  1856,  1113,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1121,    -1,    -1,   509,    -1,    -1,    -1,
      -1,  1129,    -1,    -1,    -1,    -1,    -1,    -1,  1136,    -1,
      -1,    -1,    -1,    -1,   875,   528,    -1,    -1,    -1,  1147,
      -1,   882,   535,    -1,    -1,   538,  1154,    -1,    -1,    -1,
      -1,  1159,    -1,  1161,  1162,  1163,  1164,    -1,    -1,    -1,
      -1,    -1,  1700,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1190,    -1,  1192,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   935,    -1,    -1,    -1,    -1,   940,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   956,  1224,    -1,    -1,    -1,
      -1,    -1,    -1,  1761,  1762,    -1,    -1,    -1,    -1,  1413,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1994,  1427,    -1,  1783,    -1,    92,    -1,    -1,
    1434,  2003,    -1,  2005,    -1,    -1,    -1,    -1,  1442,    -1,
      -1,  1269,  1003,    -1,    -1,    -1,    -1,    -1,    -1,   662,
     663,   664,   665,    -1,    -1,    -1,    -1,    -1,    -1,  1463,
      -1,  1465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,   691,   692,
      -1,  1839,  1840,    -1,    -1,    -1,  2058,  2059,   701,  1050,
    2062,    -1,  2064,  1321,    -1,  2067,   709,    -1,  1059,  2071,
    1061,    -1,    -1,   716,   717,   718,  1334,   720,   721,    -1,
      -1,    -1,    -1,    -1,   727,    -1,    -1,    -1,    -1,    -1,
      -1,   186,   187,    -1,    -1,   738,    -1,    -1,   741,    -1,
      -1,    -1,  2104,    -1,    -1,   748,    -1,    -1,   751,    -1,
      -1,  1545,    -1,    -1,  1902,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   221,  1385,    -1,    -1,
    2132,  1565,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1716,    -1,    -1,
      -1,    -1,  1721,  1722,  1723,  1724,  1725,  1726,    -1,    -1,
      -1,  1730,  1731,  1732,  1733,    -1,    -1,    -1,    -1,    -1,
     265,    -1,    -1,   268,   269,   270,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   831,    -1,
    1181,    -1,  1183,    -1,   289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,    -1,   314,
      -1,    -1,    -1,   866,    -1,    -1,    -1,    -1,   323,    -1,
      -1,    -1,   875,    -1,    -1,    -1,    -1,  1671,    -1,   882,
      -1,    -1,    -1,    -1,   887,    -1,   889,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   940,    -1,    -1,
    1869,  1870,  1871,  1872,  1873,  1874,  1875,  1876,  1742,    -1,
      -1,    -1,    -1,   956,    -1,    -1,    -1,    -1,    -1,   323,
      -1,    -1,   417,    -1,    -1,    -1,    -1,  1585,  1586,    -1,
    1764,    -1,    -1,  1591,    -1,  1593,    -1,    -1,  1596,  1597,
      -1,    -1,    -1,    -1,  1602,  1603,    -1,  1605,    -1,  1783,
      -1,    -1,   995,   996,   997,    -1,    -1,  1615,    -1,  1617,
    1003,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,  1649,    -1,    -1,    -1,  1653,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,   509,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   435,    -1,   528,    -1,    -1,    -1,  1428,    -1,    -1,
     535,    -1,    -1,   538,  1435,    65,    -1,   198,  1882,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
    1103,    -1,    -1,  1106,    84,    85,  1109,    -1,    -1,    -1,
      -1,    -1,  1463,    -1,  1465,    -1,    -1,  1468,    98,    -1,
    1471,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,   122,   123,  1147,    -1,   126,    -1,    -1,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,  1161,  1162,
    1163,  1164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1184,    -1,  1186,    -1,    -1,    -1,    -1,    -1,   300,
      52,    -1,    -1,    -1,    -1,  1546,    -1,  1200,   309,  1817,
    1203,    -1,    -1,  1554,   315,    -1,    -1,   662,   663,   664,
     665,    -1,    -1,    -1,  1565,    -1,    -1,  1835,  1836,    -1,
    1223,    83,    84,    -1,    -1,  1843,    -1,  1230,    -1,  1847,
      -1,  1849,    -1,    -1,    -1,   690,   691,   692,    -1,    -1,
    1858,    -1,    -1,    -1,  1247,  1248,   701,    -1,    -1,    -1,
      -1,  1254,  1255,    -1,   709,  1258,  1259,    -1,    -1,    -1,
      -1,   716,   717,   718,    -1,   720,   721,    -1,    -1,   131,
     132,   635,   727,    -1,   385,    -1,   387,    -1,    -1,    -1,
      -1,    -1,    -1,   738,  1902,    -1,   741,   651,    -1,    -1,
      -1,   655,    -1,   748,    -1,    -1,   751,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   701,    -1,    -1,
     704,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   718,    -1,    -1,    -1,    -1,   221,
      -1,    -1,    -1,   727,    -1,    -1,    -1,    -1,   732,   733,
      -1,    -1,    -1,    -1,    -1,    -1,   831,  1995,  1996,    -1,
    1998,    -1,  2000,    -1,    -1,  2003,  2004,  2005,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   759,    -1,    -1,    -1,  1750,
    1751,    -1,  1753,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   866,    -1,    -1,    -1,    -1,   278,   528,    -1,    -1,
     875,    -1,    -1,    -1,    -1,    -1,   288,   882,    -1,    -1,
      -1,    -1,   887,   797,   889,    -1,    -1,    -1,    -1,    -1,
      -1,   805,  2060,    -1,    -1,  2063,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2071,   565,    -1,  1807,    -1,    -1,  1462,
      -1,   825,  1465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   940,    -1,    -1,    -1,  2107,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   956,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   625,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   887,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,    -1,    -1,    -1,    -1,    -1,   399,    -1,    -1,
     995,   996,   997,    -1,    -1,    -1,    -1,    -1,  1003,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1565,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,  1579,  1580,    -1,    -1,
      -1,    -1,  1585,  1586,    -1,   696,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1598,    -1,    -1,  1601,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1609,   469,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     741,    -1,    -1,    -1,    -1,    -1,    -1,   748,    -1,    -1,
     751,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1103,    -1,
      -1,  1106,    -1,    -1,  1109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   525,   526,   527,    -1,   529,    -1,    -1,
     532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   543,   544,   545,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1147,    -1,    -1,    -1,    -1,  1700,    -1,    -1,
      -1,    -1,   564,    -1,   566,    -1,  1161,  1162,  1163,  1164,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1184,
      -1,  1186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1200,  1110,  1111,  1203,  1113,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1121,  1761,  1762,
    1124,    -1,    -1,    -1,    -1,  1129,    -1,    -1,  1223,    -1,
      -1,    -1,  1136,  1137,    -1,  1230,    -1,    -1,    -1,    -1,
    1783,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1154,  1155,  1247,  1248,    -1,  1159,    -1,    -1,    -1,  1254,
    1255,    -1,    -1,  1258,  1259,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   925,    -1,   927,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1190,   689,  1192,    -1,
      -1,    -1,    -1,   695,    -1,    -1,  1839,  1840,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,   966,    -1,    -1,    -1,    -1,
    1224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   995,    -1,   997,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1902,
      -1,    -1,    -1,    52,    -1,  1269,  1270,    65,    -1,    -1,
      59,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    82,    83,    84,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,  1063,    -1,    -1,    -1,    -1,  1321,    -1,  1323,
     118,    -1,    -1,   121,   122,   123,    -1,    -1,   126,    -1,
    1334,  1335,    -1,   131,   132,   133,   134,   135,   136,   137,
      -1,    -1,   131,   132,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1103,    -1,    -1,    -1,    -1,    -1,    -1,   148,
      -1,    -1,    -1,  1114,    -1,    -1,    -1,  1462,    -1,    -1,
    1465,    -1,    -1,   875,    -1,   164,    -1,    -1,    -1,    -1,
     882,  1385,    -1,  1387,    -1,   887,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   183,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   926,    -1,    -1,    -1,    -1,    -1,
      -1,   220,   221,   935,    -1,    -1,    -1,    -1,   940,    -1,
      -1,    -1,    -1,    -1,   946,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   956,  1206,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1565,    -1,    -1,    -1,    -1,    -1,   265,  1228,    -1,    -1,
      -1,    -1,    -1,    -1,  1579,  1580,    -1,    -1,    -1,   278,
    1585,  1586,    -1,    -1,    -1,    -1,    -1,  1248,    -1,   288,
      -1,  1003,    -1,  1598,  1255,    -1,  1601,    -1,  1259,    -1,
      -1,    -1,    -1,    -1,  1609,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1049,  1050,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1059,    -1,  1061,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1571,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1591,  1592,  1593,
    1594,     1,  1596,  1597,    -1,    -1,    -1,    -1,  1602,  1603,
      -1,  1605,    -1,  1607,   393,  1700,    -1,    -1,    -1,    -1,
     399,  1615,  1616,  1617,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,  1649,   435,  1651,    -1,  1653,
      -1,  1655,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,  1761,  1762,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,  1181,
     469,  1183,    -1,    -1,    -1,    -1,    -1,    -1,  1783,    -1,
     100,    -1,    -1,    -1,    -1,    -1,   485,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
      -1,  1462,    -1,    -1,    -1,    -1,    -1,    -1,   128,    -1,
      -1,  1472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   525,   526,   527,    -1,
     529,    -1,    -1,   532,  1839,  1840,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   543,   544,   545,  1508,    -1,  1510,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   562,    -1,   564,  1527,   566,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     579,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1902,    -1,    -1,
      -1,    -1,    -1,  1817,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1580,
      -1,    -1,  1836,    -1,    -1,    -1,    -1,  1841,    -1,  1843,
    1844,    -1,  1846,  1847,    -1,  1849,    -1,  1851,    -1,    92,
      -1,    -1,    -1,  1857,  1858,    -1,    -1,    -1,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   681,    -1,    -1,    -1,    -1,    -1,  1902,   142,
     689,    -1,    -1,    -1,    -1,    -1,   695,    -1,   142,    -1,
      -1,   154,    -1,    -1,    -1,   158,    -1,    -1,    -1,    -1,
     154,    -1,    -1,    -1,   158,    -1,  1428,    -1,    -1,    -1,
    1681,    -1,  1683,  1435,    -1,    -1,    -1,    -1,    -1,    -1,
    1442,    -1,    -1,   186,   187,    -1,  1697,  1698,    -1,    -1,
      -1,    -1,   186,   187,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1463,    -1,  1465,    -1,    -1,  1468,    -1,    -1,  1471,
      -1,  1722,  1723,    -1,  1725,  1726,    -1,    -1,    -1,  1730,
    1731,  1732,  1733,    -1,    -1,    -1,    -1,   221,    -1,    -1,
      -1,  1995,  1996,    -1,  1998,  1999,  2000,    -1,    -1,    -1,
    2004,  2005,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1762,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   265,    -1,    -1,   268,   269,   270,    -1,    -1,
      -1,   265,    -1,    -1,   268,   269,   270,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1546,    -1,   289,    -1,    -1,    -1,
      -1,    -1,  1554,    -1,    -1,   289,  2060,  2061,    -1,  2063,
    2064,    -1,    -1,  1565,  2068,   308,    -1,    -1,    -1,    -1,
      -1,   314,    -1,    -1,   308,    -1,    -1,    -1,    -1,    -1,
     314,    -1,    -1,    -1,   873,    -1,   875,    -1,    -1,    -1,
      -1,    -1,    -1,   882,    -1,    -1,    -1,    -1,   887,    -1,
      -1,    -1,    -1,  2107,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1869,  1870,
    1871,  1872,  1873,  1874,  1875,  1876,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   926,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   935,    -1,    -1,    -1,
    1901,   940,    -1,    -1,    -1,    -1,    -1,   946,    -1,  1910,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   956,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     423,    -1,    -1,   417,    -1,    -1,    -1,    -1,    -1,   423,
      -1,   434,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     434,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1962,    -1,    -1,  1003,  1966,  1967,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,  1750,  1751,
      -1,  1753,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1049,  1050,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1059,    -1,  1061,    -1,    -1,   509,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,   528,    -1,    -1,    -1,    -1,
      -1,    -1,   535,    -1,   528,   538,    -1,    -1,    -1,    -1,
      -1,   535,    -1,    28,   538,  1807,    -1,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    92,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,  1181,   118,  1183,    -1,   121,   122,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,    -1,    -1,    -1,    -1,    -1,    -1,   662,
     663,   664,   665,    -1,   142,    -1,    -1,    -1,   662,   663,
     664,   665,    -1,    -1,    -1,    -1,   154,    -1,    -1,    -1,
     158,    -1,    -1,    -1,    -1,    -1,    -1,   690,   691,   692,
      -1,    -1,    -1,    -1,    -1,    -1,   690,   691,   692,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   709,    -1,   186,   187,
      -1,    -1,    -1,   716,   717,   709,    -1,   720,   721,    -1,
      -1,    -1,   716,   717,    -1,    -1,   720,   721,    -1,    -1,
      -1,    -1,     1,    -1,     3,    -1,    -1,    -1,   741,    -1,
      -1,    -1,    -1,    -1,    -1,   748,    -1,   741,   751,    -1,
      -1,    -1,    -1,    -1,   748,    -1,    -1,   751,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,
     268,   269,   270,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,   289,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     308,   100,    -1,    -1,    -1,    -1,   314,   831,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,   122,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   874,   866,    -1,    -1,    -1,    -1,    -1,    -1,  1428,
     874,   875,   885,    -1,    -1,    -1,  1435,    -1,   882,    -1,
      -1,   885,    -1,  1442,    -1,   889,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1463,    -1,  1465,    -1,    -1,  1468,
      -1,    -1,  1471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   423,   940,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   434,    -1,    -1,    -1,
      -1,     1,   956,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,   995,   996,   997,    -1,    -1,  1546,    -1,    -1,
    1003,   995,   996,   997,    -1,  1554,    -1,    -1,   486,  1003,
      -1,    -1,    -1,    -1,    -1,    -1,  1565,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    85,    -1,    -1,    -1,    -1,
     528,    -1,    -1,    -1,    -1,    -1,    -1,   535,    98,    -1,
     538,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,   122,   123,    -1,    -1,   126,    -1,    -1,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,    -1,    -1,
    1103,    -1,    -1,  1106,    -1,    -1,  1109,    -1,    -1,  1103,
      -1,    -1,  1106,    -1,    -1,  1109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1147,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1147,    -1,    -1,    -1,    -1,  1161,  1162,
    1163,  1164,    -1,    -1,    -1,    -1,    -1,  1161,  1162,  1163,
    1164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1184,    -1,  1186,   662,   663,   664,   665,    -1,    -1,
    1184,    -1,  1186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1203,  1750,  1751,    -1,  1753,    -1,    -1,    -1,    -1,  1203,
      -1,    -1,   690,   691,   692,    -1,    -1,    -1,    -1,    -1,
    1223,    -1,    -1,    -1,    -1,    -1,    -1,  1230,    -1,  1223,
      -1,   709,    -1,    -1,    -1,    -1,  1230,    -1,   716,   717,
      -1,    -1,   720,   721,  1247,  1248,    -1,    -1,    -1,    -1,
      -1,  1254,  1255,  1247,  1248,  1258,  1259,    -1,  1807,    -1,
    1254,  1255,    -1,   741,  1258,  1259,    -1,    -1,    -1,    -1,
     748,    -1,    -1,   751,    -1,     1,    -1,    -1,    -1,    -1,
      -1,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   874,    -1,   124,   125,
     126,   127,    -1,   129,    -1,    -1,   132,   885,   134,   135,
     136,    -1,   138,   139,   140,   141,   142,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    -1,    -1,    -1,    -1,    -1,  1462,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1462,    -1,
      -1,  1465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   995,   996,   997,
      -1,    -1,    98,    -1,    -1,  1003,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,   119,   120,   121,   122,   123,   124,   125,
     126,    -1,    -1,   129,    -1,   131,   132,    -1,   134,   135,
     136,   137,   138,   139,   140,   141,   142,    -1,    -1,    -1,
      -1,  1565,    -1,    -1,    -1,    -1,  1579,  1580,    -1,    -1,
      -1,    -1,  1585,  1586,    -1,  1579,  1580,    -1,    -1,    -1,
      -1,  1585,  1586,    -1,    -1,  1598,    -1,    -1,  1601,    -1,
      -1,    -1,    -1,    -1,  1598,    -1,  1609,  1601,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1609,    -1,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1103,    -1,    -1,  1106,    -1,
      -1,  1109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,  1147,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,  1161,  1162,  1163,  1164,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,  1184,    -1,  1186,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1203,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
     124,    -1,   126,   127,    -1,  1223,     1,    -1,     3,     4,
       5,     6,  1230,     8,     9,    -1,    -1,    -1,  1761,  1762,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1761,  1762,  1247,
    1248,    -1,    -1,    28,    -1,    -1,  1254,  1255,    -1,    -1,
    1258,  1259,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1783,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    -1,    88,    89,    90,  1839,  1840,    -1,    -1,
      -1,    -1,    -1,    98,    -1,  1839,  1840,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,   124,
      -1,   126,    -1,   128,    -1,   130,   131,   132,    -1,   134,
     135,   136,   137,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,  1462,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,  1579,  1580,    -1,    -1,    -1,    -1,  1585,  1586,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,    -1,
    1598,    -1,    -1,  1601,    -1,    -1,    -1,   128,    -1,     0,
       1,  1609,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1761,  1762,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,  1839,  1840,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,    -1,   134,
     135,   136,   137,   138,   139,   140,   141,   142,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,    -1,    -1,   129,    -1,   131,   132,
      -1,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
     122,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,   122,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,   122,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,   122,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,   122,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
     122,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,   122,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,   122,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,   122,   123,   124,    -1,
     126,   127,   128,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,
      89,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,   123,   124,    -1,    -1,    -1,   128,
      -1,   130,   131,   132,    -1,   134,   135,   136,   137,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    88,    89,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,    -1,    -1,   128,    -1,   130,   131,
     132,    -1,   134,   135,   136,   137,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,   126,   127,   128,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,   126,   127,   128,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,   128,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,
     127,   128,    -1,    -1,   131,   132,    -1,   134,   135,   136,
     137,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,   127,   128,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
     123,   124,    -1,   126,   127,   128,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,   127,   128,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,   128,
      -1,    -1,   131,   132,    -1,   134,   135,   136,   137,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,   127,   128,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,   126,   127,   128,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,   127,
     128,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,   126,   127,   128,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,     1,   123,
       3,     4,     5,     6,    -1,     8,     9,   131,   132,    -1,
     134,   135,   136,   137,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,     1,
     123,     3,     4,     5,     6,    -1,     8,     9,   131,   132,
      -1,   134,   135,   136,   137,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,    -1,   118,    -1,    -1,   121,
     122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,    -1,   118,    -1,    -1,   121,     1,   123,     3,
       4,     5,     6,   128,     8,     9,   131,   132,    -1,   134,
     135,   136,   137,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    28,    -1,   118,    -1,    -1,   121,   122,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,    -1,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    -1,    88,    89,    90,    -1,     1,    -1,     3,     4,
       5,     6,    98,     8,     9,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    28,    -1,   121,   122,   123,   124,    -1,
     126,    -1,   128,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,    -1,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    -1,    88,    89,    90,    -1,     1,    -1,     3,
       4,     5,     6,    98,     8,     9,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    28,    -1,   121,    -1,   123,   124,
      -1,    -1,    -1,   128,    -1,   130,   131,   132,    -1,   134,
     135,   136,   137,    -1,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    -1,    88,    89,    90,    -1,     1,    -1,
       3,     4,     5,     6,    98,     8,     9,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    28,    -1,   121,    -1,   123,
     124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,    -1,
     134,   135,   136,   137,    -1,    -1,    -1,    -1,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    -1,    88,    89,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,     1,
      -1,     3,     4,     5,     6,   118,     8,     9,   121,    -1,
     123,   124,    -1,    -1,    -1,   128,    -1,   130,   131,   132,
      -1,   134,   135,   136,   137,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      28,    -1,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    65,    -1,   121,
     122,   123,    -1,    71,    72,    73,    -1,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,    84,    85,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,   122,   123,   124,    -1,   126,    -1,
      -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,
     123,   124,    -1,   126,    -1,    -1,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,   122,   123,    -1,    -1,   126,    -1,    -1,    -1,
     130,   131,   132,    -1,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,   122,   123,    -1,    -1,   126,
      -1,    -1,    -1,   130,   131,   132,    -1,   134,   135,   136,
     137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,
     124,    -1,   126,    -1,    -1,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,   122,   123,   124,    -1,   126,    -1,    -1,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,    -1,   123,    -1,    -1,   126,   127,
     128,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,   124,
      -1,   126,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
     122,   123,   124,    -1,   126,    -1,    -1,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,
     123,    -1,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,   122,   123,    -1,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,    -1,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,    -1,   134,   135,   136,
     137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,
      -1,    -1,   126,    -1,    -1,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,
      -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,    -1,
      -1,   126,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
      -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,
     132,   133,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,    -1,   123,    -1,    -1,   126,    -1,    -1,
      -1,   130,   131,   132,    -1,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,
     126,    -1,    -1,    -1,    -1,   131,   132,   133,   134,   135,
     136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,
     123,    -1,    -1,   126,    -1,    -1,    -1,   130,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,   122,   123,    -1,    -1,   126,    -1,    -1,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,   122,   123,    -1,    -1,   126,
      -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,
     137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,
      -1,    -1,   126,    -1,    -1,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,   122,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
      -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,    -1,   123,   124,
      -1,   126,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,    -1,   123,    -1,    -1,   126,    -1,    -1,
      -1,   130,   131,   132,    -1,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,
     126,    -1,    -1,    -1,   130,   131,   132,    -1,   134,   135,
     136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,
     123,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,   122,   123,    -1,    -1,   126,    -1,    -1,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,   122,   123,    -1,    -1,   126,
      -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,
     137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,   122,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,   127,
     128,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,    -1,
      -1,   126,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
     122,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,   122,   123,    -1,    -1,   126,    -1,    -1,
      -1,    -1,   131,   132,    -1,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   131,   132,   133,   134,   135,
     136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   131,   132,   133,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   131,   132,   133,   134,   135,   136,
     137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,   123,
      -1,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     131,   132,   133,   134,   135,   136,   137,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,    -1,
      -1,    -1,   130,   131,   132,    -1,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,   122,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
      -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,   133,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,   122,   123,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,    -1,   134,   135,   136,
     137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,   123,
      -1,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,    -1,
     134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,
     121,    -1,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,    -1,   134,   135,   136,   137,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,    -1,   121,   122,   123,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,   137,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,    -1,   123,    -1,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,    -1,   134,
     135,   136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
     122,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,
     132,    -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,   122,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,   132,    -1,   134,   135,   136,   137,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,
     136,   137,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,    -1,
     123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,
      -1,   134,   135,   136,   137,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   131,   132,    -1,   134,   135,   136,   137,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,     0,     1,    -1,     3,     4,     5,    -1,
      -1,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   131,   132,    -1,   134,   135,   136,
     137,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,   122,   123,   124,    -1,   126,
     127,    -1,    -1,    -1,   131,   132,     0,     1,    -1,     3,
       4,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,   127,    -1,    -1,    -1,   131,   132,     0,
       1,    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,     0,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,     0,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,     0,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,    -1,     1,   127,     3,     4,     5,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,   124,    -1,
       1,   127,     3,     4,     5,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,   123,   124,     1,    -1,     3,     4,     5,    -1,
     131,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,   123,   124,     1,    -1,
       3,     4,     5,    -1,   131,   132,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,     1,   121,     3,
     123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,   121,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
       3,    -1,   121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   132,    -1,   134,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,    -1,    -1,    -1,    -1,    -1,
     128,    -1,    -1,    -1,   132,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,    -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,   132,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   132,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   132,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   132,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,   110,   111,   112,   113,
     114,   115,    -1,    -1,   118,    -1,    -1,   121,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    76,    77,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,   105,     3,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    68,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    78,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,   123,    -1,    -1,
      -1,    -1,    -1,    -1,   130,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
      -1,   121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     127,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     127,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     127,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     127,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,     0,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     127,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      76,    77,    -1,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,   101,     3,    -1,    -1,   105,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,     3,    -1,    -1,    -1,
     107,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     127,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,     3,    -1,    -1,    -1,
     107,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     127,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,     1,    -1,     3,    -1,    -1,    -1,
     107,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     127,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,   100,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    -1,    -1,   124,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,   100,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    -1,    -1,   124,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,   100,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    -1,    -1,   124,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    -1,
      -1,   124,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    76,    77,    -1,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,   101,    -1,     0,     1,
     105,     3,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,   121,    -1,    -1,   124,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,   121,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,    -1,   121,   122,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,   122,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,    -1,    -1,   122,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,   122,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,    -1,    -1,   122,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,   122,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,    -1,    -1,   122,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,   121,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,    -1,   121,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,    -1,   121,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,    -1,   121,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,    -1,   121,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
     121,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
     107,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,    -1,   121,   122,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   132,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   127,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    53,    65,    66,    74,    75,
      76,    77,    79,    80,    81,    82,    83,    85,    86,    87,
     100,   101,   105,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   121,   124,   144,   145,   146,   148,   173,   210,
     211,   212,   213,   214,   215,   267,   270,   271,   274,   275,
     276,   277,   278,   279,   280,   282,   286,   289,   290,   291,
     292,   293,   294,   299,   300,   309,   310,   311,   318,   319,
     323,   326,   331,   360,   363,   364,   382,   383,   385,   386,
     387,   388,   389,   390,    77,   130,     5,    31,   215,   384,
     215,   121,   121,   121,   148,   215,   384,   280,   281,   318,
     326,    37,   146,   215,   308,   309,   311,   313,   314,   315,
     317,   318,   326,   329,   330,   335,   119,   124,   145,   146,
     215,   128,   130,   124,   128,   127,   118,   119,   210,   215,
     128,   148,   215,   128,   130,   127,   119,   128,   130,   128,
     127,   128,   146,   215,   318,     1,    31,    37,    38,   124,
     144,   146,   212,   214,   215,   267,   277,   278,   280,   282,
     311,   315,   318,   326,   329,   330,   331,   333,   341,   342,
     343,   344,    37,    38,   146,   318,   343,   121,   132,     1,
      29,    30,    31,    32,    33,    65,   116,   117,   122,   144,
     215,   266,   270,   272,   273,   280,   282,   286,   287,   288,
     294,   298,   306,   307,   347,   348,   349,   350,   351,   352,
     326,   121,   311,   318,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    46,    47,    66,    85,    87,   100,
     112,   113,   114,   115,   128,   148,   169,   170,   266,   271,
     272,   280,   283,   287,   289,   297,   362,   365,   366,   367,
     372,   373,   374,    31,    76,   130,   212,   214,   299,   363,
     364,   382,   383,   390,     1,   212,   276,   293,   299,   331,
     360,   386,     1,   385,   386,     0,   215,   384,   384,     5,
     125,   384,     1,     4,     6,     8,     9,    65,    71,    72,
      73,    84,    85,    98,   102,   103,   104,   105,   106,   107,
     108,   109,   118,   121,   123,   131,   132,   134,   135,   136,
     137,   148,   174,   175,   215,   216,   217,   218,   219,   222,
     223,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   384,   396,   397,   398,   399,   145,   215,
     128,   148,   215,   280,   326,   132,   121,   132,   122,   306,
     307,   351,   352,   326,   329,   330,   308,   313,   317,   318,
     122,   318,   122,   318,   318,    85,   148,   200,   202,   204,
     208,   209,   215,   227,   232,   248,   252,   298,   124,   119,
     119,   124,     1,    68,    78,    80,    81,    88,    91,    92,
      93,    94,    96,    98,    99,   121,   123,   124,   127,   149,
     150,   151,   152,   153,   154,   155,   156,   171,   172,   174,
     175,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   191,   195,   196,   197,   198,   215,   223,   246,   298,
     310,   312,   318,   326,   331,   332,   361,    80,    81,   215,
     266,   270,   280,   283,   286,   294,   301,   302,     1,   127,
     197,   198,   146,   215,     1,   215,   268,   269,     1,   127,
     269,   302,    65,   201,   203,   205,   206,   207,   215,   298,
       1,   127,   197,   198,   302,     1,   127,   197,   198,     1,
     127,   197,   198,   146,   215,   126,   126,   126,   128,   326,
     311,   315,   318,     1,   125,   366,   373,   374,   366,   373,
     374,     1,   124,   126,   126,   326,   124,   133,   145,   215,
     241,   260,   264,   265,   126,   128,   148,   215,   127,   128,
     127,   128,   318,    37,   121,   132,   134,   144,   146,   215,
     266,   272,   280,   282,   287,   308,   309,   318,   324,   326,
     327,   330,     1,   122,   126,     1,   122,   126,     1,   126,
       1,   126,   122,   122,   311,   121,   311,   121,   121,     1,
     124,     1,   127,     1,    37,    38,   124,   215,   266,   272,
     280,   283,   287,   318,   343,   344,     1,   124,     1,   362,
     365,   373,   374,   362,   365,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    85,    86,    88,    89,
      90,   124,   130,   148,   192,   193,   194,   215,   223,   227,
     242,   244,   248,   260,   261,   262,   323,   353,   354,   357,
     358,   359,   366,   367,   368,   369,   370,   371,   373,   374,
     376,   377,   378,   379,   380,   381,   127,    31,   215,   384,
     215,   210,   211,   213,   214,   308,   309,   315,   318,   326,
     331,   333,   366,   374,   212,   299,   125,   240,   241,   259,
     122,   121,   227,   248,   121,   227,   248,   227,   248,   121,
     215,   266,   272,   280,   283,   287,   305,   264,   121,   121,
     305,   264,   121,   121,   121,   121,   121,   121,   227,   248,
     122,   242,   244,   262,   272,   280,   282,   287,   295,   345,
     384,   128,   133,   176,   177,   220,   224,   242,   128,     1,
     127,   128,   215,     1,     7,     8,     9,   121,   129,   132,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
     125,   243,   177,   220,   221,   229,   249,   118,   138,   139,
     135,   136,    10,    11,   232,   252,    12,    13,   119,   120,
      14,    15,   134,   140,   141,    16,    17,   142,   243,   122,
       7,     8,     9,   121,   129,   132,   243,   118,   138,   139,
     135,   136,    10,    11,    12,    13,   119,   120,    14,    15,
     134,   140,   141,    16,    17,   142,   243,   122,   122,   107,
     215,   298,   391,   394,   395,   128,   128,   133,   145,   264,
     265,   133,   145,   264,   265,   122,   122,   122,   122,   308,
     313,   317,   122,   122,   308,    11,   120,   126,   125,   121,
     318,   326,   327,    65,   207,   215,   298,   207,     1,   215,
     266,   280,   283,   294,   303,   298,   331,   332,   121,   148,
     215,   215,   298,     1,   121,   303,   118,   121,   215,   298,
     124,   323,   373,   374,   373,   374,   373,   124,   373,   374,
     124,     1,   127,     1,     1,   124,   126,   126,    69,    70,
      91,    95,    97,   127,    69,    70,   127,   124,     1,   195,
     196,     1,   195,   196,     1,   125,   121,   130,   215,   284,
     285,   308,   314,   316,   318,   326,   333,   334,   335,     1,
     298,   306,   349,   326,   312,   318,   121,   130,   155,   156,
     171,   172,   174,   175,   184,   215,   298,   119,   148,   215,
     215,   266,   280,   283,   119,   119,   125,   126,     1,   124,
     128,    28,   147,   215,   120,   126,   125,   215,   327,   329,
     341,   341,   341,   124,   126,   127,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   220,   221,
     223,   241,   260,   297,   338,   339,   308,   311,   313,   315,
     317,   308,   315,   128,   242,   261,   336,   337,   373,   374,
     373,   374,   341,   342,   341,   342,   133,   133,   133,    51,
     347,   348,     1,   269,   128,   128,     1,   127,   197,   198,
       1,   127,   197,   198,   128,   122,   215,   306,   307,   318,
     326,   327,   351,   352,   133,   145,   264,   265,   318,   326,
     330,   326,   121,   132,   324,     1,     1,   126,     1,    51,
     215,   347,   348,   126,     1,    51,   215,   347,   348,   126,
       1,    51,   215,   347,   348,   126,    51,   215,   347,   348,
       3,    28,    44,    74,    75,   122,   320,   321,   322,   242,
     145,   215,   127,   128,   124,   124,   130,   264,   265,   130,
     121,   121,     1,   121,    52,    53,    54,    56,    57,    58,
      59,    62,    86,   215,   262,   323,   353,   376,   380,   121,
     215,   124,   124,   124,   220,   221,   244,   262,   121,   280,
     121,   121,   188,   215,   124,   124,   124,   130,   129,   243,
       1,   129,   124,   126,   244,   262,   243,   122,   126,   244,
       1,   368,   369,   368,   369,   353,   354,   362,   365,   353,
     354,   362,   365,     1,     1,   384,   384,   146,   215,   128,
     128,   326,   315,   318,   366,   374,   366,   374,   374,   241,
     142,   124,   142,    65,   144,   215,   272,   280,   282,   287,
     296,   346,   215,   297,   119,   121,   132,   215,   266,   272,
     280,   283,   287,   318,   325,   326,   328,   215,   266,   272,
     280,   283,   287,   304,   244,   345,   373,   215,   132,   328,
     304,   242,   384,   384,   384,   242,   346,   122,   215,   272,
     280,   282,   287,   327,   122,   129,     1,   167,   168,     1,
     127,   126,   133,     1,   167,   168,   127,     1,   167,   168,
       1,   215,   122,   221,   224,   225,   261,     1,   215,   244,
     262,   220,   242,     1,   229,   249,   229,   249,   229,   249,
     230,   250,   230,   250,   231,   251,   231,   251,   232,   252,
     232,   252,   232,   252,   220,   221,   234,   253,   220,   221,
     234,   253,   220,   221,   235,   254,   220,   221,   236,   255,
     220,   221,   237,   256,   238,   257,   239,   258,   130,   220,
     221,   244,   245,   262,   263,   220,   242,     1,   215,   122,
     224,   225,     1,   215,   244,   262,   220,   242,   229,   249,
     229,   249,   229,   249,   230,   250,   230,   250,   231,   251,
     231,   251,   232,   252,   232,   252,   232,   252,   232,   252,
     220,   221,   234,   253,   220,   221,   234,   253,   220,   221,
     235,   254,   220,   221,   236,   255,   220,   221,   237,   256,
     238,   257,   239,   258,   130,   244,   245,   262,   263,   220,
     242,   119,   120,   215,   392,   393,   215,   127,   391,   394,
     395,   395,   133,   133,   133,   133,   133,   133,   208,   200,
     202,   204,   215,   318,   326,   120,   125,   327,   120,   128,
     119,   128,   215,   266,   280,   283,   327,   318,   326,   333,
     334,   188,   285,   308,   318,   326,   128,   215,   128,   215,
     327,   215,   318,   121,   124,   127,   178,   179,   178,   179,
     373,   373,   373,   217,   373,   373,     1,   338,   339,   122,
     264,   265,   128,   126,     1,   298,   306,   349,   326,   308,
     316,   318,   130,   323,   215,   121,   312,   312,   215,     1,
       1,   285,   209,   119,   207,   207,   264,   265,   268,   197,
     198,     1,   127,   269,   125,   130,   125,   130,   206,   202,
     215,   125,   215,   125,   373,   374,     1,   124,   126,   124,
     126,   124,   159,   160,   163,   164,   165,   127,   157,   160,
     124,   127,   159,   160,   163,   164,   165,   125,    37,   333,
     334,   335,   336,   337,   340,     1,   127,   269,     1,   127,
     269,     1,   127,   197,   198,   318,   326,   327,   122,   122,
     122,   133,   133,   133,   326,   324,   122,   351,   352,   133,
     145,   264,   265,   347,   348,   298,   347,   347,   347,   348,
     122,   121,   122,   126,   321,   122,   122,   122,     1,   167,
     168,   353,   354,   362,   365,   130,   130,   353,   354,   362,
     365,   244,   262,   244,   262,   122,   244,   262,   130,   264,
     265,   130,   121,   121,   353,   121,   221,   262,   121,   130,
      56,     1,   122,   124,   215,   244,   262,   375,   124,   124,
     124,   124,   124,   384,   121,   242,   242,   215,   353,   354,
     362,   365,    90,   221,   261,    88,    89,    90,   242,   261,
     221,   261,   242,   261,   119,   315,   374,   374,   124,   244,
     245,   262,   263,   244,   245,   262,   263,   144,   145,   144,
     272,   280,   282,   287,   327,   122,   122,   122,   327,   209,
     122,   318,   328,   351,   352,   264,   265,   119,   326,   121,
     325,   132,   119,   132,   215,   266,   272,   280,   283,   287,
     328,   122,   122,   122,   122,   264,   265,   132,   132,   328,
     126,   122,   126,   126,   126,   122,   229,   249,   384,     1,
     127,   220,   242,     1,     1,   122,   126,   122,   133,   133,
       1,   126,   130,   130,   126,   130,   130,   122,   133,   133,
     130,   130,   130,   130,   215,   215,   124,   126,   215,   384,
     127,   127,   318,   326,   202,   209,   119,   128,   128,   215,
     326,   318,   122,   326,   308,   122,   128,   128,   215,   122,
       1,   167,   168,   284,   318,   215,   121,   308,   316,   316,
     264,   265,   121,   122,   120,   209,   120,   120,   124,     1,
     124,   200,   199,   298,   200,   199,   204,   125,   128,     1,
     161,   162,     1,   161,   162,   374,     1,   338,   339,   126,
     127,   336,   337,     1,   124,     1,   124,   326,   324,   122,
     122,   122,   133,   133,   133,   327,   330,   244,   122,   321,
       1,   353,   354,   362,   365,   353,   354,   362,   365,   122,
     122,   122,   122,     1,   353,   122,   244,   353,   354,   130,
     130,   262,   122,   244,   262,    56,   262,   375,   384,   121,
     353,   130,   124,     1,   124,     1,   122,   262,   375,     3,
     122,   130,   384,   122,   122,   126,   121,   121,   188,   130,
     130,   130,   130,   130,   130,   130,   130,   122,   122,     1,
     122,   120,   318,   326,   328,   122,   122,   122,   133,   133,
     209,   325,   122,   351,   352,   264,   265,   209,   264,   265,
     119,   132,   121,   336,   133,   133,   264,   265,   264,   265,
     132,   345,   215,   215,   242,     1,   221,   261,   220,   221,
     220,   221,   241,   259,   220,   221,   241,   259,   220,   221,
     220,   221,   241,   259,   220,   221,   241,   259,   220,   221,
     241,   259,   220,   221,   241,   259,   220,   221,   241,   259,
     220,   221,   241,   259,   392,   124,   124,   120,   209,   128,
     373,   308,   125,   128,     1,   121,   130,   130,   120,   197,
     198,   124,   197,   198,   125,   327,   125,   204,   340,   127,
     336,   337,     1,   197,   198,   197,   198,   122,   353,   353,
     353,   353,   353,   354,   122,   121,   375,   122,   244,   262,
     244,   353,     1,   122,   244,   262,   132,   355,   356,   384,
     124,   356,     3,   122,   130,   128,   188,   242,   242,     1,
       1,   325,   122,   120,   122,   122,   133,   133,   120,   133,
     133,   209,   264,   265,   345,   133,   133,   133,   133,   264,
     265,   122,   122,   122,   122,   120,   338,   264,   265,   264,
     265,   197,   198,   200,   200,   126,   127,     1,    64,    64,
     244,   262,   122,   244,   262,   122,   124,   122,   124,   353,
     354,   122,   353,   354,   215,   122,   126,   130,   121,     3,
     122,   130,   356,   124,   356,    73,   188,   189,   190,   122,
     122,   122,   126,   120,   133,   133,   122,   133,   133,   124,
     127,   353,   353,   122,   122,   124,   353,   244,   353,   354,
     133,   124,   355,   356,   242,   356,   124,   356,   122,   130,
       3,   122,   130,   373,   373,   127,   189,   128,   188,   229,
     249,   336,   122,   384,   122,   122,   122,   122,   130,   124,
     356,   356,   124,   356,   190,   122,   353,   121,   124,   124,
     124,   356,   122,   122,   122,   130,   127,   242,   122,   124,
     124,   124,   356,   122,   124,   122,   124
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 144: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10975 "grammar.ec"
	break;
      case 145: /* "type" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10984 "grammar.ec"
	break;
      case 146: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10993 "grammar.ec"
	break;
      case 147: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 11002 "grammar.ec"
	break;
      case 148: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11011 "grammar.ec"
	break;
      case 149: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11020 "grammar.ec"
	break;
      case 150: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11029 "grammar.ec"
	break;
      case 151: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11038 "grammar.ec"
	break;
      case 152: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11047 "grammar.ec"
	break;
      case 153: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11056 "grammar.ec"
	break;
      case 154: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11065 "grammar.ec"
	break;
      case 155: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11074 "grammar.ec"
	break;
      case 156: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11083 "grammar.ec"
	break;
      case 157: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11092 "grammar.ec"
	break;
      case 158: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11101 "grammar.ec"
	break;
      case 159: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11110 "grammar.ec"
	break;
      case 160: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11119 "grammar.ec"
	break;
      case 161: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11128 "grammar.ec"
	break;
      case 162: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11137 "grammar.ec"
	break;
      case 163: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11146 "grammar.ec"
	break;
      case 164: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11155 "grammar.ec"
	break;
      case 165: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11164 "grammar.ec"
	break;
      case 166: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11173 "grammar.ec"
	break;
      case 167: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11182 "grammar.ec"
	break;
      case 168: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11191 "grammar.ec"
	break;
      case 169: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11200 "grammar.ec"
	break;
      case 170: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11209 "grammar.ec"
	break;
      case 174: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11218 "grammar.ec"
	break;
      case 175: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11227 "grammar.ec"
	break;
      case 178: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11236 "grammar.ec"
	break;
      case 179: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11245 "grammar.ec"
	break;
      case 180: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11254 "grammar.ec"
	break;
      case 181: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11263 "grammar.ec"
	break;
      case 184: /* "property" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 11272 "grammar.ec"
	break;
      case 195: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11281 "grammar.ec"
	break;
      case 196: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11290 "grammar.ec"
	break;
      case 197: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11299 "grammar.ec"
	break;
      case 198: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11308 "grammar.ec"
	break;
      case 199: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 11317 "grammar.ec"
	break;
      case 200: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11326 "grammar.ec"
	break;
      case 201: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11335 "grammar.ec"
	break;
      case 202: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11344 "grammar.ec"
	break;
      case 203: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11353 "grammar.ec"
	break;
      case 204: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11362 "grammar.ec"
	break;
      case 205: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11371 "grammar.ec"
	break;
      case 206: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11380 "grammar.ec"
	break;
      case 207: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 11389 "grammar.ec"
	break;
      case 208: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11398 "grammar.ec"
	break;
      case 209: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 11407 "grammar.ec"
	break;
      case 210: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11416 "grammar.ec"
	break;
      case 211: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11425 "grammar.ec"
	break;
      case 212: /* "class" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11434 "grammar.ec"
	break;
      case 213: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11443 "grammar.ec"
	break;
      case 214: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11452 "grammar.ec"
	break;
      case 215: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 11461 "grammar.ec"
	break;
      case 216: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11470 "grammar.ec"
	break;
      case 217: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11479 "grammar.ec"
	break;
      case 222: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11488 "grammar.ec"
	break;
      case 223: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11497 "grammar.ec"
	break;
      case 224: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11506 "grammar.ec"
	break;
      case 225: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11515 "grammar.ec"
	break;
      case 227: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11524 "grammar.ec"
	break;
      case 229: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11533 "grammar.ec"
	break;
      case 230: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11542 "grammar.ec"
	break;
      case 231: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11551 "grammar.ec"
	break;
      case 232: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11560 "grammar.ec"
	break;
      case 234: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11569 "grammar.ec"
	break;
      case 235: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11578 "grammar.ec"
	break;
      case 236: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11587 "grammar.ec"
	break;
      case 237: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11596 "grammar.ec"
	break;
      case 238: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11605 "grammar.ec"
	break;
      case 239: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11614 "grammar.ec"
	break;
      case 240: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11623 "grammar.ec"
	break;
      case 241: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11632 "grammar.ec"
	break;
      case 242: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11641 "grammar.ec"
	break;
      case 244: /* "expression" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11650 "grammar.ec"
	break;
      case 246: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11659 "grammar.ec"
	break;
      case 248: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11668 "grammar.ec"
	break;
      case 249: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11677 "grammar.ec"
	break;
      case 250: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11686 "grammar.ec"
	break;
      case 251: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11695 "grammar.ec"
	break;
      case 252: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11704 "grammar.ec"
	break;
      case 253: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11713 "grammar.ec"
	break;
      case 254: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11722 "grammar.ec"
	break;
      case 255: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11731 "grammar.ec"
	break;
      case 256: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11740 "grammar.ec"
	break;
      case 257: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11749 "grammar.ec"
	break;
      case 258: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11758 "grammar.ec"
	break;
      case 259: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11767 "grammar.ec"
	break;
      case 260: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11776 "grammar.ec"
	break;
      case 261: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11785 "grammar.ec"
	break;
      case 262: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11794 "grammar.ec"
	break;
      case 264: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11803 "grammar.ec"
	break;
      case 265: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 200 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11812 "grammar.ec"
	break;
      case 266: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11821 "grammar.ec"
	break;
      case 267: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11830 "grammar.ec"
	break;
      case 268: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 11839 "grammar.ec"
	break;
      case 269: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 11848 "grammar.ec"
	break;
      case 271: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11857 "grammar.ec"
	break;
      case 272: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11866 "grammar.ec"
	break;
      case 273: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11875 "grammar.ec"
	break;
      case 275: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11884 "grammar.ec"
	break;
      case 276: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11893 "grammar.ec"
	break;
      case 277: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11902 "grammar.ec"
	break;
      case 278: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11911 "grammar.ec"
	break;
      case 279: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11920 "grammar.ec"
	break;
      case 280: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11929 "grammar.ec"
	break;
      case 281: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11938 "grammar.ec"
	break;
      case 282: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11947 "grammar.ec"
	break;
      case 283: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11956 "grammar.ec"
	break;
      case 284: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11965 "grammar.ec"
	break;
      case 285: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 11974 "grammar.ec"
	break;
      case 286: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11983 "grammar.ec"
	break;
      case 287: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11992 "grammar.ec"
	break;
      case 288: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12001 "grammar.ec"
	break;
      case 289: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12010 "grammar.ec"
	break;
      case 290: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12019 "grammar.ec"
	break;
      case 291: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12028 "grammar.ec"
	break;
      case 292: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12037 "grammar.ec"
	break;
      case 293: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12046 "grammar.ec"
	break;
      case 295: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12055 "grammar.ec"
	break;
      case 296: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12064 "grammar.ec"
	break;
      case 297: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12073 "grammar.ec"
	break;
      case 298: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12082 "grammar.ec"
	break;
      case 299: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12091 "grammar.ec"
	break;
      case 300: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12100 "grammar.ec"
	break;
      case 301: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12109 "grammar.ec"
	break;
      case 302: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12118 "grammar.ec"
	break;
      case 306: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12127 "grammar.ec"
	break;
      case 307: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12136 "grammar.ec"
	break;
      case 308: /* "direct_declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12145 "grammar.ec"
	break;
      case 309: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12154 "grammar.ec"
	break;
      case 310: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12163 "grammar.ec"
	break;
      case 311: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12172 "grammar.ec"
	break;
      case 312: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12181 "grammar.ec"
	break;
      case 313: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12190 "grammar.ec"
	break;
      case 314: /* "direct_declarator_function_start_type_ok" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12199 "grammar.ec"
	break;
      case 315: /* "direct_declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12208 "grammar.ec"
	break;
      case 316: /* "direct_declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12217 "grammar.ec"
	break;
      case 317: /* "direct_declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12226 "grammar.ec"
	break;
      case 318: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 271 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 12235 "grammar.ec"
	break;
      case 320: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12244 "grammar.ec"
	break;
      case 321: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 272 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 12253 "grammar.ec"
	break;
      case 322: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 273 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 12262 "grammar.ec"
	break;
      case 323: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 270 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 12271 "grammar.ec"
	break;
      case 324: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12280 "grammar.ec"
	break;
      case 325: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12289 "grammar.ec"
	break;
      case 326: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 12298 "grammar.ec"
	break;
      case 327: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12307 "grammar.ec"
	break;
      case 328: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12316 "grammar.ec"
	break;
      case 329: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12325 "grammar.ec"
	break;
      case 330: /* "declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12334 "grammar.ec"
	break;
      case 331: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12343 "grammar.ec"
	break;
      case 332: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12352 "grammar.ec"
	break;
      case 333: /* "declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12361 "grammar.ec"
	break;
      case 334: /* "declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12370 "grammar.ec"
	break;
      case 335: /* "declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12379 "grammar.ec"
	break;
      case 336: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12388 "grammar.ec"
	break;
      case 337: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12397 "grammar.ec"
	break;
      case 338: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12406 "grammar.ec"
	break;
      case 339: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12415 "grammar.ec"
	break;
      case 340: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 12424 "grammar.ec"
	break;
      case 341: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12433 "grammar.ec"
	break;
      case 342: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12442 "grammar.ec"
	break;
      case 343: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12451 "grammar.ec"
	break;
      case 344: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12460 "grammar.ec"
	break;
      case 345: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12469 "grammar.ec"
	break;
      case 346: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12478 "grammar.ec"
	break;
      case 347: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12487 "grammar.ec"
	break;
      case 348: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12496 "grammar.ec"
	break;
      case 349: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12505 "grammar.ec"
	break;
      case 350: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12514 "grammar.ec"
	break;
      case 351: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12523 "grammar.ec"
	break;
      case 352: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12532 "grammar.ec"
	break;
      case 353: /* "statement" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12541 "grammar.ec"
	break;
      case 354: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12550 "grammar.ec"
	break;
      case 358: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12559 "grammar.ec"
	break;
      case 359: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12568 "grammar.ec"
	break;
      case 360: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 12577 "grammar.ec"
	break;
      case 362: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 12586 "grammar.ec"
	break;
      case 366: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12595 "grammar.ec"
	break;
      case 367: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12604 "grammar.ec"
	break;
      case 368: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12613 "grammar.ec"
	break;
      case 369: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12622 "grammar.ec"
	break;
      case 370: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12631 "grammar.ec"
	break;
      case 371: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12640 "grammar.ec"
	break;
      case 372: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 12649 "grammar.ec"
	break;
      case 373: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12658 "grammar.ec"
	break;
      case 374: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12667 "grammar.ec"
	break;
      case 375: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12676 "grammar.ec"
	break;
      case 376: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12685 "grammar.ec"
	break;
      case 377: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12694 "grammar.ec"
	break;
      case 378: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12703 "grammar.ec"
	break;
      case 379: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12712 "grammar.ec"
	break;
      case 380: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12721 "grammar.ec"
	break;
      case 381: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12730 "grammar.ec"
	break;
      case 382: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 231 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 12739 "grammar.ec"
	break;
      case 383: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 231 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 12748 "grammar.ec"
	break;
      case 384: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12757 "grammar.ec"
	break;
      case 385: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 12766 "grammar.ec"
	break;
      case 386: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 12775 "grammar.ec"
	break;
      case 387: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 12784 "grammar.ec"
	break;
      case 388: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 12793 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 281 "grammar.y"
    {
      (yyval.specifier) = null;
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 310 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 368 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 370 "grammar.y"
    {
   #ifdef PRECOMPILER
      if(!(yyvsp[(1) - (2)].id).string[0])
      {
         (yyval.specifier) = MkSpecifierName((yyvsp[(1) - (2)].id).string);
         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));
      }
      else
      {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (2)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (2)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (2)].id).string);

         FreeIdentifier((yyvsp[(1) - (2)].id));
         FreeIdentifier((yyvsp[(2) - (2)].id));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
         goto yysetstate;
   #else
         Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
         Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
         yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
      }
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 479 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 483 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 487 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 489 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 538 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 540 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 545 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(1) - (3)].list), FreeSpecifier); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 550 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(2) - (4)].list), FreeSpecifier) ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 555 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 557 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 562 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 564 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 569 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 571 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 576 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 578 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 580 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 582 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 584 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 588 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 592 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 605 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 607 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 609 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 611 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 613 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 619 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 621 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 626 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 631 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 636 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 638 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 640 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 644 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 645 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 649 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 651 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 661 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 665 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 667 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 669 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 673 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 675 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 677 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 680 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 692 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 703 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 722 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 724 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 728 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 729 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 730 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 731 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 732 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 733 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 63:

/* Line 1464 of yacc.c  */
#line 736 "grammar.y"
    {
      MembersInit members = (MembersInit)(yyval.list)->last;
      if(members.type == dataMembersInit)
         members.loc.end = (yyloc).end;
      else
      {
         MembersInit members = MkMembersInitList(MkList());
         ListAdd((yyval.list), members);
         members.loc = (yylsp[(2) - (2)]);
      }
      (yyval.list) = (yyvsp[(1) - (2)].list);
   ;}
    break;

  case 64:

/* Line 1464 of yacc.c  */
#line 748 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 753 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 754 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 755 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 759 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 760 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 761 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 762 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 763 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 764 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 765 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 770 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 772 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 777 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 779 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 781 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 783 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 785 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 815 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 817 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 822 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 824 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 826 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 828 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 830 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 859 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 861 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 863 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 868 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 870 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 875 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 877 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 881 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 883 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 885 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 887 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 892 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 895 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 898 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 901 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 966 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 968 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 973 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 975 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 977 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 979 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 981 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 1011 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 1015 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 1016 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 1017 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 1021 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 1022 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 1023 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 1027 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 1028 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 121:

/* Line 1464 of yacc.c  */
#line 1029 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 1035 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 1038 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 1041 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 1044 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 127:

/* Line 1464 of yacc.c  */
#line 1047 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 1053 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 1055 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 1057 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 1059 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 1061 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 1065 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1070 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1073 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1076 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1079 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 139:

/* Line 1464 of yacc.c  */
#line 1082 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1088 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1090 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1094 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1099 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1101 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1106 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1108 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1115 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1127 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1134 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1136 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1138 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1143 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1145 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1147 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1149 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1153 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1155 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1156 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1157 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1158 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1159 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1160 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1161 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1162 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1163 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1165 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1166 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1168 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1172 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1176 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1179 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1180 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1181 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1182 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1183 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1184 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1185 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1186 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1187 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1188 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1190 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1191 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1195 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1196 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1197 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1201 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1205 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1206 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1207 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 1211 "grammar.y"
    { yyerror(); (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 1214 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1215 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1219 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1220 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1232 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1233 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1237 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1238 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1239 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1240 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1241 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1242 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1243 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1244 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1248 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1252 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1253 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1257 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1265 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 1266 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); ;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 1276 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 1277 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 1284 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1285 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1286 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1326 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1327 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1332 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1339 "grammar.y"
    { (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1341 "grammar.y"
    {
      (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1348 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1349 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1351 "grammar.y"
    { (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1353 "grammar.y"
    {
      (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1361 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1362 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1367 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1374 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1381 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1387 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1394 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace(0, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1400 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass(0, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1409 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1416 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1422 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1428 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1434 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1440 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1446 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1457 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1463 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1467 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1468 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 1469 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1473 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1477 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1478 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1479 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1480 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1481 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1482 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 1484 "grammar.y"
    {
      char * constant = (yyvsp[(1) - (2)].exp).constant;
      int len = strlen(constant);
      if(constant[len-1] == '.')
      {
         constant[len-1] = 0;
         (yyval.exp) = MkExpMember((yyvsp[(1) - (2)].exp), (yyvsp[(2) - (2)].id));
         (yyval.exp).loc = (yyloc);
      }
      else
         yyerror();
   ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = (yyvsp[(1) - (1)].exp); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1498 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1500 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1501 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1502 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1503 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1504 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1505 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1506 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1507 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1508 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1509 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1510 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1511 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1512 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1513 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1514 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1515 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1516 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1517 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 293:

/* Line 1464 of yacc.c  */
#line 1518 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 294:

/* Line 1464 of yacc.c  */
#line 1520 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 299:

/* Line 1464 of yacc.c  */
#line 1526 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1531 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 1539 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1540 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 306:

/* Line 1464 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1547 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1550 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1551 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1552 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1553 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1554 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1556 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1557 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1558 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1559 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1560 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1561 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 1562 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1563 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 1591 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1592 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1593 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1597 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1598 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1599 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1600 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1601 "grammar.y"
    { Expression exp = MkExpDummy(); yyerror(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1605 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1606 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1607 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1608 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1610 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1611 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1612 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1613 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1616 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1617 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 344:

/* Line 1464 of yacc.c  */
#line 1631 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 345:

/* Line 1464 of yacc.c  */
#line 1632 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1633 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1634 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1635 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1643 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 356:

/* Line 1464 of yacc.c  */
#line 1649 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1650 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1651 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1652 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 360:

/* Line 1464 of yacc.c  */
#line 1653 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 362:

/* Line 1464 of yacc.c  */
#line 1658 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 363:

/* Line 1464 of yacc.c  */
#line 1659 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 364:

/* Line 1464 of yacc.c  */
#line 1660 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 365:

/* Line 1464 of yacc.c  */
#line 1661 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1666 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 368:

/* Line 1464 of yacc.c  */
#line 1667 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1668 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1669 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1674 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 373:

/* Line 1464 of yacc.c  */
#line 1682 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 374:

/* Line 1464 of yacc.c  */
#line 1683 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 375:

/* Line 1464 of yacc.c  */
#line 1684 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 376:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 377:

/* Line 1464 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1687 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 382:

/* Line 1464 of yacc.c  */
#line 1694 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 383:

/* Line 1464 of yacc.c  */
#line 1695 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 384:

/* Line 1464 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 386:

/* Line 1464 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 388:

/* Line 1464 of yacc.c  */
#line 1701 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 389:

/* Line 1464 of yacc.c  */
#line 1702 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1707 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 392:

/* Line 1464 of yacc.c  */
#line 1708 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1710 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 394:

/* Line 1464 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1716 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 397:

/* Line 1464 of yacc.c  */
#line 1717 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1719 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1720 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 401:

/* Line 1464 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 402:

/* Line 1464 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 403:

/* Line 1464 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 404:

/* Line 1464 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1734 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 407:

/* Line 1464 of yacc.c  */
#line 1735 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1740 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 410:

/* Line 1464 of yacc.c  */
#line 1741 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 412:

/* Line 1464 of yacc.c  */
#line 1746 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 413:

/* Line 1464 of yacc.c  */
#line 1747 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1748 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 415:

/* Line 1464 of yacc.c  */
#line 1749 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 417:

/* Line 1464 of yacc.c  */
#line 1752 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 418:

/* Line 1464 of yacc.c  */
#line 1753 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1754 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 420:

/* Line 1464 of yacc.c  */
#line 1756 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1757 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 422:

/* Line 1464 of yacc.c  */
#line 1758 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 423:

/* Line 1464 of yacc.c  */
#line 1759 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1761 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 425:

/* Line 1464 of yacc.c  */
#line 1762 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 426:

/* Line 1464 of yacc.c  */
#line 1763 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 427:

/* Line 1464 of yacc.c  */
#line 1764 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 429:

/* Line 1464 of yacc.c  */
#line 1769 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 430:

/* Line 1464 of yacc.c  */
#line 1770 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 431:

/* Line 1464 of yacc.c  */
#line 1771 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1772 "grammar.y"
    { Compiler_Error($"l-value expected\n"); (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 433:

/* Line 1464 of yacc.c  */
#line 1774 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 434:

/* Line 1464 of yacc.c  */
#line 1775 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1776 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1777 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1781 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1782 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1783 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1784 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1785 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1786 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1787 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1788 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1789 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1790 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1791 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 448:

/* Line 1464 of yacc.c  */
#line 1795 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1796 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 450:

/* Line 1464 of yacc.c  */
#line 1797 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1802 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 453:

/* Line 1464 of yacc.c  */
#line 1803 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1804 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1809 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1811 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 459:

/* Line 1464 of yacc.c  */
#line 1813 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1814 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1816 "grammar.y"
    { yyerror(); (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1817 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1822 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1824 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1829 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1857 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1858 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1859 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1860 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1862 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 471:

/* Line 1464 of yacc.c  */
#line 1863 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1864 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 473:

/* Line 1464 of yacc.c  */
#line 1865 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 474:

/* Line 1464 of yacc.c  */
#line 1867 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 475:

/* Line 1464 of yacc.c  */
#line 1868 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 479:

/* Line 1464 of yacc.c  */
#line 1883 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1888 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 482:

/* Line 1464 of yacc.c  */
#line 1889 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1890 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1891 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1892 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1893 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 488:

/* Line 1464 of yacc.c  */
#line 1898 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 489:

/* Line 1464 of yacc.c  */
#line 1902 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 490:

/* Line 1464 of yacc.c  */
#line 1906 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1918 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 494:

/* Line 1464 of yacc.c  */
#line 1919 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1920 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1921 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1927 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         if((yyvsp[(1) - (2)].exp).identifier._class && !(yyvsp[(1) - (2)].exp).identifier._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(1) - (2)].exp).identifier.string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   ;}
    break;

  case 499:

/* Line 1464 of yacc.c  */
#line 1977 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1982 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1983 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 507:

/* Line 1464 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 508:

/* Line 1464 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 509:

/* Line 1464 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 510:

/* Line 1464 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 511:

/* Line 1464 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 512:

/* Line 1464 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 513:

/* Line 1464 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 514:

/* Line 1464 of yacc.c  */
#line 2001 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 516:

/* Line 1464 of yacc.c  */
#line 2006 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 517:

/* Line 1464 of yacc.c  */
#line 2007 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 2009 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 2010 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 521:

/* Line 1464 of yacc.c  */
#line 2015 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 522:

/* Line 1464 of yacc.c  */
#line 2016 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 523:

/* Line 1464 of yacc.c  */
#line 2018 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 524:

/* Line 1464 of yacc.c  */
#line 2019 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 526:

/* Line 1464 of yacc.c  */
#line 2024 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 527:

/* Line 1464 of yacc.c  */
#line 2025 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 528:

/* Line 1464 of yacc.c  */
#line 2027 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 529:

/* Line 1464 of yacc.c  */
#line 2028 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 531:

/* Line 1464 of yacc.c  */
#line 2033 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 532:

/* Line 1464 of yacc.c  */
#line 2034 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 534:

/* Line 1464 of yacc.c  */
#line 2039 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 535:

/* Line 1464 of yacc.c  */
#line 2040 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 2045 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 538:

/* Line 1464 of yacc.c  */
#line 2046 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 2047 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 540:

/* Line 1464 of yacc.c  */
#line 2048 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 2049 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 542:

/* Line 1464 of yacc.c  */
#line 2050 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 543:

/* Line 1464 of yacc.c  */
#line 2051 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 2052 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 2054 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 2055 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 2056 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 2057 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 549:

/* Line 1464 of yacc.c  */
#line 2058 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 2059 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 551:

/* Line 1464 of yacc.c  */
#line 2060 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 552:

/* Line 1464 of yacc.c  */
#line 2061 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 2063 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 554:

/* Line 1464 of yacc.c  */
#line 2064 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 2065 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 556:

/* Line 1464 of yacc.c  */
#line 2066 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 557:

/* Line 1464 of yacc.c  */
#line 2068 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 2069 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 559:

/* Line 1464 of yacc.c  */
#line 2070 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 560:

/* Line 1464 of yacc.c  */
#line 2071 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 561:

/* Line 1464 of yacc.c  */
#line 2074 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 562:

/* Line 1464 of yacc.c  */
#line 2082 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 2086 "grammar.y"
    {
         yyerror();
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 564:

/* Line 1464 of yacc.c  */
#line 2091 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 566:

/* Line 1464 of yacc.c  */
#line 2098 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 567:

/* Line 1464 of yacc.c  */
#line 2102 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 568:

/* Line 1464 of yacc.c  */
#line 2107 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 569:

/* Line 1464 of yacc.c  */
#line 2108 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 570:

/* Line 1464 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 571:

/* Line 1464 of yacc.c  */
#line 2113 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 572:

/* Line 1464 of yacc.c  */
#line 2114 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 573:

/* Line 1464 of yacc.c  */
#line 2115 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 2121 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 2122 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 2123 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 2130 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 583:

/* Line 1464 of yacc.c  */
#line 2140 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 584:

/* Line 1464 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 2142 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 2143 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 2144 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 2145 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 2146 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 2151 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 2152 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THREAD); ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 2156 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 597:

/* Line 1464 of yacc.c  */
#line 2160 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2161 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 599:

/* Line 1464 of yacc.c  */
#line 2162 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 600:

/* Line 1464 of yacc.c  */
#line 2166 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 601:

/* Line 1464 of yacc.c  */
#line 2167 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 603:

/* Line 1464 of yacc.c  */
#line 2172 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 604:

/* Line 1464 of yacc.c  */
#line 2176 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2177 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2181 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2182 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2183 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2187 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2188 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2190 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2191 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 613:

/* Line 1464 of yacc.c  */
#line 2192 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 614:

/* Line 1464 of yacc.c  */
#line 2193 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 615:

/* Line 1464 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 616:

/* Line 1464 of yacc.c  */
#line 2196 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 617:

/* Line 1464 of yacc.c  */
#line 2197 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 618:

/* Line 1464 of yacc.c  */
#line 2198 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 619:

/* Line 1464 of yacc.c  */
#line 2199 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2200 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2204 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2209 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2215 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 630:

/* Line 1464 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 632:

/* Line 1464 of yacc.c  */
#line 2221 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 633:

/* Line 1464 of yacc.c  */
#line 2222 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 634:

/* Line 1464 of yacc.c  */
#line 2223 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 635:

/* Line 1464 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 636:

/* Line 1464 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 638:

/* Line 1464 of yacc.c  */
#line 2229 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2230 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2251 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 649:

/* Line 1464 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 650:

/* Line 1464 of yacc.c  */
#line 2257 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 651:

/* Line 1464 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 652:

/* Line 1464 of yacc.c  */
#line 2262 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 653:

/* Line 1464 of yacc.c  */
#line 2263 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2264 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2265 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2266 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2267 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2268 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2269 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2270 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2271 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2272 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2273 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2274 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2278 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2279 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 670:

/* Line 1464 of yacc.c  */
#line 2280 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 671:

/* Line 1464 of yacc.c  */
#line 2281 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 672:

/* Line 1464 of yacc.c  */
#line 2282 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 673:

/* Line 1464 of yacc.c  */
#line 2283 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 674:

/* Line 1464 of yacc.c  */
#line 2284 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 675:

/* Line 1464 of yacc.c  */
#line 2285 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 676:

/* Line 1464 of yacc.c  */
#line 2286 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 677:

/* Line 1464 of yacc.c  */
#line 2287 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 678:

/* Line 1464 of yacc.c  */
#line 2291 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 679:

/* Line 1464 of yacc.c  */
#line 2292 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 680:

/* Line 1464 of yacc.c  */
#line 2293 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 681:

/* Line 1464 of yacc.c  */
#line 2294 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2295 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2296 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2297 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2298 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2299 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2300 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2301 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2302 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2303 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 694:

/* Line 1464 of yacc.c  */
#line 2307 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 695:

/* Line 1464 of yacc.c  */
#line 2308 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 696:

/* Line 1464 of yacc.c  */
#line 2309 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 697:

/* Line 1464 of yacc.c  */
#line 2310 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 698:

/* Line 1464 of yacc.c  */
#line 2311 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 699:

/* Line 1464 of yacc.c  */
#line 2312 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 700:

/* Line 1464 of yacc.c  */
#line 2313 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 701:

/* Line 1464 of yacc.c  */
#line 2314 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 702:

/* Line 1464 of yacc.c  */
#line 2321 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 703:

/* Line 1464 of yacc.c  */
#line 2323 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 704:

/* Line 1464 of yacc.c  */
#line 2325 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 705:

/* Line 1464 of yacc.c  */
#line 2327 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2329 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2331 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2333 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2335 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2337 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2339 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2343 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2344 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2349 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 715:

/* Line 1464 of yacc.c  */
#line 2355 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 716:

/* Line 1464 of yacc.c  */
#line 2361 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 717:

/* Line 1464 of yacc.c  */
#line 2368 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      ;}
    break;

  case 718:

/* Line 1464 of yacc.c  */
#line 2377 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 719:

/* Line 1464 of yacc.c  */
#line 2378 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 720:

/* Line 1464 of yacc.c  */
#line 2379 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 721:

/* Line 1464 of yacc.c  */
#line 2380 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 722:

/* Line 1464 of yacc.c  */
#line 2384 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 723:

/* Line 1464 of yacc.c  */
#line 2385 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 724:

/* Line 1464 of yacc.c  */
#line 2386 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 725:

/* Line 1464 of yacc.c  */
#line 2388 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 726:

/* Line 1464 of yacc.c  */
#line 2389 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 727:

/* Line 1464 of yacc.c  */
#line 2390 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 728:

/* Line 1464 of yacc.c  */
#line 2392 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 729:

/* Line 1464 of yacc.c  */
#line 2393 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2394 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2398 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2403 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2411 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2420 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2428 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2430 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2431 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2432 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2437 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2444 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2451 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2454 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2467 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2484 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2493 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2497 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2498 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2500 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2501 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2502 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2503 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2510 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2511 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2512 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2513 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2515 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2516 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2517 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2521 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2522 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2523 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2524 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2525 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2526 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2527 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2528 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2529 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2530 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2534 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2535 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2536 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2537 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2538 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2539 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2540 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2541 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2542 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2543 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2544 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2545 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2549 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2550 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2551 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2552 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2553 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2554 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2555 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2556 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2557 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2558 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2562 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2563 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2567 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2568 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2569 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2570 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2571 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2572 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2573 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2574 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2576 "grammar.y"
    { _DeclClass(0, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2577 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass(0, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2580 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2598 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2616 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2620 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2621 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2622 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2623 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2624 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 821:

/* Line 1464 of yacc.c  */
#line 2625 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 822:

/* Line 1464 of yacc.c  */
#line 2626 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2627 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 824:

/* Line 1464 of yacc.c  */
#line 2629 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2647 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 826:

/* Line 1464 of yacc.c  */
#line 2663 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2664 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2665 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2666 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2667 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2668 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2669 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2670 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 834:

/* Line 1464 of yacc.c  */
#line 2671 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2672 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 836:

/* Line 1464 of yacc.c  */
#line 2673 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 837:

/* Line 1464 of yacc.c  */
#line 2674 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2676 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2694 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 840:

/* Line 1464 of yacc.c  */
#line 2710 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2711 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2712 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2713 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2714 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2715 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 846:

/* Line 1464 of yacc.c  */
#line 2716 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2717 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 848:

/* Line 1464 of yacc.c  */
#line 2718 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2719 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 850:

/* Line 1464 of yacc.c  */
#line 2720 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2721 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2723 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2741 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2757 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2758 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2762 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2763 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2764 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2765 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2766 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2772 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   ;}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2778 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); ;}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2781 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2790 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2799 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2808 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      ;}
    break;

  case 868:

/* Line 1464 of yacc.c  */
#line 2816 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 869:

/* Line 1464 of yacc.c  */
#line 2817 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2818 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 871:

/* Line 1464 of yacc.c  */
#line 2819 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2823 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 873:

/* Line 1464 of yacc.c  */
#line 2824 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2825 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2826 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2827 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2828 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2829 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2830 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2831 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2839 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 883:

/* Line 1464 of yacc.c  */
#line 2840 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 884:

/* Line 1464 of yacc.c  */
#line 2841 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2842 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2843 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 887:

/* Line 1464 of yacc.c  */
#line 2849 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 888:

/* Line 1464 of yacc.c  */
#line 2858 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 889:

/* Line 1464 of yacc.c  */
#line 2867 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2876 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2899 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 895:

/* Line 1464 of yacc.c  */
#line 2900 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2901 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 897:

/* Line 1464 of yacc.c  */
#line 2902 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 898:

/* Line 1464 of yacc.c  */
#line 2903 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 899:

/* Line 1464 of yacc.c  */
#line 2909 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 900:

/* Line 1464 of yacc.c  */
#line 2918 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 901:

/* Line 1464 of yacc.c  */
#line 2927 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 902:

/* Line 1464 of yacc.c  */
#line 2936 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 905:

/* Line 1464 of yacc.c  */
#line 2999 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 3000 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 907:

/* Line 1464 of yacc.c  */
#line 3001 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 3003 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 3014 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 910:

/* Line 1464 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 911:

/* Line 1464 of yacc.c  */
#line 3016 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 912:

/* Line 1464 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 913:

/* Line 1464 of yacc.c  */
#line 3022 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 914:

/* Line 1464 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 915:

/* Line 1464 of yacc.c  */
#line 3024 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 916:

/* Line 1464 of yacc.c  */
#line 3025 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 917:

/* Line 1464 of yacc.c  */
#line 3029 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 918:

/* Line 1464 of yacc.c  */
#line 3030 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 919:

/* Line 1464 of yacc.c  */
#line 3034 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 3035 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 3036 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 3040 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 923:

/* Line 1464 of yacc.c  */
#line 3041 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 924:

/* Line 1464 of yacc.c  */
#line 3045 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 925:

/* Line 1464 of yacc.c  */
#line 3046 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 926:

/* Line 1464 of yacc.c  */
#line 3047 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 927:

/* Line 1464 of yacc.c  */
#line 3048 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 928:

/* Line 1464 of yacc.c  */
#line 3049 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 929:

/* Line 1464 of yacc.c  */
#line 3050 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 930:

/* Line 1464 of yacc.c  */
#line 3051 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 3052 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 3053 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 3054 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 3055 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 935:

/* Line 1464 of yacc.c  */
#line 3056 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 936:

/* Line 1464 of yacc.c  */
#line 3057 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 937:

/* Line 1464 of yacc.c  */
#line 3058 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 938:

/* Line 1464 of yacc.c  */
#line 3059 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 939:

/* Line 1464 of yacc.c  */
#line 3060 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 940:

/* Line 1464 of yacc.c  */
#line 3064 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 3065 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 3066 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 3067 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 3068 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 945:

/* Line 1464 of yacc.c  */
#line 3069 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 3070 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 3071 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 3075 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 3076 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 3077 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 951:

/* Line 1464 of yacc.c  */
#line 3078 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 3082 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 3084 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 3085 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 956:

/* Line 1464 of yacc.c  */
#line 3086 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 3090 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 3092 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 960:

/* Line 1464 of yacc.c  */
#line 3093 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 961:

/* Line 1464 of yacc.c  */
#line 3094 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 963:

/* Line 1464 of yacc.c  */
#line 3100 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 3102 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 965:

/* Line 1464 of yacc.c  */
#line 3104 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 966:

/* Line 1464 of yacc.c  */
#line 3106 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 968:

/* Line 1464 of yacc.c  */
#line 3112 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 969:

/* Line 1464 of yacc.c  */
#line 3114 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 970:

/* Line 1464 of yacc.c  */
#line 3116 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 972:

/* Line 1464 of yacc.c  */
#line 3121 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 973:

/* Line 1464 of yacc.c  */
#line 3122 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 974:

/* Line 1464 of yacc.c  */
#line 3123 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 976:

/* Line 1464 of yacc.c  */
#line 3128 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 977:

/* Line 1464 of yacc.c  */
#line 3129 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 978:

/* Line 1464 of yacc.c  */
#line 3130 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 980:

/* Line 1464 of yacc.c  */
#line 3135 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 981:

/* Line 1464 of yacc.c  */
#line 3136 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 982:

/* Line 1464 of yacc.c  */
#line 3137 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 984:

/* Line 1464 of yacc.c  */
#line 3142 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 985:

/* Line 1464 of yacc.c  */
#line 3143 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 986:

/* Line 1464 of yacc.c  */
#line 3144 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 3149 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 989:

/* Line 1464 of yacc.c  */
#line 3150 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 990:

/* Line 1464 of yacc.c  */
#line 3151 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 991:

/* Line 1464 of yacc.c  */
#line 3155 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 992:

/* Line 1464 of yacc.c  */
#line 3156 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 993:

/* Line 1464 of yacc.c  */
#line 3158 "grammar.y"
    {
         Compiler_Warning($"extra comma\n");
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      ;}
    break;

  case 994:

/* Line 1464 of yacc.c  */
#line 3174 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 995:

/* Line 1464 of yacc.c  */
#line 3175 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 996:

/* Line 1464 of yacc.c  */
#line 3176 "grammar.y"
    { yyerror(); (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 997:

/* Line 1464 of yacc.c  */
#line 3178 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      ;}
    break;

  case 998:

/* Line 1464 of yacc.c  */
#line 3191 "grammar.y"
    {
         yyerror();
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      ;}
    break;

  case 999:

/* Line 1464 of yacc.c  */
#line 3207 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1000:

/* Line 1464 of yacc.c  */
#line 3209 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1001:

/* Line 1464 of yacc.c  */
#line 3213 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1002:

/* Line 1464 of yacc.c  */
#line 3214 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1003:

/* Line 1464 of yacc.c  */
#line 3218 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1004:

/* Line 1464 of yacc.c  */
#line 3219 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1005:

/* Line 1464 of yacc.c  */
#line 3220 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1006:

/* Line 1464 of yacc.c  */
#line 3221 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1007:

/* Line 1464 of yacc.c  */
#line 3224 "grammar.y"
    { yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1008:

/* Line 1464 of yacc.c  */
#line 3225 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1009:

/* Line 1464 of yacc.c  */
#line 3229 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1010:

/* Line 1464 of yacc.c  */
#line 3230 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1011:

/* Line 1464 of yacc.c  */
#line 3231 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1012:

/* Line 1464 of yacc.c  */
#line 3235 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1013:

/* Line 1464 of yacc.c  */
#line 3239 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3243 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1015:

/* Line 1464 of yacc.c  */
#line 3244 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3245 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1017:

/* Line 1464 of yacc.c  */
#line 3246 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3248 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   ;}
    break;

  case 1019:

/* Line 1464 of yacc.c  */
#line 3256 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3265 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1021:

/* Line 1464 of yacc.c  */
#line 3266 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3267 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1023:

/* Line 1464 of yacc.c  */
#line 3268 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3272 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3273 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3277 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3278 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3283 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3284 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3285 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3286 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3287 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3289 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1034:

/* Line 1464 of yacc.c  */
#line 3307 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3308 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3312 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3313 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3314 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3315 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1040:

/* Line 1464 of yacc.c  */
#line 3316 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3317 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1042:

/* Line 1464 of yacc.c  */
#line 3319 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1043:

/* Line 1464 of yacc.c  */
#line 3320 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3321 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1045:

/* Line 1464 of yacc.c  */
#line 3322 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3326 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3327 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3328 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1049:

/* Line 1464 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1050:

/* Line 1464 of yacc.c  */
#line 3330 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1051:

/* Line 1464 of yacc.c  */
#line 3332 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1052:

/* Line 1464 of yacc.c  */
#line 3333 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1053:

/* Line 1464 of yacc.c  */
#line 3334 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1055:

/* Line 1464 of yacc.c  */
#line 3339 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3340 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3341 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3343 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1061:

/* Line 1464 of yacc.c  */
#line 3348 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3355 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3357 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1067:

/* Line 1464 of yacc.c  */
#line 3358 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1068:

/* Line 1464 of yacc.c  */
#line 3359 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1076:

/* Line 1464 of yacc.c  */
#line 3370 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1077:

/* Line 1464 of yacc.c  */
#line 3371 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1078:

/* Line 1464 of yacc.c  */
#line 3372 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1079:

/* Line 1464 of yacc.c  */
#line 3373 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1080:

/* Line 1464 of yacc.c  */
#line 3374 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1081:

/* Line 1464 of yacc.c  */
#line 3375 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1082:

/* Line 1464 of yacc.c  */
#line 3376 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1083:

/* Line 1464 of yacc.c  */
#line 3380 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null, null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1084:

/* Line 1464 of yacc.c  */
#line 3381 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp), null); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1085:

/* Line 1464 of yacc.c  */
#line 3382 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(4) - (7)].string), (yyvsp[(6) - (7)].exp), (yyvsp[(2) - (7)].id)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1086:

/* Line 1464 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1087:

/* Line 1464 of yacc.c  */
#line 3387 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1088:

/* Line 1464 of yacc.c  */
#line 3388 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1089:

/* Line 1464 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1090:

/* Line 1464 of yacc.c  */
#line 3393 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1091:

/* Line 1464 of yacc.c  */
#line 3394 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1092:

/* Line 1464 of yacc.c  */
#line 3395 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1093:

/* Line 1464 of yacc.c  */
#line 3397 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1094:

/* Line 1464 of yacc.c  */
#line 3398 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1095:

/* Line 1464 of yacc.c  */
#line 3399 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1096:

/* Line 1464 of yacc.c  */
#line 3401 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1097:

/* Line 1464 of yacc.c  */
#line 3402 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1098:

/* Line 1464 of yacc.c  */
#line 3403 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1099:

/* Line 1464 of yacc.c  */
#line 3404 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1100:

/* Line 1464 of yacc.c  */
#line 3406 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1101:

/* Line 1464 of yacc.c  */
#line 3407 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1102:

/* Line 1464 of yacc.c  */
#line 3408 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1103:

/* Line 1464 of yacc.c  */
#line 3412 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1104:

/* Line 1464 of yacc.c  */
#line 3413 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1105:

/* Line 1464 of yacc.c  */
#line 3414 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1106:

/* Line 1464 of yacc.c  */
#line 3415 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1107:

/* Line 1464 of yacc.c  */
#line 3416 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1108:

/* Line 1464 of yacc.c  */
#line 3418 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1109:

/* Line 1464 of yacc.c  */
#line 3419 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1110:

/* Line 1464 of yacc.c  */
#line 3420 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1111:

/* Line 1464 of yacc.c  */
#line 3421 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3422 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3426 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3427 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3428 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3429 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3430 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3431 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3432 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3434 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3435 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3436 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3437 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3438 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3442 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3443 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3444 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3448 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3449 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3453 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3454 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3455 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3456 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3460 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3461 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3462 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3464 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3465 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3466 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3470 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3474 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3475 "grammar.y"
    { structDeclMode = defaultDeclMode;  ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3477 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3478 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3479 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3483 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3484 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3485 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3486 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3490 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3491 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3495 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3496 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1154:

/* Line 1464 of yacc.c  */
#line 3497 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3501 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3502 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3503 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3504 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3505 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3506 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3507 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3511 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3512 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3513 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3514 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3518 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3519 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3520 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3521 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3525 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3529 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3534 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3536 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3539 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3544 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3545 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3546 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3550 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3552 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3553 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3554 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3555 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3559 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3564 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3565 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3566 "grammar.y"
    { yyerror(); (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3568 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3569 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3571 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1192:

/* Line 1464 of yacc.c  */
#line 3572 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1193:

/* Line 1464 of yacc.c  */
#line 3573 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1194:

/* Line 1464 of yacc.c  */
#line 3574 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3575 "grammar.y"
    { yyerror(); (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1196:

/* Line 1464 of yacc.c  */
#line 3577 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1197:

/* Line 1464 of yacc.c  */
#line 3578 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3582 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1199:

/* Line 1464 of yacc.c  */
#line 3583 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3584 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3585 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3589 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3590 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3591 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3592 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1206:

/* Line 1464 of yacc.c  */
#line 3594 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3595 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3596 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3597 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3598 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3599 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3600 "grammar.y"
    { yyerror(); (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3603 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3607 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3608 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1216:

/* Line 1464 of yacc.c  */
#line 3612 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3613 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1218:

/* Line 1464 of yacc.c  */
#line 3617 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3618 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3619 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1221:

/* Line 1464 of yacc.c  */
#line 3620 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3621 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3622 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3623 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3624 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3628 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3629 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3630 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3631 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3637 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3639 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3640 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3642 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3644 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3645 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3648 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3649 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3650 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1239:

/* Line 1464 of yacc.c  */
#line 3651 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1240:

/* Line 1464 of yacc.c  */
#line 3652 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3653 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3657 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3659 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3670 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1245:

/* Line 1464 of yacc.c  */
#line 3672 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1246:

/* Line 1464 of yacc.c  */
#line 3675 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3678 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3679 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3680 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3682 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3691 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3693 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3695 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3696 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3697 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3698 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3700 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3709 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3710 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3711 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3712 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3713 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3714 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3718 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3720 "grammar.y"
    {
      yyerror();
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3728 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1267:

/* Line 1464 of yacc.c  */
#line 3730 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1268:

/* Line 1464 of yacc.c  */
#line 3731 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1269:

/* Line 1464 of yacc.c  */
#line 3734 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1270:

/* Line 1464 of yacc.c  */
#line 3735 "grammar.y"
    { yyerror(); (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1271:

/* Line 1464 of yacc.c  */
#line 3739 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1272:

/* Line 1464 of yacc.c  */
#line 3740 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1273:

/* Line 1464 of yacc.c  */
#line 3741 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1276:

/* Line 1464 of yacc.c  */
#line 3747 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1277:

/* Line 1464 of yacc.c  */
#line 3748 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1278:

/* Line 1464 of yacc.c  */
#line 3750 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1279:

/* Line 1464 of yacc.c  */
#line 3752 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1282:

/* Line 1464 of yacc.c  */
#line 3758 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1283:

/* Line 1464 of yacc.c  */
#line 3762 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1284:

/* Line 1464 of yacc.c  */
#line 3763 "grammar.y"
    { Symbol symbol = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1285:

/* Line 1464 of yacc.c  */
#line 3764 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1286:

/* Line 1464 of yacc.c  */
#line 3768 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1287:

/* Line 1464 of yacc.c  */
#line 3772 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1288:

/* Line 1464 of yacc.c  */
#line 3773 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1289:

/* Line 1464 of yacc.c  */
#line 3774 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1290:

/* Line 1464 of yacc.c  */
#line 3778 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1291:

/* Line 1464 of yacc.c  */
#line 3779 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1292:

/* Line 1464 of yacc.c  */
#line 3783 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1293:

/* Line 1464 of yacc.c  */
#line 3784 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1294:

/* Line 1464 of yacc.c  */
#line 3788 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1295:

/* Line 1464 of yacc.c  */
#line 3789 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1296:

/* Line 1464 of yacc.c  */
#line 3790 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1297:

/* Line 1464 of yacc.c  */
#line 3791 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1298:

/* Line 1464 of yacc.c  */
#line 3795 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1299:

/* Line 1464 of yacc.c  */
#line 3799 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1300:

/* Line 1464 of yacc.c  */
#line 3803 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1301:

/* Line 1464 of yacc.c  */
#line 3807 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 22181 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3810 "grammar.y"


