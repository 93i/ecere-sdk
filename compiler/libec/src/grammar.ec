/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING   "eC expects all declarations to precede statements in the block (C89 style)\n"

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 107 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     LONG = 294,
     SIGNED = 295,
     UNSIGNED = 296,
     FLOAT = 297,
     DOUBLE = 298,
     CONST = 299,
     VOLATILE = 300,
     VOID = 301,
     VALIST = 302,
     STRUCT = 303,
     UNION = 304,
     ENUM = 305,
     ELLIPSIS = 306,
     CASE = 307,
     DEFAULT = 308,
     IF = 309,
     SWITCH = 310,
     WHILE = 311,
     DO = 312,
     FOR = 313,
     GOTO = 314,
     CONTINUE = 315,
     BREAK = 316,
     RETURN = 317,
     IFX = 318,
     ELSE = 319,
     CLASS = 320,
     THISCLASS = 321,
     CLASS_NAME = 322,
     PROPERTY = 323,
     SETPROP = 324,
     GETPROP = 325,
     NEWOP = 326,
     RENEW = 327,
     DELETE = 328,
     EXT_DECL = 329,
     EXT_STORAGE = 330,
     IMPORT = 331,
     DEFINE = 332,
     VIRTUAL = 333,
     ATTRIB = 334,
     PUBLIC = 335,
     PRIVATE = 336,
     TYPED_OBJECT = 337,
     ANY_OBJECT = 338,
     _INCREF = 339,
     EXTENSION = 340,
     ASM = 341,
     TYPEOF = 342,
     WATCH = 343,
     STOPWATCHING = 344,
     FIREWATCHERS = 345,
     WATCHABLE = 346,
     CLASS_DESIGNER = 347,
     CLASS_NO_EXPANSION = 348,
     CLASS_FIXED = 349,
     ISPROPSET = 350,
     CLASS_DEFAULT_PROPERTY = 351,
     PROPERTY_CATEGORY = 352,
     CLASS_DATA = 353,
     CLASS_PROPERTY = 354,
     SUBCLASS = 355,
     NAMESPACE = 356,
     NEW0OP = 357,
     RENEW0 = 358,
     VAARG = 359,
     DBTABLE = 360,
     DBFIELD = 361,
     DBINDEX = 362,
     DATABASE_OPEN = 363,
     ALIGNOF = 364,
     ATTRIB_DEP = 365,
     __ATTRIB = 366,
     BOOL = 367,
     _BOOL = 368,
     _COMPLEX = 369,
     _IMAGINARY = 370,
     RESTRICT = 371
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 37 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 304 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 329 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  293
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   40898

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  142
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  260
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1332
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2208

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   371

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   136,     2,     2,   130,   138,   133,     2,
     120,   121,   117,   134,   125,   135,   128,   137,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   129,   123,
     118,   124,   119,   141,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   131,     2,   132,   139,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   127,   140,   126,   122,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   187,   190,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   927,   932,   938,   947,
     949,   951,   954,   961,   968,   974,   980,   987,   994,  1000,
    1006,  1014,  1022,  1029,  1036,  1044,  1052,  1059,  1066,  1071,
    1077,  1082,  1089,  1094,  1096,  1098,  1100,  1102,  1106,  1109,
    1111,  1114,  1117,  1120,  1122,  1127,  1132,  1136,  1141,  1146,
    1150,  1154,  1157,  1160,  1165,  1170,  1174,  1179,  1183,  1187,
    1190,  1193,  1195,  1200,  1205,  1209,  1214,  1219,  1223,  1227,
    1230,  1233,  1238,  1243,  1247,  1252,  1256,  1260,  1263,  1266,
    1268,  1270,  1274,  1278,  1280,  1282,  1286,  1290,  1293,  1296,
    1299,  1302,  1305,  1310,  1313,  1318,  1324,  1330,  1335,  1338,
    1343,  1345,  1347,  1349,  1351,  1353,  1355,  1357,  1359,  1361,
    1363,  1365,  1367,  1369,  1374,  1376,  1380,  1384,  1388,  1392,
    1396,  1400,  1402,  1406,  1410,  1414,  1418,  1420,  1424,  1428,
    1432,  1436,  1439,  1441,  1444,  1448,  1452,  1456,  1460,  1464,
    1468,  1472,  1474,  1478,  1482,  1486,  1490,  1494,  1498,  1502,
    1506,  1508,  1512,  1516,  1520,  1524,  1526,  1530,  1534,  1538,
    1542,  1544,  1548,  1552,  1556,  1560,  1562,  1566,  1570,  1572,
    1576,  1580,  1582,  1588,  1594,  1600,  1606,  1612,  1618,  1624,
    1630,  1636,  1642,  1648,  1654,  1660,  1666,  1672,  1678,  1680,
    1684,  1688,  1692,  1696,  1700,  1704,  1708,  1712,  1714,  1716,
    1718,  1720,  1722,  1724,  1726,  1728,  1730,  1732,  1734,  1736,
    1740,  1744,  1747,  1749,  1753,  1757,  1759,  1761,  1764,  1767,
    1771,  1775,  1779,  1783,  1787,  1791,  1795,  1797,  1800,  1803,
    1807,  1811,  1815,  1819,  1823,  1827,  1831,  1834,  1837,  1840,
    1843,  1847,  1850,  1856,  1863,  1870,  1874,  1877,  1883,  1885,
    1887,  1889,  1891,  1893,  1898,  1900,  1904,  1908,  1912,  1916,
    1920,  1924,  1926,  1930,  1934,  1938,  1942,  1944,  1948,  1952,
    1956,  1960,  1962,  1965,  1969,  1973,  1977,  1981,  1985,  1989,
    1993,  1995,  1999,  2003,  2007,  2011,  2015,  2019,  2023,  2027,
    2029,  2033,  2037,  2041,  2045,  2047,  2051,  2055,  2059,  2063,
    2065,  2069,  2073,  2077,  2081,  2083,  2087,  2091,  2093,  2097,
    2101,  2103,  2109,  2115,  2121,  2127,  2132,  2137,  2142,  2147,
    2153,  2159,  2165,  2171,  2176,  2181,  2186,  2191,  2197,  2203,
    2209,  2215,  2221,  2227,  2233,  2239,  2243,  2247,  2250,  2253,
    2255,  2259,  2263,  2267,  2271,  2273,  2276,  2280,  2284,  2287,
    2290,  2293,  2295,  2298,  2302,  2306,  2308,  2310,  2312,  2314,
    2316,  2318,  2320,  2322,  2324,  2326,  2328,  2330,  2332,  2334,
    2336,  2340,  2344,  2346,  2350,  2353,  2355,  2358,  2361,  2364,
    2369,  2374,  2378,  2382,  2387,  2393,  2398,  2405,  2412,  2417,
    2423,  2428,  2435,  2442,  2445,  2448,  2451,  2457,  2461,  2467,
    2474,  2480,  2488,  2496,  2505,  2514,  2522,  2530,  2534,  2538,
    2542,  2547,  2551,  2557,  2563,  2565,  2567,  2569,  2571,  2573,
    2575,  2577,  2579,  2581,  2584,  2586,  2588,  2590,  2592,  2594,
    2596,  2598,  2600,  2602,  2604,  2606,  2608,  2610,  2612,  2614,
    2616,  2621,  2626,  2631,  2633,  2635,  2637,  2639,  2641,  2643,
    2645,  2647,  2649,  2651,  2653,  2655,  2657,  2659,  2661,  2663,
    2665,  2667,  2669,  2671,  2673,  2675,  2677,  2679,  2681,  2683,
    2685,  2690,  2695,  2700,  2702,  2704,  2707,  2710,  2714,  2720,
    2723,  2727,  2733,  2739,  2745,  2747,  2751,  2754,  2757,  2761,
    2765,  2768,  2772,  2776,  2781,  2785,  2789,  2793,  2797,  2801,
    2805,  2810,  2815,  2820,  2822,  2824,  2829,  2833,  2836,  2840,
    2844,  2848,  2852,  2856,  2860,  2864,  2868,  2872,  2876,  2880,
    2884,  2886,  2888,  2890,  2893,  2895,  2898,  2900,  2903,  2905,
    2908,  2910,  2913,  2915,  2918,  2920,  2923,  2925,  2928,  2930,
    2933,  2935,  2938,  2940,  2943,  2945,  2948,  2950,  2953,  2955,
    2958,  2960,  2963,  2965,  2968,  2970,  2973,  2975,  2978,  2980,
    2983,  2985,  2988,  2990,  2993,  2995,  2998,  3000,  3003,  3005,
    3008,  3010,  3013,  3015,  3018,  3020,  3022,  3024,  3027,  3029,
    3032,  3034,  3037,  3039,  3042,  3047,  3053,  3055,  3057,  3059,
    3062,  3064,  3067,  3069,  3072,  3074,  3077,  3082,  3088,  3090,
    3093,  3095,  3098,  3100,  3103,  3105,  3108,  3110,  3113,  3115,
    3118,  3123,  3129,  3131,  3134,  3136,  3139,  3141,  3144,  3146,
    3149,  3151,  3154,  3156,  3159,  3164,  3170,  3174,  3178,  3180,
    3184,  3188,  3192,  3196,  3198,  3200,  3202,  3207,  3212,  3217,
    3221,  3226,  3231,  3236,  3240,  3242,  3246,  3251,  3255,  3260,
    3265,  3270,  3275,  3279,  3282,  3286,  3290,  3294,  3298,  3301,
    3304,  3307,  3311,  3316,  3318,  3320,  3323,  3327,  3331,  3335,
    3339,  3342,  3345,  3348,  3352,  3357,  3359,  3361,  3363,  3365,
    3367,  3372,  3374,  3376,  3378,  3380,  3382,  3384,  3386,  3388,
    3390,  3395,  3397,  3400,  3404,  3411,  3417,  3421,  3426,  3429,
    3433,  3437,  3441,  3445,  3450,  3455,  3460,  3463,  3467,  3471,
    3475,  3480,  3485,  3489,  3494,  3497,  3501,  3505,  3509,  3514,
    3519,  3521,  3524,  3527,  3531,  3533,  3535,  3538,  3541,  3545,
    3547,  3549,  3552,  3555,  3559,  3561,  3564,  3568,  3571,  3574,
    3576,  3579,  3583,  3586,  3588,  3591,  3595,  3599,  3601,  3604,
    3608,  3612,  3614,  3617,  3621,  3625,  3627,  3630,  3634,  3638,
    3640,  3643,  3647,  3651,  3653,  3657,  3662,  3664,  3669,  3672,
    3678,  3682,  3684,  3686,  3688,  3690,  3692,  3694,  3698,  3702,
    3705,  3708,  3710,  3712,  3716,  3719,  3723,  3725,  3729,  3733,
    3737,  3741,  3745,  3747,  3750,  3754,  3758,  3760,  3763,  3765,
    3768,  3771,  3774,  3777,  3781,  3783,  3785,  3789,  3793,  3795,
    3799,  3804,  3808,  3813,  3817,  3821,  3826,  3830,  3835,  3837,
    3841,  3845,  3850,  3854,  3858,  3862,  3867,  3869,  3873,  3877,
    3881,  3885,  3889,  3891,  3895,  3898,  3900,  3902,  3904,  3906,
    3908,  3911,  3913,  3915,  3917,  3919,  3922,  3925,  3928,  3930,
    3932,  3934,  3936,  3938,  3941,  3943,  3945,  3950,  3952,  3956,
    3957,  3964,  3973,  3984,  3997,  4006,  4017,  4028,  4034,  4042,
    4052,  4064,  4072,  4082,  4092,  4096,  4101,  4106,  4110,  4114,
    4118,  4123,  4128,  4132,  4136,  4140,  4145,  4150,  4154,  4157,
    4161,  4164,  4168,  4173,  4178,  4182,  4186,  4188,  4190,  4192,
    4194,  4196,  4199,  4203,  4206,  4209,  4212,  4216,  4220,  4223,
    4229,  4236,  4239,  4242,  4245,  4248,  4251,  4254,  4256,  4259,
    4262,  4266,  4268,  4271,  4273,  4276,  4279,  4281,  4284,  4287,
    4290,  4293,  4296,  4299,  4301,  4303,  4306,  4309,  4311,  4313,
    4316,  4319,  4321,  4324,  4327,  4329,  4332,  4334,  4337,  4340,
    4346,  4352,  4360,  4368,  4374,  4380,  4384,  4387,  4393,  4398,
    4403,  4411,  4418,  4425,  4431,  4439,  4446,  4451,  4459,  4469,
    4473,  4478,  4483,  4489,  4495,  4502,  4510,  4517,  4524,  4530,
    4536,  4541,  4545,  4548,  4550,  4553,  4558,  4562,  4568,  4573,
    4577,  4580,  4583,  4586,  4590,  4594,  4598,  4602,  4605,  4608,
    4610,  4612,  4617,  4621,  4626,  4630,  4634,  4637,  4642,  4646,
    4651,  4655,  4659,  4662,  4664,  4667,  4669,  4671,  4674,  4676,
    4679,  4683,  4687,  4689,  4692,  4695,  4698,  4702,  4707,  4712,
    4715,  4718,  4721,  4724,  4726,  4729,  4731,  4734,  4736,  4739,
    4742,  4744,  4747,  4749,  4752,  4755,  4758,  4761,  4763,  4766,
    4769,  4773,  4775,  4777,  4778,  4785,  4792,  4798,  4803,  4805,
    4808,  4811,  4813,  4817,  4821,  4826,  4828,  4830,  4833,  4836,
    4843,  4850,  4857
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     391,     0,    -1,   214,   117,    -1,   214,   118,    -1,   147,
      -1,   214,   214,    -1,    28,    -1,    28,    -1,   145,    -1,
     145,   118,   208,   119,    -1,   145,   118,   208,    11,    -1,
     300,   335,    -1,   333,    -1,   300,   120,   121,    -1,   122,
     300,   120,   121,    -1,    78,   300,   335,    -1,    78,   333,
      -1,   300,   336,    -1,   334,    -1,    78,   300,   336,    -1,
      78,   334,    -1,   148,   375,    -1,   151,   375,    -1,   151,
     123,    -1,   149,   375,    -1,   150,   375,    -1,   148,   123,
      -1,   148,   325,   123,    -1,   148,   376,    -1,   152,    -1,
     151,   376,    -1,   153,    -1,   153,   123,    -1,   299,   335,
      -1,   299,   337,    -1,   299,   336,    -1,   156,   375,    -1,
     156,   376,    -1,   157,    -1,   156,    -1,   221,   124,   340,
      -1,   340,    -1,   221,   124,   341,    -1,   221,   124,     1,
      -1,   341,    -1,   160,    -1,   162,   125,   160,    -1,   163,
     125,   160,    -1,   161,    -1,   162,   125,   161,    -1,   163,
     125,   161,    -1,   162,   125,     1,    -1,   163,   125,     1,
      -1,   125,    -1,   162,   123,    -1,   163,   123,    -1,   164,
      -1,   158,    -1,   167,   164,    -1,   167,   158,    -1,   165,
     164,    -1,   165,   158,    -1,   123,    -1,   167,   123,    -1,
     165,   123,    -1,   165,    -1,   162,    -1,   165,   162,    -1,
     167,   162,    -1,   159,    -1,   166,   159,    -1,   167,   159,
      -1,   165,   159,    -1,   165,   163,    -1,   163,    -1,   162,
       1,    -1,   169,   126,    -1,   169,     1,   126,    -1,   299,
     214,   127,   167,    -1,   299,   214,   127,   166,     1,    -1,
     299,   214,   127,   166,    -1,   299,   214,   127,    -1,   299,
     214,   127,     1,    -1,   171,   126,    -1,   171,     1,   126,
      -1,   300,   214,   127,   167,    -1,   300,   214,   127,   166,
       1,    -1,   300,   214,   127,   166,    -1,   300,   214,   127,
      -1,   300,   214,   127,     1,    -1,   301,   214,   127,   166,
     126,    -1,   301,   214,   127,   167,   126,    -1,   301,   214,
     127,   126,    -1,   174,   126,    -1,   174,     1,   126,    -1,
     147,   127,   166,    -1,   214,   127,   166,    -1,   147,   127,
     167,    -1,   147,   127,    -1,   147,   127,   166,     1,    -1,
     147,   127,     1,    -1,   214,   127,   167,    -1,   214,   127,
      -1,   214,   127,   166,     1,    -1,   214,   127,     1,    -1,
     176,   126,    -1,   176,     1,   126,    -1,   127,   167,    -1,
     127,   166,     1,    -1,   127,     1,    -1,   127,    -1,   127,
     166,    -1,   221,   124,   340,    -1,   221,   124,   341,    -1,
     221,   124,     1,    -1,   221,     1,    -1,   177,    -1,   179,
     125,   177,    -1,   180,   125,   177,    -1,   178,    -1,   179,
     125,   178,    -1,   180,   125,   178,    -1,   179,     1,    -1,
      68,   305,   214,   127,    -1,    68,   305,   329,   214,   127,
      -1,    68,   305,   127,    -1,    68,   305,   329,   127,    -1,
      68,     1,   127,    -1,   181,    -1,   182,    69,   375,    -1,
     182,    70,   375,    -1,   182,    95,   375,    -1,   182,    91,
      -1,   182,    97,   216,    -1,   182,   126,    -1,    99,   305,
     214,   127,    -1,    99,   305,   329,   214,   127,    -1,    99,
     305,   127,    -1,    99,   305,   329,   127,    -1,    99,     1,
     127,    -1,   184,    -1,   185,    69,   375,    -1,   185,    70,
     375,    -1,   185,   126,    -1,   214,    -1,   187,   214,    -1,
     187,   375,    -1,    73,   375,    -1,   188,    -1,   189,   188,
      -1,    88,   120,   187,   121,   375,    -1,    88,   120,   242,
     121,   127,   189,   126,    -1,   242,   128,    88,   120,   242,
     121,   127,   189,   126,    -1,    89,   120,   242,   125,   187,
     121,    -1,   242,   128,    89,   120,   242,   125,   187,   121,
      -1,    89,   120,   242,   121,    -1,   242,   128,    89,   120,
     242,   121,    -1,    90,    -1,    90,   187,    -1,   221,   128,
      90,    -1,   242,   128,    90,   187,    -1,   195,   123,    -1,
     179,   123,    -1,   154,    -1,   183,    -1,   363,   154,    -1,
     363,   183,    -1,   186,    -1,    91,    -1,    93,    -1,    94,
      -1,    99,   120,   214,   121,   124,   340,   123,    -1,   123,
      -1,   363,   129,    -1,   363,   120,   214,   121,    -1,   155,
      -1,   300,    -1,   300,   287,    -1,   363,   300,   287,    -1,
     363,   300,    -1,   363,   173,    -1,   363,   170,    -1,    98,
     300,   287,    -1,   190,    -1,    92,   214,    -1,    92,   147,
      -1,    96,   214,    -1,   173,    -1,   170,    -1,   179,    -1,
     171,     1,    -1,   174,     1,    -1,   363,   155,    -1,   363,
     171,     1,    -1,   363,   174,     1,    -1,   180,    -1,   194,
      -1,   196,   194,    -1,   197,   194,    -1,   195,    -1,   196,
       1,    -1,   197,     1,    -1,   196,   195,    -1,   197,   195,
      -1,   300,    -1,   300,   329,    -1,   300,    -1,   300,   329,
      -1,    65,   214,    -1,    65,   214,   124,   199,    -1,    65,
     214,   129,   198,    -1,    65,   214,   129,   198,   124,   199,
      -1,    65,   146,    -1,    65,   146,   124,   199,    -1,    65,
     146,   129,   198,    -1,    65,   146,   129,   198,   124,   199,
      -1,   214,    -1,   214,    -1,   214,   124,   201,    -1,   232,
      -1,   300,   214,   124,   203,    -1,   300,   329,   214,   124,
     203,    -1,   200,    -1,   202,    -1,   204,    -1,   205,    -1,
     206,   125,   205,    -1,   203,    -1,   201,    -1,   199,    -1,
     214,   124,   203,    -1,   214,   124,   201,    -1,   214,   124,
     199,    -1,   207,    -1,   208,   125,   207,    -1,    65,    -1,
     209,   214,    -1,   209,   145,    -1,   214,   209,   214,    -1,
     214,   209,   145,    -1,   209,   214,   118,   206,   119,    -1,
     209,   145,   118,   206,   119,    -1,   214,   209,   214,   118,
     206,   119,    -1,   214,   209,   145,   118,   206,   119,    -1,
     213,   126,    -1,   212,   123,    -1,   210,   127,   126,    -1,
     212,   127,   126,    -1,   209,   214,   123,    -1,   209,   144,
     123,    -1,   210,   129,   304,    -1,   210,   127,   197,    -1,
     212,   127,   197,    -1,   210,   127,   196,    -1,   212,   127,
     196,    -1,   210,   127,     1,    -1,   212,   127,     1,    -1,
       3,    -1,   217,    -1,   120,   244,   121,    -1,   386,    -1,
     130,   386,    -1,   130,   386,   128,   386,    -1,   214,    -1,
     173,    -1,    85,   120,   375,   121,    -1,    85,   120,   244,
     121,    -1,    85,   120,   347,   121,   338,    -1,    85,   120,
     347,   121,   120,   347,   121,   338,    -1,     4,    -1,   216,
      -1,   120,   121,    -1,    71,   307,   330,   131,   266,   132,
      -1,    71,   307,   330,   131,   267,   132,    -1,    71,   307,
     131,   266,   132,    -1,    71,   307,   131,   267,   132,    -1,
     102,   307,   330,   131,   266,   132,    -1,   102,   307,   330,
     131,   267,   132,    -1,   102,   307,   131,   266,   132,    -1,
     102,   307,   131,   267,   132,    -1,    72,   266,   306,   330,
     131,   266,   132,    -1,    72,   266,   306,   330,   131,   267,
     132,    -1,    72,   266,   306,   131,   266,   132,    -1,    72,
     266,   306,   131,   267,   132,    -1,   103,   266,   306,   330,
     131,   266,   132,    -1,   103,   266,   306,   330,   131,   267,
     132,    -1,   103,   266,   306,   131,   266,   132,    -1,   103,
     266,   306,   131,   267,   132,    -1,    65,   120,   299,   121,
      -1,    65,   120,   299,   329,   121,    -1,    65,   120,   214,
     121,    -1,   104,   120,   242,   125,   347,   121,    -1,    98,
     120,   214,   121,    -1,   398,    -1,   399,    -1,   400,    -1,
     401,    -1,   131,   223,   132,    -1,   131,   132,    -1,   175,
      -1,   176,     1,    -1,   120,   244,    -1,   120,   264,    -1,
     215,    -1,   221,   131,   244,   132,    -1,   221,   131,   264,
     132,    -1,   221,   120,   121,    -1,   221,   120,   223,   121,
      -1,   221,   120,   224,   121,    -1,   221,   128,   214,    -1,
     221,     7,   214,    -1,   221,     8,    -1,   221,     9,    -1,
     246,   131,   244,   132,    -1,   246,   131,   264,   132,    -1,
     246,   120,   121,    -1,   246,   120,   223,   121,    -1,   246,
     128,   214,    -1,   246,     7,   214,    -1,   246,     8,    -1,
     246,     9,    -1,   217,    -1,   222,   131,   244,   132,    -1,
     222,   131,   264,   132,    -1,   222,   120,   121,    -1,   222,
     120,   223,   121,    -1,   222,   120,   224,   121,    -1,   222,
     128,   214,    -1,   222,     7,   214,    -1,   222,     8,    -1,
     222,     9,    -1,   247,   131,   244,   132,    -1,   247,   131,
     264,   132,    -1,   247,   120,   121,    -1,   247,   120,   223,
     121,    -1,   247,   128,   214,    -1,   247,     7,   214,    -1,
     247,     8,    -1,   247,     9,    -1,   242,    -1,   218,    -1,
     223,   125,   242,    -1,   223,   125,   218,    -1,   263,    -1,
     219,    -1,   223,   125,   263,    -1,   223,   125,   219,    -1,
     223,   125,    -1,     8,   226,    -1,     9,   226,    -1,   228,
     229,    -1,   228,   218,    -1,     6,   120,   226,   121,    -1,
       6,   227,    -1,     6,   120,   348,   121,    -1,     6,   120,
      65,   144,   121,    -1,     6,   120,    65,   143,   121,    -1,
     109,   120,   226,   121,    -1,   109,   227,    -1,   109,   120,
     348,   121,    -1,   225,    -1,   221,    -1,   225,    -1,   222,
      -1,   133,    -1,   117,    -1,   134,    -1,   135,    -1,   122,
      -1,   136,    -1,    73,    -1,    84,    -1,   226,    -1,   120,
     347,   121,   229,    -1,   229,    -1,   230,   117,   229,    -1,
     230,   137,   229,    -1,   230,   138,   229,    -1,   252,   117,
     229,    -1,   252,   137,   229,    -1,   252,   138,   229,    -1,
     230,    -1,   231,   134,   230,    -1,   231,   135,   230,    -1,
     253,   134,   230,    -1,   253,   135,   230,    -1,   231,    -1,
     232,    10,   231,    -1,   232,    11,   231,    -1,   254,    10,
     231,    -1,   254,    11,   231,    -1,   234,   118,    -1,   232,
      -1,   233,   232,    -1,   234,   119,   232,    -1,   234,    12,
     232,    -1,   234,    13,   232,    -1,   255,   118,   232,    -1,
     255,   119,   232,    -1,   255,    12,   232,    -1,   255,    13,
     232,    -1,   234,    -1,   235,    14,   234,    -1,   235,    15,
     234,    -1,   256,    14,   234,    -1,   256,    15,   234,    -1,
     235,    14,   218,    -1,   235,    15,   218,    -1,   256,    14,
     218,    -1,   256,    15,   218,    -1,   235,    -1,   236,   133,
     235,    -1,   257,   133,   235,    -1,   236,   133,   218,    -1,
     257,   133,   218,    -1,   236,    -1,   237,   139,   236,    -1,
     258,   139,   236,    -1,   237,   139,   218,    -1,   258,   139,
     218,    -1,   237,    -1,   238,   140,   237,    -1,   259,   140,
     237,    -1,   238,   140,   218,    -1,   259,   140,   218,    -1,
     238,    -1,   239,    16,   238,    -1,   260,    16,   238,    -1,
     239,    -1,   240,    17,   239,    -1,   261,    17,   239,    -1,
     240,    -1,   240,   141,   244,   129,   241,    -1,   240,   141,
     264,   129,   241,    -1,   261,   141,   244,   129,   241,    -1,
     261,   141,   264,   129,   241,    -1,   240,   141,   245,   129,
     241,    -1,   240,   141,   265,   129,   241,    -1,   261,   141,
     245,   129,   241,    -1,   261,   141,   265,   129,   241,    -1,
     240,   141,   244,   129,   218,    -1,   240,   141,   264,   129,
     218,    -1,   261,   141,   244,   129,   218,    -1,   261,   141,
     264,   129,   218,    -1,   240,   141,   245,   129,   218,    -1,
     240,   141,   265,   129,   218,    -1,   261,   141,   245,   129,
     218,    -1,   261,   141,   265,   129,   218,    -1,   241,    -1,
     226,   243,   242,    -1,   249,   243,   242,    -1,   241,   243,
     242,    -1,   262,   243,   242,    -1,   226,   243,   218,    -1,
     249,   243,   218,    -1,   241,   243,   218,    -1,   262,   243,
     218,    -1,   124,    -1,    18,    -1,    19,    -1,    20,    -1,
      21,    -1,    22,    -1,    23,    -1,    24,    -1,    25,    -1,
      26,    -1,    27,    -1,   242,    -1,   244,   125,   242,    -1,
     264,   125,   242,    -1,   264,   121,    -1,   218,    -1,   244,
     125,   218,    -1,   264,   125,   218,    -1,   220,    -1,     1,
      -1,   221,     1,    -1,   174,     1,    -1,   221,     7,     1,
      -1,   246,     7,     1,    -1,   221,   120,   223,    -1,   221,
     120,   224,    -1,   221,   128,     1,    -1,   246,   120,   224,
      -1,   246,   128,     1,    -1,     1,    -1,   222,     1,    -1,
     174,     1,    -1,   222,     7,     1,    -1,   247,     7,     1,
      -1,   222,   120,   223,    -1,   222,   120,   224,    -1,   222,
     128,     1,    -1,   247,   120,   224,    -1,   247,   128,     1,
      -1,     8,   249,    -1,     9,   249,    -1,   228,   251,    -1,
     228,   219,    -1,     6,   120,   249,    -1,     6,   250,    -1,
       6,   120,   348,   121,     1,    -1,     6,   120,    65,   144,
     121,     1,    -1,     6,   120,    65,   143,   121,     1,    -1,
     109,   120,   249,    -1,   109,   250,    -1,   109,   120,   348,
     121,     1,    -1,   248,    -1,   246,    -1,   248,    -1,   247,
      -1,   249,    -1,   120,   347,   121,   251,    -1,   251,    -1,
     230,   117,   251,    -1,   230,   137,   251,    -1,   230,   138,
     251,    -1,   252,   117,   251,    -1,   252,   137,   251,    -1,
     252,   138,   251,    -1,   252,    -1,   231,   134,   252,    -1,
     231,   135,   252,    -1,   253,   134,   252,    -1,   253,   135,
     252,    -1,   253,    -1,   232,    10,   253,    -1,   232,    11,
     253,    -1,   254,    10,   253,    -1,   254,    11,   253,    -1,
     254,    -1,   233,   254,    -1,   234,   119,   254,    -1,   234,
      12,   254,    -1,   234,    13,   254,    -1,   255,   118,   254,
      -1,   255,   119,   254,    -1,   255,    12,   254,    -1,   255,
      13,   254,    -1,   255,    -1,   235,    14,   255,    -1,   235,
      15,   255,    -1,   256,    14,   255,    -1,   256,    15,   255,
      -1,   235,    14,   219,    -1,   235,    15,   219,    -1,   256,
      14,   219,    -1,   256,    15,   219,    -1,   256,    -1,   236,
     133,   256,    -1,   257,   133,   256,    -1,   236,   133,   219,
      -1,   257,   133,   219,    -1,   257,    -1,   237,   139,   257,
      -1,   258,   139,   257,    -1,   237,   139,   219,    -1,   258,
     139,   219,    -1,   258,    -1,   238,   140,   258,    -1,   259,
     140,   258,    -1,   238,   140,   219,    -1,   259,   140,   219,
      -1,   259,    -1,   239,    16,   259,    -1,   260,    16,   259,
      -1,   260,    -1,   240,    17,   260,    -1,   261,    17,   260,
      -1,   261,    -1,   240,   141,   244,   129,   261,    -1,   240,
     141,   264,   129,   261,    -1,   261,   141,   244,   129,   261,
      -1,   261,   141,   264,   129,   261,    -1,   240,   141,   244,
     129,    -1,   240,   141,   264,   129,    -1,   261,   141,   244,
     129,    -1,   261,   141,   264,   129,    -1,   240,   141,   245,
     129,   261,    -1,   240,   141,   265,   129,   261,    -1,   261,
     141,   245,   129,   261,    -1,   261,   141,   265,   129,   261,
      -1,   240,   141,   245,   129,    -1,   240,   141,   265,   129,
      -1,   261,   141,   245,   129,    -1,   261,   141,   265,   129,
      -1,   240,   141,   244,   129,   219,    -1,   240,   141,   264,
     129,   219,    -1,   261,   141,   244,   129,   219,    -1,   261,
     141,   264,   129,   219,    -1,   240,   141,   245,   129,   219,
      -1,   240,   141,   265,   129,   219,    -1,   261,   141,   245,
     129,   219,    -1,   261,   141,   265,   129,   219,    -1,   240,
     141,   129,    -1,   261,   141,   129,    -1,   240,   141,    -1,
     261,   141,    -1,   262,    -1,   226,   243,   263,    -1,   249,
     243,   263,    -1,   226,   243,   219,    -1,   249,   243,   219,
      -1,   263,    -1,   242,     1,    -1,   244,   125,   263,    -1,
     264,   125,   263,    -1,   244,   244,    -1,   264,   244,    -1,
     244,   264,    -1,   219,    -1,   218,     1,    -1,   244,   125,
     219,    -1,   264,   125,   219,    -1,   241,    -1,   262,    -1,
      29,    -1,    30,    -1,    31,    -1,    32,    -1,    33,    -1,
     116,    -1,    29,    -1,    30,    -1,    31,    -1,    32,    -1,
      33,    -1,   116,    -1,   214,    -1,   214,   124,   266,    -1,
     214,   124,   267,    -1,   270,    -1,   271,   125,   270,    -1,
     271,   125,    -1,    50,    -1,   272,   214,    -1,   272,   147,
      -1,   275,   126,    -1,   272,   214,   127,   126,    -1,   272,
     147,   127,   126,    -1,   272,   127,   271,    -1,   272,   127,
       1,    -1,   272,   214,   127,   271,    -1,   272,   214,   127,
     271,     1,    -1,   272,   214,   127,     1,    -1,   272,   214,
     127,   271,   123,   196,    -1,   272,   214,   127,   271,   123,
     197,    -1,   272,   147,   127,   271,    -1,   272,   147,   127,
     271,     1,    -1,   272,   147,   127,     1,    -1,   272,   147,
     127,   271,   123,   196,    -1,   272,   147,   127,   271,   123,
     197,    -1,   272,   214,    -1,   272,   147,    -1,   278,   126,
      -1,   276,   129,   304,   127,   126,    -1,   276,   127,   126,
      -1,   276,   129,   304,   127,   271,    -1,   276,   129,   304,
     127,   271,     1,    -1,   276,   129,   304,   127,     1,    -1,
     276,   129,   304,   127,   271,   123,   196,    -1,   276,   129,
     304,   127,   271,   123,   197,    -1,   276,   129,   304,   127,
     271,     1,   123,   196,    -1,   276,   129,   304,   127,   271,
       1,   123,   197,    -1,   276,   129,   304,   127,     1,   123,
     196,    -1,   276,   129,   304,   127,     1,   123,   197,    -1,
     272,   127,   271,    -1,   272,   127,     1,    -1,   276,   127,
     271,    -1,   276,   127,   271,     1,    -1,   276,   127,     1,
      -1,   276,   127,   271,   123,   196,    -1,   276,   127,   271,
     123,   197,    -1,   277,    -1,   294,    -1,   278,    -1,   295,
      -1,   320,    -1,    44,    -1,    45,    -1,   281,    -1,   282,
      -1,   283,   282,    -1,    46,    -1,    34,    -1,    35,    -1,
      36,    -1,    37,    -1,    38,    -1,    47,    -1,    39,    -1,
      42,    -1,    43,    -1,    40,    -1,    41,    -1,    85,    -1,
     291,    -1,   273,    -1,   144,    -1,    87,   120,   242,   121,
      -1,   100,   120,   144,   121,    -1,   100,   120,   214,   121,
      -1,    66,    -1,    82,    -1,    83,    -1,   113,    -1,   112,
      -1,   114,    -1,   115,    -1,    46,    -1,    34,    -1,    35,
      -1,    36,    -1,    37,    -1,    38,    -1,    47,    -1,    39,
      -1,    42,    -1,    43,    -1,    40,    -1,    41,    -1,    85,
      -1,   291,    -1,   273,    -1,   147,    -1,   113,    -1,   112,
      -1,   114,    -1,   115,    -1,    87,   120,   242,   121,    -1,
     100,   120,   144,   121,    -1,   100,   120,   214,   121,    -1,
      66,    -1,   337,    -1,   337,   325,    -1,   129,   266,    -1,
     337,   129,   266,    -1,   337,   129,   266,   129,   266,    -1,
     129,   267,    -1,   337,   129,   267,    -1,   337,   129,   266,
     129,   267,    -1,   337,   129,   267,   129,   267,    -1,   337,
     129,   267,   129,   266,    -1,   286,    -1,   287,   125,   286,
      -1,   296,   214,    -1,   296,   145,    -1,   296,   320,   214,
      -1,   296,   320,   145,    -1,   290,   126,    -1,   288,   127,
     126,    -1,   296,   127,   126,    -1,   296,   320,   127,   126,
      -1,   288,   127,   196,    -1,   288,   127,   197,    -1,   288,
     127,     1,    -1,   296,   127,   196,    -1,   296,   127,   197,
      -1,   296,   127,     1,    -1,   296,   320,   127,   196,    -1,
     296,   320,   127,   197,    -1,   296,   320,   127,     1,    -1,
     288,    -1,   288,    -1,   288,   118,   206,   119,    -1,   292,
     129,   304,    -1,   295,   126,    -1,   293,   127,   126,    -1,
     292,   127,   126,    -1,   296,   127,   126,    -1,   293,   127,
     196,    -1,   293,   127,   197,    -1,   293,   127,     1,    -1,
     292,   127,   196,    -1,   292,   127,   197,    -1,   292,   127,
       1,    -1,   296,   127,   196,    -1,   296,   127,   197,    -1,
     296,   127,     1,    -1,    48,    -1,    49,    -1,   282,    -1,
     297,   282,    -1,   284,    -1,   297,   284,    -1,   274,    -1,
     297,   274,    -1,   289,    -1,   297,   289,    -1,   282,    -1,
     298,   282,    -1,   284,    -1,   298,   284,    -1,   143,    -1,
     298,   143,    -1,   274,    -1,   298,   274,    -1,   289,    -1,
     298,   289,    -1,   268,    -1,   299,   268,    -1,   282,    -1,
     299,   282,    -1,   285,    -1,   299,   285,    -1,   274,    -1,
     299,   274,    -1,   289,    -1,   299,   289,    -1,   268,    -1,
     300,   268,    -1,   282,    -1,   300,   282,    -1,   284,    -1,
     300,   284,    -1,   143,    -1,   300,   143,    -1,   289,    -1,
     300,   289,    -1,   274,    -1,   300,   274,    -1,   269,    -1,
     301,   269,    -1,   282,    -1,   301,   282,    -1,   284,    -1,
     301,   284,    -1,   143,    -1,   301,   143,    -1,   279,    -1,
     301,   279,    -1,   280,    -1,   301,   280,    -1,    81,    -1,
      80,    -1,   268,    -1,   303,   268,    -1,   282,    -1,   303,
     282,    -1,   285,    -1,   303,   285,    -1,   214,    -1,   303,
     214,    -1,   214,   118,   208,   119,    -1,   303,   214,   118,
     208,   119,    -1,   303,    -1,   296,    -1,   268,    -1,   305,
     268,    -1,   282,    -1,   305,   282,    -1,   285,    -1,   305,
     285,    -1,   214,    -1,   305,   214,    -1,   214,   118,   208,
     119,    -1,   305,   214,   118,   208,   119,    -1,   268,    -1,
     306,   268,    -1,   282,    -1,   306,   282,    -1,   285,    -1,
     306,   285,    -1,   289,    -1,   306,   289,    -1,   274,    -1,
     306,   274,    -1,   214,    -1,   306,   214,    -1,   214,   118,
     208,   119,    -1,   306,   214,   118,   208,   119,    -1,   268,
      -1,   307,   268,    -1,   282,    -1,   307,   282,    -1,   285,
      -1,   307,   285,    -1,   289,    -1,   307,   289,    -1,   274,
      -1,   307,   274,    -1,   214,    -1,   307,   214,    -1,   214,
     118,   208,   119,    -1,   307,   214,   118,   208,   119,    -1,
     309,   125,     1,    -1,   308,   125,     1,    -1,   214,    -1,
     309,   125,   214,    -1,   308,   125,   214,    -1,   351,   125,
     214,    -1,   352,   125,   214,    -1,   311,    -1,   145,    -1,
      37,    -1,   145,   131,   266,   132,    -1,   145,   131,   267,
     132,    -1,   145,   131,   144,   132,    -1,   145,   131,   132,
      -1,   310,   131,   266,   132,    -1,   310,   131,   267,   132,
      -1,   310,   131,   144,   132,    -1,   310,   131,   132,    -1,
     214,    -1,   120,   331,   121,    -1,   120,   320,   331,   121,
      -1,   120,   332,   121,    -1,   120,   320,   332,   121,    -1,
     311,   131,   266,   132,    -1,   311,   131,   267,   132,    -1,
     311,   131,   144,   132,    -1,   311,   131,   132,    -1,   311,
     120,    -1,   312,   353,   121,    -1,   312,   354,   121,    -1,
     312,   309,   121,    -1,   312,   308,   121,    -1,   312,   121,
      -1,   312,   308,    -1,   312,     1,    -1,   312,   351,   120,
      -1,   312,   300,   214,   120,    -1,   313,    -1,   311,    -1,
     310,   120,    -1,   316,   353,   121,    -1,   316,   354,   121,
      -1,   316,   309,   121,    -1,   316,   308,   121,    -1,   316,
     121,    -1,   316,   308,    -1,   316,     1,    -1,   316,   351,
     120,    -1,   316,   300,   214,   120,    -1,   317,    -1,   310,
      -1,    74,    -1,    75,    -1,   325,    -1,    86,   120,   386,
     121,    -1,    79,    -1,   110,    -1,   111,    -1,     3,    -1,
      28,    -1,    75,    -1,    74,    -1,    44,    -1,   322,    -1,
     322,   120,   244,   121,    -1,   323,    -1,   324,   323,    -1,
     324,   125,   323,    -1,   321,   120,   120,   324,   121,   121,
      -1,   321,   120,   120,   121,   121,    -1,   120,   329,   121,
      -1,   120,   320,   329,   121,    -1,   131,   132,    -1,   131,
     266,   132,    -1,   131,   267,   132,    -1,   131,   144,   132,
      -1,   326,   131,   132,    -1,   326,   131,   266,   132,    -1,
     326,   131,   144,   132,    -1,   326,   131,   267,   132,    -1,
     120,   121,    -1,   120,   353,   121,    -1,   120,   354,   121,
      -1,   326,   120,   121,    -1,   326,   120,   353,   121,    -1,
     326,   120,   354,   121,    -1,   120,   330,   121,    -1,   120,
     320,   330,   121,    -1,   120,   121,    -1,   120,   353,   121,
      -1,   120,   354,   121,    -1,   327,   120,   121,    -1,   327,
     120,   353,   121,    -1,   327,   120,   354,   121,    -1,   117,
      -1,   117,   283,    -1,   117,   328,    -1,   117,   283,   328,
      -1,   328,    -1,   326,    -1,   328,   326,    -1,   320,   328,
      -1,   320,   328,   326,    -1,   328,    -1,   327,    -1,   328,
     327,    -1,   320,   328,    -1,   320,   328,   327,    -1,   315,
      -1,   328,   315,    -1,   320,   328,   315,    -1,   331,   320,
      -1,   337,   320,    -1,   319,    -1,   328,   319,    -1,   320,
     328,   319,    -1,   332,   320,    -1,   313,    -1,   328,   313,
      -1,   320,   328,   313,    -1,   328,   320,   313,    -1,   314,
      -1,   328,   314,    -1,   320,   328,   314,    -1,   328,   320,
     314,    -1,   317,    -1,   328,   317,    -1,   320,   328,   317,
      -1,   328,   320,   317,    -1,   318,    -1,   328,   318,    -1,
     320,   328,   318,    -1,   328,   320,   318,    -1,   310,    -1,
     328,   310,    -1,   320,   328,   310,    -1,   328,   320,   310,
      -1,   242,    -1,   127,   342,   126,    -1,   127,   342,   125,
     126,    -1,   263,    -1,   127,   342,   126,     1,    -1,   127,
     342,    -1,   127,   342,   125,   126,     1,    -1,   127,   342,
     125,    -1,   241,    -1,   218,    -1,   262,    -1,   219,    -1,
     338,    -1,   339,    -1,   342,   125,   338,    -1,   342,   125,
     339,    -1,   342,   338,    -1,   342,   339,    -1,   331,    -1,
     332,    -1,   331,   124,   338,    -1,   331,     1,    -1,   331,
     124,   339,    -1,   343,    -1,   345,   125,   343,    -1,    37,
     125,   343,    -1,    38,   125,   343,    -1,   145,   125,   343,
      -1,   346,   125,   343,    -1,   344,    -1,   343,     1,    -1,
     345,   125,   344,    -1,   346,   125,   344,    -1,   297,    -1,
     297,   329,    -1,   298,    -1,   298,   329,    -1,   300,   332,
      -1,   300,   329,    -1,   300,   133,    -1,   300,   133,   332,
      -1,   300,    -1,    65,    -1,   300,   332,     1,    -1,   300,
     329,     1,    -1,   349,    -1,   351,   125,   349,    -1,   351,
       1,   125,   349,    -1,   352,   125,   349,    -1,   352,     1,
     125,   349,    -1,     1,   125,   349,    -1,   309,   125,   349,
      -1,   309,     1,   125,   349,    -1,   308,   125,   349,    -1,
     308,     1,   125,   349,    -1,   350,    -1,   351,   125,   350,
      -1,   352,   125,   350,    -1,   352,     1,   125,   350,    -1,
       1,   125,   350,    -1,   309,   125,   350,    -1,   308,   125,
     350,    -1,   308,     1,   125,   350,    -1,   351,    -1,   351,
     125,    51,    -1,   352,   125,    51,    -1,   309,   125,    51,
      -1,   308,   125,    51,    -1,     1,   125,    51,    -1,   352,
      -1,   351,   125,     1,    -1,   352,     1,    -1,   360,    -1,
     325,    -1,   375,    -1,   123,    -1,   129,    -1,   244,   123,
      -1,   378,    -1,   380,    -1,   382,    -1,   359,    -1,   193,
     123,    -1,   192,   123,    -1,   191,   123,    -1,   361,    -1,
     381,    -1,   376,    -1,   379,    -1,   383,    -1,   382,     1,
      -1,   264,    -1,   386,    -1,   386,   120,   242,   121,    -1,
     357,    -1,   358,   125,   357,    -1,    -1,    86,   282,   120,
     386,   121,   123,    -1,    86,   282,   120,   386,   129,   358,
     121,   123,    -1,    86,   282,   120,   386,   129,   358,   129,
     358,   121,   123,    -1,    86,   282,   120,   386,   129,   358,
     129,   358,   129,   358,   121,   123,    -1,    86,   282,   120,
     386,     3,   358,   121,   123,    -1,    86,   282,   120,   386,
       3,   358,   129,   358,   121,   123,    -1,    86,   282,   120,
     386,   129,   358,     3,   358,   121,   123,    -1,    86,   120,
     386,   121,   123,    -1,    86,   120,   386,   129,   358,   121,
     123,    -1,    86,   120,   386,   129,   358,   129,   358,   121,
     123,    -1,    86,   120,   386,   129,   358,   129,   358,   129,
     358,   121,   123,    -1,    86,   120,   386,     3,   358,   121,
     123,    -1,    86,   120,   386,     3,   358,   129,   358,   121,
     123,    -1,    86,   120,   386,   129,   358,     3,   358,   121,
     123,    -1,   214,   129,   355,    -1,    52,   266,   129,   355,
      -1,    52,   267,   129,   355,    -1,    52,   129,   355,    -1,
      53,   129,   355,    -1,   214,   129,   364,    -1,    52,   266,
     129,   364,    -1,    52,   267,   129,   364,    -1,    52,   129,
     364,    -1,    53,   129,   364,    -1,   214,   129,   356,    -1,
      52,   266,   129,   356,    -1,    52,   267,   129,   356,    -1,
      52,   129,   356,    -1,    52,   129,    -1,    53,   129,   356,
      -1,    53,   129,    -1,   214,   129,   367,    -1,    52,   266,
     129,   367,    -1,    52,   267,   129,   367,    -1,    52,   129,
     367,    -1,    53,   129,   367,    -1,    80,    -1,    81,    -1,
      53,    -1,    80,    -1,    81,    -1,   299,   123,    -1,   299,
     345,   123,    -1,   168,   123,    -1,   367,   123,    -1,   301,
     123,    -1,   301,   345,   123,    -1,   302,   345,   123,    -1,
     172,   123,    -1,    77,   214,   124,   241,   123,    -1,    31,
      77,   214,   124,   241,   123,    -1,   301,     1,    -1,   299,
       1,    -1,   367,     1,    -1,   169,     1,    -1,   168,     1,
      -1,   299,   346,    -1,   364,    -1,   368,   364,    -1,   369,
     364,    -1,   368,     1,   123,    -1,   367,    -1,   368,   367,
      -1,   355,    -1,   370,   355,    -1,   371,   355,    -1,   356,
      -1,   370,   356,    -1,   371,   356,    -1,   370,   364,    -1,
     371,   364,    -1,   370,   367,    -1,   371,   367,    -1,   370,
      -1,   368,    -1,   368,   370,    -1,   369,   370,    -1,   371,
      -1,   369,    -1,   368,   371,    -1,   369,   371,    -1,   127,
      -1,   376,   126,    -1,   374,   373,    -1,   374,    -1,   374,
     372,    -1,   123,    -1,   244,   123,    -1,   264,   123,    -1,
      54,   120,   244,   121,   355,    -1,    54,   120,   264,   121,
     355,    -1,    54,   120,   244,   121,   355,    64,   355,    -1,
      54,   120,   264,   121,   355,    64,   355,    -1,    55,   120,
     244,   121,   355,    -1,    55,   120,   264,   121,   355,    -1,
      54,   120,   264,    -1,   378,     1,    -1,    56,   120,   244,
     121,   355,    -1,    56,   120,   264,   355,    -1,    56,   120,
     121,   355,    -1,    57,   355,    56,   120,   244,   121,   123,
      -1,    57,   355,    56,   120,   264,   123,    -1,    58,   120,
     377,   377,   121,   355,    -1,    58,   120,   377,   121,   355,
      -1,    58,   120,   377,   377,   244,   121,   355,    -1,    58,
     120,   377,   377,   264,   355,    -1,    58,   120,   121,   355,
      -1,    58,   120,   214,   129,   244,   121,   355,    -1,    58,
     120,   214,   129,   244,   123,   244,   121,   355,    -1,    58,
     120,     1,    -1,    58,   120,   264,     1,    -1,    58,   120,
     377,     1,    -1,    58,   120,   377,   264,     1,    -1,    58,
     120,   377,   377,   264,    -1,    58,   120,   377,   377,   121,
     356,    -1,    58,   120,   377,   377,   244,   121,   356,    -1,
      58,   120,   377,   377,   264,   356,    -1,    57,   355,    56,
     120,   244,   121,    -1,    57,   355,    56,   120,   244,    -1,
      57,   355,    56,   120,   264,    -1,    57,   355,    56,   120,
      -1,    57,   355,    56,    -1,    57,   355,    -1,    57,    -1,
      56,     1,    -1,    56,   120,   121,     1,    -1,    56,   120,
     264,    -1,    56,   120,   244,   121,   356,    -1,    56,   120,
     264,   356,    -1,    59,   214,   123,    -1,    60,   123,    -1,
      61,   123,    -1,    62,   123,    -1,    62,   244,   123,    -1,
      62,   264,   123,    -1,    62,   218,   123,    -1,    62,   219,
     123,    -1,    62,   264,    -1,    62,   219,    -1,    62,    -1,
      59,    -1,   301,   333,   368,   375,    -1,   301,   333,   375,
      -1,   301,   335,   368,   375,    -1,   301,   335,   375,    -1,
     333,   368,   375,    -1,   333,   375,    -1,   301,   333,   368,
     376,    -1,   301,   333,   376,    -1,   301,   335,   368,   376,
      -1,   301,   335,   376,    -1,   333,   368,   376,    -1,   333,
     376,    -1,     5,    -1,   386,     5,    -1,   384,    -1,   211,
      -1,   301,   211,    -1,   365,    -1,    76,   386,    -1,    76,
      31,   386,    -1,    76,   214,   386,    -1,   123,    -1,   362,
     384,    -1,   362,   211,    -1,   362,   365,    -1,   362,    76,
     386,    -1,   362,    76,    31,   386,    -1,   362,    76,   214,
     386,    -1,   362,   129,    -1,    31,   129,    -1,   101,   214,
      -1,   101,   147,    -1,   392,    -1,   362,   392,    -1,   213,
      -1,   301,   213,    -1,   385,    -1,   362,   213,    -1,   362,
     385,    -1,   366,    -1,   362,   366,    -1,   388,    -1,   390,
     388,    -1,   389,   388,    -1,   390,     1,    -1,   389,     1,
      -1,   387,    -1,   390,   387,    -1,   389,   211,    -1,   389,
     362,   211,    -1,   390,    -1,   389,    -1,    -1,   105,   386,
     214,   127,   397,   126,    -1,   105,   386,   147,   127,   397,
     126,    -1,   105,   386,   127,   397,   126,    -1,   300,   214,
     386,   123,    -1,   214,    -1,   119,   214,    -1,   118,   214,
      -1,   394,    -1,   395,   125,   394,    -1,   107,   395,   123,
      -1,   107,   395,   214,   123,    -1,   393,    -1,   396,    -1,
     397,   393,    -1,   397,   396,    -1,   108,   120,   242,   125,
     242,   121,    -1,   106,   120,   386,   125,   214,   121,    -1,
     107,   120,   386,   125,   214,   121,    -1,   105,   120,   386,
     121,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   279,   279,   308,   367,   368,   468,   472,   475,   476,
     477,   526,   528,   533,   538,   543,   545,   550,   552,   557,
     559,   564,   566,   568,   570,   572,   576,   580,   593,   595,
     597,   599,   601,   607,   609,   614,   619,   624,   626,   628,
     633,   634,   638,   639,   650,   654,   655,   657,   662,   663,
     665,   668,   680,   691,   710,   712,   717,   718,   719,   720,
     721,   722,   723,   724,   725,   729,   730,   731,   732,   736,
     737,   738,   739,   740,   741,   742,   746,   748,   753,   755,
     757,   759,   761,   791,   793,   798,   800,   802,   804,   806,
     835,   837,   839,   844,   846,   851,   853,   857,   859,   861,
     863,   868,   871,   874,   877,   942,   944,   949,   951,   953,
     955,   957,   988,   992,   993,   994,   998,   999,  1000,  1004,
    1005,  1006,  1007,  1011,  1014,  1017,  1020,  1023,  1028,  1029,
    1031,  1033,  1035,  1037,  1042,  1046,  1049,  1052,  1055,  1058,
    1063,  1064,  1066,  1071,  1075,  1077,  1082,  1084,  1089,  1091,
    1096,  1101,  1103,  1108,  1110,  1112,  1114,  1119,  1121,  1123,
    1125,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,  1138,
    1139,  1140,  1142,  1143,  1145,  1149,  1152,  1153,  1154,  1155,
    1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,  1165,
    1167,  1168,  1172,  1173,  1174,  1178,  1182,  1183,  1184,  1188,
    1189,  1190,  1191,  1192,  1196,  1197,  1209,  1210,  1214,  1215,
    1216,  1217,  1218,  1219,  1220,  1221,  1225,  1229,  1230,  1234,
    1242,  1243,  1247,  1248,  1249,  1253,  1254,  1258,  1259,  1260,
    1261,  1262,  1263,  1303,  1304,  1308,  1316,  1317,  1325,  1326,
    1328,  1329,  1338,  1339,  1343,  1350,  1357,  1363,  1370,  1376,
    1385,  1392,  1398,  1404,  1410,  1416,  1422,  1433,  1438,  1439,
    1444,  1445,  1446,  1450,  1451,  1452,  1453,  1454,  1455,  1456,
    1457,  1458,  1459,  1460,  1461,  1462,  1463,  1464,  1465,  1466,
    1467,  1468,  1469,  1470,  1471,  1472,  1473,  1474,  1475,  1476,
    1477,  1478,  1480,  1481,  1482,  1483,  1484,  1486,  1487,  1491,
    1495,  1499,  1500,  1504,  1506,  1507,  1508,  1509,  1510,  1511,
    1512,  1513,  1514,  1516,  1517,  1518,  1519,  1520,  1521,  1522,
    1523,  1527,  1529,  1530,  1531,  1532,  1533,  1534,  1535,  1536,
    1537,  1539,  1540,  1541,  1542,  1543,  1544,  1545,  1546,  1550,
    1551,  1552,  1553,  1557,  1558,  1559,  1560,  1561,  1565,  1566,
    1567,  1568,  1569,  1570,  1571,  1572,  1573,  1575,  1576,  1577,
    1581,  1582,  1586,  1587,  1591,  1592,  1593,  1594,  1595,  1596,
    1597,  1598,  1602,  1603,  1607,  1608,  1609,  1610,  1611,  1612,
    1613,  1617,  1618,  1619,  1620,  1621,  1625,  1626,  1627,  1628,
    1629,  1633,  1641,  1642,  1643,  1644,  1645,  1646,  1647,  1648,
    1649,  1653,  1654,  1655,  1656,  1657,  1659,  1660,  1661,  1662,
    1666,  1667,  1668,  1670,  1671,  1675,  1676,  1677,  1679,  1680,
    1684,  1685,  1686,  1688,  1689,  1693,  1694,  1695,  1699,  1700,
    1701,  1705,  1706,  1707,  1708,  1709,  1711,  1712,  1713,  1714,
    1716,  1717,  1718,  1719,  1721,  1722,  1723,  1724,  1728,  1729,
    1730,  1731,  1732,  1734,  1735,  1736,  1737,  1741,  1742,  1743,
    1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,  1755,  1756,
    1757,  1758,  1762,  1763,  1764,  1768,  1769,  1770,  1771,  1773,
    1774,  1776,  1777,  1782,  1784,  1789,  1793,  1794,  1795,  1797,
    1798,  1800,  1801,  1806,  1808,  1813,  1817,  1818,  1819,  1820,
    1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,  1832,  1833,
    1837,  1838,  1843,  1844,  1848,  1849,  1850,  1851,  1852,  1853,
    1854,  1858,  1859,  1863,  1867,  1871,  1878,  1879,  1880,  1881,
    1882,  1886,  1887,  1938,  1939,  1940,  1941,  1942,  1943,  1944,
    1948,  1949,  1950,  1951,  1952,  1959,  1960,  1961,  1962,  1966,
    1967,  1968,  1970,  1971,  1975,  1976,  1977,  1979,  1980,  1984,
    1985,  1986,  1988,  1989,  1993,  1994,  1995,  1999,  2000,  2001,
    2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,  2015,
    2016,  2017,  2018,  2019,  2020,  2021,  2022,  2024,  2025,  2026,
    2027,  2029,  2030,  2031,  2032,  2034,  2041,  2045,  2049,  2056,
    2057,  2061,  2066,  2067,  2071,  2072,  2073,  2074,  2080,  2081,
    2082,  2086,  2087,  2088,  2089,  2093,  2095,  2099,  2100,  2101,
    2102,  2103,  2104,  2108,  2109,  2110,  2111,  2112,  2113,  2117,
    2118,  2119,  2123,  2124,  2125,  2129,  2133,  2134,  2138,  2139,
    2140,  2144,  2145,  2147,  2148,  2149,  2150,  2151,  2153,  2154,
    2155,  2156,  2157,  2161,  2162,  2166,  2167,  2168,  2172,  2173,
    2174,  2175,  2176,  2177,  2178,  2179,  2180,  2182,  2183,  2185,
    2186,  2187,  2188,  2189,  2193,  2194,  2198,  2199,  2203,  2207,
    2208,  2209,  2214,  2215,  2219,  2220,  2221,  2222,  2223,  2224,
    2225,  2226,  2227,  2228,  2229,  2230,  2231,  2232,  2233,  2234,
    2235,  2236,  2237,  2238,  2239,  2240,  2241,  2242,  2243,  2244,
    2248,  2249,  2250,  2251,  2252,  2253,  2254,  2255,  2256,  2257,
    2258,  2259,  2260,  2261,  2262,  2263,  2264,  2265,  2266,  2267,
    2268,  2269,  2270,  2271,  2277,  2279,  2281,  2283,  2285,  2287,
    2289,  2291,  2293,  2295,  2300,  2301,  2305,  2311,  2317,  2324,
    2334,  2335,  2336,  2337,  2341,  2342,  2343,  2345,  2346,  2347,
    2349,  2350,  2351,  2355,  2359,  2367,  2376,  2385,  2386,  2388,
    2389,  2393,  2400,  2407,  2410,  2423,  2437,  2440,  2442,  2444,
    2449,  2450,  2454,  2455,  2456,  2457,  2458,  2459,  2460,  2461,
    2465,  2466,  2467,  2468,  2469,  2470,  2471,  2472,  2473,  2474,
    2478,  2479,  2480,  2481,  2482,  2483,  2484,  2485,  2486,  2487,
    2491,  2492,  2493,  2494,  2495,  2496,  2497,  2498,  2499,  2500,
    2501,  2502,  2506,  2507,  2508,  2509,  2510,  2511,  2512,  2513,
    2514,  2515,  2519,  2520,  2524,  2525,  2526,  2527,  2528,  2529,
    2530,  2531,  2532,  2534,  2536,  2554,  2572,  2573,  2577,  2578,
    2579,  2580,  2581,  2582,  2583,  2584,  2585,  2603,  2620,  2621,
    2622,  2623,  2624,  2625,  2626,  2627,  2628,  2629,  2630,  2631,
    2632,  2650,  2667,  2668,  2669,  2670,  2671,  2672,  2673,  2674,
    2675,  2676,  2677,  2678,  2679,  2697,  2714,  2715,  2719,  2720,
    2721,  2722,  2723,  2727,  2728,  2735,  2737,  2746,  2755,  2764,
    2773,  2774,  2775,  2776,  2780,  2781,  2782,  2783,  2784,  2785,
    2786,  2787,  2788,  2792,  2796,  2797,  2798,  2799,  2800,  2805,
    2814,  2823,  2832,  2846,  2847,  2852,  2856,  2857,  2858,  2859,
    2860,  2865,  2874,  2883,  2892,  2906,  2907,  2956,  2957,  2958,
    2959,  2971,  2972,  2973,  2978,  2979,  2980,  2981,  2982,  2986,
    2987,  2991,  2992,  2993,  2997,  2998,  3002,  3003,  3004,  3005,
    3006,  3007,  3008,  3009,  3010,  3011,  3012,  3013,  3014,  3015,
    3016,  3017,  3021,  3022,  3023,  3024,  3025,  3026,  3027,  3028,
    3032,  3033,  3034,  3035,  3039,  3040,  3041,  3042,  3043,  3047,
    3048,  3049,  3050,  3051,  3055,  3056,  3058,  3060,  3062,  3067,
    3068,  3070,  3072,  3077,  3078,  3079,  3080,  3084,  3085,  3086,
    3087,  3091,  3092,  3093,  3094,  3098,  3099,  3100,  3101,  3105,
    3106,  3107,  3108,  3112,  3113,  3114,  3130,  3131,  3132,  3133,
    3146,  3162,  3163,  3168,  3169,  3173,  3174,  3175,  3176,  3179,
    3180,  3184,  3185,  3186,  3190,  3194,  3198,  3199,  3200,  3201,
    3202,  3211,  3220,  3221,  3222,  3223,  3227,  3228,  3232,  3233,
    3238,  3239,  3240,  3241,  3242,  3243,  3262,  3263,  3267,  3268,
    3269,  3270,  3271,  3272,  3274,  3275,  3276,  3277,  3281,  3282,
    3283,  3284,  3285,  3287,  3288,  3289,  3293,  3294,  3295,  3296,
    3297,  3298,  3302,  3303,  3304,  3309,  3310,  3311,  3312,  3313,
    3314,  3315,  3316,  3317,  3318,  3319,  3320,  3321,  3325,  3326,
    3327,  3328,  3329,  3330,  3331,  3335,  3336,  3340,  3341,  3342,
    3346,  3347,  3348,  3349,  3351,  3352,  3353,  3355,  3356,  3357,
    3358,  3360,  3361,  3362,  3366,  3367,  3368,  3369,  3370,  3372,
    3373,  3374,  3375,  3376,  3380,  3381,  3382,  3383,  3384,  3385,
    3386,  3388,  3389,  3390,  3391,  3392,  3396,  3397,  3398,  3402,
    3403,  3407,  3408,  3409,  3410,  3414,  3415,  3416,  3418,  3419,
    3420,  3424,  3428,  3429,  3431,  3432,  3433,  3437,  3438,  3439,
    3440,  3444,  3445,  3449,  3450,  3451,  3455,  3456,  3457,  3458,
    3459,  3460,  3461,  3465,  3466,  3467,  3468,  3472,  3473,  3474,
    3475,  3479,  3483,  3487,  3489,  3492,  3498,  3499,  3500,  3504,
    3505,  3506,  3507,  3508,  3509,  3513,  3514,  3518,  3519,  3520,
    3522,  3523,  3525,  3526,  3527,  3528,  3529,  3531,  3532,  3536,
    3537,  3538,  3539,  3543,  3544,  3545,  3546,  3548,  3549,  3550,
    3551,  3552,  3553,  3554,  3557,  3561,  3562,  3566,  3567,  3571,
    3572,  3573,  3574,  3575,  3576,  3577,  3578,  3582,  3583,  3584,
    3585,  3591,  3592,  3594,  3595,  3598,  3599,  3602,  3603,  3604,
    3605,  3606,  3607,  3611,  3612,  3624,  3625,  3628,  3631,  3633,
    3634,  3635,  3645,  3647,  3648,  3650,  3651,  3652,  3653,  3663,
    3664,  3665,  3666,  3667,  3668,  3672,  3673,  3681,  3683,  3684,
    3686,  3688,  3692,  3693,  3694,  3695,  3696,  3700,  3701,  3702,
    3704,  3709,  3710,  3711,  3715,  3716,  3717,  3721,  3725,  3726,
    3727,  3731,  3732,  3736,  3737,  3741,  3742,  3743,  3744,  3748,
    3752,  3756,  3760
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "LONG", "SIGNED", "UNSIGNED", "FLOAT",
  "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST", "STRUCT", "UNION",
  "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH", "WHILE", "DO",
  "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX", "ELSE", "CLASS",
  "THISCLASS", "CLASS_NAME", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "BOOL",
  "_BOOL", "_COMPLEX", "_IMAGINARY", "RESTRICT", "'*'", "'<'", "'>'",
  "'('", "')'", "'~'", "';'", "'='", "','", "'}'", "'{'", "'.'", "':'",
  "'$'", "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'", "'%'", "'^'",
  "'|'", "'?'", "$accept", "guess_type", "type", "base_strict_type",
  "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "simple_postfix_expression", "argument_expression_list",
  "argument_expression_list_error", "common_unary_expression",
  "unary_expression", "simple_unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "simple_postfix_expression_error", "common_unary_expression_error",
  "unary_expression_error", "simple_unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    42,    60,    62,
      40,    41,   126,    59,    61,    44,   125,   123,    46,    58,
      36,    91,    93,    38,    43,    45,    33,    47,    37,    94,
     124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   142,   143,   143,   144,   144,   145,   146,   147,   147,
     147,   148,   148,   149,   150,   151,   151,   152,   152,   153,
     153,   154,   154,   154,   154,   154,   154,   154,   155,   155,
     155,   155,   155,   156,   156,   157,   158,   159,   159,   159,
     160,   160,   161,   161,   161,   162,   162,   162,   163,   163,
     163,   163,   163,   163,   164,   164,   165,   165,   165,   165,
     165,   165,   165,   165,   165,   166,   166,   166,   166,   167,
     167,   167,   167,   167,   167,   167,   168,   168,   169,   169,
     169,   169,   169,   170,   170,   171,   171,   171,   171,   171,
     172,   172,   172,   173,   173,   174,   174,   174,   174,   174,
     174,   174,   174,   174,   174,   175,   175,   176,   176,   176,
     176,   176,   177,   178,   178,   178,   179,   179,   179,   180,
     180,   180,   180,   181,   181,   181,   181,   181,   182,   182,
     182,   182,   182,   182,   183,   184,   184,   184,   184,   184,
     185,   185,   185,   186,   187,   187,   188,   188,   189,   189,
     190,   191,   191,   192,   192,   192,   192,   193,   193,   193,
     193,   194,   194,   194,   194,   194,   194,   194,   194,   194,
     194,   194,   194,   194,   194,   195,   195,   195,   195,   195,
     195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
     195,   195,   195,   195,   195,   195,   196,   196,   196,   197,
     197,   197,   197,   197,   198,   198,   199,   199,   200,   200,
     200,   200,   200,   200,   200,   200,   201,   202,   202,   203,
     204,   204,   205,   205,   205,   206,   206,   207,   207,   207,
     207,   207,   207,   208,   208,   209,   210,   210,   210,   210,
     210,   210,   210,   210,   211,   211,   211,   211,   211,   211,
     212,   213,   213,   213,   213,   213,   213,   214,   215,   215,
     216,   216,   216,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   218,
     219,   220,   220,   221,   221,   221,   221,   221,   221,   221,
     221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
     221,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   223,
     223,   223,   223,   224,   224,   224,   224,   224,   225,   225,
     225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
     226,   226,   227,   227,   228,   228,   228,   228,   228,   228,
     228,   228,   229,   229,   230,   230,   230,   230,   230,   230,
     230,   231,   231,   231,   231,   231,   232,   232,   232,   232,
     232,   233,   234,   234,   234,   234,   234,   234,   234,   234,
     234,   235,   235,   235,   235,   235,   235,   235,   235,   235,
     236,   236,   236,   236,   236,   237,   237,   237,   237,   237,
     238,   238,   238,   238,   238,   239,   239,   239,   240,   240,
     240,   241,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   242,   242,
     242,   242,   242,   242,   242,   242,   242,   243,   243,   243,
     243,   243,   243,   243,   243,   243,   243,   243,   244,   244,
     244,   244,   245,   245,   245,   246,   246,   246,   246,   246,
     246,   246,   246,   246,   246,   246,   247,   247,   247,   247,
     247,   247,   247,   247,   247,   247,   248,   248,   248,   248,
     248,   248,   248,   248,   248,   248,   248,   248,   249,   249,
     250,   250,   251,   251,   252,   252,   252,   252,   252,   252,
     252,   253,   253,   253,   253,   253,   254,   254,   254,   254,
     254,   255,   255,   255,   255,   255,   255,   255,   255,   255,
     256,   256,   256,   256,   256,   256,   256,   256,   256,   257,
     257,   257,   257,   257,   258,   258,   258,   258,   258,   259,
     259,   259,   259,   259,   260,   260,   260,   261,   261,   261,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
     262,   262,   262,   262,   262,   262,   262,   262,   262,   263,
     263,   263,   263,   263,   264,   264,   264,   264,   264,   264,
     264,   265,   265,   265,   265,   266,   267,   268,   268,   268,
     268,   268,   268,   269,   269,   269,   269,   269,   269,   270,
     270,   270,   271,   271,   271,   272,   273,   273,   274,   274,
     274,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   276,   276,   277,   277,   277,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   279,   279,   280,   280,   281,   282,
     282,   282,   283,   283,   284,   284,   284,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   284,   284,   284,   284,
     284,   284,   284,   284,   284,   284,   284,   284,   284,   284,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   286,   286,   286,   286,   286,   286,
     286,   286,   286,   286,   287,   287,   288,   288,   288,   288,
     289,   289,   289,   289,   290,   290,   290,   290,   290,   290,
     290,   290,   290,   291,   292,   292,   293,   294,   294,   294,
     294,   295,   295,   295,   295,   295,   295,   295,   295,   295,
     296,   296,   297,   297,   297,   297,   297,   297,   297,   297,
     298,   298,   298,   298,   298,   298,   298,   298,   298,   298,
     299,   299,   299,   299,   299,   299,   299,   299,   299,   299,
     300,   300,   300,   300,   300,   300,   300,   300,   300,   300,
     300,   300,   301,   301,   301,   301,   301,   301,   301,   301,
     301,   301,   302,   302,   303,   303,   303,   303,   303,   303,
     303,   303,   303,   303,   303,   303,   304,   304,   305,   305,
     305,   305,   305,   305,   305,   305,   305,   305,   306,   306,
     306,   306,   306,   306,   306,   306,   306,   306,   306,   306,
     306,   306,   307,   307,   307,   307,   307,   307,   307,   307,
     307,   307,   307,   307,   307,   307,   308,   308,   309,   309,
     309,   309,   309,   310,   310,   310,   310,   310,   310,   310,
     310,   310,   310,   310,   311,   311,   311,   311,   311,   311,
     311,   311,   311,   312,   313,   313,   313,   313,   313,   314,
     314,   314,   314,   315,   315,   316,   317,   317,   317,   317,
     317,   318,   318,   318,   318,   319,   319,   320,   320,   320,
     320,   321,   321,   321,   322,   322,   322,   322,   322,   323,
     323,   324,   324,   324,   325,   325,   326,   326,   326,   326,
     326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
     326,   326,   327,   327,   327,   327,   327,   327,   327,   327,
     328,   328,   328,   328,   329,   329,   329,   329,   329,   330,
     330,   330,   330,   330,   331,   331,   331,   331,   331,   332,
     332,   332,   332,   333,   333,   333,   333,   334,   334,   334,
     334,   335,   335,   335,   335,   336,   336,   336,   336,   337,
     337,   337,   337,   338,   338,   338,   339,   339,   339,   339,
     339,   340,   340,   341,   341,   342,   342,   342,   342,   342,
     342,   343,   343,   343,   344,   344,   345,   345,   345,   345,
     345,   345,   346,   346,   346,   346,   347,   347,   348,   348,
     349,   349,   349,   349,   349,   349,   350,   350,   351,   351,
     351,   351,   351,   351,   351,   351,   351,   351,   352,   352,
     352,   352,   352,   352,   352,   352,   353,   353,   353,   353,
     353,   353,   354,   354,   354,   355,   355,   355,   355,   355,
     355,   355,   355,   355,   355,   355,   355,   355,   356,   356,
     356,   356,   356,   356,   356,   357,   357,   358,   358,   358,
     359,   359,   359,   359,   359,   359,   359,   359,   359,   359,
     359,   359,   359,   359,   360,   360,   360,   360,   360,   360,
     360,   360,   360,   360,   361,   361,   361,   361,   361,   361,
     361,   361,   361,   361,   361,   361,   362,   362,   362,   363,
     363,   364,   364,   364,   364,   365,   365,   365,   365,   365,
     365,   366,   367,   367,   367,   367,   367,   368,   368,   368,
     368,   369,   369,   370,   370,   370,   371,   371,   371,   371,
     371,   371,   371,   372,   372,   372,   372,   373,   373,   373,
     373,   374,   375,   376,   376,   376,   377,   377,   377,   378,
     378,   378,   378,   378,   378,   379,   379,   380,   380,   380,
     380,   380,   380,   380,   380,   380,   380,   380,   380,   381,
     381,   381,   381,   381,   381,   381,   381,   381,   381,   381,
     381,   381,   381,   381,   381,   381,   381,   381,   381,   382,
     382,   382,   382,   382,   382,   382,   382,   383,   383,   383,
     383,   384,   384,   384,   384,   384,   384,   385,   385,   385,
     385,   385,   385,   386,   386,   387,   387,   387,   387,   387,
     387,   387,   387,   387,   387,   387,   387,   387,   387,   387,
     387,   387,   387,   387,   387,   388,   388,   388,   388,   388,
     388,   388,   389,   389,   389,   389,   389,   390,   390,   390,
     390,   391,   391,   391,   392,   392,   392,   393,   394,   394,
     394,   395,   395,   396,   396,   397,   397,   397,   397,   398,
     399,   400,   401
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     1,     2,     2,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     4,     4,     5,     8,     1,
       1,     2,     6,     6,     5,     5,     6,     6,     5,     5,
       7,     7,     6,     6,     7,     7,     6,     6,     4,     5,
       4,     6,     4,     1,     1,     1,     1,     3,     2,     1,
       2,     2,     2,     1,     4,     4,     3,     4,     4,     3,
       3,     2,     2,     4,     4,     3,     4,     3,     3,     2,
       2,     1,     4,     4,     3,     4,     4,     3,     3,     2,
       2,     4,     4,     3,     4,     3,     3,     2,     2,     1,
       1,     3,     3,     1,     1,     3,     3,     2,     2,     2,
       2,     2,     4,     2,     4,     5,     5,     4,     2,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     1,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     2,     1,     2,     3,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     1,     3,
       3,     1,     5,     5,     5,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     2,     1,     3,     3,     1,     1,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     1,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     2,     2,     2,     2,
       3,     2,     5,     6,     6,     3,     2,     5,     1,     1,
       1,     1,     1,     4,     1,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     3,     1,     3,     3,
       1,     5,     5,     5,     5,     4,     4,     4,     4,     5,
       5,     5,     5,     4,     4,     4,     4,     5,     5,     5,
       5,     5,     5,     5,     5,     3,     3,     2,     2,     1,
       3,     3,     3,     3,     1,     2,     3,     3,     2,     2,
       2,     1,     2,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     3,     2,     1,     2,     2,     2,     4,
       4,     3,     3,     4,     5,     4,     6,     6,     4,     5,
       4,     6,     6,     2,     2,     2,     5,     3,     5,     6,
       5,     7,     7,     8,     8,     7,     7,     3,     3,     3,
       4,     3,     5,     5,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     4,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     4,     4,     1,     1,     2,     2,     3,     5,     2,
       3,     5,     5,     5,     1,     3,     2,     2,     3,     3,
       2,     3,     3,     4,     3,     3,     3,     3,     3,     3,
       4,     4,     4,     1,     1,     4,     3,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     2,     4,     5,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     3,     3,     1,     3,
       3,     3,     3,     1,     1,     1,     4,     4,     4,     3,
       4,     4,     4,     3,     1,     3,     4,     3,     4,     4,
       4,     4,     3,     2,     3,     3,     3,     3,     2,     2,
       2,     3,     4,     1,     1,     2,     3,     3,     3,     3,
       2,     2,     2,     3,     4,     1,     1,     1,     1,     1,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     1,     2,     3,     6,     5,     3,     4,     2,     3,
       3,     3,     3,     4,     4,     4,     2,     3,     3,     3,
       4,     4,     3,     4,     2,     3,     3,     3,     4,     4,
       1,     2,     2,     3,     1,     1,     2,     2,     3,     1,
       1,     2,     2,     3,     1,     2,     3,     2,     2,     1,
       2,     3,     2,     1,     2,     3,     3,     1,     2,     3,
       3,     1,     2,     3,     3,     1,     2,     3,     3,     1,
       2,     3,     3,     1,     3,     4,     1,     4,     2,     5,
       3,     1,     1,     1,     1,     1,     1,     3,     3,     2,
       2,     1,     1,     3,     2,     3,     1,     3,     3,     3,
       3,     3,     1,     2,     3,     3,     1,     2,     1,     2,
       2,     2,     2,     3,     1,     1,     3,     3,     1,     3,
       4,     3,     4,     3,     3,     4,     3,     4,     1,     3,
       3,     4,     3,     3,     3,     4,     1,     3,     3,     3,
       3,     3,     1,     3,     2,     1,     1,     1,     1,     1,
       2,     1,     1,     1,     1,     2,     2,     2,     1,     1,
       1,     1,     1,     2,     1,     1,     4,     1,     3,     0,
       6,     8,    10,    12,     8,    10,    10,     5,     7,     9,
      11,     7,     9,     9,     3,     4,     4,     3,     3,     3,
       4,     4,     3,     3,     3,     4,     4,     3,     2,     3,
       2,     3,     4,     4,     3,     3,     1,     1,     1,     1,
       1,     2,     3,     2,     2,     2,     3,     3,     2,     5,
       6,     2,     2,     2,     2,     2,     2,     1,     2,     2,
       3,     1,     2,     1,     2,     2,     1,     2,     2,     2,
       2,     2,     2,     1,     1,     2,     2,     1,     1,     2,
       2,     1,     2,     2,     1,     2,     1,     2,     2,     5,
       5,     7,     7,     5,     5,     3,     2,     5,     4,     4,
       7,     6,     6,     5,     7,     6,     4,     7,     9,     3,
       4,     4,     5,     5,     6,     7,     6,     6,     5,     5,
       4,     3,     2,     1,     2,     4,     3,     5,     4,     3,
       2,     2,     2,     3,     3,     3,     3,     2,     2,     1,
       1,     4,     3,     4,     3,     3,     2,     4,     3,     4,
       3,     3,     2,     1,     2,     1,     1,     2,     1,     2,
       3,     3,     1,     2,     2,     2,     3,     4,     4,     2,
       2,     2,     2,     1,     2,     1,     2,     1,     2,     2,
       1,     2,     1,     2,     2,     2,     2,     1,     2,     2,
       3,     1,     1,     0,     6,     6,     5,     4,     1,     2,
       2,     1,     3,     3,     4,     1,     1,     2,     2,     6,
       6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1313,   257,     6,   623,   624,   625,   626,   627,   685,   686,
     687,   688,   689,   691,   694,   695,   692,   693,   679,   680,
     684,   690,   780,   781,   635,  1158,   235,   703,   937,   938,
       0,     0,   941,  1156,  1157,   704,   705,   696,     0,     0,
       0,     0,     0,   942,   943,   707,   706,   708,   709,   628,
     980,     0,  1282,   828,   699,     8,     4,     0,     0,     0,
    1276,     0,  1295,   904,   822,     0,   698,     0,   674,   676,
     830,   832,   681,   824,   826,   763,   697,     0,     0,   675,
     677,     0,     0,     0,     0,     0,  1003,   678,     0,   939,
       0,     0,     0,  1278,  1300,  1275,  1297,  1307,  1302,     0,
       0,     0,  1293,     0,  1290,  1273,     0,     0,  1279,     0,
       0,     0,     0,  1292,  1291,     0,   682,   981,   678,   982,
     895,   894,   904,   936,   893,   923,   994,     0,   935,   999,
       0,     0,     0,     0,     0,     0,  1168,     0,   237,   236,
       0,     0,   245,     0,   244,     2,     3,     0,     5,     0,
     637,   636,     0,     0,   655,     0,     0,     0,     0,   767,
       0,   747,   746,     0,  1171,   625,   688,   689,  1165,   829,
       8,  1277,  1296,   904,   823,   831,   833,   825,   827,  1003,
    1011,   678,     0,     0,  1042,     0,     0,     0,  1052,     0,
       0,   895,     0,   894,     0,     0,   913,     0,     0,   617,
     618,   619,   620,   621,  1065,   622,   918,   816,   888,   810,
       0,   820,     0,   812,   814,   763,   818,     0,     0,  1064,
       0,     0,  1068,  1078,     0,     0,     0,     0,     0,     0,
    1004,     0,   711,   712,   713,   714,   715,   717,   720,   721,
     718,   719,   710,   716,   733,   722,     0,     0,   727,   726,
     728,   729,  1201,   725,     0,     0,   800,   724,   806,   802,
     804,   808,   723,     0,  1177,     0,     0,     0,     0,  1266,
    1272,   625,     0,  1289,  1284,  1298,     0,  1285,  1301,  1283,
    1299,  1294,  1306,  1309,     0,     0,     0,     0,     0,  1304,
    1305,  1308,  1303,     1,     0,  1280,  1281,  1274,     0,     0,
     476,   269,     0,     0,     0,     0,     0,     0,   370,   371,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     365,     0,   368,     0,     0,   364,   366,   367,   369,     0,
     264,     0,   263,   303,   270,   258,   475,     0,   360,   372,
       0,   374,   381,   386,   392,     0,   401,   410,   415,   420,
     425,   428,   431,   448,     0,   509,   508,   512,   514,   521,
     526,   531,   540,   549,   554,   559,   564,   567,   570,     0,
     260,   293,   294,   295,   296,     0,     0,     0,     0,     0,
     683,   983,     0,   925,     0,   930,     0,     0,     0,     0,
       0,     0,     0,   936,   995,  1000,     0,   905,   997,   907,
    1002,   998,   696,     4,   229,   228,   227,   233,     0,   263,
     372,   219,   512,     0,   206,   249,     0,     0,   248,   255,
       0,     0,  1159,  1160,     0,   168,     0,   169,   170,     0,
       0,     0,     0,     0,   172,   246,     0,     0,     0,     0,
      29,    31,   163,   175,   188,     0,   187,     0,   116,   119,
       0,   195,   128,     0,   164,   140,     0,   167,   183,   196,
     199,     0,     0,   263,     0,     0,   176,     0,  1007,   678,
       0,    12,    18,     0,   835,   834,   842,   836,     0,   838,
     840,   763,   847,   846,   250,   256,   247,     0,     0,   239,
     238,   668,   629,   632,   667,   671,   657,     0,     0,     0,
     222,   223,   224,   225,     0,   217,     0,   776,   769,     0,
       0,   766,   773,   768,     0,     0,   779,   770,     0,     0,
     749,   748,     0,     0,     0,     0,     0,  1004,  1012,     0,
    1044,     0,     0,  1262,  1268,     0,  1264,  1270,  1053,  1166,
       0,     0,     0,  1167,   912,     0,   263,   615,   616,     0,
       0,     0,     0,   637,   636,   638,     0,   750,     0,     0,
     688,     0,     0,  1062,   817,     8,   904,   811,   821,   813,
     815,   819,   936,   893,   678,   985,   984,     0,     0,     0,
     917,     0,     0,   916,     0,     0,     0,  1094,     0,   914,
     915,  1005,     0,  1006,     0,     0,  1175,  1163,  1174,    76,
    1172,   714,   715,  1161,   904,   801,   807,   803,   805,   809,
     678,     0,  1176,  1173,  1164,     0,  1178,     0,  1265,  1271,
    1179,     0,     0,     0,     0,     0,     0,     0,     0,  1260,
       0,     0,     0,   722,     0,     0,     0,   157,  1098,  1099,
     725,     0,     0,     0,   263,     0,   372,     0,     0,   512,
     599,   604,     0,  1096,  1183,  1186,  1104,  1095,  1108,     0,
       0,     0,     0,  1205,  1203,  1097,  1110,     0,  1111,  1102,
    1109,     0,  1112,  1202,     0,     0,  1286,   904,     0,     0,
       0,  1296,     0,   893,  1011,   678,     0,     0,     0,     0,
    1272,  1310,     0,     0,   431,     0,     0,   940,   486,     0,
       0,   321,     0,   362,   353,   511,   510,   501,     0,   348,
     496,   349,   497,     0,   882,   872,   880,   874,   876,   878,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   358,   506,   271,     0,     0,     0,   786,   782,
     784,   788,  1056,     0,   261,     0,   298,   299,     0,   340,
       0,   339,     0,   478,    93,     0,   477,     0,   311,   312,
       0,     0,     0,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   457,     0,     0,   351,   499,   350,   498,
       0,     0,     0,     0,     0,     0,     0,   393,   532,     0,
       0,   391,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   700,     0,   319,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     701,   702,     0,     0,     0,  1325,  1326,     0,     0,     0,
     899,     0,     0,     0,   903,     0,     0,     0,   929,   928,
     926,   927,   936,   995,  1000,   906,   908,  1022,    10,     9,
       0,     0,     0,   678,   984,   207,     0,     0,   263,   206,
       0,     0,   854,   848,   850,   852,     0,     0,     0,    16,
      20,     0,   185,   184,   186,     0,     0,     0,     0,   365,
       0,   263,     0,    26,     0,    21,    28,    24,     0,    25,
      23,    22,    30,    32,   190,    83,   191,   122,   162,     0,
       0,     0,     0,   132,     0,     0,   134,     0,     0,   143,
     161,   200,   197,   202,   201,   198,   203,   115,     0,     0,
       0,   904,   744,   177,  1019,     0,  1015,   678,     0,    11,
      17,   734,   920,  1064,     0,     0,     0,  1008,     0,     0,
     173,   165,   192,   181,     0,   180,     0,   166,   904,   179,
       0,   637,   636,   843,   837,   839,   841,     0,     0,     0,
     634,   670,     0,     0,     7,   212,   208,   765,     0,     0,
       0,     0,  1041,  1048,  1049,  1050,    62,    53,    92,    39,
      38,    57,    69,    45,    48,     0,    74,    56,     0,     0,
       0,  1032,  1034,     0,  1031,  1033,     0,    41,    44,   936,
    1005,   996,  1013,  1001,  1022,  1014,     0,  1023,  1026,  1043,
    1045,  1261,  1267,  1263,  1269,  1047,  1054,  1051,  1055,   911,
     909,   910,  1091,  1073,  1082,   642,   641,     0,     0,   476,
     751,     0,     0,   476,   752,     0,     0,     0,   966,   904,
       0,     0,   678,   984,     0,     0,     0,   958,     0,     0,
       0,     0,     0,  1063,   987,     0,     0,   986,  1067,  1066,
       0,   887,  1090,   890,  1076,  1084,     0,   886,  1089,   889,
    1074,  1083,     0,  1093,  1087,   891,  1069,  1079,     0,  1088,
     892,  1071,  1080,   944,   945,   948,   947,   946,     0,   949,
     951,     0,     0,     0,     0,    77,     0,  1162,  1180,     0,
       0,     0,     0,     0,     0,  1244,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   263,     0,  1096,  1242,
    1101,  1103,     0,     0,  1250,  1251,  1252,     0,  1258,     0,
       0,     0,     0,     0,     0,   158,   144,  1107,  1106,  1105,
       0,     0,     0,   605,     0,  1100,     0,     0,     0,     0,
     471,     0,     0,   476,     0,     0,     0,     0,  1184,  1187,
    1189,     0,  1185,  1188,  1190,     0,  1216,  1113,  1287,  1288,
     237,   236,     0,     0,     0,  1012,     0,     0,  1268,     0,
    1270,  1271,     0,     0,  1169,     0,     0,   794,   263,     0,
     500,   796,   790,   792,   798,  1058,     0,   488,   487,     0,
     329,   330,     0,     0,     0,     0,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,   883,   873,   881,   875,
     877,   879,   678,   990,   989,     0,   868,   858,   866,   860,
     862,   864,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   505,     0,   259,     0,
     787,   783,   785,   789,  1057,     0,     0,   476,     0,     0,
       0,   105,     0,   297,   476,     0,     0,    94,   476,     0,
       0,   479,   310,   306,   344,   481,   482,   343,   483,   309,
       0,     0,   453,   449,   300,   375,   515,   376,   516,   377,
     517,   382,   522,   383,   523,   387,   527,   388,   528,   395,
     534,   396,   535,   394,   533,   406,   545,   402,   541,   407,
     546,   403,   542,   413,   552,   411,   550,   418,   557,   416,
     555,   423,   562,   421,   560,   426,   565,   429,   568,   595,
       0,   611,     0,     0,     0,     0,   455,   451,   480,   318,
     315,     0,   484,   485,   317,     0,     0,   454,   450,   378,
     518,   379,   519,   380,   520,   384,   524,   385,   525,   389,
     529,   390,   530,   399,   538,   400,   539,   397,   536,   398,
     537,   408,   547,   404,   543,   409,   548,   405,   544,   414,
     553,   412,   551,   419,   558,   417,   556,   424,   563,   422,
     561,   427,   566,   430,   569,   596,     0,     0,     0,     0,
     456,   452,     0,     0,  1318,  1321,     0,     0,  1316,  1327,
    1328,     0,     0,   898,   896,   897,   902,   900,   901,   234,
     232,   231,   230,   263,   678,   987,   241,     0,   207,   240,
     127,     0,   125,   855,   849,   851,   853,     0,   678,     0,
      15,    19,     0,   182,  1019,   678,     0,   139,     0,   137,
     855,     0,   263,   678,     0,    27,    84,   117,   120,   118,
     121,   129,   130,   131,   133,   141,   142,   114,   112,   113,
      13,   736,   739,     0,     0,   932,  1064,     0,     0,     0,
    1020,  1016,     0,     0,   735,   904,   921,  1009,  1010,   904,
     193,   194,   178,     0,     0,     0,     0,   630,   631,   633,
       0,     0,   660,   656,     0,     0,     0,     0,     0,   226,
     218,   216,     0,     0,     0,    36,    37,    75,    54,     0,
      55,     0,    64,    61,    72,    67,    73,    60,    90,    39,
      70,    63,    91,    59,    71,    68,     0,    58,     0,   714,
      33,    35,    34,  1035,  1036,     0,   650,   640,     0,   645,
     639,     0,   476,   753,     0,     0,     0,   984,     0,   956,
     967,   968,   961,   959,   960,     0,   988,   969,     0,     0,
     962,     0,     0,     0,  1077,  1085,  1064,  1075,  1070,  1072,
    1081,   955,     0,     0,     0,   952,   730,   731,   732,   476,
       0,     0,  1137,  1147,  1142,     0,     0,     0,  1138,  1149,
    1143,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1241,  1229,     0,  1206,   263,     0,     0,     0,  1249,
    1255,  1256,  1253,  1254,     0,     0,     0,     0,   145,  1134,
    1144,  1139,     0,   159,   602,   600,     0,     0,     0,   469,
     606,   603,   601,   470,   607,     0,  1013,  1267,  1269,  1170,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     352,   795,   797,   791,   793,   799,  1059,     0,   489,   328,
     324,   491,   492,   493,   327,     0,     0,   490,   336,   333,
       0,   494,   495,   335,     0,     0,   290,   288,     0,     0,
     974,   678,     0,     0,     0,     0,     0,     0,   992,     0,
     991,     0,     0,     0,   869,   859,   867,   861,   863,   865,
       0,   266,     0,   265,   292,     0,     0,     0,     0,     0,
       0,  1332,     0,     0,     0,   357,     0,   373,   513,   262,
     108,   106,   342,   341,    99,   103,   307,     0,   308,   304,
     305,   612,     0,     0,     0,     0,     0,     0,   316,   313,
     314,     0,     0,     0,     0,  1320,  1319,  1323,     0,     0,
       0,  1315,  1314,     0,   984,   218,     0,     0,   123,   126,
       0,     0,     0,     0,     0,  1020,     0,   135,   138,     0,
      14,   476,     0,     0,   745,     0,   904,   933,  1021,  1017,
    1018,   737,   740,   922,   174,   844,     0,   243,   242,     0,
     659,     0,   213,   214,   204,   209,   210,   220,     0,     0,
      51,    46,    49,    52,    47,    50,    37,    43,    40,    42,
       0,     0,  1039,  1040,   649,     0,   644,     0,   987,   986,
     957,   970,   971,   964,   963,   965,  1061,  1060,     0,   954,
     953,    79,  1135,  1145,  1140,     0,  1136,  1146,  1141,     0,
       0,     0,     0,     0,  1245,  1219,     0,     0,  1218,  1248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1226,     0,  1207,  1230,  1208,  1231,     0,     0,     0,
    1119,   940,  1119,     0,     0,   155,     0,     0,     0,   160,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     502,   325,   326,   322,   323,   334,   331,   332,   289,   884,
       0,   989,     0,   972,   975,   976,   274,   275,     0,   993,
     977,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   267,   278,   279,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   507,   346,   345,   473,   613,   440,   587,
     432,   571,   444,   591,   436,   579,   474,   614,   441,   588,
     433,   572,   445,   592,   437,   580,   442,   589,   434,   573,
     446,   593,   438,   581,   443,   590,   435,   574,   447,   594,
     439,   582,  1322,  1324,  1317,   856,     0,   124,   150,  1021,
       0,   136,    86,   934,     0,     0,   845,     0,     0,     0,
       0,     0,     0,   205,     0,   221,     0,     0,  1037,  1038,
    1027,     0,     0,     0,     0,   950,  1209,  1210,  1213,  1214,
    1217,  1247,     0,     0,     0,     0,     0,     0,     0,  1223,
    1232,     0,     0,     0,  1117,     0,  1115,  1127,     0,  1119,
       0,  1119,     0,     0,     0,     0,   504,   503,   991,   973,
     885,   978,   979,   272,   273,   870,   282,   283,     0,     0,
       0,     0,   276,   277,   286,   287,     0,     0,   291,  1330,
    1331,  1329,   857,     0,   738,   741,   743,   742,     0,     0,
     215,   211,     0,  1024,  1029,     0,     0,     0,     0,     0,
       0,     0,  1237,  1221,     0,     0,  1222,  1234,     0,  1225,
    1236,     0,     0,  1119,     0,  1119,     0,  1119,     0,  1120,
       0,     0,     0,   148,     0,   153,     0,   156,     0,   871,
     280,   281,     0,   284,   285,   171,  1025,  1211,  1212,     0,
       0,  1220,  1227,     0,  1224,  1235,  1131,  1118,     0,     0,
       0,  1128,     0,     0,  1119,  1119,     0,  1119,   147,   146,
     151,   149,     0,     0,   373,   513,   268,     0,     0,  1116,
       0,     0,  1119,  1124,     0,     0,  1121,     0,     0,   154,
    1228,  1132,  1133,  1129,     0,     0,     0,     0,  1119,   152,
       0,  1125,  1126,  1122,     0,  1130,     0,  1123
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   207,    54,    55,   975,   329,   436,   437,   438,   439,
     440,   441,   442,   443,   989,   990,   991,   992,   993,   994,
     995,   996,   997,   998,   999,  1000,   254,   255,   444,   445,
      57,   330,   331,   747,   775,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,  2132,  2133,  2134,   458,   641,
     642,   643,   459,   460,   461,   462,  1823,   404,   500,   405,
     501,   406,   502,   503,   867,   407,   408,    58,    59,    60,
      61,    62,   332,   333,   334,   335,  1001,  1002,   336,   337,
     702,   750,  1286,   338,   646,   704,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     735,   829,   648,  1343,   355,   705,   356,   649,   707,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     650,   651,  1127,  1345,   549,   550,   209,    64,   493,   494,
     210,    66,   211,   212,    67,    68,    69,    70,    71,    72,
     213,   117,   214,   260,   932,   933,   215,   216,   217,    76,
      77,    78,    79,    80,   218,   742,  1205,   263,   466,    82,
      83,   483,   484,   877,  1242,   720,  1050,  1051,   123,    84,
     467,    86,   468,   126,   127,   128,   936,   129,   118,    88,
    1099,  1100,  1101,    89,   575,  1233,   470,   577,  1235,   132,
     184,   471,   472,   186,   940,   134,  1019,  1554,  1007,  1008,
    1555,   187,   188,   189,   190,   743,  1206,   222,   223,   224,
     225,   226,   227,   654,   655,  2054,  2055,   656,   657,   658,
      92,   473,   264,    93,    94,   265,   266,   267,   661,   662,
     663,   664,   268,   665,   898,  1638,  1130,   668,   669,   670,
    1131,   672,    95,    96,   370,    97,    98,    99,   100,   101,
     102,   835,  1415,  1416,   836,   837,   371,   372,   373,   374
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1869
static const int yypact[] =
{
   37727, -1869, -1869, -1869, -1869,   460, -1869, -1869, -1869, -1869,
   -1869, -1869, -1869, -1869, -1869, -1869, -1869, -1869, -1869, -1869,
   -1869, -1869, -1869, -1869, -1869, -1869, -1869, -1869, -1869, -1869,
     403,   116, -1869, -1869, -1869, -1869, -1869, -1869,   -33,    52,
      70,   508,   273, -1869, -1869, -1869, -1869, -1869, -1869, -1869,
    2844,  2576, -1869, -1869, -1869,   225, -1869,   262,   508,   867,
   -1869,  1052,   302,  1269, -1869,   337, -1869,  1237, -1869,   315,
   -1869, -1869, -1869, -1869, -1869,  1070, -1869,  1326,   348, -1869,
     399,  1258, 37343,  2249,   595, 38010, -1869,   438,   376, -1869,
    1565, 40583, 35839, -1869, -1869, -1869, -1869, -1869, -1869, 37823,
   36949,   569, -1869,   116, -1869, -1869,   273,   273,   573,   468,
     273, 29480,   508, -1869, -1869,   295, -1869,  2844, -1869, -1869,
   -1869,   554, -1869,   614,  1221, -1869, -1869, 38104, -1869, -1869,
    2576,  2712,  2010,  2189,  2222, 23716, -1869,   492,   223,   577,
   30569, 40212, -1869, 30693, -1869, -1869, -1869,   508, -1869,  1055,
    1346,  1372,   145, 40212, -1869, 39945, 30817, 40212, 30941, -1869,
   31065, -1869, -1869,   508, -1869, -1869,   213,   583, -1869, -1869,
     895, -1869,   302,   641, -1869, -1869, -1869, -1869, -1869,  1252,
    1888,   438,  2712,  1467,  2222, 40583, 40583,   331, -1869,  1404,
     624,   688,   583,   779,   438,  1422, -1869, 28020,   719, -1869,
   -1869, -1869, -1869, -1869, -1869, -1869, -1869, -1869,   638, -1869,
     353, -1869,   744, -1869, -1869,   755, -1869,   763,  2051, 35005,
     414,   566, -1869, -1869,   629,   649,   642,   784,   434,   788,
   -1869,   434, -1869, -1869, -1869, -1869, -1869, -1869, -1869, -1869,
   -1869, -1869, -1869, -1869, -1869, -1869,   803,   820, -1869, -1869,
   -1869, -1869, -1869, -1869,   201,    77, -1869, -1869, -1869, -1869,
   -1869, -1869, -1869, 37535, -1869, 17703, 36248, 40782, 17840, -1869,
     826,   894,   582, -1869, -1869,   302, 37439, -1869, -1869, -1869,
   -1869, -1869, -1869, -1869,   315,   399, 38574, 40583, 38853, -1869,
   -1869, -1869, -1869, -1869,   850,   573,   573, -1869, 29480,   484,
   -1869, -1869, 29553, 29626, 29626,   897, 40390, 29480, -1869, -1869,
     905,   919, 40390, 29480,   947,   963,   966,   974,   977, 29699,
   -1869, 23956, -1869,   273,  9729, -1869, -1869, -1869, -1869,   876,
   -1869,    90,   981, -1869, -1869, -1869, -1869, 12921, -1869,  1745,
   28093, -1869,  1003,  1121,  1332, 29480,  1231,  1494,   980,   994,
    1014,  1175,    99,  1745,  1083,   599, -1869,  1745, -1869,  1011,
    1519,  1651,  1282,  1716,  1078,  1075,  1081,  1213,   277,  1745,
     573, -1869, -1869, -1869, -1869,  1117,   130, 40034,  1138,  1161,
   -1869, -1869, 28166, -1869, 28239, -1869,   657,   697,  1147,  1195,
    2712,  2278,  2513,   614, -1869, -1869,  1102, -1869, -1869, -1869,
   -1869, -1869,   905,   876, -1869, -1869, -1869, -1869,   790,   669,
   -1869,  1332, -1869,  1651, 35111, -1869, 23836, 39945, -1869,  1301,
   39678, 38946, -1869, -1869,  1159, -1869,   508, -1869, -1869,   116,
   39132, 38760,  2993, 40301, -1869, -1869,  1477,  1202,  1202,  1267,
   -1869,  1248, -1869, -1869, -1869,   101,   956,   104, -1869, -1869,
   29941,  1257, -1869,  1374, -1869, -1869,   265, -1869, -1869, -1869,
    1265, 30073, 30197,   328,  1194,   599, 36044, 38198, -1869,   438,
    1565, -1869, -1869, 35942, -1869, -1869,  1275, -1869,   508, -1869,
   -1869, -1869,  1872, 40390, -1869,  1301, -1869, 30321, 30445,  1278,
    1285, -1869,  1316, -1869,  1284, -1869, -1869,  2392,  1298,   822,
   -1869, -1869, -1869, -1869,   929,   667, 35111,   864, -1869, 31189,
   31313, -1869,   864, -1869, 31437, 31561,   864, -1869, 31685, 31809,
   -1869, -1869,  2576,  2576,  2576, 12374,  1102,  1252,  1888,  1102,
   -1869, 28312, 36248, -1869,   826, 36248, -1869,   826, -1869, -1869,
    2576,  2576,  1102, -1869, -1869,  1313,   298, -1869, -1869,  1340,
    1348, 39767,  1549,  1307,  1321, -1869, 31933, -1869, 32057,   421,
   -1869,  5962, 28385,  2576, -1869,  1116,   638, -1869, -1869, -1869,
   -1869, -1869,   614,  1327,   438,   873,   189,   197,  1106,  1360,
   -1869, 39411,  1365, -1869, 39500,  1405, 39589,  1413, 39856, -1869,
   -1869, -1869,  1133, -1869, 29480,   508, -1869, -1869,  1437, -1869,
   -1869,   213,   583, -1869,  1431, -1869, -1869, -1869, -1869, -1869,
     438,  1432,   624, -1869, -1869,  1443, -1869, 17977, -1869,   826,
   -1869,   236, 28458,  1485,  1452,  1476,   366, 18114,  1488,   116,
    1497,  1500, 18251,   905,  2669,  1508,  1515,   116, -1869, -1869,
     876,  1543,  1546,  1558,  1569, 16187,  1745, 16470, 11020,  1745,
    1745, -1869, 16607, 37631, -1869, -1869, -1869, -1869, -1869, 18388,
   18525, 18662, 18799, -1869, -1869, -1869,   826, 18936, -1869, -1869,
   -1869, 19073, -1869, -1869,   273,   273,   573,   694,   508,  1581,
    1559, -1869,   614,   595, -1869,   438,  2712, 40583, 40583, 36248,
   -1869, -1869, 38667, 29480,   311,  1568,   330, -1869, -1869, 24092,
     108, -1869, 13063, -1869, -1869,  1228, -1869, -1869, 28531, -1869,
   -1869, -1869, -1869, 40390,  1499, -1869, -1869, -1869, -1869, -1869,
   35423, 40390, 24228,   116, 35527, 40390, 29480,   273,   273,   273,
   29480, 24348, -1869, -1869, -1869, 13205, 13347, 13489, -1869, -1869,
   -1869, -1869,  6160,  1574,   157, 22084, -1869, -1869,   109, -1869,
     742, -1869, 22220,  1586, -1869, 22356, -1869,  1717, -1869, -1869,
   25611,  1720, 29480, -1869, -1869, -1869, -1869, -1869, -1869, -1869,
   -1869, -1869, -1869, -1869, 28093,   121, -1869, -1869, -1869, -1869,
   29480, 29480, 29480, 29480, 29480, 29480, 29480,  1332,  1651, 29480,
   29480, -1869, 29480, 28093, 28093, 28093, 28093, 28093, 29480, 29480,
   13631, 28093, -1869,  1723, -1869, -1869, 25684,  1778, 29480, 28093,
   29480, 29480, 29480, 29480, 29480, 29480, 29480, 29480, 29480, 29480,
   29480, 28093, 28093, 28093, 28093, 28093, 29480, 29480, 13773, 28093,
   -1869, -1869,   504,   638, 40301, -1869, -1869, 37045, 40034, 40034,
   -1869,  1604,  1609,  1614, -1869,  1621,  1630,  1641, -1869, -1869,
   -1869, -1869,   614, -1869, -1869, -1869, -1869,  1619, -1869, -1869,
   23716, 23716, 34901,   438,   904, -1869,   825,   992,   883, 35111,
    1019,  1573,  1671, -1869, -1869, -1869,  1872, 35215, 39039, -1869,
   -1869,   116, -1869, -1869, -1869, 36146,  1673,   116, 35319,  2002,
   24484,  1739, 39225, -1869,  1684, -1869,   826, -1869,   826, -1869,
   -1869, -1869,   826, -1869,  1690, -1869,  1092, -1869, -1869,  3624,
    3624,  1202,  1202, -1869,  1202,   132, -1869,  1202,  1202, -1869,
   -1869,   912, -1869,  1265,   912, -1869,  1265,  1084, 28604,  1557,
   29480,   824, -1869,  1698,   614, 38292, -1869,   438,  2712, -1869,
   -1869,  1281,   719, 35005, 29809,   253,   434, -1869,   434,  2576,
   -1869, -1869, -1869, -1869,   141, -1869,   144, -1869,   328, 36044,
   23716, -1869, -1869,  1722, -1869, -1869, -1869, 39945, 39945, 29480,
     116, -1869, 34537,   166, -1869,   523,   680, -1869, 39945,   116,
     730,   116,  1870, -1869, -1869, -1869, -1869, -1869, -1869,  1202,
   -1869, -1869, -1869, -1869, -1869, 36348,  1657, -1869, 22492, 40683,
   22628, -1869, -1869, 12755, -1869, -1869, 39318, -1869, -1869,   614,
    1252, -1869,  1888, -1869,   614, -1869, 28312, -1869, -1869, -1869,
   -1869, -1869,   826, -1869,   826, -1869, -1869, -1869, -1869, -1869,
   -1869, -1869, -1869, -1869, -1869, -1869,  1284,   184,   185,  1709,
   -1869, 32181, 32305,  1718, -1869, 32429, 32553, 32677, -1869,   789,
     344,   379,  1618,  1885,  1725,  1746,  1763, -1869,  1728,  1754,
    1755,   438,  1102,  2222,   189, 38386, 28677,   873, -1869, -1869,
   40123, -1869, -1869,   638, -1869, -1869, 40123, -1869, -1869,   638,
   -1869, -1869, 40123, -1869, -1869,   638, -1869, -1869, 40123, -1869,
     638, -1869, -1869, -1869, -1869, -1869, -1869, -1869,  1769,  1771,
   -1869,  1166,  1772,  1773,   148, -1869, 22764, -1869, -1869, 19210,
    1766,  1767, 19347, 29480, 29480, -1869, 28750, 28823,  1774,  1781,
    1782, 24754,  1790,   116, 25757,  2818,  1656, 25830, -1869,  1836,
   -1869, -1869, 25903,  1775, -1869, -1869, -1869,  1784,  1789, 25976,
   16744,   273,  1796, 29480, 29480,   116, -1869, -1869, -1869, -1869,
   21812,   750, 28093, -1869,  1318, -1869, 29480, 13915, 14057, 28093,
   -1869, 29480, 14199,  1443, 19484, 19621, 19758, 19895, -1869, -1869,
   -1869, 20032, -1869, -1869, -1869, 20169, -1869, -1869,   573,   573,
    1799,  1800, 34660, 34783,  1102, -1869,  1102, 36248, -1869, 36248,
   -1869, -1869,  1791, 28093, -1869, 28093,   958, -1869,   328,  1803,
   -1869, -1869, -1869, -1869, -1869,  6160,  1804,  1586, -1869,  1787,
   -1869, -1869, 26049,  1794, 29480,  1795, -1869, -1869, 26122,  1798,
   29480,  1812, 40479, 23716, 37916, 29480,  1802, -1869, -1869, -1869,
   -1869, -1869,   438,  1815,  1816,  1806,  1821, -1869, -1869, -1869,
   -1869, -1869, 35631, 26195,  1820,  1822,  1832, 29480,  1811, 35735,
    1829,   511,   191,   261,  1830,  1840, -1869,  1845, -1869,   116,
   -1869, -1869, -1869, -1869, -1869, 29480,   273,   149, 36448, 22900,
    1831, -1869, 28093, -1869,   153, 36548, 23036, -1869,   158, 36648,
   23172, -1869, -1869, -1869, -1869,  1293,  1847, -1869, -1869, -1869,
   26268,  4796, -1869, -1869,  1831, -1869, -1869, -1869, -1869, -1869,
   -1869,  1003,  1011,  1003,  1011,  1121,  1519,  1121,  1519,  1332,
    1651,  1332,  1651,  1332,  1651, -1869, -1869,  1231,  1282, -1869,
   -1869,  1231,  1282, -1869, -1869,  1494,  1716, -1869, -1869,   980,
    1078, -1869, -1869,   994,  1075,  1014,  1081,  1175,  1213, -1869,
      76, -1869, 26341,  1841,  7957,  1843, -1869, -1869, -1869, -1869,
   -1869,  1310, -1869, -1869, -1869, 26414,  9013, -1869, -1869, -1869,
   -1869, -1869, -1869, -1869, -1869,  1003,  1011,  1003,  1011,  1121,
    1519,  1121,  1519,  1332,  1651,  1332,  1651,  1332,  1651,  1332,
    1651, -1869, -1869,  1231,  1282, -1869, -1869,  1231,  1282, -1869,
   -1869,  1494,  1716, -1869, -1869,   980,  1078, -1869, -1869,   994,
    1075,  1014,  1081,  1175,  1213, -1869, 26487,  1844, 10652,  1846,
   -1869, -1869,   116,   116, -1869, -1869,   637,  1152, -1869, -1869,
   -1869, 37144, 37243, -1869, -1869, -1869, -1869, -1869, -1869, -1869,
   -1869, -1869, -1869,   557,  2209,   904, -1869, 23716,   116, -1869,
   -1869, 23716, -1869,    -4, -1869, -1869, -1869,   385,   438,  2712,
   -1869, -1869,   336,  1698,  1619,   438,  2712, -1869,  1848, -1869,
     324,   416,  2084,  2576,  1857, -1869, -1869, -1869, -1869, -1869,
   -1869, -1869, -1869, -1869, -1869, -1869, -1869,  5066, -1869, -1869,
   -1869, -1869, -1869, 23308,  1402,   719, 35005, 21676,   280,  1102,
     614, -1869,  1102, 29480, -1869,  1009, -1869, -1869, -1869,  1858,
    1690,  1586,  1698,  1027, 23716,  1034,  1049, -1869, -1869, -1869,
   32801, 32925,  1861, -1869,  2574, 40301, 40301, 40301, 40301, -1869,
   -1869, -1869, 29480,  1863, 28896, -1869,   826, -1869, -1869, 28969,
   -1869, 29042, -1869, -1869, -1869,  1685,  1657, -1869, -1869,  1202,
   -1869, -1869, -1869, -1869, -1869,  1685,  1657, -1869, 29115,  5437,
   -1869, -1869, -1869, -1869, -1869, 20306, -1869, -1869,   119, -1869,
   -1869,   127,  1859, -1869, 33049, 33173,   438,  1885,  1876, -1869,
   -1869, -1869, -1869, -1869, -1869,  1102,   873, -1869,  1880,  1881,
   -1869,  1874,  1875,  1877, -1869, -1869, 35005, -1869, -1869, -1869,
   -1869, -1869, 29480,  1883,  1376, -1869, -1869, -1869, -1869,   179,
   36748, 23444, -1869, -1869, -1869, 20443, 21812, 21812, -1869, -1869,
   -1869, 20580, 26560, 16881, 26633, 26706, 24845, 26779, 17018, 21948,
    1864,  1886, 21948, 29480, 29188,  1954, 26852,  1789, 11210,   273,
   21948,  1892, 12053, 24754, -1869,  1688, 26925, 12569, 26998, -1869,
   -1869, -1869, -1869, -1869,   103,   273,  1893,  1353, -1869, -1869,
   -1869, -1869, 20717, -1869, -1869, -1869,  1903,  1905,   116, -1869,
   -1869, -1869, -1869, -1869, -1869, 39945, -1869, -1869, -1869, -1869,
   27071,  1897, 25027,  1898, 27144,  1899, 25100,  1900,  1909,  1914,
   -1869, -1869, -1869, -1869, -1869, -1869, -1869, 14341, -1869, -1869,
   -1869,  1362,  1915, -1869, -1869, 27217, 25173, -1869, -1869, -1869,
    1448, -1869, -1869, -1869, 27290, 25246, -1869, -1869,  1916,  1068,
   -1869,  2896,  1917,  1919,  1924,  1918,  1920, 23716,  1816, 38480,
    1815, 29480, 23716, 29480,  1930, -1869, -1869, -1869, -1869, -1869,
    1925, -1869, 29261, -1869, -1869,  1923,  1926, 29480, 29480,  1929,
    8126, -1869,   116,   116, 29480, -1869, 14483, -1869, -1869,   573,
   -1869, -1869, -1869, -1869, -1869, -1869, -1869, 14625, -1869, -1869,
   -1869, -1869, 28093, 14767, 14909, 28093, 15051, 15193, -1869, -1869,
   -1869, 15335, 15477, 15619, 15761, -1869, -1869, -1869,   504,  1938,
     275, -1869, -1869,   438,   904,  2038,  1114, 23716, -1869, -1869,
    1937,  1102,  1102,  1202,  1102,  1619,  1941, -1869, -1869,  1942,
   -1869,   193, 36848, 23580, -1869,   438,  1128, -1869,   614, -1869,
   -1869,  1939,  1944, -1869, -1869, -1869,  1141, -1869, -1869, 34537,
    1947, 34537, -1869,  1950, 35111, -1869,  1958, -1869, 29480, 28312,
    3182, -1869, -1869,  3182, -1869, -1869, -1869,  3182, -1869, -1869,
   20854, 20991, -1869, -1869, -1869, 34537, -1869, 34537,   189,   873,
   -1869, -1869, -1869, -1869, -1869, -1869, -1869,  2222, 27363, -1869,
   -1869, -1869, -1869, -1869, -1869, 21128, -1869, -1869, -1869, 21265,
   24754, 24572, 24754, 24572, 16328, -1869, 24936, 17155, -1869, -1869,
   21948, 21948, 27436, 24754, 27509, 24663,  1951, 25319, 27582,   204,
   21402, -1869, 29480, -1869, 16328, -1869, 12053, 24754, 25392, 29334,
     273,  1963,   273,   208,  1964, -1869,   116, 29480, 29480,   116,
   28093, 28093, 28093, 28093, 28093, 28093, 28093, 28093, 15903, 16045,
   -1869, -1869, -1869, -1869, -1869, -1869, -1869, -1869, -1869, -1869,
     438,  1816,  1969, -1869, -1869, -1869, -1869, -1869,  1158,  1815,
   -1869,  1971,  1972,  1962,  1965,  1188,  1968,  1970, 23716, 29480,
   23956, -1869, -1869, -1869,  1975,  1976,  1978,  1983, 29480,  1974,
    1982,  1996,  2006, -1869, -1869, -1869, -1869, -1869, -1869, -1869,
   -1869,   330, -1869, -1869, -1869,   330, -1869, -1869, -1869, -1869,
   -1869,   330, -1869, -1869, -1869,   330, -1869, -1869, -1869,   330,
   -1869, -1869, -1869,   330, -1869, -1869, -1869,   330, -1869, -1869,
   -1869,   330, -1869, -1869, -1869, -1869,  1211, -1869, -1869,  1619,
   28093, -1869, -1869, -1869, 29480, 29480, -1869, 33297, 33421, 34537,
   33545, 33669, 40301, -1869, 40301, -1869,  9536, 21539, -1869, -1869,
   -1869, 33793, 33917, 34041, 34165, -1869,  2059,  2064, -1869, -1869,
   -1869, -1869, 24754, 29480, 29407,  1963, 17292, 17429, 25465, -1869,
   16328, 24936, 27655, 17566, -1869,  1294,   129, -1869,   233,   273,
    2013,   273,    98,   400,  2008,  1459, -1869, -1869,  1815, -1869,
   -1869, -1869, -1869, -1869, -1869, -1869, -1869, -1869,  1255,  2007,
    2011,  2024, -1869, -1869, -1869, -1869,  2015,  2016, -1869, -1869,
   -1869, -1869, -1869,  2026, -1869, -1869, -1869, -1869, 34289, 34413,
   -1869, -1869, 27728, -1869, -1869, 24754, 24754, 27801, 25538, 24754,
   27874, 24663,  2028, -1869, 24754, 29480, -1869, -1869, 24936, -1869,
   -1869,  2029,   273,   273, 29480,   273,  2030,   273,  1377, -1869,
     258,  1202,   450, -1869,   591, -1869,  2027, -1869,   116, -1869,
   -1869, -1869, 28896, -1869, -1869, -1869, -1869, -1869, -1869,  2028,
   24754, -1869, -1869, 27947, -1869, -1869, -1869, -1869,  1478,  2034,
    1490, -1869,  1468,  2033,   273,   273,  2041,   273, -1869, -1869,
   -1869, -1869,    98,   407, -1869, -1869, -1869, 24754,  2042, -1869,
    2045,  2046,   273, -1869,  1504,  1513, -1869,  1520,   617, -1869,
   -1869, -1869, -1869, -1869,  1535,  2048,  2053,  2056,   273, -1869,
    2058, -1869, -1869, -1869,  1538, -1869,  2062, -1869
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1869,    84,   215,  9949, -1869,  2075, -1869, -1869, -1869, -1869,
   -1869, -1869,  1719,  1726,  -911, -1869,  -987,  -343,   291,   305,
    -742,  -645,  -505, -1869,  -731,  -634, -1869, -1869,  1727,  1731,
   -1869,  3089,  2295, -1869,  -156,   902,   928, -1869, -1869, -1869,
   -1869,  1732, -1869, -1869, -1869,  -635, -1707,    17, -1869, -1869,
   -1869, -1869,  2381,  3250,  -120,  -108,   673,  -846, -1869,  -818,
   -1869,  -839, -1869,  1215,  -110,  1338,  -871,    -9,  1921,    25,
    1927,    83,     0, -1869,  1291,   377, 10749,  5833, -1869,  4071,
   -1869,  -733,  -744,   386,  4989,  1890, -1869,  -280,   540,   681,
     -80, -1869,   161,  -303,   -95,   -28,    10,    36,   -84,  9028,
    2840,  -283,  8567,  -791,  4543, -1869,   611,  5556,  1895,  -208,
     710,   887,   486,   341,    61,    69,   190,   192,   206,   761,
    5914,  -445,  7191,  -782,   459,  1479, 10727,   -43,  1242,   -39,
    1652, 10979,  8222, -1869, -1869, -1869,   -82,   -38,   -35, -1869,
    6831, -1869,   636,  2152,   735,  -789,  2292,  8741, -1869, 11117,
   -1869, -1869, -1869,   -66,  2729, -1869, -1869,   264,  6699,   -24,
   -1869, -1869,  1162,  1792,  1495,  1913,   -60,   -32,  3484, 10172,
    3392,  4965,  -401,  -103,  -394,   113,  -896,     7,  3325, -1869,
   -1869, -1091, -1869,   370,  -556, -1227,  7727,   405,  -667,   -64,
      85,  1273,  1805,  -227,  -785,  -395,  -912,  -519,  -923,  -920,
     392,  1192,  1302,    -3,  1973,  -718,  1503,   214,  -407,  -441,
   -1869,  -121,  -118,  3523,   765,   115, -1868, -1869, -1869, -1869,
    2139, -1869,  2195,  2147,   -63,  2870,    15,  1977,  1193,  1197,
   -1869, -1869, -1869,   -88,  1115, -1562,  -267, -1869, -1869, -1869,
       6, -1869,  2155,     2,    19,  2144,  1759, -1869, -1869, -1869,
    2156,  -821,   471, -1869,  -805,  1040, -1869, -1869, -1869, -1869
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1313
static const yytype_int16 yytable[] =
{
      63,   667,  1145,   269,  1244,  1478,   388,  1720,  1479,   389,
    1595,  1533,  1020,  1543,  1268,  1430,  1419,   284,   183,   183,
    1067,  1275,  1432,   487,  1279,   220,   945,  1285,   394,   278,
     107,   109,  1420,   285,  2058,   488,   509,  1407,   514,   174,
     518,   114,  1491,  1431,   175,   504,  1409,   176,   510,   108,
     515,   122,   519,   221,   147,   411,   774,  1248,   139,   688,
     778,   115,  1352,   148,  1888,   151,   391,   386,   276,   947,
     801,   941,   935,  1351,   809,   286,  1899,  1761,   598,   394,
     195,   162,   173,   122,    53,   208,  1018,   110,  1539,  1503,
     122,   753,    63,  1451,   280,   387,  1453,   533,   536,    63,
      63,     1,   904,   294,  1553,   906,  1900,   171,   297,  1207,
    1270,  1269,   376,   497,  1787,   379,   799,   274,  1276,     1,
    1844,  1280,  1294,  1788,   283,   295,   296,   208,  1846,   299,
     122,   122,   779,     1,   297,   409,   133,   105,   395,   148,
     463,   476,  1500,   463,  1034,  1501,   495,   490,     1,   492,
    -109,     1,   492,   476,  -100,   505,   463,   476,   463,  -104,
     463,  1520,   297,   521,   147,   172,   169,  1512,   748,     1,
    1502,  2131,   111,   148,  1075,   275,    53,  1081,   618,  1087,
     -82,  1092,   122,    53,    53,  1556,  1559,     1,     1,   395,
     112,  2128,     1,  2130,   -89,   180,   297,   546,  1068,   183,
     532,   535,   596,   599,   284,  -472,   284,  1900,   148,   297,
     554,  2059,   183,   297,   694,   392,   754,     2,   162,   566,
     285,  1551,   285,   694,  1901,   278,   120,   905,   122,   694,
     754,   122,  1902,   174,   754,  1271,  2125,   613,   175,   939,
     800,   176,  1845,   174,   970,  -648,  1452,  1271,   175,  2124,
    1847,   831,   970,  -643,   585,  2158,  1535,  2160,  1545,  2162,
     611,  2165,   323,   604,   692,   787,   297,   905,   644,  1598,
     754,   496,   675,   137,   671,  -109,   677,   678,   105,  -100,
     297,   585,  1543,   659,  -104,  1266,    63,   853,    63,  1543,
     280,   676,  1513,  1543,   827,   528,  2184,  2185,     1,  2187,
     297,     1,   689,   564,   578,   -82,   714,   870,  1067,   561,
    1557,  1560,   714,   691,  2194,  1287,  1742, -1061, -1061,   -89,
     562,   546, -1061,     2,   597,  2045,  2044,   375,   799,  2060,
    2204,     1,   538,  1902,   917,   918,   411,  2061,   522,     1,
       1,   416,   744,   135,  -895,   579,    -8,   827,   895,   897,
     899,   901,  1709,  1536,  2126,  1546,     1,  1539,  2122,   614,
     169,  1287,  2127,  1152,  1539,     2,  1159,  1115,  1539,   681,
     169,   275,    53,  1496, -1086,  1600,   148,   833,   586,  2166,
     582,     2,   546,  2122,   546,   136,  1743,  2167,     1,   180,
     122,   919,   667,   667,   667,   667,   122,   854,  2004,   684,
    1807, -1086,  1671,     1,  1675,   586,     1,   944,   105,   148,
       1,  1673,   545,  1677,   833,   579,   868,   505,   828,     1,
     872,   566,   377,  1011,     1,   755,   883,  2171,   144,   884,
     833,   872,   891,   833,   106,   221,  1041,     1,  1045,  1011,
    1055,   154,  1787,  1056,  1021,   145,   146,  1023,  1042,     2,
    1046,  1797,  1193,     1, -1046,   755, -1046,  1793,   982,   982,
     982,   463,   463,   148,   149,   688,   931,   208,  1692,   581,
     122,  1195,  1601,   958,  1701,   158,   183,   183,   962,  1691,
     552,  2171,   162,   963,   935,  1700,  1116,   463,   463,   297,
     941,  1939,  1325,  1537,  1488,  1547,   229,  1067,   564,   976,
    1295,  1297,  1299,  1860,   584,   148,   980,     1,  1576,   463,
     463,     1,  1789,  1036,   463,   463,   297,   133,   463,   463,
    1391,  2135,   122,   122,   122,   159,   122,  1545,  2189,   122,
    1359,  1361,  1363,  1013,  1545,   580,     2,   103,  1545,   581,
     122,   122,   122,  1798,   935,  1497,   148,  1498,  1047,  1013,
     564,   833,   492,  1491,    51,    50,   463,  1712,   463,   521,
       1,  1049,   546,   122,   941,   935,   148,   582,  -216,   293,
    1786,  1018,  1296,  1298,  1300,  1730,   122,   252,   297,   684,
       1,  1073,  1739,   395,  1079,     1,  1085,   105,  1090,   104,
     564,  1430,   298,  1809,     1,  1104,  1810,   841,  1432,   845,
    1419,  1419,  1360,  1362,  1364,   697,   803,   804,   805,   694,
     284,  1552,   935,   674,  1543,   415,  1420,  1420,   748,  1785,
       1,   413,  1412,  1413,  1546,  1838,   285,  1126,  1839,  1133,
     585,  1546,  1741,  1816,  1245,  1546,    74,  1146,   653,  1012,
       1,     1,  1015,  1842,     1,   748,   133,  1515,  1063,   174,
     587,  1450,  1516,   748,   175,  1534,  1540,  1544,   579,   644,
     644,   644,   644,  1585,  2131,   671,   671,   671,   671,  1822,
       1,  1825,     1,   748,   145,   146,  -216,   148,  1181,   701,
    -216,  1590,  -216,  1827,   755,   382,   122,   583,   703,  1539,
    2131,   584,   566,  1178,  1179,   417,   701,     1,   582,  1198,
     418,  1329,  1187,  1189,  2068,   703,    26,  1655,   523,  1309,
    1311,  1660,  1313,  1221,  1662,   196,  1664,  2170,   178,   806,
    1226,  1236,   546,  1246,  1226,  1236,   197,   807,    74,  1395,
     808,  1198,   939,     1,   383,    74,    74,  1373,  1375,  1377,
    1379,  1055,  1259,  2199,  1056,   384,  1251,  1252,  1253,   541,
   -1086,  1288,  1802,     1,   586,   145,   146,  1282,   145,   146,
    1777,  1289,  1778,   589,  1547,  1033,   721,  1287,   525,  1333,
   -1092,  1547,   725,  1287,   588,  1547,   169,  1058,   848,  1550,
     411,   411,   581,  1197,   145,   146,   145,   146,  -216,  1006,
    -888,   979,     1,   861,  -216,  1074,   755,  1399,  1080,  1185,
    1086,   858,  1091,  1349,  1517,   684,   894,  1354,  1335,  1518,
    1103,   145,   146,   522,   388,  1197,  1543,   389,   849,   865,
    1951,   525,   584,  1471,  1472,     1,  1473,     1,     1,  1475,
    1476,   788,  1414,   148,  1417,  1337,  1401,   833,   833,   833,
    1653,   842,   667,   846,   551,   667,  1938,   145,   146,  1803,
     974,  1945,  1510,   974,  1522,   570,  1326,  1505,  1506,  1545,
     409,  1433,   208,  1403,  1511,  1330,   976,  1272,   148,   980,
     555,  -476,  -476,  -476,  1273,  1487,   162,  1443,   566,  1576,
     411,  1146,   556,   667,  1392,   566,     1,  1458,  1460,   557,
    1462,  1539,   833,  1396,  -216,  1809,  1810,   667,   667,   667,
     667,  1525,   413,   387,   524,   590,   145,   146,   592,   859,
     382,   981,   178,   706,  -888,   860,  2006,  1553,   564,  -476,
    -476,  -476,   178,   594,    74,  1540,  1544,  1564,  2028,   122,
     706,   148,  1540,  1544,  1514,   208,  1540,  1544,   122,  1565,
     595,   145,   146,  1495,  1578,   713,   122,  1579,   122,  1499,
     394,  1483,   673,   564,  1317,  1321,  1546,   740,   148,   931,
     409,     1,   564,  -264,  -264,  -264,  1054,   505,   505,   564,
     492,   103,   463,   492,   693,   133,   564,  1222,   505,  1521,
     148,  1523,  1383,  1387,  -476,  1747,     2,  1334,   391,  2025,
    1336,   684,  -476,  1065,   140,  -476,   141,  1128,  1558,  1561,
     145,   146,  -216,   752,  1066,  1338,   122,  1437,  -216,  1006,
     755,  1849,     1,   135,   133,  1400,  1006,   713,  1402,  1006,
     524,  1059,  1959,  1909,   862,   722,   382,   564,   578,   653,
     653,   653,   653,  1404,   133,   562,  1843,   492,   492,   723,
    -476,   463,   463,   564,  1932,   463,   463,   463,   977,   148,
     570,  1185,   122,   122,   978,   935,   491,  1748,     1,   696,
     395,  1545,   122,   487,   122,   208,   546,   726,   696,   395,
     833,  1013,   684,   148,   696,   488,   833,  2078,   713,   148,
    -264,  1110,   833,   727,  -264,   148,   728,  2093,   833,   941,
     148,  -477,  -477,  -477,   729,   935,  1547,   730,   935,  -478,
    -478,  -478,   570,  1713,   148,     1,  1714,  1069,   755,   644,
    1018,  1436,   644,   795,  1842,   671,   748,   978,   671,   684,
     780,  1126,  -894,  1133,  -894,  -894,   145,   146,   810,  1813,
       2,     1,  1635,   796,  1318,  1322,  1093,   392,  1439,   120,
     781,   782,   570,   411,   978,  1648,  1815,  1264,   811,   812,
     644,  1289,   860,  1817,   797,     1,   671,   105,  1546,   978,
    1644,  1094,  1384,  1388,   644,   644,   644,   644,  1818,  1093,
     671,   671,   671,   671,   978,   142,  2100,  1095,  2101,   143,
      28,    29,   463,   463,   122,    32,   122,  1929,   155,  -894,
    2028,   798,    38,   860,  1094,   927,   833,  -764,   148,  -764,
    -894,   757,   758,   759,   802,   833,   270,  1096,  1097,  1689,
    1095,   823,  -477,  1694,   824,  1698,    43,    44,  1277,  1703,
    -478,   825,    51,   409,   208,  -894, -1060, -1060,  1849,   826,
    2176, -1060,  2081,  2005,   135,  1215,  1216,  1217,   830,   860,
    1096,  1097,  1724,   789,   790,   145,   146,   382,  2013,  1724,
    -894,  -894,  -894,  -923,  1098,   783,   784,  1540,  1544,   148,
    2016,     1,  1006,  1006,  1006,   838,   860,  1054,   850,   145,
     146,  2063,     1,    91,  1438,  1310,  1312,  2070,  1314,   881,
    1678,  1581,  1447,   860,  1584,  1749,     2,  1593,   839,  1681,
    1587,  1594,  1576,  1461,   817,   818,  1588,  1666,  1547,  1015,
     534,   537,  1589,  1374,  1376,  1378,  1380,  2075,  -476,  -476,
    -476,  1494,  1965,   860,   760,   498,   851,  1660,   928,   511,
    1664,  2029,   761,  1301,  1303,   762,  -923,  -923,   178,   252,
    2092,  -923,    28,    29,    26,  1203,   860,    32,  -923,   667,
     667,   196,   785,   786,    38,  -924,   413,   413,  1218,   791,
     792,   667,   197,  1365,  1367,   185,  1219,   411,   740,  1220,
      32,   411,  -923,  -923,   152,    91,   153,  1203,    43,    44,
    1006,   903,   287,    91,  2139,  -923,  -923,  -923,  1262,  1093,
     860,   619,   910,   666,  1018,   160,   145,   146,   920,  1481,
     900,    43,    44,   960,   252,  1018,   967,   935,   935,   391,
     819,   820,   690,   968,  1094,     1,  1656,  1657,  1658,   970,
    1493,  1679,  1775,  1776,  1756,  2121,  1779,   148,  1757,  2122,
    1095,   833,   833,  2123,   411,   973,  1169,  1173,  1507,  -476,
       2,  1768,  -476,   148,  1037,  1757,  1780,  1433,  1523,   120,
     969,   409,   411,   911,   912,  1029,   413,  1790,  1038,   122,
    1096,  1097,  1648,   156,   696,   157,   122,  1568,   197,  1540,
    1544,  1799,   148,   122,   853,   913,  1305,  1307,   530,   914,
     570,   915,  1030,  -654,  1905,  -654,    28,    29,  1906,   653,
    1031,    32,   653,  1921,   122,  1070,  1806,  1757,    38,   122,
    1076,  1128,   122,  1302,  1304,   148,  1369,  1371,  2163,  -653,
     916,  -653,  2122,  2173,   409,   570,  2164,  1843,   793,   794,
     463,   463,    43,    44,   570,   833,   833,   833,   833,    50,
     653,   570,    51,  1366,  1368,  1582,   740,   539,   570,   540,
    1082,   930,  1006,  1006,   653,   653,   653,   653,  1088,  1006,
    1006,    28,    29,  1006,  1006,   543,    32,   540,   392,   185,
    1035,   896,     1,    38,   902,  1107,    32,   540,  1106,   687,
       1,   287,  1185,  1105,   463,   463,  1108,   122,     1,  1925,
     564,   578,  1113,  1757,   854,   122,  1620,    43,    44,   570,
    2137,  1018,  1013,  2029,  2138,     2,   566,    43,    44,  2181,
   -1041,   531, -1041,  2122,   120,   570,  1114,  2182,  1941,  2178,
     893,  1942,  1666,  2122,   252,  1015,   644,   644,  1132,   667,
    1686,  2180,   671,   671,  1112,  2122,  1126,  1223,   644,  1126,
    1134,     1,  1126,  1135,   671,  2195,  1635,  1708,  1143,  2122,
    1126,    28,    29,  1126,  2196,  1144,    32,   411,  2122,    28,
      29,  2197,   411,    38,    32,  2122,     2,  1022,  1889,  2198,
    1024,    38,    65,   813,   814,   120,  2200,  1018,  1146,  2206,
    2122,   815,   816,  2122,  1903,   505,  1147,    43,    44,  1148,
     564,  1857,  1306,  1308,    50,    43,    44,    51,  1480,   694,
     694,  1149,   694,   694,  1715,    51,  1183,   694,   694,   694,
     694,  1194,    28,    29,   879,  1265,   755,    32,  1150,  2017,
    1440,  2020,  1370,  1372,    38,  2008,  1735,   411,  1182,   413,
     141,  2018,  1277,  2021,   983,   984,   985,   409,  1281,   208,
       1,  1288,   409,     1,  1348,  2031,     1,  2033,    43,    44,
     821,   822,  1025,  1027,    65,    50,  1423,  2032,   561,  2034,
    1259,  1424,  1960,  1961,    65,  1011,  1425,  1006,   411,   562,
     384,    65,    65,  1426,   748,   748,   748,   748,   748,   748,
     748,   748,  1427,   763,   764,   765,   766,   767,   768,   769,
     770,   771,   772,  1428,   666,   666,   666,   666,  1414,  1353,
    1530,     1,  1531,   755,   667,  1630,   667,   409,  1688,  1441,
       1,   122,   122,   478,   122,  1693,  1697,     1,     1,  1702,
    1457,     1,  1188,  1190,  1191,   478,   148,  1465,  1528,   478,
    1529,  1467,  1469,  -904,  -904,   755,  1466,  1892,  -904,   463,
    1831,   463,  1834,  1484,   833,  -904,   694,   694,   694,   694,
     694,   694,   694,   694,  1832,  -756,  1835,  1468,  1470,  1568,
    1504,  1684,  1026,  1028,  -759,   463,  1569,   463,   122,  -904,
    -904,   667,  1164,  1166,   748,  1013,  1165,  1167,   289,   292,
    1572,   843,  2174,   847,  1006,  1006,   755,  1570,   411,   773,
    1126,  1126,  1126,  1126,  1603,     1,   644,  1609,  1421,  1422,
    1126,  1126,   671,  1126,  1571,  1126,  1573,  1574,     1,  -935,
    1591,  1592,  1631,  1596,  1597,  1606,  1607,  1126,  1639,  2098,
       2,  1623,  1624,  1622,  1666,  1015,  1146,  1640,   564,  1648,
    1626,  2099,  1641,     2,  1669,  1650,  1645,  1665,   417,  2056,
    1717,  2056,   120,   413,  1680,  1687,   694,   413,    65,  1169,
    1173,  1169,  1173,  1706,  2175,  1719,  1224,  1721,    65,  1722,
      65,  1732,  1737,  1733,    28,    29,    28,    29,   409,    32,
     546,    32,  1811,  1734,  1740,  1744,    38,  1751,    38,    28,
      29,  1745,  -935,  -935,    32,   687,  1746,  -935,  1758,  1796,
    1764,    38,  1767,  1772,  -935,  1774,   653,   653,  1800,  1814,
      43,    44,    43,    44,  1819,  -762,  1128,  1828,  1128,   653,
     413,  1856,   653,  1880,  1524,    43,    44,  1850,  -935,  -935,
     653,  1851,  1852,  1128,  1859,   561,  1853,  1854,   413,  1855,
    1886,  -935,  1890,  -935,  1904,  1881,   562,   463,   463,   463,
     463,   463,   833,  1907,   833,  1908,  1911,  1913,  1915,  1917,
    1918,   463,   463,   463,   463,  1919,  1922,  1928,  1933,  -980,
    1934,  1060,  1126,  2168,  2169,  1935,    18,    19,  1948,  -231,
    1936,   644,  1937,   644,     1,  1952,  1949,   671,  1953,   671,
    1958,  2003,  1146,  1648,  2007,  2010,  1006,  1006,  2014,  2011,
    2019,  2043,   478,  2015,  2022,    56,    28,    29,  2056,     2,
    2056,    32,  2024,   478,    28,    29,  2057,     1,    38,    32,
    2069,  2062,  2071,  2072,  2073,  2088,    38,  2074,   463,   463,
    2076,  1111,  2077,  2089,  1526,  1126,  1126,  2082,  2083,  1126,
    2084,  1126,    43,    44,  1126,  2085,   113,  2090,   644,    50,
      43,    44,   570,  2105,   671,    28,    29,  2091,  2106,  2136,
      32,   397,  1648,    56,  1146,   478,  2129,    38,  1146,  2140,
     150,  2056,  2056,  2141,  2056,  2142,  2056,  2143,  2144,  2145,
    1126,  2151,  2156,  2161,  2172,  2179,  2183,    56,  -904,  -904,
      56,    43,    44,  -904,  2186,  2191,   253,    56,  2192,  2193,
    -904,  2201,  1146,  1648,    56,    56,  2202,  1126,   558,  2203,
    1943,  2205,  1946,  2056,  2056,  2207,  2056,    56,  1146,  2188,
     378,  1826,   951,  1519,  -904,  -904,  1954,  1956,  1429,   952,
     953,  2056,    56,   413,   954,   957,  1474,   679,   413,   732,
     403,   755,  1509,   680,   733,   403,   253,  2056,   403,  1804,
    1249,  2026,   570,   888,   666,   724,   880,   666,   253,  2023,
      56,   403,   253,   403,  1257,   403,   612,  2157,   288,   277,
    1128,  1128,  1128,  1128,   291,   660,  1128,   279,   281,  2002,
     653,   653,     1,  1128,     0,  1128,     0,     0,     0,     0,
     253,   253,     0,    28,    29,   666,     0,  1128,    32,     0,
       0,     0,   403,   413,     0,    38,     0,     2,     0,   666,
     666,   666,   666,    28,    29,   553,   191,   192,    32,     0,
       0,     0,    75,   480,    56,    38,    28,    29,     0,    43,
      44,    32,  1667,     0,  1668,   480,     0,     0,    38,   480,
     399,     0,     0,     0,   413,     0,     0,     0,     0,    43,
      44,     0,     0,    28,    29,     0,    50,     0,    32,   862,
       0,     0,    43,    44,     0,    38,     0,     0,   253,     0,
     562,   253,   253,   640,    65,     0,     0,     0,     0,     0,
       0,    56,    28,    29,     0,     0,     0,    32,     0,    43,
      44,    56,   253,    56,    38,     0,    50,     0,     0,    51,
       0,  1863,  1867,     0,    75,     0,   740,     0,     0,     0,
       0,   253,     0,  1879,    75,     0,     0,   253,    43,    44,
       0,    75,    75,   971,     0,  -669,   403,     0,     0,   855,
       0,     0,     0,     0,     0,     0,     0,     0,  2079,  1482,
       0,     0,  1128,     0,     0,   608,     0,  2086,     0,     0,
    -669,  1128,     0,  1128,     0,     0,     0,     0,     0,  -669,
    -669,     0,     0,   481,   413,   447,     0,     0,   447,     0,
       0,     0,     0,     0,     0,   481,     0,     0,  1508,   481,
       0,   447,    56,   447,     0,   447,     0,   403,   718,   403,
     570,   616,   620,     0,   718,     0,  -669,  -669,     0,     0,
       0,  -669,     0,  2094,  2096,  1128,  1128,     0,  -669,  1128,
       0,  1128,     0,     0,  1128,     0,     0,     0,  1128,    56,
       0,   403,    56,     0,     0,   253,    56,     0,     0,     0,
       0,   882,  -669,  -669,     0,    56,   253,     0,    56,  -669,
       0,     0,  -669,     0,     0,   972,     0,   970,  -669,     0,
    1128,     0,     0,     0,  1971,  1975,     0,  1981,  1985,   478,
       0,     0,  1989,  1993,  1997,  2001,   403,   403,     0,     0,
     478,    56,    56,     0,     0,  1583,     0,  1128,   403,     0,
       0,     0,     0,   961,     0,     0,     0,     0,   253,     0,
       0,     0,   403,   403,     0,     0,     0,     0,    75,     0,
       0,     0,   875,     0,     0,  1820,     0,  -658,    75,     1,
      75,    56,     0,   875,   403,   403,   740,    28,    29,   403,
     403,     0,    32,   403,   403,     0,  1621,   700,     0,    38,
     640,     0,  -658,     0,     2,     0,     0,   253,     0,     0,
     253,  -658,  -658,   120,   700,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,    56,     0,     0,     0,
       0,   403,     0,   403,   856,   966,    56,   403,     0,     0,
       0,  2041,     0,     0,     0,     0,     0,     0,  -658,  -658,
      28,    29,     0,  -658,  1836,    32,    56,     0,     0,    56,
    -658,    56,    38,    56,     0,     0,     0,     0,     0,     0,
      56,   696,   696,   696,   696,   696,   696,   696,   696,     0,
       0,     0,     0,     0,  -658,  -658,    43,    44,     0,     0,
       0,  -658,     0,    50,  -658,     0,    51,  1821,     0,   970,
    -658,     0,     0,     0,  1716,     0,     0,     0,     0,     0,
       0,     0,   481,    18,    19,     1,     0,     0,     0,     0,
       0,   666,   666,   481,     0,     0,  1736,   616,     0,    81,
     616,     0,     0,   666,   640,   640,   640,   640,     0,     0,
       2,     0,     0,    28,    29,     0,     0,     0,    32,   120,
       0,     0,     0,     0,     0,    38,   447,   447,     0,     0,
       0,     0,   253,   253,   253,     0,     0,    56,   956,     0,
       0,   696,     0,     0,   403,   481,     0,     0,     0,    43,
      44,     0,   447,   447,     0,     0,    28,    29,   253,  1141,
       0,    32,     0,     0,     0,   253,   253,   403,    38,   253,
     253,     0,     0,     0,   447,   447,   403,     0,     0,   447,
     447,    81,     0,   447,   447,     0,  2117,    56,  2120,     0,
     640,    81,    43,    44,     0,     0,     0,   640,    81,    81,
     640,     0,    51,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   922,   925,     0,     0,     0,     0,     0,     0,
       0,   447,     0,   447,   616,   620,  1170,  1174,     0,     0,
       0,     0,    18,    19,     0,     0,     0,     0,   922,   925,
     482,     0,  1230,  1240,     0,     0,  1230,  1240,     0,     0,
       0,     0,   482,  2155,   616,     0,   482,     0,    18,    19,
     922,   925,    28,    29,     0,   922,   925,    32,     0,   922,
     925,     0,     0,     0,    38,     0,     0,     0,     0,    56,
       0,     0,    56,    56,    56,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,    43,    44,
      38,     0,     0,     0,     0,   403,   403,    56,  1629,     0,
       0,     0,     0,     0,    56,     0,     0,     0,     0,     0,
       0,   354,   253,    56,    43,    44,     0,     0,     0,     0,
      56,    50,     0,   253,     0,   403,     0,    56,     0,     0,
      28,    29,  1812,     0,     0,    32,     0,     0,     0,     0,
       0,     0,    38,     0,    75,     0,     0,     0,     0,     0,
       0,   666,     0,     0,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,     0,    81,    43,    44,     0,     0,
      56,     0,     0,    50,     0,    81,  1224,    81,    56,     0,
       0,     2,     0,     0,     0,     0,     0,     0,     0,  1446,
     120,     0,     0,     0,    56,   403,     0,     0,     0,     0,
    1446,     0,    56,    56,     0,     0,     0,   403,     0,     0,
       0,     0,     0,    56,     0,     0,     0,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,    28,    29,     0,
       0,     0,    32,   640,   253,   640,     0,   309,   310,    38,
       0,   253,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     0,   312,   313,   314,   315,   316,
     317,   318,   319,    43,    44,     0,     0,     0,   647,     0,
     889,     0,     0,   890,   734,   322,   403,   403,     0,     0,
     403,   403,   403,   323,   324,     0,   325,   326,   327,   328,
       0,     0,     0,     0,     0,     0,   617,   621,     0,     0,
      56,   403,     0,     0,     0,    56,     0,     0,     0,   876,
       0,    56,     0,     0,     0,     0,     0,    56,   608,     0,
     876,     0,     0,    56,   751,     0,   666,     0,   666,   481,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     481,   640,     0,     0,   640,     0,     0,   640,     0,  -476,
       0,     0,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,
    1944,     0,  1947,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   876,     0,     0,     0,  1955,  1957,     0,     0,
       0,     0,     0,     0,     0,   640,     0,     0,     0,   446,
       0,     0,   446,   666,     0,     0,     0,     0,     0,   640,
     640,   640,   640,     0,     0,   446,     0,   446,     0,   446,
       0,     0,     0,     0,     0,     0,     0,   403,   403,     0,
       0,     0,   253,     0,   253,     0,     0,   447,     0,     0,
       0,    56,     0,     0,     0,     0,     0,     0,     0,     0,
      56,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   253,   403,    56,
    -476,  -476,     0,     0,  1604,     0,     0,  1610,     0,     0,
    -476,     0,     0,     0,     0,     0,     0,   253,     0,  -476,
    -476,  -476,  -476,  -476,   253,    87,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   447,   447,     0,     0,
     447,   447,   447,   253,   640,  1651,     0,     0,     0,     0,
     253,   640,     0,     0,   253,   640,     0,     0,     0,  1170,
    1174,  1170,  1174,     0,     0,     0,     0,     0,     0,     0,
       0,  1017,     0,     0,   608,     0,   130,     0,     0,     0,
       0,     0,   616,     0,   616,     0,     0,     0,     0,     0,
       0,     0,    85,     0,  1728,     0,     0,     0,     0,     0,
       0,  1728,   617,     0,     0,   617,   163,   181,   194,     0,
       0,     0,     0,     0,     0,   231,     0,    87,     0,     0,
       0,    81,   922,   925,    87,    87,   922,   925,  2080,     0,
       0,     0,     0,     0,  1102,     0,     0,  2087,     0,     0,
       0,     0,     0,    85,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   194,   396,   398,   400,   401,
       0,     0,     0,     0,     0,   469,     0,   647,   469,     0,
       0,     0,     0,     0,    85,    85,     0,   447,   447,     0,
       0,   469,    85,   469,    85,   469,     0,     0,     0,     0,
       0,    85,    85,  2095,  2097,     0,    56,    56,     0,   647,
     647,   647,   647,     0,     0,     0,     0,   529,   398,   400,
       0,     0,   403,     0,     0,     0,   403,     0,     0,     0,
       0,     0,    85,    85,     0,     0,     0,     0,     0,   617,
     621,  1171,  1175,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   559,   574,     0,     0,     0,     0,     0,
     446,   446,     0,     0,     0,     0,     0,     0,   640,   617,
       0,    56,   955,     0,     0,     0,  1250,     0,     0,     0,
    1254,     0,     0,     0,    85,     0,   446,   446,     0,   403,
       0,     0,     0,     0,     0,   403,   403,     0,   610,     0,
      56,    56,    56,    56,     0,     0,     0,     0,   446,   446,
     751,   181,     0,   446,   446,     0,   876,   446,   446,     0,
       0,   685,     0,    87,  1293,   393,     0,   876,     0,     0,
      85,     0,     0,    85,     0,   300,     0,     1,   301,   105,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   403,
     403,  1347,     0,     0,     0,   446,   751,   446,     0,  1358,
       0,     0,     2,     0,     0,    85,     0,     0,     0,     0,
       0,    56,     0,     0,     0,     0,   393,     0,    85,  1411,
       0,     0,     0,     0,     0,   253,   640,     0,    85,     0,
      85,   640,   640,     0,     0,     0,     0,     0,     0,   305,
       0,     0,     0,     0,   640,   306,   307,   640,     0,     0,
       0,     0,     0,   572,     0,   640,     0,     0,     0,   310,
       0,   923,   926,     0,     0,   396,   398,   400,     0,     0,
       0,     0,   311,     0,     0,     0,   312,   313,   314,   315,
     316,   317,   318,     0,     0,     0,     0,   923,   926,   863,
      56,     0,     0,     0,   708,     0,   469,     0,     0,     0,
       0,     0,     0,     0,   323,   324,     0,   130,     0,   923,
     926,     0,     0,     0,   923,   926,     0,     0,   923,   926,
     682,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    85,     0,     0,     0,   469,   469,     0,     0,
       0,   937,   403,     0,    56,   948,     0,   403,   469,     0,
       0,  1864,  1868,     0,     0,   447,   447,   163,     0,     0,
       0,     0,   469,   469,  1604,    56,     0,  1610,     0,     0,
       0,     0,     0,     0,    85,  1651,     0,     0,     0,     0,
       0,   863,     0,     0,   469,   469,     0,     0,     0,   469,
     469,     0,     0,   469,   469,     0,     0,   194,   194,   194,
       0,     0,     0,     0,     0,     0,  1017,     0,     0,   447,
     447,     0,   403,     0,     0,   194,   194,     0,     0,     0,
       0,     0,     0,     0,   852,     0,     0,   253,   640,     0,
     857,   469,     0,   469,     0,     0,  1052,     0,  1061,     0,
       0,   922,   925,     0,   403,     0,   403,     0,     0,    56,
       0,     0,     0,   400,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    85,    85,    85,     0,    85,     0,
     403,    85,   403,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    85,    85,    85,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   922,   925,     0,     0,   647,
     934,     0,   647,    85,     0,   640,   640,     0,     0,     0,
       0,   647,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1605,
       0,     0,  1611,  1646,  1647,     0,     0,     0,     0,     0,
     647,     0,  1293,     0,     0,     0,  1659,     0,     0,  1358,
       0,  1663,     0,     0,   647,   647,   647,   647,     0,     0,
    1009,  1186,     0,  1014,     0,     0,     0,   685,     0,     0,
    1652,     0,     0,   403,     0,   403,  1009,     0,     0,     0,
       0,     0,     0,     0,  1171,  1175,  1171,  1175,     0,     0,
       0,     0,     0,     0,     0,  1232,     0,   572,     0,  1232,
       0,     0,   751,     0,     0,     0,     0,   617,   751,   617,
     572,   446,     0,     0,     0,     0,     0,   863,     0,     0,
       0,     0,     0,     0,     0,  1864,  1868,     0,    85,     0,
       0,     0,     0,     0,    85,     0,     0,     0,     0,     0,
       0,     0,   403,   403,   403,   403,   403,    56,     0,    56,
       0,     0,     0,     0,     0,     0,   403,   403,   403,   403,
       0,     0,  1753,     0,   447,     0,   447,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     446,   446,     0,     0,   446,   446,   446,     0,     0,     0,
     447,     0,   447,     0,     0,     0,     0,     0,     0,     0,
    1129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     682,     0,     0,   403,   403,     0,   682,     0,     0,     0,
       0,     0,     0,     0,  1168,  1172,     0,  1434,     0,     0,
       0,     0,     0,     0,   863,     0,     0,     0,     0,     0,
       0,   163,   863,  1448,     0,     0,     0,     0,     0,     0,
    1455,   464,     0,   863,   464,  1463,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   464,     0,   464,
       0,   464,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   130,     0,     0,     0,     0,     0,
       0,     0,     0,  1492,     0,     0,     0,     0,   574,     0,
       0,   446,   446,     0,   130,     0,     0,     0,     0,     0,
       0,     0,    85,     0,   937,     0,     0,     0,     0,     0,
       0,   923,   926,     0,     0,   923,   926,   469,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   398,     0,     0,
       0,     0,   447,   447,   447,   447,   447,     0,     0,     0,
       0,    85,     0,     0,     0,     0,   447,   447,   447,   447,
       0,   937,     0,     0,     0,     0,     0,     0,     0,   645,
       0,    85,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   682,     0,  1017,     0,   469,   469,     0,  1454,
     469,   469,   469,     0,     0,     0,     0,  1566,   396,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   400,     0,
       0,     0,     0,   447,   447,  1017,     0,     0,   922,   925,
       0,   922,   925,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   922,   925,   922,   925,     0,     0,     0,     0,
       0,     0,  1490,     0,     0,     0,     0,   572,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   934,    85,    85,   647,   647,     0,     0,
       0,     0,     0,     0,     0,     0,   647,     0,   647,   647,
       0,     0,   647,     0,     0,     0,     0,     0,     0,     0,
     647,     0,     0,   647,     0,     0,  1865,  1869,     0,   922,
     925,     0,     0,     0,     0,     0,     0,     0,     0,   621,
     934,     0,   621,     0,     0,     0,     0,     0,     0,     0,
     621,     0,     0,     0,     0,     0,     0,   469,   469,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     863,     0,   464,   464,     0,     0,     0,   393,     0,     0,
       0,     0,     0,     0,     0,     0,   572,   863,   572,  1711,
       0,     0,     0,     0,     0,     0,     0,     0,   464,   464,
       0,     0,     0,     0,     0,     0,     0,  1232,     0,     0,
       0,     0,  1017,     0,  1232,     0,    85,     0,    85,     0,
     464,   464,     0,     0,  1962,   464,   464,     0,     0,   464,
     464,     0,     0,     0,     0,     0,  1003,  1753,     0,   446,
     446,     0,  1659,     0,     0,  1663,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   464,     0,   464,
       0,     0,  1602,     0,     0,  1608,     0,     0,     0,     0,
       0,     0,     0,     0,  1625,     0,     0,     0,     0,     0,
       0,     0,     0,   446,   446,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   682,  1017,
     682,     0,     0,  1649,     0,     0,     0,     0,     0,     0,
    1017,     0,     0,   465,     0,     0,   465,  1168,  1172,  1168,
    1172,     0,     0,     0,     0,     0,     0,     0,   645,   465,
       0,   465,     0,   465,     0,     0,     0,     0,     0,     0,
     647,   647,   647,   647,     0,     0,   647,     0,     0,     0,
     647,   647,     0,   647,     0,   647,     0,     0,     0,     0,
     645,   645,   645,   645,     0,     0,     0,   647,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2064,  2065,     0,
     621,   621,     0,     0,     0,     0,     0,     0,     0,  1783,
     923,   926,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1792,     0,     0,     0,     0,     0,
       0,   396,     0,     0,     0,     0,     0,     0,   194,     0,
       0,     0,     0,     0,     0,     0,     0,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,  1805,
       0,   574,     0,     0,   923,   926,  1003,     0,     0,     0,
       0,     0,     0,  1003,     2,     0,  1003,     0,     0,     0,
       0,     0,     0,     0,     0,   469,   469,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    85,     0,     0,     0,     0,
       0,   305,     0,     0,     0,     0,  1017,   306,   307,   308,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     309,   310,   647,     0,     0,     0,     0,     0,     0,   469,
     469,   647,   396,   647,   311,     0,     0,     0,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,   446,     0,
     446,   574,     0,   320,     0,     0,   321,  1160,   322,     0,
       0,  1161,     0,     0,     0,     0,   323,   324,  1760,   325,
     326,   327,   328,   682,   446,     0,   446,     0,     0,     0,
    1795,     0,  1017,     0,     0,   647,   647,     0,     0,   647,
       0,   647,     0,     0,   647,     0,     0,     0,   647,    85,
       0,     0,     0,     0,  2159,     0,     0,     0,  1454,     0,
     572,     0,     0,  1808,     0,     0,  1014,     0,     0,     0,
     464,   464,  1017,     0,     0,     0,     0,     0,     0,     0,
     647,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   465,   465,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   647,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     465,   465,     0,     0,     0,     0,  1930,     0,     0,     0,
       0,     0,     0,   464,     0,     0,     0,   179,   125,     0,
       0,   852,   465,   465,     0,   230,     0,   465,   465,   572,
       0,   465,   465,     0,     0,     0,     0,     0,     0,  1003,
     572,  1003,     0,  -476,  -476,  -476,  -476,  -476,  -476,  -476,
    -476,  -476,  -476,  -476,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   125,     0,     0,   465,
     339,   465,     0,     0,     0,     0,   446,   446,   446,   446,
     446,     0,   464,   464,     0,     0,   464,   464,   464,     0,
     446,   446,   446,   446,   410,     0,     0,     0,     0,  1862,
    1866,     0,     0,     0,     0,     0,     0,     0,     0,  1875,
       0,  1878,  1602,     0,   469,  1608,   469,   527,     0,   863,
       0,     0,     0,  1649,     0,     0,  1891,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     469,     0,   469,     0,     0,     0,     0,  1003,     0,     0,
     645,     0,   400,   645,  -476,  -476,   410,   446,   446,     0,
       0,     0,   645,   591,  -476,     0,   593,     0,     0,  -476,
    -476,  -476,     0,  -476,  -476,  -476,  -476,  -476,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   645,     0,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,     0,     0,   645,   645,   645,   645,     0,
      85,   179,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   464,   464,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   923,   926,     0,
     923,   926,     0,     0,     0,   682,   682,     0,  2009,     0,
       0,   923,   926,   923,   926,     0,     0,   410,     0,     0,
       0,     0,   709,   711,     0,     0,   410,     0,     0,     0,
       0,     0,   410,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   339,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   410,
       0,     0,  1009,     0,   410,     0,     0,     0,     0,     0,
    1003,     0,   469,   469,   469,   469,   469,  1003,   923,   926,
       0,  1003,     0,     0,     0,   125,   469,   469,   469,   469,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   410,     0,   410,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2036,  2037,  2038,  2039,   125,     0,  2040,
       0,     0,     0,  1862,  1866,   410,  1875,     0,  1878,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2049,     0,     0,   469,   469,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   230,     0,     0,  -895,     0,
       0,  -895,  -895,  -895,     0,  -895,  -895,     0,     0,     0,
       0,     0,   465,   465,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   125,   125,
       0,  1010,     0,     0,   593,     0,     0,     0,     0,     0,
       0,     0,  -895,     0,     0,   125,   125,   125,  -895,  -895,
    -895,     0,     0,     0,   410,   465,     0,     0,     0,     0,
       0,  -895,     0,     0,     0,     0,   125,     0,     0,     0,
       0,     0,     0,     0,     0,  -895,     0,     0,     0,  -895,
    -895,  -895,  -895,  -895,  -895,  -895,  -895,     0,     0,     0,
       0,   410,     0,     0,  1003,     0,     0,     0,     0,  -895,
    -895,     0,  -895,  -895,  -895,  2040,     0,  -895,  -895,     0,
    -895,  -895,  -895,  -895,  2116,     0,  2119,     0,     0,     0,
       0,   464,   464,   339,   465,   465,     0,     0,   465,   465,
     465,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1003,     0,  1003,     0,     0,     0,     0,     0,     0,     0,
       0,   410,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2147,  2148,
       0,     0,  2116,     0,  2119,   464,   464,  2152,     0,     0,
       0,  2154,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   230,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   357,     0,     0,
       0,     0,  1003,  2154,     0,     0,     0,   645,   645,     0,
       0,     0,   410,     0,     0,     0,     0,   645,  1199,   645,
     645,   412,     0,   645,     0,     0,     0,     0,     0,     0,
    2190,   645,     0,     0,   645,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   339,     0,     0,     0,   339,
    1255,     0,     0,     0,     0,   465,   465,     0,     0,     0,
       0,     0,     0,     0,   410,     0,     0,     0,     0,     0,
       0,   410,     0,     0,   410,     0,     0,     0,     0,     0,
       0,     0,     0,   412,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   339,     0,     0,     0,     0,     0,   410,
     410,   410,   410,   410,   410,   410,     0,     0,   410,   410,
       0,   410,   410,   410,   410,   410,   410,   410,   410,     0,
     339,     0,     0,     0,     0,     0,     0,     0,   339,   410,
     410,   410,   410,   410,   410,   410,   410,   410,   410,   410,
     410,   410,   410,   410,   410,   410,   410,     0,   339,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   410,
     410,     0,     0,     0,   412,   125,     0,     0,     0,   710,
     712,     0,     0,   412,     0,     0,     0,     0,     0,   412,
       0,     0,     0,     0,  1003,     0,     0,     0,     0,     0,
     357,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     464,     0,   464,     0,   125,     0,   412,     0,     0,     0,
       0,   412,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   591,     0,   593,   125,     0,   464,   410,   464,   410,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   412,     0,
     412,   645,   645,   645,   645,     0,     0,   645,     0,   410,
       0,   645,   645,     0,   645,     0,   645,     0,   410,     0,
       0,     0,     0,   198,     0,     1,     0,     0,   645,     0,
       0,     0,   412,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   410,     0,   410,
       2,   199,   200,   201,   202,   203,     8,     9,    10,   560,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,   125,   125,     0,
       0,     0,     0,     0,     0,   369,     0,   204,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,   465,   465,   410,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   205,    50,
       0,   412,   561,  1048,     0,     0,     0,     0,   464,   464,
     464,   464,   464,   562,     0,   410,     0,     0,     0,     0,
       0,     0,   464,   464,   464,   464,   410,   465,   465,     0,
       0,   548,     0,   645,     0,     0,     0,     0,   412,     0,
       0,     0,   645,     0,   645,     0,     0,     0,     0,     0,
       0,     0,   339,   339,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   591,
     357,   593,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,   464,
     464,     0,     0,   777,     0,     0,   645,   645,   412,     0,
     645,     0,   645,     0,     0,   645,     0,     0,     2,   645,
       0,     0,     0,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,   410,     0,   410,     0,     0,     0,     0,     0,
       0,   645,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,   410,     0,   369,    32,
       0,     0,    35,    36,     0,    37,    38,    39,   645,   412,
       0,     0,     0,     0,   410,  1200,     0,     0,   410,     0,
      40,   339,     0,     0,     0,   410,     0,     0,     0,   410,
      43,    44,    45,    46,    47,    48,     0,    50,     0,     0,
     862,     0,   357,     0,     0,     0,   357,  1256,     0,     0,
       0,   562,     0,     0,     0,     0,   548,     0,   548,     0,
       0,   412,     0,     0,     0,     0,     0,     0,   412,     0,
       0,   412,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     357,     0,     0,     0,     0,     0,   412,   412,   412,   412,
     412,   412,   412,     0,     0,   412,   412,     0,   412,   412,
     412,   412,   412,   412,   412,   412,     0,   357,     0,     0,
       0,     0,   465,     0,   465,   357,   412,   412,   412,   412,
     412,   412,   412,   412,   412,   412,   412,   412,   412,   412,
     412,   412,   412,   412,     0,   357,     0,     0,   465,     0,
     465,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   412,   412,     0,     0,
       0,     0,     0,     0,     0,     0,   410,     0,   125,     0,
     410,     0,     0,     0,     0,     0,     0,     0,     0,  1005,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1138,     0,     0,     0,     0,
       0,     0,   410,     0,     0,     0,   548,     0,     0,     0,
       0,     0,   410,     0,   412,     0,   412,     0,     0,     0,
       0,     0,     0,   410,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   369,     0,
       0,   410,     0,   339,     0,     0,   412,     0,   410,     0,
     410,     0,     0,     0,     0,   412,     0,     0,     0,     0,
       0,     0,   125,     0,     0,     0,   548,   410,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   412,     0,   412,     0,     0,     0,
     465,   465,   465,   465,   465,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   465,   465,   465,   465,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     410,     0,     0,  1284,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   412,     0,     0,     0,  1316,  1320,  1324,  1328,
    1332,     0,     0,  1341,     0,     0,     0,     0,     0,  1284,
     369,   465,   465,     0,   369,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1382,  1386,  1390,  1394,  1398,  1005,
       0,  1341,   412,     0,     0,     0,  1005,     0,     0,  1005,
       0,     0,     0,   412,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   369,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   357,
     357,     0,     0,     0,     0,     0,   410,     0,     0,     0,
     410,   410,   410,     0,     0,   369,     0,     0,     0,     0,
       0,   339,     0,   369,     0,     0,   410,   410,     0,     0,
       0,     0,     0,   339,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   369,     0,     0,     0,     0,     0,     0,
       0,     0,   410,   410,     0,   410,   410,     0,     0,     0,
     410,   410,   410,   410,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   410,     0,     0,   412,
       0,   412,     0,     0,   219,     0,     0,     0,     0,     0,
       0,     0,   410,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   412,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,     0,     0,     0,   410,     0,     0,
       0,   412,     0,     0,     0,   412,   219,     0,   357,     0,
       0,    73,   412,     0,   414,     0,   412,     0,     0,     0,
       0,     0,  1005,     0,   548,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   506,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   116,     0,   548,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   339,   339,     0,   410,
     410,   410,   410,   410,   410,   410,   410,     0,     0,     0,
       0,     0,  1005,   177,  1005,     0,     0,     0,     0,     0,
       0,     0,   259,    73,     0,     0,     0,     0,     0,     0,
      73,    73,     0,     0,     0,     0,     0,   410,   410,     0,
       0,     0,     0,     0,     0,     0,     0,   410,   380,     0,
       0,     0,     0,     0,     0,     0,     0,  1627,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   479,     0,     0,     0,     0,     0,     0,     0,
     548,     0,     0,     0,   479,  1654,     0,     0,   479,     0,
       0,     0,  1661,   412,     0,     0,     0,   412,     0,   410,
       0,     0,     0,   410,   410,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,   259,     0,     0,
    1005,     0,     0,     0,     0,     0,  1341,     0,  1341,     0,
       0,   548,     0,     0,     0,     0,     0,     0,     0,   412,
       0,     0,     0,     0,     0,  1284,     0,     0,     0,   412,
     569,  1284,     0,     0,     0,     0,     0,   369,   369,     0,
     412,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   834,     0,   412,     0,
     357,     0,     0,     0,     0,   412,     0,   412,     0,     0,
       0,     0,     0,     0,   607,     0,     0,   259,   259,   259,
       0,     0,     0,     0,   412,     0,     0,   177,     0,     0,
       0,     0,     0,   339,     0,   869,   506,   177,   259,    73,
     878,     0,     0,     0,     0,     0,     0,     0,     0,   885,
       0,   339,   892,     0,     0,     0,     0,   717,     0,   548,
       0,     0,     0,   717,     0,     0,     0,     0,     0,     0,
       0,     0,   739,     0,     0,     0,     0,   412,     0,     0,
       0,   548,     0,     0,     0,     0,   943,     0,     0,     0,
       0,     0,   959,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1005,     0,     0,   369,     0,     0,     0,
    1005,     0,     0,     0,  1005,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   569,     0,     0,     0,     0,
     219,   874,     0,     0,     0,     0,     0,     0,     0,     0,
     219,     0,   874,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   412,     0,     0,     0,   412,   412,   412,
     219,     0,     0,   219,     0,   219,     0,   219,   357,     0,
       0,     0,     0,   412,   412,     0,     0,   569,     0,     0,
     357,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   965,     0,     0,     0,     0,   412,
     412,     0,   412,   412,     0,     0,     0,   412,   412,   412,
     412,     0,     0,     0,     0,     0,     0,   569,     0,     0,
       0,     0,     0,   412,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   259,     0,     0,   412,
       0,     0,     0,   259,     0,     0,   259,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   412,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1005,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   548,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   369,     0,
       0,     0,     0,  1005,     0,  1005,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   652,
       0,     0,  1005,   357,   357,  1142,   412,   412,   412,   412,
     412,   412,   412,   412,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     259,   259,   259,   259,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   412,   412,     0,     0,     0,     0,
       0,     0,   737,     0,   412,  1005,     0,     0,   259,   259,
     259,     0,     0,   177,     0,     0,     0,     0,     0,     0,
    1202,     0,     0,     0,     0,     0,   834,   834,   834,     0,
       0,     0,     0,     0,   259,     0,     0,     0,     0,     0,
       0,  1229,  1239,   739,     0,  1229,  1239,     0,     0,   414,
     414,   219,  1202,     0,     0,     0,   412,     0,     0,     0,
     412,   412,     0,  1261,     0,     0,   259,     0,     0,     0,
       0,     0,     0,   259,     0,     0,   259,     0,     0,     0,
    1964,     0,     0,     0,     0,  1967,  1969,  1973,  1977,  1979,
    1983,     0,     0,     0,  1987,  1991,  1995,  1999,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   737,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1486,   548,     0,   548,     0,     0,
       0,     0,     0,     0,     0,     0,   369,     0,     0,     0,
       0,   548,   548,     0,     0,     0,     0,     0,   369,   414,
       0,     0,     0,     0,     0,   569,   506,   506,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   506,     0,     0,
     357,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   357,     0,
     569,     0,     0,     0,     0,     0,     0,     0,  1445,   569,
       0,     0,     0,     0,     0,     0,   569,  1005,     0,  1445,
     116,   739,     0,   569,     0,     0,     0,    90,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   219,     0,     0,     0,     0,   219,
       0,     0,     0,     0,   569,  1586,     0,   119,   131,     0,
       0,  1586,     0,     0,     0,     0,     0,   219,     0,     0,
     569,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   182,
     131,     0,     0,     0,   228,     0,     0,     0,     0,    90,
       0,   369,   369,  1140,     0,     0,    90,    90,     0,   259,
     259,   259,     0,     0,     0,     0,     0,   607,     0,  1158,
       0,     0,     0,     0,   381,     0,     0,     0,     0,     0,
     652,   652,   652,   652,     0,     0,     0,   390,     0,     0,
       0,     0,     0,   548,     0,     0,     0,     0,     0,     0,
       0,     0,   548,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   737,
       0,     0,     0,     0,     0,     0,     0,     0,   526,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   542,   414,   219,     0,     0,     0,  1158,   548,   548,
       0,     0,     0,     0,     0,     0,     0,   259,     0,     0,
     259,     0,     0,   259,     0,     0,   576,     0,     0,     0,
       0,     0,     0,  1291,     0,     0,  1142,     0,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,     0,     0,     0,     2,     0,     0,     0,     0,
     131,  1344,     0,     0,     0,   259,   259,   259,   259,  1356,
       0,     0,     0,   182,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   686,     0,    90,     0,     0,   259,  1408,
     259,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,     0,     0,     0,     0,     0,  1683,     0,   369,     0,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   607,     0,   311,   369,     0,     0,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,  1727,   320,     0,     0,   321,  1160,   322,
    1727,   737,  1765,     0,     0,     0,  1766,   323,   324,     0,
     325,   326,   327,   328,     0,     0,     0,     0,     0,   259,
     259,     0,     0,     0,     0,     0,   259,   259,     0,     0,
     259,   259,     0,     0,     0,     0,     0,     0,     0,     0,
     834,   834,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,   414,     0,     0,     0,
     414,   864,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,   131,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,   938,     0,     0,   946,     0,     0,     0,
      28,    29,     0,   414,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,   414,  1824,   414,  1824,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,   864,     0,     0,    43,    44,    45,    46,
      47,    48,     0,     0,     0,     0,     0,     0,     0,   131,
     131,   131,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   131,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1053,     0,
    1062,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     652,  1064,     0,   652,  1613,  1615,     0,  1618,     0,     0,
       0,     0,     0,   258,   259,  1628,     0,   569,     0,     0,
       0,     0,     0,  1637,     0,     0,     0,     0,     0,     0,
    1158,     0,     0,     0,     0,     0,     0,   542,     0,     0,
       0,   652,     0,     0,     0,     0,     0,     0,  1158,     0,
       0,     0,     0,  1158,     0,   652,   652,   652,   652,     0,
       0,     0,     0,     0,   506,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1672,     0,  1676,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1696,     0,   258,   258,     0,
       0,  1705,  1184,     0,     0,     0,   414,   569,   219,   686,
       0,   414,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,   259,     0,  1158,     0,     0,   259,   259,     0,
       0,   568,     0,     0,     0,     0,     0,  1234,     0,     0,
     259,  1234,     0,   259,     0,     0,     0,     0,     0,     0,
       0,   259,     0,     0,     0,     0,     0,     0,     0,   864,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1158,     0,     0,     0,   606,   414,     0,   258,   258,
     258,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   258,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   716,     0,
       0,     0,     0,  1158,   716,     0,     0,     0,     0,     0,
       0,     0,     0,   738,     0,     0,  1158,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   739,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   864,
    1435,     0,     0,     0,     0,     0,   864,  1158,     0,     0,
       0,     0,     0,     0,   864,  1449,     0,     0,     0,     0,
       0,     0,  1456,     0,     0,   864,   119,   131,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   259,   259,     0,   568,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   414,     0,     0,
       0,     0,     0,     0,     0,   569,   131,     0,     0,     0,
       0,     0,     0,     0,  1489,     0,     0,     0,     0,     0,
     576,     0,     0,     0,     0,     0,   131,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   938,     0,   568,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,   259,     0,     0,     0,     0,     0,     0,     0,
       0,   414,     0,   414,     0,     0,     0,     0,   568,     0,
       0,     0,     0,   938,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   258,     0,     0,
       0,     0,     0,     0,   258,     0,     0,   258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1567,
       0,   739,     0,     0,     0,     0,     0,     0,  1575,     0,
       0,     0,     0,     0,     0,     0,     0,   652,   652,     0,
       0,     0,     0,  1158,     0,  1158,     0,     0,  1158,   652,
       0,     0,     0,     0,  1882,  1885,     0,  1887,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1158,     0,  1898,
       0,     0,   261,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1158,     0,     0,     0,  1158,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   258,   258,   258,   258,     0,  1158,     0,   736,     0,
       0,     0,     0,     0,     0,  1158,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   258,
     258,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1201,     0,     0,     0,     0,   261,   261,     0,     0,
       0,     0,   864,     0,     0,   258,     0,     0,     0,     0,
       0,     0,  1228,  1238,   738,     0,  1228,  1238,     0,   864,
       0,  1234,     0,  1201,     0,     0,     0,     0,     0,  1718,
     571,     0,     0,     0,  1260,     0,     0,   258,     0,  1234,
       0,     0,     0,     0,   258,     0,  1234,   258,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   736,
       0,     0,     0,     0,   609,     0,     0,   261,   261,   261,
       0,     0,     0,     0,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,     0,     0,     0,     0,   261,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,   719,     0,  1158,
       0,     0,     0,   719,     0,     0,   568,     0,     0,     0,
       0,     0,   741,     0,     0,     0,     0,   652,  1158,     0,
       0,     0,     0,     0,     0,  1158,     0,     0,   305,  1887,
       0,  2047,     0,     0,   306,   307,   308,     0,     0,     0,
    2053,   568,     0,     0,     0,     0,     0,   309,   310,     0,
     568,     0,     0,     0,     0,     0,     0,   568,     0,     0,
       0,   311,   738,     0,   568,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,  1160,   322,     0,     0,  1161,     0,
       0,   737,     0,   323,   324,  1770,   325,   326,   327,   328,
       0,     0,     0,     0,     0,   571,     0,     0,     0,     0,
       0,  1784,     0,     0,     0,   568,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1791,     0,     0,     0,     0,
       0,   568,  1794,     0,     0,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,     0,     0,     0,     0,  1139,
       0,     0,     0,     0,     0,     0,     0,   571,     0,     0,
       0,  1456,     0,   576,     0,  1157,     0,     0,     0,  1162,
     258,   258,   258,     0,     0,   547,     0,     0,   606,     0,
       0,     0,     0,     0,  2108,  2111,     0,  1158,     0,  1158,
       0,     0,   652,  1158,   652,     0,     0,   571,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   261,     0,     0,     0,
       0,     0,     0,   261,     0,   736,   261,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1243,
       0,     0,     0,  1848,     0,     0,     0,     0,  1158,     0,
       0,  1158,     0,  1157,  1162,     0,     0,     0,     0,   652,
       0,     0,     0,   576,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   695,     0,   258,  1290,
       0,   258,     0,     0,   258,   547,     0,     0,     0,     0,
       0,   547,     0,     0,  1158,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1342,     0,     0,
       0,     0,   258,     0,     0,  1355,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   258,   258,   258,   258,
       0,     0,     0,     0,     0,  1406,     0,     0,     0,     0,
     261,   261,   261,   261,     0,     0,     0,     0,     0,   258,
     547,   258,   547,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1682,   261,   261,
     261,     0,     0,     0,     0,     0,     0,     0,  1931,     0,
    1204,     0,     0,     0,   606,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   261,     0,     0,   736,     0,     0,
       0,  1231,  1241,   741,  1726,  1231,  1241,     0,     0,     0,
       0,  1726,  1204,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1263,     0,     0,   261,     0,     0,     0,
     258,   258,     0,   261,     0,     0,   261,   258,   258,     0,
       0,   258,   258,     0,     0,     0,     0,     0,     0,     0,
    1435,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1794,     0,     0,     0,     0,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,   864,     0,  1004,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   571,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     547,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     571,     0,     0,     0,     0,     0,     0,     0,     0,   571,
     309,   310,     0,     0,     0,     0,   571,     0,     0,     0,
       0,   741,     0,   571,   311,     0,     0,     0,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
     547,     0,     0,   320,     0,     0,   321,  1718,   322,     0,
       0,  2102,  2103,  1016,     0,     0,   323,   324,     0,   325,
     326,   327,   328,     0,     0,     0,     0,     0,     0,     0,
    1612,  1614,     0,  1617,   571,     0,     0,     0,     0,     0,
       0,  1139,     0,     0,  1162,     0,     0,     0,     0,  1636,
     571,     0,     0,     0,     0,   258,  1157,  1162,   568,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1192,     0,     0,  1157,  1162,     0,     0,     0,  1157,
     300,     0,     1,   301,   105,   302,     0,   303,   304,   261,
     261,   261,     0,     0,     0,     0,     0,   609,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
    1670,     0,  1674,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1004,     0,     0,     0,     0,     0,     0,
    1004,  1695,     0,  1004,     0,     0,     0,  1704,     0,     0,
       0,     0,     0,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,     0,     0,     0,     0,     0,   568,     0,
    1157,     0,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,   258,   258,     0,     0,     0,   311,   258,   258,
       0,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,   258,     0,     0,   258,     0,   320,   261,     0,   321,
     261,   322,   258,   261,     0,     0,   745,  1157,  1162,   323,
     324,   746,   325,   326,   327,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   261,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   261,   261,   261,   261,  1157,
       0,  1162,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1157,  1162,     0,     0,     0,     0,   261,     0,
     261,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1685,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1004,     0,   547,     0,
       0,     0,   738,   609,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1157,     0,  1162,     0,     0,     0,     0,
       0,     0,     0,  1729,     0,     0,     0,     0,     0,     0,
    1729,     0,     0,     0,     0,     0,     0,   547,     0,     0,
     121,     0,     0,     0,     0,     0,     0,   138,     0,   261,
     261,     0,     0,     0,     0,     0,   261,   261,     0,     0,
     261,   261,     0,     0,   258,   258,  1004,     0,  1004,     0,
     161,   170,   193,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   568,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   547,     0,   489,     0,     0,     0,
       0,     0,   258,   258,     0,     0,     0,     0,     0,     0,
       0,     0,   520,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   121,     0,     0,  1004,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   547,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1858,
       0,     0,     0,     0,     0,     0,     0,   161,   565,     0,
       0,     0,   738,     0,     0,     0,     0,     0,     0,  1157,
    1162,  1157,  1162,     0,  1157,  1877,     0,     0,     0,     0,
    1612,  1884,     0,  1636,     0,  1162,     0,     0,     0,     0,
       0,     0,     0,  1157,  1162,  1636,     0,     0,     0,     0,
       0,     0,   170,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,   261,   170,     0,   571,     0,     0,
       0,     0,     0,     0,     0,   565,     0,  1157,     0,  1162,
       0,  1157,     0,  1162,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   547,   124,   124,     0,     0,     0,     0,
       0,     0,  1157,  1162,     0,     0,     0,     0,     0,     0,
       0,  1157,  1162,     0,     0,   547,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1004,     0,     0,
       0,     0,   124,   124,  1004,     0,     0,     0,  1004,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   571,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
       0,   261,   261,     0,     0,   121,     0,   261,   261,     0,
       0,     0,     0,     0,   124,     0,     0,     0,     0,     0,
     261,     0,     0,   261,     0,     0,     0,     0,     0,     0,
       0,   261,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   565,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   565,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1157,     0,     0,     0,     0,
       0,   161,     0,     0,     0,   124,     0,     0,     0,     0,
       0,     0,     0,     0,  1157,     0,     0,     0,   124,  1162,
       0,  1157,  1877,     0,  1162,  1636,     0,  2046,   683,  2048,
       0,     0,     0,     0,     0,  1162,  2052,     0,     0,     0,
       0,   121,   121,   121,     0,   121,     0,     0,   121,     0,
       0,   741,     0,     0,     0,     0,     0,     0,     0,   121,
     121,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   520,     0,
     565,  1004,   121,     0,     0,     0,     0,   736,     0,     0,
       0,   547,     0,     0,     0,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   261,   261,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1004,     0,  1004,
       0,     0,   124,     0,     0,   571,     0,     0,   573,     0,
       0,     0,     0,     0,     0,     0,  1004,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   124,     0,     0,     0,     0,     0,
    2107,  2110,     0,  1157,  1162,  1157,     0,     0,     0,  1157,
    1877,   261,   261,     0,     0,     0,     0,  1180,     0,  1004,
       0,     0,     0,     0,     0,   121,     0,     0,   573,     0,
       0,   565,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1157,  1162,     0,  1157,  1877,     0,
       2,     0,  2153,     0,     0,     0,     0,     0,     0,     0,
       0,   741,     0,     0,   124,   124,   124,     0,   124,     0,
       0,   683,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   124,   124,     0,     0,   305,     0,     0,
    1157,     0,     0,   306,   307,   308,     0,     0,     0,     0,
       0,     0,     0,   124,     0,   573,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   573,   547,
     311,   547,     0,     0,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,   547,   547,     0,     0,   320,
       0,     0,   321,  1160,   322,     0,     0,  1765,     0,     0,
       0,  1773,   323,   324,     0,   325,   326,   327,   328,     0,
       0,  1970,  1974,     0,  1980,  1984,     0,     0,     0,  1988,
    1992,  1996,  2000,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   256,     0,
       0,     0,     0,     0,     0,   161,     0,   565,     0,     0,
       0,  1004,     0,     0,   565,     0,     0,     0,     0,   565,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   683,     0,
       0,     0,     0,     0,   683,     0,     0,     0,   477,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   121,     0,
     477,     0,     0,     0,   477,     0,     0,   121,     0,     0,
       0,     0,   565,     0,     0,     0,     0,     0,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   565,     0,
       0,     0,   256,   256,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1970,  1974,
    1980,  1984,  1988,  1992,  1996,  2000,   567,     0,     0,     0,
       0,     0,     0,     0,     0,   565,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   547,     0,     0,
       0,     0,     0,     0,     0,     0,   547,     0,     0,     0,
     605,     0,     0,   256,   256,   256,     0,     0,     0,     0,
       0,   121,   121,     0,     0,     0,     0,     0,     0,     0,
       0,   121,     0,   121,   256,     0,     0,     0,     0,     0,
       0,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,   715,     0,     0,     0,     0,  1004,   715,
       0,     0,   547,   547,     0,     0,     0,     0,     2,     0,
     573,     0,     0,     0,     0,     0,     0,   573,     0,     0,
       0,     0,   124,     0,     0,     0,     0,     0,     0,     0,
     257,     0,     0,   749,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   305,     0,     0,     0,   776,
       0,   306,   307,   308,     0,     0,     0,     0,     0,     0,
       0,   124,     0,     0,   309,   310,     0,     0,     0,     0,
     573,     0,     0,     0,     0,   573,     0,     0,   311,     0,
     257,   124,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   573,   257,   121,     0,   121,   257,   320,     0,     0,
     321,   567,   322,  1155,     0,  1156,     0,   873,     0,     0,
     323,   324,     0,   325,   326,   327,   328,     0,   873,     0,
       0,     0,     0,     0,   257,   257,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   573,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   567,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   262,     0,
     964,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,     0,   124,   124,     0,     0,     0,     0,
       0,     0,     0,   567,   573,     0,   573,     0,     2,     0,
       0,     0,   257,     0,     0,   257,   257,   257,     0,     0,
       0,     0,   256,     0,     0,     0,     0,     0,   262,   256,
       0,     0,   256,     0,     0,     0,   257,     0,     0,     0,
     262,     0,     0,     0,   262,   305,     0,     0,     0,     0,
       0,   306,   307,   308,     0,   257,     0,     0,     0,     0,
       0,   257,     0,     0,   309,   310,     0,     0,     0,     0,
       0,     0,   262,   262,     0,     0,     0,     0,   311,     0,
       0,     0,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,  1160,   322,  1643,     0,  1161,     0,     0,     0,     0,
     323,   324,     0,   325,   326,   327,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   683,     0,   683,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     262,  1137,     0,   262,   262,   262,   256,   256,   256,   256,
       0,     0,     0,     0,     0,     0,     0,     0,   121,   257,
       0,     0,     0,     0,   262,   121,     0,     0,     0,     0,
     257,     0,   121,     0,   256,   256,   256,     0,     0,     0,
       0,     0,     0,   262,     0,     0,     0,     0,     0,   262,
       0,     0,     0,   121,     0,   565,     0,     0,   121,     0,
     256,   121,     0,     0,     0,     0,     0,  1227,  1237,     0,
       0,  1227,  1237,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   257,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   256,     0,     0,     0,     0,     0,     0,   256,
       0,     0,   256,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   257,     0,     0,     0,     0,   749,
       0,   257,     0,     0,   257,     0,   121,     0,     0,     0,
       0,     0,     0,  1292,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   565,     0,   262,     0,     0,
       0,     0,  1315,  1319,  1323,  1327,  1331,     0,   262,  1340,
    1346,     0,     0,     0,     0,   749,     0,     0,  1357,     0,
       0,   567,     0,     0,     0,     0,     0,     0,     0,     0,
    1381,  1385,  1389,  1393,  1397,     0,     0,  1340,  1410,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   567,     0,     0,     0,
     262,     0,     0,     0,  1444,   567,     0,     0,     0,     0,
       0,     0,   567,     0,     0,  1444,     0,     0,     0,   567,
       0,   573,     0,     0,     0,     0,     0,     0,   573,     0,
       0,     0,     0,     0,     0,   124,     0,     0,   257,   257,
     257,   257,   262,     0,     0,     0,     0,     0,     0,   262,
       0,     0,   262,     0,     0,     0,   573,     0,   573,     0,
       0,   573,     0,     0,   573,     0,   257,   257,   257,     0,
     567,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   567,     0,     0,     0,
       0,     0,   257,     0,     0,     0,     0,     0,     0,   257,
     257,     0,     0,   257,   257,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   257,   256,   256,   256,     0,     0,
       0,   257,     0,   605,   257,     0,     0,     0,     0,   124,
     121,   121,     0,   121,     0,     0,     0,   573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   573,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   262,   262,   262,   262,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   121,     0,     0,
       0,     0,     0,     0,   262,   262,   262,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     262,     0,     0,   256,     0,     0,   256,   262,   262,   256,
       0,   262,   262,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   257,     0,     0,     0,
       0,     0,   262,     0,     0,     0,     0,   257,     0,   262,
       0,     0,   262,  1137,     0,     0,     0,   256,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   256,   256,   256,   256,     0,     0,     0,     0,     0,
       0,  1292,     0,     0,     0,     0,     0,     0,  1357,     0,
       0,     0,     0,     0,   256,     0,   256,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1340,     0,  1340,     0,     0,     0,     0,   605,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   749,     0,   573,   573,     0,   573,   749,     0,  1725,
       0,     0,     0,     0,     0,     0,  1725,   257,   257,   257,
       0,     0,     0,     0,     0,   257,     0,     0,     0,     0,
       0,     0,     0,     0,   262,   256,   256,     0,     0,     0,
       0,     0,   256,   256,     0,   262,   256,   256,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     124,  1752,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -476,     0,  -476,  -476,  -476,  -476,
    -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,
    -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,
    -476,  -476,     0,     0,     0,   257,     0,     0,   257,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   262,   262,   262,  -476,     0,
       0,     0,     0,   262,  -476,  -476,  -476,     0,     0,   257,
       0,     0,     0,     0,     0,     0,     0,  -476,  -476,     0,
       0,     0,     0,   257,   257,   257,   257,     0,     0,     0,
       0,  -476,     0,     0,     0,  -476,  -476,  -476,  -476,  -476,
    -476,  -476,  -476,     0,     0,     0,   257,     0,   257,     0,
    -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,     0,
       0,  -476,     0,  -476,  -476,     0,  -476,  -476,  -476,  -476,
    -476,  -476,  -476,  -476,  -476,     0,     0,     0,     0,     0,
       0,   257,     0,     0,     0,     0,     0,     0,     0,     0,
     256,     0,     0,   567,     0,     0,     0,     0,     0,     0,
       0,   257,     0,   262,     0,     0,   262,     0,   257,   262,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   257,   257,     0,
       0,     0,     0,     0,   257,   257,     0,     0,   257,   257,
       0,     0,     0,     0,     0,     0,     0,   262,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   262,   262,   262,   262,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,     0,   262,     0,     0,     0,
       0,     0,     0,   567,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   256,   256,     0,
       0,     0,     0,   256,   256,     0,     0,     0,     0,   262,
       0,     0,     0,     0,     0,     0,   256,     0,     0,   256,
       0,     0,     0,     0,     0,     0,     0,   256,     0,   262,
       0,     0,     0,     0,     0,     0,   262,     0,     0,     0,
       0,     0,     0,     0,     0,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   262,   262,     0,     0,     0,
       0,     0,   262,   262,     0,     0,   262,   262,     0,     0,
       0,     0,     2,   199,   200,   201,   202,   203,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,    18,    19,
     242,   243,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
     244,     0,     0,     0,     0,   306,   307,   308,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   309,   633,
      38,   246,   257,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,   247,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,   248,   249,   250,   251,
     205,   320,     0,     0,   321,     0,   322,   986,     0,   987,
     988,   745,     0,     0,   323,   324,  1752,   325,   326,   327,
     328,  1966,  1968,  1972,  1976,  1978,  1982,     0,     0,     0,
    1986,  1990,  1994,  1998,     0,     0,     0,     0,     0,   256,
     256,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   567,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1894,     0,     1,   301,   105,   302,     0,   303,   304,   257,
     257,     0,     0,     0,     0,   257,   257,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   257,     0,
     262,   257,     0,     0,     0,     0,     0,   256,   256,   257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   309,   310,     0,     0,     0,     0,  1968,
    1972,  1978,  1982,  1986,  1990,  1994,  1998,   311,     0,     0,
       0,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
    1160,   322,  1895,     0,  1161,     0,     0,     0,     0,   323,
     324,     0,   325,   326,   327,   328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   262,   262,     0,
       0,     0,     0,   262,   262,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   262,     0,     0,   262,
       0,     0,     0,     0,     0,     0,     0,   262,     0,     0,
       0,     0,     0,     0,     0,     0,   756,     0,     0,     0,
       0,     0,   757,   758,   759,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,     0,     0,     0,     0,     0,     0,     0,
       0,   257,   257,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -361,     0,     0,     0,     0,     0,     0,     0,  -361,
    -361,     0,     0,     0,  -361,     0,     0,     0,     0,     0,
    -361,  -361,  -361,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -361,     0,     0,     0,   257,
     257,     0,     0,     0,     0,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,   760,     0,     0,  -361,  1548,
    -361,  -361,     0,   761,     0,     0,   762,     0,  -361,  -361,
    -361,     0,  -361,  -361,  -361,  -361,  -361,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   262,
     262,  -361,   756,     0,  -361,  -361,  -361,  -361,   757,   758,
     759,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,     0,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,     0,     0,  -361,  -361,     0,  -361,
       0,     0,  -361,  -361,  -361,  -361,  -361,   262,   262,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,     0,  -361,     0,  -361,
    -361,  -361,     0,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,   760,  -361,  -361,  -361,  -361,  -361,  -361,  -361,   761,
    -361,  -361,   762,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -363,  1208,     0,  -363,  -363,  -363,  -363,
    1209,  1210,  1211,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,     0,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,     0,     0,  -363,  -363,
       0,  -363,     0,     0,  -363,  -363,  -363,  -363,  -363,     0,
       0,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,     0,  -363,
       0,  -363,  -363,  -363,     0,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  1212,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  1213,  -363,  -363,  1214,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -468,  1153,     0,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,     0,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,     0,     0,
    -468,  -468,     0,  -468,     0,     0,  -468,  -468,  -468,  -468,
    -468,     0,     0,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
       0,  -468,     0,  -468,  -468,  -468,     0,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -301,   300,     0,
       1,   301,   105,   302,  -301,   303,   304,  -301,  -301,  -301,
    -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,
    -301,  -301,  -301,  -301,  -301,     2,  -301,  -301,  -301,  -301,
    -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,
    -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,     0,  -301,
    -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,
       0,     0,   305,  -301,     0,  -301,     0,     0,   306,   307,
     308,  -301,  -301,     0,     0,  -301,  -301,  -301,  -301,  -301,
    -301,   309,   310,  -301,  -301,  -301,  -301,  -301,  -301,  -301,
    -301,  -301,     0,  -301,     0,   311,  -301,  -301,     0,   312,
     313,   314,   315,   316,   317,   318,   319,  -301,  -301,  -301,
    -301,  -301,  -301,  -301,   320,  -301,  -301,   321,  1258,   322,
    -301,  -301,  1156,  -301,  -301,  -301,  -301,   323,   324,  -301,
     325,   326,   327,   328,  -301,  -301,  -301,  -301,  -301,  -302,
     300,     0,     1,   301,   105,   302,  -302,   303,   304,  -302,
    -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,
    -302,  -302,  -302,  -302,  -302,  -302,  -302,     2,  -302,  -302,
    -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,
    -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,
       0,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,
    -302,  -302,     0,     0,   305,  -302,     0,  -302,     0,     0,
     306,   307,   308,  -302,  -302,     0,     0,  -302,  -302,  -302,
    -302,  -302,  -302,   309,   310,  -302,  -302,  -302,  -302,  -302,
    -302,  -302,  -302,  -302,     0,  -302,     0,   311,  -302,  -302,
       0,   312,   313,   314,   315,   316,   317,   318,   319,  -302,
    -302,  -302,  -302,  -302,  -302,  -302,   320,  -302,  -302,   321,
    1160,   322,  -302,  -302,  1161,  -302,  -302,  -302,  -302,   323,
     324,  -302,   325,   326,   327,   328,  -302,  -302,  -302,  -302,
    -302,  -597,   300,     0,     1,   301,   105,   302,  -597,   303,
     304,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,
    -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,     2,
    -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,
    -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,
    -597,  -597,     0,  -597,  -597,  -597,  -597,  -597,  -597,  -597,
    -597,  -597,  -597,  -597,     0,     0,   305,  -597,     0,  -597,
       0,     0,   306,   307,   308,  -597,  -597,     0,     0,  -597,
    -597,  -597,  -597,  -597,  -597,   309,   310,  -597,  -597,  -597,
    -597,  -597,  -597,  -597,  -597,  -597,     0,  -597,     0,   311,
    -597,  -597,     0,   312,   313,   314,   315,   316,   317,   318,
     319,  -597,  -597,  -597,  -597,  -597,  -597,  -597,   320,  -597,
    -597,   321,  -597,   322,  -597,  -597,  -597,  -597,   745,  -597,
    1339,   323,   324,  -597,   325,   326,   327,   328,  -597,  -597,
    -597,  -597,  -597,  -598,   300,     0,     1,   301,   105,   302,
    -598,   303,   304,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
    -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
    -598,     2,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
    -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
    -598,  -598,  -598,  -598,     0,  -598,  -598,  -598,  -598,  -598,
    -598,  -598,  -598,  -598,  -598,  -598,     0,     0,   305,  -598,
       0,  -598,     0,     0,   306,   307,   308,  -598,  -598,     0,
       0,  -598,  -598,  -598,  -598,  -598,  -598,   309,   310,  -598,
    -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,     0,  -598,
       0,   311,  -598,  -598,     0,   312,   313,   314,   315,   316,
     317,   318,   319,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
     320,  -598,  -598,   321,  -598,   322,  -598,  -598,  -598,  -598,
     745,  -598,  1405,   323,   324,  -598,   325,   326,   327,   328,
    -598,  -598,  -598,  -598,  -598,  -608,   300,     0,     1,   301,
     105,   302,  -608,   303,   304,  -608,  -608,  -608,  -608,  -608,
    -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,
    -608,  -608,  -608,     2,  -608,  -608,  -608,  -608,  -608,  -608,
    -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,
    -608,  -608,  -608,  -608,  -608,  -608,     0,  -608,  -608,  -608,
    -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,     0,     0,
     305,  -608,     0,  -608,     0,     0,   306,   307,   308,  -608,
    -608,     0,     0,  -608,  -608,  -608,  -608,  -608,  -608,   309,
     310,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,
       0,  -608,     0,   311,  -608,  -608,     0,   312,   313,   314,
     315,   316,   317,   318,   319,  -608,  -608,  -608,  -608,  -608,
    -608,  -608,   320,  -608,  -608,   321,  -608,   322,  -608,  -608,
    1156,  -608,  -608,  -608,  -608,   323,   324,  -608,   325,   326,
     327,   328,  -608,  -608,  -608,  -608,  -608,  -610,   300,     0,
       1,   301,   105,   302,  -610,   303,   304,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,     2,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,     0,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
       0,     0,   305,  -610,     0,  -610,     0,     0,   306,   307,
     308,  -610,  -610,     0,     0,  -610,  -610,  -610,  -610,  -610,
    -610,   309,   310,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,     0,  -610,     0,   311,  -610,  -610,     0,   312,
     313,   314,   315,   316,   317,   318,   319,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,   320,  -610,  -610,   321,  1160,   322,
    -610,  -610,  1161,  -610,  -610,  -610,  -610,   323,   324,  -610,
     325,   326,   327,   328,  -610,  -610,  -610,  -610,  -610,  -609,
     300,     0,     1,   301,   105,   302,  -609,   303,   304,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,     2,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
       0,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,     0,     0,   305,  -609,     0,  -609,     0,     0,
     306,   307,   308,  -609,  -609,     0,     0,  -609,  -609,  -609,
    -609,  -609,  -609,   309,   310,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,     0,  -609,     0,   311,  -609,  -609,
       0,   312,   313,   314,   315,   316,   317,   318,   319,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,   320,  -609,  -609,   321,
    -609,   322,  -609,  -609,  1156,  -609,  -609,  -609,  -609,   323,
     324,  -609,   325,   326,   327,   328,  -609,  -609,  -609,  -609,
    -609,  -354,  1920,     0,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,     0,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,     0,     0,  -354,  -354,     0,  -354,
       0,     0,  -354,  -354,  -354,  -354,  -354,     0,     0,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,     0,  -354,     0,  -354,
    -354,  -354,     0,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -359,  1963,     0,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,     0,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,     0,     0,  -359,  -359,
       0,  -359,     0,     0,  -359,  -359,  -359,  -359,  -359,     0,
       0,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,     0,  -359,
       0,  -359,  -359,  -359,     0,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -347,   300,     0,     1,   301,
     105,   302,  -347,   303,   304,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,     2,  -347,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,     0,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,     0,     0,
     305,  -347,     0,  -347,     0,     0,   306,   307,   308,  -347,
    -347,     0,     0,  -347,  -347,  -347,  -347,  -347,  -347,   309,
     310,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
       0,  -347,     0,   311,  -347,  -347,     0,   312,   313,   314,
     315,   316,   317,   318,   319,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,   320,  -347,  -347,   321,  -347,   322,  -347,  -347,
    -347,  -347,   745,  -347,  -347,   323,   324,  -347,   325,   326,
     327,   328,  -347,  -347,  -347,  -347,  -347,  -575,   300,     0,
       1,   301,   105,   302,  -575,   303,   304,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,     2,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,     0,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
       0,     0,   305,  -575,     0,  -575,     0,     0,   306,   307,
     308,  -575,  -575,     0,     0,  -575,  -575,  -575,  -575,  -575,
    -575,   309,   310,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,     0,  -575,     0,   311,  -575,  -575,     0,   312,
     313,   314,   315,   316,   317,   318,   319,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,   320,  -575,  -575,   321,  -575,   322,
    -575,  -575,  -575,  -575,   745,  -575,  -575,   323,   324,  -575,
     325,   326,   327,   328,  -575,  -575,  -575,  -575,  -575,  -583,
     300,     0,     1,   301,   105,   302,  -583,   303,   304,  -583,
    -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,
    -583,  -583,  -583,  -583,  -583,  -583,  -583,     2,  -583,  -583,
    -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,
    -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,
       0,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,
    -583,  -583,     0,     0,   305,  -583,     0,  -583,     0,     0,
     306,   307,   308,  -583,  -583,     0,     0,  -583,  -583,  -583,
    -583,  -583,  -583,   309,   310,  -583,  -583,  -583,  -583,  -583,
    -583,  -583,  -583,  -583,     0,  -583,     0,   311,  -583,  -583,
       0,   312,   313,   314,   315,   316,   317,   318,   319,  -583,
    -583,  -583,  -583,  -583,  -583,  -583,   320,  -583,  -583,   321,
    -583,   322,  -583,  -583,  -583,  -583,   745,  -583,  -583,   323,
     324,  -583,   325,   326,   327,   328,  -583,  -583,  -583,  -583,
    -583,  -576,   300,     0,     1,   301,   105,   302,  -576,   303,
     304,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,     2,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,     0,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,     0,     0,   305,  -576,     0,  -576,
       0,     0,   306,   307,   308,  -576,  -576,     0,     0,  -576,
    -576,  -576,  -576,  -576,  -576,   309,   310,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,     0,  -576,     0,   311,
    -576,  -576,     0,   312,   313,   314,   315,   316,   317,   318,
     319,  -576,  -576,  -576,  -576,  -576,  -576,  -576,   320,  -576,
    -576,   321,  -576,   322,  -576,  -576,  -576,  -576,   745,  -576,
    -576,   323,   324,  -576,   325,   326,   327,   328,  -576,  -576,
    -576,  -576,  -576,  -584,   300,     0,     1,   301,   105,   302,
    -584,   303,   304,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,     2,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,     0,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,     0,     0,   305,  -584,
       0,  -584,     0,     0,   306,   307,   308,  -584,  -584,     0,
       0,  -584,  -584,  -584,  -584,  -584,  -584,   309,   310,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,     0,  -584,
       0,   311,  -584,  -584,     0,   312,   313,   314,   315,   316,
     317,   318,   319,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
     320,  -584,  -584,   321,  -584,   322,  -584,  -584,  -584,  -584,
     745,  -584,  -584,   323,   324,  -584,   325,   326,   327,   328,
    -584,  -584,  -584,  -584,  -584,  -577,   300,     0,     1,   301,
     105,   302,  -577,   303,   304,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,     2,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,     0,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,     0,     0,
     305,  -577,     0,  -577,     0,     0,   306,   307,   308,  -577,
    -577,     0,     0,  -577,  -577,  -577,  -577,  -577,  -577,   309,
     310,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       0,  -577,     0,   311,  -577,  -577,     0,   312,   313,   314,
     315,   316,   317,   318,   319,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,   320,  -577,  -577,   321,  -577,   322,  -577,  -577,
    -577,  -577,   745,  -577,  -577,   323,   324,  -577,   325,   326,
     327,   328,  -577,  -577,  -577,  -577,  -577,  -585,   300,     0,
       1,   301,   105,   302,  -585,   303,   304,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,     2,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,     0,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
       0,     0,   305,  -585,     0,  -585,     0,     0,   306,   307,
     308,  -585,  -585,     0,     0,  -585,  -585,  -585,  -585,  -585,
    -585,   309,   310,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,     0,  -585,     0,   311,  -585,  -585,     0,   312,
     313,   314,   315,   316,   317,   318,   319,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,   320,  -585,  -585,   321,  -585,   322,
    -585,  -585,  -585,  -585,   745,  -585,  -585,   323,   324,  -585,
     325,   326,   327,   328,  -585,  -585,  -585,  -585,  -585,  -578,
     300,     0,     1,   301,   105,   302,  -578,   303,   304,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,     2,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
       0,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,     0,     0,   305,  -578,     0,  -578,     0,     0,
     306,   307,   308,  -578,  -578,     0,     0,  -578,  -578,  -578,
    -578,  -578,  -578,   309,   310,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     0,  -578,     0,   311,  -578,  -578,
       0,   312,   313,   314,   315,   316,   317,   318,   319,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,   320,  -578,  -578,   321,
    -578,   322,  -578,  -578,  -578,  -578,   745,  -578,  -578,   323,
     324,  -578,   325,   326,   327,   328,  -578,  -578,  -578,  -578,
    -578,  -586,   300,     0,     1,   301,   105,   302,  -586,   303,
     304,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,     2,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,     0,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,     0,     0,   305,  -586,     0,  -586,
       0,     0,   306,   307,   308,  -586,  -586,     0,     0,  -586,
    -586,  -586,  -586,  -586,  -586,   309,   310,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,     0,  -586,     0,   311,
    -586,  -586,     0,   312,   313,   314,   315,   316,   317,   318,
     319,  -586,  -586,  -586,  -586,  -586,  -586,  -586,   320,  -586,
    -586,   321,  -586,   322,  -586,  -586,  -586,  -586,   745,  -586,
    -586,   323,   324,  -586,   325,   326,   327,   328,  -586,  -586,
    -586,  -586,  -586,  -356,  2066,     0,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,     0,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,     0,     0,  -356,  -356,
       0,  -356,     0,     0,  -356,  -356,  -356,  -356,  -356,     0,
       0,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,     0,  -356,
       0,  -356,  -356,  -356,     0,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -355,  2067,     0,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,     0,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,     0,     0,
    -355,  -355,     0,  -355,     0,     0,  -355,  -355,  -355,  -355,
    -355,     0,     0,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
       0,  -355,     0,  -355,  -355,  -355,     0,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -361,   756,     0,
    -361,  -361,  -361,  -361,   757,   758,   759,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,     0,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
       0,     0,  -361,  -361,     0,  -361,     0,     0,  -361,  -361,
    -361,  -361,  -361,     0,     0,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,     0,  -361,     0,  -361,  -361,  -361,     0,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,   760,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  1151,  -361,  -361,   762,     0,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -476,
       0,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,
    -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,
    -476,  -476,  -476,  -476,  -476,  -476,  -476,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -476,     0,     0,     0,     0,     0,  -476,
    -476,  -476,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -476,  -476,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -476,     0,     0,     0,
    -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,     0,     0,
       0,     0,     0,     0,     0,  -476,  -476,  -476,  -476,  -476,
    -476,     0,  -476,  -476,     0,     0,  -476,     0,  -476,  -476,
       0,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,
    -468,  1153,     0,  -468,  -468,  -468,  -468,     0,  -468,  -468,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,     0,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,     0,     0,  -468,  -468,     0,  -468,     0,
       0,  -468,  -468,  -468,  -468,  -468,     0,     0,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,     0,  -468,     0,  -468,  -468,
    -468,     0,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,     0,     0,
    -468,  -468,  -468,  -468,     0,  -468,  -468,  -468,  1154,  -468,
    -468,  -468,     0,  -468,  -468,  -468,  -468, -1114,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2, -1114, -1114, -1114, -1114,
   -1114, -1114, -1114, -1114, -1114, -1114, -1114, -1114, -1114, -1114,
   -1114, -1114, -1114, -1114, -1114, -1114, -1114, -1114,     0, -1114,
   -1114, -1114, -1114, -1114, -1114, -1114, -1114, -1114, -1114, -1114,
       0,     0,   305, -1114,     0, -1114,     0,     0,   306,   307,
     308, -1114, -1114,     0,     0, -1114, -1114, -1114, -1114, -1114,
   -1114,   309,   310, -1114, -1114, -1114, -1114, -1114, -1114, -1114,
   -1114, -1114,     0, -1114,     0,   311, -1114, -1114,     0,   312,
     313,   314,   315,   316,   317,   318,   319, -1114, -1114, -1114,
   -1114, -1114, -1114, -1114,   320,     0,     0,   321,  1160,   322,
   -1114,     0,  1161, -1114, -1114,     0, -1114,   323,   324,     0,
     325,   326,   327,   328, -1257,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1257, -1257, -1257, -1257, -1257, -1257, -1257,
   -1257, -1257, -1257, -1257, -1257, -1257, -1257, -1257, -1257, -1257,
   -1257, -1257, -1257, -1257, -1257,     0, -1257, -1257, -1257, -1257,
   -1257, -1257, -1257, -1257, -1257, -1257, -1257,     0,     0,   305,
   -1257,     0, -1257,     0,     0,   306,   307,   308, -1257, -1257,
       0,     0, -1257, -1257, -1257, -1257, -1257, -1257,   309,   310,
   -1257, -1257, -1257, -1257, -1257, -1257, -1257, -1257, -1257,     0,
   -1257,     0,   311, -1257, -1257,     0,   312,   313,   314,   315,
     316,   317,   318,   319, -1257, -1257, -1257, -1257, -1257, -1257,
   -1257,   320,     0,     0,   321,  1160,   322,  1643,     0,  1161,
   -1257, -1257,     0, -1257,   323,   324,     0,   325,   326,   327,
     328, -1215,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215,     0, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215,     0,     0,   305, -1215,     0, -1215,
       0,     0,   306,   307,   308, -1215, -1215,     0,     0, -1215,
   -1215, -1215, -1215, -1215, -1215,   309,   310, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215,     0, -1215,     0,   311,
   -1215, -1215,     0,   312,   313,   314,   315,   316,   317,   318,
     319, -1215, -1215, -1215, -1215, -1215, -1215, -1215,   320,     0,
       0,   321,  1871,   322, -1215,     0,  1161, -1215, -1215,     0,
   -1215,   323,   324,     0,   325,   326,   327,   328, -1246,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1246, -1246, -1246,
   -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246,
   -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246, -1246,     0,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,     0,     0,   305, -1246,     0, -1246,     0,     0,   306,
     307,   308, -1246, -1246,     0,     0, -1246,    32, -1246, -1246,
   -1246, -1246,   309,   310,  1125, -1246,   635,   636,   637, -1246,
   -1246, -1246, -1246,     0, -1246,     0,   311, -1246, -1246,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
   -1246, -1246, -1246, -1246, -1246,   320,     0,     0,   321,  1160,
     322,   638,     0,  1161, -1246,   252,     0,   639,   323,   324,
       0,   325,   326,   327,   328,  -609,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,     0,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,     0,     0,
     305,  -609,     0,  -609,     0,     0,   306,   307,   308,  -609,
    -609,     0,     0,  -609,  -609,  -609,  -609,  -609,  -609,   309,
     310,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
       0,  -609,     0,   311,  -609,  -609,     0,   312,   313,   314,
     315,   316,   317,   318,   319,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,   320,     0,     0,   321,  -609,   322,  1155,     0,
    1156,  -609,  -609,     0,  -609,   323,   324,     0,   325,   326,
     327,   328, -1238,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238,     0, -1238, -1238, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238, -1238, -1238,     0,     0,   305, -1238,     0,
   -1238,     0,     0,   306,   307,   308, -1238, -1238,     0,     0,
   -1238, -1238, -1238, -1238, -1238, -1238,   309,   310, -1238, -1238,
   -1238, -1238, -1238, -1238, -1238, -1238, -1238,     0, -1238,     0,
     311, -1238, -1238,     0,   312,   313,   314,   315,   316,   317,
     318,   319, -1238, -1238, -1238, -1238, -1238, -1238, -1238,   320,
       0,     0,   321,  2112,   322, -1238,     0,  1156, -1238, -1238,
       0, -1238,   323,   324,     0,   325,   326,   327,   328, -1239,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1239, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
       0, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239,     0,     0,   305, -1239,     0, -1239,     0,     0,
     306,   307,   308, -1239, -1239,     0,     0, -1239, -1239, -1239,
   -1239, -1239, -1239,   309,   310, -1239, -1239, -1239, -1239, -1239,
   -1239, -1239, -1239, -1239,     0, -1239,     0,   311, -1239, -1239,
       0,   312,   313,   314,   315,   316,   317,   318,   319, -1239,
   -1239, -1239, -1239, -1239, -1239, -1239,   320,     0,     0,   321,
    1160,   322,  2113,     0,  1161, -1239, -1239,     0, -1239,   323,
     324,     0,   325,   326,   327,   328, -1233,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1233, -1233, -1233, -1233, -1233,
   -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233,
   -1233, -1233, -1233, -1233, -1233, -1233, -1233,     0,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,     0,
       0,   305, -1233,     0, -1233,     0,     0,   306,   307,   308,
   -1233, -1233,     0,     0, -1233,    32, -1233, -1233, -1233, -1233,
     309,   310,  1125, -1233,   635,   636,   637, -1233, -1233, -1233,
   -1233,     0, -1233,     0,   311, -1233, -1233,     0,   312,   313,
     314,   315,   316,   317,   318,   319,    43,    44, -1233, -1233,
   -1233, -1233, -1233,   320,     0,     0,   321,  1160,   322,   638,
       0,  1161, -1233,   252,     0,   639,   323,   324,     0,   325,
     326,   327,   328, -1181,   613,     0, -1181, -1181, -1181, -1181,
       0, -1181, -1181,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181,     0, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181,     0,     0, -1181, -1181,
       0, -1181,     0,     0, -1181, -1181, -1181, -1181, -1181,     0,
       0, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,     0, -1181,
       0, -1181, -1181, -1181,     0, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181,     0,     0, -1181,     0, -1181,   614,     0, -1181, -1181,
   -1181,     0, -1181, -1181, -1181,     0, -1181, -1181, -1181, -1181,
   -1204,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,     0,     0,   305,   244,     0, -1204,     0,
       0,   306,   307,   308,    28,    29,     0,     0, -1204,    32,
   -1204, -1204, -1204, -1204,   309,   633,   634,   246,   635,   636,
     637, -1204, -1204, -1204, -1204,     0, -1204,     0,   311, -1204,
     247,     0,   312,   313,   314,   315,   316,   317,   318,   319,
      43,    44,   248,   249,   250,   251,   205,   320,     0,     0,
     321,     0,   322,   638,     0, -1204, -1204,   252,     0,   639,
     323,   324,     0,   325,   326,   327,   328, -1182,   613,     0,
   -1182, -1182, -1182, -1182,     0, -1182, -1182,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,     0, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,
       0,     0, -1182, -1182,     0, -1182,     0,     0, -1182, -1182,
   -1182, -1182, -1182,     0,     0, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182,     0, -1182,     0, -1182, -1182, -1182,     0, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182,     0,     0, -1182,     0, -1182,
     614,     0, -1182, -1182, -1182,     0, -1182, -1182, -1182,     0,
   -1182, -1182, -1182, -1182, -1243,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1243, -1243, -1243, -1243, -1243, -1243, -1243,
   -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243, -1243,
   -1243, -1243, -1243, -1243, -1243,     0,  1117,  1118,  1119,   625,
    1120,  1121,  1122,  1123,   630,   631,  1124,     0,     0,   305,
   -1243,     0, -1243,     0,     0,   306,   307,   308, -1243, -1243,
       0,     0, -1243,    32, -1243, -1243, -1243, -1243,   309,   310,
    1125, -1243,   635,   636,   637, -1243, -1243, -1243, -1243,     0,
   -1243,     0,   311, -1243, -1243,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44, -1243, -1243, -1243, -1243,
   -1243,   320,     0,     0,   321,     0,   322,   638,     0, -1243,
   -1243,   252,     0,   639,   323,   324,     0,   325,   326,   327,
     328, -1259,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1259, -1259, -1259, -1259, -1259, -1259, -1259, -1259, -1259, -1259,
   -1259, -1259, -1259, -1259, -1259, -1259, -1259, -1259, -1259, -1259,
   -1259, -1259,     0, -1259, -1259, -1259, -1259, -1259, -1259, -1259,
   -1259, -1259, -1259, -1259,     0,     0,   305, -1259,     0, -1259,
       0,     0,   306,   307,   308, -1259, -1259,     0,     0, -1259,
   -1259, -1259, -1259, -1259, -1259,   309,   310, -1259, -1259, -1259,
   -1259, -1259, -1259, -1259, -1259, -1259,     0, -1259,     0,   311,
   -1259, -1259,     0,   312,   313,   314,   315,   316,   317,   318,
     319, -1259, -1259, -1259, -1259, -1259, -1259, -1259,   320,     0,
       0,   321,     0,   322,  1136,     0, -1259, -1259,   745,     0,
   -1259,   323,   324,     0,   325,   326,   327,   328, -1194,  1163,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,     0,     0,   305,   244,     0, -1194,     0,     0,   306,
     307,   308,    28,    29,     0,     0, -1194,    32, -1194, -1194,
   -1194, -1194,   309,   633,   634,   246,   635,   636,   637, -1194,
   -1194, -1194, -1194,     0, -1194,     0,   311, -1194,   247,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
     248,   249,   250,   251,   205,   320,     0,     0,   321,     0,
     322,   638,     0, -1194, -1194,   252,     0,   639,   323,   324,
       0,   325,   326,   327,   328, -1198,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,    18,
      19,   242,   243,    22,    23,    24,     0,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,     0,     0,
     305,   244,     0, -1198,     0,     0,   306,   307,   308,    28,
      29,     0,     0, -1198,    32, -1198, -1198, -1198, -1198,   309,
     633,   634,   246,   635,   636,   637, -1198, -1198, -1198, -1198,
       0, -1198,     0,   311, -1198,   247,     0,   312,   313,   314,
     315,   316,   317,   318,   319,    43,    44,   248,   249,   250,
     251,   205,   320,     0,     0,   321,     0,   322,   638,     0,
   -1198, -1198,   252,     0,   639,   323,   324,     0,   325,   326,
     327,   328, -1193,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   199,   200,   201,   202,   203,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,    18,    19,   242,   243,
      22,    23,    24,     0,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,     0,     0,   305,   244,     0,
   -1193,     0,     0,   306,   307,   308,    28,    29,     0,     0,
   -1193,    32, -1193, -1193, -1193, -1193,   309,   633,   634,   246,
     635,   636,   637, -1193, -1193, -1193, -1193,     0, -1193,     0,
     311, -1193,   247,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,   248,   249,   250,   251,   205,   320,
       0,     0,   321,     0,   322,   638,     0, -1193, -1193,   252,
       0,   639,   323,   324,     0,   325,   326,   327,   328, -1197,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,    18,    19,   242,   243,    22,    23,    24,
       0,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,     0,     0,   305,   244,     0, -1197,     0,     0,
     306,   307,   308,    28,    29,     0,     0, -1197,    32, -1197,
   -1197, -1197, -1197,   309,   633,   634,   246,   635,   636,   637,
   -1197, -1197, -1197, -1197,     0, -1197,     0,   311, -1197,   247,
       0,   312,   313,   314,   315,   316,   317,   318,   319,    43,
      44,   248,   249,   250,   251,   205,   320,     0,     0,   321,
       0,   322,   638,     0, -1197, -1197,   252,     0,   639,   323,
     324,     0,   325,   326,   327,   328, -1101,  1176,     0, -1101,
   -1101, -1101, -1101,     0, -1101, -1101,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1101, -1101, -1101, -1101, -1101, -1101,
   -1101, -1101, -1101, -1101, -1101, -1101, -1101, -1101, -1101, -1101,
   -1101, -1101, -1101, -1101, -1101, -1101, -1101,     0, -1101, -1101,
   -1101, -1101, -1101, -1101, -1101, -1101, -1101, -1101, -1101,     0,
       0, -1101, -1101,     0, -1101,     0,     0, -1101, -1101, -1101,
   -1101, -1101,     0,     0, -1101, -1101, -1101, -1101, -1101, -1101,
   -1101, -1101, -1101, -1101, -1101, -1101, -1101, -1101, -1101, -1101,
   -1101,     0, -1101,     0, -1101, -1101, -1101,     0, -1101, -1101,
   -1101, -1101, -1101, -1101, -1101, -1101, -1101, -1101, -1101, -1101,
   -1101, -1101, -1101, -1101,     0,     0, -1101,     0, -1101, -1101,
       0, -1101, -1101, -1101,     0, -1101, -1101, -1101,     0, -1101,
   -1101, -1101, -1101, -1103,  1177,     0, -1103, -1103, -1103, -1103,
       0, -1103, -1103,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103,
   -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103,
   -1103, -1103, -1103, -1103,     0, -1103, -1103, -1103, -1103, -1103,
   -1103, -1103, -1103, -1103, -1103, -1103,     0,     0, -1103, -1103,
       0, -1103,     0,     0, -1103, -1103, -1103, -1103, -1103,     0,
       0, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103,
   -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103,     0, -1103,
       0, -1103, -1103, -1103,     0, -1103, -1103, -1103, -1103, -1103,
   -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103, -1103,
   -1103,     0,     0, -1103,     0, -1103, -1103,     0, -1103, -1103,
   -1103,     0, -1103, -1103, -1103,     0, -1103, -1103, -1103, -1103,
   -1148,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,     0,     0,   305,   244,     0, -1148,     0,
       0,   306,   307,   308,    28,    29,     0,     0, -1148,    32,
   -1148, -1148, -1148, -1148,   309,   633,   634,   246,   635,   636,
     637, -1148, -1148, -1148, -1148,     0, -1148,     0,   311, -1148,
     247,     0,   312,   313,   314,   315,   316,   317,   318,   319,
      43,    44,   248,   249,   250,   251,   205,   320,     0,     0,
     321,     0,   322,   638,     0, -1148, -1148,   252,     0,   639,
     323,   324,     0,   325,   326,   327,   328, -1150,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,    18,    19,   242,   243,    22,    23,    24,     0,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
       0,     0,   305,   244,     0, -1150,     0,     0,   306,   307,
     308,    28,    29,     0,     0, -1150,    32, -1150, -1150, -1150,
   -1150,   309,   633,   634,   246,   635,   636,   637, -1150, -1150,
   -1150, -1150,     0, -1150,     0,   311, -1150,   247,     0,   312,
     313,   314,   315,   316,   317,   318,   319,    43,    44,   248,
     249,   250,   251,   205,   320,     0,     0,   321,     0,   322,
     638,     0, -1150, -1150,   252,     0,   639,   323,   324,     0,
     325,   326,   327,   328, -1195,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   199,   200,   201,   202,   203,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,    18,    19,
     242,   243,    22,    23,    24,     0,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,     0,     0,   305,
     244,     0, -1195,     0,     0,   306,   307,   308,    28,    29,
       0,     0, -1195,    32, -1195, -1195, -1195, -1195,   309,   633,
     634,   246,   635,   636,   637, -1195, -1195, -1195, -1195,     0,
   -1195,     0,   311, -1195,   247,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,   248,   249,   250,   251,
     205,   320,     0,     0,   321,     0,   322,   638,     0, -1195,
   -1195,   252,     0,   639,   323,   324,     0,   325,   326,   327,
     328, -1199,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,    18,    19,   242,   243,    22,
      23,    24,     0,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,     0,     0,   305,   244,     0, -1199,
       0,     0,   306,   307,   308,    28,    29,     0,     0, -1199,
      32, -1199, -1199, -1199, -1199,   309,   633,   634,   246,   635,
     636,   637, -1199, -1199, -1199, -1199,     0, -1199,     0,   311,
   -1199,   247,     0,   312,   313,   314,   315,   316,   317,   318,
     319,    43,    44,   248,   249,   250,   251,   205,   320,     0,
       0,   321,     0,   322,   638,     0, -1199, -1199,   252,     0,
     639,   323,   324,     0,   325,   326,   327,   328, -1196,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,     0,     0,   305,   244,     0, -1196,     0,     0,   306,
     307,   308,    28,    29,     0,     0, -1196,    32, -1196, -1196,
   -1196, -1196,   309,   633,   634,   246,   635,   636,   637, -1196,
   -1196, -1196, -1196,     0, -1196,     0,   311, -1196,   247,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
     248,   249,   250,   251,   205,   320,     0,     0,   321,     0,
     322,   638,     0, -1196, -1196,   252,     0,   639,   323,   324,
       0,   325,   326,   327,   328, -1200,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,    18,
      19,   242,   243,    22,    23,    24,     0,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,     0,     0,
     305,   244,     0, -1200,     0,     0,   306,   307,   308,    28,
      29,     0,     0, -1200,    32, -1200, -1200, -1200, -1200,   309,
     633,   634,   246,   635,   636,   637, -1200, -1200, -1200, -1200,
       0, -1200,     0,   311, -1200,   247,     0,   312,   313,   314,
     315,   316,   317,   318,   319,    43,    44,   248,   249,   250,
     251,   205,   320,     0,     0,   321,     0,   322,   638,     0,
   -1200, -1200,   252,     0,   639,   323,   324,     0,   325,   326,
     327,   328, -1191,   613,     0, -1191, -1191, -1191, -1191,     0,
   -1191, -1191,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191,     0, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191, -1191, -1191,     0,     0, -1191, -1191,     0,
   -1191,     0,     0, -1191, -1191, -1191, -1191, -1191,     0,     0,
   -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191, -1191, -1191, -1191, -1191,     0, -1191,     0,
   -1191, -1191, -1191,     0, -1191, -1191, -1191, -1191, -1191, -1191,
   -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191, -1191,
       0,     0, -1191,     0, -1191,   614,     0, -1191, -1191, -1191,
       0, -1191, -1191, -1191,     0, -1191, -1191, -1191, -1191, -1192,
     613,     0, -1192, -1192, -1192, -1192,     0, -1192, -1192,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1192, -1192, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
       0, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
   -1192, -1192,     0,     0, -1192, -1192,     0, -1192,     0,     0,
   -1192, -1192, -1192, -1192, -1192,     0,     0, -1192, -1192, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
   -1192, -1192, -1192, -1192,     0, -1192,     0, -1192, -1192, -1192,
       0, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192, -1192,
   -1192, -1192, -1192, -1192, -1192, -1192, -1192,     0,     0, -1192,
       0, -1192,   614,     0, -1192, -1192, -1192,     0, -1192, -1192,
   -1192,     0, -1192, -1192, -1192, -1192, -1028,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1028, -1028, -1028, -1028, -1028,
   -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028,
   -1028, -1028, -1028, -1028, -1028, -1028, -1028,     0, -1028, -1028,
   -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028,     0,
       0,   305, -1028,     0, -1028,     0,     0,   306,   307,   308,
   -1028, -1028,     0,     0, -1028, -1028, -1028, -1028, -1028, -1028,
     309,   310, -1028, -1028, -1028, -1028, -1028, -1028, -1028, -1028,
   -1028,     0, -1028,     0,   311, -1028, -1028,     0,   312,   313,
     314,   315,   316,   317,   318,   319, -1028, -1028, -1028, -1028,
   -1028, -1028, -1028,   320,     0,     0,   321,     0,   322, -1028,
       0,  1840,  1841,  1016,     0, -1028,   323,   324,     0,   325,
     326,   327,   328, -1154,   613,     0, -1154, -1154, -1154, -1154,
       0, -1154, -1154,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154,     0, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154,     0,     0, -1154, -1154,
       0, -1154,     0,     0, -1154, -1154, -1154, -1154, -1154,     0,
       0, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,     0, -1154,
       0, -1154, -1154, -1154,     0, -1154, -1154, -1154, -1154, -1154,
   -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154, -1154,
   -1154,     0,     0, -1154,     0, -1154,   614,     0, -1154, -1154,
   -1154,     0, -1154, -1154, -1154,     0, -1154, -1154, -1154, -1154,
   -1155,   613,     0, -1155, -1155, -1155, -1155,     0, -1155, -1155,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155,     0, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155, -1155, -1155,     0,     0, -1155, -1155,     0, -1155,     0,
       0, -1155, -1155, -1155, -1155, -1155,     0,     0, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155,     0, -1155,     0, -1155, -1155,
   -1155,     0, -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,
   -1155, -1155, -1155, -1155, -1155, -1155, -1155, -1155,     0,     0,
   -1155,     0, -1155,   614,     0, -1155, -1155, -1155,     0, -1155,
   -1155, -1155,     0, -1155, -1155, -1155, -1155, -1151,   613,     0,
   -1151, -1151, -1151, -1151,     0, -1151, -1151,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,     0, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
       0,     0, -1151, -1151,     0, -1151,     0,     0, -1151, -1151,
   -1151, -1151, -1151,     0,     0, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151,     0, -1151,     0, -1151, -1151, -1151,     0, -1151,
   -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151, -1151,
   -1151, -1151, -1151, -1151, -1151,     0,     0, -1151,     0, -1151,
     614,     0, -1151, -1151, -1151,     0, -1151, -1151, -1151,     0,
   -1151, -1151, -1151, -1151, -1030,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1030, -1030, -1030, -1030, -1030, -1030, -1030,
   -1030, -1030, -1030, -1030, -1030, -1030, -1030, -1030, -1030, -1030,
   -1030, -1030, -1030, -1030, -1030,     0, -1030, -1030, -1030, -1030,
   -1030, -1030, -1030, -1030, -1030, -1030, -1030,     0,     0,   305,
   -1030,     0, -1030,     0,     0,   306,   307,   308, -1030, -1030,
       0,     0, -1030, -1030, -1030, -1030, -1030, -1030,   309,   310,
   -1030, -1030, -1030, -1030, -1030, -1030, -1030, -1030, -1030,     0,
   -1030,     0,   311, -1030, -1030,     0,   312,   313,   314,   315,
     316,   317,   318,   319, -1030, -1030, -1030, -1030, -1030, -1030,
   -1030,   320,     0,     0,   321,     0,   322, -1030,     0, -1030,
    2027,  1016,     0, -1030,   323,   324,     0,   325,   326,   327,
     328, -1024,  2030,     0, -1024, -1024, -1024, -1024,     0, -1024,
   -1024,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1024,
   -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
   -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
   -1024, -1024,     0, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
   -1024, -1024, -1024, -1024,     0,     0, -1024, -1024,     0, -1024,
       0,     0, -1024, -1024, -1024, -1024, -1024,     0,     0, -1024,
   -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
   -1024, -1024, -1024, -1024, -1024, -1024,     0, -1024,     0, -1024,
   -1024, -1024,     0, -1024, -1024, -1024, -1024, -1024, -1024, -1024,
   -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024,     0,
       0, -1024,     0, -1024, -1024,     0, -1024, -1024, -1024,     0,
   -1024, -1024, -1024,     0, -1024, -1024, -1024, -1024, -1152,   613,
       0, -1152, -1152, -1152, -1152,     0, -1152, -1152,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,     0,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152,     0,     0, -1152, -1152,     0, -1152,     0,     0, -1152,
   -1152, -1152, -1152, -1152,     0,     0, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152,     0, -1152,     0, -1152, -1152, -1152,     0,
   -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152, -1152,
   -1152, -1152, -1152, -1152, -1152, -1152,     0,     0, -1152,     0,
   -1152,   614,     0, -1152, -1152, -1152,     0, -1152, -1152, -1152,
       0, -1152, -1152, -1152, -1152, -1153,   613,     0, -1153, -1153,
   -1153, -1153,     0, -1153, -1153,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153,     0, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,     0,     0,
   -1153, -1153,     0, -1153,     0,     0, -1153, -1153, -1153, -1153,
   -1153,     0,     0, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
       0, -1153,     0, -1153, -1153, -1153,     0, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153,     0,     0, -1153,     0, -1153,   614,     0,
   -1153, -1153, -1153,     0, -1153, -1153, -1153,     0, -1153, -1153,
   -1153, -1153, -1240,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240,     0, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240,     0,     0,   305, -1240,     0,
   -1240,     0,     0,   306,   307,   308, -1240, -1240,     0,     0,
   -1240, -1240, -1240, -1240, -1240, -1240,   309,   310, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240,     0, -1240,     0,
     311, -1240, -1240,     0,   312,   313,   314,   315,   316,   317,
     318,   319, -1240, -1240, -1240, -1240, -1240, -1240, -1240,   320,
       0,     0,   321,     0,   322, -1240,     0, -1240, -1240, -1240,
       0, -1240,   323,   324,     0,   325,   326,   327,   328, -1025,
    2104,     0, -1025, -1025, -1025, -1025,     0, -1025, -1025,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1025, -1025, -1025,
   -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025,
   -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025,
       0, -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025,
   -1025, -1025,     0,     0, -1025, -1025,     0, -1025,     0,     0,
   -1025, -1025, -1025, -1025, -1025,     0,     0, -1025, -1025, -1025,
   -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025,
   -1025, -1025, -1025, -1025,     0, -1025,     0, -1025, -1025, -1025,
       0, -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025, -1025,
   -1025, -1025, -1025, -1025, -1025, -1025, -1025,     0,     0, -1025,
       0, -1025, -1025,     0, -1025, -1025, -1025,     0, -1025, -1025,
   -1025,     0, -1025, -1025, -1025, -1025,  -931,   579,     0,  -931,
    -931,  -931,  -931,     0,  -931,  -931,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -931,  -931,  -931,  -931,  -931,  -931,
    -931,  -931,  -931,  -931,  -931,  -931,  -931,  -931,  -931,  -931,
    -931,  -931,  -931,  -931,  -931,  -931,  -931,     0,     0,  -931,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -931,  -931,     0,  -931,     0,     0,  -931,  -931,  -931,
    -931,  -931,     0,     0,  -931,  -931,  -931,  -931,  -931,  -931,
    -931,  -931,  -931,  -931,  -931,     0,     0,  -931,  -931,  -931,
    -931,     0,  -931,     0,  -931,  -931,  -931,     0,  -931,  -931,
    -931,  -931,  -931,  -931,  -931,  -931,  -931,  -931,  -931,  -931,
    -931,  -931,  -931,  -931,     0,     0,  -931,   848,  -931,  -931,
       0,   581,  -931,  -931,     0,     0,  -931,  -931,     0,  -931,
    -931,  -931,  -931,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   199,   200,   201,   202,   203,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,    18,    19,   242,   243,
      22,    23,    24,     0,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,     0,     0,   305,   244,     0,
       0,     0,     0,   306,   307,   308,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   309,   633,   634,   246,
     635,   636,   637,     0,     0,     0,     0,     0,     0,     0,
     311,     0,   247,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,   248,   249,   250,   251,   205,   320,
       0,     0,   321,     0,   322,   638,     0,     0,     0,   252,
       0,   639,   323,   324,     0,   325,   326,   327,   328,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
    1117,  1118,  1119,   625,  1120,  1121,  1122,  1123,   630,   631,
    1124,     0,     0,   305,   244,     0,     0,     0,     0,   306,
     307,   308,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   309,   633,   634,   246,   635,   636,   637,     0,
       0,     0,     0,     0,     0,     0,   311,     0,   247,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
     248,   249,   250,   251,   205,   320,     0,     0,   321,     0,
     322,   638,     0,     0,     0,   252,     0,   639,   323,   324,
       0,   325,   326,   327,   328,  1267,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   199,   200,   201,   202,   203,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,    18,    19,
     242,   243,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
     244,     0,     0,     0,     0,   306,   307,   308,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   309,   633,
      38,   246,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,   247,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,   248,   249,   250,   251,
     205,   320,     0,     0,   321,     0,   322,   986,     0,   987,
    -110,   745,     0,     0,   323,   324,     0,   325,   326,   327,
     328,  1274,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   305,   244,     0,     0,     0,
       0,   306,   307,   308,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   309,   633,    38,   246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
     247,     0,   312,   313,   314,   315,   316,   317,   318,   319,
      43,    44,   248,   249,   250,   251,   205,   320,     0,     0,
     321,     0,   322,   986,     0,   987,   -98,   745,     0,     0,
     323,   324,     0,   325,   326,   327,   328,  1278,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   199,   200,   201,   202,   203,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   305,   244,     0,     0,     0,     0,   306,   307,   308,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     309,   633,    38,   246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,   247,     0,   312,   313,
     314,   315,   316,   317,   318,   319,    43,    44,   248,   249,
     250,   251,   205,   320,     0,     0,   321,     0,   322,   986,
       0,   987,  -102,   745,     0,     0,   323,   324,     0,   325,
     326,   327,   328,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   199,   200,   201,   202,   203,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,    18,    19,   242,   243,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   305,   244,     0,
       0,     0,     0,   306,   307,   308,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   309,   633,    38,   246,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,   247,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,   248,   249,   250,   251,   205,   320,
       0,     0,   321,     0,   322,  1532,     0,   987,   -65,   745,
       0,     0,   323,   324,     0,   325,   326,   327,   328,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   305,   244,     0,     0,     0,     0,   306,
     307,   308,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   309,   633,    38,   246,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,   247,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
     248,   249,   250,   251,   205,   320,     0,     0,   321,     0,
     322,  1541,     0,   987,  1542,   745,     0,     0,   323,   324,
       0,   325,   326,   327,   328,  1599,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   199,   200,   201,   202,   203,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,    18,    19,
     242,   243,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
     244,     0,     0,     0,     0,   306,   307,   308,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   309,   633,
      38,   246,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,   247,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,   248,   249,   250,   251,
     205,   320,     0,     0,   321,     0,   322,   986,     0,   987,
     -81,   745,     0,     0,   323,   324,     0,   325,   326,   327,
     328,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   305,   244,     0,     0,     0,
       0,   306,   307,   308,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   309,   633,    38,   246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
     247,     0,   312,   313,   314,   315,   316,   317,   318,   319,
      43,    44,   248,   249,   250,   251,   205,   320,     0,     0,
     321,     0,   322,  1541,     0,   987,  -107,   745,     0,     0,
     323,   324,     0,   325,   326,   327,   328,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   199,   200,   201,   202,   203,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
      18,    19,   242,   243,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   305,   244,     0,     0,     0,     0,   306,   307,   308,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     309,   633,    38,   246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,   247,     0,   312,   313,
     314,   315,   316,   317,   318,   319,    43,    44,   248,   249,
     250,   251,   205,   320,     0,     0,   321,     0,   322,  1541,
       0,   987,   -97,   745,     0,     0,   323,   324,     0,   325,
     326,   327,   328,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   199,   200,   201,   202,   203,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,    18,    19,   242,   243,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   305,   244,     0,
       0,     0,     0,   306,   307,   308,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   309,   633,    38,   246,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,   247,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,   248,   249,   250,   251,   205,   320,
       0,     0,   321,     0,   322,  1541,     0,   987,  -101,   745,
       0,     0,   323,   324,     0,   325,   326,   327,   328,  1801,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   305,   244,     0,     0,     0,     0,   306,
     307,   308,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   309,   633,    38,   246,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,   247,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
     248,   249,   250,   251,   205,   320,     0,     0,   321,     0,
     322,   986,     0,   987,   -88,   745,     0,     0,   323,   324,
       0,   325,   326,   327,   328,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   199,   200,   201,   202,   203,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,    18,    19,
     242,   243,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
     244,     0,     0,     0,     0,   306,   307,   308,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   309,   633,
      38,   246,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,   247,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,   248,   249,   250,   251,
     205,   320,     0,     0,   321,     0,   322,  1541,     0,   987,
     -78,   745,     0,     0,   323,   324,     0,   325,   326,   327,
     328,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   305,   244,     0,     0,     0,
       0,   306,   307,   308,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   309,   633,    38,   246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
     247,     0,   312,   313,   314,   315,   316,   317,   318,   319,
      43,    44,   248,   249,   250,   251,   205,   320,     0,     0,
     321,     0,   322,  1541,     0,   987,   -85,   745,     0,     0,
     323,   324,     0,   325,   326,   327,   328,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   199,   200,   201,   202,   203,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   305,    27,     0,     0,     0,     0,   306,   307,   308,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     309,   402,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,    40,     0,   312,   313,
     314,   315,   316,   317,   318,   319,    43,    44,    45,    46,
      47,    48,   205,   320,     0,     0,   321,   300,   322,     1,
     301,   105,   302,     0,   303,   304,   323,   324,     0,   325,
     326,   327,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   199,   200,   201,   202,   203,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   866,    27,     0,     0,     0,     0,   306,   307,   308,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     309,   402,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,    40,     0,   312,   313,
     314,   315,   316,   317,   318,   319,    43,    44,    45,    46,
      47,    48,   205,   320,     0,     0,   321,   300,   322,     1,
     301,   105,   302,     0,   303,   304,   323,   324,     0,   325,
     326,   327,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   305,    27,     0,     0,     0,     0,   306,   307,   308,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     309,   402,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,    40,     0,   312,   313,
     314,   315,   316,   317,   318,   319,    43,    44,    45,    46,
      47,    48,     0,   320,     0,     0,   321,   734,   322,     0,
       0,     0,     0,     0,     0,     0,   323,   324,     0,   325,
     326,   327,   328,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1196,    27,     0,
       0,     0,     0,   306,   307,   308,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,   309,   402,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,    40,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,    45,    46,    47,    48,     0,   320,
       0,     0,   708,   734,   322,     0,     0,     0,     0,     0,
       0,     0,   323,   324,     0,   325,   326,   327,   328,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   305,    27,     0,     0,     0,     0,   306,
     307,   308,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,   309,   402,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,    40,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
      45,    46,    47,    48,     0,   320,     0,     0,   321,   300,
     322,     1,   301,   105,   302,   252,   303,   304,   323,   324,
       0,   325,   326,   327,   328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   305,    27,     0,     0,     0,     0,   306,
     307,   308,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,   309,   402,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,    40,     0,
     312,   313,   314,   315,   316,   317,   318,   319,    43,    44,
      45,    46,    47,    48,     0,   320,     0,     0,   708,   734,
     322,     0,     0,     0,     0,     0,     0,     0,   323,   324,
       0,   325,   326,   327,   328,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     8,     9,
      10,   560,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   305,
      27,     0,     0,     0,     0,   306,   307,   308,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,   309,   402,
      38,    39,     0,   300,     0,     1,   301,   105,   302,     0,
     303,   304,   311,     0,    40,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,    45,    46,    47,    48,
       2,   889,     0,     0,   890,   734,   322,     0,     0,     0,
       0,     0,     0,     0,   323,   324,     0,   325,   326,   327,
     328,     0,     0,     0,  1117,  1118,  1119,   625,  1120,  1121,
    1122,  1123,   630,   631,  1124,     0,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,   309,   310,  1125,     0,
     635,   636,   637,     0,   300,     0,     1,   301,   105,   302,
     311,   303,   304,     0,   312,   313,   314,   315,   316,   317,
     318,   319,    43,    44,     0,     0,     0,     0,     0,   320,
       0,     2,   321,  -471,   322,   638,     0,  -471,     0,   252,
       0,   639,   323,   324,     0,   325,   326,   327,   328,     0,
       0,     0,     0,     0,     0,  1117,  1118,  1119,   625,  1120,
    1121,  1122,  1123,   630,   631,  1124,     0,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,     0,     0,     0,
       0,     0,    32,     0,     0,     0,     0,   309,   310,  1125,
       0,   635,   636,   637,     0,   300,     0,     1,   301,   105,
     302,   311,   303,   304,     0,   312,   313,   314,   315,   316,
     317,   318,   319,    43,    44,     0,     0,     0,     0,     0,
     320,     0,     2,   321,  1160,   322,   638,     0,  1161,     0,
     252,     0,   639,   323,   324,     0,   325,   326,   327,   328,
       0,     0,     0,     0,     0,     0,  1117,  1118,  1119,   625,
    1120,  1121,  1122,  1123,   630,   631,  1124,     0,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,     0,     0,
       0,     0,     0,    32,     0,     0,     0,     0,   309,   310,
    1125,     0,   635,   636,   637,     0,  1874,     0,     1,   301,
     105,   302,   311,   303,   304,     0,   312,   313,   314,   315,
     316,   317,   318,   319,    43,    44,     0,     0,     0,     0,
       0,   320,     0,     2,   321,     0,   322,   638,     0,     0,
       0,   252,     0,   639,   323,   324,     0,   325,   326,   327,
     328,     0,     0,     0,     0,     0,     0,  1117,  1118,  1119,
     625,  1120,  1121,  1122,  1123,   630,   631,  1124,     0,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,   309,
     310,  1125,     0,   635,   636,   637,     0,   300,     0,     1,
     301,   105,   302,   311,   303,   304,     0,   312,   313,   314,
     315,   316,   317,   318,   319,    43,    44,     0,     0,     0,
       0,     0,   320,     0,     2,   321,     0,   322,   638,     0,
       0,     0,   252,     0,   639,   323,   324,     0,   325,   326,
     327,   328,     0,     0,     0,     0,     0,     0,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,     0,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0,
     309,   310,  1125,     0,   635,   636,   637,     0,   300,     0,
       1,   301,   105,   302,   311,   303,   304,     0,   312,   313,
     314,   315,   316,   317,   318,   319,    43,    44,     0,     0,
       0,     0,     0,   320,     0,     2,   321,     0,   322,   638,
       0,     0,     0,   252,     0,   639,   323,   324,     0,   325,
     326,   327,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   321,  1160,   322,
       0,     0,  1765,     0,     0,     0,  1912,   323,   324,     0,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,  1160,   322,     0,     0,  1765,     0,     0,     0,  1916,
     323,   324,     0,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,  1160,   322,     0,     0,  1161,     0,
       0,     0,     0,   323,   324,  1924,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   321,  1160,   322,     0,
       0,  1161,     0,     0,     0,     0,   323,   324,  1927,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,  2050,     0,     1,   301,   105,   302,     0,
     303,   304,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       2,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
    1160,   322,  1895,     0,  1161,     0,     0,     0,     0,   323,
     324,     0,   325,   326,   327,   328,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     2,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,     0,     0,     0,     0,   320,
       0,     0,   321,  1160,   322,  1895,     0,  1161,     0,     0,
       0,     0,   323,   324,     0,   325,   326,   327,   328,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,     0,     0,     2,   312,   313,   314,
     315,   316,   317,   318,   319,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,   321,  2114,   322,  2115,     0,
    1156,     0,     0,     0,     0,   323,   324,     0,   325,   326,
     327,   328,     0,   305,     0,     0,     0,     0,     0,   306,
     307,   308,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     2,
     312,   313,   314,   315,   316,   317,   318,   319,     0,     0,
       0,     0,     0,     0,     0,   320,     0,     0,   321,  1160,
     322,  2113,     0,  1161,     0,     0,     0,     0,   323,   324,
       0,   325,   326,   327,   328,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     2,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,  1283,   322,     0,     0,     0,     0,   745,     0,
       0,   323,   324,     0,   325,   326,   327,   328,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     2,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,  1350,   322,     0,     0,     0,
       0,   745,     0,     0,   323,   324,     0,   325,   326,   327,
     328,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   321,     0,   322,
    1136,     0,     0,     0,   745,     0,     0,   323,   324,     0,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,  1632,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,  1160,   322,     0,     0,  1161,     0,     0,     0,     0,
     323,   324,     0,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,  1633,   322,  1634,     0,     0,     0,
       0,     0,     0,   323,   324,     0,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   321,     0,   322,  1642,
       0,  1156,     0,     0,     0,     0,   323,   324,     0,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       2,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
    1690,   322,     0,     0,     0,     0,   745,     0,     0,   323,
     324,     0,   325,   326,   327,   328,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     2,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,     0,     0,     0,     0,   320,
       0,     0,   321,  1699,   322,     0,     0,     0,     0,   745,
       0,     0,   323,   324,     0,   325,   326,   327,   328,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,     0,     0,     2,   312,   313,   314,
     315,   316,   317,   318,   319,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,   321,  1731,   322,     0,     0,
    1156,     0,     0,     0,     0,   323,   324,     0,   325,   326,
     327,   328,     0,   305,     0,     0,     0,     0,     0,   306,
     307,   308,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     2,
     312,   313,   314,   315,   316,   317,   318,   319,     0,     0,
       0,     0,     0,     0,     0,   320,     0,     0,   321,     0,
     322,     0,     0,  1156,     0,     0,     0,     0,   323,   324,
    1759,   325,   326,   327,   328,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     2,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,     0,   322,     0,     0,  1762,     0,     0,     0,
    1763,   323,   324,     0,   325,   326,   327,   328,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     2,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,     0,   322,     0,     0,  1156,
       0,     0,     0,     0,   323,   324,  1769,   325,   326,   327,
     328,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   321,     0,   322,
       0,     0,  1762,     0,     0,     0,  1771,   323,   324,     0,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,  1870,   322,     0,     0,  1156,     0,     0,     0,     0,
     323,   324,     0,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,  1872,   322,     0,     0,  1156,     0,
       0,     0,     0,   323,   324,     0,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   321,  1873,   322,     0,
       0,  1161,     0,     0,     0,     0,   323,   324,     0,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       2,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
    1876,   322,     0,     0,  1156,     0,     0,     0,     0,   323,
     324,     0,   325,   326,   327,   328,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     2,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,     0,     0,     0,     0,   320,
       0,     0,   321,  1633,   322,  1634,     0,     0,     0,     0,
       0,     0,   323,   324,     0,   325,   326,   327,   328,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,  1896,
       0,     1,   301,   105,   302,     0,   303,   304,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,     0,     0,     2,   312,   313,   314,
     315,   316,   317,   318,   319,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,   321,     0,   322,  1893,     0,
    1156,     0,     0,     0,     0,   323,   324,     0,   325,   326,
     327,   328,     0,   305,     0,     0,     0,     0,     0,   306,
     307,   308,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     2,
     312,   313,   314,   315,   316,   317,   318,   319,     0,     0,
       0,     0,     0,     0,     0,   320,     0,     0,   321,  1897,
     322,  1634,     0,     0,     0,     0,     0,     0,   323,   324,
       0,   325,   326,   327,   328,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     2,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,     0,   322,     0,     0,  1762,     0,     0,     0,
    1910,   323,   324,     0,   325,   326,   327,   328,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     2,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,     0,   322,     0,     0,  1762,
       0,     0,     0,  1914,   323,   324,     0,   325,   326,   327,
     328,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   321,     0,   322,
       0,     0,  1156,     0,     0,     0,     0,   323,   324,  1923,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,     0,   322,     0,     0,  1156,     0,     0,     0,     0,
     323,   324,  1926,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,  2035,   322,     0,     0,  1156,     0,
       0,     0,     0,   323,   324,     0,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   321,  1871,   322,     0,
       0,  1161,     0,     0,     0,     0,   323,   324,     0,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       2,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
    2042,   322,     0,     0,  1156,     0,     0,     0,     0,   323,
     324,     0,   325,   326,   327,   328,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     2,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,     0,     0,     0,     0,   320,
       0,     0,   321,  1897,   322,  1634,     0,     0,     0,     0,
       0,     0,   323,   324,     0,   325,   326,   327,   328,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,     0,     0,     2,   312,   313,   314,
     315,   316,   317,   318,   319,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,   321,  2118,   322,     0,     0,
    1156,     0,     0,     0,     0,   323,   324,     0,   325,   326,
     327,   328,     0,   305,     0,     0,     0,     0,     0,   306,
     307,   308,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     2,
     312,   313,   314,   315,   316,   317,   318,   319,     0,     0,
       0,     0,     0,     0,     0,   320,     0,     0,   321,     0,
     322,     0,     0,     0,  2146,  1016,     0,     0,   323,   324,
       0,   325,   326,   327,   328,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     2,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,  2149,   322,     0,     0,  1156,     0,     0,     0,
       0,   323,   324,     0,   325,   326,   327,   328,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     2,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,  2150,   322,     0,     0,  1156,
       0,     0,     0,     0,   323,   324,     0,   325,   326,   327,
     328,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   321,  2177,   322,
       0,     0,  1156,     0,     0,     0,     0,   323,   324,     0,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,     0,   322,     0,     0,     0,     0,     0,     0,     0,
     323,   324,   544,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,     0,   322,     0,     0,     0,     0,
     745,     0,     0,   323,   324,     0,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     300,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   321,     0,   322,     0,
       0,     0,     0,     0,     0,     0,   323,   324,   840,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,   300,     0,     1,   301,   105,   302,     0,
     303,   304,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       2,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
       0,   322,     0,     0,     0,     0,     0,     0,     0,   323,
     324,   844,   325,   326,   327,   328,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,   300,     0,     1,   301,
     105,   302,     0,   303,   304,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     2,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,     0,     0,     0,     0,   320,
       0,     0,   321,     0,   322,     0,     0,     0,     0,  1016,
       0,     0,   323,   324,     0,   325,   326,   327,   328,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,     0,     0,     2,   312,   313,   314,
     315,   316,   317,   318,   319,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,   321,     0,   322,     0,     0,
       0,     0,     0,     0,     0,   323,   324,  1057,   325,   326,
     327,   328,     0,   305,     0,     0,     0,     0,     0,   306,
     307,   308,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     2,
     312,   313,   314,   315,   316,   317,   318,   319,     0,     0,
       0,     0,     0,     0,     0,   320,     0,     0,   321,     0,
     322,     0,     0,     0,     0,     0,     0,  1109,   323,   324,
       0,   325,   326,   327,   328,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,  1477,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     2,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,   321,   734,   322,     0,     0,     0,     0,     0,     0,
       0,   323,   324,     0,   325,   326,   327,   328,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     2,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,     0,   322,     0,     0,     0,
       0,   745,     0,     0,   323,   324,     0,   325,   326,   327,
     328,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   321,     0,   322,
       0,     0,     0,     0,     0,     0,     0,   323,   324,  1580,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,   300,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,  1616,   322,     0,     0,     0,     0,     0,     0,     0,
     323,   324,     0,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   321,     0,   322,     0,     0,     0,     0,
       0,     0,  1619,   323,   324,     0,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
    1830,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   321,     0,   322,     0,
       0,     0,     0,  1829,     0,     0,   323,   324,     0,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,  1833,     0,     1,   301,   105,   302,     0,
     303,   304,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       2,   312,   313,   314,   315,   316,   317,   318,   319,     0,
       0,     0,     0,     0,     0,     0,   320,     0,     0,   321,
       0,   322,     0,     0,     0,     0,   745,     0,     0,   323,
     324,     0,   325,   326,   327,   328,     0,   305,     0,     0,
       0,     0,     0,   306,   307,   308,  1837,     0,     1,   301,
     105,   302,     0,   303,   304,     0,   309,   310,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     311,     0,     0,     2,   312,   313,   314,   315,   316,   317,
     318,   319,     0,     0,     0,     0,     0,     0,     0,   320,
       0,     0,   321,     0,   322,     0,     0,     0,     0,   745,
       0,     0,   323,   324,     0,   325,   326,   327,   328,     0,
     305,     0,     0,     0,     0,     0,   306,   307,   308,   300,
       0,     1,   301,   105,   302,     0,   303,   304,     0,   309,
     310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   311,     0,     0,     2,   312,   313,   314,
     315,   316,   317,   318,   319,     0,     0,     0,     0,     0,
       0,     0,   320,     0,     0,   321,     0,   322,     0,     0,
       0,     0,   745,     0,     0,   323,   324,     0,   325,   326,
     327,   328,     0,   305,     0,     0,     0,     0,     0,   306,
     307,   308,   300,     0,     1,   301,   105,   302,     0,   303,
     304,     0,   309,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   311,     0,     0,     2,
     312,   313,   314,   315,   316,   317,   318,   319,     0,     0,
       0,     0,     0,     0,     0,   320,     0,     0,   321,  1883,
     322,     0,     0,     0,     0,     0,     0,     0,   323,   324,
       0,   325,   326,   327,   328,     0,   305,     0,     0,     0,
       0,     0,   306,   307,   308,   300,     0,     1,   301,   105,
     302,     0,   303,   304,     0,   309,   310,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     2,   312,   313,   314,   315,   316,   317,   318,
     319,     0,     0,     0,     0,     0,     0,     0,   320,     0,
       0,  1950,     0,   322,     0,     0,     0,     0,  1829,     0,
       0,   323,   324,     0,   325,   326,   327,   328,     0,   305,
       0,     0,     0,     0,     0,   306,   307,   308,   300,     0,
       1,   301,   105,   302,     0,   303,   304,     0,   309,   310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     2,   312,   313,   314,   315,
     316,   317,   318,   319,     0,     0,     0,     0,     0,     0,
       0,   320,     0,     0,   321,  2051,   322,     0,     0,     0,
       0,     0,     0,     0,   323,   324,     0,   325,   326,   327,
     328,     0,   305,     0,     0,     0,     0,     0,   306,   307,
     308,   300,     0,     1,   301,   105,   302,     0,   303,   304,
       0,   309,   310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     2,   312,
     313,   314,   315,   316,   317,   318,   319,     0,     0,     0,
       0,     0,     0,     0,   320,     0,     0,   321,  2109,   322,
       0,     0,     0,     0,     0,     0,     0,   323,   324,     0,
     325,   326,   327,   328,     0,   305,     0,     0,     0,     0,
       0,   306,   307,   308,   698,     0,     1,   301,   105,   302,
       0,   303,   304,     0,   309,   310,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   311,     0,
       0,     2,   312,   313,   314,   315,   316,   317,   318,   319,
       0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
     321,     0,   322,     0,     0,     0,     0,     0,     0,     0,
     323,   324,     0,   325,   326,   327,   328,     0,   305,     0,
       0,     0,     0,     0,   306,   307,   308,   300,     0,     1,
     301,   105,   302,     0,   303,   304,     0,   309,   310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   311,     0,     0,     2,   312,   313,   314,   315,   316,
     317,   318,   319,     0,     0,     0,     0,     0,     0,     0,
     320,     0,     0,   699,     0,   322,     0,     0,     0,     0,
       0,     0,     0,   323,   324,     0,   325,   326,   327,   328,
       0,   305,     0,     0,     0,     0,     0,   306,   307,   308,
     698,     0,     1,   301,   105,   302,     0,   303,   304,     0,
     309,   310,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   311,     0,     0,     2,   312,   313,
     314,   315,   316,   317,   318,   319,     0,     0,     0,     0,
       0,     0,     0,   320,     0,     0,   708,     0,   322,     0,
       0,     0,     0,     0,     0,     0,   323,   324,     0,   325,
     326,   327,   328,     0,   305,     0,     0,     0,     0,     0,
     306,   307,   308,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   309,   310,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   311,     0,     0,
       0,   312,   313,   314,   315,   316,   317,   318,   319,  -919,
     579,     0,  -919,  -919,  -919,     0,   320,     0,     0,   731,
       0,   322,     0,     0,     0,     0,     0,     0,     0,   323,
     324,     0,   325,   326,   327,   328,     0,  -919,  -919,  -919,
    -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,
    -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,
       0,     0,  -919,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -919,  -919,     0,  -919,     0,     0,
    -919,  -919,     0,  -919,  -919,     0,     0,  -919,  -919,  -919,
    -919,  -919,  -919,     0,  -919,  -919,  -919,  -919,     0,     0,
    -919,  -919,  -919,  -919,     0,  -919,     0,  -919,  -919,  -919,
       0,  -919,  -919,  -919,  -919,  -919,  -919,  -919,     0,  -919,
    -919,  -919,  -919,  -919,  -919,  -919,  -919,     0,     0,  -919,
     580,  -919,  -919,     0,   581,  -919,     0,     0,     0,  -919,
    -919,  -189,   907,     0,  -189,  -189,  -189,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,     0,     0,  -189,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -189,  -189,     0,  -189,
       0,     0,  -189,  -189,     0,  -189,  -189,     0,     0,  -189,
    -189,  -189,  -189,  -189,  -189,     0,  -189,  -189,  -189,  -189,
       0,     0,  -189,  -189,  -189,  -189,     0,  -189,     0,  -189,
    -189,  -189,     0,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
       0,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,
       0,  -189,     0,  -189,   908,     0,   909,  -189,     0,     0,
       0,  -189,  -189,  -253,   921,     0,     1,   301,   105,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,  -253,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   420,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   421,    32,   422,   423,    35,    36,     0,   402,    38,
      39,   424,     0,     0,   425,   426,   427,   428,     0,   429,
       0,   430,   431,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   432,     0,   433,   434,  -251,   924,  -253,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
    -251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   420,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   421,    32,   422,   423,    35,
      36,     0,   402,    38,    39,   424,     0,     0,   425,   426,
     427,   428,     0,   429,     0,   430,   431,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   432,     0,   433,
     434,  -254,   921,  -251,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,  -254,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   420,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   421,
      32,   422,   423,    35,    36,     0,   402,    38,    39,   424,
       0,     0,   425,   426,   427,   428,     0,   429,     0,   430,
     431,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   432,     0,   433,   434,  -252,   924,  -254,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,  -252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   420,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   421,    32,   422,   423,    35,    36,     0,
     402,    38,    39,   424,     0,     0,   425,   426,   427,   428,
       0,   429,     0,   430,   431,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   432,     0,   433,   434,     0,
     419,  -252,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   420,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   421,    32,   422,
     423,    35,    36,     0,   402,    38,    39,   424,     0,     0,
     425,   426,   427,   428,     0,   429,     0,   430,   431,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   432,
       0,   433,   434,     0,   485,   435,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   420,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   421,    32,   422,   423,    35,    36,     0,   402,    38,
      39,   424,     0,     0,   425,   426,   427,   428,     0,   429,
       0,   430,   431,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   432,     0,   433,   434,     0,   507,   486,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   420,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   421,    32,   422,   423,    35,
      36,     0,   402,    38,    39,   424,     0,     0,   425,   426,
     427,   428,     0,   429,     0,   430,   431,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   432,     0,   433,
     434,     0,   512,   508,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   420,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   421,
      32,   422,   423,    35,    36,     0,   402,    38,    39,   424,
       0,     0,   425,   426,   427,   428,     0,   429,     0,   430,
     431,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   432,     0,   433,   434,     0,   516,   513,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   420,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   421,    32,   422,   423,    35,    36,     0,
     402,    38,    39,   424,     0,     0,   425,   426,   427,   428,
       0,   429,     0,   430,   431,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   432,     0,   433,   434,     0,
     921,   517,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   420,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   421,    32,   422,
     423,    35,    36,     0,   402,    38,    39,   424,     0,     0,
     425,   426,   427,   428,     0,   429,     0,   430,   431,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   432,
       0,   433,   434,     0,   924,  -774,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   420,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   421,    32,   422,   423,    35,    36,     0,   402,    38,
      39,   424,     0,     0,   425,   426,   427,   428,     0,   429,
       0,   430,   431,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   432,     0,   433,   434,     0,   921,  -775,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   420,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   421,    32,   422,   423,    35,
      36,     0,   402,    38,    39,   424,     0,     0,   425,   426,
     427,   428,     0,   429,     0,   430,   431,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   432,     0,   433,
     434,     0,   924,  -771,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   420,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   421,
      32,   422,   423,    35,    36,     0,   402,    38,    39,   424,
       0,     0,   425,   426,   427,   428,     0,   429,     0,   430,
     431,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   432,     0,   433,   434,     0,   921,  -772,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   420,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   421,    32,   422,   423,    35,    36,     0,
     402,    38,    39,   424,     0,     0,   425,   426,   427,   428,
       0,   429,     0,   430,   431,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   432,     0,   433,   434,     0,
     924,  -777,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   420,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   421,    32,   422,
     423,    35,    36,     0,   402,    38,    39,   424,     0,     0,
     425,   426,   427,   428,     0,   429,     0,   430,   431,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   432,
       0,   433,   434,     0,  1039,  -778,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   420,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   421,    32,   422,   423,    35,    36,     0,   402,    38,
      39,   424,     0,     0,   425,   426,   427,   428,     0,   429,
       0,   430,   431,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   432,     0,   433,   434,     0,  1043,  1040,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   420,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   421,    32,   422,   423,    35,
      36,     0,   402,    38,    39,   424,     0,     0,   425,   426,
     427,   428,     0,   429,     0,   430,   431,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   432,     0,   433,
     434,     0,   921,  1044,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   420,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   421,
      32,   422,   423,    35,    36,     0,   402,    38,    39,   424,
       0,     0,   425,   426,   427,   428,     0,   429,     0,   430,
     431,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   432,     0,   433,   434,     0,   924,  -754,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   420,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   421,    32,   422,   423,    35,    36,     0,
     402,    38,    39,   424,     0,     0,   425,   426,   427,   428,
       0,   429,     0,   430,   431,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   432,     0,   433,   434,     0,
     921,  -755,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   420,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   421,    32,   422,
     423,    35,    36,     0,   402,    38,    39,   424,     0,     0,
     425,   426,   427,   428,     0,   429,     0,   430,   431,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   432,
       0,   433,   434,     0,   924,  -757,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   420,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   421,    32,   422,   423,    35,    36,     0,   402,    38,
      39,   424,     0,     0,   425,   426,   427,   428,     0,   429,
       0,   430,   431,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   432,     0,   433,   434,     0,  1562,  -758,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   420,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   421,    32,   422,   423,    35,
      36,     0,   402,    38,    39,   424,     0,     0,   425,   426,
     427,   428,     0,   429,     0,   430,   431,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   432,     0,   433,
     434,     0,   921,  1563,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   420,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   421,
      32,   422,   423,    35,    36,     0,   402,    38,    39,   424,
       0,     0,   425,   426,   427,   428,     0,   429,     0,   430,
     431,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   432,     0,   433,   434,     0,   924,  -672,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   420,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   421,    32,   422,   423,    35,    36,     0,
     402,    38,    39,   424,     0,     0,   425,   426,   427,   428,
       0,   429,     0,   430,   431,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   432,     0,   433,   434,     0,
     921,  -673,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   420,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   421,    32,   422,
     423,    35,    36,     0,   402,    38,    39,   424,     0,     0,
     425,   426,   427,   428,     0,   429,     0,   430,   431,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   432,
       0,   433,   434,     0,   924,  -760,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   420,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   421,    32,   422,   423,    35,    36,     0,   402,    38,
      39,   424,     0,     0,   425,   426,   427,   428,     0,   429,
       0,   430,   431,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   432,     0,   433,   434,     0,   921,  -761,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   420,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   421,    32,   422,   423,    35,
      36,     0,   402,    38,    39,   424,     0,     0,   425,   426,
     427,   428,     0,   429,     0,   430,   431,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   432,     0,   433,
     434,     0,   924,  -665,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   420,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   421,
      32,   422,   423,    35,    36,     0,   402,    38,    39,   424,
       0,     0,   425,   426,   427,   428,     0,   429,     0,   430,
     431,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   432,     0,   433,   434,     0,   921,  -666,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   420,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   421,    32,   422,   423,    35,    36,     0,
     402,    38,    39,   424,     0,     0,   425,   426,   427,   428,
       0,   429,     0,   430,   431,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   432,     0,   433,   434,     0,
     924,  -661,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   420,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   421,    32,   422,
     423,    35,    36,     0,   402,    38,    39,   424,     0,     0,
     425,   426,   427,   428,     0,   429,     0,   430,   431,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   432,
       0,   433,   434,     0,   921,  -662,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   420,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   421,    32,   422,   423,    35,    36,     0,   402,    38,
      39,   424,     0,     0,   425,   426,   427,   428,     0,   429,
       0,   430,   431,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   432,     0,   433,   434,     0,   924,  -651,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   420,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   421,    32,   422,   423,    35,
      36,     0,   402,    38,    39,   424,     0,     0,   425,   426,
     427,   428,     0,   429,     0,   430,   431,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   432,     0,   433,
     434,     0,   921,  -652,     1,   301,   105,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   305,    27,     0,   420,
       0,     0,   306,   307,     0,    28,    29,     0,     0,   421,
      32,   422,   423,    35,    36,     0,   402,    38,    39,   424,
       0,     0,   425,   426,   427,   428,     0,   429,     0,   430,
     431,    40,     0,   312,   313,   314,   315,   316,   317,   318,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   432,     0,   433,   434,     0,   924,  -646,     1,   301,
     105,   323,   324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     305,    27,     0,   420,     0,     0,   306,   307,     0,    28,
      29,     0,     0,   421,    32,   422,   423,    35,    36,     0,
     402,    38,    39,   424,     0,     0,   425,   426,   427,   428,
       0,   429,     0,   430,   431,    40,     0,   312,   313,   314,
     315,   316,   317,   318,     0,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   432,     0,   433,   434,     0,
     921,  -647,     1,   301,   105,   323,   324,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   305,    27,     0,   420,     0,     0,
     306,   307,     0,    28,    29,     0,     0,   421,    32,   422,
     423,    35,    36,     0,   402,    38,    39,   424,     0,     0,
     425,   426,   427,   428,     0,   429,     0,   430,   431,    40,
       0,   312,   313,   314,   315,   316,   317,   318,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,   432,
       0,   433,   434,     0,   924,  -663,     1,   301,   105,   323,
     324,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   420,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   421,    32,   422,   423,    35,    36,     0,   402,    38,
      39,   424,     0,     0,   425,   426,   427,   428,     0,   429,
       0,   430,   431,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,     0,   432,     0,   433,   434,     0,   300,  -664,
       1,   301,   105,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   305,    27,     0,   420,     0,     0,   306,   307,
       0,    28,    29,     0,     0,   421,    32,   422,   423,    35,
      36,     0,   402,    38,    39,   424,     0,     0,   425,   426,
     427,   428,     0,   429,     0,   430,   431,    40,     0,   312,
     313,   314,   315,   316,   317,   318,     0,    43,    44,    45,
      46,    47,    48,   205,    50,     0,     0,   432,     0,   433,
     434,   419,     0,     1,   301,   105,     0,   323,   324,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   199,
     200,   201,   202,   203,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   305,    27,     0,   420,     0,
       0,   306,   307,     0,    28,    29,     0,     0,   421,    32,
     422,   423,    35,    36,     0,   402,    38,    39,   424,     0,
       0,   425,   426,   427,   428,     0,   429,     0,   430,   431,
      40,     0,   312,   313,   314,   315,   316,   317,   318,     0,
      43,    44,    45,    46,    47,    48,   205,    50,     0,     0,
     432,     0,   433,   434,   485,     0,     1,   301,   105,     0,
     323,   324,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   305,    27,
       0,   420,     0,     0,   306,   307,     0,    28,    29,     0,
       0,   421,    32,   422,   423,    35,    36,     0,   402,    38,
      39,   424,     0,     0,   425,   426,   427,   428,     0,   429,
       0,   430,   431,    40,     0,   312,   313,   314,   315,   316,
     317,   318,     0,    43,    44,    45,    46,    47,    48,   205,
      50,     0,   198,   432,     1,   433,   434,     0,     0,     0,
       0,     0,     0,   323,   324,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   204,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     1,     0,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   862,  1048,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   562,     2,   199,   200,   201,   202,   203,     8,
       9,    10,   560,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     1,    43,    44,    45,    46,    47,
      48,   205,    50,     0,     0,   561,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   562,     0,   563,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     1,     0,
       0,    43,    44,    45,    46,    47,    48,   205,    50,     0,
       0,   862,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   562,     2,   199,   200,   201,   202,   203,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,    18,
      19,   242,   243,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   244,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     245,    38,   246,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   247,     0,     0,     0,     0,
       0,     0,     1,     0,     0,    43,    44,   248,   249,   250,
     251,   205,    50,     0,     0,   862,     0,     0,     0,     0,
       0,     0,  1442,     0,     0,     0,   562,     2,   199,   200,
     201,   202,   203,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,    18,    19,   242,   243,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   244,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   245,    38,   246,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   247,
       0,     0,     0,     0,     0,     0,     1,     0,     0,    43,
      44,   248,   249,   250,   251,   205,    50,     0,     0,   862,
       0,     0,     0,     0,     0,     0,  1459,     0,     0,     0,
     562,     2,   199,   200,   201,   202,   203,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,    18,    19,   242,
     243,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   244,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   245,    38,
     246,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   247,     0,     0,     0,     0,     0,     0,
       1,     0,     0,    43,    44,   248,   249,   250,   251,   205,
      50,     0,     0,  1224,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1225,     2,   199,   200,   201,   202,
     203,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,    18,    19,   242,   243,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   244,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   245,    38,   246,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   247,     0,     0,
       0,     0,     0,     0,     1,     0,     0,    43,    44,   248,
     249,   250,   251,   205,    50,     0,     0,  1224,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1247,     2,
     199,   200,   201,   202,   203,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,    18,    19,   242,   243,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   244,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   245,    38,   246,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   247,     0,     0,     0,     0,     0,     0,     1,     0,
       0,    43,    44,   248,   249,   250,   251,   205,    50,     0,
       0,  1224,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1723,     2,   199,   200,   201,   202,   203,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,    18,
      19,   242,   243,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   244,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     245,    38,   246,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   247,     0,     0,     0,     0,
       0,     0,     1,     0,     0,    43,    44,   248,   249,   250,
     251,   205,    50,     0,     0,  1224,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1738,     2,     3,     4,
     271,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    26,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,   272,    31,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,    42,     1,     0,     0,     0,    43,
      44,    45,    46,    47,    48,    49,    50,     0,     0,    51,
       0,     0,     0,     0,     0,     0,     0,     0,   273,     0,
       2,   199,   200,   201,   202,   203,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
     420,     0,     0,     0,     0,     0,    28,    29,     0,     0,
     421,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     1,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   205,    50,
       0,     0,   949,     0,   433,     0,     0,     0,     0,     0,
       0,   950,     2,   199,   200,   201,   202,   203,     8,     9,
      10,   560,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     1,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     205,    50,     0,     0,   929,     0,     0,     0,     0,     0,
       0,     0,     0,   930,     2,   199,   200,   201,   202,   203,
       8,     9,    10,   560,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,   615,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   205,    50,     0,     0,    51,     0,     0,     0,
       0,     0,     0,     0,     0,   930,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   244,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   245,    38,   246,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   247,  1527,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     248,   249,   250,   251,   205,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   252,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -66,     0,     0,     0,     0,     0,
       0,     0,   -66,   -66,     0,     0,     0,   -66,     0,     0,
       0,     0,     0,   -66,   -66,   -66,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   -66,  1750,
       0,     0,     0,     0,     0,     0,     0,     0,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,     0,     0,     0,     0,     0,
       0,  1528,     0,  1529,   -66,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   244,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   245,    38,   246,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   247,  1754,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     248,   249,   250,   251,   205,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -111,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   244,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   245,    38,   246,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   247,  1755,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     248,   249,   250,   251,   205,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -95,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   244,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   245,    38,   246,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   247,  1861,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     248,   249,   250,   251,   205,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -96,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   244,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   245,    38,   246,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   247,  2012,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     248,   249,   250,   251,   205,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -80,     0,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   244,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   245,    38,   246,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   247, -1311,
     290,     0,     1,     0,     0,     0,     0,     0,    43,    44,
     248,   249,   250,   251,   205,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -87,     0,     0,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    26,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,    30,    31,     0,    32,    33,
      34,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,    40,
      41,     0,     0,     0,    42,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,    49,    50,     0,     0,    51,
       0,     0,    52,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     1,     0,     0,
       0,     0,   832,     0,     0,    43,    44,    45,    46,    47,
      48,   205,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1418,     2,   199,   200,   201,   202,   203,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     1,     0,     0,     0,
       0,   832,     0,     0,    43,    44,    45,    46,    47,    48,
     205,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1781,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,   164,     0,     1,     0,     0,     0,
     832,     0,     0,    43,    44,    45,    46,    47,    48,   205,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1782,
       0,     2,     3,     4,   165,     6,     7,     8,     9,    10,
     166,   167,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     164,     0,     1,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
      50,     0,     0,    51,     0,     0,   168,     2,     3,     4,
     165,     6,     7,     8,     9,    10,   166,   167,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   600,     0,     1,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,    49,    50,     0,     0,    51,
       0,     0,   168,     2,   199,   200,   201,   202,   203,   232,
     233,   234,   601,   602,   237,   238,   239,   240,   241,    18,
      19,   242,   243,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   244,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     245,    38,   246,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -939,     0,  -939,   247,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,   248,   249,   250,
     251,   205,    50,     0,     0,    51,     0,     0,   603,  -939,
    -939,  -939,  -939,  -939,  -939,  -939,  -939,  -939,  -939,  -939,
    -939,  -939,  -939,  -939,  -939,  -939,  -939,  -939,  -939,  -939,
    -939,  -939,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -939,     0,     0,
       0,     0,     0,     0,     0,  -939,  -939,     0,     0,     0,
    -939,     0,     0,     0,     0,     0,  -939,  -939,  -939,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,  -939,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -939,  -939,  -939,  -939,  -939,  -939,  -939,  -939,     0,
       0,  -939,     0,     0,  -939,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,    30,    31,     0,    32,    33,    34,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0, -1312,   282,     0,     1,    40,    41,     0,
       0,     0,    42,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,     0,     0,    51,     0,     0,
      52,     2,     3,     4,   165,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,    33,    34,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,   198,     0,     1,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
      50,     0,     0,    51,     2,   199,   200,   201,   202,   203,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   204,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,   198,     0,     1,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   205,    50,     0,     0,  1224,  1710,     2,   199,
     200,   201,   202,   203,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   204,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,   198,     0,     1,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   205,     0,     0,     0,
       0,   206,     2,   199,   200,   201,   202,   203,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   204,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,   942,
       0,     1,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
     205,     0,     0,     0,     0,   385,     2,   199,   200,   201,
     202,   203,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   204,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,  1485,     0,     1,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,   205,     0,     0,     0,     0,   206,
       2,   199,   200,   201,   202,   203,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   204,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,   198,     0,     1,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   205,     0,
       0,     0,     0,   385,     2,   199,   200,   201,   202,   203,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   204,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,   198,     0,     1,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   205,     0,     0,     0,     0,  1577,     2,   199,
     200,   201,   202,   203,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   204,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,   164,     0,     1,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   205,     0,     0,     0,
       0,  1940,     2,     3,     4,   165,     6,     7,     8,     9,
      10,   560,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,   164,     0,
       1,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,    46,    47,    48,
      49,    50,     0,     0,    51,     2,     3,     4,   165,     6,
       7,     8,     9,    10,   560,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,   886,     0,     1,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,    49,    50,     0,     0,    51,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   244,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   245,    38,   246,     0,     0,
       0,     0,     0,     0,     0,     0,     1,     0,     0,     0,
     247,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   248,   249,   250,   251,   205,     0,     0,     0,
     887,     2,     3,     4,   165,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,    49,
      50,     0,     0,    51,     2,   199,   200,   201,   202,   203,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   205,    50,     0,     0,    51,     2,   199,   200,
     201,   202,   203,     8,     9,    10,   560,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     1,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,   205,    50,     0,     0,    51,
       2,   199,   200,   201,   202,   203,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,    46,    47,    48,   205,     0,
       0,     0,   723,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,   205,     0,     0,     0,  1464,     2,   199,   200,   201,
     202,   203,   232,   233,   234,  1549,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   244,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   245,    38,   246,     0,     0,     0,     0,
       0,     0,  1071,     0,     1,     0,     0,     0,   247,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     248,   249,   250,   251,   205,    50,     0,     0,    51,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,  1072,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   204,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,  1077,     0,     1,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,   205,     2,   199,
     200,   201,   202,   203,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,  1078,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   204,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
    1083,     0,     1,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,    46,    47,    48,   205,     2,   199,   200,
     201,   202,   203,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    1084,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   204,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,   871,
       0,     1,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,    46,    47,    48,   205,     2,   199,   200,   201,
     202,   203,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,    18,    19,   242,   243,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   244,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   245,    38,   246,     0,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,     0,   247,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
     248,   249,   250,   251,   205,     2,   199,   200,   201,   202,
     203,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,  1032,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   204,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
      46,    47,    48,   205,     2,   199,   200,   201,   202,   203,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,  1089,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   204,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,    46,
      47,    48,   205,     2,   199,   200,   201,   202,   203,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     499,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     1,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,    46,    47,
      48,   205,     2,   199,   200,   201,   202,   203,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,   832,     0,     0,    43,    44,    45,    46,    47,    48,
     205,     2,   199,   200,   201,   202,   203,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   204,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,    46,    47,    48,   205,
       2,   199,   200,   201,   202,   203,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,    18,    19,   242,   243,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   244,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,   474,   475,     0,     0,     0,   245,    38,   246,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,     0,   247,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,   248,   249,   250,   251,   205,     2,
     199,   200,   201,   202,   203,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,   205,     2,   199,
     200,   201,   202,   203,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,    18,    19,   242,   243,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   244,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   245,    38,   246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     247,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,   248,   249,   250,   251,   205,     2,   199,   200,
     201,   202,   203,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,    18,    19,   242,   243,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   244,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   245,    38,   246,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   247,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,   248,   249,   250,   251,   205,    50,     0,     0,   862,
    1707,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     562,     2,   199,   200,   201,   202,   203,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,    18,    19,   242,
     243,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   244,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   245,    38,
     246,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   247,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,   248,   249,   250,   251,   205,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     252,     2,   199,   200,   201,   202,   203,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,    18,    19,   242,
     243,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   244,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   245,    38,
     246,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   247,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,   248,   249,   250,   251,   205,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1538,
       2,   199,   200,   201,   202,   203,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,    18,    19,   242,   243,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   244,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   245,    38,   246,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   247,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,   248,   249,   250,   251,   205
};

static const yytype_int16 yycheck[] =
{
       0,   268,   637,    91,   722,   928,   127,  1234,   928,   127,
    1101,   998,   531,  1000,   745,   861,   837,    99,    82,    83,
     576,   752,   861,   143,   755,    85,   467,   760,   131,    92,
      30,    31,   837,    99,  1902,   143,   156,   828,   158,    82,
     160,    41,   938,   861,    82,   155,   828,    82,   156,    30,
     158,    51,   160,    85,    63,   135,   339,   724,    58,   286,
     340,    42,   806,    63,  1626,    65,   130,   127,    92,   470,
     353,   466,   466,   806,   357,    99,  1638,     1,     1,   182,
      83,    81,    82,    83,     0,    85,   531,   120,   999,   960,
      90,     1,    92,   878,    92,   127,   885,   185,   186,    99,
     100,     3,     1,   103,  1016,     1,     3,    82,     5,     1,
       1,   745,   112,   152,   118,   115,    17,    92,   752,     3,
       1,   755,     1,   127,    99,   106,   107,   127,     1,   110,
     130,   131,   340,     3,     5,   135,    51,     5,   131,   139,
     140,   141,     1,   143,   551,     1,     1,   147,     3,   149,
       1,     3,   152,   153,     1,   155,   156,   157,   158,     1,
     160,   979,     5,   163,   173,    82,    82,     1,   324,     3,
     959,    73,   120,   173,   581,    92,    92,   584,   266,   586,
       1,   588,   182,    99,   100,     1,     1,     3,     3,   182,
     120,  2059,     3,  2061,     1,    82,     5,   197,     1,   263,
     185,   186,     1,   126,   286,   129,   288,     3,   208,     5,
     210,     3,   276,     5,   298,   130,   126,    28,   218,   219,
     286,  1006,   288,   307,   121,   288,    37,   126,   228,   313,
     126,   231,   129,   276,   126,   126,     3,     1,   276,   466,
     141,   276,   123,   286,   125,   126,   881,   126,   286,   120,
     123,   121,   125,   126,     1,  2123,   998,  2125,  1000,  2127,
     263,     3,   130,   263,   288,   345,     5,   126,   268,   121,
     126,   126,   272,    58,   268,   126,   276,   286,     5,   126,
       5,     1,  1269,   268,   126,   128,   286,   390,   288,  1276,
     288,   272,   126,  1280,    17,   182,  2164,  2165,     3,  2167,
       5,     3,   287,   219,   219,   126,   306,   417,   864,   120,
     126,   126,   312,   288,  2182,   760,   125,   120,   121,   126,
     131,   321,   125,    28,   123,   121,  1888,   112,    17,   121,
    2198,     3,     1,   129,    69,    70,   416,   129,   125,     3,
       3,   118,   323,   118,   131,     1,   123,    17,   436,   437,
     438,   439,  1223,   998,   121,  1000,     3,  1268,   125,   123,
     276,   806,   129,   646,  1275,    28,   649,     1,  1279,   286,
     286,   288,   288,   120,   121,  1106,   376,   377,   125,   121,
       1,    28,   382,   125,   384,   123,   125,   129,     3,   276,
     390,   126,   659,   660,   661,   662,   396,   390,   123,   286,
     120,   121,  1193,     3,  1195,   125,     3,   467,     5,   409,
       3,  1193,   197,  1195,   414,     1,   416,   417,   141,     3,
     420,   421,   127,   526,     3,   127,   426,  2134,   126,   429,
     430,   431,   432,   433,    31,   467,   556,     3,   558,   542,
     561,   126,   118,   561,   532,   117,   118,   535,   556,    28,
     558,   127,   141,     3,   123,   127,   125,   121,   522,   523,
     524,   461,   462,   463,   127,   692,   466,   467,  1212,   125,
     470,   141,  1106,   473,  1218,   127,   540,   541,   478,  1212,
     127,  2188,   482,   483,   878,  1218,   120,   487,   488,     5,
     885,  1718,   795,   998,   935,  1000,   120,  1053,   414,   499,
     780,   781,   782,  1594,   125,   505,   506,     3,  1064,   509,
     510,     3,   127,   552,   514,   515,     5,   432,   518,   519,
     823,   121,   522,   523,   524,   126,   526,  1269,   121,   529,
     810,   811,   812,   526,  1276,   121,    28,    77,  1280,   125,
     540,   541,   542,   127,   938,   946,   546,   948,   127,   542,
     466,   551,   552,  1449,   120,   117,   556,  1224,   558,   559,
       3,   561,   562,   563,   959,   959,   566,     1,    11,     0,
    1441,  1016,   780,   781,   782,  1242,   576,   127,     5,   466,
       3,   581,  1249,   576,   584,     3,   586,     5,   588,   129,
     506,  1437,   124,  1489,     3,   595,  1492,   382,  1437,   384,
    1421,  1422,   810,   811,   812,   121,     7,     8,     9,   693,
     692,  1006,  1006,    31,  1601,   123,  1421,  1422,   774,  1437,
       3,   135,   118,   119,  1269,  1548,   692,   627,  1548,   629,
       1,  1276,   121,  1504,   722,  1280,     0,   637,   268,   526,
       3,     3,   529,  1555,     3,   801,   561,   124,   563,   692,
       1,   878,   129,   809,   692,   998,   999,  1000,     1,   659,
     660,   661,   662,  1070,    73,   659,   660,   661,   662,  1515,
       3,  1517,     3,   829,   117,   118,   119,   677,   678,   302,
      11,  1088,   125,  1522,   127,   131,   686,   121,   302,  1600,
      73,   125,   692,   674,   675,   118,   319,     3,     1,   699,
     123,   796,   687,   688,  1931,   319,    65,  1152,   125,   789,
     790,  1156,   792,   713,  1159,   120,  1161,   126,    82,   120,
     720,   721,   722,   723,   724,   725,   131,   128,    92,   824,
     131,   731,   959,     3,   120,    99,   100,   817,   818,   819,
     820,   862,   742,   126,   862,   131,   727,   728,   729,   125,
     121,     1,  1483,     3,   125,   117,   118,   757,   117,   118,
     123,   761,   125,   121,  1269,   551,   307,  1212,   127,   797,
     121,  1276,   313,  1218,   125,  1280,   692,   562,   121,  1006,
     860,   861,   125,   699,   117,   118,   117,   118,   119,   525,
       1,   124,     3,   124,   125,   581,   127,   825,   584,   686,
     586,    11,   588,   803,   124,   692,   436,   807,   798,   129,
     595,   117,   118,   125,   935,   731,  1803,   935,   121,   414,
    1732,   127,   125,   911,   912,     3,   914,     3,     3,   917,
     918,   345,   832,   833,   834,   799,   826,   837,   838,   839,
      90,   382,  1109,   384,   125,  1112,  1717,   117,   118,  1483,
      28,  1722,   972,    28,   124,   219,   795,   967,   968,  1601,
     860,   861,   862,   827,   972,   796,   866,   125,   868,   869,
     126,     7,     8,     9,   132,   935,   876,   877,   878,  1435,
     960,   881,   127,  1150,   823,   885,     3,   887,   888,   126,
     890,  1802,   892,   824,    11,  1791,  1792,  1164,  1165,  1166,
    1167,   989,   416,   935,   125,   121,   117,   118,   120,   119,
     131,   506,   276,   302,   125,   125,  1787,  1829,   834,     7,
       8,     9,   286,   120,   288,  1268,  1269,  1047,  1840,   929,
     319,   931,  1275,  1276,   973,   935,  1279,  1280,   938,  1047,
     120,   117,   118,   943,  1065,   120,   946,  1065,   948,   949,
    1053,   127,   126,   869,   793,   794,  1601,   321,   958,   959,
     960,     3,   878,     7,     8,     9,   561,   967,   968,   885,
     970,    77,   972,   973,   124,   890,   892,   713,   978,   979,
     980,   981,   821,   822,   120,  1265,    28,   797,  1052,  1828,
     798,   878,   128,   120,   127,   131,   129,   627,  1037,  1038,
     117,   118,   119,   127,   131,   799,  1006,   124,   125,   745,
     127,  1567,     3,   118,   929,   825,   752,   120,   826,   755,
     125,   562,  1740,  1658,   120,   120,   131,   943,   943,   659,
     660,   661,   662,   827,   949,   131,  1555,  1037,  1038,   120,
     128,  1041,  1042,   959,  1711,  1045,  1046,  1047,   119,  1049,
     414,   938,  1052,  1053,   125,  1449,     1,  1265,     3,   298,
    1053,  1803,  1062,  1183,  1064,  1065,  1066,   120,   307,  1062,
    1070,  1064,   959,  1073,   313,  1183,  1076,  1948,   120,  1079,
     124,   622,  1082,   120,   128,  1085,   120,  2010,  1088,  1484,
    1090,     7,     8,     9,   120,  1489,  1601,   120,  1492,     7,
       8,     9,   466,  1224,  1104,     3,  1224,     1,   127,  1109,
    1555,   119,  1112,   133,  2026,  1109,  1272,   125,  1112,  1006,
     117,  1121,     6,  1123,     8,     9,   117,   118,   117,   120,
      28,     3,  1132,   139,   793,   794,     3,  1052,   119,    37,
     137,   138,   506,  1223,   125,  1145,   119,   742,   137,   138,
    1150,  1151,   125,   119,   140,     3,  1150,     5,  1803,   125,
    1141,    28,   821,   822,  1164,  1165,  1166,  1167,   119,     3,
    1164,  1165,  1166,  1167,   125,   123,  2022,    44,  2024,   127,
      74,    75,  1182,  1183,  1184,    79,  1186,   119,   118,    73,
    2102,    16,    86,   125,    28,     1,  1196,   127,  1198,   129,
      84,     7,     8,     9,   121,  1205,    91,    74,    75,  1209,
      44,   133,   128,  1213,   139,  1215,   110,   111,   126,  1219,
     128,   140,   120,  1223,  1224,   109,   120,   121,  1784,    16,
    2142,   125,  1950,   119,   118,     7,     8,     9,   121,   125,
      74,    75,  1242,    12,    13,   117,   118,   131,   120,  1249,
     134,   135,   136,     1,   121,   134,   135,  1600,  1601,  1259,
     119,     3,   998,   999,  1000,   127,   125,   862,   121,   117,
     118,  1906,     3,     0,   869,   789,   790,   119,   792,   120,
    1196,  1066,   877,   125,  1070,  1266,    28,   121,   127,  1205,
    1076,   125,  1848,   888,    12,    13,  1082,  1184,  1803,  1186,
     185,   186,  1088,   817,   818,   819,   820,   119,     7,     8,
       9,   941,  1757,   125,   120,   153,   121,  1762,   124,   157,
    1765,  1840,   128,   783,   784,   131,    74,    75,   692,   127,
     119,    79,    74,    75,    65,   699,   125,    79,    86,  1606,
    1607,   120,    10,    11,    86,   124,   860,   861,   120,   118,
     119,  1618,   131,   813,   814,    82,   128,  1437,   722,   131,
      79,  1441,   110,   111,   127,    92,   129,   731,   110,   111,
    1106,   123,    99,   100,   119,   123,   124,   125,   742,     3,
     125,   266,   125,   268,  1829,   127,   117,   118,   123,   930,
     123,   110,   111,   118,   127,  1840,   118,  1791,  1792,  1463,
     118,   119,   287,   118,    28,     3,    88,    89,    90,   125,
     129,  1196,  1412,  1413,   121,   121,  1416,  1417,   125,   125,
      44,  1421,  1422,   129,  1504,   127,   661,   662,   969,   128,
      28,   121,   131,  1433,   127,   125,  1417,  1437,  1438,    37,
     124,  1441,  1522,    69,    70,   132,   960,  1447,   127,  1449,
      74,    75,  1452,   127,   693,   129,  1456,  1052,   131,  1802,
    1803,  1461,  1462,  1463,  1567,    91,   785,   786,     1,    95,
     834,    97,   132,   127,   121,   129,    74,    75,   125,  1109,
     132,    79,  1112,   121,  1484,   125,  1486,   125,    86,  1489,
     125,  1121,  1492,   783,   784,  1495,   815,   816,   121,   127,
     126,   129,   125,  2138,  1504,   869,   129,  2026,    14,    15,
    1510,  1511,   110,   111,   878,  1515,  1516,  1517,  1518,   117,
    1150,   885,   120,   813,   814,  1066,   890,   123,   892,   125,
     125,   129,  1268,  1269,  1164,  1165,  1166,  1167,   125,  1275,
    1276,    74,    75,  1279,  1280,   123,    79,   125,  1463,   276,
       1,   436,     3,    86,   439,   123,    79,   125,   127,   286,
       3,   288,  1449,   126,  1564,  1565,   123,  1567,     3,   121,
    1486,  1486,   120,   125,  1567,  1575,  1117,   110,   111,   943,
     121,  2026,  1575,  2102,   125,    28,  1586,   110,   111,   121,
     123,   124,   125,   125,    37,   959,   120,   129,  1719,   121,
     123,  1719,  1489,   125,   127,  1492,  1606,  1607,   120,  1876,
    1205,   121,  1606,  1607,   129,   125,  1616,   118,  1618,  1619,
     123,     3,  1622,   123,  1618,   121,  1626,  1222,   120,   125,
    1630,    74,    75,  1633,   121,   120,    79,  1717,   125,    74,
      75,   121,  1722,    86,    79,   125,    28,   532,  1629,   129,
     535,    86,     0,   134,   135,    37,   121,  2102,  1658,   121,
     125,    10,    11,   125,  1645,  1665,   123,   110,   111,   123,
    1586,  1586,   785,   786,   117,   110,   111,   120,   121,  1763,
    1764,   123,  1766,  1767,  1225,   120,   127,  1771,  1772,  1773,
    1774,   123,    74,    75,   421,   121,   127,    79,   129,  1819,
     127,  1821,   815,   816,    86,  1793,  1247,  1787,   127,  1223,
     129,  1819,   126,  1821,   522,   523,   524,  1717,     1,  1719,
       3,     1,  1722,     3,     1,  1845,     3,  1847,   110,   111,
      14,    15,   540,   541,    82,   117,   132,  1845,   120,  1847,
    1740,   132,  1742,  1743,    92,  1848,   132,  1483,  1828,   131,
     131,    99,   100,   132,  1910,  1911,  1912,  1913,  1914,  1915,
    1916,  1917,   132,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,   132,   659,   660,   661,   662,  1778,     1,
     123,     3,   125,   127,  2051,   129,  2053,  1787,     1,   118,
       3,  1791,  1792,   141,  1794,     1,     1,     3,     3,     1,
     127,     3,   687,   688,   689,   153,  1806,   123,   123,   157,
     125,   909,   910,    74,    75,   127,   126,   129,    79,  1819,
    1529,  1821,  1531,   125,  1824,    86,  1910,  1911,  1912,  1913,
    1914,  1915,  1916,  1917,  1529,   126,  1531,   909,   910,  1434,
     118,  1205,   540,   541,   126,  1845,   121,  1847,  1848,   110,
     111,  2118,   659,   660,  2010,  1848,   659,   660,    99,   100,
     132,   382,  2142,   384,  1600,  1601,   127,   121,  1948,   124,
    1870,  1871,  1872,  1873,  1109,     3,  1876,  1112,   838,   839,
    1880,  1881,  1876,  1883,   121,  1885,   132,   132,     3,     1,
     121,   120,    56,   121,   121,   129,   129,  1897,   123,  2019,
      28,   120,   120,   129,  1791,  1792,  1906,   123,  1824,  1909,
     120,  2019,   123,    28,   123,  1150,   120,   118,   118,  1900,
     118,  1902,    37,  1437,   121,   121,  2010,  1441,   276,  1164,
    1165,  1166,  1167,   121,  2142,   120,   120,   131,   286,   118,
     288,   121,   131,   121,    74,    75,    74,    75,  1948,    79,
    1950,    79,  1493,   121,   125,   125,    86,   126,    86,    74,
      75,   121,    74,    75,    79,   692,   121,    79,   121,   121,
     129,    86,   129,   129,    86,   129,  1606,  1607,   121,   121,
     110,   111,   110,   111,   123,   126,  1616,   124,  1618,  1619,
    1504,  1586,  1622,   129,   124,   110,   111,   121,   110,   111,
    1630,   121,   121,  1633,   121,   120,   132,   132,  1522,   132,
      56,   123,   120,   125,   121,   129,   131,  2017,  2018,  2019,
    2020,  2021,  2022,   120,  2024,   120,   129,   129,   129,   129,
     121,  2031,  2032,  2033,  2034,   121,   121,   121,   121,    37,
     121,   562,  2042,  2131,  2132,   121,    44,    45,   118,    11,
     132,  2051,   132,  2053,     3,   132,   131,  2051,   132,  2053,
     131,   123,  2062,  2063,   127,   124,  1802,  1803,   129,   127,
     123,   120,   420,   129,   124,     0,    74,    75,  2059,    28,
    2061,    79,   124,   431,    74,    75,   123,     3,    86,    79,
     121,   127,   121,   121,   132,   121,    86,   132,  2098,  2099,
     132,   622,   132,   121,   989,  2105,  2106,   132,   132,  2109,
     132,  2111,   110,   111,  2114,   132,    41,   121,  2118,   117,
     110,   111,  1486,    64,  2118,    74,    75,   121,    64,   121,
      79,   121,  2132,    58,  2134,   483,   123,    86,  2138,   132,
      65,  2122,  2123,   132,  2125,   121,  2127,   132,   132,   123,
    2150,   123,   123,   123,   127,   121,   123,    82,    74,    75,
      85,   110,   111,    79,   123,   123,    91,    92,   123,   123,
      86,   123,  2172,  2173,    99,   100,   123,  2177,   127,   123,
    1721,   123,  1723,  2164,  2165,   123,  2167,   112,  2188,  2172,
     115,  1518,   473,   978,   110,   111,  1737,  1738,   860,   473,
     473,  2182,   127,  1717,   473,   473,   915,   286,  1722,   319,
     135,   127,   970,   286,   319,   140,   141,  2198,   143,  1484,
     725,  1829,  1586,   431,  1109,   312,   421,  1112,   153,  1824,
     155,   156,   157,   158,   731,   160,   263,  2122,    99,    92,
    1870,  1871,  1872,  1873,   100,   268,  1876,    92,    92,  1778,
    1880,  1881,     3,  1883,    -1,  1885,    -1,    -1,    -1,    -1,
     185,   186,    -1,    74,    75,  1150,    -1,  1897,    79,    -1,
      -1,    -1,   197,  1787,    -1,    86,    -1,    28,    -1,  1164,
    1165,  1166,  1167,    74,    75,   210,    37,    38,    79,    -1,
      -1,    -1,     0,   141,   219,    86,    74,    75,    -1,   110,
     111,    79,  1187,    -1,  1189,   153,    -1,    -1,    86,   157,
     121,    -1,    -1,    -1,  1828,    -1,    -1,    -1,    -1,   110,
     111,    -1,    -1,    74,    75,    -1,   117,    -1,    79,   120,
      -1,    -1,   110,   111,    -1,    86,    -1,    -1,   263,    -1,
     131,   266,   267,   268,   692,    -1,    -1,    -1,    -1,    -1,
      -1,   276,    74,    75,    -1,    -1,    -1,    79,    -1,   110,
     111,   286,   287,   288,    86,    -1,   117,    -1,    -1,   120,
      -1,  1606,  1607,    -1,    82,    -1,  1740,    -1,    -1,    -1,
      -1,   306,    -1,  1618,    92,    -1,    -1,   312,   110,   111,
      -1,    99,   100,     1,    -1,     3,   321,    -1,    -1,   121,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1949,   930,
      -1,    -1,  2042,    -1,    -1,   263,    -1,  1958,    -1,    -1,
      28,  2051,    -1,  2053,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    -1,   141,  1948,   140,    -1,    -1,   143,    -1,
      -1,    -1,    -1,    -1,    -1,   153,    -1,    -1,   969,   157,
      -1,   156,   377,   158,    -1,   160,    -1,   382,   306,   384,
    1824,   266,   267,    -1,   312,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,  2014,  2015,  2105,  2106,    -1,    86,  2109,
      -1,  2111,    -1,    -1,  2114,    -1,    -1,    -1,  2118,   414,
      -1,   416,   417,    -1,    -1,   420,   421,    -1,    -1,    -1,
      -1,   426,   110,   111,    -1,   430,   431,    -1,   433,   117,
      -1,    -1,   120,    -1,    -1,   123,    -1,   125,   126,    -1,
    2150,    -1,    -1,    -1,  1763,  1764,    -1,  1766,  1767,   877,
      -1,    -1,  1771,  1772,  1773,  1774,   461,   462,    -1,    -1,
     888,   466,   467,    -1,    -1,  1066,    -1,  2177,   473,    -1,
      -1,    -1,    -1,   478,    -1,    -1,    -1,    -1,   483,    -1,
      -1,    -1,   487,   488,    -1,    -1,    -1,    -1,   276,    -1,
      -1,    -1,   420,    -1,    -1,     1,    -1,     3,   286,     3,
     288,   506,    -1,   431,   509,   510,  1950,    74,    75,   514,
     515,    -1,    79,   518,   519,    -1,  1117,   302,    -1,    86,
     525,    -1,    28,    -1,    28,    -1,    -1,   532,    -1,    -1,
     535,    37,    38,    37,   319,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,   551,    -1,    -1,    -1,
      -1,   556,    -1,   558,   121,   483,   561,   562,    -1,    -1,
      -1,  1876,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      74,    75,    -1,    79,  1539,    79,   581,    -1,    -1,   584,
      86,   586,    86,   588,    -1,    -1,    -1,    -1,    -1,    -1,
     595,  1910,  1911,  1912,  1913,  1914,  1915,  1916,  1917,    -1,
      -1,    -1,    -1,    -1,   110,   111,   110,   111,    -1,    -1,
      -1,   117,    -1,   117,   120,    -1,   120,   123,    -1,   125,
     126,    -1,    -1,    -1,  1225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   420,    44,    45,     3,    -1,    -1,    -1,    -1,
      -1,  1606,  1607,   431,    -1,    -1,  1247,   532,    -1,     0,
     535,    -1,    -1,  1618,   659,   660,   661,   662,    -1,    -1,
      28,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    37,
      -1,    -1,    -1,    -1,    -1,    86,   461,   462,    -1,    -1,
      -1,    -1,   687,   688,   689,    -1,    -1,   692,   473,    -1,
      -1,  2010,    -1,    -1,   699,   483,    -1,    -1,    -1,   110,
     111,    -1,   487,   488,    -1,    -1,    74,    75,   713,   120,
      -1,    79,    -1,    -1,    -1,   720,   721,   722,    86,   724,
     725,    -1,    -1,    -1,   509,   510,   731,    -1,    -1,   514,
     515,    82,    -1,   518,   519,    -1,  2051,   742,  2053,    -1,
     745,    92,   110,   111,    -1,    -1,    -1,   752,    99,   100,
     755,    -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   556,    -1,   558,   659,   660,   661,   662,    -1,    -1,
      -1,    -1,    44,    45,    -1,    -1,    -1,    -1,   487,   488,
     141,    -1,   720,   721,    -1,    -1,   724,   725,    -1,    -1,
      -1,    -1,   153,  2118,   689,    -1,   157,    -1,    44,    45,
     509,   510,    74,    75,    -1,   514,   515,    79,    -1,   518,
     519,    -1,    -1,    -1,    86,    -1,    -1,    -1,    -1,   834,
      -1,    -1,   837,   838,   839,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,   110,   111,
      86,    -1,    -1,    -1,    -1,   860,   861,   862,   120,    -1,
      -1,    -1,    -1,    -1,   869,    -1,    -1,    -1,    -1,    -1,
      -1,   111,   877,   878,   110,   111,    -1,    -1,    -1,    -1,
     885,   117,    -1,   888,    -1,   890,    -1,   892,    -1,    -1,
      74,    75,  1493,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    -1,    86,    -1,   692,    -1,    -1,    -1,    -1,    -1,
      -1,  1876,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,   276,   110,   111,    -1,    -1,
     935,    -1,    -1,   117,    -1,   286,   120,   288,   943,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   877,
      37,    -1,    -1,    -1,   959,   960,    -1,    -1,    -1,    -1,
     888,    -1,   967,   968,    -1,    -1,    -1,   972,    -1,    -1,
      -1,    -1,    -1,   978,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,   998,   999,  1000,    -1,    84,    85,    86,
      -1,  1006,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,   268,    -1,
     117,    -1,    -1,   120,   121,   122,  1041,  1042,    -1,    -1,
    1045,  1046,  1047,   130,   131,    -1,   133,   134,   135,   136,
      -1,    -1,    -1,    -1,    -1,    -1,   266,   267,    -1,    -1,
    1065,  1066,    -1,    -1,    -1,  1070,    -1,    -1,    -1,   420,
      -1,  1076,    -1,    -1,    -1,    -1,    -1,  1082,  1006,    -1,
     431,    -1,    -1,  1088,   324,    -1,  2051,    -1,  2053,   877,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     888,  1106,    -1,    -1,  1109,    -1,    -1,  1112,    -1,     7,
      -1,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
    1721,    -1,  1723,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   483,    -1,    -1,    -1,  1737,  1738,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1150,    -1,    -1,    -1,   140,
      -1,    -1,   143,  2118,    -1,    -1,    -1,    -1,    -1,  1164,
    1165,  1166,  1167,    -1,    -1,   156,    -1,   158,    -1,   160,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1182,  1183,    -1,
      -1,    -1,  1187,    -1,  1189,    -1,    -1,   972,    -1,    -1,
      -1,  1196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1222,  1223,  1224,
     118,   119,    -1,    -1,  1109,    -1,    -1,  1112,    -1,    -1,
     128,    -1,    -1,    -1,    -1,    -1,    -1,  1242,    -1,   137,
     138,   139,   140,   141,  1249,     0,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1041,  1042,    -1,    -1,
    1045,  1046,  1047,  1268,  1269,  1150,    -1,    -1,    -1,    -1,
    1275,  1276,    -1,    -1,  1279,  1280,    -1,    -1,    -1,  1164,
    1165,  1166,  1167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   531,    -1,    -1,  1222,    -1,    51,    -1,    -1,    -1,
      -1,    -1,  1187,    -1,  1189,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     0,    -1,  1242,    -1,    -1,    -1,    -1,    -1,
      -1,  1249,   532,    -1,    -1,   535,    81,    82,    83,    -1,
      -1,    -1,    -1,    -1,    -1,    90,    -1,    92,    -1,    -1,
      -1,   692,  1041,  1042,    99,   100,  1045,  1046,  1949,    -1,
      -1,    -1,    -1,    -1,   594,    -1,    -1,  1958,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,   134,
      -1,    -1,    -1,    -1,    -1,   140,    -1,   627,   143,    -1,
      -1,    -1,    -1,    -1,    82,    83,    -1,  1182,  1183,    -1,
      -1,   156,    90,   158,    92,   160,    -1,    -1,    -1,    -1,
      -1,    99,   100,  2014,  2015,    -1,  1421,  1422,    -1,   659,
     660,   661,   662,    -1,    -1,    -1,    -1,   182,   183,   184,
      -1,    -1,  1437,    -1,    -1,    -1,  1441,    -1,    -1,    -1,
      -1,    -1,   130,   131,    -1,    -1,    -1,    -1,    -1,   659,
     660,   661,   662,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,    -1,    -1,
     461,   462,    -1,    -1,    -1,    -1,    -1,    -1,  1483,   689,
      -1,  1486,   473,    -1,    -1,    -1,   726,    -1,    -1,    -1,
     730,    -1,    -1,    -1,   182,    -1,   487,   488,    -1,  1504,
      -1,    -1,    -1,    -1,    -1,  1510,  1511,    -1,   263,    -1,
    1515,  1516,  1517,  1518,    -1,    -1,    -1,    -1,   509,   510,
     760,   276,    -1,   514,   515,    -1,   877,   518,   519,    -1,
      -1,   286,    -1,   288,   774,   131,    -1,   888,    -1,    -1,
     228,    -1,    -1,   231,    -1,     1,    -1,     3,     4,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1564,
    1565,   801,    -1,    -1,    -1,   556,   806,   558,    -1,   809,
      -1,    -1,    28,    -1,    -1,   263,    -1,    -1,    -1,    -1,
      -1,  1586,    -1,    -1,    -1,    -1,   182,    -1,   276,   829,
      -1,    -1,    -1,    -1,    -1,  1600,  1601,    -1,   286,    -1,
     288,  1606,  1607,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,  1619,    71,    72,  1622,    -1,    -1,
      -1,    -1,    -1,   219,    -1,  1630,    -1,    -1,    -1,    85,
      -1,   461,   462,    -1,    -1,   390,   391,   392,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,    -1,    -1,    -1,   487,   488,   414,
    1665,    -1,    -1,    -1,   120,    -1,   421,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,    -1,   432,    -1,   509,
     510,    -1,    -1,    -1,   514,   515,    -1,    -1,   518,   519,
     286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,    -1,    -1,    -1,   461,   462,    -1,    -1,
      -1,   466,  1717,    -1,  1719,   470,    -1,  1722,   473,    -1,
      -1,  1606,  1607,    -1,    -1,  1510,  1511,   482,    -1,    -1,
      -1,    -1,   487,   488,  1619,  1740,    -1,  1622,    -1,    -1,
      -1,    -1,    -1,    -1,   432,  1630,    -1,    -1,    -1,    -1,
      -1,   506,    -1,    -1,   509,   510,    -1,    -1,    -1,   514,
     515,    -1,    -1,   518,   519,    -1,    -1,   522,   523,   524,
      -1,    -1,    -1,    -1,    -1,    -1,  1016,    -1,    -1,  1564,
    1565,    -1,  1787,    -1,    -1,   540,   541,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,    -1,    -1,  1802,  1803,    -1,
     396,   556,    -1,   558,    -1,    -1,   561,    -1,   563,    -1,
      -1,  1510,  1511,    -1,  1819,    -1,  1821,    -1,    -1,  1824,
      -1,    -1,    -1,   578,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   522,   523,   524,    -1,   526,    -1,
    1845,   529,  1847,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   540,   541,   542,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1564,  1565,    -1,    -1,  1109,
     466,    -1,  1112,   561,    -1,  1880,  1881,    -1,    -1,    -1,
      -1,  1121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1109,
      -1,    -1,  1112,  1143,  1144,    -1,    -1,    -1,    -1,    -1,
    1150,    -1,  1152,    -1,    -1,    -1,  1156,    -1,    -1,  1159,
      -1,  1161,    -1,    -1,  1164,  1165,  1166,  1167,    -1,    -1,
     526,   686,    -1,   529,    -1,    -1,    -1,   692,    -1,    -1,
    1150,    -1,    -1,  1948,    -1,  1950,   542,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1164,  1165,  1166,  1167,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   720,    -1,   563,    -1,   724,
      -1,    -1,  1212,    -1,    -1,    -1,    -1,  1187,  1218,  1189,
     576,   972,    -1,    -1,    -1,    -1,    -1,   742,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1880,  1881,    -1,   686,    -1,
      -1,    -1,    -1,    -1,   692,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2017,  2018,  2019,  2020,  2021,  2022,    -1,  2024,
      -1,    -1,    -1,    -1,    -1,    -1,  2031,  2032,  2033,  2034,
      -1,    -1,  1272,    -1,  1819,    -1,  1821,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1041,  1042,    -1,    -1,  1045,  1046,  1047,    -1,    -1,    -1,
    1845,    -1,  1847,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     627,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     686,    -1,    -1,  2098,  2099,    -1,   692,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   661,   662,    -1,   862,    -1,    -1,
      -1,    -1,    -1,    -1,   869,    -1,    -1,    -1,    -1,    -1,
      -1,   876,   877,   878,    -1,    -1,    -1,    -1,    -1,    -1,
     885,   140,    -1,   888,   143,   890,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   156,    -1,   158,
      -1,   160,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   929,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   938,    -1,    -1,    -1,    -1,   943,    -1,
      -1,  1182,  1183,    -1,   949,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   890,    -1,   959,    -1,    -1,    -1,    -1,    -1,
      -1,  1041,  1042,    -1,    -1,  1045,  1046,   972,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   982,    -1,    -1,
      -1,    -1,  2017,  2018,  2019,  2020,  2021,    -1,    -1,    -1,
      -1,   929,    -1,    -1,    -1,    -1,  2031,  2032,  2033,  2034,
      -1,  1006,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
      -1,   949,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   878,    -1,  1524,    -1,  1041,  1042,    -1,   885,
    1045,  1046,  1047,    -1,    -1,    -1,    -1,  1052,  1053,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1063,    -1,
      -1,    -1,    -1,  2098,  2099,  1555,    -1,    -1,  2017,  2018,
      -1,  2020,  2021,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2031,  2032,  2033,  2034,    -1,    -1,    -1,    -1,
      -1,    -1,   938,    -1,    -1,    -1,    -1,   943,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   959,  1052,  1053,  1606,  1607,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1616,    -1,  1618,  1619,
      -1,    -1,  1622,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1630,    -1,    -1,  1633,    -1,    -1,  1606,  1607,    -1,  2098,
    2099,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1619,
    1006,    -1,  1622,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1630,    -1,    -1,    -1,    -1,    -1,    -1,  1182,  1183,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1205,    -1,   461,   462,    -1,    -1,    -1,  1053,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1062,  1222,  1064,  1224,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,   488,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1242,    -1,    -1,
      -1,    -1,  1732,    -1,  1249,    -1,  1184,    -1,  1186,    -1,
     509,   510,    -1,    -1,  1744,   514,   515,    -1,    -1,   518,
     519,    -1,    -1,    -1,    -1,    -1,   525,  1757,    -1,  1510,
    1511,    -1,  1762,    -1,    -1,  1765,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   556,    -1,   558,
      -1,    -1,  1109,    -1,    -1,  1112,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1564,  1565,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1184,  1829,
    1186,    -1,    -1,  1150,    -1,    -1,    -1,    -1,    -1,    -1,
    1840,    -1,    -1,   140,    -1,    -1,   143,  1164,  1165,  1166,
    1167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   627,   156,
      -1,   158,    -1,   160,    -1,    -1,    -1,    -1,    -1,    -1,
    1870,  1871,  1872,  1873,    -1,    -1,  1876,    -1,    -1,    -1,
    1880,  1881,    -1,  1883,    -1,  1885,    -1,    -1,    -1,    -1,
     659,   660,   661,   662,    -1,    -1,    -1,  1897,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1907,  1908,    -1,
    1880,  1881,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1434,
    1510,  1511,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1449,    -1,    -1,    -1,    -1,    -1,
      -1,  1456,    -1,    -1,    -1,    -1,    -1,    -1,  1463,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,  1484,
      -1,  1486,    -1,    -1,  1564,  1565,   745,    -1,    -1,    -1,
      -1,    -1,    -1,   752,    28,    -1,   755,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1510,  1511,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1463,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,  2026,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    85,  2042,    -1,    -1,    -1,    -1,    -1,    -1,  1564,
    1565,  2051,  1567,  2053,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,  1819,    -1,
    1821,  1586,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
     134,   135,   136,  1449,  1845,    -1,  1847,    -1,    -1,    -1,
    1456,    -1,  2102,    -1,    -1,  2105,  2106,    -1,    -1,  2109,
      -1,  2111,    -1,    -1,  2114,    -1,    -1,    -1,  2118,  1567,
      -1,    -1,    -1,    -1,  2124,    -1,    -1,    -1,  1484,    -1,
    1486,    -1,    -1,  1489,    -1,    -1,  1492,    -1,    -1,    -1,
     909,   910,  2142,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   461,   462,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    51,  2177,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     487,   488,    -1,    -1,    -1,    -1,  1711,    -1,    -1,    -1,
      -1,    -1,    -1,   972,    -1,    -1,    -1,    82,    83,    -1,
      -1,  1567,   509,   510,    -1,    90,    -1,   514,   515,  1575,
      -1,   518,   519,    -1,    -1,    -1,    -1,    -1,    -1,   998,
    1586,  1000,    -1,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,   556,
     111,   558,    -1,    -1,    -1,    -1,  2017,  2018,  2019,  2020,
    2021,    -1,  1041,  1042,    -1,    -1,  1045,  1046,  1047,    -1,
    2031,  2032,  2033,  2034,   135,    -1,    -1,    -1,    -1,  1606,
    1607,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1616,
      -1,  1618,  1619,    -1,  1819,  1622,  1821,   182,    -1,  1824,
      -1,    -1,    -1,  1630,    -1,    -1,  1633,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1845,    -1,  1847,    -1,    -1,    -1,    -1,  1106,    -1,    -1,
    1109,    -1,  1857,  1112,   118,   119,   197,  2098,  2099,    -1,
      -1,    -1,  1121,   228,   128,    -1,   231,    -1,    -1,   133,
     134,   135,    -1,   137,   138,   139,   140,   141,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1150,    -1,    -1,    -1,    -1,    -1,    -1,   263,    -1,
      -1,    -1,    -1,    -1,    -1,  1164,  1165,  1166,  1167,    -1,
    1848,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1182,  1183,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2017,  2018,    -1,
    2020,  2021,    -1,    -1,    -1,  1791,  1792,    -1,  1794,    -1,
      -1,  2031,  2032,  2033,  2034,    -1,    -1,   298,    -1,    -1,
      -1,    -1,   303,   304,    -1,    -1,   307,    -1,    -1,    -1,
      -1,    -1,   313,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   324,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,
      -1,    -1,  1848,    -1,   345,    -1,    -1,    -1,    -1,    -1,
    1269,    -1,  2017,  2018,  2019,  2020,  2021,  1276,  2098,  2099,
      -1,  1280,    -1,    -1,    -1,   390,  2031,  2032,  2033,  2034,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,    -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1870,  1871,  1872,  1873,   432,    -1,  1876,
      -1,    -1,    -1,  1880,  1881,   416,  1883,    -1,  1885,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1897,    -1,    -1,  2098,  2099,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   470,    -1,    -1,     1,    -1,
      -1,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,   909,   910,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   522,   523,   524,
      -1,   526,    -1,    -1,   529,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,   540,   541,   542,    71,    72,
      73,    -1,    -1,    -1,   525,   972,    -1,    -1,    -1,    -1,
      -1,    84,    -1,    -1,    -1,    -1,   561,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,   562,    -1,    -1,  1483,    -1,    -1,    -1,    -1,   122,
     123,    -1,   125,   126,   127,  2042,    -1,   130,   131,    -1,
     133,   134,   135,   136,  2051,    -1,  2053,    -1,    -1,    -1,
      -1,  1510,  1511,   594,  1041,  1042,    -1,    -1,  1045,  1046,
    1047,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1529,    -1,  1531,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   622,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2105,  2106,
      -1,    -1,  2109,    -1,  2111,  1564,  1565,  2114,    -1,    -1,
      -1,  2118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   686,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,
      -1,    -1,  1601,  2150,    -1,    -1,    -1,  1606,  1607,    -1,
      -1,    -1,   693,    -1,    -1,    -1,    -1,  1616,   699,  1618,
    1619,   135,    -1,  1622,    -1,    -1,    -1,    -1,    -1,    -1,
    2177,  1630,    -1,    -1,  1633,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   726,    -1,    -1,    -1,   730,
     731,    -1,    -1,    -1,    -1,  1182,  1183,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   745,    -1,    -1,    -1,    -1,    -1,
      -1,   752,    -1,    -1,   755,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   774,    -1,    -1,    -1,    -1,    -1,   780,
     781,   782,   783,   784,   785,   786,    -1,    -1,   789,   790,
      -1,   792,   793,   794,   795,   796,   797,   798,   799,    -1,
     801,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   809,   810,
     811,   812,   813,   814,   815,   816,   817,   818,   819,   820,
     821,   822,   823,   824,   825,   826,   827,    -1,   829,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   860,
     861,    -1,    -1,    -1,   298,   890,    -1,    -1,    -1,   303,
     304,    -1,    -1,   307,    -1,    -1,    -1,    -1,    -1,   313,
      -1,    -1,    -1,    -1,  1803,    -1,    -1,    -1,    -1,    -1,
     324,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1819,    -1,  1821,    -1,   929,    -1,   340,    -1,    -1,    -1,
      -1,   345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   946,    -1,   948,   949,    -1,  1845,   928,  1847,   930,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   382,    -1,
     384,  1870,  1871,  1872,  1873,    -1,    -1,  1876,    -1,   960,
      -1,  1880,  1881,    -1,  1883,    -1,  1885,    -1,   969,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,  1897,    -1,
      -1,    -1,   416,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   998,    -1,  1000,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,  1052,  1053,    -1,
      -1,    -1,    -1,    -1,    -1,   111,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,  1510,  1511,  1066,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   525,   120,   121,    -1,    -1,    -1,    -1,  2017,  2018,
    2019,  2020,  2021,   131,    -1,  1106,    -1,    -1,    -1,    -1,
      -1,    -1,  2031,  2032,  2033,  2034,  1117,  1564,  1565,    -1,
      -1,   197,    -1,  2042,    -1,    -1,    -1,    -1,   562,    -1,
      -1,    -1,  2051,    -1,  2053,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1143,  1144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1184,
     594,  1186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,  2098,
    2099,    -1,    -1,   340,    -1,    -1,  2105,  2106,   622,    -1,
    2109,    -1,  2111,    -1,    -1,  2114,    -1,    -1,    28,  2118,
      -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,  1223,    -1,  1225,    -1,    -1,    -1,    -1,    -1,
      -1,  2150,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,  1247,    -1,   324,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,  2177,   693,
      -1,    -1,    -1,    -1,  1265,   699,    -1,    -1,  1269,    -1,
     100,  1272,    -1,    -1,    -1,  1276,    -1,    -1,    -1,  1280,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,    -1,
     120,    -1,   726,    -1,    -1,    -1,   730,   731,    -1,    -1,
      -1,   131,    -1,    -1,    -1,    -1,   382,    -1,   384,    -1,
      -1,   745,    -1,    -1,    -1,    -1,    -1,    -1,   752,    -1,
      -1,   755,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     774,    -1,    -1,    -1,    -1,    -1,   780,   781,   782,   783,
     784,   785,   786,    -1,    -1,   789,   790,    -1,   792,   793,
     794,   795,   796,   797,   798,   799,    -1,   801,    -1,    -1,
      -1,    -1,  1819,    -1,  1821,   809,   810,   811,   812,   813,
     814,   815,   816,   817,   818,   819,   820,   821,   822,   823,
     824,   825,   826,   827,    -1,   829,    -1,    -1,  1845,    -1,
    1847,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   860,   861,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1437,    -1,  1463,    -1,
    1441,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   525,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   632,    -1,    -1,    -1,    -1,
      -1,    -1,  1483,    -1,    -1,    -1,   562,    -1,    -1,    -1,
      -1,    -1,  1493,    -1,   928,    -1,   930,    -1,    -1,    -1,
      -1,    -1,    -1,  1504,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   594,    -1,
      -1,  1522,    -1,  1524,    -1,    -1,   960,    -1,  1529,    -1,
    1531,    -1,    -1,    -1,    -1,   969,    -1,    -1,    -1,    -1,
      -1,    -1,  1567,    -1,    -1,    -1,   622,  1548,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   998,    -1,  1000,    -1,    -1,    -1,
    2017,  2018,  2019,  2020,  2021,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2031,  2032,  2033,  2034,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1601,    -1,    -1,   760,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1066,    -1,    -1,    -1,   793,   794,   795,   796,
     797,    -1,    -1,   800,    -1,    -1,    -1,    -1,    -1,   806,
     726,  2098,  2099,    -1,   730,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   821,   822,   823,   824,   825,   745,
      -1,   828,  1106,    -1,    -1,    -1,   752,    -1,    -1,   755,
      -1,    -1,    -1,  1117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   774,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1143,
    1144,    -1,    -1,    -1,    -1,    -1,  1717,    -1,    -1,    -1,
    1721,  1722,  1723,    -1,    -1,   801,    -1,    -1,    -1,    -1,
      -1,  1732,    -1,   809,    -1,    -1,  1737,  1738,    -1,    -1,
      -1,    -1,    -1,  1744,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   829,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1763,  1764,    -1,  1766,  1767,    -1,    -1,    -1,
    1771,  1772,  1773,  1774,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1787,    -1,    -1,  1223,
      -1,  1225,    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1803,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1247,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1848,    -1,    -1,    -1,  1828,    -1,    -1,
      -1,  1265,    -1,    -1,    -1,  1269,   127,    -1,  1272,    -1,
      -1,     0,  1276,    -1,   135,    -1,  1280,    -1,    -1,    -1,
      -1,    -1,   928,    -1,   930,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    -1,   969,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1907,  1908,    -1,  1910,
    1911,  1912,  1913,  1914,  1915,  1916,  1917,    -1,    -1,    -1,
      -1,    -1,   998,    82,  1000,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      99,   100,    -1,    -1,    -1,    -1,    -1,  1948,  1949,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1958,   117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1124,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1066,    -1,    -1,    -1,   153,  1152,    -1,    -1,   157,    -1,
      -1,    -1,  1159,  1437,    -1,    -1,    -1,  1441,    -1,  2010,
      -1,    -1,    -1,  2014,  2015,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   185,   186,    -1,    -1,
    1106,    -1,    -1,    -1,    -1,    -1,  1193,    -1,  1195,    -1,
      -1,  1117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1483,
      -1,    -1,    -1,    -1,    -1,  1212,    -1,    -1,    -1,  1493,
     219,  1218,    -1,    -1,    -1,    -1,    -1,  1143,  1144,    -1,
    1504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   377,    -1,  1522,    -1,
    1524,    -1,    -1,    -1,    -1,  1529,    -1,  1531,    -1,    -1,
      -1,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,    -1,    -1,  1548,    -1,    -1,   276,    -1,    -1,
      -1,    -1,    -1,  2124,    -1,   416,   417,   286,   287,   288,
     421,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   430,
      -1,  2142,   433,    -1,    -1,    -1,    -1,   306,    -1,  1225,
      -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   321,    -1,    -1,    -1,    -1,  1601,    -1,    -1,
      -1,  1247,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1269,    -1,    -1,  1272,    -1,    -1,    -1,
    1276,    -1,    -1,    -1,  1280,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   414,    -1,    -1,    -1,    -1,
     551,   420,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     561,    -1,   431,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1717,    -1,    -1,    -1,  1721,  1722,  1723,
     581,    -1,    -1,   584,    -1,   586,    -1,   588,  1732,    -1,
      -1,    -1,    -1,  1737,  1738,    -1,    -1,   466,    -1,    -1,
    1744,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,    -1,  1763,
    1764,    -1,  1766,  1767,    -1,    -1,    -1,  1771,  1772,  1773,
    1774,    -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,
      -1,    -1,    -1,  1787,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   525,    -1,    -1,  1803,
      -1,    -1,    -1,   532,    -1,    -1,   535,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1828,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1483,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1493,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1524,    -1,
      -1,    -1,    -1,  1529,    -1,  1531,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
      -1,    -1,  1548,  1907,  1908,   634,  1910,  1911,  1912,  1913,
    1914,  1915,  1916,  1917,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     659,   660,   661,   662,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1948,  1949,    -1,    -1,    -1,    -1,
      -1,    -1,   321,    -1,  1958,  1601,    -1,    -1,   687,   688,
     689,    -1,    -1,   692,    -1,    -1,    -1,    -1,    -1,    -1,
     699,    -1,    -1,    -1,    -1,    -1,   837,   838,   839,    -1,
      -1,    -1,    -1,    -1,   713,    -1,    -1,    -1,    -1,    -1,
      -1,   720,   721,   722,    -1,   724,   725,    -1,    -1,   860,
     861,   862,   731,    -1,    -1,    -1,  2010,    -1,    -1,    -1,
    2014,  2015,    -1,   742,    -1,    -1,   745,    -1,    -1,    -1,
      -1,    -1,    -1,   752,    -1,    -1,   755,    -1,    -1,    -1,
    1757,    -1,    -1,    -1,    -1,  1762,  1763,  1764,  1765,  1766,
    1767,    -1,    -1,    -1,  1771,  1772,  1773,  1774,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   432,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   935,  1721,    -1,  1723,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1732,    -1,    -1,    -1,
      -1,  1737,  1738,    -1,    -1,    -1,    -1,    -1,  1744,   960,
      -1,    -1,    -1,    -1,    -1,   834,   967,   968,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   978,    -1,    -1,
    2124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2142,    -1,
     869,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   877,   878,
      -1,    -1,    -1,    -1,    -1,    -1,   885,  1803,    -1,   888,
     889,   890,    -1,   892,    -1,    -1,    -1,     0,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1065,    -1,    -1,    -1,    -1,  1070,
      -1,    -1,    -1,    -1,   943,  1076,    -1,    50,    51,    -1,
      -1,  1082,    -1,    -1,    -1,    -1,    -1,  1088,    -1,    -1,
     959,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      83,    -1,    -1,    -1,    87,    -1,    -1,    -1,    -1,    92,
      -1,  1907,  1908,   632,    -1,    -1,    99,   100,    -1,   998,
     999,  1000,    -1,    -1,    -1,    -1,    -1,  1006,    -1,   648,
      -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
     659,   660,   661,   662,    -1,    -1,    -1,   130,    -1,    -1,
      -1,    -1,    -1,  1949,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1958,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   708,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   194,  1223,  1224,    -1,    -1,    -1,   736,  2014,  2015,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1106,    -1,    -1,
    1109,    -1,    -1,  1112,    -1,    -1,   219,    -1,    -1,    -1,
      -1,    -1,    -1,   762,    -1,    -1,  1125,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1150,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
     263,   800,    -1,    -1,    -1,  1164,  1165,  1166,  1167,   808,
      -1,    -1,    -1,   276,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   286,    -1,   288,    -1,    -1,  1187,   828,
    1189,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,  1205,    -1,  2124,    -1,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1222,    -1,    98,  2142,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,  1242,   117,    -1,    -1,   120,   121,   122,
    1249,   890,   125,    -1,    -1,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,  1268,
    1269,    -1,    -1,    -1,    -1,    -1,  1275,  1276,    -1,    -1,
    1279,  1280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1421,  1422,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,  1437,    -1,    -1,    -1,
    1441,   414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   432,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,   466,    -1,    -1,   469,    -1,    -1,    -1,
      74,    75,    -1,  1504,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,  1515,  1516,  1517,  1518,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,   506,    -1,    -1,   110,   111,   112,   113,
     114,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   522,
     523,   524,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,   541,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   561,    -1,
     563,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1109,   574,    -1,  1112,  1113,  1114,    -1,  1116,    -1,    -1,
      -1,    -1,    -1,    91,  1483,  1124,    -1,  1486,    -1,    -1,
      -1,    -1,    -1,  1132,    -1,    -1,    -1,    -1,    -1,    -1,
    1139,    -1,    -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,
      -1,  1150,    -1,    -1,    -1,    -1,    -1,    -1,  1157,    -1,
      -1,    -1,    -1,  1162,    -1,  1164,  1165,  1166,  1167,    -1,
      -1,    -1,    -1,    -1,  1665,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1193,    -1,  1195,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1214,    -1,   185,   186,    -1,
      -1,  1220,   685,    -1,    -1,    -1,  1717,  1586,  1719,   692,
      -1,  1722,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1600,  1601,    -1,  1243,    -1,    -1,  1606,  1607,    -1,
      -1,   219,    -1,    -1,    -1,    -1,    -1,   720,    -1,    -1,
    1619,   724,    -1,  1622,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1630,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   742,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1290,    -1,    -1,    -1,   263,  1787,    -1,   266,   267,
     268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   287,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   306,    -1,
      -1,    -1,    -1,  1342,   312,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   321,    -1,    -1,  1355,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1740,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   862,
     863,    -1,    -1,    -1,    -1,    -1,   869,  1406,    -1,    -1,
      -1,    -1,    -1,    -1,   877,   878,    -1,    -1,    -1,    -1,
      -1,    -1,   885,    -1,    -1,   888,   889,   890,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1802,  1803,    -1,   414,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1948,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1824,   929,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   937,    -1,    -1,    -1,    -1,    -1,
     943,    -1,    -1,    -1,    -1,    -1,   949,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   959,    -1,   466,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1880,  1881,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2022,    -1,  2024,    -1,    -1,    -1,    -1,   506,    -1,
      -1,    -1,    -1,  1006,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   525,    -1,    -1,
      -1,    -1,    -1,    -1,   532,    -1,    -1,   535,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1052,
      -1,  1950,    -1,    -1,    -1,    -1,    -1,    -1,  1061,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1606,  1607,    -1,
      -1,    -1,    -1,  1612,    -1,  1614,    -1,    -1,  1617,  1618,
      -1,    -1,    -1,    -1,  1623,  1624,    -1,  1626,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1636,    -1,  1638,
      -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1670,    -1,    -1,    -1,  1674,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   659,   660,   661,   662,    -1,  1695,    -1,   321,    -1,
      -1,    -1,    -1,    -1,    -1,  1704,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,
     688,   689,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   699,    -1,    -1,    -1,    -1,   185,   186,    -1,    -1,
      -1,    -1,  1205,    -1,    -1,   713,    -1,    -1,    -1,    -1,
      -1,    -1,   720,   721,   722,    -1,   724,   725,    -1,  1222,
      -1,  1224,    -1,   731,    -1,    -1,    -1,    -1,    -1,  1232,
     219,    -1,    -1,    -1,   742,    -1,    -1,   745,    -1,  1242,
      -1,    -1,    -1,    -1,   752,    -1,  1249,   755,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   432,
      -1,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,   287,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,   306,    -1,  1858,
      -1,    -1,    -1,   312,    -1,    -1,   834,    -1,    -1,    -1,
      -1,    -1,   321,    -1,    -1,    -1,    -1,  1876,  1877,    -1,
      -1,    -1,    -1,    -1,    -1,  1884,    -1,    -1,    65,  1888,
      -1,  1890,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
    1899,   869,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,
     878,    -1,    -1,    -1,    -1,    -1,    -1,   885,    -1,    -1,
      -1,    98,   890,    -1,   892,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,  1950,    -1,   130,   131,   132,   133,   134,   135,   136,
      -1,    -1,    -1,    -1,    -1,   414,    -1,    -1,    -1,    -1,
      -1,  1434,    -1,    -1,    -1,   943,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1448,    -1,    -1,    -1,    -1,
      -1,   959,  1455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   632,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   466,    -1,    -1,
      -1,  1484,    -1,  1486,    -1,   648,    -1,    -1,    -1,   652,
     998,   999,  1000,    -1,    -1,   197,    -1,    -1,  1006,    -1,
      -1,    -1,    -1,    -1,  2043,  2044,    -1,  2046,    -1,  2048,
      -1,    -1,  2051,  2052,  2053,    -1,    -1,   506,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   525,    -1,    -1,    -1,
      -1,    -1,    -1,   532,    -1,   708,   535,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   722,
      -1,    -1,    -1,  1566,    -1,    -1,    -1,    -1,  2107,    -1,
      -1,  2110,    -1,   736,   737,    -1,    -1,    -1,    -1,  2118,
      -1,    -1,    -1,  1586,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,  1106,   762,
      -1,  1109,    -1,    -1,  1112,   307,    -1,    -1,    -1,    -1,
      -1,   313,    -1,    -1,  2153,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   800,    -1,    -1,
      -1,    -1,  1150,    -1,    -1,   808,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1164,  1165,  1166,  1167,
      -1,    -1,    -1,    -1,    -1,   828,    -1,    -1,    -1,    -1,
     659,   660,   661,   662,    -1,    -1,    -1,    -1,    -1,  1187,
     382,  1189,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1205,   687,   688,
     689,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1711,    -1,
     699,    -1,    -1,    -1,  1222,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   713,    -1,    -1,   890,    -1,    -1,
      -1,   720,   721,   722,  1242,   724,   725,    -1,    -1,    -1,
      -1,  1249,   731,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   742,    -1,    -1,   745,    -1,    -1,    -1,
    1268,  1269,    -1,   752,    -1,    -1,   755,  1275,  1276,    -1,
      -1,  1279,  1280,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1783,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1805,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,  1824,    -1,   525,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   834,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     562,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
     869,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   878,
      84,    85,    -1,    -1,    -1,    -1,   885,    -1,    -1,    -1,
      -1,   890,    -1,   892,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
     622,    -1,    -1,   117,    -1,    -1,   120,  1930,   122,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1113,  1114,    -1,  1116,   943,    -1,    -1,    -1,    -1,    -1,
      -1,  1124,    -1,    -1,  1127,    -1,    -1,    -1,    -1,  1132,
     959,    -1,    -1,    -1,    -1,  1483,  1139,  1140,  1486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   693,    -1,    -1,  1157,  1158,    -1,    -1,    -1,  1162,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,   998,
     999,  1000,    -1,    -1,    -1,    -1,    -1,  1006,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
    1193,    -1,  1195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   745,    -1,    -1,    -1,    -1,    -1,    -1,
     752,  1214,    -1,   755,    -1,    -1,    -1,  1220,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,  1586,    -1,
    1243,    -1,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1600,  1601,    -1,    -1,    -1,    98,  1606,  1607,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,  1619,    -1,    -1,  1622,    -1,   117,  1106,    -1,   120,
    1109,   122,  1630,  1112,    -1,    -1,   127,  1290,  1291,   130,
     131,   132,   133,   134,   135,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1164,  1165,  1166,  1167,  1342,
      -1,  1344,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1355,  1356,    -1,    -1,    -1,    -1,  1187,    -1,
    1189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1205,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   928,    -1,   930,    -1,
      -1,    -1,  1740,  1222,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1406,    -1,  1408,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1242,    -1,    -1,    -1,    -1,    -1,    -1,
    1249,    -1,    -1,    -1,    -1,    -1,    -1,   969,    -1,    -1,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,  1268,
    1269,    -1,    -1,    -1,    -1,    -1,  1275,  1276,    -1,    -1,
    1279,  1280,    -1,    -1,  1802,  1803,   998,    -1,  1000,    -1,
      81,    82,    83,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1824,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1066,    -1,   147,    -1,    -1,    -1,
      -1,    -1,  1880,  1881,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   163,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   182,    -1,    -1,  1106,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1592,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,  1950,    -1,    -1,    -1,    -1,    -1,    -1,  1612,
    1613,  1614,  1615,    -1,  1617,  1618,    -1,    -1,    -1,    -1,
    1623,  1624,    -1,  1626,    -1,  1628,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1636,  1637,  1638,    -1,    -1,    -1,    -1,
      -1,    -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    51,  1483,   276,    -1,  1486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   286,    -1,  1670,    -1,  1672,
      -1,  1674,    -1,  1676,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1225,    82,    83,    -1,    -1,    -1,    -1,
      -1,    -1,  1695,  1696,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1704,  1705,    -1,    -1,  1247,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1269,    -1,    -1,
      -1,    -1,   130,   131,  1276,    -1,    -1,    -1,  1280,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1586,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
      -1,  1600,  1601,    -1,    -1,   396,    -1,  1606,  1607,    -1,
      -1,    -1,    -1,    -1,   182,    -1,    -1,    -1,    -1,    -1,
    1619,    -1,    -1,  1622,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1630,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   432,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   466,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1858,    -1,    -1,    -1,    -1,
      -1,   482,    -1,    -1,    -1,   263,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1877,    -1,    -1,    -1,   276,  1882,
      -1,  1884,  1885,    -1,  1887,  1888,    -1,  1890,   286,  1892,
      -1,    -1,    -1,    -1,    -1,  1898,  1899,    -1,    -1,    -1,
      -1,   522,   523,   524,    -1,   526,    -1,    -1,   529,    -1,
      -1,  1740,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,
     541,   542,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   559,    -1,
     561,  1483,   563,    -1,    -1,    -1,    -1,  1950,    -1,    -1,
      -1,  1493,    -1,    -1,    -1,   576,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1802,  1803,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1529,    -1,  1531,
      -1,    -1,   390,    -1,    -1,  1824,    -1,    -1,   396,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1548,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   432,    -1,    -1,    -1,    -1,    -1,
    2043,  2044,    -1,  2046,  2047,  2048,    -1,    -1,    -1,  2052,
    2053,  1880,  1881,    -1,    -1,    -1,    -1,   678,    -1,  1601,
      -1,    -1,    -1,    -1,    -1,   686,    -1,    -1,   466,    -1,
      -1,   692,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2107,  2108,    -1,  2110,  2111,    -1,
      28,    -1,  2115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1950,    -1,    -1,   522,   523,   524,    -1,   526,    -1,
      -1,   529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   540,   541,   542,    -1,    -1,    65,    -1,    -1,
    2153,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   561,    -1,   563,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   576,  1721,
      98,  1723,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,  1737,  1738,    -1,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,   129,   130,   131,    -1,   133,   134,   135,   136,    -1,
      -1,  1763,  1764,    -1,  1766,  1767,    -1,    -1,    -1,  1771,
    1772,  1773,  1774,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
      -1,    -1,    -1,    -1,    -1,   876,    -1,   878,    -1,    -1,
      -1,  1803,    -1,    -1,   885,    -1,    -1,    -1,    -1,   890,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   686,    -1,
      -1,    -1,    -1,    -1,   692,    -1,    -1,    -1,   141,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   929,    -1,
     153,    -1,    -1,    -1,   157,    -1,    -1,   938,    -1,    -1,
      -1,    -1,   943,    -1,    -1,    -1,    -1,    -1,   949,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   959,    -1,
      -1,    -1,   185,   186,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1910,  1911,
    1912,  1913,  1914,  1915,  1916,  1917,   219,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1006,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1949,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1958,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,    -1,    -1,
      -1,  1052,  1053,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1062,    -1,  1064,   287,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,   306,    -1,    -1,    -1,    -1,  2010,   312,
      -1,    -1,  2014,  2015,    -1,    -1,    -1,    -1,    28,    -1,
     878,    -1,    -1,    -1,    -1,    -1,    -1,   885,    -1,    -1,
      -1,    -1,   890,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      91,    -1,    -1,   324,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,   340,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   929,    -1,    -1,    84,    85,    -1,    -1,    -1,    -1,
     938,    -1,    -1,    -1,    -1,   943,    -1,    -1,    98,    -1,
     141,   949,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,   959,   153,  1184,    -1,  1186,   157,   117,    -1,    -1,
     120,   414,   122,   123,    -1,   125,    -1,   420,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,    -1,   431,    -1,
      -1,    -1,    -1,    -1,   185,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1006,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   466,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
     483,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,  1052,  1053,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   506,  1062,    -1,  1064,    -1,    28,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
      -1,    -1,   525,    -1,    -1,    -1,    -1,    -1,   141,   532,
      -1,    -1,   535,    -1,    -1,    -1,   287,    -1,    -1,    -1,
     153,    -1,    -1,    -1,   157,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,   306,    -1,    -1,    -1,    -1,
      -1,   312,    -1,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,   185,   186,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,   121,   122,   123,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1184,    -1,  1186,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     263,   632,    -1,   266,   267,   268,   659,   660,   661,   662,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1449,   420,
      -1,    -1,    -1,    -1,   287,  1456,    -1,    -1,    -1,    -1,
     431,    -1,  1463,    -1,   687,   688,   689,    -1,    -1,    -1,
      -1,    -1,    -1,   306,    -1,    -1,    -1,    -1,    -1,   312,
      -1,    -1,    -1,  1484,    -1,  1486,    -1,    -1,  1489,    -1,
     713,  1492,    -1,    -1,    -1,    -1,    -1,   720,   721,    -1,
      -1,   724,   725,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   745,    -1,    -1,    -1,    -1,    -1,    -1,   752,
      -1,    -1,   755,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   525,    -1,    -1,    -1,    -1,   760,
      -1,   532,    -1,    -1,   535,    -1,  1567,    -1,    -1,    -1,
      -1,    -1,    -1,   774,  1575,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1586,    -1,   420,    -1,    -1,
      -1,    -1,   793,   794,   795,   796,   797,    -1,   431,   800,
     801,    -1,    -1,    -1,    -1,   806,    -1,    -1,   809,    -1,
      -1,   834,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     821,   822,   823,   824,   825,    -1,    -1,   828,   829,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   869,    -1,    -1,    -1,
     483,    -1,    -1,    -1,   877,   878,    -1,    -1,    -1,    -1,
      -1,    -1,   885,    -1,    -1,   888,    -1,    -1,    -1,   892,
      -1,  1449,    -1,    -1,    -1,    -1,    -1,    -1,  1456,    -1,
      -1,    -1,    -1,    -1,    -1,  1463,    -1,    -1,   659,   660,
     661,   662,   525,    -1,    -1,    -1,    -1,    -1,    -1,   532,
      -1,    -1,   535,    -1,    -1,    -1,  1484,    -1,  1486,    -1,
      -1,  1489,    -1,    -1,  1492,    -1,   687,   688,   689,    -1,
     943,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   959,    -1,    -1,    -1,
      -1,    -1,   713,    -1,    -1,    -1,    -1,    -1,    -1,   720,
     721,    -1,    -1,   724,   725,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   745,   998,   999,  1000,    -1,    -1,
      -1,   752,    -1,  1006,   755,    -1,    -1,    -1,    -1,  1567,
    1791,  1792,    -1,  1794,    -1,    -1,    -1,  1575,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1586,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   659,   660,   661,   662,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1848,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,   689,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     713,    -1,    -1,  1106,    -1,    -1,  1109,   720,   721,  1112,
      -1,   724,   725,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   877,    -1,    -1,    -1,
      -1,    -1,   745,    -1,    -1,    -1,    -1,   888,    -1,   752,
      -1,    -1,   755,  1124,    -1,    -1,    -1,  1150,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1164,  1165,  1166,  1167,    -1,    -1,    -1,    -1,    -1,
      -1,  1152,    -1,    -1,    -1,    -1,    -1,    -1,  1159,    -1,
      -1,    -1,    -1,    -1,  1187,    -1,  1189,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1193,    -1,  1195,    -1,    -1,    -1,    -1,  1222,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1212,    -1,  1791,  1792,    -1,  1794,  1218,    -1,  1242,
      -1,    -1,    -1,    -1,    -1,    -1,  1249,   998,   999,  1000,
      -1,    -1,    -1,    -1,    -1,  1006,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   877,  1268,  1269,    -1,    -1,    -1,
      -1,    -1,  1275,  1276,    -1,   888,  1279,  1280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1848,  1272,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    -1,    -1,  1106,    -1,    -1,  1109,    -1,
      -1,  1112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   998,   999,  1000,    65,    -1,
      -1,    -1,    -1,  1006,    71,    72,    73,    -1,    -1,  1150,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,
      -1,    -1,    -1,  1164,  1165,  1166,  1167,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,  1187,    -1,  1189,    -1,
     117,   118,   119,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,    -1,   130,   131,    -1,   133,   134,   135,   136,
     137,   138,   139,   140,   141,    -1,    -1,    -1,    -1,    -1,
      -1,  1222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1483,    -1,    -1,  1486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1242,    -1,  1106,    -1,    -1,  1109,    -1,  1249,  1112,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1268,  1269,    -1,
      -1,    -1,    -1,    -1,  1275,  1276,    -1,    -1,  1279,  1280,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1150,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1164,  1165,  1166,  1167,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1187,    -1,  1189,    -1,    -1,    -1,
      -1,    -1,    -1,  1586,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1600,  1601,    -1,
      -1,    -1,    -1,  1606,  1607,    -1,    -1,    -1,    -1,  1222,
      -1,    -1,    -1,    -1,    -1,    -1,  1619,    -1,    -1,  1622,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1630,    -1,  1242,
      -1,    -1,    -1,    -1,    -1,    -1,  1249,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,  1268,  1269,    -1,    -1,    -1,
      -1,    -1,  1275,  1276,    -1,    -1,  1279,  1280,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,  1483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,    -1,   130,   131,  1757,   133,   134,   135,
     136,  1762,  1763,  1764,  1765,  1766,  1767,    -1,    -1,    -1,
    1771,  1772,  1773,  1774,    -1,    -1,    -1,    -1,    -1,  1802,
    1803,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1824,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,  1600,
    1601,    -1,    -1,    -1,    -1,  1606,  1607,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,  1619,    -1,
    1483,  1622,    -1,    -1,    -1,    -1,    -1,  1880,  1881,  1630,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    84,    85,    -1,    -1,    -1,    -1,  1910,
    1911,  1912,  1913,  1914,  1915,  1916,  1917,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
     121,   122,   123,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,   133,   134,   135,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1600,  1601,    -1,
      -1,    -1,    -1,  1606,  1607,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1619,    -1,    -1,  1622,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1630,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
      -1,    -1,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1802,  1803,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,  1880,
    1881,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,    -1,    -1,   123,   124,
     125,   126,    -1,   128,    -1,    -1,   131,    -1,   133,   134,
     135,    -1,   137,   138,   139,   140,   141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1802,
    1803,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,  1880,  1881,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,    -1,
     133,   134,   135,   136,   137,   138,   139,   140,   141,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,   118,   119,   120,   121,
     122,    -1,   124,   125,    -1,    -1,   128,    -1,   130,   131,
      -1,   133,   134,   135,   136,   137,   138,   139,   140,   141,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,   131,    -1,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,   121,   122,
     123,    -1,   125,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,   121,   122,   123,    -1,   125,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,   121,   122,   123,    -1,   125,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,   121,
     122,   123,    -1,   125,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,   121,   122,   123,    -1,
     125,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,   121,   122,   123,    -1,   125,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
     121,   122,   123,    -1,   125,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,   121,   122,   123,
      -1,   125,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,    -1,   125,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,   125,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,   125,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
     122,   123,    -1,   125,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
     125,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,   125,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,   122,   123,
      -1,   125,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,    -1,   125,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,   125,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,   125,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
     122,   123,    -1,   125,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
     125,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,   125,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,   122,   123,
      -1,   125,   126,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,    -1,   125,   126,   127,    -1,   129,
     130,   131,    -1,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,   125,   126,   127,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,   125,   126,   127,    -1,
     129,   130,   131,    -1,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
     122,   123,    -1,   125,   126,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
     125,   126,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,   125,   126,   127,    -1,   129,   130,
     131,    -1,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,   121,   122,   123,
      -1,   125,   126,   127,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      88,    89,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,    -1,    -1,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,   136,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    88,    89,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
     122,   123,    -1,    -1,    -1,   127,    -1,   129,   130,   131,
      -1,   133,   134,   135,   136,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,    -1,   125,   126,   127,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,   122,   123,
      -1,   125,   126,   127,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,   127,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
     122,   123,    -1,   125,   126,   127,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,    -1,   125,   126,   127,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,   122,   123,
      -1,   125,   126,   127,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,   123,    -1,   125,   126,   127,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    -1,
     122,   123,    -1,   125,   126,   127,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,   125,
     126,   127,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,    -1,   125,   126,   127,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,     1,   122,     3,
       4,     5,     6,    -1,     8,     9,   130,   131,    -1,   133,
     134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,     1,   122,     3,
       4,     5,     6,    -1,     8,     9,   130,   131,    -1,   133,
     134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,    -1,   120,     1,
     122,     3,     4,     5,     6,   127,     8,     9,   130,   131,
      -1,   133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,    -1,   120,   121,
     122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    84,    85,
      86,    87,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      28,   117,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    -1,
      88,    89,    90,    -1,     1,    -1,     3,     4,     5,     6,
      98,     8,     9,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    28,   120,   121,   122,   123,    -1,   125,    -1,   127,
      -1,   129,   130,   131,    -1,   133,   134,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      -1,    88,    89,    90,    -1,     1,    -1,     3,     4,     5,
       6,    98,     8,     9,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    28,   120,   121,   122,   123,    -1,   125,    -1,
     127,    -1,   129,   130,   131,    -1,   133,   134,   135,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    -1,    88,    89,    90,    -1,     1,    -1,     3,     4,
       5,     6,    98,     8,     9,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    28,   120,    -1,   122,   123,    -1,    -1,
      -1,   127,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    -1,    88,    89,    90,    -1,     1,    -1,     3,
       4,     5,     6,    98,     8,     9,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,    -1,    -1,    -1,
      -1,    -1,   117,    -1,    28,   120,    -1,   122,   123,    -1,
      -1,    -1,   127,    -1,   129,   130,   131,    -1,   133,   134,
     135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    -1,    88,    89,    90,    -1,     1,    -1,
       3,     4,     5,     6,    98,     8,     9,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    28,   120,    -1,   122,   123,
      -1,    -1,    -1,   127,    -1,   129,   130,   131,    -1,   133,
     134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,   129,
     130,   131,    -1,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,   131,   132,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
     121,   122,   123,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,   121,   122,   123,    -1,   125,    -1,    -1,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,    -1,    -1,   120,   121,   122,   123,    -1,
     125,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,
     135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,
     122,   123,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,    -1,    -1,   127,    -1,
      -1,   130,   131,    -1,   133,   134,   135,   136,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,    -1,    -1,   127,    -1,    -1,   130,   131,    -1,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,   121,   122,   123,    -1,    -1,    -1,
      -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,   123,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,   130,
     131,    -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,
     135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,
     122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,
     132,   133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,    -1,   122,    -1,    -1,   125,    -1,    -1,    -1,
     129,   130,   131,    -1,   133,   134,   135,   136,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,   132,   133,   134,   135,
     136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,
      -1,    -1,   125,    -1,    -1,    -1,   129,   130,   131,    -1,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
     125,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,
     135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,
     122,   123,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,    -1,   122,    -1,    -1,   125,    -1,    -1,    -1,
     129,   130,   131,    -1,   133,   134,   135,   136,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,   125,
      -1,    -1,    -1,   129,   130,   131,    -1,   133,   134,   135,
     136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,    -1,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,   132,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,   121,   122,   123,    -1,    -1,    -1,    -1,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,
     135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,   126,   127,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,   133,   134,   135,   136,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,   131,   132,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,    -1,
     127,    -1,    -1,   130,   131,    -1,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
     131,   132,   133,   134,   135,   136,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,    -1,   127,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,   131,   132,   133,   134,
     135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,   131,
      -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,   131,    -1,   133,   134,   135,   136,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
      -1,   127,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,   132,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,    -1,
      -1,    -1,   129,   130,   131,    -1,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,    -1,   127,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,   130,
     131,    -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,    -1,   127,
      -1,    -1,   130,   131,    -1,   133,   134,   135,   136,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,   130,   131,    -1,   133,   134,
     135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,
     122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,
      -1,   133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
      -1,   130,   131,    -1,   133,   134,   135,   136,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,
     136,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,
     133,   134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
     120,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,   131,    -1,   133,   134,   135,   136,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,   131,    -1,   133,   134,   135,   136,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   117,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,   131,    -1,   133,
     134,   135,   136,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,     0,
       1,    -1,     3,     4,     5,    -1,   117,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
     131,    -1,   133,   134,   135,   136,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
     121,   122,   123,    -1,   125,   126,    -1,    -1,    -1,   130,
     131,     0,     1,    -1,     3,     4,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,   125,   126,    -1,    -1,
      -1,   130,   131,     0,     1,    -1,     3,     4,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,     0,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,     0,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,     0,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,    -1,     1,   126,     3,     4,     5,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,   122,   123,    -1,     1,   126,     3,     4,
       5,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,   122,   123,    -1,
       1,   126,     3,     4,     5,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,   122,   123,    -1,     1,   126,     3,     4,     5,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,   122,   123,    -1,     1,   126,
       3,     4,     5,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,   122,
     123,     1,    -1,     3,     4,     5,    -1,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,    -1,
     120,    -1,   122,   123,     1,    -1,     3,     4,     5,    -1,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,     1,   120,     3,   122,   123,    -1,    -1,    -1,
      -1,    -1,    -1,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,   121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,    -1,   133,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,   131,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
     131,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   131,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   131,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    76,    77,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,   105,     3,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   129,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      78,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,    -1,    -1,
      -1,   129,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   129,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,     1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   129,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   127,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,
      -1,   123,    -1,   125,   126,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     0,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    76,    77,    -1,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   100,
     101,    -1,    -1,    -1,   105,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,   123,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,     3,    -1,    -1,
      -1,    -1,   107,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   126,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,     3,    -1,    -1,    -1,
      -1,   107,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,     1,    -1,     3,    -1,    -1,    -1,
     107,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,   123,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,   123,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,   123,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,   123,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    76,    77,    -1,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,     1,    -1,     3,   100,   101,    -1,
      -1,    -1,   105,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
     123,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,   121,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
      -1,   121,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,    -1,    -1,    -1,    -1,   121,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    -1,    -1,    -1,    -1,   121,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,    -1,
      -1,    -1,    -1,   121,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,    -1,    -1,    -1,    -1,   121,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
      -1,   121,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,    -1,   120,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,    -1,   120,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,    -1,    -1,    -1,
     120,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,    -1,   120,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,    -1,   120,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,    -1,
      -1,    -1,   120,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,    -1,    -1,    -1,   120,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,    -1,   120,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,   113,   114,   115,   116,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
     113,   114,   115,   116,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,   107,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    80,    81,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,   116,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     131,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     127,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,   116,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    53,    65,    66,    74,    75,
      76,    77,    79,    80,    81,    82,    83,    85,    86,    87,
     100,   101,   105,   110,   111,   112,   113,   114,   115,   116,
     117,   120,   123,   143,   144,   145,   147,   172,   209,   210,
     211,   212,   213,   214,   269,   272,   273,   276,   277,   278,
     279,   280,   281,   282,   284,   288,   291,   292,   293,   294,
     295,   296,   301,   302,   311,   312,   313,   320,   321,   325,
     328,   333,   362,   365,   366,   384,   385,   387,   388,   389,
     390,   391,   392,    77,   129,     5,    31,   214,   386,   214,
     120,   120,   120,   147,   214,   386,   282,   283,   320,   328,
      37,   145,   214,   310,   311,   313,   315,   316,   317,   319,
     320,   328,   331,   332,   337,   118,   123,   144,   145,   214,
     127,   129,   123,   127,   126,   117,   118,   209,   214,   127,
     147,   214,   127,   129,   126,   118,   127,   129,   127,   126,
     127,   145,   214,   320,     1,    31,    37,    38,   123,   143,
     145,   211,   213,   214,   269,   279,   280,   282,   284,   313,
     317,   320,   328,   331,   332,   333,   335,   343,   344,   345,
     346,    37,    38,   145,   320,   345,   120,   131,     1,    29,
      30,    31,    32,    33,    65,   116,   121,   143,   214,   268,
     272,   274,   275,   282,   284,   288,   289,   290,   296,   300,
     308,   309,   349,   350,   351,   352,   353,   354,   328,   120,
     313,   320,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    46,    47,    66,    85,    87,   100,   112,   113,
     114,   115,   127,   147,   168,   169,   268,   273,   274,   282,
     285,   289,   291,   299,   364,   367,   368,   369,   374,   375,
     376,    31,    76,   129,   211,   213,   301,   365,   366,   384,
     385,   392,     1,   211,   278,   295,   301,   333,   362,   388,
       1,   387,   388,     0,   214,   386,   386,     5,   124,   386,
       1,     4,     6,     8,     9,    65,    71,    72,    73,    84,
      85,    98,   102,   103,   104,   105,   106,   107,   108,   109,
     117,   120,   122,   130,   131,   133,   134,   135,   136,   147,
     173,   174,   214,   215,   216,   217,   220,   221,   225,   226,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   246,   248,   249,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     386,   398,   399,   400,   401,   144,   214,   127,   147,   214,
     282,   328,   131,   120,   131,   121,   308,   309,   353,   354,
     328,   331,   332,   310,   315,   319,   320,   121,   320,   121,
     320,   320,    85,   147,   199,   201,   203,   207,   208,   214,
     226,   232,   249,   254,   300,   123,   118,   118,   123,     1,
      68,    78,    80,    81,    88,    91,    92,    93,    94,    96,
      98,    99,   120,   122,   123,   126,   148,   149,   150,   151,
     152,   153,   154,   155,   170,   171,   173,   174,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   190,   194,
     195,   196,   197,   214,   221,   246,   300,   312,   314,   320,
     328,   333,   334,   363,    80,    81,   214,   268,   272,   282,
     285,   288,   296,   303,   304,     1,   126,   196,   197,   145,
     214,     1,   214,   270,   271,     1,   126,   271,   304,    65,
     200,   202,   204,   205,   206,   214,   300,     1,   126,   196,
     197,   304,     1,   126,   196,   197,     1,   126,   196,   197,
     145,   214,   125,   125,   125,   127,   328,   313,   317,   320,
       1,   124,   368,   375,   376,   368,   375,   376,     1,   123,
     125,   125,   328,   123,   132,   144,   214,   241,   262,   266,
     267,   125,   127,   147,   214,   126,   127,   126,   127,   320,
      37,   120,   131,   133,   143,   145,   214,   268,   274,   282,
     284,   289,   310,   311,   320,   326,   328,   329,   332,     1,
     121,   125,     1,   121,   125,     1,   125,     1,   125,   121,
     121,   313,   120,   313,   120,   120,     1,   123,     1,   126,
       1,    37,    38,   123,   214,   268,   274,   282,   285,   289,
     320,   345,   346,     1,   123,     1,   364,   367,   375,   376,
     364,   367,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    85,    86,    88,    89,    90,   123,   129,
     147,   191,   192,   193,   214,   221,   226,   242,   244,   249,
     262,   263,   264,   325,   355,   356,   359,   360,   361,   368,
     369,   370,   371,   372,   373,   375,   376,   378,   379,   380,
     381,   382,   383,   126,    31,   214,   386,   214,   209,   210,
     212,   213,   310,   311,   317,   320,   328,   333,   335,   368,
     376,   211,   301,   124,   240,   241,   261,   121,     1,   120,
     174,   217,   222,   225,   227,   247,   248,   250,   120,   226,
     249,   226,   249,   120,   214,   268,   274,   282,   285,   289,
     307,   266,   120,   120,   307,   266,   120,   120,   120,   120,
     120,   120,   227,   250,   121,   242,   244,   264,   274,   282,
     284,   289,   297,   347,   386,   127,   132,   175,   176,   218,
     223,   242,   127,     1,   126,   127,     1,     7,     8,     9,
     120,   128,   131,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,   124,   243,   176,   218,   219,   229,   251,
     117,   137,   138,   134,   135,    10,    11,   232,   254,    12,
      13,   118,   119,    14,    15,   133,   139,   140,    16,    17,
     141,   243,   121,     7,     8,     9,   120,   128,   131,   243,
     117,   137,   138,   134,   135,    10,    11,    12,    13,   118,
     119,    14,    15,   133,   139,   140,    16,    17,   141,   243,
     121,   121,   107,   214,   300,   393,   396,   397,   127,   127,
     132,   144,   266,   267,   132,   144,   266,   267,   121,   121,
     121,   121,   310,   315,   319,   121,   121,   310,    11,   119,
     125,   124,   120,   320,   328,   329,    65,   206,   214,   300,
     206,     1,   214,   268,   282,   285,   296,   305,   300,   333,
     334,   120,   147,   214,   214,   300,     1,   120,   305,   117,
     120,   214,   300,   123,   325,   375,   376,   375,   376,   375,
     123,   375,   376,   123,     1,   126,     1,     1,   123,   125,
     125,    69,    70,    91,    95,    97,   126,    69,    70,   126,
     123,     1,   194,   195,     1,   194,   195,     1,   124,   120,
     129,   214,   286,   287,   310,   316,   318,   320,   328,   335,
     336,   337,     1,   300,   308,   351,   328,   314,   320,   120,
     129,   154,   155,   170,   171,   173,   174,   183,   214,   300,
     118,   147,   214,   214,   268,   282,   285,   118,   118,   124,
     125,     1,   123,   127,    28,   146,   214,   119,   125,   124,
     214,   329,   331,   343,   343,   343,   123,   125,   126,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   218,   219,   221,   241,   262,   299,   340,   341,   310,
     313,   315,   317,   319,   310,   317,   127,   242,   263,   338,
     339,   375,   376,   375,   376,   343,   344,   343,   344,   132,
     132,   132,    51,   349,   350,     1,   271,   127,   127,     1,
     126,   196,   197,     1,   126,   196,   197,   127,   121,   214,
     308,   309,   320,   328,   329,   353,   354,   132,   144,   266,
     267,   320,   328,   332,   328,   120,   131,   326,     1,     1,
     125,     1,    51,   214,   349,   350,   125,     1,    51,   214,
     349,   350,   125,     1,    51,   214,   349,   350,   125,    51,
     214,   349,   350,     3,    28,    44,    74,    75,   121,   322,
     323,   324,   242,   144,   214,   126,   127,   123,   123,   129,
     266,   267,   129,   120,   120,     1,   120,    52,    53,    54,
      56,    57,    58,    59,    62,    86,   214,   264,   325,   355,
     378,   382,   120,   214,   123,   123,   123,   218,   219,   244,
     264,   120,   282,   120,   120,   187,   214,   123,   123,   123,
     129,   128,   243,     1,   128,   123,   125,   244,   264,   243,
     121,   125,   244,     1,   370,   371,   370,   371,   355,   356,
     364,   367,   355,   356,   364,   367,     1,     1,   386,   386,
     145,   214,   127,   127,   328,   317,   320,   368,   376,   368,
     376,   376,   241,   141,   123,   141,    65,   143,   214,   226,
     249,   274,   282,   284,   289,   298,   348,     1,     1,     7,
       8,     9,   120,   128,   131,     7,     8,     9,   120,   128,
     131,   214,   299,   118,   120,   131,   214,   268,   274,   282,
     285,   289,   320,   327,   328,   330,   214,   268,   274,   282,
     285,   289,   306,   244,   347,   375,   214,   131,   330,   306,
     242,   386,   386,   386,   242,   226,   249,   348,   121,   214,
     274,   282,   284,   289,   329,   121,   128,     1,   166,   167,
       1,   126,   125,   132,     1,   166,   167,   126,     1,   166,
     167,     1,   214,   121,   219,   223,   224,   263,     1,   214,
     244,   264,   218,   242,     1,   229,   251,   229,   251,   229,
     251,   230,   252,   230,   252,   231,   253,   231,   253,   232,
     254,   232,   254,   232,   254,   218,   219,   234,   255,   218,
     219,   234,   255,   218,   219,   235,   256,   218,   219,   236,
     257,   218,   219,   237,   258,   238,   259,   239,   260,   129,
     218,   219,   244,   245,   264,   265,   218,   242,     1,   214,
     121,   223,   224,     1,   214,   244,   264,   218,   242,   229,
     251,   229,   251,   229,   251,   230,   252,   230,   252,   231,
     253,   231,   253,   232,   254,   232,   254,   232,   254,   232,
     254,   218,   219,   234,   255,   218,   219,   234,   255,   218,
     219,   235,   256,   218,   219,   236,   257,   218,   219,   237,
     258,   238,   259,   239,   260,   129,   244,   245,   264,   265,
     218,   242,   118,   119,   214,   394,   395,   214,   126,   393,
     396,   397,   397,   132,   132,   132,   132,   132,   132,   207,
     199,   201,   203,   214,   320,   328,   119,   124,   329,   119,
     127,   118,   127,   214,   268,   282,   285,   329,   320,   328,
     335,   336,   187,   287,   310,   320,   328,   127,   214,   127,
     214,   329,   214,   320,   120,   123,   126,   177,   178,   177,
     178,   375,   375,   375,   216,   375,   375,     1,   340,   341,
     121,   266,   267,   127,   125,     1,   300,   308,   351,   328,
     310,   318,   320,   129,   325,   214,   120,   314,   314,   214,
       1,     1,   287,   208,   118,   206,   206,   266,   267,   270,
     196,   197,     1,   126,   271,   124,   129,   124,   129,   205,
     201,   214,   124,   214,   124,   375,   376,     1,   123,   125,
     123,   125,   123,   158,   159,   162,   163,   164,   126,   156,
     159,   123,   126,   158,   159,   162,   163,   164,   124,    37,
     335,   336,   337,   338,   339,   342,     1,   126,   271,     1,
     126,   271,     1,   126,   196,   197,   320,   328,   329,   121,
     121,   121,   132,   132,   132,   328,   326,   121,   353,   354,
     132,   144,   266,   267,   349,   350,   300,   349,   349,   349,
     350,   121,   120,   121,   125,   323,   121,   121,   121,     1,
     166,   167,   355,   356,   364,   367,   129,   129,   355,   356,
     364,   367,   244,   264,   244,   264,   121,   244,   264,   129,
     266,   267,   129,   120,   120,   355,   120,   219,   264,   120,
     129,    56,     1,   121,   123,   214,   244,   264,   377,   123,
     123,   123,   123,   123,   386,   120,   242,   242,   214,   355,
     356,   364,   367,    90,   219,   263,    88,    89,    90,   242,
     263,   219,   263,   242,   263,   118,   317,   376,   376,   123,
     244,   245,   264,   265,   244,   245,   264,   265,   143,   144,
     121,   143,   274,   282,   284,   289,   329,   121,     1,   214,
     121,   223,   224,     1,   214,   244,   264,     1,   214,   121,
     223,   224,     1,   214,   244,   264,   121,   121,   329,   208,
     121,   320,   330,   353,   354,   266,   267,   118,   328,   120,
     327,   131,   118,   131,   214,   268,   274,   282,   285,   289,
     330,   121,   121,   121,   121,   266,   267,   131,   131,   330,
     125,   121,   125,   125,   125,   121,   121,   229,   251,   386,
       1,   126,   218,   242,     1,     1,   121,   125,   121,   132,
     132,     1,   125,   129,   129,   125,   129,   129,   121,   132,
     132,   129,   129,   129,   129,   214,   214,   123,   125,   214,
     386,   126,   126,   320,   328,   201,   208,   118,   127,   127,
     214,   328,   320,   121,   328,   310,   121,   127,   127,   214,
     121,     1,   166,   167,   286,   320,   214,   120,   310,   318,
     318,   266,   267,   120,   121,   119,   208,   119,   119,   123,
       1,   123,   199,   198,   300,   199,   198,   203,   124,   127,
       1,   160,   161,     1,   160,   161,   376,     1,   340,   341,
     125,   126,   338,   339,     1,   123,     1,   123,   328,   326,
     121,   121,   121,   132,   132,   132,   329,   332,   244,   121,
     323,     1,   355,   356,   364,   367,   355,   356,   364,   367,
     121,   121,   121,   121,     1,   355,   121,   244,   355,   356,
     129,   129,   264,   121,   244,   264,    56,   264,   377,   386,
     120,   355,   129,   123,     1,   123,     1,   121,   264,   377,
       3,   121,   129,   386,   121,   121,   125,   120,   120,   187,
     129,   129,   129,   129,   129,   129,   129,   129,   121,   121,
       1,   121,   121,   132,   132,   121,   132,   132,   121,   119,
     320,   328,   330,   121,   121,   121,   132,   132,   208,   327,
     121,   353,   354,   266,   267,   208,   266,   267,   118,   131,
     120,   338,   132,   132,   266,   267,   266,   267,   131,   347,
     214,   214,   242,     1,   219,   263,   218,   219,   218,   219,
     241,   261,   218,   219,   241,   261,   218,   219,   218,   219,
     241,   261,   218,   219,   241,   261,   218,   219,   241,   261,
     218,   219,   241,   261,   218,   219,   241,   261,   218,   219,
     241,   261,   394,   123,   123,   119,   208,   127,   375,   310,
     124,   127,     1,   120,   129,   129,   119,   196,   197,   123,
     196,   197,   124,   329,   124,   203,   342,   126,   338,   339,
       1,   196,   197,   196,   197,   121,   355,   355,   355,   355,
     355,   356,   121,   120,   377,   121,   244,   264,   244,   355,
       1,   121,   244,   264,   357,   358,   386,   123,   358,     3,
     121,   129,   127,   187,   242,   242,     1,     1,   327,   121,
     119,   121,   121,   132,   132,   119,   132,   132,   208,   266,
     267,   347,   132,   132,   132,   132,   266,   267,   121,   121,
     121,   121,   119,   340,   266,   267,   266,   267,   196,   197,
     199,   199,   125,   126,     1,    64,    64,   244,   264,   121,
     244,   264,   121,   123,   121,   123,   355,   356,   121,   355,
     356,   121,   125,   129,   120,     3,   121,   129,   358,   123,
     358,    73,   187,   188,   189,   121,   121,   121,   125,   119,
     132,   132,   121,   132,   132,   123,   126,   355,   355,   121,
     121,   123,   355,   244,   355,   356,   123,   357,   358,   242,
     358,   123,   358,   121,   129,     3,   121,   129,   375,   375,
     126,   188,   127,   187,   229,   251,   338,   121,   121,   121,
     121,   121,   129,   123,   358,   358,   123,   358,   189,   121,
     355,   123,   123,   123,   358,   121,   121,   121,   129,   126,
     121,   123,   123,   123,   358,   123,   121,   123
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 143: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11292 "grammar.ec"
	break;
      case 144: /* "type" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11301 "grammar.ec"
	break;
      case 145: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11310 "grammar.ec"
	break;
      case 146: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 11319 "grammar.ec"
	break;
      case 147: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11328 "grammar.ec"
	break;
      case 148: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11337 "grammar.ec"
	break;
      case 149: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11346 "grammar.ec"
	break;
      case 150: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11355 "grammar.ec"
	break;
      case 151: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11364 "grammar.ec"
	break;
      case 152: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11373 "grammar.ec"
	break;
      case 153: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11382 "grammar.ec"
	break;
      case 154: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11391 "grammar.ec"
	break;
      case 155: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11400 "grammar.ec"
	break;
      case 156: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11409 "grammar.ec"
	break;
      case 157: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11418 "grammar.ec"
	break;
      case 158: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11427 "grammar.ec"
	break;
      case 159: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11436 "grammar.ec"
	break;
      case 160: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11445 "grammar.ec"
	break;
      case 161: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11454 "grammar.ec"
	break;
      case 162: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11463 "grammar.ec"
	break;
      case 163: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11472 "grammar.ec"
	break;
      case 164: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11481 "grammar.ec"
	break;
      case 165: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11490 "grammar.ec"
	break;
      case 166: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11499 "grammar.ec"
	break;
      case 167: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11508 "grammar.ec"
	break;
      case 168: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11517 "grammar.ec"
	break;
      case 169: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11526 "grammar.ec"
	break;
      case 173: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11535 "grammar.ec"
	break;
      case 174: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 233 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11544 "grammar.ec"
	break;
      case 177: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11553 "grammar.ec"
	break;
      case 178: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 235 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11562 "grammar.ec"
	break;
      case 179: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11571 "grammar.ec"
	break;
      case 180: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11580 "grammar.ec"
	break;
      case 183: /* "property" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 11589 "grammar.ec"
	break;
      case 194: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11598 "grammar.ec"
	break;
      case 195: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11607 "grammar.ec"
	break;
      case 196: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11616 "grammar.ec"
	break;
      case 197: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11625 "grammar.ec"
	break;
      case 198: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 11634 "grammar.ec"
	break;
      case 199: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11643 "grammar.ec"
	break;
      case 200: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11652 "grammar.ec"
	break;
      case 201: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11661 "grammar.ec"
	break;
      case 202: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11670 "grammar.ec"
	break;
      case 203: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11679 "grammar.ec"
	break;
      case 204: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11688 "grammar.ec"
	break;
      case 205: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11697 "grammar.ec"
	break;
      case 206: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 11706 "grammar.ec"
	break;
      case 207: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11715 "grammar.ec"
	break;
      case 208: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 11724 "grammar.ec"
	break;
      case 209: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 241 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11733 "grammar.ec"
	break;
      case 210: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11742 "grammar.ec"
	break;
      case 211: /* "class" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11751 "grammar.ec"
	break;
      case 212: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11760 "grammar.ec"
	break;
      case 213: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11769 "grammar.ec"
	break;
      case 214: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 11778 "grammar.ec"
	break;
      case 215: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11787 "grammar.ec"
	break;
      case 216: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11796 "grammar.ec"
	break;
      case 220: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11805 "grammar.ec"
	break;
      case 221: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11814 "grammar.ec"
	break;
      case 223: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11823 "grammar.ec"
	break;
      case 224: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11832 "grammar.ec"
	break;
      case 226: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11841 "grammar.ec"
	break;
      case 229: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11850 "grammar.ec"
	break;
      case 230: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11859 "grammar.ec"
	break;
      case 231: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11868 "grammar.ec"
	break;
      case 232: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11877 "grammar.ec"
	break;
      case 234: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11886 "grammar.ec"
	break;
      case 235: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11895 "grammar.ec"
	break;
      case 236: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11904 "grammar.ec"
	break;
      case 237: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11913 "grammar.ec"
	break;
      case 238: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11922 "grammar.ec"
	break;
      case 239: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11931 "grammar.ec"
	break;
      case 240: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11940 "grammar.ec"
	break;
      case 241: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11949 "grammar.ec"
	break;
      case 242: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11958 "grammar.ec"
	break;
      case 244: /* "expression" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11967 "grammar.ec"
	break;
      case 246: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11976 "grammar.ec"
	break;
      case 249: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11985 "grammar.ec"
	break;
      case 251: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11994 "grammar.ec"
	break;
      case 252: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12003 "grammar.ec"
	break;
      case 253: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12012 "grammar.ec"
	break;
      case 254: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12021 "grammar.ec"
	break;
      case 255: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12030 "grammar.ec"
	break;
      case 256: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12039 "grammar.ec"
	break;
      case 257: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12048 "grammar.ec"
	break;
      case 258: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12057 "grammar.ec"
	break;
      case 259: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12066 "grammar.ec"
	break;
      case 260: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12075 "grammar.ec"
	break;
      case 261: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12084 "grammar.ec"
	break;
      case 262: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12093 "grammar.ec"
	break;
      case 263: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12102 "grammar.ec"
	break;
      case 264: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 12111 "grammar.ec"
	break;
      case 266: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12120 "grammar.ec"
	break;
      case 267: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 199 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 12129 "grammar.ec"
	break;
      case 268: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12138 "grammar.ec"
	break;
      case 269: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12147 "grammar.ec"
	break;
      case 270: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 12156 "grammar.ec"
	break;
      case 271: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 12165 "grammar.ec"
	break;
      case 273: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12174 "grammar.ec"
	break;
      case 274: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12183 "grammar.ec"
	break;
      case 275: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12192 "grammar.ec"
	break;
      case 277: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12201 "grammar.ec"
	break;
      case 278: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12210 "grammar.ec"
	break;
      case 279: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12219 "grammar.ec"
	break;
      case 280: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12228 "grammar.ec"
	break;
      case 281: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12237 "grammar.ec"
	break;
      case 282: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12246 "grammar.ec"
	break;
      case 283: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12255 "grammar.ec"
	break;
      case 284: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12264 "grammar.ec"
	break;
      case 285: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12273 "grammar.ec"
	break;
      case 286: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12282 "grammar.ec"
	break;
      case 287: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 12291 "grammar.ec"
	break;
      case 288: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12300 "grammar.ec"
	break;
      case 289: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12309 "grammar.ec"
	break;
      case 290: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12318 "grammar.ec"
	break;
      case 291: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12327 "grammar.ec"
	break;
      case 292: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12336 "grammar.ec"
	break;
      case 293: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12345 "grammar.ec"
	break;
      case 294: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12354 "grammar.ec"
	break;
      case 295: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 210 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 12363 "grammar.ec"
	break;
      case 297: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12372 "grammar.ec"
	break;
      case 298: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12381 "grammar.ec"
	break;
      case 299: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12390 "grammar.ec"
	break;
      case 300: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12399 "grammar.ec"
	break;
      case 301: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12408 "grammar.ec"
	break;
      case 302: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12417 "grammar.ec"
	break;
      case 303: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12426 "grammar.ec"
	break;
      case 304: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12435 "grammar.ec"
	break;
      case 308: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12444 "grammar.ec"
	break;
      case 309: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12453 "grammar.ec"
	break;
      case 310: /* "direct_declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12462 "grammar.ec"
	break;
      case 311: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12471 "grammar.ec"
	break;
      case 312: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12480 "grammar.ec"
	break;
      case 313: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12489 "grammar.ec"
	break;
      case 314: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12498 "grammar.ec"
	break;
      case 315: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12507 "grammar.ec"
	break;
      case 316: /* "direct_declarator_function_start_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12516 "grammar.ec"
	break;
      case 317: /* "direct_declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12525 "grammar.ec"
	break;
      case 318: /* "direct_declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12534 "grammar.ec"
	break;
      case 319: /* "direct_declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12543 "grammar.ec"
	break;
      case 320: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 270 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 12552 "grammar.ec"
	break;
      case 322: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12561 "grammar.ec"
	break;
      case 323: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 271 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 12570 "grammar.ec"
	break;
      case 324: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 272 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 12579 "grammar.ec"
	break;
      case 325: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 12588 "grammar.ec"
	break;
      case 326: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12597 "grammar.ec"
	break;
      case 327: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12606 "grammar.ec"
	break;
      case 328: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 12615 "grammar.ec"
	break;
      case 329: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12624 "grammar.ec"
	break;
      case 330: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12633 "grammar.ec"
	break;
      case 331: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12642 "grammar.ec"
	break;
      case 332: /* "declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12651 "grammar.ec"
	break;
      case 333: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12660 "grammar.ec"
	break;
      case 334: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12669 "grammar.ec"
	break;
      case 335: /* "declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12678 "grammar.ec"
	break;
      case 336: /* "declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12687 "grammar.ec"
	break;
      case 337: /* "declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 216 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12696 "grammar.ec"
	break;
      case 338: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12705 "grammar.ec"
	break;
      case 339: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12714 "grammar.ec"
	break;
      case 340: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12723 "grammar.ec"
	break;
      case 341: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12732 "grammar.ec"
	break;
      case 342: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 12741 "grammar.ec"
	break;
      case 343: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12750 "grammar.ec"
	break;
      case 344: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12759 "grammar.ec"
	break;
      case 345: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12768 "grammar.ec"
	break;
      case 346: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12777 "grammar.ec"
	break;
      case 347: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12786 "grammar.ec"
	break;
      case 348: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12795 "grammar.ec"
	break;
      case 349: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12804 "grammar.ec"
	break;
      case 350: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12813 "grammar.ec"
	break;
      case 351: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12822 "grammar.ec"
	break;
      case 352: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12831 "grammar.ec"
	break;
      case 353: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12840 "grammar.ec"
	break;
      case 354: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12849 "grammar.ec"
	break;
      case 355: /* "statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12858 "grammar.ec"
	break;
      case 356: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12867 "grammar.ec"
	break;
      case 360: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12876 "grammar.ec"
	break;
      case 361: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12885 "grammar.ec"
	break;
      case 362: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 12894 "grammar.ec"
	break;
      case 364: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 12903 "grammar.ec"
	break;
      case 368: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12912 "grammar.ec"
	break;
      case 369: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12921 "grammar.ec"
	break;
      case 370: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12930 "grammar.ec"
	break;
      case 371: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12939 "grammar.ec"
	break;
      case 372: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12948 "grammar.ec"
	break;
      case 373: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12957 "grammar.ec"
	break;
      case 374: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 12966 "grammar.ec"
	break;
      case 375: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12975 "grammar.ec"
	break;
      case 376: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12984 "grammar.ec"
	break;
      case 377: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12993 "grammar.ec"
	break;
      case 378: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13002 "grammar.ec"
	break;
      case 379: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13011 "grammar.ec"
	break;
      case 380: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13020 "grammar.ec"
	break;
      case 381: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13029 "grammar.ec"
	break;
      case 382: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13038 "grammar.ec"
	break;
      case 383: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 13047 "grammar.ec"
	break;
      case 384: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13056 "grammar.ec"
	break;
      case 385: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 13065 "grammar.ec"
	break;
      case 386: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 13074 "grammar.ec"
	break;
      case 387: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 231 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13083 "grammar.ec"
	break;
      case 388: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 231 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 13092 "grammar.ec"
	break;
      case 389: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13101 "grammar.ec"
	break;
      case 390: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 13110 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 280 "grammar.y"
    {
      (yyval.specifier) = null;
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 309 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 367 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 369 "grammar.y"
    {
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);
      FreeIdentifier((yyvsp[(1) - (2)].id));
      FreeIdentifier((yyvsp[(2) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #else
      Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
      Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
      yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 468 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 472 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 476 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 478 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 527 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 529 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 534 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(1) - (3)].list), FreeSpecifier); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 539 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(2) - (4)].list), FreeSpecifier) ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 544 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 546 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 551 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 553 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 558 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 560 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 565 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 567 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 569 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 571 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 573 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 577 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 581 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 594 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 596 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 598 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 600 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 602 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 608 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 610 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 615 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 620 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 625 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 627 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 629 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 633 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 634 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 638 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 640 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 650 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 654 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 656 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 658 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 662 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 664 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 666 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 669 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 681 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 692 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 711 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 713 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 717 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 718 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 719 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 720 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 721 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 722 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 62:

/* Line 1464 of yacc.c  */
#line 723 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 64:

/* Line 1464 of yacc.c  */
#line 725 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 730 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 731 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 732 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 736 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 737 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 738 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 739 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 740 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 741 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 742 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 747 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 749 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 754 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 756 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 758 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 760 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 762 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 792 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 794 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 799 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 801 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 803 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 805 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 807 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 836 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 838 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 840 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 845 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 847 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 852 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 854 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 858 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 860 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 862 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 864 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 869 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 872 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 875 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 878 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 943 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 945 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 950 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 952 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 954 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 956 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 958 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 988 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 992 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 993 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 994 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 998 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 999 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 1000 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 1004 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 1005 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 121:

/* Line 1464 of yacc.c  */
#line 1006 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 1012 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 1015 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 1018 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 1021 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 127:

/* Line 1464 of yacc.c  */
#line 1024 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 1030 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 1032 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 1034 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 1036 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 1038 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 1042 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1047 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1050 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1053 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1056 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 139:

/* Line 1464 of yacc.c  */
#line 1059 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1065 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1067 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1071 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1076 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1078 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1083 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1085 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1090 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1092 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1097 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1102 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1104 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1109 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1111 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1126 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1130 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1131 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1133 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1134 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1135 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1136 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1137 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1138 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1139 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1140 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1142 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1143 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1145 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1149 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1152 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1153 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1155 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1156 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1157 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1158 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1159 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1160 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1161 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1162 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1163 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1164 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1165 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1167 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1168 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1172 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1173 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1174 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1182 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1183 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1184 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 1188 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 1191 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1192 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1196 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1197 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1209 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1210 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1214 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1215 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1216 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1217 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1218 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1219 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1220 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1221 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1225 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1229 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1230 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1234 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1242 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 1243 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); ;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 1253 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 1254 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 1261 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1262 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1263 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1303 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1304 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1309 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1316 "grammar.y"
    { (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1318 "grammar.y"
    {
      (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1325 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1326 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1328 "grammar.y"
    { (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1330 "grammar.y"
    {
      (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1338 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1339 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1344 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1351 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1358 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1364 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1371 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace(0, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1377 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass(0, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1386 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1393 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1399 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1405 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1411 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1417 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1423 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1434 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1454 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1455 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1456 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1458 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 272:

/* Line 1464 of yacc.c  */
#line 1459 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1460 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 1461 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1462 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1463 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1464 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1465 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1466 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1467 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1468 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1469 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1470 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1471 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1472 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1473 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1474 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1475 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1476 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1477 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1478 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1480 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 297:

/* Line 1464 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 298:

/* Line 1464 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 299:

/* Line 1464 of yacc.c  */
#line 1491 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1500 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1506 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 305:

/* Line 1464 of yacc.c  */
#line 1507 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 306:

/* Line 1464 of yacc.c  */
#line 1508 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1509 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1510 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1511 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1512 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1513 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1514 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1516 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1517 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1518 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1519 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1520 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1521 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1522 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1523 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 1530 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 1531 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1532 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1533 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1537 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1539 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1540 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1541 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1544 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1545 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1550 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1551 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1552 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1553 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 1557 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 344:

/* Line 1464 of yacc.c  */
#line 1558 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 345:

/* Line 1464 of yacc.c  */
#line 1559 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1560 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1561 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1565 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1566 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1567 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1568 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1569 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 354:

/* Line 1464 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 356:

/* Line 1464 of yacc.c  */
#line 1573 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1576 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1577 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 364:

/* Line 1464 of yacc.c  */
#line 1591 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 365:

/* Line 1464 of yacc.c  */
#line 1592 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 366:

/* Line 1464 of yacc.c  */
#line 1593 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1594 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 368:

/* Line 1464 of yacc.c  */
#line 1595 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1596 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1597 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1598 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 373:

/* Line 1464 of yacc.c  */
#line 1603 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 375:

/* Line 1464 of yacc.c  */
#line 1608 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 376:

/* Line 1464 of yacc.c  */
#line 1609 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 377:

/* Line 1464 of yacc.c  */
#line 1610 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1611 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1612 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1613 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 382:

/* Line 1464 of yacc.c  */
#line 1618 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 383:

/* Line 1464 of yacc.c  */
#line 1619 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 384:

/* Line 1464 of yacc.c  */
#line 1620 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1621 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 388:

/* Line 1464 of yacc.c  */
#line 1627 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 389:

/* Line 1464 of yacc.c  */
#line 1628 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 390:

/* Line 1464 of yacc.c  */
#line 1629 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1634 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1642 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 394:

/* Line 1464 of yacc.c  */
#line 1643 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 395:

/* Line 1464 of yacc.c  */
#line 1644 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1645 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 397:

/* Line 1464 of yacc.c  */
#line 1646 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1647 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1649 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 402:

/* Line 1464 of yacc.c  */
#line 1654 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 403:

/* Line 1464 of yacc.c  */
#line 1655 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 404:

/* Line 1464 of yacc.c  */
#line 1656 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1657 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1659 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 407:

/* Line 1464 of yacc.c  */
#line 1660 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 408:

/* Line 1464 of yacc.c  */
#line 1661 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1662 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 411:

/* Line 1464 of yacc.c  */
#line 1667 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 412:

/* Line 1464 of yacc.c  */
#line 1668 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 413:

/* Line 1464 of yacc.c  */
#line 1670 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1671 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1676 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 417:

/* Line 1464 of yacc.c  */
#line 1677 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 418:

/* Line 1464 of yacc.c  */
#line 1679 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1680 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 422:

/* Line 1464 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 423:

/* Line 1464 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 426:

/* Line 1464 of yacc.c  */
#line 1694 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 427:

/* Line 1464 of yacc.c  */
#line 1695 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 429:

/* Line 1464 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 430:

/* Line 1464 of yacc.c  */
#line 1701 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1706 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 433:

/* Line 1464 of yacc.c  */
#line 1707 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 434:

/* Line 1464 of yacc.c  */
#line 1708 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1709 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1712 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1713 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1716 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1717 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1718 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1719 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1721 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 450:

/* Line 1464 of yacc.c  */
#line 1730 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 451:

/* Line 1464 of yacc.c  */
#line 1731 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1732 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 453:

/* Line 1464 of yacc.c  */
#line 1734 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1735 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1736 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1737 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 457:

/* Line 1464 of yacc.c  */
#line 1741 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1742 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 459:

/* Line 1464 of yacc.c  */
#line 1743 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1744 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1745 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1746 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1747 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1748 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1749 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1750 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1755 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1756 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1757 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1762 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 473:

/* Line 1464 of yacc.c  */
#line 1763 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 474:

/* Line 1464 of yacc.c  */
#line 1764 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 476:

/* Line 1464 of yacc.c  */
#line 1769 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 478:

/* Line 1464 of yacc.c  */
#line 1771 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 479:

/* Line 1464 of yacc.c  */
#line 1773 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 480:

/* Line 1464 of yacc.c  */
#line 1774 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1776 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 482:

/* Line 1464 of yacc.c  */
#line 1777 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1782 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1784 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1789 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1793 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); ;}
    break;

  case 488:

/* Line 1464 of yacc.c  */
#line 1795 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 489:

/* Line 1464 of yacc.c  */
#line 1797 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 490:

/* Line 1464 of yacc.c  */
#line 1798 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1801 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1806 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 494:

/* Line 1464 of yacc.c  */
#line 1808 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1813 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1817 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1818 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1819 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 499:

/* Line 1464 of yacc.c  */
#line 1820 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1821 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1822 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1823 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1824 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1825 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1826 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 506:

/* Line 1464 of yacc.c  */
#line 1827 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 507:

/* Line 1464 of yacc.c  */
#line 1828 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 513:

/* Line 1464 of yacc.c  */
#line 1844 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 515:

/* Line 1464 of yacc.c  */
#line 1849 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 516:

/* Line 1464 of yacc.c  */
#line 1850 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 517:

/* Line 1464 of yacc.c  */
#line 1851 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 1852 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 1853 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 1854 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 522:

/* Line 1464 of yacc.c  */
#line 1859 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 523:

/* Line 1464 of yacc.c  */
#line 1863 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 524:

/* Line 1464 of yacc.c  */
#line 1867 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 1871 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 527:

/* Line 1464 of yacc.c  */
#line 1879 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 528:

/* Line 1464 of yacc.c  */
#line 1880 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 529:

/* Line 1464 of yacc.c  */
#line 1881 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 1882 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 532:

/* Line 1464 of yacc.c  */
#line 1888 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         if((yyvsp[(1) - (2)].exp).identifier._class && !(yyvsp[(1) - (2)].exp).identifier._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(1) - (2)].exp).identifier.string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   ;}
    break;

  case 533:

/* Line 1464 of yacc.c  */
#line 1938 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 534:

/* Line 1464 of yacc.c  */
#line 1939 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 535:

/* Line 1464 of yacc.c  */
#line 1940 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 1941 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 1942 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 538:

/* Line 1464 of yacc.c  */
#line 1943 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 1944 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 1949 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 542:

/* Line 1464 of yacc.c  */
#line 1950 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 543:

/* Line 1464 of yacc.c  */
#line 1951 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 1952 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 1959 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 1960 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 1961 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 1962 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 1967 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 551:

/* Line 1464 of yacc.c  */
#line 1968 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 552:

/* Line 1464 of yacc.c  */
#line 1970 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 1971 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 1976 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 556:

/* Line 1464 of yacc.c  */
#line 1977 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 557:

/* Line 1464 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 560:

/* Line 1464 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 561:

/* Line 1464 of yacc.c  */
#line 1986 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 562:

/* Line 1464 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 565:

/* Line 1464 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 566:

/* Line 1464 of yacc.c  */
#line 1995 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 568:

/* Line 1464 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 569:

/* Line 1464 of yacc.c  */
#line 2001 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 571:

/* Line 1464 of yacc.c  */
#line 2006 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 572:

/* Line 1464 of yacc.c  */
#line 2007 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 573:

/* Line 1464 of yacc.c  */
#line 2008 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 2009 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 2010 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 2011 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 2012 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 2013 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 2015 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 2016 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 581:

/* Line 1464 of yacc.c  */
#line 2017 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 582:

/* Line 1464 of yacc.c  */
#line 2018 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 583:

/* Line 1464 of yacc.c  */
#line 2019 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 584:

/* Line 1464 of yacc.c  */
#line 2020 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 2021 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 2022 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 2024 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 2025 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 2026 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 2027 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 2029 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 2030 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 2031 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 2032 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 2035 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 2042 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 597:

/* Line 1464 of yacc.c  */
#line 2046 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2050 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 600:

/* Line 1464 of yacc.c  */
#line 2057 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 601:

/* Line 1464 of yacc.c  */
#line 2061 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 602:

/* Line 1464 of yacc.c  */
#line 2066 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 603:

/* Line 1464 of yacc.c  */
#line 2067 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 604:

/* Line 1464 of yacc.c  */
#line 2071 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2072 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2080 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2081 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2082 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2086 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2087 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 613:

/* Line 1464 of yacc.c  */
#line 2088 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 614:

/* Line 1464 of yacc.c  */
#line 2089 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 617:

/* Line 1464 of yacc.c  */
#line 2099 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 618:

/* Line 1464 of yacc.c  */
#line 2100 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 619:

/* Line 1464 of yacc.c  */
#line 2101 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2102 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2103 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2104 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2108 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); structDeclMode = declMode = defaultAccess; ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2109 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2110 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); structDeclMode = declMode = staticAccess; ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2111 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2113 "grammar.y"
    { (yyval.specifier) = MkSpecifier(RESTRICT); ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 630:

/* Line 1464 of yacc.c  */
#line 2118 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2119 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 632:

/* Line 1464 of yacc.c  */
#line 2123 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 633:

/* Line 1464 of yacc.c  */
#line 2124 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 635:

/* Line 1464 of yacc.c  */
#line 2129 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 636:

/* Line 1464 of yacc.c  */
#line 2133 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2134 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 638:

/* Line 1464 of yacc.c  */
#line 2138 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2139 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2140 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2144 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 642:

/* Line 1464 of yacc.c  */
#line 2145 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 643:

/* Line 1464 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 644:

/* Line 1464 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 645:

/* Line 1464 of yacc.c  */
#line 2149 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2151 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 649:

/* Line 1464 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 650:

/* Line 1464 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 651:

/* Line 1464 of yacc.c  */
#line 2156 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 652:

/* Line 1464 of yacc.c  */
#line 2157 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 653:

/* Line 1464 of yacc.c  */
#line 2161 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2162 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2166 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2167 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2168 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2172 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2173 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2174 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2175 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2176 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2177 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2178 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 665:

/* Line 1464 of yacc.c  */
#line 2179 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 666:

/* Line 1464 of yacc.c  */
#line 2180 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 667:

/* Line 1464 of yacc.c  */
#line 2182 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2183 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2185 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 670:

/* Line 1464 of yacc.c  */
#line 2186 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 671:

/* Line 1464 of yacc.c  */
#line 2187 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 672:

/* Line 1464 of yacc.c  */
#line 2188 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 673:

/* Line 1464 of yacc.c  */
#line 2189 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 678:

/* Line 1464 of yacc.c  */
#line 2203 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 679:

/* Line 1464 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 680:

/* Line 1464 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 681:

/* Line 1464 of yacc.c  */
#line 2209 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2214 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2215 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2221 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2222 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2223 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 691:

/* Line 1464 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 692:

/* Line 1464 of yacc.c  */
#line 2227 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 693:

/* Line 1464 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 694:

/* Line 1464 of yacc.c  */
#line 2229 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 695:

/* Line 1464 of yacc.c  */
#line 2230 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 696:

/* Line 1464 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 700:

/* Line 1464 of yacc.c  */
#line 2235 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 701:

/* Line 1464 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 702:

/* Line 1464 of yacc.c  */
#line 2237 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 703:

/* Line 1464 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 704:

/* Line 1464 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 705:

/* Line 1464 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2243 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2249 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2251 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 715:

/* Line 1464 of yacc.c  */
#line 2253 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 716:

/* Line 1464 of yacc.c  */
#line 2254 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 717:

/* Line 1464 of yacc.c  */
#line 2255 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 718:

/* Line 1464 of yacc.c  */
#line 2256 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 719:

/* Line 1464 of yacc.c  */
#line 2257 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 720:

/* Line 1464 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 721:

/* Line 1464 of yacc.c  */
#line 2259 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 722:

/* Line 1464 of yacc.c  */
#line 2260 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 726:

/* Line 1464 of yacc.c  */
#line 2264 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_BOOL); ;}
    break;

  case 727:

/* Line 1464 of yacc.c  */
#line 2265 "grammar.y"
    { (yyval.specifier) = MkSpecifier(BOOL); ;}
    break;

  case 728:

/* Line 1464 of yacc.c  */
#line 2266 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_COMPLEX); ;}
    break;

  case 729:

/* Line 1464 of yacc.c  */
#line 2267 "grammar.y"
    { (yyval.specifier) = MkSpecifier(_IMAGINARY); ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2268 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2269 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2270 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2271 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2278 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2280 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2282 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2284 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2286 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2288 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2290 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2292 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2294 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2296 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2300 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2301 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2306 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2312 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2318 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2325 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      ;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2334 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2335 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2336 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2337 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2341 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2342 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2343 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2345 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2346 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2347 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2349 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2350 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2351 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2355 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2360 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2368 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2377 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2385 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2387 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2388 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2389 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2394 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2401 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2408 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2411 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2424 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2441 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2443 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2445 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2449 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2450 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2455 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2456 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2457 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2459 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2460 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2465 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2468 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2469 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2470 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2471 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2472 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2478 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2479 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2482 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2483 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2484 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2485 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2493 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2494 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 814:

/* Line 1464 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2496 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2497 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2498 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2500 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2501 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 821:

/* Line 1464 of yacc.c  */
#line 2502 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 822:

/* Line 1464 of yacc.c  */
#line 2506 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2507 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 824:

/* Line 1464 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 826:

/* Line 1464 of yacc.c  */
#line 2510 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2511 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2512 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2513 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2515 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2519 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2520 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 834:

/* Line 1464 of yacc.c  */
#line 2524 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2525 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 836:

/* Line 1464 of yacc.c  */
#line 2526 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 837:

/* Line 1464 of yacc.c  */
#line 2527 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2528 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2529 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 840:

/* Line 1464 of yacc.c  */
#line 2530 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2531 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2533 "grammar.y"
    { _DeclClass(0, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2534 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass(0, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2537 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2555 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2573 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 848:

/* Line 1464 of yacc.c  */
#line 2577 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2578 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 850:

/* Line 1464 of yacc.c  */
#line 2579 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2580 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2581 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2582 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2583 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2584 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2586 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2604 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2620 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2621 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2622 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 861:

/* Line 1464 of yacc.c  */
#line 2623 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2624 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2625 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2626 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2627 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2628 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2629 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 868:

/* Line 1464 of yacc.c  */
#line 2630 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 869:

/* Line 1464 of yacc.c  */
#line 2631 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2633 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 871:

/* Line 1464 of yacc.c  */
#line 2651 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2667 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 873:

/* Line 1464 of yacc.c  */
#line 2668 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2669 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2670 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2671 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2672 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2673 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2674 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2675 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 881:

/* Line 1464 of yacc.c  */
#line 2676 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2677 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 883:

/* Line 1464 of yacc.c  */
#line 2678 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 884:

/* Line 1464 of yacc.c  */
#line 2680 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2698 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2714 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 887:

/* Line 1464 of yacc.c  */
#line 2715 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 888:

/* Line 1464 of yacc.c  */
#line 2719 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 889:

/* Line 1464 of yacc.c  */
#line 2720 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2721 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 891:

/* Line 1464 of yacc.c  */
#line 2722 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 892:

/* Line 1464 of yacc.c  */
#line 2723 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2729 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   ;}
    break;

  case 895:

/* Line 1464 of yacc.c  */
#line 2735 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2738 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 897:

/* Line 1464 of yacc.c  */
#line 2747 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 898:

/* Line 1464 of yacc.c  */
#line 2756 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      ;}
    break;

  case 899:

/* Line 1464 of yacc.c  */
#line 2765 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      ;}
    break;

  case 900:

/* Line 1464 of yacc.c  */
#line 2773 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 901:

/* Line 1464 of yacc.c  */
#line 2774 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 902:

/* Line 1464 of yacc.c  */
#line 2775 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 903:

/* Line 1464 of yacc.c  */
#line 2776 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 904:

/* Line 1464 of yacc.c  */
#line 2780 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 905:

/* Line 1464 of yacc.c  */
#line 2781 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 2782 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 907:

/* Line 1464 of yacc.c  */
#line 2783 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 2784 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 2785 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 910:

/* Line 1464 of yacc.c  */
#line 2786 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 911:

/* Line 1464 of yacc.c  */
#line 2787 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 912:

/* Line 1464 of yacc.c  */
#line 2788 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 914:

/* Line 1464 of yacc.c  */
#line 2796 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 915:

/* Line 1464 of yacc.c  */
#line 2797 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 916:

/* Line 1464 of yacc.c  */
#line 2798 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 917:

/* Line 1464 of yacc.c  */
#line 2799 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 918:

/* Line 1464 of yacc.c  */
#line 2800 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 919:

/* Line 1464 of yacc.c  */
#line 2806 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 2815 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 2824 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 2833 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 926:

/* Line 1464 of yacc.c  */
#line 2856 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 927:

/* Line 1464 of yacc.c  */
#line 2857 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 928:

/* Line 1464 of yacc.c  */
#line 2858 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 929:

/* Line 1464 of yacc.c  */
#line 2859 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 930:

/* Line 1464 of yacc.c  */
#line 2860 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 2866 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 2875 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 2884 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 2893 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 937:

/* Line 1464 of yacc.c  */
#line 2956 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 938:

/* Line 1464 of yacc.c  */
#line 2957 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 939:

/* Line 1464 of yacc.c  */
#line 2958 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 940:

/* Line 1464 of yacc.c  */
#line 2960 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 2971 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 2972 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 2973 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 2978 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 945:

/* Line 1464 of yacc.c  */
#line 2979 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 2980 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 2981 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 2982 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 2986 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 2987 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 951:

/* Line 1464 of yacc.c  */
#line 2991 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 2992 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 953:

/* Line 1464 of yacc.c  */
#line 2993 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 2997 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 2998 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 956:

/* Line 1464 of yacc.c  */
#line 3002 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 958:

/* Line 1464 of yacc.c  */
#line 3004 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 3005 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 960:

/* Line 1464 of yacc.c  */
#line 3006 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 961:

/* Line 1464 of yacc.c  */
#line 3007 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 962:

/* Line 1464 of yacc.c  */
#line 3008 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 963:

/* Line 1464 of yacc.c  */
#line 3009 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 3010 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 965:

/* Line 1464 of yacc.c  */
#line 3011 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 966:

/* Line 1464 of yacc.c  */
#line 3012 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 967:

/* Line 1464 of yacc.c  */
#line 3013 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 968:

/* Line 1464 of yacc.c  */
#line 3014 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 969:

/* Line 1464 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 970:

/* Line 1464 of yacc.c  */
#line 3016 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 971:

/* Line 1464 of yacc.c  */
#line 3017 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 972:

/* Line 1464 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 973:

/* Line 1464 of yacc.c  */
#line 3022 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 974:

/* Line 1464 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 975:

/* Line 1464 of yacc.c  */
#line 3024 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 976:

/* Line 1464 of yacc.c  */
#line 3025 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 977:

/* Line 1464 of yacc.c  */
#line 3026 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 978:

/* Line 1464 of yacc.c  */
#line 3027 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 979:

/* Line 1464 of yacc.c  */
#line 3028 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 980:

/* Line 1464 of yacc.c  */
#line 3032 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 981:

/* Line 1464 of yacc.c  */
#line 3033 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 982:

/* Line 1464 of yacc.c  */
#line 3034 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 983:

/* Line 1464 of yacc.c  */
#line 3035 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 984:

/* Line 1464 of yacc.c  */
#line 3039 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 986:

/* Line 1464 of yacc.c  */
#line 3041 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 987:

/* Line 1464 of yacc.c  */
#line 3042 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 3043 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 989:

/* Line 1464 of yacc.c  */
#line 3047 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 991:

/* Line 1464 of yacc.c  */
#line 3049 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 992:

/* Line 1464 of yacc.c  */
#line 3050 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 993:

/* Line 1464 of yacc.c  */
#line 3051 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 995:

/* Line 1464 of yacc.c  */
#line 3057 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 996:

/* Line 1464 of yacc.c  */
#line 3059 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 997:

/* Line 1464 of yacc.c  */
#line 3061 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 998:

/* Line 1464 of yacc.c  */
#line 3063 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 1000:

/* Line 1464 of yacc.c  */
#line 3069 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1001:

/* Line 1464 of yacc.c  */
#line 3071 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1002:

/* Line 1464 of yacc.c  */
#line 3073 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 1004:

/* Line 1464 of yacc.c  */
#line 3078 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1005:

/* Line 1464 of yacc.c  */
#line 3079 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1006:

/* Line 1464 of yacc.c  */
#line 3080 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1008:

/* Line 1464 of yacc.c  */
#line 3085 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1009:

/* Line 1464 of yacc.c  */
#line 3086 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1010:

/* Line 1464 of yacc.c  */
#line 3087 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1012:

/* Line 1464 of yacc.c  */
#line 3092 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1013:

/* Line 1464 of yacc.c  */
#line 3093 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3094 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3099 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1017:

/* Line 1464 of yacc.c  */
#line 3100 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3101 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3106 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1021:

/* Line 1464 of yacc.c  */
#line 3107 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3108 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1023:

/* Line 1464 of yacc.c  */
#line 3112 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3113 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3115 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3130 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3131 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3132 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3134 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3147 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3162 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3164 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3168 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1034:

/* Line 1464 of yacc.c  */
#line 3169 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3173 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3174 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3175 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3176 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3179 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1040:

/* Line 1464 of yacc.c  */
#line 3180 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3184 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1042:

/* Line 1464 of yacc.c  */
#line 3185 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1043:

/* Line 1464 of yacc.c  */
#line 3186 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3190 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1045:

/* Line 1464 of yacc.c  */
#line 3194 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3198 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3199 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3200 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1049:

/* Line 1464 of yacc.c  */
#line 3201 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1050:

/* Line 1464 of yacc.c  */
#line 3203 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   ;}
    break;

  case 1051:

/* Line 1464 of yacc.c  */
#line 3211 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1052:

/* Line 1464 of yacc.c  */
#line 3220 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1053:

/* Line 1464 of yacc.c  */
#line 3221 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1054:

/* Line 1464 of yacc.c  */
#line 3222 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1055:

/* Line 1464 of yacc.c  */
#line 3223 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3227 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3228 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3232 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3233 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1060:

/* Line 1464 of yacc.c  */
#line 3238 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1061:

/* Line 1464 of yacc.c  */
#line 3239 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1062:

/* Line 1464 of yacc.c  */
#line 3240 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1063:

/* Line 1464 of yacc.c  */
#line 3241 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3242 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1065:

/* Line 1464 of yacc.c  */
#line 3244 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3262 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1067:

/* Line 1464 of yacc.c  */
#line 3263 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1068:

/* Line 1464 of yacc.c  */
#line 3267 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1069:

/* Line 1464 of yacc.c  */
#line 3268 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1070:

/* Line 1464 of yacc.c  */
#line 3269 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1071:

/* Line 1464 of yacc.c  */
#line 3270 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1072:

/* Line 1464 of yacc.c  */
#line 3271 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1073:

/* Line 1464 of yacc.c  */
#line 3272 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1074:

/* Line 1464 of yacc.c  */
#line 3274 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1075:

/* Line 1464 of yacc.c  */
#line 3275 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1076:

/* Line 1464 of yacc.c  */
#line 3276 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1077:

/* Line 1464 of yacc.c  */
#line 3277 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1078:

/* Line 1464 of yacc.c  */
#line 3281 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1079:

/* Line 1464 of yacc.c  */
#line 3282 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1080:

/* Line 1464 of yacc.c  */
#line 3283 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1081:

/* Line 1464 of yacc.c  */
#line 3284 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1082:

/* Line 1464 of yacc.c  */
#line 3285 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1083:

/* Line 1464 of yacc.c  */
#line 3287 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1084:

/* Line 1464 of yacc.c  */
#line 3288 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1085:

/* Line 1464 of yacc.c  */
#line 3289 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1087:

/* Line 1464 of yacc.c  */
#line 3294 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1088:

/* Line 1464 of yacc.c  */
#line 3295 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1089:

/* Line 1464 of yacc.c  */
#line 3296 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1090:

/* Line 1464 of yacc.c  */
#line 3297 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1091:

/* Line 1464 of yacc.c  */
#line 3298 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1093:

/* Line 1464 of yacc.c  */
#line 3303 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1096:

/* Line 1464 of yacc.c  */
#line 3310 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1098:

/* Line 1464 of yacc.c  */
#line 3312 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1099:

/* Line 1464 of yacc.c  */
#line 3313 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1100:

/* Line 1464 of yacc.c  */
#line 3314 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1108:

/* Line 1464 of yacc.c  */
#line 3325 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1109:

/* Line 1464 of yacc.c  */
#line 3326 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1110:

/* Line 1464 of yacc.c  */
#line 3327 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1111:

/* Line 1464 of yacc.c  */
#line 3328 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3330 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3331 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3335 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3336 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3340 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3341 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3346 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3347 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3348 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3349 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3351 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3352 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3353 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3355 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3356 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3357 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3358 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3360 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3361 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3362 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3366 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3367 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3368 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3369 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3370 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3372 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3373 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3374 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3375 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3376 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3380 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3381 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3382 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3384 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3385 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3388 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3389 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3390 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1154:

/* Line 1464 of yacc.c  */
#line 3391 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3392 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3396 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = publicAccess; ;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3397 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = privateAccess; ;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3398 "grammar.y"
    { (yyval.declMode) = structDeclMode = declMode = defaultAccess; ;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3402 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3403 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3407 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3408 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3409 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3410 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); structDeclMode = defaultDeclMode; ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3414 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3415 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3416 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3418 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3419 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3420 "grammar.y"
    { structDeclMode = declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3424 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3428 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3429 "grammar.y"
    { structDeclMode = defaultDeclMode;  ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3431 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3432 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3433 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); structDeclMode = defaultDeclMode; ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3437 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3438 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3439 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3440 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3444 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3445 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3449 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3450 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1185:

/* Line 1464 of yacc.c  */
#line 3451 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3455 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3456 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3457 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3458 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3459 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3460 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1192:

/* Line 1464 of yacc.c  */
#line 3461 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1193:

/* Line 1464 of yacc.c  */
#line 3465 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1194:

/* Line 1464 of yacc.c  */
#line 3466 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3467 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1196:

/* Line 1464 of yacc.c  */
#line 3468 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1197:

/* Line 1464 of yacc.c  */
#line 3472 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3473 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1199:

/* Line 1464 of yacc.c  */
#line 3474 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3475 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3479 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3483 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3488 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3490 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3493 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1206:

/* Line 1464 of yacc.c  */
#line 3498 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3499 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3500 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3504 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3505 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3506 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3507 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3508 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3509 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3513 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3518 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1218:

/* Line 1464 of yacc.c  */
#line 3519 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3520 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1221:

/* Line 1464 of yacc.c  */
#line 3523 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3525 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3526 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3527 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3528 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3529 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3531 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3532 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3536 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3537 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3538 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3539 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3543 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3544 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3545 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3546 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3548 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3549 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1239:

/* Line 1464 of yacc.c  */
#line 3550 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1240:

/* Line 1464 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3552 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3553 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3554 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3557 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1245:

/* Line 1464 of yacc.c  */
#line 3561 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1246:

/* Line 1464 of yacc.c  */
#line 3562 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3566 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3567 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3571 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3572 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3573 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3574 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3575 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3576 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3577 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3578 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3582 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3583 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3584 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3585 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3591 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3593 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3594 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3596 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3598 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3599 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1267:

/* Line 1464 of yacc.c  */
#line 3602 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1268:

/* Line 1464 of yacc.c  */
#line 3603 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1269:

/* Line 1464 of yacc.c  */
#line 3604 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1270:

/* Line 1464 of yacc.c  */
#line 3605 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1271:

/* Line 1464 of yacc.c  */
#line 3606 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1272:

/* Line 1464 of yacc.c  */
#line 3607 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1273:

/* Line 1464 of yacc.c  */
#line 3611 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1274:

/* Line 1464 of yacc.c  */
#line 3613 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1275:

/* Line 1464 of yacc.c  */
#line 3624 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1276:

/* Line 1464 of yacc.c  */
#line 3626 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1277:

/* Line 1464 of yacc.c  */
#line 3629 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1278:

/* Line 1464 of yacc.c  */
#line 3632 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1279:

/* Line 1464 of yacc.c  */
#line 3633 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1280:

/* Line 1464 of yacc.c  */
#line 3634 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1281:

/* Line 1464 of yacc.c  */
#line 3636 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1282:

/* Line 1464 of yacc.c  */
#line 3645 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1283:

/* Line 1464 of yacc.c  */
#line 3647 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1284:

/* Line 1464 of yacc.c  */
#line 3649 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1285:

/* Line 1464 of yacc.c  */
#line 3650 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1286:

/* Line 1464 of yacc.c  */
#line 3651 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1287:

/* Line 1464 of yacc.c  */
#line 3652 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1288:

/* Line 1464 of yacc.c  */
#line 3654 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      structDeclMode = declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1289:

/* Line 1464 of yacc.c  */
#line 3663 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1290:

/* Line 1464 of yacc.c  */
#line 3664 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1291:

/* Line 1464 of yacc.c  */
#line 3665 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1292:

/* Line 1464 of yacc.c  */
#line 3666 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1293:

/* Line 1464 of yacc.c  */
#line 3667 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1294:

/* Line 1464 of yacc.c  */
#line 3668 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1295:

/* Line 1464 of yacc.c  */
#line 3672 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1296:

/* Line 1464 of yacc.c  */
#line 3674 "grammar.y"
    {
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      structDeclMode = declMode = defaultDeclMode;
   ;}
    break;

  case 1297:

/* Line 1464 of yacc.c  */
#line 3681 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1298:

/* Line 1464 of yacc.c  */
#line 3683 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1299:

/* Line 1464 of yacc.c  */
#line 3684 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1300:

/* Line 1464 of yacc.c  */
#line 3687 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1301:

/* Line 1464 of yacc.c  */
#line 3688 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1302:

/* Line 1464 of yacc.c  */
#line 3692 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1303:

/* Line 1464 of yacc.c  */
#line 3693 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1304:

/* Line 1464 of yacc.c  */
#line 3694 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1307:

/* Line 1464 of yacc.c  */
#line 3700 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1308:

/* Line 1464 of yacc.c  */
#line 3701 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1309:

/* Line 1464 of yacc.c  */
#line 3703 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1310:

/* Line 1464 of yacc.c  */
#line 3705 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; structDeclMode = declMode = defaultDeclMode; ;}
    break;

  case 1313:

/* Line 1464 of yacc.c  */
#line 3711 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1314:

/* Line 1464 of yacc.c  */
#line 3715 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1315:

/* Line 1464 of yacc.c  */
#line 3716 "grammar.y"
    { Symbol symbol = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1316:

/* Line 1464 of yacc.c  */
#line 3717 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1317:

/* Line 1464 of yacc.c  */
#line 3721 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1318:

/* Line 1464 of yacc.c  */
#line 3725 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1319:

/* Line 1464 of yacc.c  */
#line 3726 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1320:

/* Line 1464 of yacc.c  */
#line 3727 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1321:

/* Line 1464 of yacc.c  */
#line 3731 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1322:

/* Line 1464 of yacc.c  */
#line 3732 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1323:

/* Line 1464 of yacc.c  */
#line 3736 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1324:

/* Line 1464 of yacc.c  */
#line 3737 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1325:

/* Line 1464 of yacc.c  */
#line 3741 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1326:

/* Line 1464 of yacc.c  */
#line 3742 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1327:

/* Line 1464 of yacc.c  */
#line 3743 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1328:

/* Line 1464 of yacc.c  */
#line 3744 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1329:

/* Line 1464 of yacc.c  */
#line 3748 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1330:

/* Line 1464 of yacc.c  */
#line 3752 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1331:

/* Line 1464 of yacc.c  */
#line 3756 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1332:

/* Line 1464 of yacc.c  */
#line 3760 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 22636 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3763 "grammar.y"


