/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING   "eC expects all declarations to precede statements in the block (C89 style)\n"

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 107 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     LONG = 294,
     SIGNED = 295,
     UNSIGNED = 296,
     FLOAT = 297,
     DOUBLE = 298,
     CONST = 299,
     VOLATILE = 300,
     VOID = 301,
     VALIST = 302,
     STRUCT = 303,
     UNION = 304,
     ENUM = 305,
     ELLIPSIS = 306,
     CASE = 307,
     DEFAULT = 308,
     IF = 309,
     SWITCH = 310,
     WHILE = 311,
     DO = 312,
     FOR = 313,
     GOTO = 314,
     CONTINUE = 315,
     BREAK = 316,
     RETURN = 317,
     IFX = 318,
     ELSE = 319,
     CLASS = 320,
     THISCLASS = 321,
     CLASS_NAME = 322,
     PROPERTY = 323,
     SETPROP = 324,
     GETPROP = 325,
     NEWOP = 326,
     RENEW = 327,
     DELETE = 328,
     EXT_DECL = 329,
     EXT_STORAGE = 330,
     IMPORT = 331,
     DEFINE = 332,
     VIRTUAL = 333,
     ATTRIB = 334,
     PUBLIC = 335,
     PRIVATE = 336,
     TYPED_OBJECT = 337,
     ANY_OBJECT = 338,
     _INCREF = 339,
     EXTENSION = 340,
     ASM = 341,
     TYPEOF = 342,
     WATCH = 343,
     STOPWATCHING = 344,
     FIREWATCHERS = 345,
     WATCHABLE = 346,
     CLASS_DESIGNER = 347,
     CLASS_NO_EXPANSION = 348,
     CLASS_FIXED = 349,
     ISPROPSET = 350,
     CLASS_DEFAULT_PROPERTY = 351,
     PROPERTY_CATEGORY = 352,
     CLASS_DATA = 353,
     CLASS_PROPERTY = 354,
     SUBCLASS = 355,
     NAMESPACE = 356,
     NEW0OP = 357,
     RENEW0 = 358,
     VAARG = 359,
     DBTABLE = 360,
     DBFIELD = 361,
     DBINDEX = 362,
     DATABASE_OPEN = 363,
     ALIGNOF = 364,
     ATTRIB_DEP = 365,
     __ATTRIB = 366
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 37 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;

   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 299 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 324 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  283
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   39112

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  137
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  260
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1322
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2198

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   366

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   131,     2,     2,   125,   133,   128,     2,
     115,   116,   112,   129,   120,   130,   123,   132,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   124,   118,
     113,   119,   114,   136,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   126,     2,   127,   134,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   122,   135,   121,   117,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    85,    88,
      90,    93,    95,    98,   101,   104,   107,   110,   113,   115,
     117,   121,   123,   127,   131,   133,   135,   139,   143,   145,
     149,   153,   157,   161,   163,   166,   169,   171,   173,   176,
     179,   182,   185,   187,   190,   193,   195,   197,   200,   203,
     205,   208,   211,   214,   217,   219,   222,   225,   229,   234,
     240,   245,   249,   254,   257,   261,   266,   272,   277,   281,
     286,   292,   298,   303,   306,   310,   314,   318,   322,   325,
     330,   334,   338,   341,   346,   350,   353,   357,   360,   364,
     367,   369,   372,   376,   380,   384,   387,   389,   393,   397,
     399,   403,   407,   410,   415,   421,   425,   430,   434,   436,
     440,   444,   448,   451,   455,   458,   463,   469,   473,   478,
     482,   484,   488,   492,   495,   497,   500,   503,   506,   508,
     511,   517,   525,   535,   542,   551,   556,   563,   565,   568,
     572,   577,   580,   583,   585,   587,   590,   593,   595,   597,
     599,   601,   609,   611,   614,   619,   621,   623,   626,   630,
     633,   636,   639,   643,   645,   648,   651,   654,   656,   658,
     660,   663,   666,   669,   673,   677,   679,   681,   684,   687,
     689,   692,   695,   698,   701,   703,   706,   708,   711,   714,
     719,   724,   731,   734,   739,   744,   751,   753,   755,   759,
     761,   766,   772,   774,   776,   778,   780,   784,   786,   788,
     790,   794,   798,   802,   804,   808,   810,   813,   816,   820,
     824,   830,   836,   843,   850,   853,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   900,   902,   904,
     908,   910,   913,   918,   920,   922,   927,   932,   938,   947,
     949,   951,   954,   961,   968,   974,   980,   987,   994,  1000,
    1006,  1014,  1022,  1029,  1036,  1044,  1052,  1059,  1066,  1071,
    1077,  1082,  1089,  1094,  1096,  1098,  1100,  1102,  1106,  1109,
    1111,  1114,  1117,  1120,  1122,  1127,  1132,  1136,  1141,  1146,
    1150,  1154,  1157,  1160,  1165,  1170,  1174,  1179,  1183,  1187,
    1190,  1193,  1195,  1200,  1205,  1209,  1214,  1219,  1223,  1227,
    1230,  1233,  1238,  1243,  1247,  1252,  1256,  1260,  1263,  1266,
    1268,  1270,  1274,  1278,  1280,  1282,  1286,  1290,  1293,  1296,
    1299,  1302,  1305,  1310,  1313,  1318,  1324,  1330,  1335,  1338,
    1343,  1345,  1347,  1349,  1351,  1353,  1355,  1357,  1359,  1361,
    1363,  1365,  1367,  1369,  1374,  1376,  1380,  1384,  1388,  1392,
    1396,  1400,  1402,  1406,  1410,  1414,  1418,  1420,  1424,  1428,
    1432,  1436,  1439,  1441,  1444,  1448,  1452,  1456,  1460,  1464,
    1468,  1472,  1474,  1478,  1482,  1486,  1490,  1494,  1498,  1502,
    1506,  1508,  1512,  1516,  1520,  1524,  1526,  1530,  1534,  1538,
    1542,  1544,  1548,  1552,  1556,  1560,  1562,  1566,  1570,  1572,
    1576,  1580,  1582,  1588,  1594,  1600,  1606,  1612,  1618,  1624,
    1630,  1636,  1642,  1648,  1654,  1660,  1666,  1672,  1678,  1680,
    1684,  1688,  1692,  1696,  1700,  1704,  1708,  1712,  1714,  1716,
    1718,  1720,  1722,  1724,  1726,  1728,  1730,  1732,  1734,  1736,
    1740,  1744,  1747,  1749,  1753,  1757,  1759,  1761,  1764,  1767,
    1771,  1775,  1779,  1783,  1787,  1791,  1795,  1797,  1800,  1803,
    1807,  1811,  1815,  1819,  1823,  1827,  1831,  1834,  1837,  1840,
    1843,  1847,  1850,  1856,  1863,  1870,  1874,  1877,  1883,  1885,
    1887,  1889,  1891,  1893,  1898,  1900,  1904,  1908,  1912,  1916,
    1920,  1924,  1926,  1930,  1934,  1938,  1942,  1944,  1948,  1952,
    1956,  1960,  1962,  1965,  1969,  1973,  1977,  1981,  1985,  1989,
    1993,  1995,  1999,  2003,  2007,  2011,  2015,  2019,  2023,  2027,
    2029,  2033,  2037,  2041,  2045,  2047,  2051,  2055,  2059,  2063,
    2065,  2069,  2073,  2077,  2081,  2083,  2087,  2091,  2093,  2097,
    2101,  2103,  2109,  2115,  2121,  2127,  2132,  2137,  2142,  2147,
    2153,  2159,  2165,  2171,  2176,  2181,  2186,  2191,  2197,  2203,
    2209,  2215,  2221,  2227,  2233,  2239,  2243,  2247,  2250,  2253,
    2255,  2259,  2263,  2267,  2271,  2273,  2276,  2280,  2284,  2287,
    2290,  2293,  2295,  2298,  2302,  2306,  2308,  2310,  2312,  2314,
    2316,  2318,  2320,  2322,  2324,  2326,  2328,  2330,  2332,  2336,
    2340,  2342,  2346,  2349,  2351,  2354,  2357,  2360,  2365,  2370,
    2374,  2378,  2383,  2389,  2394,  2401,  2408,  2413,  2419,  2424,
    2431,  2438,  2441,  2444,  2447,  2453,  2457,  2463,  2470,  2476,
    2484,  2492,  2501,  2510,  2518,  2526,  2530,  2534,  2538,  2543,
    2547,  2553,  2559,  2561,  2563,  2565,  2567,  2569,  2571,  2573,
    2575,  2577,  2580,  2582,  2584,  2586,  2588,  2590,  2592,  2594,
    2596,  2598,  2600,  2602,  2604,  2606,  2608,  2610,  2612,  2617,
    2622,  2627,  2629,  2631,  2633,  2635,  2637,  2639,  2641,  2643,
    2645,  2647,  2649,  2651,  2653,  2655,  2657,  2659,  2661,  2663,
    2665,  2670,  2675,  2680,  2682,  2684,  2687,  2690,  2694,  2700,
    2703,  2707,  2713,  2719,  2725,  2727,  2731,  2734,  2737,  2741,
    2745,  2748,  2752,  2756,  2761,  2765,  2769,  2773,  2777,  2781,
    2785,  2790,  2795,  2800,  2802,  2804,  2809,  2813,  2816,  2820,
    2824,  2828,  2832,  2836,  2840,  2844,  2848,  2852,  2856,  2860,
    2864,  2866,  2868,  2870,  2873,  2875,  2878,  2880,  2883,  2885,
    2888,  2890,  2893,  2895,  2898,  2900,  2903,  2905,  2908,  2910,
    2913,  2915,  2918,  2920,  2923,  2925,  2928,  2930,  2933,  2935,
    2938,  2940,  2943,  2945,  2948,  2950,  2953,  2955,  2958,  2960,
    2963,  2965,  2968,  2970,  2973,  2975,  2978,  2980,  2983,  2985,
    2988,  2990,  2993,  2995,  2998,  3000,  3002,  3004,  3007,  3009,
    3012,  3014,  3017,  3019,  3022,  3027,  3033,  3035,  3037,  3039,
    3042,  3044,  3047,  3049,  3052,  3054,  3057,  3062,  3068,  3070,
    3073,  3075,  3078,  3080,  3083,  3085,  3088,  3090,  3093,  3095,
    3098,  3103,  3109,  3111,  3114,  3116,  3119,  3121,  3124,  3126,
    3129,  3131,  3134,  3136,  3139,  3144,  3150,  3154,  3158,  3160,
    3164,  3168,  3172,  3176,  3178,  3180,  3182,  3187,  3192,  3197,
    3201,  3206,  3211,  3216,  3220,  3222,  3226,  3231,  3235,  3240,
    3245,  3250,  3255,  3259,  3262,  3266,  3270,  3274,  3278,  3281,
    3284,  3287,  3291,  3296,  3298,  3300,  3303,  3307,  3311,  3315,
    3319,  3322,  3325,  3328,  3332,  3337,  3339,  3341,  3343,  3345,
    3347,  3352,  3354,  3356,  3358,  3360,  3362,  3364,  3366,  3368,
    3370,  3375,  3377,  3380,  3384,  3391,  3397,  3401,  3406,  3409,
    3413,  3417,  3421,  3425,  3430,  3435,  3440,  3443,  3447,  3451,
    3455,  3460,  3465,  3469,  3474,  3477,  3481,  3485,  3489,  3494,
    3499,  3501,  3504,  3507,  3511,  3513,  3515,  3518,  3521,  3525,
    3527,  3529,  3532,  3535,  3539,  3541,  3544,  3548,  3551,  3554,
    3556,  3559,  3563,  3566,  3568,  3571,  3575,  3579,  3581,  3584,
    3588,  3592,  3594,  3597,  3601,  3605,  3607,  3610,  3614,  3618,
    3620,  3623,  3627,  3631,  3633,  3637,  3642,  3644,  3649,  3652,
    3658,  3662,  3664,  3666,  3668,  3670,  3672,  3674,  3678,  3682,
    3685,  3688,  3690,  3692,  3696,  3699,  3703,  3705,  3709,  3713,
    3717,  3721,  3725,  3727,  3730,  3734,  3738,  3740,  3743,  3745,
    3748,  3751,  3754,  3757,  3761,  3763,  3765,  3769,  3773,  3775,
    3779,  3784,  3788,  3793,  3797,  3801,  3806,  3810,  3815,  3817,
    3821,  3825,  3830,  3834,  3838,  3842,  3847,  3849,  3853,  3857,
    3861,  3865,  3869,  3871,  3875,  3878,  3880,  3882,  3884,  3886,
    3888,  3891,  3893,  3895,  3897,  3899,  3902,  3905,  3908,  3910,
    3912,  3914,  3916,  3918,  3921,  3923,  3925,  3930,  3932,  3936,
    3937,  3944,  3953,  3964,  3977,  3986,  3997,  4008,  4014,  4022,
    4032,  4044,  4052,  4062,  4072,  4076,  4081,  4086,  4090,  4094,
    4098,  4103,  4108,  4112,  4116,  4120,  4125,  4130,  4134,  4137,
    4141,  4144,  4148,  4153,  4158,  4162,  4166,  4168,  4170,  4172,
    4174,  4176,  4179,  4183,  4186,  4189,  4192,  4196,  4200,  4203,
    4209,  4216,  4219,  4222,  4225,  4228,  4231,  4234,  4236,  4239,
    4242,  4246,  4248,  4251,  4253,  4256,  4259,  4261,  4264,  4267,
    4270,  4273,  4276,  4279,  4281,  4283,  4286,  4289,  4291,  4293,
    4296,  4299,  4301,  4304,  4307,  4309,  4312,  4314,  4317,  4320,
    4326,  4332,  4340,  4348,  4354,  4360,  4364,  4367,  4373,  4378,
    4383,  4391,  4398,  4405,  4411,  4419,  4426,  4431,  4439,  4449,
    4453,  4458,  4463,  4469,  4475,  4482,  4490,  4497,  4504,  4510,
    4516,  4521,  4525,  4528,  4530,  4533,  4538,  4542,  4548,  4553,
    4557,  4560,  4563,  4566,  4570,  4574,  4578,  4582,  4585,  4588,
    4590,  4592,  4597,  4601,  4606,  4610,  4614,  4617,  4622,  4626,
    4631,  4635,  4639,  4642,  4644,  4647,  4649,  4651,  4654,  4656,
    4659,  4663,  4667,  4669,  4672,  4675,  4678,  4682,  4687,  4692,
    4695,  4698,  4701,  4704,  4706,  4709,  4711,  4714,  4716,  4719,
    4722,  4724,  4727,  4729,  4732,  4735,  4738,  4741,  4743,  4746,
    4749,  4753,  4755,  4757,  4758,  4765,  4772,  4778,  4783,  4785,
    4788,  4791,  4793,  4797,  4801,  4806,  4808,  4810,  4813,  4816,
    4823,  4830,  4837
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     386,     0,    -1,   209,   112,    -1,   209,   113,    -1,   142,
      -1,   209,   209,    -1,    28,    -1,    28,    -1,   140,    -1,
     140,   113,   203,   114,    -1,   140,   113,   203,    11,    -1,
     295,   330,    -1,   328,    -1,   295,   115,   116,    -1,   117,
     295,   115,   116,    -1,    78,   295,   330,    -1,    78,   328,
      -1,   295,   331,    -1,   329,    -1,    78,   295,   331,    -1,
      78,   329,    -1,   143,   370,    -1,   146,   370,    -1,   146,
     118,    -1,   144,   370,    -1,   145,   370,    -1,   143,   118,
      -1,   143,   320,   118,    -1,   143,   371,    -1,   147,    -1,
     146,   371,    -1,   148,    -1,   148,   118,    -1,   294,   330,
      -1,   294,   332,    -1,   294,   331,    -1,   151,   370,    -1,
     151,   371,    -1,   152,    -1,   151,    -1,   216,   119,   335,
      -1,   335,    -1,   216,   119,   336,    -1,   216,   119,     1,
      -1,   336,    -1,   155,    -1,   157,   120,   155,    -1,   158,
     120,   155,    -1,   156,    -1,   157,   120,   156,    -1,   158,
     120,   156,    -1,   157,   120,     1,    -1,   158,   120,     1,
      -1,   120,    -1,   157,   118,    -1,   158,   118,    -1,   159,
      -1,   153,    -1,   162,   159,    -1,   162,   153,    -1,   160,
     159,    -1,   160,   153,    -1,   118,    -1,   162,   118,    -1,
     160,   118,    -1,   160,    -1,   157,    -1,   160,   157,    -1,
     162,   157,    -1,   154,    -1,   161,   154,    -1,   162,   154,
      -1,   160,   154,    -1,   160,   158,    -1,   158,    -1,   157,
       1,    -1,   164,   121,    -1,   164,     1,   121,    -1,   294,
     209,   122,   162,    -1,   294,   209,   122,   161,     1,    -1,
     294,   209,   122,   161,    -1,   294,   209,   122,    -1,   294,
     209,   122,     1,    -1,   166,   121,    -1,   166,     1,   121,
      -1,   295,   209,   122,   162,    -1,   295,   209,   122,   161,
       1,    -1,   295,   209,   122,   161,    -1,   295,   209,   122,
      -1,   295,   209,   122,     1,    -1,   296,   209,   122,   161,
     121,    -1,   296,   209,   122,   162,   121,    -1,   296,   209,
     122,   121,    -1,   169,   121,    -1,   169,     1,   121,    -1,
     142,   122,   161,    -1,   209,   122,   161,    -1,   142,   122,
     162,    -1,   142,   122,    -1,   142,   122,   161,     1,    -1,
     142,   122,     1,    -1,   209,   122,   162,    -1,   209,   122,
      -1,   209,   122,   161,     1,    -1,   209,   122,     1,    -1,
     171,   121,    -1,   171,     1,   121,    -1,   122,   162,    -1,
     122,   161,     1,    -1,   122,     1,    -1,   122,    -1,   122,
     161,    -1,   216,   119,   335,    -1,   216,   119,   336,    -1,
     216,   119,     1,    -1,   216,     1,    -1,   172,    -1,   174,
     120,   172,    -1,   175,   120,   172,    -1,   173,    -1,   174,
     120,   173,    -1,   175,   120,   173,    -1,   174,     1,    -1,
      68,   300,   209,   122,    -1,    68,   300,   324,   209,   122,
      -1,    68,   300,   122,    -1,    68,   300,   324,   122,    -1,
      68,     1,   122,    -1,   176,    -1,   177,    69,   370,    -1,
     177,    70,   370,    -1,   177,    95,   370,    -1,   177,    91,
      -1,   177,    97,   211,    -1,   177,   121,    -1,    99,   300,
     209,   122,    -1,    99,   300,   324,   209,   122,    -1,    99,
     300,   122,    -1,    99,   300,   324,   122,    -1,    99,     1,
     122,    -1,   179,    -1,   180,    69,   370,    -1,   180,    70,
     370,    -1,   180,   121,    -1,   209,    -1,   182,   209,    -1,
     182,   370,    -1,    73,   370,    -1,   183,    -1,   184,   183,
      -1,    88,   115,   182,   116,   370,    -1,    88,   115,   237,
     116,   122,   184,   121,    -1,   237,   123,    88,   115,   237,
     116,   122,   184,   121,    -1,    89,   115,   237,   120,   182,
     116,    -1,   237,   123,    89,   115,   237,   120,   182,   116,
      -1,    89,   115,   237,   116,    -1,   237,   123,    89,   115,
     237,   116,    -1,    90,    -1,    90,   182,    -1,   216,   123,
      90,    -1,   237,   123,    90,   182,    -1,   190,   118,    -1,
     174,   118,    -1,   149,    -1,   178,    -1,   358,   149,    -1,
     358,   178,    -1,   181,    -1,    91,    -1,    93,    -1,    94,
      -1,    99,   115,   209,   116,   119,   335,   118,    -1,   118,
      -1,   358,   124,    -1,   358,   115,   209,   116,    -1,   150,
      -1,   295,    -1,   295,   282,    -1,   358,   295,   282,    -1,
     358,   295,    -1,   358,   168,    -1,   358,   165,    -1,    98,
     295,   282,    -1,   185,    -1,    92,   209,    -1,    92,   142,
      -1,    96,   209,    -1,   168,    -1,   165,    -1,   174,    -1,
     166,     1,    -1,   169,     1,    -1,   358,   150,    -1,   358,
     166,     1,    -1,   358,   169,     1,    -1,   175,    -1,   189,
      -1,   191,   189,    -1,   192,   189,    -1,   190,    -1,   191,
       1,    -1,   192,     1,    -1,   191,   190,    -1,   192,   190,
      -1,   295,    -1,   295,   324,    -1,   295,    -1,   295,   324,
      -1,    65,   209,    -1,    65,   209,   119,   194,    -1,    65,
     209,   124,   193,    -1,    65,   209,   124,   193,   119,   194,
      -1,    65,   141,    -1,    65,   141,   119,   194,    -1,    65,
     141,   124,   193,    -1,    65,   141,   124,   193,   119,   194,
      -1,   209,    -1,   209,    -1,   209,   119,   196,    -1,   227,
      -1,   295,   209,   119,   198,    -1,   295,   324,   209,   119,
     198,    -1,   195,    -1,   197,    -1,   199,    -1,   200,    -1,
     201,   120,   200,    -1,   198,    -1,   196,    -1,   194,    -1,
     209,   119,   198,    -1,   209,   119,   196,    -1,   209,   119,
     194,    -1,   202,    -1,   203,   120,   202,    -1,    65,    -1,
     204,   209,    -1,   204,   140,    -1,   209,   204,   209,    -1,
     209,   204,   140,    -1,   204,   209,   113,   201,   114,    -1,
     204,   140,   113,   201,   114,    -1,   209,   204,   209,   113,
     201,   114,    -1,   209,   204,   140,   113,   201,   114,    -1,
     208,   121,    -1,   207,   118,    -1,   205,   122,   121,    -1,
     207,   122,   121,    -1,   204,   209,   118,    -1,   204,   139,
     118,    -1,   205,   124,   299,    -1,   205,   122,   192,    -1,
     207,   122,   192,    -1,   205,   122,   191,    -1,   207,   122,
     191,    -1,   205,   122,     1,    -1,   207,   122,     1,    -1,
       3,    -1,   212,    -1,   115,   239,   116,    -1,   381,    -1,
     125,   381,    -1,   125,   381,   123,   381,    -1,   209,    -1,
     168,    -1,    85,   115,   370,   116,    -1,    85,   115,   239,
     116,    -1,    85,   115,   342,   116,   333,    -1,    85,   115,
     342,   116,   115,   342,   116,   333,    -1,     4,    -1,   211,
      -1,   115,   116,    -1,    71,   302,   325,   126,   261,   127,
      -1,    71,   302,   325,   126,   262,   127,    -1,    71,   302,
     126,   261,   127,    -1,    71,   302,   126,   262,   127,    -1,
     102,   302,   325,   126,   261,   127,    -1,   102,   302,   325,
     126,   262,   127,    -1,   102,   302,   126,   261,   127,    -1,
     102,   302,   126,   262,   127,    -1,    72,   261,   301,   325,
     126,   261,   127,    -1,    72,   261,   301,   325,   126,   262,
     127,    -1,    72,   261,   301,   126,   261,   127,    -1,    72,
     261,   301,   126,   262,   127,    -1,   103,   261,   301,   325,
     126,   261,   127,    -1,   103,   261,   301,   325,   126,   262,
     127,    -1,   103,   261,   301,   126,   261,   127,    -1,   103,
     261,   301,   126,   262,   127,    -1,    65,   115,   294,   116,
      -1,    65,   115,   294,   324,   116,    -1,    65,   115,   209,
     116,    -1,   104,   115,   237,   120,   342,   116,    -1,    98,
     115,   209,   116,    -1,   393,    -1,   394,    -1,   395,    -1,
     396,    -1,   126,   218,   127,    -1,   126,   127,    -1,   170,
      -1,   171,     1,    -1,   115,   239,    -1,   115,   259,    -1,
     210,    -1,   216,   126,   239,   127,    -1,   216,   126,   259,
     127,    -1,   216,   115,   116,    -1,   216,   115,   218,   116,
      -1,   216,   115,   219,   116,    -1,   216,   123,   209,    -1,
     216,     7,   209,    -1,   216,     8,    -1,   216,     9,    -1,
     241,   126,   239,   127,    -1,   241,   126,   259,   127,    -1,
     241,   115,   116,    -1,   241,   115,   218,   116,    -1,   241,
     123,   209,    -1,   241,     7,   209,    -1,   241,     8,    -1,
     241,     9,    -1,   212,    -1,   217,   126,   239,   127,    -1,
     217,   126,   259,   127,    -1,   217,   115,   116,    -1,   217,
     115,   218,   116,    -1,   217,   115,   219,   116,    -1,   217,
     123,   209,    -1,   217,     7,   209,    -1,   217,     8,    -1,
     217,     9,    -1,   242,   126,   239,   127,    -1,   242,   126,
     259,   127,    -1,   242,   115,   116,    -1,   242,   115,   218,
     116,    -1,   242,   123,   209,    -1,   242,     7,   209,    -1,
     242,     8,    -1,   242,     9,    -1,   237,    -1,   213,    -1,
     218,   120,   237,    -1,   218,   120,   213,    -1,   258,    -1,
     214,    -1,   218,   120,   258,    -1,   218,   120,   214,    -1,
     218,   120,    -1,     8,   221,    -1,     9,   221,    -1,   223,
     224,    -1,   223,   213,    -1,     6,   115,   221,   116,    -1,
       6,   222,    -1,     6,   115,   343,   116,    -1,     6,   115,
      65,   139,   116,    -1,     6,   115,    65,   138,   116,    -1,
     109,   115,   221,   116,    -1,   109,   222,    -1,   109,   115,
     343,   116,    -1,   220,    -1,   216,    -1,   220,    -1,   217,
      -1,   128,    -1,   112,    -1,   129,    -1,   130,    -1,   117,
      -1,   131,    -1,    73,    -1,    84,    -1,   221,    -1,   115,
     342,   116,   224,    -1,   224,    -1,   225,   112,   224,    -1,
     225,   132,   224,    -1,   225,   133,   224,    -1,   247,   112,
     224,    -1,   247,   132,   224,    -1,   247,   133,   224,    -1,
     225,    -1,   226,   129,   225,    -1,   226,   130,   225,    -1,
     248,   129,   225,    -1,   248,   130,   225,    -1,   226,    -1,
     227,    10,   226,    -1,   227,    11,   226,    -1,   249,    10,
     226,    -1,   249,    11,   226,    -1,   229,   113,    -1,   227,
      -1,   228,   227,    -1,   229,   114,   227,    -1,   229,    12,
     227,    -1,   229,    13,   227,    -1,   250,   113,   227,    -1,
     250,   114,   227,    -1,   250,    12,   227,    -1,   250,    13,
     227,    -1,   229,    -1,   230,    14,   229,    -1,   230,    15,
     229,    -1,   251,    14,   229,    -1,   251,    15,   229,    -1,
     230,    14,   213,    -1,   230,    15,   213,    -1,   251,    14,
     213,    -1,   251,    15,   213,    -1,   230,    -1,   231,   128,
     230,    -1,   252,   128,   230,    -1,   231,   128,   213,    -1,
     252,   128,   213,    -1,   231,    -1,   232,   134,   231,    -1,
     253,   134,   231,    -1,   232,   134,   213,    -1,   253,   134,
     213,    -1,   232,    -1,   233,   135,   232,    -1,   254,   135,
     232,    -1,   233,   135,   213,    -1,   254,   135,   213,    -1,
     233,    -1,   234,    16,   233,    -1,   255,    16,   233,    -1,
     234,    -1,   235,    17,   234,    -1,   256,    17,   234,    -1,
     235,    -1,   235,   136,   239,   124,   236,    -1,   235,   136,
     259,   124,   236,    -1,   256,   136,   239,   124,   236,    -1,
     256,   136,   259,   124,   236,    -1,   235,   136,   240,   124,
     236,    -1,   235,   136,   260,   124,   236,    -1,   256,   136,
     240,   124,   236,    -1,   256,   136,   260,   124,   236,    -1,
     235,   136,   239,   124,   213,    -1,   235,   136,   259,   124,
     213,    -1,   256,   136,   239,   124,   213,    -1,   256,   136,
     259,   124,   213,    -1,   235,   136,   240,   124,   213,    -1,
     235,   136,   260,   124,   213,    -1,   256,   136,   240,   124,
     213,    -1,   256,   136,   260,   124,   213,    -1,   236,    -1,
     221,   238,   237,    -1,   244,   238,   237,    -1,   236,   238,
     237,    -1,   257,   238,   237,    -1,   221,   238,   213,    -1,
     244,   238,   213,    -1,   236,   238,   213,    -1,   257,   238,
     213,    -1,   119,    -1,    18,    -1,    19,    -1,    20,    -1,
      21,    -1,    22,    -1,    23,    -1,    24,    -1,    25,    -1,
      26,    -1,    27,    -1,   237,    -1,   239,   120,   237,    -1,
     259,   120,   237,    -1,   259,   116,    -1,   213,    -1,   239,
     120,   213,    -1,   259,   120,   213,    -1,   215,    -1,     1,
      -1,   216,     1,    -1,   169,     1,    -1,   216,     7,     1,
      -1,   241,     7,     1,    -1,   216,   115,   218,    -1,   216,
     115,   219,    -1,   216,   123,     1,    -1,   241,   115,   219,
      -1,   241,   123,     1,    -1,     1,    -1,   217,     1,    -1,
     169,     1,    -1,   217,     7,     1,    -1,   242,     7,     1,
      -1,   217,   115,   218,    -1,   217,   115,   219,    -1,   217,
     123,     1,    -1,   242,   115,   219,    -1,   242,   123,     1,
      -1,     8,   244,    -1,     9,   244,    -1,   223,   246,    -1,
     223,   214,    -1,     6,   115,   244,    -1,     6,   245,    -1,
       6,   115,   343,   116,     1,    -1,     6,   115,    65,   139,
     116,     1,    -1,     6,   115,    65,   138,   116,     1,    -1,
     109,   115,   244,    -1,   109,   245,    -1,   109,   115,   343,
     116,     1,    -1,   243,    -1,   241,    -1,   243,    -1,   242,
      -1,   244,    -1,   115,   342,   116,   246,    -1,   246,    -1,
     225,   112,   246,    -1,   225,   132,   246,    -1,   225,   133,
     246,    -1,   247,   112,   246,    -1,   247,   132,   246,    -1,
     247,   133,   246,    -1,   247,    -1,   226,   129,   247,    -1,
     226,   130,   247,    -1,   248,   129,   247,    -1,   248,   130,
     247,    -1,   248,    -1,   227,    10,   248,    -1,   227,    11,
     248,    -1,   249,    10,   248,    -1,   249,    11,   248,    -1,
     249,    -1,   228,   249,    -1,   229,   114,   249,    -1,   229,
      12,   249,    -1,   229,    13,   249,    -1,   250,   113,   249,
      -1,   250,   114,   249,    -1,   250,    12,   249,    -1,   250,
      13,   249,    -1,   250,    -1,   230,    14,   250,    -1,   230,
      15,   250,    -1,   251,    14,   250,    -1,   251,    15,   250,
      -1,   230,    14,   214,    -1,   230,    15,   214,    -1,   251,
      14,   214,    -1,   251,    15,   214,    -1,   251,    -1,   231,
     128,   251,    -1,   252,   128,   251,    -1,   231,   128,   214,
      -1,   252,   128,   214,    -1,   252,    -1,   232,   134,   252,
      -1,   253,   134,   252,    -1,   232,   134,   214,    -1,   253,
     134,   214,    -1,   253,    -1,   233,   135,   253,    -1,   254,
     135,   253,    -1,   233,   135,   214,    -1,   254,   135,   214,
      -1,   254,    -1,   234,    16,   254,    -1,   255,    16,   254,
      -1,   255,    -1,   235,    17,   255,    -1,   256,    17,   255,
      -1,   256,    -1,   235,   136,   239,   124,   256,    -1,   235,
     136,   259,   124,   256,    -1,   256,   136,   239,   124,   256,
      -1,   256,   136,   259,   124,   256,    -1,   235,   136,   239,
     124,    -1,   235,   136,   259,   124,    -1,   256,   136,   239,
     124,    -1,   256,   136,   259,   124,    -1,   235,   136,   240,
     124,   256,    -1,   235,   136,   260,   124,   256,    -1,   256,
     136,   240,   124,   256,    -1,   256,   136,   260,   124,   256,
      -1,   235,   136,   240,   124,    -1,   235,   136,   260,   124,
      -1,   256,   136,   240,   124,    -1,   256,   136,   260,   124,
      -1,   235,   136,   239,   124,   214,    -1,   235,   136,   259,
     124,   214,    -1,   256,   136,   239,   124,   214,    -1,   256,
     136,   259,   124,   214,    -1,   235,   136,   240,   124,   214,
      -1,   235,   136,   260,   124,   214,    -1,   256,   136,   240,
     124,   214,    -1,   256,   136,   260,   124,   214,    -1,   235,
     136,   124,    -1,   256,   136,   124,    -1,   235,   136,    -1,
     256,   136,    -1,   257,    -1,   221,   238,   258,    -1,   244,
     238,   258,    -1,   221,   238,   214,    -1,   244,   238,   214,
      -1,   258,    -1,   237,     1,    -1,   239,   120,   258,    -1,
     259,   120,   258,    -1,   239,   239,    -1,   259,   239,    -1,
     239,   259,    -1,   214,    -1,   213,     1,    -1,   239,   120,
     214,    -1,   259,   120,   214,    -1,   236,    -1,   257,    -1,
      29,    -1,    30,    -1,    31,    -1,    32,    -1,    33,    -1,
      29,    -1,    30,    -1,    31,    -1,    32,    -1,    33,    -1,
     209,    -1,   209,   119,   261,    -1,   209,   119,   262,    -1,
     265,    -1,   266,   120,   265,    -1,   266,   120,    -1,    50,
      -1,   267,   209,    -1,   267,   142,    -1,   270,   121,    -1,
     267,   209,   122,   121,    -1,   267,   142,   122,   121,    -1,
     267,   122,   266,    -1,   267,   122,     1,    -1,   267,   209,
     122,   266,    -1,   267,   209,   122,   266,     1,    -1,   267,
     209,   122,     1,    -1,   267,   209,   122,   266,   118,   191,
      -1,   267,   209,   122,   266,   118,   192,    -1,   267,   142,
     122,   266,    -1,   267,   142,   122,   266,     1,    -1,   267,
     142,   122,     1,    -1,   267,   142,   122,   266,   118,   191,
      -1,   267,   142,   122,   266,   118,   192,    -1,   267,   209,
      -1,   267,   142,    -1,   273,   121,    -1,   271,   124,   299,
     122,   121,    -1,   271,   122,   121,    -1,   271,   124,   299,
     122,   266,    -1,   271,   124,   299,   122,   266,     1,    -1,
     271,   124,   299,   122,     1,    -1,   271,   124,   299,   122,
     266,   118,   191,    -1,   271,   124,   299,   122,   266,   118,
     192,    -1,   271,   124,   299,   122,   266,     1,   118,   191,
      -1,   271,   124,   299,   122,   266,     1,   118,   192,    -1,
     271,   124,   299,   122,     1,   118,   191,    -1,   271,   124,
     299,   122,     1,   118,   192,    -1,   267,   122,   266,    -1,
     267,   122,     1,    -1,   271,   122,   266,    -1,   271,   122,
     266,     1,    -1,   271,   122,     1,    -1,   271,   122,   266,
     118,   191,    -1,   271,   122,   266,   118,   192,    -1,   272,
      -1,   289,    -1,   273,    -1,   290,    -1,   315,    -1,    44,
      -1,    45,    -1,   276,    -1,   277,    -1,   278,   277,    -1,
      46,    -1,    34,    -1,    35,    -1,    36,    -1,    37,    -1,
      38,    -1,    47,    -1,    39,    -1,    42,    -1,    43,    -1,
      40,    -1,    41,    -1,    85,    -1,   286,    -1,   268,    -1,
     139,    -1,    87,   115,   237,   116,    -1,   100,   115,   139,
     116,    -1,   100,   115,   209,   116,    -1,    66,    -1,    82,
      -1,    83,    -1,    46,    -1,    34,    -1,    35,    -1,    36,
      -1,    37,    -1,    38,    -1,    47,    -1,    39,    -1,    42,
      -1,    43,    -1,    40,    -1,    41,    -1,    85,    -1,   286,
      -1,   268,    -1,   142,    -1,    87,   115,   237,   116,    -1,
     100,   115,   139,   116,    -1,   100,   115,   209,   116,    -1,
      66,    -1,   332,    -1,   332,   320,    -1,   124,   261,    -1,
     332,   124,   261,    -1,   332,   124,   261,   124,   261,    -1,
     124,   262,    -1,   332,   124,   262,    -1,   332,   124,   261,
     124,   262,    -1,   332,   124,   262,   124,   262,    -1,   332,
     124,   262,   124,   261,    -1,   281,    -1,   282,   120,   281,
      -1,   291,   209,    -1,   291,   140,    -1,   291,   315,   209,
      -1,   291,   315,   140,    -1,   285,   121,    -1,   283,   122,
     121,    -1,   291,   122,   121,    -1,   291,   315,   122,   121,
      -1,   283,   122,   191,    -1,   283,   122,   192,    -1,   283,
     122,     1,    -1,   291,   122,   191,    -1,   291,   122,   192,
      -1,   291,   122,     1,    -1,   291,   315,   122,   191,    -1,
     291,   315,   122,   192,    -1,   291,   315,   122,     1,    -1,
     283,    -1,   283,    -1,   283,   113,   201,   114,    -1,   287,
     124,   299,    -1,   290,   121,    -1,   288,   122,   121,    -1,
     287,   122,   121,    -1,   291,   122,   121,    -1,   288,   122,
     191,    -1,   288,   122,   192,    -1,   288,   122,     1,    -1,
     287,   122,   191,    -1,   287,   122,   192,    -1,   287,   122,
       1,    -1,   291,   122,   191,    -1,   291,   122,   192,    -1,
     291,   122,     1,    -1,    48,    -1,    49,    -1,   277,    -1,
     292,   277,    -1,   279,    -1,   292,   279,    -1,   269,    -1,
     292,   269,    -1,   284,    -1,   292,   284,    -1,   277,    -1,
     293,   277,    -1,   279,    -1,   293,   279,    -1,   138,    -1,
     293,   138,    -1,   269,    -1,   293,   269,    -1,   284,    -1,
     293,   284,    -1,   263,    -1,   294,   263,    -1,   277,    -1,
     294,   277,    -1,   280,    -1,   294,   280,    -1,   269,    -1,
     294,   269,    -1,   284,    -1,   294,   284,    -1,   263,    -1,
     295,   263,    -1,   277,    -1,   295,   277,    -1,   279,    -1,
     295,   279,    -1,   138,    -1,   295,   138,    -1,   284,    -1,
     295,   284,    -1,   269,    -1,   295,   269,    -1,   264,    -1,
     296,   264,    -1,   277,    -1,   296,   277,    -1,   279,    -1,
     296,   279,    -1,   138,    -1,   296,   138,    -1,   274,    -1,
     296,   274,    -1,   275,    -1,   296,   275,    -1,    81,    -1,
      80,    -1,   263,    -1,   298,   263,    -1,   277,    -1,   298,
     277,    -1,   280,    -1,   298,   280,    -1,   209,    -1,   298,
     209,    -1,   209,   113,   203,   114,    -1,   298,   209,   113,
     203,   114,    -1,   298,    -1,   291,    -1,   263,    -1,   300,
     263,    -1,   277,    -1,   300,   277,    -1,   280,    -1,   300,
     280,    -1,   209,    -1,   300,   209,    -1,   209,   113,   203,
     114,    -1,   300,   209,   113,   203,   114,    -1,   263,    -1,
     301,   263,    -1,   277,    -1,   301,   277,    -1,   280,    -1,
     301,   280,    -1,   284,    -1,   301,   284,    -1,   269,    -1,
     301,   269,    -1,   209,    -1,   301,   209,    -1,   209,   113,
     203,   114,    -1,   301,   209,   113,   203,   114,    -1,   263,
      -1,   302,   263,    -1,   277,    -1,   302,   277,    -1,   280,
      -1,   302,   280,    -1,   284,    -1,   302,   284,    -1,   269,
      -1,   302,   269,    -1,   209,    -1,   302,   209,    -1,   209,
     113,   203,   114,    -1,   302,   209,   113,   203,   114,    -1,
     304,   120,     1,    -1,   303,   120,     1,    -1,   209,    -1,
     304,   120,   209,    -1,   303,   120,   209,    -1,   346,   120,
     209,    -1,   347,   120,   209,    -1,   306,    -1,   140,    -1,
      37,    -1,   140,   126,   261,   127,    -1,   140,   126,   262,
     127,    -1,   140,   126,   139,   127,    -1,   140,   126,   127,
      -1,   305,   126,   261,   127,    -1,   305,   126,   262,   127,
      -1,   305,   126,   139,   127,    -1,   305,   126,   127,    -1,
     209,    -1,   115,   326,   116,    -1,   115,   315,   326,   116,
      -1,   115,   327,   116,    -1,   115,   315,   327,   116,    -1,
     306,   126,   261,   127,    -1,   306,   126,   262,   127,    -1,
     306,   126,   139,   127,    -1,   306,   126,   127,    -1,   306,
     115,    -1,   307,   348,   116,    -1,   307,   349,   116,    -1,
     307,   304,   116,    -1,   307,   303,   116,    -1,   307,   116,
      -1,   307,   303,    -1,   307,     1,    -1,   307,   346,   115,
      -1,   307,   295,   209,   115,    -1,   308,    -1,   306,    -1,
     305,   115,    -1,   311,   348,   116,    -1,   311,   349,   116,
      -1,   311,   304,   116,    -1,   311,   303,   116,    -1,   311,
     116,    -1,   311,   303,    -1,   311,     1,    -1,   311,   346,
     115,    -1,   311,   295,   209,   115,    -1,   312,    -1,   305,
      -1,    74,    -1,    75,    -1,   320,    -1,    86,   115,   381,
     116,    -1,    79,    -1,   110,    -1,   111,    -1,     3,    -1,
      28,    -1,    75,    -1,    74,    -1,    44,    -1,   317,    -1,
     317,   115,   239,   116,    -1,   318,    -1,   319,   318,    -1,
     319,   120,   318,    -1,   316,   115,   115,   319,   116,   116,
      -1,   316,   115,   115,   116,   116,    -1,   115,   324,   116,
      -1,   115,   315,   324,   116,    -1,   126,   127,    -1,   126,
     261,   127,    -1,   126,   262,   127,    -1,   126,   139,   127,
      -1,   321,   126,   127,    -1,   321,   126,   261,   127,    -1,
     321,   126,   139,   127,    -1,   321,   126,   262,   127,    -1,
     115,   116,    -1,   115,   348,   116,    -1,   115,   349,   116,
      -1,   321,   115,   116,    -1,   321,   115,   348,   116,    -1,
     321,   115,   349,   116,    -1,   115,   325,   116,    -1,   115,
     315,   325,   116,    -1,   115,   116,    -1,   115,   348,   116,
      -1,   115,   349,   116,    -1,   322,   115,   116,    -1,   322,
     115,   348,   116,    -1,   322,   115,   349,   116,    -1,   112,
      -1,   112,   278,    -1,   112,   323,    -1,   112,   278,   323,
      -1,   323,    -1,   321,    -1,   323,   321,    -1,   315,   323,
      -1,   315,   323,   321,    -1,   323,    -1,   322,    -1,   323,
     322,    -1,   315,   323,    -1,   315,   323,   322,    -1,   310,
      -1,   323,   310,    -1,   315,   323,   310,    -1,   326,   315,
      -1,   332,   315,    -1,   314,    -1,   323,   314,    -1,   315,
     323,   314,    -1,   327,   315,    -1,   308,    -1,   323,   308,
      -1,   315,   323,   308,    -1,   323,   315,   308,    -1,   309,
      -1,   323,   309,    -1,   315,   323,   309,    -1,   323,   315,
     309,    -1,   312,    -1,   323,   312,    -1,   315,   323,   312,
      -1,   323,   315,   312,    -1,   313,    -1,   323,   313,    -1,
     315,   323,   313,    -1,   323,   315,   313,    -1,   305,    -1,
     323,   305,    -1,   315,   323,   305,    -1,   323,   315,   305,
      -1,   237,    -1,   122,   337,   121,    -1,   122,   337,   120,
     121,    -1,   258,    -1,   122,   337,   121,     1,    -1,   122,
     337,    -1,   122,   337,   120,   121,     1,    -1,   122,   337,
     120,    -1,   236,    -1,   213,    -1,   257,    -1,   214,    -1,
     333,    -1,   334,    -1,   337,   120,   333,    -1,   337,   120,
     334,    -1,   337,   333,    -1,   337,   334,    -1,   326,    -1,
     327,    -1,   326,   119,   333,    -1,   326,     1,    -1,   326,
     119,   334,    -1,   338,    -1,   340,   120,   338,    -1,    37,
     120,   338,    -1,    38,   120,   338,    -1,   140,   120,   338,
      -1,   341,   120,   338,    -1,   339,    -1,   338,     1,    -1,
     340,   120,   339,    -1,   341,   120,   339,    -1,   292,    -1,
     292,   324,    -1,   293,    -1,   293,   324,    -1,   295,   327,
      -1,   295,   324,    -1,   295,   128,    -1,   295,   128,   327,
      -1,   295,    -1,    65,    -1,   295,   327,     1,    -1,   295,
     324,     1,    -1,   344,    -1,   346,   120,   344,    -1,   346,
       1,   120,   344,    -1,   347,   120,   344,    -1,   347,     1,
     120,   344,    -1,     1,   120,   344,    -1,   304,   120,   344,
      -1,   304,     1,   120,   344,    -1,   303,   120,   344,    -1,
     303,     1,   120,   344,    -1,   345,    -1,   346,   120,   345,
      -1,   347,   120,   345,    -1,   347,     1,   120,   345,    -1,
       1,   120,   345,    -1,   304,   120,   345,    -1,   303,   120,
     345,    -1,   303,     1,   120,   345,    -1,   346,    -1,   346,
     120,    51,    -1,   347,   120,    51,    -1,   304,   120,    51,
      -1,   303,   120,    51,    -1,     1,   120,    51,    -1,   347,
      -1,   346,   120,     1,    -1,   347,     1,    -1,   355,    -1,
     320,    -1,   370,    -1,   118,    -1,   124,    -1,   239,   118,
      -1,   373,    -1,   375,    -1,   377,    -1,   354,    -1,   188,
     118,    -1,   187,   118,    -1,   186,   118,    -1,   356,    -1,
     376,    -1,   371,    -1,   374,    -1,   378,    -1,   377,     1,
      -1,   259,    -1,   381,    -1,   381,   115,   237,   116,    -1,
     352,    -1,   353,   120,   352,    -1,    -1,    86,   277,   115,
     381,   116,   118,    -1,    86,   277,   115,   381,   124,   353,
     116,   118,    -1,    86,   277,   115,   381,   124,   353,   124,
     353,   116,   118,    -1,    86,   277,   115,   381,   124,   353,
     124,   353,   124,   353,   116,   118,    -1,    86,   277,   115,
     381,     3,   353,   116,   118,    -1,    86,   277,   115,   381,
       3,   353,   124,   353,   116,   118,    -1,    86,   277,   115,
     381,   124,   353,     3,   353,   116,   118,    -1,    86,   115,
     381,   116,   118,    -1,    86,   115,   381,   124,   353,   116,
     118,    -1,    86,   115,   381,   124,   353,   124,   353,   116,
     118,    -1,    86,   115,   381,   124,   353,   124,   353,   124,
     353,   116,   118,    -1,    86,   115,   381,     3,   353,   116,
     118,    -1,    86,   115,   381,     3,   353,   124,   353,   116,
     118,    -1,    86,   115,   381,   124,   353,     3,   353,   116,
     118,    -1,   209,   124,   350,    -1,    52,   261,   124,   350,
      -1,    52,   262,   124,   350,    -1,    52,   124,   350,    -1,
      53,   124,   350,    -1,   209,   124,   359,    -1,    52,   261,
     124,   359,    -1,    52,   262,   124,   359,    -1,    52,   124,
     359,    -1,    53,   124,   359,    -1,   209,   124,   351,    -1,
      52,   261,   124,   351,    -1,    52,   262,   124,   351,    -1,
      52,   124,   351,    -1,    52,   124,    -1,    53,   124,   351,
      -1,    53,   124,    -1,   209,   124,   362,    -1,    52,   261,
     124,   362,    -1,    52,   262,   124,   362,    -1,    52,   124,
     362,    -1,    53,   124,   362,    -1,    80,    -1,    81,    -1,
      53,    -1,    80,    -1,    81,    -1,   294,   118,    -1,   294,
     340,   118,    -1,   163,   118,    -1,   362,   118,    -1,   296,
     118,    -1,   296,   340,   118,    -1,   297,   340,   118,    -1,
     167,   118,    -1,    77,   209,   119,   236,   118,    -1,    31,
      77,   209,   119,   236,   118,    -1,   296,     1,    -1,   294,
       1,    -1,   362,     1,    -1,   164,     1,    -1,   163,     1,
      -1,   294,   341,    -1,   359,    -1,   363,   359,    -1,   364,
     359,    -1,   363,     1,   118,    -1,   362,    -1,   363,   362,
      -1,   350,    -1,   365,   350,    -1,   366,   350,    -1,   351,
      -1,   365,   351,    -1,   366,   351,    -1,   365,   359,    -1,
     366,   359,    -1,   365,   362,    -1,   366,   362,    -1,   365,
      -1,   363,    -1,   363,   365,    -1,   364,   365,    -1,   366,
      -1,   364,    -1,   363,   366,    -1,   364,   366,    -1,   122,
      -1,   371,   121,    -1,   369,   368,    -1,   369,    -1,   369,
     367,    -1,   118,    -1,   239,   118,    -1,   259,   118,    -1,
      54,   115,   239,   116,   350,    -1,    54,   115,   259,   116,
     350,    -1,    54,   115,   239,   116,   350,    64,   350,    -1,
      54,   115,   259,   116,   350,    64,   350,    -1,    55,   115,
     239,   116,   350,    -1,    55,   115,   259,   116,   350,    -1,
      54,   115,   259,    -1,   373,     1,    -1,    56,   115,   239,
     116,   350,    -1,    56,   115,   259,   350,    -1,    56,   115,
     116,   350,    -1,    57,   350,    56,   115,   239,   116,   118,
      -1,    57,   350,    56,   115,   259,   118,    -1,    58,   115,
     372,   372,   116,   350,    -1,    58,   115,   372,   116,   350,
      -1,    58,   115,   372,   372,   239,   116,   350,    -1,    58,
     115,   372,   372,   259,   350,    -1,    58,   115,   116,   350,
      -1,    58,   115,   209,   124,   239,   116,   350,    -1,    58,
     115,   209,   124,   239,   118,   239,   116,   350,    -1,    58,
     115,     1,    -1,    58,   115,   259,     1,    -1,    58,   115,
     372,     1,    -1,    58,   115,   372,   259,     1,    -1,    58,
     115,   372,   372,   259,    -1,    58,   115,   372,   372,   116,
     351,    -1,    58,   115,   372,   372,   239,   116,   351,    -1,
      58,   115,   372,   372,   259,   351,    -1,    57,   350,    56,
     115,   239,   116,    -1,    57,   350,    56,   115,   239,    -1,
      57,   350,    56,   115,   259,    -1,    57,   350,    56,   115,
      -1,    57,   350,    56,    -1,    57,   350,    -1,    57,    -1,
      56,     1,    -1,    56,   115,   116,     1,    -1,    56,   115,
     259,    -1,    56,   115,   239,   116,   351,    -1,    56,   115,
     259,   351,    -1,    59,   209,   118,    -1,    60,   118,    -1,
      61,   118,    -1,    62,   118,    -1,    62,   239,   118,    -1,
      62,   259,   118,    -1,    62,   213,   118,    -1,    62,   214,
     118,    -1,    62,   259,    -1,    62,   214,    -1,    62,    -1,
      59,    -1,   296,   328,   363,   370,    -1,   296,   328,   370,
      -1,   296,   330,   363,   370,    -1,   296,   330,   370,    -1,
     328,   363,   370,    -1,   328,   370,    -1,   296,   328,   363,
     371,    -1,   296,   328,   371,    -1,   296,   330,   363,   371,
      -1,   296,   330,   371,    -1,   328,   363,   371,    -1,   328,
     371,    -1,     5,    -1,   381,     5,    -1,   379,    -1,   206,
      -1,   296,   206,    -1,   360,    -1,    76,   381,    -1,    76,
      31,   381,    -1,    76,   209,   381,    -1,   118,    -1,   357,
     379,    -1,   357,   206,    -1,   357,   360,    -1,   357,    76,
     381,    -1,   357,    76,    31,   381,    -1,   357,    76,   209,
     381,    -1,   357,   124,    -1,    31,   124,    -1,   101,   209,
      -1,   101,   142,    -1,   387,    -1,   357,   387,    -1,   208,
      -1,   296,   208,    -1,   380,    -1,   357,   208,    -1,   357,
     380,    -1,   361,    -1,   357,   361,    -1,   383,    -1,   385,
     383,    -1,   384,   383,    -1,   385,     1,    -1,   384,     1,
      -1,   382,    -1,   385,   382,    -1,   384,   206,    -1,   384,
     357,   206,    -1,   385,    -1,   384,    -1,    -1,   105,   381,
     209,   122,   392,   121,    -1,   105,   381,   142,   122,   392,
     121,    -1,   105,   381,   122,   392,   121,    -1,   295,   209,
     381,   118,    -1,   209,    -1,   114,   209,    -1,   113,   209,
      -1,   389,    -1,   390,   120,   389,    -1,   107,   390,   118,
      -1,   107,   390,   209,   118,    -1,   388,    -1,   391,    -1,
     392,   388,    -1,   392,   391,    -1,   108,   115,   237,   120,
     237,   116,    -1,   106,   115,   381,   120,   209,   116,    -1,
     107,   115,   381,   120,   209,   116,    -1,   105,   115,   381,
     116,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   278,   278,   307,   366,   367,   467,   471,   474,   475,
     476,   525,   527,   532,   537,   542,   544,   549,   551,   556,
     558,   563,   565,   567,   569,   571,   575,   579,   592,   594,
     596,   598,   600,   606,   608,   613,   618,   623,   625,   627,
     632,   633,   637,   638,   649,   653,   654,   656,   661,   662,
     664,   667,   679,   690,   709,   711,   716,   717,   718,   719,
     720,   721,   722,   723,   724,   728,   729,   730,   731,   735,
     736,   737,   738,   739,   740,   741,   745,   747,   752,   754,
     756,   758,   760,   790,   792,   797,   799,   801,   803,   805,
     834,   836,   838,   843,   845,   850,   852,   856,   858,   860,
     862,   867,   870,   873,   876,   941,   943,   948,   950,   952,
     954,   956,   987,   991,   992,   993,   997,   998,   999,  1003,
    1004,  1005,  1006,  1010,  1013,  1016,  1019,  1022,  1027,  1028,
    1030,  1032,  1034,  1036,  1041,  1045,  1048,  1051,  1054,  1057,
    1062,  1063,  1065,  1070,  1074,  1076,  1081,  1083,  1088,  1090,
    1095,  1100,  1102,  1107,  1109,  1111,  1113,  1118,  1120,  1122,
    1124,  1129,  1130,  1131,  1132,  1133,  1134,  1135,  1136,  1137,
    1138,  1139,  1141,  1142,  1144,  1148,  1151,  1152,  1153,  1154,
    1155,  1156,  1157,  1158,  1159,  1160,  1161,  1162,  1163,  1164,
    1166,  1167,  1171,  1172,  1173,  1177,  1181,  1182,  1183,  1187,
    1188,  1189,  1190,  1191,  1195,  1196,  1208,  1209,  1213,  1214,
    1215,  1216,  1217,  1218,  1219,  1220,  1224,  1228,  1229,  1233,
    1241,  1242,  1246,  1247,  1248,  1252,  1253,  1257,  1258,  1259,
    1260,  1261,  1262,  1302,  1303,  1307,  1315,  1316,  1324,  1325,
    1327,  1328,  1337,  1338,  1342,  1349,  1356,  1362,  1369,  1375,
    1384,  1391,  1397,  1403,  1409,  1415,  1421,  1432,  1437,  1438,
    1443,  1444,  1445,  1449,  1450,  1451,  1452,  1453,  1454,  1455,
    1456,  1457,  1458,  1459,  1460,  1461,  1462,  1463,  1464,  1465,
    1466,  1467,  1468,  1469,  1470,  1471,  1472,  1473,  1474,  1475,
    1476,  1477,  1479,  1480,  1481,  1482,  1483,  1485,  1486,  1490,
    1494,  1498,  1499,  1503,  1505,  1506,  1507,  1508,  1509,  1510,
    1511,  1512,  1513,  1515,  1516,  1517,  1518,  1519,  1520,  1521,
    1522,  1526,  1528,  1529,  1530,  1531,  1532,  1533,  1534,  1535,
    1536,  1538,  1539,  1540,  1541,  1542,  1543,  1544,  1545,  1549,
    1550,  1551,  1552,  1556,  1557,  1558,  1559,  1560,  1564,  1565,
    1566,  1567,  1568,  1569,  1570,  1571,  1572,  1574,  1575,  1576,
    1580,  1581,  1585,  1586,  1590,  1591,  1592,  1593,  1594,  1595,
    1596,  1597,  1601,  1602,  1606,  1607,  1608,  1609,  1610,  1611,
    1612,  1616,  1617,  1618,  1619,  1620,  1624,  1625,  1626,  1627,
    1628,  1632,  1640,  1641,  1642,  1643,  1644,  1645,  1646,  1647,
    1648,  1652,  1653,  1654,  1655,  1656,  1658,  1659,  1660,  1661,
    1665,  1666,  1667,  1669,  1670,  1674,  1675,  1676,  1678,  1679,
    1683,  1684,  1685,  1687,  1688,  1692,  1693,  1694,  1698,  1699,
    1700,  1704,  1705,  1706,  1707,  1708,  1710,  1711,  1712,  1713,
    1715,  1716,  1717,  1718,  1720,  1721,  1722,  1723,  1727,  1728,
    1729,  1730,  1731,  1733,  1734,  1735,  1736,  1740,  1741,  1742,
    1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,  1754,  1755,
    1756,  1757,  1761,  1762,  1763,  1767,  1768,  1769,  1770,  1772,
    1773,  1775,  1776,  1781,  1783,  1788,  1792,  1793,  1794,  1796,
    1797,  1799,  1800,  1805,  1807,  1812,  1816,  1817,  1818,  1819,
    1820,  1821,  1822,  1823,  1824,  1825,  1826,  1827,  1831,  1832,
    1836,  1837,  1842,  1843,  1847,  1848,  1849,  1850,  1851,  1852,
    1853,  1857,  1858,  1862,  1866,  1870,  1877,  1878,  1879,  1880,
    1881,  1885,  1886,  1937,  1938,  1939,  1940,  1941,  1942,  1943,
    1947,  1948,  1949,  1950,  1951,  1958,  1959,  1960,  1961,  1965,
    1966,  1967,  1969,  1970,  1974,  1975,  1976,  1978,  1979,  1983,
    1984,  1985,  1987,  1988,  1992,  1993,  1994,  1998,  1999,  2000,
    2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,  2014,
    2015,  2016,  2017,  2018,  2019,  2020,  2021,  2023,  2024,  2025,
    2026,  2028,  2029,  2030,  2031,  2033,  2040,  2044,  2048,  2055,
    2056,  2060,  2065,  2066,  2070,  2071,  2072,  2073,  2079,  2080,
    2081,  2085,  2086,  2087,  2088,  2092,  2094,  2098,  2099,  2100,
    2101,  2102,  2106,  2107,  2108,  2109,  2110,  2114,  2115,  2116,
    2120,  2121,  2122,  2126,  2130,  2131,  2135,  2136,  2137,  2141,
    2142,  2144,  2145,  2146,  2147,  2148,  2150,  2151,  2152,  2153,
    2154,  2158,  2159,  2163,  2164,  2165,  2169,  2170,  2171,  2172,
    2173,  2174,  2175,  2176,  2177,  2179,  2180,  2182,  2183,  2184,
    2185,  2186,  2190,  2191,  2195,  2196,  2200,  2204,  2205,  2206,
    2211,  2212,  2216,  2217,  2218,  2219,  2220,  2221,  2222,  2223,
    2224,  2225,  2226,  2227,  2228,  2229,  2230,  2231,  2232,  2233,
    2234,  2235,  2236,  2237,  2241,  2242,  2243,  2244,  2245,  2246,
    2247,  2248,  2249,  2250,  2251,  2252,  2253,  2254,  2255,  2256,
    2257,  2258,  2259,  2260,  2266,  2268,  2270,  2272,  2274,  2276,
    2278,  2280,  2282,  2284,  2289,  2290,  2294,  2300,  2306,  2313,
    2323,  2324,  2325,  2326,  2330,  2331,  2332,  2334,  2335,  2336,
    2338,  2339,  2340,  2344,  2348,  2356,  2365,  2374,  2375,  2377,
    2378,  2382,  2389,  2396,  2399,  2412,  2426,  2429,  2431,  2433,
    2438,  2439,  2443,  2444,  2445,  2446,  2447,  2448,  2449,  2450,
    2454,  2455,  2456,  2457,  2458,  2459,  2460,  2461,  2462,  2463,
    2467,  2468,  2469,  2470,  2471,  2472,  2473,  2474,  2475,  2476,
    2480,  2481,  2482,  2483,  2484,  2485,  2486,  2487,  2488,  2489,
    2490,  2491,  2495,  2496,  2497,  2498,  2499,  2500,  2501,  2502,
    2503,  2504,  2508,  2509,  2513,  2514,  2515,  2516,  2517,  2518,
    2519,  2520,  2521,  2523,  2525,  2543,  2561,  2562,  2566,  2567,
    2568,  2569,  2570,  2571,  2572,  2573,  2574,  2592,  2609,  2610,
    2611,  2612,  2613,  2614,  2615,  2616,  2617,  2618,  2619,  2620,
    2621,  2639,  2656,  2657,  2658,  2659,  2660,  2661,  2662,  2663,
    2664,  2665,  2666,  2667,  2668,  2686,  2703,  2704,  2708,  2709,
    2710,  2711,  2712,  2716,  2717,  2724,  2726,  2735,  2744,  2753,
    2762,  2763,  2764,  2765,  2769,  2770,  2771,  2772,  2773,  2774,
    2775,  2776,  2777,  2781,  2785,  2786,  2787,  2788,  2789,  2794,
    2803,  2812,  2821,  2835,  2836,  2841,  2845,  2846,  2847,  2848,
    2849,  2854,  2863,  2872,  2881,  2895,  2896,  2945,  2946,  2947,
    2948,  2960,  2961,  2962,  2967,  2968,  2969,  2970,  2971,  2975,
    2976,  2980,  2981,  2982,  2986,  2987,  2991,  2992,  2993,  2994,
    2995,  2996,  2997,  2998,  2999,  3000,  3001,  3002,  3003,  3004,
    3005,  3006,  3010,  3011,  3012,  3013,  3014,  3015,  3016,  3017,
    3021,  3022,  3023,  3024,  3028,  3029,  3030,  3031,  3032,  3036,
    3037,  3038,  3039,  3040,  3044,  3045,  3047,  3049,  3051,  3056,
    3057,  3059,  3061,  3066,  3067,  3068,  3069,  3073,  3074,  3075,
    3076,  3080,  3081,  3082,  3083,  3087,  3088,  3089,  3090,  3094,
    3095,  3096,  3097,  3101,  3102,  3103,  3119,  3120,  3121,  3122,
    3135,  3151,  3152,  3157,  3158,  3162,  3163,  3164,  3165,  3168,
    3169,  3173,  3174,  3175,  3179,  3183,  3187,  3188,  3189,  3190,
    3191,  3200,  3209,  3210,  3211,  3212,  3216,  3217,  3221,  3222,
    3227,  3228,  3229,  3230,  3231,  3232,  3251,  3252,  3256,  3257,
    3258,  3259,  3260,  3261,  3263,  3264,  3265,  3266,  3270,  3271,
    3272,  3273,  3274,  3276,  3277,  3278,  3282,  3283,  3284,  3285,
    3286,  3287,  3291,  3292,  3293,  3298,  3299,  3300,  3301,  3302,
    3303,  3304,  3305,  3306,  3307,  3308,  3309,  3310,  3314,  3315,
    3316,  3317,  3318,  3319,  3320,  3324,  3325,  3329,  3330,  3331,
    3335,  3336,  3337,  3338,  3340,  3341,  3342,  3344,  3345,  3346,
    3347,  3349,  3350,  3351,  3355,  3356,  3357,  3358,  3359,  3361,
    3362,  3363,  3364,  3365,  3369,  3370,  3371,  3372,  3373,  3374,
    3375,  3377,  3378,  3379,  3380,  3381,  3385,  3386,  3387,  3391,
    3392,  3396,  3397,  3398,  3399,  3403,  3404,  3405,  3407,  3408,
    3409,  3413,  3417,  3418,  3420,  3421,  3422,  3426,  3427,  3428,
    3429,  3433,  3434,  3438,  3439,  3440,  3444,  3445,  3446,  3447,
    3448,  3449,  3450,  3454,  3455,  3456,  3457,  3461,  3462,  3463,
    3464,  3468,  3472,  3476,  3478,  3481,  3487,  3488,  3489,  3493,
    3494,  3495,  3496,  3497,  3498,  3502,  3503,  3507,  3508,  3509,
    3511,  3512,  3514,  3515,  3516,  3517,  3518,  3520,  3521,  3525,
    3526,  3527,  3528,  3532,  3533,  3534,  3535,  3537,  3538,  3539,
    3540,  3541,  3542,  3543,  3546,  3550,  3551,  3555,  3556,  3560,
    3561,  3562,  3563,  3564,  3565,  3566,  3567,  3571,  3572,  3573,
    3574,  3580,  3581,  3583,  3584,  3587,  3588,  3591,  3592,  3593,
    3594,  3595,  3596,  3600,  3601,  3613,  3614,  3617,  3620,  3622,
    3623,  3624,  3634,  3636,  3637,  3639,  3640,  3641,  3642,  3652,
    3653,  3654,  3655,  3656,  3657,  3661,  3662,  3670,  3672,  3673,
    3675,  3677,  3681,  3682,  3683,  3684,  3685,  3689,  3690,  3691,
    3693,  3698,  3699,  3700,  3704,  3705,  3706,  3710,  3714,  3715,
    3716,  3720,  3721,  3725,  3726,  3730,  3731,  3732,  3733,  3737,
    3741,  3745,  3749
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "LONG", "SIGNED", "UNSIGNED", "FLOAT",
  "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST", "STRUCT", "UNION",
  "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH", "WHILE", "DO",
  "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX", "ELSE", "CLASS",
  "THISCLASS", "CLASS_NAME", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "'*'",
  "'<'", "'>'", "'('", "')'", "'~'", "';'", "'='", "','", "'}'", "'{'",
  "'.'", "':'", "'$'", "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'",
  "'%'", "'^'", "'|'", "'?'", "$accept", "guess_type", "type",
  "base_strict_type", "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "simple_postfix_expression", "argument_expression_list",
  "argument_expression_list_error", "common_unary_expression",
  "unary_expression", "simple_unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "simple_postfix_expression_error", "common_unary_expression_error",
  "unary_expression_error", "simple_unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    42,    60,    62,    40,    41,   126,    59,    61,
      44,   125,   123,    46,    58,    36,    91,    93,    38,    43,
      45,    33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   137,   138,   138,   139,   139,   140,   141,   142,   142,
     142,   143,   143,   144,   145,   146,   146,   147,   147,   148,
     148,   149,   149,   149,   149,   149,   149,   149,   150,   150,
     150,   150,   150,   151,   151,   152,   153,   154,   154,   154,
     155,   155,   156,   156,   156,   157,   157,   157,   158,   158,
     158,   158,   158,   158,   159,   159,   160,   160,   160,   160,
     160,   160,   160,   160,   160,   161,   161,   161,   161,   162,
     162,   162,   162,   162,   162,   162,   163,   163,   164,   164,
     164,   164,   164,   165,   165,   166,   166,   166,   166,   166,
     167,   167,   167,   168,   168,   169,   169,   169,   169,   169,
     169,   169,   169,   169,   169,   170,   170,   171,   171,   171,
     171,   171,   172,   173,   173,   173,   174,   174,   174,   175,
     175,   175,   175,   176,   176,   176,   176,   176,   177,   177,
     177,   177,   177,   177,   178,   179,   179,   179,   179,   179,
     180,   180,   180,   181,   182,   182,   183,   183,   184,   184,
     185,   186,   186,   187,   187,   187,   187,   188,   188,   188,
     188,   189,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   189,   189,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   191,   191,   191,   192,
     192,   192,   192,   192,   193,   193,   194,   194,   195,   195,
     195,   195,   195,   195,   195,   195,   196,   197,   197,   198,
     199,   199,   200,   200,   200,   201,   201,   202,   202,   202,
     202,   202,   202,   203,   203,   204,   205,   205,   205,   205,
     205,   205,   205,   205,   206,   206,   206,   206,   206,   206,
     207,   208,   208,   208,   208,   208,   208,   209,   210,   210,
     211,   211,   211,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   213,
     214,   215,   215,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   218,
     218,   218,   218,   219,   219,   219,   219,   219,   220,   220,
     220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
     221,   221,   222,   222,   223,   223,   223,   223,   223,   223,
     223,   223,   224,   224,   225,   225,   225,   225,   225,   225,
     225,   226,   226,   226,   226,   226,   227,   227,   227,   227,
     227,   228,   229,   229,   229,   229,   229,   229,   229,   229,
     229,   230,   230,   230,   230,   230,   230,   230,   230,   230,
     231,   231,   231,   231,   231,   232,   232,   232,   232,   232,
     233,   233,   233,   233,   233,   234,   234,   234,   235,   235,
     235,   236,   236,   236,   236,   236,   236,   236,   236,   236,
     236,   236,   236,   236,   236,   236,   236,   236,   237,   237,
     237,   237,   237,   237,   237,   237,   237,   238,   238,   238,
     238,   238,   238,   238,   238,   238,   238,   238,   239,   239,
     239,   239,   240,   240,   240,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   242,   242,   242,   242,
     242,   242,   242,   242,   242,   242,   243,   243,   243,   243,
     243,   243,   243,   243,   243,   243,   243,   243,   244,   244,
     245,   245,   246,   246,   247,   247,   247,   247,   247,   247,
     247,   248,   248,   248,   248,   248,   249,   249,   249,   249,
     249,   250,   250,   250,   250,   250,   250,   250,   250,   250,
     251,   251,   251,   251,   251,   251,   251,   251,   251,   252,
     252,   252,   252,   252,   253,   253,   253,   253,   253,   254,
     254,   254,   254,   254,   255,   255,   255,   256,   256,   256,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   258,
     258,   258,   258,   258,   259,   259,   259,   259,   259,   259,
     259,   260,   260,   260,   260,   261,   262,   263,   263,   263,
     263,   263,   264,   264,   264,   264,   264,   265,   265,   265,
     266,   266,   266,   267,   268,   268,   269,   269,   269,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   271,   271,   272,   272,   272,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   274,   274,   275,   275,   276,   277,   277,   277,
     278,   278,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   281,   281,   281,   281,   281,   281,
     281,   281,   281,   281,   282,   282,   283,   283,   283,   283,
     284,   284,   284,   284,   285,   285,   285,   285,   285,   285,
     285,   285,   285,   286,   287,   287,   288,   289,   289,   289,
     289,   290,   290,   290,   290,   290,   290,   290,   290,   290,
     291,   291,   292,   292,   292,   292,   292,   292,   292,   292,
     293,   293,   293,   293,   293,   293,   293,   293,   293,   293,
     294,   294,   294,   294,   294,   294,   294,   294,   294,   294,
     295,   295,   295,   295,   295,   295,   295,   295,   295,   295,
     295,   295,   296,   296,   296,   296,   296,   296,   296,   296,
     296,   296,   297,   297,   298,   298,   298,   298,   298,   298,
     298,   298,   298,   298,   298,   298,   299,   299,   300,   300,
     300,   300,   300,   300,   300,   300,   300,   300,   301,   301,
     301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
     301,   301,   302,   302,   302,   302,   302,   302,   302,   302,
     302,   302,   302,   302,   302,   302,   303,   303,   304,   304,
     304,   304,   304,   305,   305,   305,   305,   305,   305,   305,
     305,   305,   305,   305,   306,   306,   306,   306,   306,   306,
     306,   306,   306,   307,   308,   308,   308,   308,   308,   309,
     309,   309,   309,   310,   310,   311,   312,   312,   312,   312,
     312,   313,   313,   313,   313,   314,   314,   315,   315,   315,
     315,   316,   316,   316,   317,   317,   317,   317,   317,   318,
     318,   319,   319,   319,   320,   320,   321,   321,   321,   321,
     321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
     321,   321,   322,   322,   322,   322,   322,   322,   322,   322,
     323,   323,   323,   323,   324,   324,   324,   324,   324,   325,
     325,   325,   325,   325,   326,   326,   326,   326,   326,   327,
     327,   327,   327,   328,   328,   328,   328,   329,   329,   329,
     329,   330,   330,   330,   330,   331,   331,   331,   331,   332,
     332,   332,   332,   333,   333,   333,   334,   334,   334,   334,
     334,   335,   335,   336,   336,   337,   337,   337,   337,   337,
     337,   338,   338,   338,   339,   339,   340,   340,   340,   340,
     340,   340,   341,   341,   341,   341,   342,   342,   343,   343,
     344,   344,   344,   344,   344,   344,   345,   345,   346,   346,
     346,   346,   346,   346,   346,   346,   346,   346,   347,   347,
     347,   347,   347,   347,   347,   347,   348,   348,   348,   348,
     348,   348,   349,   349,   349,   350,   350,   350,   350,   350,
     350,   350,   350,   350,   350,   350,   350,   350,   351,   351,
     351,   351,   351,   351,   351,   352,   352,   353,   353,   353,
     354,   354,   354,   354,   354,   354,   354,   354,   354,   354,
     354,   354,   354,   354,   355,   355,   355,   355,   355,   355,
     355,   355,   355,   355,   356,   356,   356,   356,   356,   356,
     356,   356,   356,   356,   356,   356,   357,   357,   357,   358,
     358,   359,   359,   359,   359,   360,   360,   360,   360,   360,
     360,   361,   362,   362,   362,   362,   362,   363,   363,   363,
     363,   364,   364,   365,   365,   365,   366,   366,   366,   366,
     366,   366,   366,   367,   367,   367,   367,   368,   368,   368,
     368,   369,   370,   371,   371,   371,   372,   372,   372,   373,
     373,   373,   373,   373,   373,   374,   374,   375,   375,   375,
     375,   375,   375,   375,   375,   375,   375,   375,   375,   376,
     376,   376,   376,   376,   376,   376,   376,   376,   376,   376,
     376,   376,   376,   376,   376,   376,   376,   376,   376,   377,
     377,   377,   377,   377,   377,   377,   377,   378,   378,   378,
     378,   379,   379,   379,   379,   379,   379,   380,   380,   380,
     380,   380,   380,   381,   381,   382,   382,   382,   382,   382,
     382,   382,   382,   382,   382,   382,   382,   382,   382,   382,
     382,   382,   382,   382,   382,   383,   383,   383,   383,   383,
     383,   383,   384,   384,   384,   384,   384,   385,   385,   385,
     385,   386,   386,   386,   387,   387,   387,   388,   389,   389,
     389,   390,   390,   391,   391,   392,   392,   392,   392,   393,
     394,   395,   396
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     3,     2,     1,
       2,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       3,     3,     3,     1,     2,     2,     1,     1,     2,     2,
       2,     2,     1,     2,     2,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     2,     3,     4,     5,
       4,     3,     4,     2,     3,     4,     5,     4,     3,     4,
       5,     5,     4,     2,     3,     3,     3,     3,     2,     4,
       3,     3,     2,     4,     3,     2,     3,     2,     3,     2,
       1,     2,     3,     3,     3,     2,     1,     3,     3,     1,
       3,     3,     2,     4,     5,     3,     4,     3,     1,     3,
       3,     3,     2,     3,     2,     4,     5,     3,     4,     3,
       1,     3,     3,     2,     1,     2,     2,     2,     1,     2,
       5,     7,     9,     6,     8,     4,     6,     1,     2,     3,
       4,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     7,     1,     2,     4,     1,     1,     2,     3,     2,
       2,     2,     3,     1,     2,     2,     2,     1,     1,     1,
       2,     2,     2,     3,     3,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     2,     2,     4,
       4,     6,     2,     4,     4,     6,     1,     1,     3,     1,
       4,     5,     1,     1,     1,     1,     3,     1,     1,     1,
       3,     3,     3,     1,     3,     1,     2,     2,     3,     3,
       5,     5,     6,     6,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     3,
       1,     2,     4,     1,     1,     4,     4,     5,     8,     1,
       1,     2,     6,     6,     5,     5,     6,     6,     5,     5,
       7,     7,     6,     6,     7,     7,     6,     6,     4,     5,
       4,     6,     4,     1,     1,     1,     1,     3,     2,     1,
       2,     2,     2,     1,     4,     4,     3,     4,     4,     3,
       3,     2,     2,     4,     4,     3,     4,     3,     3,     2,
       2,     1,     4,     4,     3,     4,     4,     3,     3,     2,
       2,     4,     4,     3,     4,     3,     3,     2,     2,     1,
       1,     3,     3,     1,     1,     3,     3,     2,     2,     2,
       2,     2,     4,     2,     4,     5,     5,     4,     2,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     1,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     2,     1,     2,     3,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     1,     3,
       3,     1,     5,     5,     5,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     2,     1,     3,     3,     1,     1,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     1,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     2,     2,     2,     2,
       3,     2,     5,     6,     6,     3,     2,     5,     1,     1,
       1,     1,     1,     4,     1,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     3,     1,     3,     3,
       1,     5,     5,     5,     5,     4,     4,     4,     4,     5,
       5,     5,     5,     4,     4,     4,     4,     5,     5,     5,
       5,     5,     5,     5,     5,     3,     3,     2,     2,     1,
       3,     3,     3,     3,     1,     2,     3,     3,     2,     2,
       2,     1,     2,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       1,     3,     2,     1,     2,     2,     2,     4,     4,     3,
       3,     4,     5,     4,     6,     6,     4,     5,     4,     6,
       6,     2,     2,     2,     5,     3,     5,     6,     5,     7,
       7,     8,     8,     7,     7,     3,     3,     3,     4,     3,
       5,     5,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     4,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     4,     4,     1,     1,     2,     2,     3,     5,     2,
       3,     5,     5,     5,     1,     3,     2,     2,     3,     3,
       2,     3,     3,     4,     3,     3,     3,     3,     3,     3,
       4,     4,     4,     1,     1,     4,     3,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     1,     1,     2,
       1,     2,     1,     2,     1,     2,     4,     5,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     3,     3,     1,     3,
       3,     3,     3,     1,     1,     1,     4,     4,     4,     3,
       4,     4,     4,     3,     1,     3,     4,     3,     4,     4,
       4,     4,     3,     2,     3,     3,     3,     3,     2,     2,
       2,     3,     4,     1,     1,     2,     3,     3,     3,     3,
       2,     2,     2,     3,     4,     1,     1,     1,     1,     1,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     1,     2,     3,     6,     5,     3,     4,     2,     3,
       3,     3,     3,     4,     4,     4,     2,     3,     3,     3,
       4,     4,     3,     4,     2,     3,     3,     3,     4,     4,
       1,     2,     2,     3,     1,     1,     2,     2,     3,     1,
       1,     2,     2,     3,     1,     2,     3,     2,     2,     1,
       2,     3,     2,     1,     2,     3,     3,     1,     2,     3,
       3,     1,     2,     3,     3,     1,     2,     3,     3,     1,
       2,     3,     3,     1,     3,     4,     1,     4,     2,     5,
       3,     1,     1,     1,     1,     1,     1,     3,     3,     2,
       2,     1,     1,     3,     2,     3,     1,     3,     3,     3,
       3,     3,     1,     2,     3,     3,     1,     2,     1,     2,
       2,     2,     2,     3,     1,     1,     3,     3,     1,     3,
       4,     3,     4,     3,     3,     4,     3,     4,     1,     3,
       3,     4,     3,     3,     3,     4,     1,     3,     3,     3,
       3,     3,     1,     3,     2,     1,     1,     1,     1,     1,
       2,     1,     1,     1,     1,     2,     2,     2,     1,     1,
       1,     1,     1,     2,     1,     1,     4,     1,     3,     0,
       6,     8,    10,    12,     8,    10,    10,     5,     7,     9,
      11,     7,     9,     9,     3,     4,     4,     3,     3,     3,
       4,     4,     3,     3,     3,     4,     4,     3,     2,     3,
       2,     3,     4,     4,     3,     3,     1,     1,     1,     1,
       1,     2,     3,     2,     2,     2,     3,     3,     2,     5,
       6,     2,     2,     2,     2,     2,     2,     1,     2,     2,
       3,     1,     2,     1,     2,     2,     1,     2,     2,     2,
       2,     2,     2,     1,     1,     2,     2,     1,     1,     2,
       2,     1,     2,     2,     1,     2,     1,     2,     2,     5,
       5,     7,     7,     5,     5,     3,     2,     5,     4,     4,
       7,     6,     6,     5,     7,     6,     4,     7,     9,     3,
       4,     4,     5,     5,     6,     7,     6,     6,     5,     5,
       4,     3,     2,     1,     2,     4,     3,     5,     4,     3,
       2,     2,     2,     3,     3,     3,     3,     2,     2,     1,
       1,     4,     3,     4,     3,     3,     2,     4,     3,     4,
       3,     3,     2,     1,     2,     1,     1,     2,     1,     2,
       3,     3,     1,     2,     2,     2,     3,     4,     4,     2,
       2,     2,     2,     1,     2,     1,     2,     1,     2,     2,
       1,     2,     1,     2,     2,     2,     2,     1,     2,     2,
       3,     1,     1,     0,     6,     6,     5,     4,     1,     2,
       2,     1,     3,     3,     4,     1,     1,     2,     2,     6,
       6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1303,   257,     6,   622,   623,   624,   625,   626,   683,   684,
     685,   686,   687,   689,   692,   693,   690,   691,   677,   678,
     682,   688,   770,   771,   633,  1148,   235,   701,   927,   928,
       0,     0,   931,  1146,  1147,   702,   703,   694,     0,     0,
       0,     0,     0,   932,   933,   970,     0,  1272,   818,   697,
       8,     4,     0,     0,     0,  1266,     0,  1285,   894,   812,
       0,   696,     0,   672,   674,   820,   822,   679,   814,   816,
     753,   695,     0,     0,   673,   675,     0,     0,     0,     0,
       0,   993,   676,     0,   929,     0,     0,     0,  1268,  1290,
    1265,  1287,  1297,  1292,     0,     0,     0,  1283,     0,  1280,
    1263,     0,     0,  1269,     0,     0,     0,     0,  1282,  1281,
       0,   680,   971,   676,   972,   885,   884,   894,   926,   883,
     913,   984,     0,   925,   989,     0,     0,     0,     0,     0,
       0,  1158,     0,   237,   236,     0,     0,   245,     0,   244,
       2,     3,     0,     5,     0,   635,   634,     0,     0,   653,
       0,     0,     0,     0,   757,     0,   737,   736,     0,  1161,
     624,   686,   687,  1155,   819,     8,  1267,  1286,   894,   813,
     821,   823,   815,   817,   993,  1001,   676,     0,     0,  1032,
       0,     0,     0,  1042,     0,     0,   885,     0,   884,     0,
       0,   903,     0,     0,   617,   618,   619,   620,   621,  1055,
     908,   806,   878,   800,     0,   810,     0,   802,   804,   753,
     808,     0,     0,  1054,     0,     0,  1058,  1068,     0,     0,
       0,     0,     0,     0,   994,     0,   705,   706,   707,   708,
     709,   711,   714,   715,   712,   713,   704,   710,   723,   716,
       0,     0,  1191,   719,     0,     0,   790,   718,   796,   792,
     794,   798,   717,     0,  1167,     0,     0,     0,     0,  1256,
    1262,   624,     0,  1279,  1274,  1288,     0,  1275,  1291,  1273,
    1289,  1284,  1296,  1299,     0,     0,     0,     0,     0,  1294,
    1295,  1298,  1293,     1,     0,  1270,  1271,  1264,     0,     0,
     476,   269,     0,     0,     0,     0,     0,     0,   370,   371,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     365,     0,   368,     0,     0,   364,   366,   367,   369,     0,
     264,     0,   263,   303,   270,   258,   475,     0,   360,   372,
       0,   374,   381,   386,   392,     0,   401,   410,   415,   420,
     425,   428,   431,   448,     0,   509,   508,   512,   514,   521,
     526,   531,   540,   549,   554,   559,   564,   567,   570,     0,
     260,   293,   294,   295,   296,     0,     0,     0,     0,     0,
     681,   973,     0,   915,     0,   920,     0,     0,     0,     0,
       0,     0,     0,   926,   985,   990,     0,   895,   987,   897,
     992,   988,   694,     4,   229,   228,   227,   233,     0,   263,
     372,   219,   512,     0,   206,   249,     0,     0,   248,   255,
       0,     0,  1149,  1150,     0,   168,     0,   169,   170,     0,
       0,     0,     0,     0,   172,   246,     0,     0,     0,     0,
      29,    31,   163,   175,   188,     0,   187,     0,   116,   119,
       0,   195,   128,     0,   164,   140,     0,   167,   183,   196,
     199,     0,     0,   263,     0,     0,   176,     0,   997,   676,
       0,    12,    18,     0,   825,   824,   832,   826,     0,   828,
     830,   753,   837,   836,   250,   256,   247,     0,     0,   239,
     238,   666,   627,   630,   665,   669,   655,     0,     0,     0,
     222,   223,   224,   225,     0,   217,     0,   766,   759,     0,
       0,   756,   763,   758,     0,     0,   769,   760,     0,     0,
     739,   738,     0,     0,     0,     0,     0,   994,  1002,     0,
    1034,     0,     0,  1252,  1258,     0,  1254,  1260,  1043,  1156,
       0,     0,     0,  1157,   902,     0,   263,   615,   616,     0,
       0,     0,     0,   635,   634,   636,     0,   740,     0,     0,
     686,     0,     0,  1052,   807,     8,   894,   801,   811,   803,
     805,   809,   926,   883,   676,   975,   974,     0,     0,     0,
     907,     0,     0,   906,     0,     0,     0,  1084,     0,   904,
     905,   995,     0,   996,     0,     0,  1165,  1153,  1164,    76,
    1162,   708,   709,  1151,   894,   791,   797,   793,   795,   799,
     676,     0,  1166,  1163,  1154,     0,  1168,     0,  1255,  1261,
    1169,     0,     0,     0,     0,     0,     0,     0,     0,  1250,
       0,     0,     0,   716,     0,     0,     0,   157,  1088,  1089,
     719,     0,     0,     0,   263,     0,   372,     0,     0,   512,
     599,   604,     0,  1086,  1173,  1176,  1094,  1085,  1098,     0,
       0,     0,     0,  1195,  1193,  1087,  1100,     0,  1101,  1092,
    1099,     0,  1102,  1192,     0,     0,  1276,   894,     0,     0,
       0,  1286,     0,   883,  1001,   676,     0,     0,     0,     0,
    1262,  1300,     0,     0,   431,     0,     0,   930,   486,     0,
       0,   321,     0,   362,   353,   511,   510,   501,     0,   348,
     496,   349,   497,     0,   872,   862,   870,   864,   866,   868,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   358,   506,   271,     0,     0,     0,   776,   772,
     774,   778,  1046,     0,   261,     0,   298,   299,     0,   340,
       0,   339,     0,   478,    93,     0,   477,     0,   311,   312,
       0,     0,     0,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   457,     0,     0,   351,   499,   350,   498,
       0,     0,     0,     0,     0,     0,     0,   393,   532,     0,
       0,   391,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   698,     0,   319,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     699,   700,     0,     0,     0,  1315,  1316,     0,     0,     0,
     889,     0,     0,     0,   893,     0,     0,     0,   919,   918,
     916,   917,   926,   985,   990,   896,   898,  1012,    10,     9,
       0,     0,     0,   676,   974,   207,     0,     0,   263,   206,
       0,     0,   844,   838,   840,   842,     0,     0,     0,    16,
      20,     0,   185,   184,   186,     0,     0,     0,     0,   365,
       0,   263,     0,    26,     0,    21,    28,    24,     0,    25,
      23,    22,    30,    32,   190,    83,   191,   122,   162,     0,
       0,     0,     0,   132,     0,     0,   134,     0,     0,   143,
     161,   200,   197,   202,   201,   198,   203,   115,     0,     0,
       0,   894,   734,   177,  1009,     0,  1005,   676,     0,    11,
      17,   724,   910,  1054,     0,     0,     0,   998,     0,     0,
     173,   165,   192,   181,     0,   180,     0,   166,   894,   179,
       0,   635,   634,   833,   827,   829,   831,     0,     0,     0,
     632,   668,     0,     0,     7,   212,   208,   755,     0,     0,
       0,     0,  1031,  1038,  1039,  1040,    62,    53,    92,    39,
      38,    57,    69,    45,    48,     0,    74,    56,     0,     0,
       0,  1022,  1024,     0,  1021,  1023,     0,    41,    44,   926,
     995,   986,  1003,   991,  1012,  1004,     0,  1013,  1016,  1033,
    1035,  1251,  1257,  1253,  1259,  1037,  1044,  1041,  1045,   901,
     899,   900,  1081,  1063,  1072,   640,   639,     0,     0,   476,
     741,     0,     0,   476,   742,     0,     0,     0,   956,   894,
       0,     0,   676,   974,     0,     0,     0,   948,     0,     0,
       0,     0,     0,  1053,   977,     0,     0,   976,  1057,  1056,
       0,   877,  1080,   880,  1066,  1074,     0,   876,  1079,   879,
    1064,  1073,     0,  1083,  1077,   881,  1059,  1069,     0,  1078,
     882,  1061,  1070,   934,   935,   938,   937,   936,     0,   939,
     941,     0,     0,     0,     0,    77,     0,  1152,  1170,     0,
       0,     0,     0,     0,     0,  1234,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   263,     0,  1086,  1232,
    1091,  1093,     0,     0,  1240,  1241,  1242,     0,  1248,     0,
       0,     0,     0,     0,     0,   158,   144,  1097,  1096,  1095,
       0,     0,     0,   605,     0,  1090,     0,     0,     0,     0,
     471,     0,     0,   476,     0,     0,     0,     0,  1174,  1177,
    1179,     0,  1175,  1178,  1180,     0,  1206,  1103,  1277,  1278,
     237,   236,     0,     0,     0,  1002,     0,     0,  1258,     0,
    1260,  1261,     0,     0,  1159,     0,     0,   784,   263,     0,
     500,   786,   780,   782,   788,  1048,     0,   488,   487,     0,
     329,   330,     0,     0,     0,     0,   337,   338,     0,     0,
       0,     0,     0,     0,     0,     0,   873,   863,   871,   865,
     867,   869,   676,   980,   979,     0,   858,   848,   856,   850,
     852,   854,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   505,     0,   259,     0,
     777,   773,   775,   779,  1047,     0,     0,   476,     0,     0,
       0,   105,     0,   297,   476,     0,     0,    94,   476,     0,
       0,   479,   310,   306,   344,   481,   482,   343,   483,   309,
       0,     0,   453,   449,   300,   375,   515,   376,   516,   377,
     517,   382,   522,   383,   523,   387,   527,   388,   528,   395,
     534,   396,   535,   394,   533,   406,   545,   402,   541,   407,
     546,   403,   542,   413,   552,   411,   550,   418,   557,   416,
     555,   423,   562,   421,   560,   426,   565,   429,   568,   595,
       0,   611,     0,     0,     0,     0,   455,   451,   480,   318,
     315,     0,   484,   485,   317,     0,     0,   454,   450,   378,
     518,   379,   519,   380,   520,   384,   524,   385,   525,   389,
     529,   390,   530,   399,   538,   400,   539,   397,   536,   398,
     537,   408,   547,   404,   543,   409,   548,   405,   544,   414,
     553,   412,   551,   419,   558,   417,   556,   424,   563,   422,
     561,   427,   566,   430,   569,   596,     0,     0,     0,     0,
     456,   452,     0,     0,  1308,  1311,     0,     0,  1306,  1317,
    1318,     0,     0,   888,   886,   887,   892,   890,   891,   234,
     232,   231,   230,   263,   676,   977,   241,     0,   207,   240,
     127,     0,   125,   845,   839,   841,   843,     0,   676,     0,
      15,    19,     0,   182,  1009,   676,     0,   139,     0,   137,
     845,     0,   263,   676,     0,    27,    84,   117,   120,   118,
     121,   129,   130,   131,   133,   141,   142,   114,   112,   113,
      13,   726,   729,     0,     0,   922,  1054,     0,     0,     0,
    1010,  1006,     0,     0,   725,   894,   911,   999,  1000,   894,
     193,   194,   178,     0,     0,     0,     0,   628,   629,   631,
       0,     0,   658,   654,     0,     0,     0,     0,     0,   226,
     218,   216,     0,     0,     0,    36,    37,    75,    54,     0,
      55,     0,    64,    61,    72,    67,    73,    60,    90,    39,
      70,    63,    91,    59,    71,    68,     0,    58,     0,   708,
      33,    35,    34,  1025,  1026,     0,   648,   638,     0,   643,
     637,     0,   476,   743,     0,     0,     0,   974,     0,   946,
     957,   958,   951,   949,   950,     0,   978,   959,     0,     0,
     952,     0,     0,     0,  1067,  1075,  1054,  1065,  1060,  1062,
    1071,   945,     0,     0,     0,   942,   720,   721,   722,   476,
       0,     0,  1127,  1137,  1132,     0,     0,     0,  1128,  1139,
    1133,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1231,   476,     0,  1196,   263,     0,     0,     0,  1239,
    1245,  1246,  1243,  1244,     0,     0,     0,     0,   145,  1124,
    1134,  1129,     0,   159,   602,   600,     0,     0,     0,   469,
     606,   603,   601,   470,   607,     0,  1003,  1257,  1259,  1160,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     352,   785,   787,   781,   783,   789,  1049,     0,   489,   328,
     324,   491,   492,   493,   327,     0,     0,   490,   336,   333,
       0,   494,   495,   335,     0,     0,   290,   288,     0,     0,
     964,   676,     0,     0,     0,     0,     0,     0,   982,     0,
     981,     0,     0,     0,   859,   849,   857,   851,   853,   855,
       0,   266,     0,   265,   292,     0,     0,     0,     0,     0,
       0,  1322,     0,     0,     0,   357,     0,   373,   513,   262,
     108,   106,   342,   341,    99,   103,   307,     0,   308,   304,
     305,   612,     0,     0,     0,     0,     0,     0,   316,   313,
     314,     0,     0,     0,     0,  1310,  1309,  1313,     0,     0,
       0,  1305,  1304,     0,   974,   218,     0,     0,   123,   126,
       0,     0,     0,     0,     0,  1010,     0,   135,   138,     0,
      14,   476,     0,     0,   735,     0,   894,   923,  1011,  1007,
    1008,   727,   730,   912,   174,   834,     0,   243,   242,     0,
     657,     0,   213,   214,   204,   209,   210,   220,     0,     0,
      51,    46,    49,    52,    47,    50,    37,    43,    40,    42,
       0,     0,  1029,  1030,   647,     0,   642,     0,   977,   976,
     947,   960,   961,   954,   953,   955,  1051,  1050,     0,   944,
     943,    79,  1125,  1135,  1130,     0,  1126,  1136,  1131,     0,
       0,     0,     0,     0,   476,  1209,     0,     0,  1208,  1238,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1216,     0,  1197,   476,  1198,   476,     0,     0,     0,
    1109,   930,  1109,     0,     0,   155,     0,     0,     0,   160,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     502,   325,   326,   322,   323,   334,   331,   332,   289,   874,
       0,   979,     0,   962,   965,   966,   274,   275,     0,   983,
     967,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   267,   278,   279,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   507,   346,   345,   473,   613,   440,   587,
     432,   571,   444,   591,   436,   579,   474,   614,   441,   588,
     433,   572,   445,   592,   437,   580,   442,   589,   434,   573,
     446,   593,   438,   581,   443,   590,   435,   574,   447,   594,
     439,   582,  1312,  1314,  1307,   846,     0,   124,   150,  1011,
       0,   136,    86,   924,     0,     0,   835,     0,     0,     0,
       0,     0,     0,   205,     0,   221,     0,     0,  1027,  1028,
    1017,     0,     0,     0,     0,   940,  1199,  1200,  1203,  1204,
    1207,  1237,     0,     0,     0,     0,     0,     0,     0,  1213,
     476,     0,     0,     0,  1107,     0,  1105,  1117,     0,  1109,
       0,  1109,     0,     0,     0,     0,   504,   503,   981,   963,
     875,   968,   969,   272,   273,   860,   282,   283,     0,     0,
       0,     0,   276,   277,   286,   287,     0,     0,   291,  1320,
    1321,  1319,   847,     0,   728,   731,   733,   732,     0,     0,
     215,   211,     0,  1014,  1019,     0,     0,     0,     0,     0,
       0,     0,  1227,  1211,     0,     0,  1212,  1224,     0,  1215,
    1226,     0,     0,  1109,     0,  1109,     0,  1109,     0,  1110,
       0,     0,     0,   148,     0,   153,     0,   156,     0,   861,
     280,   281,     0,   284,   285,   171,  1015,  1201,  1202,     0,
       0,  1210,  1217,     0,  1214,  1225,  1121,  1108,     0,     0,
       0,  1118,     0,     0,  1109,  1109,     0,  1109,   147,   146,
     151,   149,     0,     0,   373,   513,   268,     0,     0,  1106,
       0,     0,  1109,  1114,     0,     0,  1111,     0,     0,   154,
    1218,  1122,  1123,  1119,     0,     0,     0,     0,  1109,   152,
       0,  1115,  1116,  1112,     0,  1120,     0,  1113
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   201,    49,    50,   965,   319,   426,   427,   428,   429,
     430,   431,   432,   433,   979,   980,   981,   982,   983,   984,
     985,   986,   987,   988,   989,   990,   244,   245,   434,   435,
      52,   320,   321,   737,   765,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,  2122,  2123,  2124,   448,   631,
     632,   633,   449,   450,   451,   452,  1813,   394,   490,   395,
     491,   396,   492,   493,   857,   397,   398,    53,    54,    55,
      56,    57,   322,   323,   324,   325,   991,   992,   326,   327,
     692,   740,  1276,   328,   636,   694,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     725,   819,   638,  1333,   345,   695,   346,   639,   697,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     640,   641,  1117,  1335,   539,   540,   203,    59,   483,   484,
     204,    61,   205,   206,    62,    63,    64,    65,    66,    67,
     207,   112,   208,   250,   922,   923,   209,   210,   211,    71,
      72,    73,    74,    75,   212,   732,  1195,   253,   456,    77,
      78,   473,   474,   867,  1232,   710,  1040,  1041,   118,    79,
     457,    81,   458,   121,   122,   123,   926,   124,   113,    83,
    1089,  1090,  1091,    84,   565,  1223,   460,   567,  1225,   127,
     179,   461,   462,   181,   930,   129,  1009,  1544,   997,   998,
    1545,   182,   183,   184,   185,   733,  1196,   216,   217,   218,
     219,   220,   221,   644,   645,  2044,  2045,   646,   647,   648,
      87,   463,   254,    88,    89,   255,   256,   257,   651,   652,
     653,   654,   258,   655,   888,  1628,  1120,   658,   659,   660,
    1121,   662,    90,    91,   360,    92,    93,    94,    95,    96,
      97,   825,  1405,  1406,   826,   827,   361,   362,   363,   364
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1573
static const int yypact[] =
{
   36283, -1573, -1573, -1573, -1573,   276, -1573, -1573, -1573, -1573,
   -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573,
   -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573,
    1056,   116, -1573, -1573, -1573, -1573, -1573, -1573,    42,   297,
     517,   950,   149, -1573, -1573,  2348,  2793, -1573, -1573, -1573,
     265, -1573,   502,   950,   -13, -1573,   246,   534,   878, -1573,
     191, -1573,    75, -1573,   548, -1573, -1573, -1573, -1573, -1573,
    1099, -1573,   687,   583, -1573,   595,  1224, 35919,  2556,   -25,
   36551, -1573,   647,   661, -1573,  1241,  5958, 34689, -1573, -1573,
   -1573, -1573, -1573, -1573, 36374, 35546,   762, -1573,   116, -1573,
   -1573,   149,   149,   859,   786,   149, 28595,   950, -1573, -1573,
     535, -1573,  2348, -1573, -1573, -1573,   816, -1573,   959,  1171,
   -1573, -1573, 36640, -1573, -1573,  2793,  2884,  1451,  2354,  2180,
   23000, -1573,   838,   220,   405, 29662, 38648, -1573, 29781, -1573,
   -1573, -1573,   950, -1573,   572,  1139,  1277,   178, 38648, -1573,
   38393, 29900, 38648, 30019, -1573, 30138, -1573, -1573,   950, -1573,
   -1573,   413,   839, -1573, -1573,   803, -1573,   534,   352, -1573,
   -1573, -1573, -1573, -1573,  1639,  1519,   647,  2884,  1840,  2180,
    5958,  5958,   417, -1573,  1237,   889,   901,   839,   533,   647,
    1312, -1573, 27135,   945, -1573, -1573, -1573, -1573, -1573, -1573,
   -1573, -1573,   958, -1573,   313, -1573,   920, -1573, -1573,   957,
   -1573,  1006,  1714,  9316,   187,   278, -1573, -1573,   528,   546,
    1018,  1029,    70,  1033, -1573,    70, -1573, -1573, -1573, -1573,
   -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573,
    1038,  1046, -1573, -1573,   269,    54, -1573, -1573, -1573, -1573,
   -1573, -1573, -1573, 36101, -1573, 17338,  6412, 39001, 17470, -1573,
    1069,  1129,  1233, -1573, -1573,   534, 36010, -1573, -1573, -1573,
   -1573, -1573, -1573, -1573,   548,   595, 37085,  5958, 37349, -1573,
   -1573, -1573, -1573, -1573,  1098,   859,   859, -1573, 28595,   505,
   -1573, -1573, 28668, 28741, 28741,  1083, 38818, 28595, -1573, -1573,
    1115,  1125, 38818, 28595,  1141,  1174,  1187,  1192,  1204, 28814,
   -1573, 23230, -1573,   149,  9691, -1573, -1573, -1573, -1573,  1151,
   -1573,    63,  1209, -1573, -1573, -1573, -1573, 12750, -1573,  1664,
   27208, -1573,   935,   425,  1553, 28595,   902,  1156,  1123,  1207,
    1203,  1342,   148,  1664,  1256,   666, -1573,  1664, -1573,   985,
    1053,  1570,  1088,  1638,  1239,  1245,  1247,  1394,   184,  1664,
     859, -1573, -1573, -1573, -1573,  1328,    24, 38478,  1337,  1361,
   -1573, -1573, 27281, -1573, 27354, -1573,   607,   634,  1334,  1348,
    2884,  2368,  2444,   959, -1573, -1573,   871, -1573, -1573, -1573,
   -1573, -1573,  1115,  1151, -1573, -1573, -1573, -1573,   414,   283,
   -1573,  1553, -1573,  1570, 11322, -1573, 23115, 38393, -1573,   690,
   38138, 37437, -1573, -1573,  1371, -1573,   950, -1573, -1573,   116,
   37613, 37261,  5824, 38733, -1573, -1573,  1359,  1373,  1373,   708,
   -1573,  1397, -1573, -1573, -1573,    82,  1251,   122, -1573, -1573,
   29059,  1404, -1573,  1127, -1573, -1573,  1054, -1573, -1573, -1573,
    1418, 29186, 29305,   662,   679,   666,  7886, 36729, -1573,   647,
    1241, -1573, -1573, 34787, -1573, -1573,  1443, -1573,   950, -1573,
   -1573, -1573,  1311, 38818, -1573,   690, -1573, 29424, 29543,  1447,
    1455, -1573,  1472, -1573,  1475, -1573, -1573,  2609,  1485,   973,
   -1573, -1573, -1573, -1573,   606,   828, 11322,  1010, -1573, 30257,
   30376, -1573,  1010, -1573, 30495, 30614,  1010, -1573, 30733, 30852,
   -1573, -1573,  2793,  2793,  2793, 12265,   871,  1639,  1519,   871,
   -1573, 27427,  6412, -1573,  1069,  6412, -1573,  1069, -1573, -1573,
    2793,  2793,   871, -1573, -1573,  1486,   247, -1573, -1573,  1506,
    1518, 38223,  1501,  1543,  1549, -1573, 30971, -1573, 31090,   466,
   -1573,  7678, 27500,  2793, -1573,  1505,   958, -1573, -1573, -1573,
   -1573, -1573,   959,  1502,   647,   994,   100,   723,  2164,  1588,
   -1573, 37877,  1590, -1573, 37964,  1601, 38051,  1604, 38308, -1573,
   -1573, -1573,  1243, -1573, 28595,   950, -1573, -1573,  1598, -1573,
   -1573,   413,   839, -1573,  1621, -1573, -1573, -1573, -1573, -1573,
     647,  1392,   889, -1573, -1573,  1628, -1573, 17602, -1573,  1069,
   -1573,   341, 27573,  1624,  1637,  1641,   131, 17734,  1645,   116,
    1635,  1636, 17866,  1115,  2075,  1647,  1648,   116, -1573, -1573,
    1151,  1651,  1652,  1655,  1450, 16013,  1664, 16150, 24726,  1664,
    1664, -1573, 16282, 36192, -1573, -1573, -1573, -1573, -1573, 17998,
   18130, 18262, 18394, -1573, -1573, -1573,  1069, 18526, -1573, -1573,
   -1573, 18658, -1573, -1573,   149,   149,   859,   674,   950,  1453,
    1633, -1573,   959,   -25, -1573,   647,  2884,  5958,  5958,  6412,
   -1573, -1573, 37173, 28595,   292,  1656,   295, -1573, -1573, 23361,
     126, -1573, 12888, -1573, -1573,  1037, -1573, -1573, 27646, -1573,
   -1573, -1573, -1573, 38818,  1662, -1573, -1573, -1573, -1573, -1573,
   11471, 38818, 23492,   116, 34392, 38818, 28595,   149,   149,   149,
   28595, 23607, -1573, -1573, -1573, 13097, 13273, 13410, -1573, -1573,
   -1573, -1573, 10172,  1669,   138, 21428, -1573, -1573,   170, -1573,
     -15, -1573, 21559,  1665, -1573, 21690, -1573,  1584, -1573, -1573,
   11636,  1589, 28595, -1573, -1573, -1573, -1573, -1573, -1573, -1573,
   -1573, -1573, -1573, -1573, 27208,   210, -1573, -1573, -1573, -1573,
   28595, 28595, 28595, 28595, 28595, 28595, 28595,  1553,  1570, 28595,
   28595, -1573, 28595, 27208, 27208, 27208, 27208, 27208, 28595, 28595,
   13547, 27208, -1573,  1599, -1573, -1573, 24799,  1618, 28595, 27208,
   28595, 28595, 28595, 28595, 28595, 28595, 28595, 28595, 28595, 28595,
   28595, 27208, 27208, 27208, 27208, 27208, 28595, 28595, 13684, 27208,
   -1573, -1573,   451,   958, 38733, -1573, -1573, 35637, 38478, 38478,
   -1573,  1660,  1668,  1670, -1573,  1671,  1672,  1674, -1573, -1573,
   -1573, -1573,   959, -1573, -1573, -1573, -1573,  1682, -1573, -1573,
   23000, 23000,  8556,   647,  1011, -1573,   757,   868,   976, 11322,
    1121,  1688,  1678, -1573, -1573, -1573,  1311, 12076, 37525, -1573,
   -1573,   116, -1573, -1573, -1573, 34885,  1693,   116, 34293,  1768,
   23738,  1536, 37701, -1573,  1676, -1573,  1069, -1573,  1069, -1573,
   -1573, -1573,  1069, -1573,  1695, -1573,  1160, -1573, -1573,  3844,
    3844,  1373,  1373, -1573,  1373,   209, -1573,  1373,  1373, -1573,
   -1573,   721, -1573,  1418,   721, -1573,  1418,   726, 27719,  2234,
   28595,   678, -1573,  1699,   959, 36818, -1573,   647,  2884, -1573,
   -1573,  1265,   945,  9316, 28932,   802,    70, -1573,    70,  2793,
   -1573, -1573, -1573, -1573,   216, -1573,   219, -1573,   662,  7886,
   23000, -1573, -1573,  1679, -1573, -1573, -1573, 38393, 38393, 28595,
     116, -1573, 33470,   179, -1573,   808,   811, -1573, 38393,   116,
     921,   116,  1330, -1573, -1573, -1573, -1573, -1573, -1573,  1373,
   -1573, -1573, -1573, -1573, -1573, 34982,  1507, -1573, 21821,  8405,
   21952, -1573, -1573,  8287, -1573, -1573, 37789, -1573, -1573,   959,
    1639, -1573,  1519, -1573,   959, -1573, 27427, -1573, -1573, -1573,
   -1573, -1573,  1069, -1573,  1069, -1573, -1573, -1573, -1573, -1573,
   -1573, -1573, -1573, -1573, -1573, -1573,  1475,   197,   207,  1700,
   -1573, 31209, 31328,  1702, -1573, 31447, 31566, 31685, -1573,   742,
     263,   270,  1417,  1692,  1710,  1711,  1712, -1573,  1704,  1706,
    1707,   647,   871,  2180,   100, 36907, 27792,   994, -1573, -1573,
   38563, -1573, -1573,   958, -1573, -1573, 38563, -1573, -1573,   958,
   -1573, -1573, 38563, -1573, -1573,   958, -1573, -1573, 38563, -1573,
     958, -1573, -1573, -1573, -1573, -1573, -1573, -1573,  1713,  1724,
   -1573,  1340,  1728,  1729,   370, -1573, 22083, -1573, -1573, 18790,
    1725,  1726, 18922, 28595, 28595, -1573, 27865, 27938,  1731,  1738,
    1742,  9406,  1744,   116, 24872,  2315,  1520, 24945, -1573,  1808,
   -1573, -1573, 25018,  1747, -1573, -1573, -1573,  1749,  1750, 25091,
   16414,   149,  1754, 28595, 28595,   116, -1573, -1573, -1573, -1573,
   12498,   344, 27208, -1573,  1463, -1573, 28595, 13821, 13958, 27208,
   -1573, 28595, 14095,  1628, 19054, 19186, 19318, 19450, -1573, -1573,
   -1573, 19582, -1573, -1573, -1573, 19714, -1573, -1573,   859,   859,
    1759,  1761, 33588, 33706,   871, -1573,   871,  6412, -1573,  6412,
   -1573, -1573,  1758, 27208, -1573, 27208,   923, -1573,   662,  1765,
   -1573, -1573, -1573, -1573, -1573, 10172,  1767,  1665, -1573,  1640,
   -1573, -1573, 25164,  1659, 28595,  1666, -1573, -1573, 25237,  1667,
   28595,  1769, 38902, 23000, 36462, 28595,  1771, -1573, -1573, -1573,
   -1573, -1573,   647,  1775,  1776,  1760,  1784, -1573, -1573, -1573,
   -1573, -1573, 34491, 25310,  1785,  1786,  1787, 28595,  1778, 34590,
    1788,   590,   181,   236,  1790,  1791, -1573,  1796, -1573,   116,
   -1573, -1573, -1573, -1573, -1573, 28595,   149,   233, 35076, 22214,
    1795, -1573, 27208, -1573,   244, 35170, 22345, -1573,   250, 35264,
   22476, -1573, -1573, -1573, -1573,   741,  1802, -1573, -1573, -1573,
   25383,  6760, -1573, -1573,  1795, -1573, -1573, -1573, -1573, -1573,
   -1573,   935,   985,   935,   985,   425,  1053,   425,  1053,  1553,
    1570,  1553,  1570,  1553,  1570, -1573, -1573,   902,  1088, -1573,
   -1573,   902,  1088, -1573, -1573,  1156,  1638, -1573, -1573,  1123,
    1239, -1573, -1573,  1207,  1245,  1203,  1247,  1342,  1394, -1573,
      39, -1573, 25456,  1782,  8907,  1800, -1573, -1573, -1573, -1573,
   -1573,   777, -1573, -1573, -1573, 25529,  9897, -1573, -1573, -1573,
   -1573, -1573, -1573, -1573, -1573,   935,   985,   935,   985,   425,
    1053,   425,  1053,  1553,  1570,  1553,  1570,  1553,  1570,  1553,
    1570, -1573, -1573,   902,  1088, -1573, -1573,   902,  1088, -1573,
   -1573,  1156,  1638, -1573, -1573,  1123,  1239, -1573, -1573,  1207,
    1245,  1203,  1247,  1342,  1394, -1573, 25602,  1801, 10716,  1803,
   -1573, -1573,   116,   116, -1573, -1573,   628,  1079, -1573, -1573,
   -1573, 35731, 35825, -1573, -1573, -1573, -1573, -1573, -1573, -1573,
   -1573, -1573, -1573,   324,  2493,  1011, -1573, 23000,   116, -1573,
   -1573, 23000, -1573,    48, -1573, -1573, -1573,   320,   647,  2884,
   -1573, -1573,   429,  1699,  1682,   647,  2884, -1573,  1812, -1573,
     990,   327,  1927,  2793,  1813, -1573, -1573, -1573, -1573, -1573,
   -1573, -1573, -1573, -1573, -1573, -1573, -1573,  2285, -1573, -1573,
   -1573, -1573, -1573, 22607,  1254,   945,  9316, 21166,   884,   871,
     959, -1573,   871, 28595, -1573,   579, -1573, -1573, -1573,  1815,
    1695,  1665,  1699,  1234, 23000,  1263,  1267, -1573, -1573, -1573,
   31804, 31923,  1814, -1573,  4096, 38733, 38733, 38733, 38733, -1573,
   -1573, -1573, 28595,  1816, 28011, -1573,  1069, -1573, -1573, 28084,
   -1573, 28157, -1573, -1573, -1573,  1561,  1507, -1573, -1573,  1373,
   -1573, -1573, -1573, -1573, -1573,  1561,  1507, -1573, 28230,  7275,
   -1573, -1573, -1573, -1573, -1573, 19846, -1573, -1573,   172, -1573,
   -1573,   177,  1818, -1573, 32042, 32161,   647,  1692,  1817, -1573,
   -1573, -1573, -1573, -1573, -1573,   871,   994, -1573,  1820,  1826,
   -1573,  1807,  1819,  1821, -1573, -1573,  9316, -1573, -1573, -1573,
   -1573, -1573, 28595,  1827,  1136, -1573, -1573, -1573, -1573,   254,
   35358, 22738, -1573, -1573, -1573, 19978, 12498, 12498, -1573, -1573,
   -1573, 20110, 25675, 16546, 25748, 25821, 23960, 25894, 16678, 21297,
    1823,  1825, 21297, 28595, 28303,  1889, 25967,  1750, 10912,   149,
   21297,  1837, 34098,  9406, -1573,  1572, 26040, 11108, 26113, -1573,
   -1573, -1573, -1573, -1573,   112,   149,  1841,   961, -1573, -1573,
   -1573, -1573, 20242, -1573, -1573, -1573,  1838,  1846,   116, -1573,
   -1573, -1573, -1573, -1573, -1573, 38393, -1573, -1573, -1573, -1573,
   26186,  1832, 12132,  1842, 26259,  1844, 24142,  1847,  1849,  1858,
   -1573, -1573, -1573, -1573, -1573, -1573, -1573, 14232, -1573, -1573,
   -1573,  1065,  1859, -1573, -1573, 26332, 24215, -1573, -1573, -1573,
    1158, -1573, -1573, -1573, 26405, 24288, -1573, -1573,  1861,  1299,
   -1573,  2069,  1862,  1863,  1865,  1835,  1855, 23000,  1776, 36996,
    1775, 28595, 23000, 28595,  1875, -1573, -1573, -1573, -1573, -1573,
    1864, -1573, 28376, -1573, -1573,  1866,  1868, 28595, 28595,  1870,
    6610, -1573,   116,   116, 28595, -1573, 14369, -1573, -1573,   859,
   -1573, -1573, -1573, -1573, -1573, -1573, -1573, 14506, -1573, -1573,
   -1573, -1573, 27208, 14643, 14780, 27208, 14917, 15054, -1573, -1573,
   -1573, 15191, 15328, 15465, 15602, -1573, -1573, -1573,   451,  1871,
     480, -1573, -1573,   647,  1011,  1980,  1315, 23000, -1573, -1573,
    1877,   871,   871,  1373,   871,  1682,  1878, -1573, -1573,  1883,
   -1573,   255, 35452, 22869, -1573,   647,   910, -1573,   959, -1573,
   -1573,  1876,  1892, -1573, -1573, -1573,  1341, -1573, -1573, 33470,
    1900, 33470, -1573,  1906, 11322, -1573,  1907, -1573, 28595, 27427,
    2841, -1573, -1573,  2841, -1573, -1573, -1573,  2841, -1573, -1573,
   20374, 20506, -1573, -1573, -1573, 33470, -1573, 33470,   100,   994,
   -1573, -1573, -1573, -1573, -1573, -1573, -1573,  2180, 26478, -1573,
   -1573, -1573, -1573, -1573, -1573, 20638, -1573, -1573, -1573, 20770,
    9406, 11768,  9406, 11768, 33807, -1573, 24051, 16810, -1573, -1573,
   21297, 21297, 26551,  9406, 26624, 23869,  1904, 24361, 26697,   113,
   20902, -1573, 28595, -1573, 33904, -1573, 34195,  9406, 24434, 28449,
     149,  1910,   149,   164,  1909, -1573,   116, 28595, 28595,   116,
   27208, 27208, 27208, 27208, 27208, 27208, 27208, 27208, 15739, 15876,
   -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573,
     647,  1776,  1913, -1573, -1573, -1573, -1573, -1573,  1352,  1775,
   -1573,  1917,  1923,  1915,  1918,  1353,  1919,  1920, 23000, 28595,
   23230, -1573, -1573, -1573,  1921,  1929,  1933,  1934, 28595,  1924,
    1928,  1946,  1948, -1573, -1573, -1573, -1573, -1573, -1573, -1573,
   -1573,   295, -1573, -1573, -1573,   295, -1573, -1573, -1573, -1573,
   -1573,   295, -1573, -1573, -1573,   295, -1573, -1573, -1573,   295,
   -1573, -1573, -1573,   295, -1573, -1573, -1573,   295, -1573, -1573,
   -1573,   295, -1573, -1573, -1573, -1573,  1370, -1573, -1573,  1682,
   27208, -1573, -1573, -1573, 28595, 28595, -1573, 32280, 32399, 33470,
   32518, 32637, 38733, -1573, 38733, -1573, 24507, 21034, -1573, -1573,
   -1573, 32756, 32875, 32994, 33113, -1573,  2003,  2007, -1573, -1573,
   -1573, -1573,  9406, 28595, 28522,  1910, 16942, 17074, 24580, -1573,
   34001, 24051, 26770, 17206, -1573,   584,   386, -1573,    71,   149,
    1954,   149,    60,   547,  1957,  1172, -1573, -1573,  1775, -1573,
   -1573, -1573, -1573, -1573, -1573, -1573, -1573, -1573,  1379,  1947,
    1949,  1959, -1573, -1573, -1573, -1573,  1950,  1951, -1573, -1573,
   -1573, -1573, -1573,  1963, -1573, -1573, -1573, -1573, 33232, 33351,
   -1573, -1573, 26843, -1573, -1573,  9406,  9406, 26916, 24653,  9406,
   26989, 23869,  1965, -1573,  9406, 28595, -1573, -1573, 24051, -1573,
   -1573,  1966,   149,   149, 28595,   149,  1967,   149,  1042, -1573,
     153,  1373,   360, -1573,   237, -1573,  1968, -1573,   116, -1573,
   -1573, -1573, 28011, -1573, -1573, -1573, -1573, -1573, -1573,  1965,
    9406, -1573, -1573, 27062, -1573, -1573, -1573, -1573,  1184,  1971,
    1210, -1573,  1084,  1973,   149,   149,  1974,   149, -1573, -1573,
   -1573, -1573,    60,   569, -1573, -1573, -1573,  9406,  1975, -1573,
    1976,  1979,   149, -1573,  1327,  1355, -1573,  1189,   574, -1573,
   -1573, -1573, -1573, -1573,  1402,  1982,  1984,  1985,   149, -1573,
    1987, -1573, -1573, -1573,  1425, -1573,  1989, -1573
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1573,  3627,    76,  9819, -1573,  2065, -1573, -1573, -1573, -1573,
   -1573, -1573,  1650,  1653,  -944, -1573,  -951,  -375,   182,   183,
    -920,  -882,  -783, -1573,  -707,  -663, -1573, -1573,  1654,  1658,
   -1573,  4574,   503, -1573,   589,   704,   806, -1573, -1573, -1573,
   -1573,  1663, -1573, -1573, -1573,  -619, -1460,   -64, -1573, -1573,
   -1573, -1573,   -38,  3937,    11,    21,   602,  -835, -1573,  -809,
   -1573,  -834, -1573,  1143,  -125,  1279,  -924,   -37,  1839,    -6,
    1851,     9,     0, -1573,  1228,   410,  4871,  4129, -1573,  3686,
   -1573,  -727,  -705,   460,  4604,  1829, -1573,  -280,   588,   619,
     486, -1573,   332,  -456,   -42,   -14,    91,   157,   468,  8891,
    2651,  -254,  8437,  -804,  2558, -1573,   461,  5428,  1830,  -191,
     684,   917,  1113,   442,   152,   199,   180,   176,   188,   601,
    5750,  1999,  6860,  -756,  2367,   -50, 10453,   -70,  1181,  -127,
    2750, 10819,  7974, -1573, -1573, -1573,   -60,   -45,   -18, -1573,
    6951, -1573,  1255,  3250,   672,  -315,  3119,  8573, -1573, 11479,
   -1573, -1573, -1573,   -43,  4460, -1573, -1573,  2236,   822,     5,
   -1573, -1573,  1128,  1732,  1432,  1854,   -65,   -56,  7828, 10013,
    2310,  4581,  -412,  -123,  -232,   630,  -895,    67,  3187, -1573,
   -1573, -1073, -1573,  2424,  -537, -1220,  7344,   -53,  -671,   227,
    1147,   249,  1746,   -86,  -855,  -391,  -954,  -519,  -908,  -909,
     339,  1214,  1126,     6,  1911,  -706,  1445,  -311,  -474,  -446,
   -1573,  -121,  -110,  4948,  -377,    56,  -571, -1573, -1573, -1573,
    2076, -1573,  2025,  2082,   -51,  2731,   -35,  1925,  1085,  1087,
   -1573, -1573, -1573,   -67,   168, -1572,   -49, -1573, -1573, -1573,
     -26, -1573,  2084,   -40,    19,  2087,  1644, -1573, -1573, -1573,
    2090,  -822,   424, -1573,  -805,   912, -1573, -1573, -1573, -1573
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1303
static const yytype_int16 yytable[] =
{
      58,   378,  1010,   384,  1710,  1409,  1234,   169,  1135,  1469,
    1468,   935,   379,  1441,  1397,   214,  1420,  1422,  1585,   259,
     487,   142,  1410,  1275,   215,   494,  1493,     1,  1258,  1057,
     102,   104,   170,  1481,   274,  1265,   268,  1523,  1269,  1533,
    1751,   109,  1421,  1238,  1878,  1529,   117,   270,   937,   103,
     768,   275,  1543,   134,   384,   588,  1889,   376,   143,   171,
     146,   110,  1399,     1,   743,   931,   377,  1024,  1525,  1341,
    1535,   166,  1259,     1,  2115,   764,   157,   168,   117,  1266,
     202,   264,  1270,   894,   190,   117,   167,    58,   273,   791,
     191,  1342,   266,   799,    58,    58,   265,  1065,   284,   276,
    1071,   192,  1077,     1,  1082,  1262,  1526,   366,  1536,   135,
     369,   136,  1263,   523,   526,  1890,  1890,   287,   287,     1,
     285,   286,   202,   896,   289,   117,   117,  1197,     2,   132,
     399,   142,  1105,  2121,   143,   453,   466,   115,   453,   769,
     821,  1541,   480,   287,   482,   522,   525,   482,   466,   477,
     495,   453,   466,   453,   100,   453,  2155,   105,   511,   478,
    1510,  1777,   499,  -472,   504,   789,   508,  2049,   143,   287,
    1778,  1260,   500,  1834,   505,   589,   509,   117,  1836,   485,
    1502,     1,     1,   365,   744,    46,   287,  2116,   569,   608,
     678,  2112,   536,   385,     1,  2117,   169,   147,  1546,   148,
       1,   817,   143,   895,   544,  1527,   169,  1537,  1549,   657,
       1,  1284,   157,   556,   100,   551,   274,  1490,   274,     2,
    1491,   170,   117,   649,   925,   117,   552,   268,  1891,  2035,
    1023,   170,   661,   275,  -109,   275,  1892,  1892,   270,   668,
       1,   287,   679,   744,   385,  -100,  1106,   744,   171,    86,
       1,  -104,  1442,   594,   260,   -82,   -89,   843,   634,   601,
    1064,  1256,   665,  1070,   569,  1076,   667,  1081,   535,  2156,
     586,   572,   681,  2112,  1159,  1163,    58,  2157,    58,   572,
    2050,   666,   860,   682,   790,   671,     1,   265,  2051,  1699,
    1835,  1261,   960,  -646,  -216,  1837,   704,   960,  -641,   486,
    1503,  1732,   704,   570,   178,   178,  2034,   571,  1533,   789,
    2121,   536,   817,   144,  1529,  1533,     1,  1057,  1547,  1533,
     818,  1529,   833,     1,   837,  1529,   180,     1,  1550,  1315,
       1,  1261,   734,   406,   313,  -216,    86,   895,    -8,  1535,
     744,     2,   603,   277,    86,  1278,  1535,     1,   524,   527,
    1535,   855,   381,    98,  -109,     1,  1733,  1381,  2160,   885,
     887,   889,   891,     1,   137,  -100,   143,   823,   138,   745,
     929,  -104,   536,     1,   536,   -82,   -89,  1536,   130,  1661,
     117,  1665,  1142,   571,  1536,  1149,   117,   587,  1536,  1590,
     574,   287,   934,  1001,   573,   140,   141,  -216,   574,   143,
      99,   215,   851,  -216,   823,   745,   858,   495,     1,  1001,
     862,   556,   106,   912,   915,  1026,   873,    26,   528,   874,
     823,   862,   881,   823,   609,   848,   656,  1663,  1183,  1667,
    1045,  1185,     1,  1591,  1643,   542,   140,   141,  -216,   912,
     915,  1046,  1779,   971,  -216,   680,   745,   844,   831,  1788,
     835,   453,   453,   143,     1,  1011,   921,   202,  1013,   604,
     117,   912,   915,   948,   140,   141,   912,   915,   952,     1,
     912,   915,   157,   953,   515,  1681,  1537,   453,   453,  1478,
     178,  1690,   242,  1537,   931,   287,  1588,  1537,  1929,   966,
    1285,  1287,  1289,   178,     2,   143,   970,  1682,  1044,   453,
     453,  2114,  1050,  1691,   453,   453,  1057,  1776,   453,   453,
     287,  1850,   117,   117,   117,   180,   117,  1566,   407,   117,
    1349,  1351,  1353,   408,  1487,   677,  1488,   277,   849,   575,
     117,   117,   117,   512,   850, -1036,   143, -1036,     1,  -885,
     287,   823,   482,  1702,  1481,  1783,   453,   577,   453,   511,
       1,  1039,   536,   117,   773,   774,   143,  1031,   931,  1035,
    1443,  1720,  1101,     2,  1402,  1403,   117,  1032,  1729,  1036,
    1806,  1063,     1,   481,  1069,     1,  1075,     1,  1080,  1286,
    1288,  1290,     1,  1003,  1799,  1094,  1575,  1800,  1037,  1409,
    1409,  1832,  1420,  1422,   886,   287,   678,   892,  1994,  1003,
     657,   657,   657,   657,  1580,  1542,  1410,  1410,   569,  1350,
    1352,  1354,   169,  1524,  1530,  1534,   401,  1116,  1775,  1123,
     131,   687,   274,   661,   661,   661,   661,  1136,  1048,  1829,
    1828,     1,   107,   385,  1492,   572,   925,   170,   437,   275,
    1533,   437,  1177,  1179, -1076,  1235,  1529,  2121,   576,   634,
     634,   634,   634,   514,   437,   139,   437,   367,   437,   372,
     869,  1093, -1082,  2125,  2161,     1,   578,   143,  1171,   149,
    1812,  1535,  1815,   793,   794,   795,   117,     1,  1817,  1254,
     917,     1,   556,  1168,  1169,  2179,   747,   748,   749,  1188,
    1012,   140,   141,  1014,  1803,  2189,   925,  -476,  -476,  -476,
    2111,  2058,   691,  1211,  2112,   153,  1731,   175,  2113,  1536,
    1216,  1226,   536,  1236,  1216,  1226,   154,   925,  2161,   691,
     967,  1188,  1593,   838,  1058,  1599,   968,   571,  -476,  -476,
    -476,  1045,  1249,  -477,  -477,  -477,  1241,  1242,  1243,   972,
     972,   972,  1046,  -878,  1319,     1,  1767,  1272,  1768,  1574,
     839,  1279,   693,   696,   574,  1577,   684,   178,   178,    45,
       1,  1578,   283,  1640,   925,   684,  1792,  1579,  1941,   693,
     696,   684,  1385,  1323,   140,   141,   223,  1159,  1163,  1159,
    1163,   796,  1440,  1928,   745,   964,   140,   141,  1935,   797,
     140,   141,   798,  1339,   750,   690,   515,  1344,   918,  1044,
    1473,  1389,   751,   575,   378,   752,  1428,   518,  1537,   151,
    1793,   152,   690,  -476,  1437,   379,  -476,   656,   656,   656,
     656,   777,  1404,   143,  1407,  1451,   890,   823,   823,   823,
     242,     1,  1495,  1496,  1461,  1462,  1504,  1463, -1051, -1051,
    1465,  1466,  1533, -1051,  -476,  1178,  1180,  1181,  1529,  -477,
     399,  1423,   202,  1996,   140,   141,   966,  1746,   143,   970,
    1477,  1747,  -878,   929,   287,  1543,   157,  1433,   556,   377,
    1472,  1136,   703,  1535,     1,   556,  2018,  1448,  1450,  1325,
    1452,     1,   823,  1530,  1534,   575,  1799,  1800,  1566,   686,
    1530,  1534,   401,  1758,  1530,  1534,   175,  1747,   686,     2,
    1548,  1551,   213,   738,   686,   288,   674,  1391,   115,  1498,
    1540,  1536,  1515,     1,   779,   780,   130,  1486, -1076,   117,
     384,   143,   576,   514,     1,   202,     1,  1505,   117,   372,
    1507,   677,  1506,  1485,  1568,  1508,   117,  1316,   117,  1489,
     140,   141,   372,    26,   213,  1569,  1327,   969,   143,   921,
     399,     2,   404,     1,   437,   437,   405,   495,   495,   513,
     482,     1,   453,   482,  1326,  1382,   946,  1324,   495,  1511,
     143,  1513,   496,  1500,  1393,  1737,     1,  1328,     2,     1,
     437,   437,  1426,  1501,  2015,  1320,    46,  -216,   968,  1558,
     140,   141,  1392,   912,   915,  1390,   117,   912,   915,  1797,
   -1076,   964,   437,   437,   576,  1394,  1573,   437,   437,   531,
    1537,   437,   437,  1386,  2068,   781,   782,  -476,  -476,  -476,
    1839,   512,   140,   141,  1949,  2003,  1833,   482,   482,  1899,
    1922,   453,   453,   140,   141,   453,   453,   453,   703,   143,
    1512,   545,   117,   117,  1205,  1206,  1207,   770,  1554,   437,
     657,   437,   117,   657,   117,   202,   536,  1611,  1555,     1,
     823,   100,  1832,   143,  1738,   541,   823,   771,   772,   143,
     140,   141,   823,   661,   373,   143,   661,  1895,   823,   546,
     143,  1896,     1,   931,   100,   374,   674,   101,   140,   141,
    -216,   657,  2083,  1703,   143,  1427,  -216,   800,   745,   634,
     807,   808,   634,  1777,  1704,   657,   657,   657,   657,  1055,
     385,  1116,  1787,  1123,   661,  1307,  1311,   801,   802,   385,
    1056,  1003,  1625,   907,   908,  -476,   852,   547,   661,   661,
     661,   661,  1571,  -476,   579,  1638,  -476,   552,  2018,  1083,
     634,  1279,  1676,  1373,  1377,   580,  1002,  1516,   582,  1005,
    1634,   684,  1208,   584,   634,   634,   634,   634,  2153,  1698,
    1209,   585,  2112,  1210,  1084,  1706,  2154,  -478,  -478,  -478,
     783,   784,   453,   453,   117,   909,   117,  2090,  2166,  2091,
    1085,  1911,   803,   804,   477,  1747,   823,  1726,   143,   824,
     663,   140,   141,   128,   478,   823,   901,   902,   703,  1679,
    2171,   809,   810,  1684,  2112,  1688,    98,   925,  2172,  1693,
    1086,  1087,   150,   399,   202,  1530,  1534,   683,   903,  1853,
    1857,  -754,   904,  -754,   905,  1308,  1312,     1,   859,   496,
     712,  1869,  1714,   868,  2071,  1429,     1,  1839,   100,  1714,
     713,   968,   875,   403,     1,   882,  1083,   925,   906,   143,
     925,   785,     2,  1374,  1378,    69,   716,     1,  -264,  -264,
    -264,  -652,  1669,  -652,   664,  1299,  1301,   656,  1303,   381,
     656,  1084,   382,   742,  1915,  1739,   488,  2053,  1747,   933,
     501,  1267,     2,  -478,   686,   949,   191,  1085,  2127,   717,
    -914,   115,  2128,  1363,  1365,  1367,  1369,   192,    28,    29,
    2168,  1566,   718,    32,  2112,  2187,  1175,   719,   656,  2112,
      38,  2019,   674,  2188,     1,    28,    29,  1086,  1087,   720,
      32,  2048,   656,   656,   656,   656,  2170,    38,    28,    29,
    2112,   745,   173,    32,    43,    44,   401,   401,   787,     2,
      38,   786,    69,  1083,    32,  1657,   155,  1658,  1805,    69,
      69,    43,    44,   738,   850,   529,    46,   530,   788,  1088,
     568,  1291,  1293,   213,    43,    44,    45,   813,  1084,    46,
    -264,  1558,   792,   213,  -264,    43,    44,  1807,   920,   814,
     738,  1808,   815,   968,  1085,    28,    29,   968,   738,  1483,
      32,  1355,  1357,   213,  1295,  1297,   213,    38,   213,  -651,
     213,  -651,  1765,  1766,    28,    29,  1769,   143,   738,    32,
     816,   823,   823,  1919,  1086,  1087,    38,  1530,  1534,   850,
       1,    43,    44,   143,  1359,  1361,  1770,  1423,  1513,  1995,
     533,   399,   530,  1802,   843,   850,   401,  1780,    32,   117,
      43,    44,  1638,  2185,   820,     2,   117,  2112,   778,  1514,
     840,  1789,   143,   117,   115,  2006,  1583,  1292,  1294,   828,
    1584,   850,   912,   915,   841,   437,  2060,  2065,   560,    43,
      44,  2186,   850,   850,   117,  2112,  1796,   883,  2118,   117,
    2120,   242,   117,   829,  2082,   143,   871,  1356,  1358,  2031,
     850,    28,    29,  2129,   399,   242,    32,  1833,   674,   850,
     453,   453,  1025,    38,     1,   823,   823,   823,   823,  2163,
    1097,  -884,   530,  -884,  -884,   893,   912,   915,  2190,   403,
    -925,   173,  2112,  1846,   900,    28,    29,    43,    44,    45,
      32,   173,   551,    69,   437,   437,   910,    38,   437,   437,
     437,  2196,  2148,   552,  2150,  2112,  2152,   657,   657,   925,
     925,  1646,  1647,  1648,   453,   453,   950,   117,  1175,   657,
     957,    43,    44,   775,   776,   117,   730,   387,   958,   128,
     661,   661,   745,  2019,  1140,  1172,   556,   136,  -884,   674,
     805,   806,   661,  2174,  2175,  1271,  2177,     1,  1931,  -884,
    1278,   959,     1,  -925,  -925,   960,   634,   634,  -925,  1932,
    1338,  2184,     1,  1457,  1459,  -925,  1116,   963,   634,  1116,
    -894,  -894,  1116,  1019,  -884,  -894,  1625,  2194,   130,  1343,
    1116,     1,  -894,  1116,   844,  1520,   674,  1521,   192,  -925,
    -925,   372,  1003,  1020,  -884,  -884,  -884,  -925,  1879,  -925,
    -913,  1678,   745,     1,  1620,  1021,  -894,  -894,  1136,   824,
     824,   824,   811,   812,  1893,   495,  1016,  1018,   745,   560,
    1683,  1934,     1,  1937,  2107,  1027,  2110,  1687,  1692,     1,
       1,  1028,   404,   404,   213,   437,   437,  1945,  1947,  1518,
     381,  1519,   753,   754,   755,   756,   757,   758,   759,   760,
     761,   762,  1296,  1298,   745,     1,  1882,  1826,   128,   401,
    1053,  1821,  1822,  1824,  1825,  1458,  1460,   399,  1060,   202,
    1066,   560,   399,  -913,  -913,  1001,  1998,     1,  -913,  1095,
       2,  1072,  1360,  1362,  1078,  -913,   973,   974,   975,   115,
    1249,  2145,  1950,  1951,  1154,  1156,  1155,  1157,   279,   282,
    1411,  1412,     2,  1096,  1015,  1017,  1098,  1476,  1102,  -913,
    -913,   560,  1103,  1124,  1125,  1173,  1104,  -913,  -913,  -913,
    1122,  2013,  1133,  1134,   656,   656,    28,    29,  1404,  1137,
    1138,    32,   404,  1139,  1184,  1213,   656,   399,    38,   496,
     496,   117,   117,   763,   117,  1255,  1267,  1413,    28,    29,
     496,  1431,  1494,    32,  1455,  1414,   143,  1415,  1416,  1417,
      38,  1418,    43,    44,  1656,  -970,  1005,   551,   374,   453,
    1430,   453,    18,    19,   823,  1447,  1456,   657,   552,  1474,
    2007,  -746,  2010,  -749,    43,    44,  1559,  1560,  1561,  1581,
    2008,  1562,  2011,  1563,  1564,   453,   548,   453,   117,  1582,
     661,   520,    28,    29,  1586,  1587,  2021,    32,  2023,  1596,
    1597,   738,  2164,  1613,    38,  1612,  2022,  1614,  2024,  1616,
    1116,  1116,  1116,  1116,  1621,  1629,   634,  1630,  1631,  1635,
    1116,  1116,  1655,  1116,   407,  1116,  1659,   213,    43,    44,
      45,  1670,   213,  1677,  1707,  1696,  1711,  1116,  1576,  2070,
    1709,  1214,  1300,  1302,  1576,  1304,  1136,  1712,  2077,  1638,
     213,  1722,  1723,  1724,  1727,  1003,  1754,  1735,  1730,  2046,
    1734,  2046,  1736,   401,    28,    29,  1741,   401,  1748,    32,
    1364,  1366,  1368,  1370,  1757,  1762,    38,  1764,  1786,  1790,
       1,  1804,  1809,  1840,  1843,  1818,  1841,   173,   399,  -752,
     536,  2165,  1842,  1849,  1193,  1876,  1844,  1870,  1845,  1871,
      43,    44,  1880,  1897,  2085,  2087,  1901,  1894, -1031,   521,
   -1031,  1898,  1926,   403,   403,  1908,  1903,   730,  1905,   912,
     915,  1907,   912,   915,  1909,  1912,  1193,  1918,  1923,  1924,
     401,  1925,  1927,   912,   915,   912,   915,  1252,  1938,  1993,
    1939,  -231,   657,  1942,   657,  1943,  1948,  2000,   401,  1997,
    2004,  -894,  -894,   437,   437,  2001,  -894,   453,   453,   453,
     453,   453,   823,  -894,   823,   661,  2005,   661,  2009,  2033,
    2088,   453,   453,   453,   453,  2012,  2014,   128,  2047,  2059,
    2089,  2052,  1116,  2061,   656,   404,   213,  -894,  -894,  2062,
    2078,   634,  2063,   634,  2079,  2064,  2066,  2067,  2072,   745,
     912,   915,  1136,  1638,  2158,  2159,  2073,   437,   437,   657,
    2074,  2075,  2080,   403,  2081,    51,   128,  2095,  2046,  1175,
    2046,  2096,  2119,  2126,  2130,  2132,  2131,  2133,  2134,   560,
     568,  2135,   661,  2141,  2146,  2151,   128,  2169,   453,   453,
    2162,  2173,  2176,  2181,  2182,  1116,  1116,  2183,  2178,  1116,
    2191,  1116,  2192,  2193,  1116,  2195,   108,  2197,   634,  1656,
    1816,  1509,  1005,   941,   560,   669,   942,   943,    51,    18,
      19,   944,  1638,   560,  1136,   145,   947,   670,  1136,  1419,
     560,  2046,  2046,  1464,  2046,   730,  2046,   560,   722,   723,
    1116,  1499,    51,    28,    29,    51,  1794,  1239,    32,    28,
      29,   243,    51,   878,    32,    38,   714,   870,  2016,    51,
      51,    38,  1136,  1638,   602,  1059,  1247,  1116,  2147,   267,
     278,   269,    51,  2046,  2046,   368,  2046,   271,  1136,    43,
      44,    45,   281,   650,  1214,    43,    44,    51,   560,   382,
    1131,  2046,  1992,   401,     0,   393,     0,     0,   401,     0,
     393,   243,     0,   393,   560,     0,     0,  2046,     0,   656,
       0,   656,     0,   243,     0,    51,   393,   243,   393,     0,
     393,   684,   684,     0,   684,   684,     0,     0,     0,   684,
     684,   684,   684,   824,   824,     0,     0,     1,    28,    29,
       0,     0,     0,    32,     0,   243,   243,     0,     0,   404,
      38,     0,     0,   404,    28,    29,     0,   393,     0,    32,
       0,     0,     2,   401,     0,     0,    38,     0,     0,   543,
       0,   115,     0,     0,    43,    44,   656,     0,    51, -1050,
   -1050,   606,   610,     0, -1050,     0,     0,     0,     0,     0,
      43,    44,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,
    -476,  -476,  -476,     0,   401,     0,     0,     0,    28,    29,
      80,     0,   437,    32,   437,     0,   404,     0,   243,     0,
      38,   243,   243,   630,     0,     0,   403,   404,  1814,   404,
    1814,    51,     0,     0,     0,     0,     0,     0,   437,     0,
     437,    51,   243,    51,    43,    44,    45,     0,     0,    46,
    1470,     0,     0,     0,  1961,  1965,    80,  1971,  1975,    18,
      19,   243,  1979,  1983,  1987,  1991,     0,   243,   684,   684,
     684,   684,   684,   684,   684,   684,   393,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    80,    80,    28,
      29,     0,    18,    19,    32,    80,     0,    80,  -476,  -476,
       0,    38,     0,     0,    80,    80,     0,     0,  -476,     0,
       0,  1656,  1005,  -476,  -476,  -476,     0,  -476,  -476,  -476,
    -476,  -476,    28,    29,   401,    43,    44,    32,    28,    29,
    1619,     0,    51,    32,    38,    80,    80,   393,     0,   393,
      38,     0,    28,    29,     0,     0,     0,    32,     0,     0,
    1674,     0,     0,     0,    38,     0,     0,     0,    43,    44,
      45,     0,     0,     0,    43,    44,     0,     0,   684,    51,
     389,   393,    51,     0,     0,   243,    51,   496,    43,    44,
       0,   872,     0,     0,   845,    51,   243,    80,    51,   738,
     738,   738,   738,   738,   738,   738,   738,     0,     0,     0,
       0,   686,   686,   686,   686,   686,   686,   686,   686,     0,
     437,   437,   437,   437,   437,     0,   393,   393,    28,    29,
    1008,    51,    51,    32,   437,   437,   437,   437,   393,   404,
      38,   213,    80,   951,   404,    80,     0,     0,   243,     0,
     403,     0,   393,   393,   403,     0,     0,   606,     0,     0,
     606,     0,     0,     0,    43,    44,     0,     0,     0,     1,
     846,    51,     0,    80,   393,   393,     0,    28,    29,   393,
     393,     0,    32,   393,   393,     0,    80,     0,     0,    38,
     630,     0,     0,     0,     2,     0,    80,   243,    80,   738,
     243,   437,   437,   186,   187,     0,     0,     0,     0,   404,
     382,   686,     0,    43,    44,    45,    51,   403,   852,     0,
     961,   393,  -667,   393,     0,     0,    51,   393,     0,   552,
       0,     0,     0,   568,     0,   403,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,    51,  -667,     0,    51,
       0,    51,    38,    51,     0,     0,  -667,  -667,     0,     0,
      51,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   711,     0,    43,    44,    45,     0,
     715,    46,     0,     0,   606,   610,  1160,  1164,     0,     0,
       0,     0,   643,  -667,  -667,     0,     0,     0,  -667,     0,
      80,     0,     0,   455,     0,  -667,   455,     0,     0,     0,
       0,     0,     0,     0,   606,     0,     0,     0,     0,   455,
       0,   455,     0,   455,   630,   630,   630,   630,     0,  -667,
    -667,  -667,     0,  1847,  -667,     0,     0,   962,     0,   960,
    -667,   560,    80,     0,     0,     0,     0,     0,     0,   832,
       0,   836,   243,   243,   243,     0,     0,    51,     0,  1277,
      60,   996,     0,     0,   393,     0,     0,   344,     0,     0,
     404,     0,     0,     0,     0,     0,     0,     0,   243,     0,
       0,     0,     0,     0,     0,   243,   243,   393,     0,   243,
     243,     0,     0,     0,     0,     0,   393,     0,     0,     0,
       0,     0,     0,     0,     0,  1277,     1,    51,     0,     0,
     630,     0,     0,     0,     0,     0,     0,   630,     0,     0,
     630,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     403,     2,    80,    80,    80,   403,    80,    60,     0,    80,
     115,   560,     0,     0,   404,     0,   404,    60,     0,     0,
      80,    80,    80,     0,    60,    60,     0,     0,  -476,     0,
     884,  -476,  -476,  -476,  -476,  -476,  -476,  -476,  -476,     0,
       0,    80,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,     0,    38,
       0,     0,     0,     0,     0,     0,   468,     1,     0,    51,
     403,     0,    51,    51,    51,     0,     0,     0,   468,     0,
       0,     0,   468,    43,    44,    45,     0,     0,    46,   637,
       0,     0,     2,     0,     0,   393,   393,    51,     0,  1049,
       0,   115,     0,     0,    51,     0,     0,     0,     0,     0,
       0,   403,   243,    51,     0,     0,     0,     0,     0,  1212,
      51,     0,     0,   243,     0,   393,     0,    51,     0,     0,
       0,     0,     0,     0,  -476,  -476,     0,     0,    28,    29,
       0,     0,     0,    32,  -476,   741,     0,     0,     0,     0,
      38,   996,     0,  -476,  -476,  -476,  -476,  -476,   996,  1100,
       0,   996,     0,     0,     0,   730,    80,   607,   611,     0,
      51,     0,    80,     0,    43,    44,     0,     0,    51,    46,
       0,     0,     0,     0,     0,  1008,     0,     0,     0,   455,
     455,     0,     0,     0,    51,   393,    60,     0,     0,     0,
       0,     0,    51,    51,     0,     0,    60,   393,    60,     0,
       0,     0,     0,    51,     0,   455,   455,     0,     0,     0,
       0,  1118,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   403,     0,   630,   243,   630,     0,   455,   455,     0,
       0,   243,   455,   455,     0,     0,   455,   455,     0,   560,
       0,     0,     0,   643,   643,   643,   643,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   393,   393,     0,     0,
     393,   393,   393,     0,   455,     0,   455,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    70,
      51,   393,     0,     0,  1594,    51,     0,  1600,     0,     0,
       0,    51,     0,     0,     0,     0,     0,    51,     0,     0,
       0,  1645,     0,    51,     0,  1650,     0,     0,  1652,     0,
    1654,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     468,   630,     0,     0,   630,  1641,     0,   630,     0,     0,
       0,   468,  1007,     0,     0,     0,     0,     0,     0,  1160,
    1164,  1160,  1164,     0,     0,     0,     0,    82,     0,     0,
      80,     0,     0,     0,     0,   730,    70,     0,     0,     0,
       0,  1277,   606,     0,   606,   630,    70,  1277,     0,     0,
       0,     0,     0,    70,    70,     0,     0,     0,     0,   630,
     630,   630,   630,   468,   996,   996,   996,     0,     0,    80,
       0,     0,     0,   125,     0,  1092,     0,   393,   393,     0,
       0,     0,   243,     0,   243,     0,     0,     0,     0,    80,
       0,    51,     0,   607,     0,   471,   607,     0,     0,     0,
      51,     0,     0,   158,   176,   189,     0,   471,   637,     0,
       0,   471,   225,     0,    82,     0,     0,   243,   393,    51,
       0,    82,    82,     0,     0,     0,     0,  1471,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   243,     0,     0,
     637,   637,   637,   637,   243,     0,     0,     0,     0,     0,
       0,     0,   189,   386,   388,   390,   391,     0,     0,     0,
       0,     0,   459,   243,   630,   459,  1497,     0,     0,     0,
     243,   630,   996,     0,   243,   630,     0,     0,   459,     0,
     459,     0,   459,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    80,    80,     0,  1484,     0,     0,     0,     0,
       0,     0,     0,     0,   519,   388,   390,  1240,     0,     0,
       0,  1244,     0,     0,     0,     0,     0,     0,     0,     0,
     607,   611,  1161,  1165,     0,    70,   470,     0,     0,     0,
       0,     0,     0,     0,     0,    70,     0,    70,   470,   549,
     564,   741,   470,     0,     0,     0,     0,     0,     0,     0,
     607,     0,     0,     0,     0,  1283,     0,     0,     0,     0,
       0,     0,     0,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,    60,     0,     0,     0,     0,     0,     0,     0,
     600,     0,  1337,     0,     0,     0,     0,   741,     0,     0,
    1348,     0,     0,   176,     0,     0,     0,   455,   455,     0,
       0,     0,     0,   675,     0,    82,     0,     0,     0,     0,
    1401,     0,     0,     0,  1610,     0,    51,    51,     0,     0,
       0,     0,     0,     0,    80,     0,    80,     0,     0,     0,
       0,     0,   393,     0,   996,   996,   393,     0,     0,     0,
       0,   996,   996,   598,     0,   996,   996,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     455,     0,     0,   643,     0,     0,   643,     0,     0,   471,
       0,     0,     0,     0,     0,  1118,     0,     0,   630,     0,
     471,    51,     0,     0,  1008,     0,   708,     0,     0,     0,
       0,     0,   708,     0,     0,     0,     0,     0,     0,   393,
       0,     0,     0,     0,   643,   393,   393,   386,   388,   390,
      51,    51,    51,    51,     0,     0,     0,     0,   643,   643,
     643,   643,  1705,     0,     0,     0,     0,     0,     0,   455,
     455,   853,   471,   455,   455,   455,     0,     0,   459,     0,
       0,     0,     0,     0,  1725,     0,     0,     0,     0,   125,
       0,     0,     0,     0,     0,     0,     0,   468,     0,   393,
     393,  1854,  1858,     0,     0,     0,     0,    48,   468,     0,
       0,     0,     0,     0,  1594,     0,     0,  1600,   459,   459,
       0,    51,     0,   927,     0,  1641,     0,   938,     0,     0,
     459,     0,     0,     0,     0,   243,   630,  1007,     0,   158,
     865,   630,   630,     0,   459,   459,     0,     0,     0,     0,
       0,   865,     0,     0,   630,     0,     0,   630,     0,     0,
       0,     0,     0,   853,     0,   630,   459,   459,     0,     0,
       0,   459,   459,     0,     0,   459,   459,     0,     0,   189,
     189,   189,     0,     0,   164,     0,     0,     0,     0,   996,
       0,     0,     0,     0,    48,     0,     0,   189,   189,     0,
      51,    48,    48,   956,     0,     0,     0,     0,     0,     0,
     455,   455,     0,   459,     0,   459,     0,     0,  1042,     0,
    1051,     0,     0,     0,     0,     0,  1955,     0,     0,     0,
     637,  1650,     0,   637,  1654,   390,     0,     0,     0,     0,
       0,     0,   637,    80,     0,     0,     0,     0,     0,     0,
       0,     0,   393,     0,    51,     0,     0,   393,     0,     0,
       0,     0,     0,     0,  1636,  1637,     0,     0,     0,     0,
       0,   637,     0,  1283,     0,    51,     0,  1649,     0,     0,
    1348,    70,  1653,     0,     0,   637,   637,   637,   637,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1008,     0,
       0,   454,     0,     0,   454,     0,   996,   996,     0,  1008,
    1595,     0,     0,  1601,     0,     0,     0,   454,     0,   454,
     554,   454,   393,     0,     0,   290,     0,     1,   291,   100,
    1801,     0,     0,   741,     0,     0,     0,   243,   630,   741,
       0,     0,     0,  1176,     0,     0,     0,    80,     0,   675,
       0,  1642,     2,     0,   393,     0,   393,     0,     0,    51,
       0,     0,     0,     0,     0,  1161,  1165,  1161,  1165,     0,
       0,     0,     0,   164,     0,  1854,  1858,  1222,     0,     0,
     393,  1222,   393,   164,     0,    48,     0,     0,   607,   295,
     607,     0,     0,  1743,     0,   296,   297,     0,     0,   853,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   300,
       0,     0,     0,     0,     0,   630,   630,     0,     0,     0,
       0,     0,   301,     0,   635,     0,   302,   303,   304,   305,
     306,   307,   308,     0,     0,     0,     0,     0,     0,   698,
    1220,  1230,     0,     0,  1220,  1230,     0,     0,     0,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   471,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   471,     0,     0,
       0,     0,     0,   393,     0,   393,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1008,     0,     0,     0,     0,
     643,   643,     0,     0,     0,     0,     0,     0,   996,   996,
    1118,   554,  1118,   643,     0,     0,   643,     0,     0,  1424,
       0,     0,     0,     0,   643,     0,   853,  1118,     0,     0,
       0,     0,     0,   158,   853,  1438,     0,     0,   455,   455,
       0,     0,  1445,     0,     0,   853,     0,  1453,     0,     0,
       0,     0,   393,   393,   393,   393,   393,    51,  1933,    51,
    1936,     0,     0,   554,     0,     0,   393,   393,   393,   393,
       0,  1008,     0,     0,  1944,  1946,     0,  1810,     0,  -656,
       0,     0,     0,     0,     0,     0,   125,     0,     0,     0,
       0,     0,   455,   455,     0,  1482,     0,  1436,     0,     0,
     564,     0,     0,   554,  -656,     0,   125,     0,  1436,     0,
       0,     0,     0,  -656,  -656,     0,   927,   454,   454,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    80,   459,
       0,     0,     0,   393,   393,     0,     0,     0,     0,   388,
       0,     0,     0,   454,   454,  1007,     0,     0,     0,     0,
    -656,  -656,     0,     0,     0,  -656,     0,     0,     0,     0,
       0,     0,  -656,   927,     0,   454,   454,     0,     0,     0,
     454,   454,     0,     0,   454,   454,  1007,     0,     0,     0,
       0,   993,     0,     0,     0,     0,  -656,  -656,  -656,     0,
       0,  -656,     0,     0,  1811,     0,   960,  -656,   459,   459,
       0,     0,   459,   459,   459,     0,     0,     0,     0,  1556,
     386,     0,   454,     0,   454,     0,     0,     0,     0,     0,
     390,     0,     0,     0,     0,     0,   598,   637,   637,     0,
       0,     0,     0,     0,     0,     0,     0,   637,     0,   637,
     637,     0,     0,   637,     0,     0,     0,     0,     0,     0,
       0,   637,     0,     0,   637,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1118,  1118,  1118,  1118,     0,     0,
    1118,     0,     0,     0,   643,   643,     0,  1118,     0,  1118,
       0,     0,     0,   635,     0,     0,  2069,     0,     0,   164,
       0,  1118,     0,     0,     0,  2076,  1187,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1855,  1859,     0,
       0,     0,     0,     0,     0,   635,   635,   635,   635,     0,
     611,     0,     0,   611,     0,     0,     0,     0,  1187,     0,
       0,   611,     0,     0,     0,     0,     0,     0,     0,   459,
     459,     0,     0,     0,     0,     0,     0,   455,     0,   455,
       0,  2084,  2086,  1007,     0,     0,     0,     0,     0,     0,
       0,     0,   853,     0,     0,  1952,     0,     0,   913,   916,
       0,     0,     0,   455,     0,   455,     0,     0,  1743,   853,
       0,  1701,     0,  1649,     0,     0,  1653,     0,     0,     0,
       0,     0,     0,     0,   913,   916,     0,     0,     0,  1222,
       0,   993,     0,     0,     0,     0,  1222,     0,   993,     0,
       0,   993,     0,     0,     0,     0,   913,   916,     0,     0,
       0,   913,   916,     0,     0,   913,   916,     0,     0,     0,
       0,   554,     0,     0,     0,     0,  1118,     0,     0,   767,
      76,     0,   598,     0,     0,  1118,     0,  1118,     0,     0,
    1007,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1007,  1718,     0,     0,     0,   554,     0,     0,  1718,
       0,     0,     0,     0,     0,   554,     0,     0,     0,     0,
       0,     0,   554,     0,     0,     0,     0,     0,     0,   554,
       0,   637,   637,   637,   637,     0,     0,   637,     0,  1118,
    1118,   637,   637,  1118,   637,  1118,   637,     0,  1118,     0,
       0,     0,  1118,     0,     0,     0,     0,    76,   637,     0,
       0,     0,     0,     0,     0,     0,     0,    76,  2054,  2055,
       0,     0,     0,     0,    76,    76,     0,     0,     0,     0,
     554,     0,     0,     0,  1118,   455,   455,   455,   455,   455,
       0,     0,     0,     0,     0,     0,   554,     0,     0,   455,
     455,   455,   455,     0,     0,   454,   454,     0,     0,     0,
       0,  1118,     0,     0,     0,     0,   472,     0,     0,     0,
       0,   611,   611,     0,     0,     0,     0,     0,   472,     0,
       0,  1773,   472,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1782,   120,     0,     0,
       0,     0,     0,   386,     0,     0,     0,     0,     0,     0,
     189,     0,     0,     0,     0,     0,   455,   455,   454,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   174,   120,
       0,  1795,     0,   564,     0,     0,   224,  1007,     0,     0,
       0,     0,     0,     0,   993,     0,   993,     0,     0,     0,
       0,     0,     0,   637,     0,     0,     0,   459,   459,     0,
       0,     0,   637,     0,   637,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   120,   120,     0,   436,
     329,     0,   436,     0,     0,     0,     0,   454,   454,     0,
       0,   454,   454,   454,     0,   436,    76,   436,     0,   436,
       0,     0,     0,     0,   400,     0,    76,     0,    76,     0,
       0,   459,   459,  1007,   386,     0,   637,   637,     0,     0,
     637,  1128,   637,     0,     0,   637,     0,     0,   517,   637,
       0,     0,     0,   564,     0,  2149,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   993,  1007,     0,   635,     0,     0,   635,     0,
       0,   637,     0,     0,     0,     0,   400,   635,     0,     0,
       0,     0,     0,   581,     0,     0,   583,     0,     0,     0,
       0,     0,     0,  1668,     0,     0,     0,     0,   637,     0,
       0,     0,  1671,     0,     0,     0,   635,     0,     0,     0,
       0,     0,     0,     0,   120,     0,     0,     0,     0,     0,
     635,   635,   635,   635,     0,     0,     0,   174,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   454,   454,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     866,     0,     0,     0,     0,     0,     0,     0,     0,  1274,
       0,   866,     0,     0,     0,     0,     0,     0,  1920,     0,
       0,     0,   400,     0,     0,     0,     0,   699,   701,     0,
       0,   400,     0,     0,     0,     0,     0,   400,     0,     0,
       0,     0,  1306,  1310,  1314,  1318,  1322,     0,   329,  1331,
       0,     0,     0,     0,     0,  1274,     0,     0,     0,     0,
       0,     0,     0,   866,   400,     0,     0,     0,     0,   400,
    1372,  1376,  1380,  1384,  1388,   993,     0,  1331,     0,     0,
       0,     0,   993,     0,     0,     0,   993,     0,     0,     0,
       0,   120,     0,     0,     0,     0,     0,     0,   913,   916,
       0,     0,   913,   916,     0,     0,   400,     0,   400,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   459,     0,   459,     0,
       0,   853,     0,   120,     0,     0,     0,     0,     0,     0,
     400,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   459,     0,   459,   436,   436,     0,     0,     0,
       0,     0,     0,     0,   390,     0,     0,   945,     0,     0,
       0,   224,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   436,   436,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   436,   436,     0,     0,     0,   436,   436,
       0,     0,   436,   436,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   120,   120,   120,     0,  1000,     0,     0,
     583,     0,     0,   554,     0,     0,     0,     0,     0,     0,
       0,   120,   120,   120,     0,     0,     0,     0,     0,   400,
     436,     0,   436,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    76,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   400,     0,     0,   993,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   739,   454,   454,   329,     0,
       0,     0,     0,     0,   459,   459,   459,   459,   459,     0,
       0,   766,     0,   554,     0,   993,     0,   993,   459,   459,
     459,   459,     0,     0,     0,     0,   400,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     454,   454,     0,  1617,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1644,     0,     0,     0,   459,   459,   993,  1651,     0,
       0,     0,   635,   635,     0,     0,     0,   400,     0,     0,
       0,     0,   635,  1189,   635,   635,     0,     0,   635,     0,
       0,     0,     0,     0,     0,     0,   635,     0,     0,   635,
       0,     0,  1331,     0,  1331,     0,     0,     0,     0,     0,
     329,     0,     0,     0,   329,  1245,     0,   866,     0,     0,
       0,  1274,     0,     0,     0,     0,     0,  1274,   866,   400,
       0,     0,     0,     0,     0,     0,   400,     0,     0,   400,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,     0,
       0,     0,     0,     0,   400,   400,   400,   400,   400,   400,
     400,     0,     0,   400,   400,     0,   400,   400,   400,   400,
     400,   400,   400,   400,     0,   329,     0,     0,     0,     0,
       0,     0,     0,   329,   400,   400,   400,   400,   400,   400,
     400,   400,   400,   400,   400,   400,   400,   400,   400,   400,
     400,   400,     0,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   913,   916,     0,
       0,   554,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   400,   400,     0,     0,     0,     0,
       0,   120,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   993,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   913,   916,  1127,     0,   454,     0,   454,     0,     0,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   581,     0,   583,
     120,   454,   400,   454,   400,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   347,     0,   436,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   635,   635,   635,   635,
       0,     0,   635,     0,   400,     0,   635,   635,   402,   635,
       0,   635,     0,   400,     0,  1119,     0,     0,     0,     0,
       0,     0,     0,   635,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   400,     0,   400,     0,     0,     0,     0,  1158,
    1162,     0,     0,     0,     0,   436,   436,     0,     0,   436,
     436,   436,     0,     0,     0,     0,     0,     0,     0,     0,
     402,   739,     0,   120,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1282,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1305,  1309,  1313,  1317,  1321,     0,
     400,  1330,  1336,     0,     0,     0,     0,   739,     0,     0,
    1347,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1371,  1375,  1379,  1383,  1387,     0,     0,  1330,
    1400,     0,     0,   454,   454,   454,   454,   454,     0,     0,
     400,     0,     0,     0,     0,     0,     0,   454,   454,   454,
     454,   400,     0,     0,     0,     0,   402,     0,   635,     0,
       0,   700,   702,     0,     0,   402,     0,   635,     0,   635,
       0,   402,     0,     0,     0,     0,     0,   329,   329,     0,
       0,     0,   347,     0,     0,     0,   436,   436,     0,     0,
       0,     0,     0,     0,     0,   581,     0,   583,   402,     0,
       0,     0,     0,   402,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   454,   454,     0,     0,     0,     0,
       0,   635,   635,     0,     0,   635,     0,   635,     0,     0,
     635,     0,     0,     0,   635,     0,     0,     0,     0,     0,
     402,     0,   402,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   400,     0,   400,
       0,     0,     0,     0,     0,   290,   635,     1,   291,   100,
     292,     0,   293,   294,   402,     0,     0,     0,     0,     0,
       0,   400,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   635,     0,     0,   359,     0,     0,   400,
       0,   115,     0,   400,     0,     0,   329,     0,     0,     0,
     400,     0,     0,     0,   400,     0,  1954,     0,     0,     0,
       0,  1957,  1959,  1963,  1967,  1969,  1973,     0,     0,   295,
    1977,  1981,  1985,  1989,     0,   296,   297,   298,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   299,   300,
      38,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   879,     0,     0,   880,
     724,   312,   538,   402,   913,   916,     0,   913,   916,   313,
     314,     0,   315,   316,   317,   318,     0,     0,   913,   916,
     913,   916,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     402,     0,     0,     0,     0,  1127,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,   347,  1282,     0,     0,     0,     0,     0,     0,
    1347,     0,     0,     0,   238,   913,   916,     0,     0,     0,
       0,   400,    28,    29,   120,   400,     0,    32,     0,     0,
     402,     0,     0,   239,    38,   240,     0,  1592,     0,     0,
    1598,     0,     0,     0,  1330,     0,  1330,     0,   241,  1615,
       0,     0,     0,     0,   359,     0,     0,     0,    43,    44,
       0,     0,     0,   739,   436,   436,     0,   400,     0,   739,
     242,     0,     0,     0,     0,     0,     0,   400,  1639,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   400,     0,
       0,     0,  1158,  1162,  1158,  1162,     0,     0,     0,     0,
       0,   402,     0,     0,     0,     0,   400,  1190,   329,     0,
       0,     0,   538,   400,   538,   400,     0,     0,   436,   436,
       0,     0,     0,  1742,     0,     0,     0,     0,   120,     0,
       0,     0,   400,     0,   347,     0,     0,     0,   347,  1246,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   402,     0,     0,     0,     0,     0,     0,
     402,     0,     0,   402,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,     0,     0,   400,     0,     0,   402,   402,
     402,   402,   402,   402,   402,     0,     0,   402,   402,     0,
     402,   402,   402,   402,   402,   402,   402,   402,     0,   347,
       0,     0,     0,     0,     0,     0,     0,   347,   402,   402,
     402,   402,   402,   402,   402,   402,   402,   402,   402,   402,
     402,   402,   402,   402,   402,   402,     0,   347,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   995,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   402,   402,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   538,     0,     0,     0,     0,     0,     0,     0,
       0,   400,     0,     0,     0,   400,   400,   400,     0,     0,
       0,     0,     0,     0,     0,     0,   329,     0,     0,     0,
       0,   400,   400,     0,   359,     0,     0,     0,   329,     0,
       0,     0,     0,     0,     0,     0,   402,     0,   402,     0,
       0,     0,     0,     0,     0,     0,     0,   400,   400,     0,
     400,   400,   538,     0,     0,   400,   400,   400,   400,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   402,     0,
       0,   400,     0,   436,     0,   436,     0,   402,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   400,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   436,
       0,   436,     0,   605,     0,     0,   402,     0,   402,   120,
       0,     0,   400,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,   359,     0,     0,     0,
     359,     0,     0,     0,     0,     0,     0,     0,   238,     0,
       0,     0,     0,     0,   402,   995,    28,    29,     0,     0,
       0,    32,   995,     0,     0,   995,     0,   239,    38,   240,
       0,   329,   329,     0,   400,   400,   400,   400,   400,   400,
     400,   400,   241,     0,   359,     0,     0,     0,     0,     0,
       0,     0,    43,    44,   402,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   242,   402,     0,     0,     0,     0,
       0,   359,   400,   400,  1852,  1856,     0,     0,     0,   359,
       0,     0,   400,     0,  1865,     0,  1868,  1592,     0,     0,
    1598,   347,   347,     0,     0,     0,     0,     0,  1639,   359,
       0,  1881,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   436,   436,   436,   436,   436,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   436,   436,   436,   436,     0,
       0,     0,     0,     0,   400,     0,     0,     0,   400,   400,
       0,     0,     0,     1,     0,     0,     0,     0,  1742,     0,
       0,     0,     0,  1956,  1958,  1962,  1966,  1968,  1972,     0,
       0,     0,  1976,  1980,  1984,  1988,     0,     0,     2,     0,
       0,   402,     0,   402,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,   436,   436,     0,   402,     0,     0,   995,     0,
     538,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,   402,    28,    29,     0,   402,     0,    32,
     347,     0,    35,    36,   402,    37,    38,    39,   402,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   538,
      40,     0,     0,     0,     0,     0,     0,     0,   329,     0,
      43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,     0,   995,     0,
     995,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,  1958,  1962,  1968,  1972,  1976,  1980,  1984,  1988,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   538,     0,  2026,  2027,
    2028,  2029,     0,     0,  2030,     0,     0,     0,  1852,  1856,
       0,  1865,     0,  1868,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,     0,  2039,     0,     0,     0,     0,
       0,     0,     0,     0,   299,   300,   995,     0,     0,     0,
       0,     0,     0,     0,     0,   402,     0,   538,   301,   402,
       0,     0,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  1150,   312,     0,     0,
    1151,     0,     0,   359,   359,   313,   314,  1750,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   402,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   402,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   402,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     402,     0,   347,     0,     0,     0,     0,   402,     0,   402,
       0,    68,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   538,   402,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2030,     0,     0,     0,     0,     0,     0,   538,     0,  2106,
       0,  2109,     0,     0,     0,     0,   111,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   995,
       0,     0,   359,     0,     0,     0,   995,     0,     0,   402,
     995,     0,     0,     0,     0,     0,     0,     0,   172,     0,
       0,     0,     0,     0,     0,     0,     0,   249,    68,     0,
       0,     0,     0,  2137,  2138,    68,    68,  2106,     0,  2109,
       0,     0,  2142,     0,     0,     0,  2144,     0,     0,     0,
       0,     0,     0,   370,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   469,  2144,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   469,
       0,     0,     0,   469,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2180,     0,     0,   642,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   249,   249,     0,     0,   402,     0,     0,     0,   402,
     402,   402,     0,     0,     0,     0,     0,     0,     0,     0,
     347,     0,     0,     0,     0,   402,   402,     0,     0,     0,
       0,     0,   347,     0,   559,     0,     0,     0,     0,     0,
       0,   727,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   402,   402,     0,   402,   402,     0,     0,     0,   402,
     402,   402,   402,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   597,   402,     0,   249,   249,   249,
       0,     0,     0,     0,     0,     0,     0,   172,     0,     0,
       0,   402,     0,   995,     0,     0,     0,   172,   249,    68,
       0,     0,     0,   538,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   402,   707,     0,     0,
       0,     0,     0,   707,     0,     0,     0,     0,     0,     0,
       0,     0,   729,     0,   359,     0,     0,     0,     0,   995,
       0,   995,     0,     0,     0,     0,  -885,     0,     0,  -885,
    -885,  -885,   727,  -885,  -885,     0,     0,     0,   995,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   347,   347,     0,   402,   402,
     402,   402,   402,   402,   402,   402,     0,     0,     0,     0,
    -885,   995,     0,     0,    85,     0,  -885,  -885,  -885,     0,
       0,     0,     0,     0,     0,   559,     0,     0,     0,  -885,
       0,   864,     0,     0,     0,     0,   402,   402,     0,     0,
       0,     0,   864,  -885,     0,     0,   402,  -885,  -885,  -885,
    -885,  -885,  -885,  -885,  -885,     0,     0,     0,     0,   114,
     126,     0,  -885,  -885,     0,  -885,  -885,  -885,     0,     0,
    -885,  -885,     0,  -885,  -885,  -885,  -885,   559,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   177,   126,     0,   955,     0,   222,     0,   402,     0,
       0,    85,   402,   402,     0,     0,     0,     0,    85,    85,
       0,     0,     0,     0,     0,     0,     0,   559,     0,     0,
       0,     0,     0,     0,     0,     0,   371,     0,     0,     0,
       0,   538,     0,   538,     0,     0,   249,     0,     0,   380,
       0,     0,   359,   249,     0,     0,   249,   538,   538,     0,
       0,     0,  1130,     0,   359,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1148,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   642,
     642,   642,   642,     0,     0,     0,     0,     0,     0,     0,
     516,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   532,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   995,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   566,   727,     0,
     347,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1132,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1148,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   126,     0,     0,
     249,   249,   249,   249,     0,     0,     0,     0,     0,     0,
     177,     0,  1281,     0,     0,     0,     0,     0,     0,     0,
     676,     0,    85,     0,     0,     0,     0,     0,   249,   249,
     249,     0,     0,   172,     0,     0,     0,     0,     0,     0,
    1192,     0,     0,     0,     0,     0,     0,   359,   359,     0,
    1334,     0,     0,     0,   249,     0,     0,     0,  1346,     0,
       0,  1219,  1229,   729,     0,  1219,  1229,     0,     0,     0,
       0,     0,  1192,     0,     0,     0,     0,     0,  1398,   193,
       0,     1,     0,  1251,     0,     0,   249,     0,     0,   538,
       0,     0,     0,   249,     0,     0,   249,     0,   538,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,   550,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     727,     0,     0,   199,    27,     0,     0,     0,   854,     0,
       0,     0,    28,    29,   538,   538,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,   126,     0,     0,     0,
       0,     0,     0,     0,     0,   559,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,     0,     0,   551,  1038,     0,     0,     0,     0,     0,
     928,     0,     0,   936,   552,     0,     0,     0,     0,     0,
     559,     0,     0,     0,     0,     0,     0,     0,  1435,   559,
       0,     0,     0,     0,     0,     0,   559,     0,     0,  1435,
     111,   729,     0,   559,     0,     0,     0,     0,     0,     0,
     854,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   126,   126,   126,     0,
       0,     0,     0,     0,   359,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   126,   126,     0,     0,     0,     0,
       0,     0,   359,     0,   559,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,  1043,     0,  1052,     0,     0,
     559,     0,     0,     0,     0,     0,     0,     0,  1054,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,   550,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,   249,
     249,   249,     0,     0,   532,     0,     0,   597,     0,     0,
       0,     0,    27,     0,   383,     0,     0,     0,     0,   642,
      28,    29,   642,  1603,  1605,    32,  1608,     0,    35,    36,
       0,    37,    38,    39,  1618,     0,     0,     0,     0,     0,
       0,     0,  1627,     0,     0,     0,    40,     0,     0,  1148,
       0,     0,     0,     0,     0,     0,    43,    44,    45,     0,
     642,   919,     0,     0,     0,   383,     0,  1148,     0,     0,
     920,     0,  1148,     0,   642,   642,   642,   642,     0,  1174,
       0,     0,     0,     0,     0,     0,   676,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   562,     0,  1662,     0,  1666,     0,   249,     0,     0,
     249,     0,     0,   249,  1224,     0,     0,     0,  1224,     0,
     248,     0,     0,     0,  1686,     0,  1132,     0,     0,     0,
    1695,     0,     0,     0,     0,     0,   854,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   249,     0,  1148,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   672,   249,   249,   249,   249,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,     0,
     249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1148,     0,     0,     0,     0,     0,  1673,     0,     0,     0,
       0,     0,     0,     0,   248,   248,     0,     0,     0,     0,
       0,     0,     0,   597,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1717,     0,     0,     0,   558,     0,     0,
    1717,     0,  1148,     0,     0,     0,   854,  1425,     0,     0,
       0,     0,     0,   854,     0,  1148,     0,     0,   842,   249,
     249,   854,  1439,     0,   847,     0,   249,   249,     0,  1446,
     249,   249,   854,   114,   126,     0,     0,   596,     0,     0,
     248,   248,   248,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   248,     0,     0,     0,     0,  1148,     0,     0,     0,
       0,     0,     0,   126,     0,     0,     0,     0,     0,     0,
     706,  1479,     0,     0,     0,     0,   706,   566,     0,     0,
       0,     0,     0,   126,   924,   728,     0,     0,   746,     0,
       0,     0,     0,   928,   747,   748,   749,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,     0,     0,
     928,     0,     0,     0,   999,     0,     0,  1004,     0,     0,
       0,     0,     0,  -361,     0,     0,     0,     0,     0,     0,
     999,  -361,  -361,     0,     0,     0,  -361,     0,     0,     0,
       0,     0,  -361,  -361,  -361,     0,     0,     0,   558,     0,
       0,   562,     0,     0,     0,     0,  1557,  -361,     0,     0,
       0,     0,     0,     0,   562,  1565,     0,  -361,  -361,  -361,
    -361,  -361,   750,     0,     0,  -361,  1538,  -361,  -361,     0,
     751,     0,     0,   752,     0,  -361,  -361,  -361,     0,  -361,
    -361,  -361,  -361,  -361,   249,     0,     0,   559,     0,     0,
     558,     0,     0,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,   642,   642,     0,     0,
       0,     0,  1148,     0,  1148,     0,     0,  1148,   642,     0,
     558,   238,     0,  1872,  1875,     0,  1877,     0,     0,    28,
      29,     0,     0,     0,    32,     0,  1148,     0,  1888,   248,
     239,    38,   240,     0,     0,     0,   248,     0,     0,   248,
       0,     0,     0,     0,   672,   241,     0,     0,     0,     0,
     672,     0,     0,     0,     0,    43,    44,     0,     0,     0,
    1148,     0,     0,     0,  1148,     0,  1528,   559,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   854,
       0,   249,   249,     0,     0,  1148,     0,   249,   249,     0,
       0,     0,     0,     0,  1148,     0,   854,   193,  1224,     1,
     249,     0,     0,   249,     0,     0,  1708,     0,     0,     0,
       0,   249,     0,     0,     0,     0,  1224,     0,     0,     0,
       0,     0,     0,  1224,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   199,    27,   248,   248,   248,   248,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,   248,   248,   248,     0,     0,    40,     0,     0,   251,
       0,     0,     0,  1191,     0,     0,    43,    44,    45,     0,
       0,   852,  1038,     0,     0,     0,     0,   248,     0,     0,
       0,   729,   552,     0,  1218,  1228,   728,     0,  1218,  1228,
       0,     0,     0,     0,     0,  1191,   672,     0,     0,     0,
       0,     0,     0,  1444,     0,     0,  1250,     0,  1148,   248,
       0,     0,     0,     0,     0,     0,   248,     0,     0,   248,
       0,     0,     0,     0,     0,     0,   642,  1148,     0,     0,
       0,     0,     0,     0,  1148,     0,     0,     0,  1877,     0,
    2037,     0,     0,   249,   249,     0,     0,     0,   726,  2043,
       0,     0,     0,   251,   251,     0,  1480,     0,     0,     0,
       0,   562,     0,     0,     0,   559,     0,     0,  1774,     0,
       0,     0,     0,     0,     0,     0,     0,   924,     0,     0,
       0,     0,  1781,     0,     0,     0,   561,     0,     0,  1784,
       0,     0,     0,     0,     0,     0,     0,   380,   558,     0,
     727,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1446,     0,
     566,   249,   249,     0,   924,     0,   599,     0,     0,   251,
     251,   251,     0,   558,     0,     0,     0,     0,     0,     0,
       0,     0,   558,     0,     0,     0,     0,     0,     0,   558,
     251,     0,     0,     0,   728,     0,   558,     0,     0,   726,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   709,
       0,   383,     0,     0,     0,   709,     0,     0,     0,     0,
     562,     0,   562,     0,   731,     0,     0,     0,     0,     0,
       0,   729,     0,  2098,  2101,     0,  1148,     0,  1148,     0,
    1838,   642,  1148,   642,     0,     0,     0,   558,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
     566,     0,     0,   558,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1148,     0,     0,
    1148,     0,   248,   248,   248,     0,     0,     0,   642,     0,
     596,     0,   295,     0,     0,     0,     0,   561,   296,   297,
     298,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   672,  1148,   672,   301,     0,     0,     0,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1150,   312,     0,     0,  1755,     0,   561,
       0,  1756,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,  1921,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   561,
     248,     0,     0,   248,     0,  1147,   248,     0,     0,  1152,
       0,     0,     0,   537,     0,     0,     0,     0,   251,     0,
       0,     0,     0,     0,     0,   251,     0,     0,   251,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   248,     0,     0,  1425,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   248,   248,
     248,   248,     0,     0,     0,   726,     0,     0,     0,  1784,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1233,
       0,   248,     0,   248,     0,     0,     0,     0,   854,     0,
       0,     0,     0,  1147,  1152,     0,     0,     0,     0,  1672,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   685,
       0,     0,     0,     0,     0,     0,   596,     0,   537,  1280,
       0,     0,     0,     0,   537,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1716,     0,     0,     0,
       0,     0,     0,  1716,     0,     0,     0,     0,     0,     0,
       0,     0,   251,   251,   251,   251,     0,  1332,     0,     0,
       0,     0,   248,   248,     0,  1345,     0,     0,     0,   248,
     248,     0,     0,   248,   248,     0,     0,     0,     0,     0,
     251,   251,   251,     0,     0,  1396,     0,     0,     0,     0,
       0,     0,  1194,   537,  1708,   537,     0,   672,     0,     0,
       0,     0,     0,     0,  1785,     0,   251,     0,     0,     0,
       0,     0,     0,  1221,  1231,   731,     0,  1221,  1231,     0,
       0,     0,     0,     0,  1194,     0,     0,     0,     0,     0,
       0,     0,  1444,     0,   562,  1253,     0,  1798,   251,     0,
    1004,     0,     0,     0,     0,   251,     0,   726,   251,     1,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,   550,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,   842,     0,     0,     0,     0,
      28,    29,     0,   562,     0,    32,     0,   561,    35,    36,
       0,    37,    38,    39,   562,     0,   994,   290,     0,     1,
     291,   100,   292,     0,   293,   294,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,     0,
       0,   551,   561,     0,     2,     0,     0,     0,     0,     0,
       0,   561,   552,   537,   553,     0,     0,   248,   561,     0,
     558,     0,     0,   731,     0,   561,     0,     0,  1107,  1108,
    1109,   615,  1110,  1111,  1112,  1113,   620,   621,  1114,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0,
     299,   300,  1115,     0,   625,   626,   627,     0,     0,     0,
       0,     0,     0,   537,   301,     0,   561,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,   561,   312,   628,     0,     0,     0,   242,     0,
     629,   313,   314,     0,   315,   316,   317,   318,     0,     0,
    1602,  1604,     0,  1607,     0,     0,     0,     0,     0,     0,
     558,  1129,     0,     0,  1152,     0,     0,     0,     0,  1626,
       0,   251,   251,   251,   248,   248,  1147,  1152,     0,   599,
     248,   248,     0,     0,  1182,     0,     0,     0,     0,     0,
       0,     0,     0,   248,  1147,  1152,   248,     0,     0,  1147,
       0,     0,     0,     0,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   672,
     672,     0,  1999,     0,     0,     0,     0,     0,     0,     0,
    1660,     0,  1664,     0,     0,     0,   994,     0,     0,     0,
       0,     0,     0,   994,     0,     0,   994,     0,     0,     0,
       0,  1685,     0,     0,     0,     0,     0,  1694,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   999,     0,     0,   251,
    1147,     0,   251,     0,     0,   251,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,     0,     0,   728,     0,     0,     0,     0,     0,
       0,     0,     0,   251,     0,     0,     0,  1147,  1152,     2,
       0,     0,     0,     0,     0,     0,     0,   251,   251,   251,
     251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     251,     0,   251,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,     0,   248,   248,  1675,  1147,
       0,  1152,     0,     0,     0,   299,   300,     0,     0,     0,
       0,     0,  1147,  1152,     0,   599,     0,     0,   558,   301,
       0,     0,     0,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,  1719,   311,     0,   312,   994,
       0,   537,  1719,   735,     0,     0,   313,   314,   736,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,     0,
       0,   251,   251,  1147,     0,  1152,     0,     0,   251,   251,
       0,     0,   251,   251,   248,   248,     0,     0,     0,     0,
     537,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   116,     0,     0,     0,     0,
       0,     0,   133,     0,     0,     0,     0,     0,     0,   994,
       0,   994,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   156,   165,   188,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
       0,     0,     0,     0,   728,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   116,   116,     0,   537,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   479,   295,     0,     0,     0,     0,     0,   296,   297,
     298,     0,     0,     0,     0,     0,     0,   510,     0,     0,
       0,   299,   300,     0,     0,     0,     0,   994,     0,     0,
       0,     0,     0,     0,     0,   301,   116,     0,   537,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1150,   312,     0,     0,  1151,     0,  1848,
       0,     0,   313,   314,  1760,   315,   316,   317,   318,     0,
       0,   156,   555,     0,     0,     0,     0,     0,     0,  1147,
    1152,  1147,  1152,     0,  1147,  1867,   251,     0,     0,   561,
    1602,  1874,     0,  1626,     0,  1152,     0,     0,     0,   119,
       0,     0,     0,  1147,  1152,  1626,     0,     0,     0,     0,
       0,     0,   165,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   165,     0,     0,     0,     0,
     119,   119,     0,     0,     0,   555,     0,  1147,     0,  1152,
       0,  1147,     0,  1152,     0,     0,   537,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1147,  1152,     0,     0,     0,     0,   537,     0,
       0,  1147,  1152,     0,     0,     0,     0,     0,   119,   119,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   561,
     994,     0,     0,     0,     0,     0,     0,   994,     0,     0,
       0,   994,     0,   251,   251,     0,     0,     0,     0,   251,
     251,     0,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,   251,     0,     0,   251,     0,     0,     0,     0,
     119,     0,     0,   251,     0,     0,     0,     0,     0,   116,
       2,     0,     0,     0,     0,   116,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,   563,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,   555,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,   119,     0,     0,     0,
       0,     0,    40,     0,     0,   555,     0,     0,     0,   119,
       0,     0,    43,    44,    45,  1147,     0,   852,     0,   673,
       0,   156,     0,     0,     0,     0,     0,     0,   552,     0,
       0,     0,     0,   731,  1147,     0,     0,     0,     0,  1152,
       0,  1147,  1867,     0,  1152,  1626,     0,  2036,     0,  2038,
       0,     0,     0,     0,     0,  1152,  2042,     0,     0,     0,
       0,   116,   116,   116,     0,   116,     0,     0,   116,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   116,
     116,   116,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   994,   251,   251,     0,   510,     0,
     555,     0,   116,     0,   537,     0,     0,   726,     0,     0,
       0,     0,     0,     0,     0,   116,     0,   561,     0,     0,
       0,     0,     0,   119,     0,     0,     0,     0,     0,   563,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     994,     0,   994,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   994,
       0,     0,     0,     0,     0,   119,     0,     0,     0,     0,
       0,     0,     0,   251,   251,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   563,
    2097,  2100,     0,  1147,  1152,  1147,     0,     0,     0,  1147,
    1867,     0,   994,     0,     0,     0,     0,  1170,     0,     0,
       0,     0,     0,     0,     0,   116,     0,     0,     0,     0,
       0,   555,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   731,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   119,   119,     0,   119,
       0,     0,   673,     0,  1147,  1152,     0,  1147,  1867,   246,
       0,     0,  2143,   119,   119,   119,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,     0,   563,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   563,
    1147,     0,     0,     0,     0,     0,     0,     0,     0,   467,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   467,   537,     0,   537,   467,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   537,   537,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   246,   246,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1960,  1964,     0,  1970,  1974,     0,
       0,     0,  1978,  1982,  1986,  1990,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   557,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   994,   156,     0,   555,     0,   673,
       0,     0,     0,     0,   555,   673,     0,     0,     0,   555,
       0,     0,     0,     0,     0,     0,   595,     0,     0,   246,
     246,   246,     0,     0,     0,     0,     0,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
     246,     0,     0,     0,     0,     0,     0,     0,   116,     0,
       0,     0,     0,     0,     2,     0,     0,   116,     0,   705,
       0,     0,   555,     0,     0,   705,     0,     0,   116,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   555,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
       0,  1960,  1964,  1970,  1974,  1978,  1982,  1986,  1990,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,   555,     0,     0,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
     537,   311,  1150,   312,     0,     0,  1755,     0,     0,   537,
    1763,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   557,     0,     0,
       0,   116,   116,   863,     0,     0,     0,     0,     0,     0,
       0,   116,     0,   116,   863,     0,     0,     0,     0,     0,
       0,   563,     0,     0,     0,     0,     0,     0,   563,     0,
       0,   994,     0,   119,     0,   537,   537,     0,     0,     0,
       0,     0,     0,     0,     0,   247,     0,     0,     0,   557,
       0,     0,     0,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,   954,     0,     0,     0,
       0,     0,   119,     0,     0,     0,     0,     0,     0,     0,
       2,   563,     0,     0,     0,     0,   563,     0,     0,   557,
       0,     0,   119,     0,     0,   247,     0,     0,     0,     0,
       0,     0,   563,     0,     0,     0,     0,   247,   246,     0,
       0,   247,     0,     0,     0,   246,     0,   295,   246,     0,
       0,     0,     0,   296,   297,   298,     0,     0,     0,     0,
       0,     0,     0,   116,     0,   116,   299,   300,     0,   247,
     247,     0,     0,     0,     0,     0,     0,     0,     0,   563,
     301,     0,     0,     0,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,  1150,   312,
    1633,     0,  1151,     0,     0,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   119,     0,     0,     0,
       0,     0,     0,     0,     0,   563,     0,   563,     0,     0,
       0,     0,   247,     0,     0,   247,   247,   247,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   247,     0,     0,     0,
       0,     0,   246,   246,   246,   246,     0,     0,     0,  1884,
       0,     1,   291,   100,   292,   247,   293,   294,     0,     0,
       0,   247,     0,     0,     0,     0,     0,     0,     0,     0,
     246,   246,   246,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,  1217,  1227,     0,     0,  1217,  1227,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,     0,     0,     0,     0,     0,   673,   246,   673,
       0,     0,   299,   300,     0,   246,     0,     0,   246,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     0,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  1150,   312,  1885,     0,  1151,   247,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
     247,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   116,     0,
       0,     0,     0,     0,     0,   116,     0,     0,     0,     0,
       0,     0,   116,     0,     0,     0,     0,   557,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   247,   116,     0,   555,     0,     0,   116,     0,
       0,   116,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   557,     0,     0,     0,     0,     0,     0,     0,
    1434,   557,     0,     0,     0,     1,     0,     0,   557,     0,
       0,  1434,     0,     0,   247,   557,     0,     0,     0,     0,
       0,   247,     0,     0,   247,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,   116,     0,     0,     0,
       0,     0,     0,     0,   116,     0,   557,     0,    27,     0,
       0,     0,     0,     0,     0,   555,    28,    29,     0,     0,
       0,    32,   557,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,   852,     0,     0,
       0,   246,   246,   246,     0,     0,     0,     0,   552,   595,
       0,     0,   563,     0,     0,     0,     0,     0,     0,   563,
       0,     0,     0,     0,     0,     0,   119,     0,   247,   247,
     247,   247,     0,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   563,     0,   563,
       0,     0,   563,     0,     0,   563,   247,   247,   247,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,   247,     0,     0,     0,     0,     0,     0,   247,
     247,     0,     0,   247,   247,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,   246,
      32,     0,   246,     0,   247,   246,   239,    38,   240,     0,
       0,   247,     0,     0,   247,   252,     0,     0,     0,     0,
     119,   241,     0,     0,     0,     0,     0,     0,   563,     0,
       0,    43,    44,    45,     0,     0,  1214,     0,     0,   563,
       0,     0,     0,   246,     0,     0,     0,  1215,     0,     0,
     116,   116,     0,   116,     0,     0,     0,   246,   246,   246,
     246,     0,     0,     0,     0,   252,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   252,     0,     0,
     246,   252,   246,     0,     0,     0,     0,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   116,     0,   252,
     252,     0,     0,     0,     2,   595,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1715,   247,     0,     0,     0,
       0,     0,  1715,     0,     0,     0,     0,   247,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
       0,   246,   246,     0,     0,     0,     0,     0,   246,   246,
     299,   300,   246,   246,     0,     0,     0,     0,     0,     0,
       0,     0,   252,     0,   301,   252,   252,   252,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  1273,   312,     0,     0,   252,     0,   735,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,   290,
       0,     1,   291,   100,   292,   252,   293,   294,     0,     0,
       0,   252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   563,   563,     2,   563,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   247,   247,   247,
       0,     0,     0,     0,     0,   247,     0,     0,     0,     0,
    1107,  1108,  1109,   615,  1110,  1111,  1112,  1113,   620,   621,
    1114,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,     0,     0,     0,     0,     0,    32,     0,     0,
       0,   119,   299,   300,  1115,     0,   625,   626,   627,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,  -471,   312,   628,     0,  -471,   252,
     242,     0,   629,   313,   314,     0,   315,   316,   317,   318,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   247,     0,     0,   247,     0,
       0,   247,     0,     0,     0,     0,   246,     0,     0,   557,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   252,     0,     0,     0,     0,     0,     0,   247,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   247,   247,   247,   247,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   252,     0,   247,     0,   247,     0,
       0,   252,     0,     0,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   557,
       0,   247,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   246,   246,     0,     0,     0,     0,   246,
     246,   247,     0,     0,     0,     0,     0,     0,   247,     0,
       0,     0,   246,     0,     0,   246,     0,     0,     0,     0,
       0,     0,     0,   246,     0,     0,     0,   247,   247,     1,
       0,     0,     0,     0,   247,   247,     0,     0,   247,   247,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,   252,   252,
     252,   252,     0,   290,     0,     1,   291,   100,   292,     0,
     293,   294,   238,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,   252,   252,   252,     0,
       2,   239,    38,   240,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   241,     0,     0,     0,
       0,     0,   252,     0,     0,     0,    43,    44,    45,   252,
     252,   852,     0,   252,   252,     0,     0,   295,  1432,     0,
       0,     0,   552,   296,   297,   298,     0,     0,     0,     0,
       0,     0,     0,     0,   252,     0,   299,   300,     0,     0,
       0,   252,     0,     0,   252,     0,     0,     0,     0,     0,
     301,     0,     0,     0,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,   246,   246,   311,  1150,   312,
       0,     0,  1755,     0,     0,     0,  1902,   313,   314,     0,
     315,   316,   317,   318,     0,     0,   290,   557,     1,   291,
     100,   292,     0,   293,   294,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   247,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,   246,   246,     0,     0,     0,     0,     0,
     295,   238,     0,     0,     0,     0,   296,   297,   298,    28,
      29,     0,     0,     0,    32,     0,   252,     0,     0,   299,
     623,    38,   240,     0,     0,     0,     0,   252,     0,     0,
       0,     0,     0,   301,     0,   241,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   310,     0,     0,
     311,     0,   312,   976,     0,   977,   978,   735,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   247,
     247,     0,     0,     0,     0,   247,   247,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   247,     0,
       0,   247,     0,     0,     0,     0,     0,     0,     0,   247,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   252,   252,   252,
       0,     0,     0,     0,     0,   252,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,     0,     0,   295,   238,     0,     0,     0,     0,   296,
     297,   298,    28,    29,     0,   252,     0,    32,   252,     0,
       0,   252,   299,   623,   624,   240,   625,   626,   627,     0,
       0,     0,     0,     0,     0,     0,   301,     0,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,   247,   247,   311,     0,   312,   628,     0,     0,   252,
     242,     0,   629,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,   252,   252,   252,   252,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   252,     0,   252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   247,
     247,   252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   252,     0,     0,     0,     0,     0,     0,   252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   252,   252,     0,
       0,     0,     0,     0,   252,   252,     0,     0,   252,   252,
    -361,   746,     0,  -361,  -361,  -361,  -361,   747,   748,   749,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,     0,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,     0,     0,  -361,  -361,     0,  -361,     0,
       0,  -361,  -361,  -361,  -361,  -361,     0,     0,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,     0,  -361,     0,  -361,  -361,
    -361,     0,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,   750,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,   751,  -361,  -361,   752,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,     0,  -363,  1198,
       0,  -363,  -363,  -363,  -363,  1199,  1200,  1201,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,     0,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,     0,   252,  -363,  -363,     0,  -363,     0,     0,  -363,
    -363,  -363,  -363,  -363,     0,     0,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,     0,  -363,     0,  -363,  -363,  -363,     0,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  1202,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  1203,  -363,  -363,  1204,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   252,
     252,     0,     0,     0,     0,   252,   252,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   252,     0,
       0,   252,     0,     0,     0,     0,     0,  -468,  1143,   252,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,     0,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
       0,     0,  -468,  -468,     0,  -468,     0,     0,  -468,  -468,
    -468,  -468,  -468,     0,     0,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,     0,  -468,     0,  -468,  -468,  -468,     0,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   252,   252,  -301,   290,     0,     1,   291,   100,   292,
    -301,   293,   294,  -301,  -301,  -301,  -301,  -301,  -301,  -301,
    -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,
    -301,     2,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,
    -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,
    -301,  -301,  -301,  -301,     0,  -301,  -301,  -301,  -301,  -301,
    -301,  -301,  -301,  -301,  -301,  -301,     0,     0,   295,  -301,
       0,  -301,     0,     0,   296,   297,   298,  -301,  -301,   252,
     252,  -301,  -301,  -301,  -301,  -301,  -301,   299,   300,  -301,
    -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,     0,  -301,
       0,   301,  -301,  -301,     0,   302,   303,   304,   305,   306,
     307,   308,   309,  -301,  -301,   310,  -301,  -301,   311,  1248,
     312,  -301,  -301,  1146,  -301,  -301,  -301,  -301,   313,   314,
    -301,   315,   316,   317,   318,  -301,  -301,  -301,  -301,  -301,
    -302,   290,     0,     1,   291,   100,   292,  -302,   293,   294,
    -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,
    -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,     2,  -302,
    -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,
    -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,
    -302,     0,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,
    -302,  -302,  -302,     0,     0,   295,  -302,     0,  -302,     0,
       0,   296,   297,   298,  -302,  -302,     0,     0,  -302,  -302,
    -302,  -302,  -302,  -302,   299,   300,  -302,  -302,  -302,  -302,
    -302,  -302,  -302,  -302,  -302,     0,  -302,     0,   301,  -302,
    -302,     0,   302,   303,   304,   305,   306,   307,   308,   309,
    -302,  -302,   310,  -302,  -302,   311,  1150,   312,  -302,  -302,
    1151,  -302,  -302,  -302,  -302,   313,   314,  -302,   315,   316,
     317,   318,  -302,  -302,  -302,  -302,  -302,  -597,   290,     0,
       1,   291,   100,   292,  -597,   293,   294,  -597,  -597,  -597,
    -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,
    -597,  -597,  -597,  -597,  -597,     2,  -597,  -597,  -597,  -597,
    -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,
    -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,     0,  -597,
    -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,  -597,
       0,     0,   295,  -597,     0,  -597,     0,     0,   296,   297,
     298,  -597,  -597,     0,     0,  -597,  -597,  -597,  -597,  -597,
    -597,   299,   300,  -597,  -597,  -597,  -597,  -597,  -597,  -597,
    -597,  -597,     0,  -597,     0,   301,  -597,  -597,     0,   302,
     303,   304,   305,   306,   307,   308,   309,  -597,  -597,   310,
    -597,  -597,   311,  -597,   312,  -597,  -597,  -597,  -597,   735,
    -597,  1329,   313,   314,  -597,   315,   316,   317,   318,  -597,
    -597,  -597,  -597,  -597,  -598,   290,     0,     1,   291,   100,
     292,  -598,   293,   294,  -598,  -598,  -598,  -598,  -598,  -598,
    -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
    -598,  -598,     2,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
    -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
    -598,  -598,  -598,  -598,  -598,     0,  -598,  -598,  -598,  -598,
    -598,  -598,  -598,  -598,  -598,  -598,  -598,     0,     0,   295,
    -598,     0,  -598,     0,     0,   296,   297,   298,  -598,  -598,
       0,     0,  -598,  -598,  -598,  -598,  -598,  -598,   299,   300,
    -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,     0,
    -598,     0,   301,  -598,  -598,     0,   302,   303,   304,   305,
     306,   307,   308,   309,  -598,  -598,   310,  -598,  -598,   311,
    -598,   312,  -598,  -598,  -598,  -598,   735,  -598,  1395,   313,
     314,  -598,   315,   316,   317,   318,  -598,  -598,  -598,  -598,
    -598,  -608,   290,     0,     1,   291,   100,   292,  -608,   293,
     294,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,
    -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,     2,
    -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,
    -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,
    -608,  -608,     0,  -608,  -608,  -608,  -608,  -608,  -608,  -608,
    -608,  -608,  -608,  -608,     0,     0,   295,  -608,     0,  -608,
       0,     0,   296,   297,   298,  -608,  -608,     0,     0,  -608,
    -608,  -608,  -608,  -608,  -608,   299,   300,  -608,  -608,  -608,
    -608,  -608,  -608,  -608,  -608,  -608,     0,  -608,     0,   301,
    -608,  -608,     0,   302,   303,   304,   305,   306,   307,   308,
     309,  -608,  -608,   310,  -608,  -608,   311,  -608,   312,  -608,
    -608,  1146,  -608,  -608,  -608,  -608,   313,   314,  -608,   315,
     316,   317,   318,  -608,  -608,  -608,  -608,  -608,  -610,   290,
       0,     1,   291,   100,   292,  -610,   293,   294,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,     2,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,     0,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,     0,     0,   295,  -610,     0,  -610,     0,     0,   296,
     297,   298,  -610,  -610,     0,     0,  -610,  -610,  -610,  -610,
    -610,  -610,   299,   300,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,     0,  -610,     0,   301,  -610,  -610,     0,
     302,   303,   304,   305,   306,   307,   308,   309,  -610,  -610,
     310,  -610,  -610,   311,  1150,   312,  -610,  -610,  1151,  -610,
    -610,  -610,  -610,   313,   314,  -610,   315,   316,   317,   318,
    -610,  -610,  -610,  -610,  -610,  -609,   290,     0,     1,   291,
     100,   292,  -609,   293,   294,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,     2,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,     0,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,     0,     0,
     295,  -609,     0,  -609,     0,     0,   296,   297,   298,  -609,
    -609,     0,     0,  -609,  -609,  -609,  -609,  -609,  -609,   299,
     300,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
       0,  -609,     0,   301,  -609,  -609,     0,   302,   303,   304,
     305,   306,   307,   308,   309,  -609,  -609,   310,  -609,  -609,
     311,  -609,   312,  -609,  -609,  1146,  -609,  -609,  -609,  -609,
     313,   314,  -609,   315,   316,   317,   318,  -609,  -609,  -609,
    -609,  -609,  -354,  1910,     0,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,     0,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,     0,     0,  -354,  -354,     0,
    -354,     0,     0,  -354,  -354,  -354,  -354,  -354,     0,     0,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,     0,  -354,     0,
    -354,  -354,  -354,     0,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -359,
    1953,     0,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
       0,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,     0,     0,  -359,  -359,     0,  -359,     0,     0,
    -359,  -359,  -359,  -359,  -359,     0,     0,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,     0,  -359,     0,  -359,  -359,  -359,
       0,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -347,   290,     0,     1,
     291,   100,   292,  -347,   293,   294,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,     2,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,     0,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,     0,
       0,   295,  -347,     0,  -347,     0,     0,   296,   297,   298,
    -347,  -347,     0,     0,  -347,  -347,  -347,  -347,  -347,  -347,
     299,   300,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
    -347,     0,  -347,     0,   301,  -347,  -347,     0,   302,   303,
     304,   305,   306,   307,   308,   309,  -347,  -347,   310,  -347,
    -347,   311,  -347,   312,  -347,  -347,  -347,  -347,   735,  -347,
    -347,   313,   314,  -347,   315,   316,   317,   318,  -347,  -347,
    -347,  -347,  -347,  -575,   290,     0,     1,   291,   100,   292,
    -575,   293,   294,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,     2,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,     0,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,     0,     0,   295,  -575,
       0,  -575,     0,     0,   296,   297,   298,  -575,  -575,     0,
       0,  -575,  -575,  -575,  -575,  -575,  -575,   299,   300,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,     0,  -575,
       0,   301,  -575,  -575,     0,   302,   303,   304,   305,   306,
     307,   308,   309,  -575,  -575,   310,  -575,  -575,   311,  -575,
     312,  -575,  -575,  -575,  -575,   735,  -575,  -575,   313,   314,
    -575,   315,   316,   317,   318,  -575,  -575,  -575,  -575,  -575,
    -583,   290,     0,     1,   291,   100,   292,  -583,   293,   294,
    -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,
    -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,     2,  -583,
    -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,
    -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,
    -583,     0,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,
    -583,  -583,  -583,     0,     0,   295,  -583,     0,  -583,     0,
       0,   296,   297,   298,  -583,  -583,     0,     0,  -583,  -583,
    -583,  -583,  -583,  -583,   299,   300,  -583,  -583,  -583,  -583,
    -583,  -583,  -583,  -583,  -583,     0,  -583,     0,   301,  -583,
    -583,     0,   302,   303,   304,   305,   306,   307,   308,   309,
    -583,  -583,   310,  -583,  -583,   311,  -583,   312,  -583,  -583,
    -583,  -583,   735,  -583,  -583,   313,   314,  -583,   315,   316,
     317,   318,  -583,  -583,  -583,  -583,  -583,  -576,   290,     0,
       1,   291,   100,   292,  -576,   293,   294,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,     2,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,     0,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
       0,     0,   295,  -576,     0,  -576,     0,     0,   296,   297,
     298,  -576,  -576,     0,     0,  -576,  -576,  -576,  -576,  -576,
    -576,   299,   300,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,     0,  -576,     0,   301,  -576,  -576,     0,   302,
     303,   304,   305,   306,   307,   308,   309,  -576,  -576,   310,
    -576,  -576,   311,  -576,   312,  -576,  -576,  -576,  -576,   735,
    -576,  -576,   313,   314,  -576,   315,   316,   317,   318,  -576,
    -576,  -576,  -576,  -576,  -584,   290,     0,     1,   291,   100,
     292,  -584,   293,   294,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,     2,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,     0,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,     0,     0,   295,
    -584,     0,  -584,     0,     0,   296,   297,   298,  -584,  -584,
       0,     0,  -584,  -584,  -584,  -584,  -584,  -584,   299,   300,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,     0,
    -584,     0,   301,  -584,  -584,     0,   302,   303,   304,   305,
     306,   307,   308,   309,  -584,  -584,   310,  -584,  -584,   311,
    -584,   312,  -584,  -584,  -584,  -584,   735,  -584,  -584,   313,
     314,  -584,   315,   316,   317,   318,  -584,  -584,  -584,  -584,
    -584,  -577,   290,     0,     1,   291,   100,   292,  -577,   293,
     294,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,     2,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,     0,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,     0,     0,   295,  -577,     0,  -577,
       0,     0,   296,   297,   298,  -577,  -577,     0,     0,  -577,
    -577,  -577,  -577,  -577,  -577,   299,   300,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,     0,  -577,     0,   301,
    -577,  -577,     0,   302,   303,   304,   305,   306,   307,   308,
     309,  -577,  -577,   310,  -577,  -577,   311,  -577,   312,  -577,
    -577,  -577,  -577,   735,  -577,  -577,   313,   314,  -577,   315,
     316,   317,   318,  -577,  -577,  -577,  -577,  -577,  -585,   290,
       0,     1,   291,   100,   292,  -585,   293,   294,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,     2,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,     0,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,     0,     0,   295,  -585,     0,  -585,     0,     0,   296,
     297,   298,  -585,  -585,     0,     0,  -585,  -585,  -585,  -585,
    -585,  -585,   299,   300,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,     0,  -585,     0,   301,  -585,  -585,     0,
     302,   303,   304,   305,   306,   307,   308,   309,  -585,  -585,
     310,  -585,  -585,   311,  -585,   312,  -585,  -585,  -585,  -585,
     735,  -585,  -585,   313,   314,  -585,   315,   316,   317,   318,
    -585,  -585,  -585,  -585,  -585,  -578,   290,     0,     1,   291,
     100,   292,  -578,   293,   294,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,     2,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,     0,
     295,  -578,     0,  -578,     0,     0,   296,   297,   298,  -578,
    -578,     0,     0,  -578,  -578,  -578,  -578,  -578,  -578,   299,
     300,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
       0,  -578,     0,   301,  -578,  -578,     0,   302,   303,   304,
     305,   306,   307,   308,   309,  -578,  -578,   310,  -578,  -578,
     311,  -578,   312,  -578,  -578,  -578,  -578,   735,  -578,  -578,
     313,   314,  -578,   315,   316,   317,   318,  -578,  -578,  -578,
    -578,  -578,  -586,   290,     0,     1,   291,   100,   292,  -586,
     293,   294,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
       2,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,     0,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,     0,     0,   295,  -586,     0,
    -586,     0,     0,   296,   297,   298,  -586,  -586,     0,     0,
    -586,  -586,  -586,  -586,  -586,  -586,   299,   300,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,     0,  -586,     0,
     301,  -586,  -586,     0,   302,   303,   304,   305,   306,   307,
     308,   309,  -586,  -586,   310,  -586,  -586,   311,  -586,   312,
    -586,  -586,  -586,  -586,   735,  -586,  -586,   313,   314,  -586,
     315,   316,   317,   318,  -586,  -586,  -586,  -586,  -586,  -356,
    2056,     0,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
       0,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,     0,     0,  -356,  -356,     0,  -356,     0,     0,
    -356,  -356,  -356,  -356,  -356,     0,     0,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,     0,  -356,     0,  -356,  -356,  -356,
       0,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -355,  2057,     0,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,     0,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,     0,
       0,  -355,  -355,     0,  -355,     0,     0,  -355,  -355,  -355,
    -355,  -355,     0,     0,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,     0,  -355,     0,  -355,  -355,  -355,     0,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -361,   746,     0,  -361,  -361,  -361,  -361,
     747,   748,   749,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,     0,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,     0,     0,  -361,  -361,
       0,  -361,     0,     0,  -361,  -361,  -361,  -361,  -361,     0,
       0,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,     0,  -361,
       0,  -361,  -361,  -361,     0,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,   750,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  1141,  -361,  -361,   752,
       0,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -468,  1143,     0,  -468,  -468,  -468,  -468,     0,  -468,  -468,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,     0,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,     0,     0,  -468,  -468,     0,  -468,     0,
       0,  -468,  -468,  -468,  -468,  -468,     0,     0,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,  -468,  -468,     0,  -468,     0,  -468,  -468,
    -468,     0,  -468,  -468,  -468,  -468,  -468,  -468,  -468,  -468,
    -468,  -468,  -468,     0,     0,  -468,  -468,  -468,  -468,     0,
    -468,  -468,  -468,  1144,  -468,  -468,  -468,     0,  -468,  -468,
    -468,  -468, -1104,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1104, -1104, -1104, -1104, -1104, -1104, -1104, -1104, -1104,
   -1104, -1104, -1104, -1104, -1104, -1104, -1104, -1104, -1104, -1104,
   -1104, -1104, -1104,     0, -1104, -1104, -1104, -1104, -1104, -1104,
   -1104, -1104, -1104, -1104, -1104,     0,     0,   295, -1104,     0,
   -1104,     0,     0,   296,   297,   298, -1104, -1104,     0,     0,
   -1104, -1104, -1104, -1104, -1104, -1104,   299,   300, -1104, -1104,
   -1104, -1104, -1104, -1104, -1104, -1104, -1104,     0, -1104,     0,
     301, -1104, -1104,     0,   302,   303,   304,   305,   306,   307,
     308,   309, -1104, -1104,   310,     0,     0,   311,  1150,   312,
   -1104,     0,  1151, -1104, -1104,     0, -1104,   313,   314,     0,
     315,   316,   317,   318, -1247,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1247, -1247, -1247, -1247, -1247, -1247, -1247,
   -1247, -1247, -1247, -1247, -1247, -1247, -1247, -1247, -1247, -1247,
   -1247, -1247, -1247, -1247, -1247,     0, -1247, -1247, -1247, -1247,
   -1247, -1247, -1247, -1247, -1247, -1247, -1247,     0,     0,   295,
   -1247,     0, -1247,     0,     0,   296,   297,   298, -1247, -1247,
       0,     0, -1247, -1247, -1247, -1247, -1247, -1247,   299,   300,
   -1247, -1247, -1247, -1247, -1247, -1247, -1247, -1247, -1247,     0,
   -1247,     0,   301, -1247, -1247,     0,   302,   303,   304,   305,
     306,   307,   308,   309, -1247, -1247,   310,     0,     0,   311,
    1150,   312,  1633,     0,  1151, -1247, -1247,     0, -1247,   313,
     314,     0,   315,   316,   317,   318, -1205,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1205, -1205, -1205, -1205, -1205,
   -1205, -1205, -1205, -1205, -1205, -1205, -1205, -1205, -1205, -1205,
   -1205, -1205, -1205, -1205, -1205, -1205, -1205,     0, -1205, -1205,
   -1205, -1205, -1205, -1205, -1205, -1205, -1205, -1205, -1205,     0,
       0,   295, -1205,     0, -1205,     0,     0,   296,   297,   298,
   -1205, -1205,     0,     0, -1205, -1205, -1205, -1205, -1205, -1205,
     299,   300, -1205, -1205, -1205, -1205, -1205, -1205, -1205, -1205,
   -1205,     0, -1205,     0,   301, -1205, -1205,     0,   302,   303,
     304,   305,   306,   307,   308,   309, -1205, -1205,   310,     0,
       0,   311,  1861,   312, -1205,     0,  1151, -1205, -1205,     0,
   -1205,   313,   314,     0,   315,   316,   317,   318, -1236,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1236, -1236, -1236,
   -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236,
   -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236, -1236,     0,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,     0,     0,   295, -1236,     0, -1236,     0,     0,   296,
     297,   298, -1236, -1236,     0,     0, -1236,    32, -1236, -1236,
   -1236, -1236,   299,   300,  1115, -1236,   625,   626,   627, -1236,
   -1236, -1236, -1236,     0, -1236,     0,   301, -1236, -1236,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,  1150,   312,   628,     0,  1151, -1236,
     242,     0,   629,   313,   314,     0,   315,   316,   317,   318,
    -609,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,     0,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,     0,     0,   295,  -609,     0,  -609,     0,
       0,   296,   297,   298,  -609,  -609,     0,     0,  -609,  -609,
    -609,  -609,  -609,  -609,   299,   300,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,     0,  -609,     0,   301,  -609,
    -609,     0,   302,   303,   304,   305,   306,   307,   308,   309,
    -609,  -609,   310,     0,     0,   311,  -609,   312,  1145,     0,
    1146,  -609,  -609,     0,  -609,   313,   314,     0,   315,   316,
     317,   318, -1228,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228,
   -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228,
   -1228, -1228, -1228,     0, -1228, -1228, -1228, -1228, -1228, -1228,
   -1228, -1228, -1228, -1228, -1228,     0,     0,   295, -1228,     0,
   -1228,     0,     0,   296,   297,   298, -1228, -1228,     0,     0,
   -1228, -1228, -1228, -1228, -1228, -1228,   299,   300, -1228, -1228,
   -1228, -1228, -1228, -1228, -1228, -1228, -1228,     0, -1228,     0,
     301, -1228, -1228,     0,   302,   303,   304,   305,   306,   307,
     308,   309, -1228, -1228,   310,     0,     0,   311,  2102,   312,
   -1228,     0,  1146, -1228, -1228,     0, -1228,   313,   314,     0,
     315,   316,   317,   318, -1229,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1229, -1229, -1229, -1229, -1229, -1229, -1229,
   -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229,
   -1229, -1229, -1229, -1229, -1229,     0, -1229, -1229, -1229, -1229,
   -1229, -1229, -1229, -1229, -1229, -1229, -1229,     0,     0,   295,
   -1229,     0, -1229,     0,     0,   296,   297,   298, -1229, -1229,
       0,     0, -1229, -1229, -1229, -1229, -1229, -1229,   299,   300,
   -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229,     0,
   -1229,     0,   301, -1229, -1229,     0,   302,   303,   304,   305,
     306,   307,   308,   309, -1229, -1229,   310,     0,     0,   311,
    1150,   312,  2103,     0,  1151, -1229, -1229,     0, -1229,   313,
     314,     0,   315,   316,   317,   318, -1223,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223,     0,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,     0,
       0,   295, -1223,     0, -1223,     0,     0,   296,   297,   298,
   -1223, -1223,     0,     0, -1223,    32, -1223, -1223, -1223, -1223,
     299,   300,  1115, -1223,   625,   626,   627, -1223, -1223, -1223,
   -1223,     0, -1223,     0,   301, -1223, -1223,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,  1150,   312,   628,     0,  1151, -1223,   242,     0,
     629,   313,   314,     0,   315,   316,   317,   318, -1171,   603,
       0, -1171, -1171, -1171, -1171,     0, -1171, -1171,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,     0,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171,     0,     0, -1171, -1171,     0, -1171,     0,     0, -1171,
   -1171, -1171, -1171, -1171,     0,     0, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171,     0, -1171,     0, -1171, -1171, -1171,     0,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171,     0,     0, -1171,     0, -1171,   604,     0, -1171, -1171,
   -1171,     0, -1171, -1171, -1171,     0, -1171, -1171, -1171, -1171,
   -1194,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,     0,     0,   295,   238,     0, -1194,     0,
       0,   296,   297,   298,    28,    29,     0,     0, -1194,    32,
   -1194, -1194, -1194, -1194,   299,   623,   624,   240,   625,   626,
     627, -1194, -1194, -1194, -1194,     0, -1194,     0,   301, -1194,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   628,     0,
   -1194, -1194,   242,     0,   629,   313,   314,     0,   315,   316,
     317,   318, -1172,   603,     0, -1172, -1172, -1172, -1172,     0,
   -1172, -1172,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172,     0, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172, -1172, -1172,     0,     0, -1172, -1172,     0,
   -1172,     0,     0, -1172, -1172, -1172, -1172, -1172,     0,     0,
   -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172, -1172, -1172, -1172, -1172,     0, -1172,     0,
   -1172, -1172, -1172,     0, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172, -1172, -1172,     0,     0, -1172,     0, -1172,
     604,     0, -1172, -1172, -1172,     0, -1172, -1172, -1172,     0,
   -1172, -1172, -1172, -1172, -1233,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1233, -1233, -1233, -1233, -1233, -1233, -1233,
   -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233, -1233,
   -1233, -1233, -1233, -1233, -1233,     0,  1107,  1108,  1109,   615,
    1110,  1111,  1112,  1113,   620,   621,  1114,     0,     0,   295,
   -1233,     0, -1233,     0,     0,   296,   297,   298, -1233, -1233,
       0,     0, -1233,    32, -1233, -1233, -1233, -1233,   299,   300,
    1115, -1233,   625,   626,   627, -1233, -1233, -1233, -1233,     0,
   -1233,     0,   301, -1233, -1233,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,   628,     0, -1233, -1233,   242,     0,   629,   313,
     314,     0,   315,   316,   317,   318, -1249,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1249, -1249, -1249, -1249, -1249,
   -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249,
   -1249, -1249, -1249, -1249, -1249, -1249, -1249,     0, -1249, -1249,
   -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249,     0,
       0,   295, -1249,     0, -1249,     0,     0,   296,   297,   298,
   -1249, -1249,     0,     0, -1249, -1249, -1249, -1249, -1249, -1249,
     299,   300, -1249, -1249, -1249, -1249, -1249, -1249, -1249, -1249,
   -1249,     0, -1249,     0,   301, -1249, -1249,     0,   302,   303,
     304,   305,   306,   307,   308,   309, -1249, -1249,   310,     0,
       0,   311,     0,   312,  1126,     0, -1249, -1249,   735,     0,
   -1249,   313,   314,     0,   315,   316,   317,   318, -1184,  1153,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,     0,     0,   295,   238,     0, -1184,     0,     0,   296,
     297,   298,    28,    29,     0,     0, -1184,    32, -1184, -1184,
   -1184, -1184,   299,   623,   624,   240,   625,   626,   627, -1184,
   -1184, -1184, -1184,     0, -1184,     0,   301, -1184,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   628,     0, -1184, -1184,
     242,     0,   629,   313,   314,     0,   315,   316,   317,   318,
   -1188,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,     0,     0,   295,   238,     0, -1188,     0,
       0,   296,   297,   298,    28,    29,     0,     0, -1188,    32,
   -1188, -1188, -1188, -1188,   299,   623,   624,   240,   625,   626,
     627, -1188, -1188, -1188, -1188,     0, -1188,     0,   301, -1188,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   628,     0,
   -1188, -1188,   242,     0,   629,   313,   314,     0,   315,   316,
     317,   318, -1183,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,     0,     0,   295,   238,     0,
   -1183,     0,     0,   296,   297,   298,    28,    29,     0,     0,
   -1183,    32, -1183, -1183, -1183, -1183,   299,   623,   624,   240,
     625,   626,   627, -1183, -1183, -1183, -1183,     0, -1183,     0,
     301, -1183,   241,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,     0,   312,
     628,     0, -1183, -1183,   242,     0,   629,   313,   314,     0,
     315,   316,   317,   318, -1187,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,     0,     0,   295,
     238,     0, -1187,     0,     0,   296,   297,   298,    28,    29,
       0,     0, -1187,    32, -1187, -1187, -1187, -1187,   299,   623,
     624,   240,   625,   626,   627, -1187, -1187, -1187, -1187,     0,
   -1187,     0,   301, -1187,   241,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,   628,     0, -1187, -1187,   242,     0,   629,   313,
     314,     0,   315,   316,   317,   318, -1091,  1166,     0, -1091,
   -1091, -1091, -1091,     0, -1091, -1091,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091,     0, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,     0,
       0, -1091, -1091,     0, -1091,     0,     0, -1091, -1091, -1091,
   -1091, -1091,     0,     0, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091,     0, -1091,     0, -1091, -1091, -1091,     0, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,     0,
       0, -1091,     0, -1091, -1091,     0, -1091, -1091, -1091,     0,
   -1091, -1091, -1091,     0, -1091, -1091, -1091, -1091, -1093,  1167,
       0, -1093, -1093, -1093, -1093,     0, -1093, -1093,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1093, -1093, -1093, -1093,
   -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093,
   -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093,     0,
   -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093,
   -1093,     0,     0, -1093, -1093,     0, -1093,     0,     0, -1093,
   -1093, -1093, -1093, -1093,     0,     0, -1093, -1093, -1093, -1093,
   -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093,
   -1093, -1093, -1093,     0, -1093,     0, -1093, -1093, -1093,     0,
   -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093,
   -1093,     0,     0, -1093,     0, -1093, -1093,     0, -1093, -1093,
   -1093,     0, -1093, -1093, -1093,     0, -1093, -1093, -1093, -1093,
   -1138,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,     0,     0,   295,   238,     0, -1138,     0,
       0,   296,   297,   298,    28,    29,     0,     0, -1138,    32,
   -1138, -1138, -1138, -1138,   299,   623,   624,   240,   625,   626,
     627, -1138, -1138, -1138, -1138,     0, -1138,     0,   301, -1138,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   628,     0,
   -1138, -1138,   242,     0,   629,   313,   314,     0,   315,   316,
     317,   318, -1140,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,     0,     0,   295,   238,     0,
   -1140,     0,     0,   296,   297,   298,    28,    29,     0,     0,
   -1140,    32, -1140, -1140, -1140, -1140,   299,   623,   624,   240,
     625,   626,   627, -1140, -1140, -1140, -1140,     0, -1140,     0,
     301, -1140,   241,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,     0,   312,
     628,     0, -1140, -1140,   242,     0,   629,   313,   314,     0,
     315,   316,   317,   318, -1185,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,     0,     0,   295,
     238,     0, -1185,     0,     0,   296,   297,   298,    28,    29,
       0,     0, -1185,    32, -1185, -1185, -1185, -1185,   299,   623,
     624,   240,   625,   626,   627, -1185, -1185, -1185, -1185,     0,
   -1185,     0,   301, -1185,   241,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,   628,     0, -1185, -1185,   242,     0,   629,   313,
     314,     0,   315,   316,   317,   318, -1189,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,     0,
       0,   295,   238,     0, -1189,     0,     0,   296,   297,   298,
      28,    29,     0,     0, -1189,    32, -1189, -1189, -1189, -1189,
     299,   623,   624,   240,   625,   626,   627, -1189, -1189, -1189,
   -1189,     0, -1189,     0,   301, -1189,   241,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,   628,     0, -1189, -1189,   242,     0,
     629,   313,   314,     0,   315,   316,   317,   318, -1186,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,     0,     0,   295,   238,     0, -1186,     0,     0,   296,
     297,   298,    28,    29,     0,     0, -1186,    32, -1186, -1186,
   -1186, -1186,   299,   623,   624,   240,   625,   626,   627, -1186,
   -1186, -1186, -1186,     0, -1186,     0,   301, -1186,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   628,     0, -1186, -1186,
     242,     0,   629,   313,   314,     0,   315,   316,   317,   318,
   -1190,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,     0,     0,   295,   238,     0, -1190,     0,
       0,   296,   297,   298,    28,    29,     0,     0, -1190,    32,
   -1190, -1190, -1190, -1190,   299,   623,   624,   240,   625,   626,
     627, -1190, -1190, -1190, -1190,     0, -1190,     0,   301, -1190,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   628,     0,
   -1190, -1190,   242,     0,   629,   313,   314,     0,   315,   316,
     317,   318, -1181,   603,     0, -1181, -1181, -1181, -1181,     0,
   -1181, -1181,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181,     0, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181,     0,     0, -1181, -1181,     0,
   -1181,     0,     0, -1181, -1181, -1181, -1181, -1181,     0,     0,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181,     0, -1181,     0,
   -1181, -1181, -1181,     0, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181,     0,     0, -1181,     0, -1181,
     604,     0, -1181, -1181, -1181,     0, -1181, -1181, -1181,     0,
   -1181, -1181, -1181, -1181, -1182,   603,     0, -1182, -1182, -1182,
   -1182,     0, -1182, -1182,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182,     0, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182,     0,     0, -1182,
   -1182,     0, -1182,     0,     0, -1182, -1182, -1182, -1182, -1182,
       0,     0, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182, -1182,     0,
   -1182,     0, -1182, -1182, -1182,     0, -1182, -1182, -1182, -1182,
   -1182, -1182, -1182, -1182, -1182, -1182, -1182,     0,     0, -1182,
       0, -1182,   604,     0, -1182, -1182, -1182,     0, -1182, -1182,
   -1182,     0, -1182, -1182, -1182, -1182, -1018,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018,     0, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,     0,
       0,   295, -1018,     0, -1018,     0,     0,   296,   297,   298,
   -1018, -1018,     0,     0, -1018, -1018, -1018, -1018, -1018, -1018,
     299,   300, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018,     0, -1018,     0,   301, -1018, -1018,     0,   302,   303,
     304,   305,   306,   307,   308,   309, -1018, -1018,   310,     0,
       0,   311,     0,   312, -1018,     0,  1830,  1831,  1006,     0,
   -1018,   313,   314,     0,   315,   316,   317,   318, -1144,   603,
       0, -1144, -1144, -1144, -1144,     0, -1144, -1144,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,     0,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,
   -1144,     0,     0, -1144, -1144,     0, -1144,     0,     0, -1144,
   -1144, -1144, -1144, -1144,     0,     0, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,
   -1144, -1144, -1144,     0, -1144,     0, -1144, -1144, -1144,     0,
   -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144, -1144,
   -1144,     0,     0, -1144,     0, -1144,   604,     0, -1144, -1144,
   -1144,     0, -1144, -1144, -1144,     0, -1144, -1144, -1144, -1144,
   -1145,   603,     0, -1145, -1145, -1145, -1145,     0, -1145, -1145,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145,     0, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145,     0,     0, -1145, -1145,     0, -1145,     0,
       0, -1145, -1145, -1145, -1145, -1145,     0,     0, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145, -1145, -1145,     0, -1145,     0, -1145, -1145,
   -1145,     0, -1145, -1145, -1145, -1145, -1145, -1145, -1145, -1145,
   -1145, -1145, -1145,     0,     0, -1145,     0, -1145,   604,     0,
   -1145, -1145, -1145,     0, -1145, -1145, -1145,     0, -1145, -1145,
   -1145, -1145, -1141,   603,     0, -1141, -1141, -1141, -1141,     0,
   -1141, -1141,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141,
   -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141,
   -1141, -1141, -1141,     0, -1141, -1141, -1141, -1141, -1141, -1141,
   -1141, -1141, -1141, -1141, -1141,     0,     0, -1141, -1141,     0,
   -1141,     0,     0, -1141, -1141, -1141, -1141, -1141,     0,     0,
   -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141, -1141,
   -1141, -1141, -1141, -1141, -1141, -1141, -1141,     0, -1141,     0,
   -1141, -1141, -1141,     0, -1141, -1141, -1141, -1141, -1141, -1141,
   -1141, -1141, -1141, -1141, -1141,     0,     0, -1141,     0, -1141,
     604,     0, -1141, -1141, -1141,     0, -1141, -1141, -1141,     0,
   -1141, -1141, -1141, -1141, -1020,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1020, -1020, -1020, -1020, -1020, -1020, -1020,
   -1020, -1020, -1020, -1020, -1020, -1020, -1020, -1020, -1020, -1020,
   -1020, -1020, -1020, -1020, -1020,     0, -1020, -1020, -1020, -1020,
   -1020, -1020, -1020, -1020, -1020, -1020, -1020,     0,     0,   295,
   -1020,     0, -1020,     0,     0,   296,   297,   298, -1020, -1020,
       0,     0, -1020, -1020, -1020, -1020, -1020, -1020,   299,   300,
   -1020, -1020, -1020, -1020, -1020, -1020, -1020, -1020, -1020,     0,
   -1020,     0,   301, -1020, -1020,     0,   302,   303,   304,   305,
     306,   307,   308,   309, -1020, -1020,   310,     0,     0,   311,
       0,   312, -1020,     0, -1020,  2017,  1006,     0, -1020,   313,
     314,     0,   315,   316,   317,   318, -1014,  2020,     0, -1014,
   -1014, -1014, -1014,     0, -1014, -1014,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014,     0, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,     0,
       0, -1014, -1014,     0, -1014,     0,     0, -1014, -1014, -1014,
   -1014, -1014,     0,     0, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,
   -1014,     0, -1014,     0, -1014, -1014, -1014,     0, -1014, -1014,
   -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014, -1014,     0,
       0, -1014,     0, -1014, -1014,     0, -1014, -1014, -1014,     0,
   -1014, -1014, -1014,     0, -1014, -1014, -1014, -1014, -1142,   603,
       0, -1142, -1142, -1142, -1142,     0, -1142, -1142,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1142, -1142, -1142, -1142,
   -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142,
   -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142,     0,
   -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142,
   -1142,     0,     0, -1142, -1142,     0, -1142,     0,     0, -1142,
   -1142, -1142, -1142, -1142,     0,     0, -1142, -1142, -1142, -1142,
   -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142,
   -1142, -1142, -1142,     0, -1142,     0, -1142, -1142, -1142,     0,
   -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142, -1142,
   -1142,     0,     0, -1142,     0, -1142,   604,     0, -1142, -1142,
   -1142,     0, -1142, -1142, -1142,     0, -1142, -1142, -1142, -1142,
   -1143,   603,     0, -1143, -1143, -1143, -1143,     0, -1143, -1143,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143,     0, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143,     0,     0, -1143, -1143,     0, -1143,     0,
       0, -1143, -1143, -1143, -1143, -1143,     0,     0, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143, -1143, -1143,     0, -1143,     0, -1143, -1143,
   -1143,     0, -1143, -1143, -1143, -1143, -1143, -1143, -1143, -1143,
   -1143, -1143, -1143,     0,     0, -1143,     0, -1143,   604,     0,
   -1143, -1143, -1143,     0, -1143, -1143, -1143,     0, -1143, -1143,
   -1143, -1143, -1230,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1230, -1230, -1230, -1230, -1230, -1230, -1230, -1230, -1230,
   -1230, -1230, -1230, -1230, -1230, -1230, -1230, -1230, -1230, -1230,
   -1230, -1230, -1230,     0, -1230, -1230, -1230, -1230, -1230, -1230,
   -1230, -1230, -1230, -1230, -1230,     0,     0,   295, -1230,     0,
   -1230,     0,     0,   296,   297,   298, -1230, -1230,     0,     0,
   -1230, -1230, -1230, -1230, -1230, -1230,   299,   300, -1230, -1230,
   -1230, -1230, -1230, -1230, -1230, -1230, -1230,     0, -1230,     0,
     301, -1230, -1230,     0,   302,   303,   304,   305,   306,   307,
     308,   309, -1230, -1230,   310,     0,     0,   311,     0,   312,
   -1230,     0, -1230, -1230, -1230,     0, -1230,   313,   314,     0,
     315,   316,   317,   318, -1015,  2094,     0, -1015, -1015, -1015,
   -1015,     0, -1015, -1015,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015,     0, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015, -1015, -1015,     0,     0, -1015,
   -1015,     0, -1015,     0,     0, -1015, -1015, -1015, -1015, -1015,
       0,     0, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,     0,
   -1015,     0, -1015, -1015, -1015,     0, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015, -1015, -1015,     0,     0, -1015,
       0, -1015, -1015,     0, -1015, -1015, -1015,     0, -1015, -1015,
   -1015,     0, -1015, -1015, -1015, -1015,  -921,   569,     0,  -921,
    -921,  -921,  -921,     0,  -921,  -921,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -921,  -921,  -921,  -921,  -921,  -921,
    -921,  -921,  -921,  -921,  -921,  -921,  -921,  -921,  -921,  -921,
    -921,  -921,  -921,  -921,  -921,  -921,  -921,     0,     0,  -921,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -921,  -921,     0,  -921,     0,     0,  -921,  -921,  -921,
    -921,  -921,     0,     0,  -921,  -921,  -921,  -921,  -921,  -921,
    -921,  -921,  -921,  -921,  -921,     0,     0,  -921,  -921,  -921,
    -921,     0,  -921,     0,  -921,  -921,  -921,     0,  -921,  -921,
    -921,  -921,  -921,  -921,  -921,  -921,  -921,  -921,  -921,     0,
       0,  -921,   838,  -921,  -921,     0,   571,  -921,  -921,     0,
       0,  -921,  -921,     0,  -921,  -921,  -921,  -921,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,    18,    19,   236,   237,    22,    23,    24,     0,  1107,
    1108,  1109,   615,  1110,  1111,  1112,  1113,   620,   621,  1114,
       0,     0,   295,   238,     0,     0,     0,     0,   296,   297,
     298,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   299,   623,   624,   240,   625,   626,   627,     0,     0,
       0,     0,     0,     0,     0,   301,     0,   241,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   311,     0,   312,   628,     0,     0,     0,   242,
       0,   629,   313,   314,     0,   315,   316,   317,   318,  1257,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,   238,     0,     0,     0,     0,   296,
     297,   298,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   299,   623,    38,   240,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   976,     0,   977,  -110,
     735,     0,     0,   313,   314,     0,   315,   316,   317,   318,
    1264,     0,     1,   291,   100,   292,     0,   293,   294,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,   238,     0,     0,     0,     0,
     296,   297,   298,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,   299,   623,    38,   240,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,   241,
       0,   302,   303,   304,   305,   306,   307,   308,   309,    43,
      44,   310,     0,     0,   311,     0,   312,   976,     0,   977,
     -98,   735,     0,     0,   313,   314,     0,   315,   316,   317,
     318,  1268,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,   238,     0,     0,     0,
       0,   296,   297,   298,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   299,   623,    38,   240,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   976,     0,
     977,  -102,   735,     0,     0,   313,   314,     0,   315,   316,
     317,   318,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,   238,     0,     0,
       0,     0,   296,   297,   298,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   299,   623,    38,   240,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,   241,     0,   302,   303,   304,   305,   306,   307,   308,
     309,    43,    44,   310,     0,     0,   311,     0,   312,  1522,
       0,   977,   -65,   735,     0,     0,   313,   314,     0,   315,
     316,   317,   318,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,   238,     0,
       0,     0,     0,   296,   297,   298,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   299,   623,    38,   240,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,   241,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,     0,   312,
    1531,     0,   977,  1532,   735,     0,     0,   313,   314,     0,
     315,   316,   317,   318,  1589,     0,     1,   291,   100,   292,
       0,   293,   294,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,   238,
       0,     0,     0,     0,   296,   297,   298,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,   299,   623,    38,
     240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,   241,     0,   302,   303,   304,   305,   306,
     307,   308,   309,    43,    44,   310,     0,     0,   311,     0,
     312,   976,     0,   977,   -81,   735,     0,     0,   313,   314,
       0,   315,   316,   317,   318,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
     238,     0,     0,     0,     0,   296,   297,   298,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   299,   623,
      38,   240,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,   241,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,  1531,     0,   977,  -107,   735,     0,     0,   313,
     314,     0,   315,   316,   317,   318,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,   238,     0,     0,     0,     0,   296,   297,   298,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   299,
     623,    38,   240,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,   241,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   310,     0,     0,
     311,     0,   312,  1531,     0,   977,   -97,   735,     0,     0,
     313,   314,     0,   315,   316,   317,   318,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,   238,     0,     0,     0,     0,   296,   297,   298,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     299,   623,    38,   240,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,   241,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,  1531,     0,   977,  -101,   735,     0,
       0,   313,   314,     0,   315,   316,   317,   318,  1791,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,    18,    19,   236,   237,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,   238,     0,     0,     0,     0,   296,   297,
     298,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   299,   623,    38,   240,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,   241,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   311,     0,   312,   976,     0,   977,   -88,   735,
       0,     0,   313,   314,     0,   315,   316,   317,   318,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,   238,     0,     0,     0,     0,   296,
     297,   298,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   299,   623,    38,   240,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,  1531,     0,   977,   -78,
     735,     0,     0,   313,   314,     0,   315,   316,   317,   318,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,   238,     0,     0,     0,     0,
     296,   297,   298,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,   299,   623,    38,   240,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,   241,
       0,   302,   303,   304,   305,   306,   307,   308,   309,    43,
      44,   310,     0,     0,   311,     0,   312,  1531,     0,   977,
     -85,   735,     0,     0,   313,   314,     0,   315,   316,   317,
     318,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,     0,     0,
       0,   296,   297,   298,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,   299,   392,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
      40,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,   290,   312,     1,   291,
     100,   292,     0,   293,   294,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     856,    27,     0,     0,     0,     0,   296,   297,   298,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,   299,
     392,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,    40,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   310,     0,     0,
     311,   290,   312,     1,   291,   100,   292,     0,   293,   294,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,     0,     0,
       0,   296,   297,   298,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,   299,   392,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
      40,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,   724,   312,     0,     0,
       0,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1186,    27,     0,     0,
       0,     0,   296,   297,   298,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,   299,   392,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,    40,     0,   302,   303,   304,   305,   306,   307,   308,
     309,    43,    44,   310,     0,     0,   698,   724,   312,     0,
       0,     0,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
       0,     0,     0,   296,   297,   298,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,   299,   392,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,    40,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,   290,   312,
       1,   291,   100,   292,   242,   293,   294,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,     0,     0,     0,   296,   297,
     298,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,   299,   392,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,    40,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   698,   724,   312,     0,     0,     0,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,   550,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,     0,     0,     0,   296,
     297,   298,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,   299,   392,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,    40,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     879,     0,     0,   880,   724,   312,     0,     0,     0,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1107,  1108,  1109,   615,  1110,  1111,  1112,  1113,   620,
     621,  1114,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,   299,   300,  1115,     0,   625,   626,   627,
       0,  1864,     0,     1,   291,   100,   292,   301,   293,   294,
       0,   302,   303,   304,   305,   306,   307,   308,   309,    43,
      44,   310,     0,     0,   311,  1150,   312,   628,     2,  1151,
       0,   242,     0,   629,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1107,  1108,  1109,   615,  1110,  1111,  1112,  1113,
     620,   621,  1114,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,   299,   300,  1115,     0,   625,   626,
     627,     0,   290,     0,     1,   291,   100,   292,   301,   293,
     294,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   628,     2,
       0,     0,   242,     0,   629,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,     0,     0,     0,     0,     0,
      32,     0,     0,     0,     0,   299,   300,  1115,     0,   625,
     626,   627,     0,   290,     0,     1,   291,   100,   292,   301,
     293,   294,     0,   302,   303,   304,   305,   306,   307,   308,
     309,    43,    44,   310,     0,     0,   311,     0,   312,   628,
       2,     0,     0,   242,     0,   629,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,  1150,   312,
       0,     0,  1755,     0,     0,     0,  1906,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  1150,   312,     0,     0,  1151,     0,     0,     0,     0,
     313,   314,  1914,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  1150,   312,     0,     0,  1151,     0,
       0,     0,     0,   313,   314,  1917,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,  2040,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  1150,   312,  1885,
       0,  1151,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1150,   312,  1885,     0,  1151,     0,     0,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,     0,   312,     0,     0,  2092,  2093,  1006,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  2104,   312,  2105,     0,
    1146,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  1150,
     312,  2103,     0,  1151,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,     0,   312,  1145,     0,  1146,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,  1340,   312,     0,     0,     0,
       0,   735,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
    1126,     0,     0,     0,   735,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,  1622,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  1150,   312,     0,     0,  1151,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  1623,   312,  1624,     0,     0,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,     0,   312,  1632,
       0,  1146,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1680,   312,     0,     0,     0,     0,   735,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1689,   312,     0,     0,     0,     0,   735,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  1721,   312,     0,     0,
    1146,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,     0,
     312,     0,     0,  1146,     0,     0,     0,     0,   313,   314,
    1749,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,     0,   312,     0,     0,  1752,     0,     0,     0,
    1753,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,     0,     0,  1146,
       0,     0,     0,     0,   313,   314,  1759,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,  1752,     0,     0,     0,  1761,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  1860,   312,     0,     0,  1146,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  1862,   312,     0,     0,  1146,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  1863,   312,     0,
       0,  1151,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1866,   312,     0,     0,  1146,     0,     0,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1623,   312,  1624,     0,     0,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,  1886,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,     0,   312,  1883,     0,
    1146,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  1887,
     312,  1624,     0,     0,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,     0,   312,     0,     0,  1752,     0,     0,     0,
    1900,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,     0,     0,  1752,
       0,     0,     0,  1904,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,  1146,     0,     0,     0,     0,   313,   314,  1913,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,     0,   312,     0,     0,  1146,     0,     0,     0,     0,
     313,   314,  1916,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  2025,   312,     0,     0,  1146,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  1861,   312,     0,
       0,  1151,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    2032,   312,     0,     0,  1146,     0,     0,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1887,   312,  1624,     0,     0,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  2108,   312,     0,     0,
    1146,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,     0,
     312,     0,     0,     0,  2136,  1006,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  2139,   312,     0,     0,  1146,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,  2140,   312,     0,     0,  1146,
       0,     0,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,  2167,   312,
       0,     0,  1146,     0,     0,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,     0,   312,     0,     0,     0,     0,     0,     0,     0,
     313,   314,   534,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,     0,   312,     0,     0,     0,     0,
     735,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,     0,   312,     0,
       0,     0,     0,     0,     0,     0,   313,   314,   830,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
       0,   312,     0,     0,     0,     0,     0,     0,     0,   313,
     314,   834,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,     0,   312,     0,     0,     0,     0,  1006,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,     0,   312,     0,     0,
       0,     0,     0,     0,     0,   313,   314,  1047,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,     0,
     312,     0,     0,     0,     0,     0,     0,  1099,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
    1467,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,   724,   312,     0,     0,     0,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,     0,     0,     0,
       0,   735,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,     0,     0,     0,     0,     0,   313,   314,  1570,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  1606,   312,     0,     0,     0,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,     0,   312,     0,     0,     0,     0,
       0,     0,  1609,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,  1820,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,     0,   312,     0,
       0,     0,     0,  1819,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,  1823,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
       0,   312,     0,     0,     0,     0,   735,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,  1827,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,     0,   312,     0,     0,     0,     0,   735,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,     0,   312,     0,     0,
       0,     0,   735,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  1873,
     312,     0,     0,     0,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,  1940,     0,   312,     0,     0,     0,     0,  1819,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,  2041,   312,     0,     0,     0,
       0,     0,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,  2099,   312,
       0,     0,     0,     0,     0,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   688,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,     0,   312,     0,     0,     0,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   689,     0,   312,     0,     0,     0,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   688,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   698,     0,   312,     0,
       0,     0,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     0,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   721,
       0,   312,  -909,   569,     0,  -909,  -909,  -909,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,
    -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,  -909,
    -909,  -909,  -909,     0,     0,  -909,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -909,  -909,     0,
    -909,     0,     0,  -909,  -909,     0,  -909,  -909,     0,     0,
    -909,  -909,  -909,  -909,  -909,  -909,     0,  -909,  -909,  -909,
    -909,     0,     0,  -909,  -909,  -909,  -909,     0,  -909,     0,
    -909,  -909,  -909,     0,  -909,  -909,  -909,  -909,  -909,  -909,
    -909,     0,  -909,  -909,  -909,     0,     0,  -909,   570,  -909,
    -909,     0,   571,  -909,     0,     0,     0,  -909,  -909,  -189,
     897,     0,  -189,  -189,  -189,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
    -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
       0,     0,  -189,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -189,  -189,     0,  -189,     0,     0,
    -189,  -189,     0,  -189,  -189,     0,     0,  -189,  -189,  -189,
    -189,  -189,  -189,     0,  -189,  -189,  -189,  -189,     0,     0,
    -189,  -189,  -189,  -189,     0,  -189,     0,  -189,  -189,  -189,
       0,  -189,  -189,  -189,  -189,  -189,  -189,  -189,     0,  -189,
    -189,  -189,     0,     0,  -189,     0,  -189,   898,     0,   899,
    -189,     0,     0,     0,  -189,  -189,  -253,   911,     0,     1,
     291,   100,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,  -253,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   410,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   411,    32,   412,   413,    35,    36,
       0,   392,    38,    39,   414,     0,     0,   415,   416,   417,
     418,     0,   419,     0,   420,   421,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   422,     0,   423,   424,  -251,   914,  -253,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,  -251,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   410,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   411,    32,   412,   413,    35,    36,     0,
     392,    38,    39,   414,     0,     0,   415,   416,   417,   418,
       0,   419,     0,   420,   421,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     422,     0,   423,   424,  -254,   911,  -251,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,  -254,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   410,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   411,    32,   412,   413,    35,    36,     0,   392,
      38,    39,   414,     0,     0,   415,   416,   417,   418,     0,
     419,     0,   420,   421,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   422,
       0,   423,   424,  -252,   914,  -254,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,  -252,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   410,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   411,    32,   412,   413,    35,    36,     0,   392,    38,
      39,   414,     0,     0,   415,   416,   417,   418,     0,   419,
       0,   420,   421,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   422,     0,
     423,   424,     0,   409,  -252,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     410,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     411,    32,   412,   413,    35,    36,     0,   392,    38,    39,
     414,     0,     0,   415,   416,   417,   418,     0,   419,     0,
     420,   421,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   422,     0,   423,
     424,     0,   475,   425,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   410,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   411,
      32,   412,   413,    35,    36,     0,   392,    38,    39,   414,
       0,     0,   415,   416,   417,   418,     0,   419,     0,   420,
     421,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   422,     0,   423,   424,
       0,   497,   476,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   410,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   411,    32,
     412,   413,    35,    36,     0,   392,    38,    39,   414,     0,
       0,   415,   416,   417,   418,     0,   419,     0,   420,   421,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   422,     0,   423,   424,     0,
     502,   498,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   410,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   411,    32,   412,
     413,    35,    36,     0,   392,    38,    39,   414,     0,     0,
     415,   416,   417,   418,     0,   419,     0,   420,   421,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   422,     0,   423,   424,     0,   506,
     503,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   410,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   411,    32,   412,   413,
      35,    36,     0,   392,    38,    39,   414,     0,     0,   415,
     416,   417,   418,     0,   419,     0,   420,   421,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   422,     0,   423,   424,     0,   911,   507,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   410,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   411,    32,   412,   413,    35,
      36,     0,   392,    38,    39,   414,     0,     0,   415,   416,
     417,   418,     0,   419,     0,   420,   421,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   422,     0,   423,   424,     0,   914,  -764,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   410,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   411,    32,   412,   413,    35,    36,
       0,   392,    38,    39,   414,     0,     0,   415,   416,   417,
     418,     0,   419,     0,   420,   421,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   422,     0,   423,   424,     0,   911,  -765,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   410,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   411,    32,   412,   413,    35,    36,     0,
     392,    38,    39,   414,     0,     0,   415,   416,   417,   418,
       0,   419,     0,   420,   421,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     422,     0,   423,   424,     0,   914,  -761,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   410,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   411,    32,   412,   413,    35,    36,     0,   392,
      38,    39,   414,     0,     0,   415,   416,   417,   418,     0,
     419,     0,   420,   421,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   422,
       0,   423,   424,     0,   911,  -762,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   410,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   411,    32,   412,   413,    35,    36,     0,   392,    38,
      39,   414,     0,     0,   415,   416,   417,   418,     0,   419,
       0,   420,   421,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   422,     0,
     423,   424,     0,   914,  -767,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     410,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     411,    32,   412,   413,    35,    36,     0,   392,    38,    39,
     414,     0,     0,   415,   416,   417,   418,     0,   419,     0,
     420,   421,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   422,     0,   423,
     424,     0,  1029,  -768,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   410,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   411,
      32,   412,   413,    35,    36,     0,   392,    38,    39,   414,
       0,     0,   415,   416,   417,   418,     0,   419,     0,   420,
     421,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   422,     0,   423,   424,
       0,  1033,  1030,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   410,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   411,    32,
     412,   413,    35,    36,     0,   392,    38,    39,   414,     0,
       0,   415,   416,   417,   418,     0,   419,     0,   420,   421,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   422,     0,   423,   424,     0,
     911,  1034,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   410,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   411,    32,   412,
     413,    35,    36,     0,   392,    38,    39,   414,     0,     0,
     415,   416,   417,   418,     0,   419,     0,   420,   421,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   422,     0,   423,   424,     0,   914,
    -744,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   410,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   411,    32,   412,   413,
      35,    36,     0,   392,    38,    39,   414,     0,     0,   415,
     416,   417,   418,     0,   419,     0,   420,   421,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   422,     0,   423,   424,     0,   911,  -745,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   410,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   411,    32,   412,   413,    35,
      36,     0,   392,    38,    39,   414,     0,     0,   415,   416,
     417,   418,     0,   419,     0,   420,   421,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   422,     0,   423,   424,     0,   914,  -747,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   410,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   411,    32,   412,   413,    35,    36,
       0,   392,    38,    39,   414,     0,     0,   415,   416,   417,
     418,     0,   419,     0,   420,   421,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   422,     0,   423,   424,     0,  1552,  -748,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   410,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   411,    32,   412,   413,    35,    36,     0,
     392,    38,    39,   414,     0,     0,   415,   416,   417,   418,
       0,   419,     0,   420,   421,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     422,     0,   423,   424,     0,   911,  1553,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   410,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   411,    32,   412,   413,    35,    36,     0,   392,
      38,    39,   414,     0,     0,   415,   416,   417,   418,     0,
     419,     0,   420,   421,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   422,
       0,   423,   424,     0,   914,  -670,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   410,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   411,    32,   412,   413,    35,    36,     0,   392,    38,
      39,   414,     0,     0,   415,   416,   417,   418,     0,   419,
       0,   420,   421,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   422,     0,
     423,   424,     0,   911,  -671,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     410,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     411,    32,   412,   413,    35,    36,     0,   392,    38,    39,
     414,     0,     0,   415,   416,   417,   418,     0,   419,     0,
     420,   421,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   422,     0,   423,
     424,     0,   914,  -750,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   410,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   411,
      32,   412,   413,    35,    36,     0,   392,    38,    39,   414,
       0,     0,   415,   416,   417,   418,     0,   419,     0,   420,
     421,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   422,     0,   423,   424,
       0,   911,  -751,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   410,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   411,    32,
     412,   413,    35,    36,     0,   392,    38,    39,   414,     0,
       0,   415,   416,   417,   418,     0,   419,     0,   420,   421,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   422,     0,   423,   424,     0,
     914,  -663,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   410,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   411,    32,   412,
     413,    35,    36,     0,   392,    38,    39,   414,     0,     0,
     415,   416,   417,   418,     0,   419,     0,   420,   421,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   422,     0,   423,   424,     0,   911,
    -664,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   410,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   411,    32,   412,   413,
      35,    36,     0,   392,    38,    39,   414,     0,     0,   415,
     416,   417,   418,     0,   419,     0,   420,   421,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   422,     0,   423,   424,     0,   914,  -659,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   410,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   411,    32,   412,   413,    35,
      36,     0,   392,    38,    39,   414,     0,     0,   415,   416,
     417,   418,     0,   419,     0,   420,   421,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   422,     0,   423,   424,     0,   911,  -660,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   410,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   411,    32,   412,   413,    35,    36,
       0,   392,    38,    39,   414,     0,     0,   415,   416,   417,
     418,     0,   419,     0,   420,   421,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   422,     0,   423,   424,     0,   914,  -649,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   410,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   411,    32,   412,   413,    35,    36,     0,
     392,    38,    39,   414,     0,     0,   415,   416,   417,   418,
       0,   419,     0,   420,   421,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     422,     0,   423,   424,     0,   911,  -650,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   410,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   411,    32,   412,   413,    35,    36,     0,   392,
      38,    39,   414,     0,     0,   415,   416,   417,   418,     0,
     419,     0,   420,   421,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   422,
       0,   423,   424,     0,   914,  -644,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   410,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   411,    32,   412,   413,    35,    36,     0,   392,    38,
      39,   414,     0,     0,   415,   416,   417,   418,     0,   419,
       0,   420,   421,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   422,     0,
     423,   424,     0,   911,  -645,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     410,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     411,    32,   412,   413,    35,    36,     0,   392,    38,    39,
     414,     0,     0,   415,   416,   417,   418,     0,   419,     0,
     420,   421,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   422,     0,   423,
     424,     0,   914,  -661,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   410,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   411,
      32,   412,   413,    35,    36,     0,   392,    38,    39,   414,
       0,     0,   415,   416,   417,   418,     0,   419,     0,   420,
     421,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   422,     0,   423,   424,
       0,   290,  -662,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   410,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   411,    32,
     412,   413,    35,    36,     0,   392,    38,    39,   414,     0,
       0,   415,   416,   417,   418,     0,   419,     0,   420,   421,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   422,     0,   423,   424,   409,
       0,     1,   291,   100,     0,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   410,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   411,    32,   412,   413,
      35,    36,     0,   392,    38,    39,   414,     0,     0,   415,
     416,   417,   418,     0,   419,     0,   420,   421,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   422,     0,   423,   424,   475,     0,     1,
     291,   100,     0,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   410,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   411,    32,   412,   413,    35,    36,
       0,   392,    38,    39,   414,     0,     0,   415,   416,   417,
     418,     0,   419,     0,   420,   421,    40, -1235,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   422,     0,   423,   424,     0,     0,     0,     0,     0,
       0,   313,   314,     0,     0,     0, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,     0, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
       0,     0,     0, -1235,     0, -1235,     0,     0,     0,     0,
       0, -1235, -1235,     0,     0, -1235, -1235, -1235, -1235, -1235,
   -1235,     0,     0, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235,     0, -1235, -1220,     0, -1235, -1235,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1235, -1235,     0,
       0,     0,     0,     0,     0, -1235,     0,     0, -1235, -1235,
       0, -1235,     0, -1220, -1220, -1220, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220,     0, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220,     0,     0,     0,
   -1220,     0, -1220,     0,     0,     0,     0,     0, -1220, -1220,
       0,     0, -1220, -1220, -1220, -1220, -1220, -1220,     0,     0,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,     0,
   -1220, -1222,     0, -1220, -1220,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1220, -1220,     0,     0,     0,     0,
       0,     0, -1220,     0,     0, -1220, -1220,     0, -1220,     0,
   -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
   -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
   -1222, -1222,     0, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
   -1222, -1222, -1222, -1222,     0,     0,     0, -1222,     0, -1222,
       0,     0,     0,     0,     0, -1222, -1222,     0,     0, -1222,
   -1222, -1222, -1222, -1222, -1222,     0,     0, -1222, -1222, -1222,
   -1222, -1222, -1222, -1222, -1222, -1222,     0, -1222, -1219,     0,
   -1222, -1222,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1222, -1222,     0,     0,     0,     0,     0,     0, -1222,
       0,     0, -1222, -1222,     0, -1222,     0, -1219, -1219, -1219,
   -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219,
   -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219,     0,
   -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219,
   -1219,     0,     0,     0, -1219,     0, -1219,     0,     0,     0,
       0,     0, -1219, -1219,     0,     0, -1219, -1219, -1219, -1219,
   -1219, -1219,     0,     0, -1219, -1219, -1219, -1219, -1219, -1219,
   -1219, -1219, -1219,     0, -1219, -1221,     0, -1219, -1219,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1219, -1219,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1219,
   -1219,     0, -1219,     0, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221, -1221, -1221, -1221, -1221, -1221,     0, -1221, -1221, -1221,
   -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,     0,     0,
       0, -1221,     0, -1221,     0,     0,     0,     0,     0, -1221,
   -1221,     0,     0, -1221, -1221, -1221, -1221, -1221, -1221,     0,
       0, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,
       0, -1221,     0,     0, -1221, -1221,     1,     0,     0,     0,
       0,     0,     0,     0,     0, -1221, -1221,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1221, -1221,     0, -1221,
       0,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   238,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   239,    38,
     240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   241,     0,     1,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,     0,     0,   852,     0,
       0,     0,     0,     0,     0,  1449,     0,     0,     0,   552,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   238,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   239,    38,   240,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   241,     0,     1,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,  1214,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1237,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   241,     0,     1,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,     0,     0,  1214,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1713,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   238,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   239,    38,   240,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     241,     0,     1,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,     0,     0,  1214,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1728,     2,     3,     4,
     261,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    26,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,   262,    31,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       1,     0,     0,     0,    42,     0,     0,     0,     0,    43,
      44,    45,     0,     0,    46,     0,     0,     0,     0,     0,
       0,     0,     0,   263,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,   410,     0,     0,     0,     0,
       0,    28,    29,     0,     0,   411,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
       0,     0,   939,     0,   423,     0,     0,     0,     0,     0,
       0,   940,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,   550,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1517,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
      46,     0,     0,     0,     0,     0,     0,     0,     0,   920,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,   -66,
     -66,   -66,   -66,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   -66,     0,
       0,     0,     0,     0,     0,     0,   -66,   -66,     0,     0,
       0,   -66,     0,     0,     0,     0,     0,   -66,   -66,   -66,
       0,     0,     0,     0,     0,     0,     0,  1740,     0,     0,
       0,     0,   -66,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -66,   -66,     0,     0,     0,     0,     0,     0,
    1518,     0,  1519,   -66,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   238,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   239,    38,   240,     0,     0,     0,     0,     0,     0,
       0,  1744,     0,     0,     0,     0,   241,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -111,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   238,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   239,    38,   240,     0,     0,
       0,     0,     0,     0,     0,  1745,     0,     0,     0,     0,
     241,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -95,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     238,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,     0,   239,
      38,   240,     0,     0,     0,     0,     0,     0,     0,  1851,
       0,     0,     0,     0,   241,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -96,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   238,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   239,    38,   240,     0,     0,     0,     0,
       0,     0,     0,  2002,     0,     0,     0,     0,   241,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -80,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   238,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   239,    38,   240,
       0,     0,     0,     0,     0,     0, -1301,   280,     0,     1,
       0,     0,   241,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   -87,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,    25,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    26,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,    30,    31,     0,    32,    33,    34,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       1,     0,     0,     0,     0,     0,    40,    41,     0,     0,
       0,    42,     0,     0,     0,     0,    43,    44,    45,     0,
       0,    46,     0,     0,    47,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,     0,    40,     0,     0,
       0,     0,     0,     0,   822,     0,     0,    43,    44,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1408,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
       0,    40,     0,     0,     0,     0,     0,     0,   822,     0,
       0,    43,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1771,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
     159,     0,     1,     0,     0,    40,     0,     0,     0,     0,
       0,     0,   822,     0,     0,    43,    44,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1772,     2,     3,     4,
     160,     6,     7,     8,     9,    10,   161,   162,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    26,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,   159,     0,     1,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,    46,     0,     0,   163,     2,     3,
       4,   160,     6,     7,     8,     9,    10,   161,   162,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,   590,     0,     1,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,     0,     0,    46,     0,     0,   163,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   591,   592,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
       0,     0,     0,  -929,     0,  -929,     0,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,     0,     0,    46,     0,     0,   593,
    -929,  -929,  -929,  -929,  -929,  -929,  -929,  -929,  -929,  -929,
    -929,  -929,  -929,  -929,  -929,  -929,  -929,  -929,  -929,  -929,
    -929,  -929,  -929,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -929,     0,
       0,     0,     0,     0,     0,     0,  -929,  -929,     0,     0,
       0,  -929,     0,     0,     0,     0,     0,  -929,  -929,  -929,
       0,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,  -929,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -929,  -929,  -929,     0,     0,  -929,     0,     0,
    -929,     2,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,    30,
      31,     0,    32,    33,    34,    35,    36,     0,    37,    38,
      39,     0,     0,     0, -1302,   272,     0,     1,     0,     0,
       0,     0,     0,    40,    41,     0,     0,     0,    42,     0,
       0,     0,     0,    43,    44,    45,     0,     0,    46,     0,
       0,    47,     2,     3,     4,   160,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,    33,    34,    35,    36,     0,    37,
      38,    39,     0,   193,     0,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,     0,     0,    46,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   199,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,   193,     0,     1,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,  1214,  1700,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   199,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,   193,     0,     1,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,     0,   200,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   199,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
     932,     0,     1,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,     0,     0,     0,     0,   375,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   199,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,  1475,
       0,     1,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,     0,     0,     0,     0,   200,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   199,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,   193,     0,
       1,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     0,     0,     0,   375,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   199,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,   193,     0,     1,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,     0,
       0,     0,     0,  1567,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   199,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,   159,     0,     1,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,     0,     0,
       0,     0,  1930,     2,     3,     4,   160,     6,     7,     8,
       9,    10,   550,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,   159,     0,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
      46,     2,     3,     4,   160,     6,     7,     8,     9,    10,
     550,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,   876,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,     0,     0,    46,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,   877,     2,     3,     4,
     160,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    26,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,    46,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
       0,     0,    46,     2,   194,   195,   196,   197,   198,     8,
       9,    10,   550,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
      46,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     0,     0,   713,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,  1454,     2,   194,   195,
     196,   197,   198,   226,   227,   228,  1539,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   239,    38,   240,     0,  1061,     0,
       1,     0,     0,     0,     0,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,    46,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,  1062,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   199,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,  1067,     0,     1,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,  1068,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   199,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,  1073,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,  1074,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   199,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,   861,
       0,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   238,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   239,    38,   240,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   241,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,  1022,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   199,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,  1079,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   199,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   489,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,   822,     0,     0,    43,    44,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   199,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   238,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,   464,   465,
       0,     0,     0,   239,    38,   240,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   241,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   238,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   239,    38,   240,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   241,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   238,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   239,    38,   240,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   241,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,   852,  1697,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   552,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44
};

static const yytype_int16 yycheck[] =
{
       0,   122,   521,   126,  1224,   827,   712,    77,   627,   918,
     918,   457,   122,   868,   818,    80,   851,   851,  1091,    86,
     147,    58,   827,   750,    80,   150,   950,     3,   735,   566,
      30,    31,    77,   928,    94,   742,    87,   988,   745,   990,
       1,    41,   851,   714,  1616,   989,    46,    87,   460,    30,
     330,    94,  1006,    53,   177,     1,  1628,   122,    58,    77,
      60,    42,   818,     3,     1,   456,   122,   541,   988,   796,
     990,    77,   735,     3,     3,   329,    76,    77,    78,   742,
      80,    87,   745,     1,    78,    85,    77,    87,    94,   343,
     115,   796,    87,   347,    94,    95,    87,   571,    98,    94,
     574,   126,   576,     3,   578,   120,   988,   107,   990,   122,
     110,   124,   127,   180,   181,     3,     3,     5,     5,     3,
     101,   102,   122,     1,   105,   125,   126,     1,    28,    53,
     130,   168,     1,    73,   134,   135,   136,    37,   138,   330,
     116,   996,   142,     5,   144,   180,   181,   147,   148,   138,
     150,   151,   152,   153,     5,   155,     3,   115,   158,   138,
     969,   113,   151,   124,   153,    17,   155,     3,   168,     5,
     122,     1,   151,     1,   153,   121,   155,   177,     1,     1,
       1,     3,     3,   107,   121,   115,     5,   116,     1,   256,
     276,   120,   192,   126,     3,   124,   266,   122,     1,   124,
       3,    17,   202,   121,   204,   988,   276,   990,     1,   258,
       3,     1,   212,   213,     5,   115,   276,     1,   278,    28,
       1,   266,   222,   258,   456,   225,   126,   278,   116,   116,
     541,   276,   258,   276,     1,   278,   124,   124,   278,   276,
       3,     5,   277,   121,   177,     1,   115,   121,   266,     0,
       3,     1,   871,   253,    86,     1,     1,   380,   258,   253,
     571,   123,   262,   574,     1,   576,   266,   578,   192,   116,
       1,     1,   278,   120,   651,   652,   276,   124,   278,     1,
     116,   262,   407,   278,   136,   276,     3,   278,   124,  1213,
     118,   121,   120,   121,    11,   118,   296,   120,   121,   121,
     121,   120,   302,   116,    77,    78,  1878,   120,  1259,    17,
      73,   311,    17,   122,  1258,  1266,     3,   854,   121,  1270,
     136,  1265,   372,     3,   374,  1269,    77,     3,   121,   785,
       3,   121,   313,   113,   125,    11,    87,   121,   118,  1259,
     121,    28,     1,    94,    95,     1,  1266,     3,   180,   181,
    1270,   404,   125,    77,   121,     3,   120,   813,   121,   426,
     427,   428,   429,     3,   118,   121,   366,   367,   122,   122,
     456,   121,   372,     3,   374,   121,   121,  1259,   113,  1183,
     380,  1185,   636,   120,  1266,   639,   386,   118,  1270,  1096,
     120,     5,   457,   516,   116,   112,   113,   114,   120,   399,
     124,   457,   119,   120,   404,   122,   406,   407,     3,   532,
     410,   411,   115,   451,   452,   542,   416,    65,     1,   419,
     420,   421,   422,   423,   256,    11,   258,  1183,   136,  1185,
     551,   136,     3,  1096,    90,   122,   112,   113,   114,   477,
     478,   551,   122,   496,   120,   277,   122,   380,   372,   122,
     374,   451,   452,   453,     3,   522,   456,   457,   525,   118,
     460,   499,   500,   463,   112,   113,   504,   505,   468,     3,
     508,   509,   472,   473,   122,  1202,  1259,   477,   478,   925,
     253,  1208,   122,  1266,   875,     5,   116,  1270,  1708,   489,
     770,   771,   772,   266,    28,   495,   496,  1202,   551,   499,
     500,   115,   552,  1208,   504,   505,  1043,  1431,   508,   509,
       5,  1584,   512,   513,   514,   266,   516,  1054,   113,   519,
     800,   801,   802,   118,   936,   276,   938,   278,   114,     1,
     530,   531,   532,   120,   120,   118,   536,   120,     3,   126,
       5,   541,   542,  1214,  1439,   116,   546,     1,   548,   549,
       3,   551,   552,   553,   129,   130,   556,   546,   949,   548,
     875,  1232,   612,    28,   113,   114,   566,   546,  1239,   548,
    1494,   571,     3,     1,   574,     3,   576,     3,   578,   770,
     771,   772,     3,   516,  1479,   585,  1060,  1482,   122,  1411,
    1412,  1545,  1427,  1427,   426,     5,   682,   429,   118,   532,
     649,   650,   651,   652,  1078,   996,  1411,  1412,     1,   800,
     801,   802,   682,   988,   989,   990,   130,   617,  1427,   619,
     118,   116,   682,   649,   650,   651,   652,   627,   552,  1538,
    1538,     3,   115,   566,   949,     1,   868,   682,   135,   682,
    1591,   138,   677,   678,   116,   712,  1590,    73,   120,   649,
     650,   651,   652,   120,   151,   121,   153,   122,   155,   126,
     411,   585,   116,   116,  2124,     3,   120,   667,   668,   121,
    1505,  1591,  1507,     7,     8,     9,   676,     3,  1512,   732,
       1,     3,   682,   664,   665,   116,     7,     8,     9,   689,
     522,   112,   113,   525,   115,   121,   928,     7,     8,     9,
     116,  1921,   292,   703,   120,   122,   116,    77,   124,  1591,
     710,   711,   712,   713,   714,   715,   121,   949,  2178,   309,
     114,   721,  1099,   116,     1,  1102,   120,   120,     7,     8,
       9,   852,   732,     7,     8,     9,   717,   718,   719,   512,
     513,   514,   852,     1,   786,     3,   118,   747,   120,  1060,
     116,   751,   292,   292,   120,  1066,   288,   530,   531,   112,
       3,  1072,     0,  1140,   996,   297,  1473,  1078,  1722,   309,
     309,   303,   814,   787,   112,   113,   115,  1154,  1155,  1156,
    1157,   115,   868,  1707,   122,    28,   112,   113,  1712,   123,
     112,   113,   126,   793,   115,   292,   122,   797,   119,   852,
     122,   815,   123,     1,   925,   126,   859,   177,  1591,   122,
    1473,   124,   309,   123,   867,   925,   126,   649,   650,   651,
     652,   335,   822,   823,   824,   878,   118,   827,   828,   829,
     122,     3,   957,   958,   901,   902,   963,   904,   115,   116,
     907,   908,  1793,   120,   123,   677,   678,   679,  1792,   123,
     850,   851,   852,  1777,   112,   113,   856,   116,   858,   859,
     925,   120,   120,   949,     5,  1819,   866,   867,   868,   925,
     920,   871,   115,  1793,     3,   875,  1830,   877,   878,   788,
     880,     3,   882,  1258,  1259,     1,  1781,  1782,  1425,   288,
    1265,  1266,   406,   116,  1269,  1270,   266,   120,   297,    28,
    1027,  1028,    80,   314,   303,   119,   276,   816,    37,   959,
     996,  1793,   979,     3,    12,    13,   113,   115,   116,   919,
    1043,   921,   120,   120,     3,   925,     3,   119,   928,   126,
     119,   682,   124,   933,  1055,   124,   936,   785,   938,   939,
     112,   113,   126,    65,   122,  1055,   789,   119,   948,   949,
     950,    28,   130,     3,   451,   452,   118,   957,   958,   120,
     960,     3,   962,   963,   788,   813,   463,   787,   968,   969,
     970,   971,   150,   962,   817,  1255,     3,   789,    28,     3,
     477,   478,   114,   962,  1818,   786,   115,    11,   120,  1042,
     112,   113,   816,  1031,  1032,   815,   996,  1035,  1036,   115,
     116,    28,   499,   500,   120,   817,  1056,   504,   505,   120,
    1793,   508,   509,   814,  1938,   113,   114,     7,     8,     9,
    1557,   120,   112,   113,  1730,   115,  1545,  1027,  1028,  1648,
    1701,  1031,  1032,   112,   113,  1035,  1036,  1037,   115,  1039,
     119,   121,  1042,  1043,     7,     8,     9,   112,  1037,   546,
    1099,   548,  1052,  1102,  1054,  1055,  1056,  1107,  1037,     3,
    1060,     5,  2016,  1063,  1255,   120,  1066,   132,   133,  1069,
     112,   113,  1072,  1099,   115,  1075,  1102,   116,  1078,   122,
    1080,   120,     3,  1474,     5,   126,   456,    31,   112,   113,
     114,  1140,  2000,  1214,  1094,   119,   120,   112,   122,  1099,
      12,    13,  1102,   113,  1214,  1154,  1155,  1156,  1157,   115,
    1043,  1111,   122,  1113,  1140,   783,   784,   132,   133,  1052,
     126,  1054,  1122,    69,    70,   115,   115,   121,  1154,  1155,
    1156,  1157,  1056,   123,   116,  1135,   126,   126,  2092,     3,
    1140,  1141,  1195,   811,   812,   116,   516,   979,   115,   519,
    1131,   683,   115,   115,  1154,  1155,  1156,  1157,   116,  1212,
     123,   115,   120,   126,    28,  1215,   124,     7,     8,     9,
      14,    15,  1172,  1173,  1174,   121,  1176,  2012,  2132,  2014,
      44,   116,   129,   130,  1173,   120,  1186,  1237,  1188,   367,
     121,   112,   113,    46,  1173,  1195,    69,    70,   115,  1199,
     116,   113,   114,  1203,   120,  1205,    77,  1439,   124,  1209,
      74,    75,   113,  1213,  1214,  1590,  1591,   119,    91,  1596,
    1597,   122,    95,   124,    97,   783,   784,     3,   406,   407,
     115,  1608,  1232,   411,  1940,   114,     3,  1774,     5,  1239,
     115,   120,   420,   130,     3,   423,     3,  1479,   121,  1249,
    1482,   128,    28,   811,   812,     0,   115,     3,     7,     8,
       9,   122,  1186,   124,    31,   779,   780,  1099,   782,  1042,
    1102,    28,   125,   122,   116,  1256,   148,  1896,   120,   457,
     152,   121,    28,   123,   683,   463,   115,    44,   116,   115,
     119,    37,   120,   807,   808,   809,   810,   126,    74,    75,
     116,  1838,   115,    79,   120,   116,   676,   115,  1140,   120,
      86,  1830,   682,   124,     3,    74,    75,    74,    75,   115,
      79,  1892,  1154,  1155,  1156,  1157,   116,    86,    74,    75,
     120,   122,    77,    79,   110,   111,   850,   851,   135,    28,
      86,   134,    87,     3,    79,  1177,   122,  1179,   114,    94,
      95,   110,   111,   764,   120,   118,   115,   120,    16,   116,
     213,   773,   774,   541,   110,   111,   112,   128,    28,   115,
     119,  1424,   116,   551,   123,   110,   111,   114,   124,   134,
     791,   114,   135,   120,    44,    74,    75,   120,   799,   124,
      79,   803,   804,   571,   775,   776,   574,    86,   576,   122,
     578,   124,  1402,  1403,    74,    75,  1406,  1407,   819,    79,
      16,  1411,  1412,   114,    74,    75,    86,  1792,  1793,   120,
       3,   110,   111,  1423,   805,   806,  1407,  1427,  1428,   114,
     118,  1431,   120,  1483,  1557,   120,   950,  1437,    79,  1439,
     110,   111,  1442,   116,   116,    28,  1446,   120,   335,   119,
     116,  1451,  1452,  1453,    37,   114,   116,   773,   774,   122,
     120,   120,  1500,  1501,   116,   962,   114,   114,   213,   110,
     111,   116,   120,   120,  1474,   120,  1476,   118,  2049,  1479,
    2051,   122,  1482,   122,   114,  1485,   115,   803,   804,  1866,
     120,    74,    75,   114,  1494,   122,    79,  2016,   868,   120,
    1500,  1501,     1,    86,     3,  1505,  1506,  1507,  1508,  2128,
     118,     6,   120,     8,     9,   118,  1554,  1555,   116,   406,
       1,   266,   120,  1576,   120,    74,    75,   110,   111,   112,
      79,   276,   115,   278,  1031,  1032,   118,    86,  1035,  1036,
    1037,   116,  2113,   126,  2115,   120,  2117,  1596,  1597,  1781,
    1782,    88,    89,    90,  1554,  1555,   113,  1557,   928,  1608,
     113,   110,   111,    10,    11,  1565,   311,   116,   113,   422,
    1596,  1597,   122,  2092,   124,   122,  1576,   124,    73,   949,
      10,    11,  1608,  2154,  2155,     1,  2157,     3,  1709,    84,
       1,   119,     3,    74,    75,   120,  1596,  1597,    79,  1709,
       1,  2172,     3,   899,   900,    86,  1606,   122,  1608,  1609,
      74,    75,  1612,   127,   109,    79,  1616,  2188,   113,     1,
    1620,     3,    86,  1623,  1557,   118,   996,   120,   126,   110,
     111,   126,  1565,   127,   129,   130,   131,   118,  1619,   120,
       1,     1,   122,     3,   124,   127,   110,   111,  1648,   827,
     828,   829,    14,    15,  1635,  1655,   530,   531,   122,   404,
       1,  1711,     3,  1713,  2041,   122,  2043,     1,     1,     3,
       3,   122,   850,   851,   852,  1172,  1173,  1727,  1728,   118,
    1453,   120,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,   775,   776,   122,     3,   124,  1529,   551,  1213,
     553,  1519,  1519,  1521,  1521,   899,   900,  1707,   120,  1709,
     120,   456,  1712,    74,    75,  1838,  1783,     3,    79,   121,
      28,   120,   805,   806,   120,    86,   512,   513,   514,    37,
    1730,  2108,  1732,  1733,   649,   650,   649,   650,    94,    95,
     828,   829,    28,   122,   530,   531,   118,   925,   124,   110,
     111,   496,   115,   118,   118,   122,   115,   118,   119,   120,
     115,  1814,   115,   115,  1596,  1597,    74,    75,  1768,   118,
     118,    79,   950,   118,   118,   113,  1608,  1777,    86,   957,
     958,  1781,  1782,   119,  1784,   116,   121,   127,    74,    75,
     968,   113,   113,    79,   118,   127,  1796,   127,   127,   127,
      86,   127,   110,   111,  1174,    37,  1176,   115,   126,  1809,
     122,  1811,    44,    45,  1814,   122,   121,  1866,   126,   120,
    1809,   121,  1811,   121,   110,   111,   116,   116,   116,   116,
    1809,   127,  1811,   127,   127,  1835,   122,  1837,  1838,   115,
    1866,     1,    74,    75,   116,   116,  1835,    79,  1837,   124,
     124,  1262,  2132,   115,    86,   124,  1835,   115,  1837,   115,
    1860,  1861,  1862,  1863,    56,   118,  1866,   118,   118,   115,
    1870,  1871,   113,  1873,   113,  1875,   118,  1055,   110,   111,
     112,   116,  1060,   116,   113,   116,   126,  1887,  1066,  1939,
     115,   115,   779,   780,  1072,   782,  1896,   113,  1948,  1899,
    1078,   116,   116,   116,   126,  1838,   124,   116,   120,  1890,
     120,  1892,   116,  1427,    74,    75,   121,  1431,   116,    79,
     807,   808,   809,   810,   124,   124,    86,   124,   116,   116,
       3,   116,   118,   116,   127,   119,   116,   682,  1938,   121,
    1940,  2132,   116,   116,   689,    56,   127,   124,   127,   124,
     110,   111,   115,   115,  2004,  2005,   124,   116,   118,   119,
     120,   115,   127,   850,   851,   116,   124,   712,   124,  2007,
    2008,   124,  2010,  2011,   116,   116,   721,   116,   116,   116,
    1494,   116,   127,  2021,  2022,  2023,  2024,   732,   113,   118,
     126,    11,  2041,   127,  2043,   127,   126,   119,  1512,   122,
     124,    74,    75,  1500,  1501,   122,    79,  2007,  2008,  2009,
    2010,  2011,  2012,    86,  2014,  2041,   124,  2043,   118,   115,
    2009,  2021,  2022,  2023,  2024,   119,   119,   880,   118,   116,
    2009,   122,  2032,   116,  1866,  1213,  1214,   110,   111,   116,
     116,  2041,   127,  2043,   116,   127,   127,   127,   127,   122,
    2088,  2089,  2052,  2053,  2121,  2122,   127,  1554,  1555,  2108,
     127,   127,   116,   950,   116,     0,   919,    64,  2049,  1439,
    2051,    64,   118,   116,   127,   116,   127,   127,   127,   824,
     933,   118,  2108,   118,   118,   118,   939,   116,  2088,  2089,
     122,   118,   118,   118,   118,  2095,  2096,   118,  2162,  2099,
     118,  2101,   118,   118,  2104,   118,    41,   118,  2108,  1479,
    1508,   968,  1482,   463,   859,   276,   463,   463,    53,    44,
      45,   463,  2122,   868,  2124,    60,   463,   276,  2128,   850,
     875,  2112,  2113,   905,  2115,   880,  2117,   882,   309,   309,
    2140,   960,    77,    74,    75,    80,  1474,   715,    79,    74,
      75,    86,    87,   421,    79,    86,   302,   411,  1819,    94,
      95,    86,  2162,  2163,   253,     1,   721,  2167,  2112,    87,
      94,    87,   107,  2154,  2155,   110,  2157,    87,  2178,   110,
     111,   112,    95,   258,   115,   110,   111,   122,   933,  1042,
     115,  2172,  1768,  1707,    -1,   130,    -1,    -1,  1712,    -1,
     135,   136,    -1,   138,   949,    -1,    -1,  2188,    -1,  2041,
      -1,  2043,    -1,   148,    -1,   150,   151,   152,   153,    -1,
     155,  1753,  1754,    -1,  1756,  1757,    -1,    -1,    -1,  1761,
    1762,  1763,  1764,  1411,  1412,    -1,    -1,     3,    74,    75,
      -1,    -1,    -1,    79,    -1,   180,   181,    -1,    -1,  1427,
      86,    -1,    -1,  1431,    74,    75,    -1,   192,    -1,    79,
      -1,    -1,    28,  1777,    -1,    -1,    86,    -1,    -1,   204,
      -1,    37,    -1,    -1,   110,   111,  2108,    -1,   213,   115,
     116,   256,   257,    -1,   120,    -1,    -1,    -1,    -1,    -1,
     110,   111,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    -1,  1818,    -1,    -1,    -1,    74,    75,
       0,    -1,  1809,    79,  1811,    -1,  1494,    -1,   253,    -1,
      86,   256,   257,   258,    -1,    -1,  1213,  1505,  1506,  1507,
    1508,   266,    -1,    -1,    -1,    -1,    -1,    -1,  1835,    -1,
    1837,   276,   277,   278,   110,   111,   112,    -1,    -1,   115,
     116,    -1,    -1,    -1,  1753,  1754,    46,  1756,  1757,    44,
      45,   296,  1761,  1762,  1763,  1764,    -1,   302,  1900,  1901,
    1902,  1903,  1904,  1905,  1906,  1907,   311,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    78,    74,
      75,    -1,    44,    45,    79,    85,    -1,    87,   113,   114,
      -1,    86,    -1,    -1,    94,    95,    -1,    -1,   123,    -1,
      -1,  1781,  1782,   128,   129,   130,    -1,   132,   133,   134,
     135,   136,    74,    75,  1938,   110,   111,    79,    74,    75,
     115,    -1,   367,    79,    86,   125,   126,   372,    -1,   374,
      86,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
    1195,    -1,    -1,    -1,    86,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,    -1,   110,   111,    -1,    -1,  2000,   404,
     116,   406,   407,    -1,    -1,   410,   411,  1655,   110,   111,
      -1,   416,    -1,    -1,   116,   420,   421,   177,   423,  1900,
    1901,  1902,  1903,  1904,  1905,  1906,  1907,    -1,    -1,    -1,
      -1,  1900,  1901,  1902,  1903,  1904,  1905,  1906,  1907,    -1,
    2007,  2008,  2009,  2010,  2011,    -1,   451,   452,    74,    75,
     521,   456,   457,    79,  2021,  2022,  2023,  2024,   463,  1707,
      86,  1709,   222,   468,  1712,   225,    -1,    -1,   473,    -1,
    1427,    -1,   477,   478,  1431,    -1,    -1,   522,    -1,    -1,
     525,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,     3,
     116,   496,    -1,   253,   499,   500,    -1,    74,    75,   504,
     505,    -1,    79,   508,   509,    -1,   266,    -1,    -1,    86,
     515,    -1,    -1,    -1,    28,    -1,   276,   522,   278,  2000,
     525,  2088,  2089,    37,    38,    -1,    -1,    -1,    -1,  1777,
    1453,  2000,    -1,   110,   111,   112,   541,  1494,   115,    -1,
       1,   546,     3,   548,    -1,    -1,   551,   552,    -1,   126,
      -1,    -1,    -1,  1476,    -1,  1512,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,   571,    28,    -1,   574,
      -1,   576,    86,   578,    -1,    -1,    37,    38,    -1,    -1,
     585,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   297,    -1,   110,   111,   112,    -1,
     303,   115,    -1,    -1,   649,   650,   651,   652,    -1,    -1,
      -1,    -1,   258,    74,    75,    -1,    -1,    -1,    79,    -1,
     380,    -1,    -1,   135,    -1,    86,   138,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   679,    -1,    -1,    -1,    -1,   151,
      -1,   153,    -1,   155,   649,   650,   651,   652,    -1,   110,
     111,   112,    -1,  1576,   115,    -1,    -1,   118,    -1,   120,
     121,  1476,   422,    -1,    -1,    -1,    -1,    -1,    -1,   372,
      -1,   374,   677,   678,   679,    -1,    -1,   682,    -1,   750,
       0,   515,    -1,    -1,   689,    -1,    -1,   106,    -1,    -1,
    1938,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,    -1,
      -1,    -1,    -1,    -1,    -1,   710,   711,   712,    -1,   714,
     715,    -1,    -1,    -1,    -1,    -1,   721,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   796,     3,   732,    -1,    -1,
     735,    -1,    -1,    -1,    -1,    -1,    -1,   742,    -1,    -1,
     745,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1707,    28,   512,   513,   514,  1712,   516,    77,    -1,   519,
      37,  1576,    -1,    -1,  2012,    -1,  2014,    87,    -1,    -1,
     530,   531,   532,    -1,    94,    95,    -1,    -1,     7,    -1,
     426,    10,    11,    12,    13,    14,    15,    16,    17,    -1,
      -1,   551,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    -1,    -1,   136,     3,    -1,   824,
    1777,    -1,   827,   828,   829,    -1,    -1,    -1,   148,    -1,
      -1,    -1,   152,   110,   111,   112,    -1,    -1,   115,   258,
      -1,    -1,    28,    -1,    -1,   850,   851,   852,    -1,   552,
      -1,    37,    -1,    -1,   859,    -1,    -1,    -1,    -1,    -1,
      -1,  1818,   867,   868,    -1,    -1,    -1,    -1,    -1,   703,
     875,    -1,    -1,   878,    -1,   880,    -1,   882,    -1,    -1,
      -1,    -1,    -1,    -1,   113,   114,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,   123,   314,    -1,    -1,    -1,    -1,
      86,   735,    -1,   132,   133,   134,   135,   136,   742,   612,
      -1,   745,    -1,    -1,    -1,  1730,   676,   256,   257,    -1,
     925,    -1,   682,    -1,   110,   111,    -1,    -1,   933,   115,
      -1,    -1,    -1,    -1,    -1,  1006,    -1,    -1,    -1,   451,
     452,    -1,    -1,    -1,   949,   950,   266,    -1,    -1,    -1,
      -1,    -1,   957,   958,    -1,    -1,   276,   962,   278,    -1,
      -1,    -1,    -1,   968,    -1,   477,   478,    -1,    -1,    -1,
      -1,   617,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1938,    -1,   988,   989,   990,    -1,   499,   500,    -1,
      -1,   996,   504,   505,    -1,    -1,   508,   509,    -1,  1814,
      -1,    -1,    -1,   649,   650,   651,   652,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1031,  1032,    -1,    -1,
    1035,  1036,  1037,    -1,   546,    -1,   548,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    1055,  1056,    -1,    -1,  1099,  1060,    -1,  1102,    -1,    -1,
      -1,  1066,    -1,    -1,    -1,    -1,    -1,  1072,    -1,    -1,
      -1,  1142,    -1,  1078,    -1,  1146,    -1,    -1,  1149,    -1,
    1151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     410,  1096,    -1,    -1,  1099,  1140,    -1,  1102,    -1,    -1,
      -1,   421,   521,    -1,    -1,    -1,    -1,    -1,    -1,  1154,
    1155,  1156,  1157,    -1,    -1,    -1,    -1,     0,    -1,    -1,
     880,    -1,    -1,    -1,    -1,  1940,    77,    -1,    -1,    -1,
      -1,  1202,  1177,    -1,  1179,  1140,    87,  1208,    -1,    -1,
      -1,    -1,    -1,    94,    95,    -1,    -1,    -1,    -1,  1154,
    1155,  1156,  1157,   473,   988,   989,   990,    -1,    -1,   919,
      -1,    -1,    -1,    46,    -1,   584,    -1,  1172,  1173,    -1,
      -1,    -1,  1177,    -1,  1179,    -1,    -1,    -1,    -1,   939,
      -1,  1186,    -1,   522,    -1,   136,   525,    -1,    -1,    -1,
    1195,    -1,    -1,    76,    77,    78,    -1,   148,   617,    -1,
      -1,   152,    85,    -1,    87,    -1,    -1,  1212,  1213,  1214,
      -1,    94,    95,    -1,    -1,    -1,    -1,   920,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1232,    -1,    -1,
     649,   650,   651,   652,  1239,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,   127,   128,   129,    -1,    -1,    -1,
      -1,    -1,   135,  1258,  1259,   138,   959,    -1,    -1,    -1,
    1265,  1266,  1096,    -1,  1269,  1270,    -1,    -1,   151,    -1,
     153,    -1,   155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1042,  1043,    -1,   931,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   177,   178,   179,   716,    -1,    -1,
      -1,   720,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,   650,   651,   652,    -1,   266,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   276,    -1,   278,   148,   212,
     213,   750,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     679,    -1,    -1,    -1,    -1,   764,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1056,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   682,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     253,    -1,   791,    -1,    -1,    -1,    -1,   796,    -1,    -1,
     799,    -1,    -1,   266,    -1,    -1,    -1,   899,   900,    -1,
      -1,    -1,    -1,   276,    -1,   278,    -1,    -1,    -1,    -1,
     819,    -1,    -1,    -1,  1107,    -1,  1411,  1412,    -1,    -1,
      -1,    -1,    -1,    -1,  1174,    -1,  1176,    -1,    -1,    -1,
      -1,    -1,  1427,    -1,  1258,  1259,  1431,    -1,    -1,    -1,
      -1,  1265,  1266,   253,    -1,  1269,  1270,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     962,    -1,    -1,  1099,    -1,    -1,  1102,    -1,    -1,   410,
      -1,    -1,    -1,    -1,    -1,  1111,    -1,    -1,  1473,    -1,
     421,  1476,    -1,    -1,  1545,    -1,   296,    -1,    -1,    -1,
      -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,  1494,
      -1,    -1,    -1,    -1,  1140,  1500,  1501,   380,   381,   382,
    1505,  1506,  1507,  1508,    -1,    -1,    -1,    -1,  1154,  1155,
    1156,  1157,  1215,    -1,    -1,    -1,    -1,    -1,    -1,  1031,
    1032,   404,   473,  1035,  1036,  1037,    -1,    -1,   411,    -1,
      -1,    -1,    -1,    -1,  1237,    -1,    -1,    -1,    -1,   422,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   867,    -1,  1554,
    1555,  1596,  1597,    -1,    -1,    -1,    -1,     0,   878,    -1,
      -1,    -1,    -1,    -1,  1609,    -1,    -1,  1612,   451,   452,
      -1,  1576,    -1,   456,    -1,  1620,    -1,   460,    -1,    -1,
     463,    -1,    -1,    -1,    -1,  1590,  1591,  1006,    -1,   472,
     410,  1596,  1597,    -1,   477,   478,    -1,    -1,    -1,    -1,
      -1,   421,    -1,    -1,  1609,    -1,    -1,  1612,    -1,    -1,
      -1,    -1,    -1,   496,    -1,  1620,   499,   500,    -1,    -1,
      -1,   504,   505,    -1,    -1,   508,   509,    -1,    -1,   512,
     513,   514,    -1,    -1,    77,    -1,    -1,    -1,    -1,  1473,
      -1,    -1,    -1,    -1,    87,    -1,    -1,   530,   531,    -1,
    1655,    94,    95,   473,    -1,    -1,    -1,    -1,    -1,    -1,
    1172,  1173,    -1,   546,    -1,   548,    -1,    -1,   551,    -1,
     553,    -1,    -1,    -1,    -1,    -1,  1747,    -1,    -1,    -1,
    1099,  1752,    -1,  1102,  1755,   568,    -1,    -1,    -1,    -1,
      -1,    -1,  1111,  1453,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1707,    -1,  1709,    -1,    -1,  1712,    -1,    -1,
      -1,    -1,    -1,    -1,  1133,  1134,    -1,    -1,    -1,    -1,
      -1,  1140,    -1,  1142,    -1,  1730,    -1,  1146,    -1,    -1,
    1149,   682,  1151,    -1,    -1,  1154,  1155,  1156,  1157,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1819,    -1,
      -1,   135,    -1,    -1,   138,    -1,  1590,  1591,    -1,  1830,
    1099,    -1,    -1,  1102,    -1,    -1,    -1,   151,    -1,   153,
     213,   155,  1777,    -1,    -1,     1,    -1,     3,     4,     5,
    1483,    -1,    -1,  1202,    -1,    -1,    -1,  1792,  1793,  1208,
      -1,    -1,    -1,   676,    -1,    -1,    -1,  1557,    -1,   682,
      -1,  1140,    28,    -1,  1809,    -1,  1811,    -1,    -1,  1814,
      -1,    -1,    -1,    -1,    -1,  1154,  1155,  1156,  1157,    -1,
      -1,    -1,    -1,   266,    -1,  1870,  1871,   710,    -1,    -1,
    1835,   714,  1837,   276,    -1,   278,    -1,    -1,  1177,    65,
    1179,    -1,    -1,  1262,    -1,    71,    72,    -1,    -1,   732,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,
      -1,    -1,    -1,    -1,    -1,  1870,  1871,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   258,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,   115,
     710,   711,    -1,    -1,   714,   715,    -1,    -1,    -1,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   867,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   878,    -1,    -1,
      -1,    -1,    -1,  1938,    -1,  1940,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2016,    -1,    -1,    -1,    -1,
    1596,  1597,    -1,    -1,    -1,    -1,    -1,    -1,  1792,  1793,
    1606,   404,  1608,  1609,    -1,    -1,  1612,    -1,    -1,   852,
      -1,    -1,    -1,    -1,  1620,    -1,   859,  1623,    -1,    -1,
      -1,    -1,    -1,   866,   867,   868,    -1,    -1,  1500,  1501,
      -1,    -1,   875,    -1,    -1,   878,    -1,   880,    -1,    -1,
      -1,    -1,  2007,  2008,  2009,  2010,  2011,  2012,  1711,  2014,
    1713,    -1,    -1,   456,    -1,    -1,  2021,  2022,  2023,  2024,
      -1,  2092,    -1,    -1,  1727,  1728,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,   919,    -1,    -1,    -1,
      -1,    -1,  1554,  1555,    -1,   928,    -1,   867,    -1,    -1,
     933,    -1,    -1,   496,    28,    -1,   939,    -1,   878,    -1,
      -1,    -1,    -1,    37,    38,    -1,   949,   451,   452,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1838,   962,
      -1,    -1,    -1,  2088,  2089,    -1,    -1,    -1,    -1,   972,
      -1,    -1,    -1,   477,   478,  1514,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    -1,    86,   996,    -1,   499,   500,    -1,    -1,    -1,
     504,   505,    -1,    -1,   508,   509,  1545,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,   118,    -1,   120,   121,  1031,  1032,
      -1,    -1,  1035,  1036,  1037,    -1,    -1,    -1,    -1,  1042,
    1043,    -1,   546,    -1,   548,    -1,    -1,    -1,    -1,    -1,
    1053,    -1,    -1,    -1,    -1,    -1,   996,  1596,  1597,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1606,    -1,  1608,
    1609,    -1,    -1,  1612,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1620,    -1,    -1,  1623,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1860,  1861,  1862,  1863,    -1,    -1,
    1866,    -1,    -1,    -1,  1870,  1871,    -1,  1873,    -1,  1875,
      -1,    -1,    -1,   617,    -1,    -1,  1939,    -1,    -1,   682,
      -1,  1887,    -1,    -1,    -1,  1948,   689,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1596,  1597,    -1,
      -1,    -1,    -1,    -1,    -1,   649,   650,   651,   652,    -1,
    1609,    -1,    -1,  1612,    -1,    -1,    -1,    -1,   721,    -1,
      -1,  1620,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1172,
    1173,    -1,    -1,    -1,    -1,    -1,    -1,  1809,    -1,  1811,
      -1,  2004,  2005,  1722,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1195,    -1,    -1,  1734,    -1,    -1,   451,   452,
      -1,    -1,    -1,  1835,    -1,  1837,    -1,    -1,  1747,  1212,
      -1,  1214,    -1,  1752,    -1,    -1,  1755,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,   478,    -1,    -1,    -1,  1232,
      -1,   735,    -1,    -1,    -1,    -1,  1239,    -1,   742,    -1,
      -1,   745,    -1,    -1,    -1,    -1,   499,   500,    -1,    -1,
      -1,   504,   505,    -1,    -1,   508,   509,    -1,    -1,    -1,
      -1,   824,    -1,    -1,    -1,    -1,  2032,    -1,    -1,   330,
       0,    -1,  1212,    -1,    -1,  2041,    -1,  2043,    -1,    -1,
    1819,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1830,  1232,    -1,    -1,    -1,   859,    -1,    -1,  1239,
      -1,    -1,    -1,    -1,    -1,   868,    -1,    -1,    -1,    -1,
      -1,    -1,   875,    -1,    -1,    -1,    -1,    -1,    -1,   882,
      -1,  1860,  1861,  1862,  1863,    -1,    -1,  1866,    -1,  2095,
    2096,  1870,  1871,  2099,  1873,  2101,  1875,    -1,  2104,    -1,
      -1,    -1,  2108,    -1,    -1,    -1,    -1,    77,  1887,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    87,  1897,  1898,
      -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    -1,    -1,
     933,    -1,    -1,    -1,  2140,  2007,  2008,  2009,  2010,  2011,
      -1,    -1,    -1,    -1,    -1,    -1,   949,    -1,    -1,  2021,
    2022,  2023,  2024,    -1,    -1,   899,   900,    -1,    -1,    -1,
      -1,  2167,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,
      -1,  1870,  1871,    -1,    -1,    -1,    -1,    -1,   148,    -1,
      -1,  1424,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1439,    46,    -1,    -1,
      -1,    -1,    -1,  1446,    -1,    -1,    -1,    -1,    -1,    -1,
    1453,    -1,    -1,    -1,    -1,    -1,  2088,  2089,   962,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    78,
      -1,  1474,    -1,  1476,    -1,    -1,    85,  2016,    -1,    -1,
      -1,    -1,    -1,    -1,   988,    -1,   990,    -1,    -1,    -1,
      -1,    -1,    -1,  2032,    -1,    -1,    -1,  1500,  1501,    -1,
      -1,    -1,  2041,    -1,  2043,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   135,
     106,    -1,   138,    -1,    -1,    -1,    -1,  1031,  1032,    -1,
      -1,  1035,  1036,  1037,    -1,   151,   266,   153,    -1,   155,
      -1,    -1,    -1,    -1,   130,    -1,   276,    -1,   278,    -1,
      -1,  1554,  1555,  2092,  1557,    -1,  2095,  2096,    -1,    -1,
    2099,   622,  2101,    -1,    -1,  2104,    -1,    -1,   177,  2108,
      -1,    -1,    -1,  1576,    -1,  2114,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1096,  2132,    -1,  1099,    -1,    -1,  1102,    -1,
      -1,  2140,    -1,    -1,    -1,    -1,   192,  1111,    -1,    -1,
      -1,    -1,    -1,   222,    -1,    -1,   225,    -1,    -1,    -1,
      -1,    -1,    -1,  1186,    -1,    -1,    -1,    -1,  2167,    -1,
      -1,    -1,  1195,    -1,    -1,    -1,  1140,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,
    1154,  1155,  1156,  1157,    -1,    -1,    -1,   266,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1172,  1173,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   750,
      -1,   421,    -1,    -1,    -1,    -1,    -1,    -1,  1701,    -1,
      -1,    -1,   288,    -1,    -1,    -1,    -1,   293,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,    -1,   303,    -1,    -1,
      -1,    -1,   783,   784,   785,   786,   787,    -1,   314,   790,
      -1,    -1,    -1,    -1,    -1,   796,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   473,   330,    -1,    -1,    -1,    -1,   335,
     811,   812,   813,   814,   815,  1259,    -1,   818,    -1,    -1,
      -1,    -1,  1266,    -1,    -1,    -1,  1270,    -1,    -1,    -1,
      -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,  1031,  1032,
      -1,    -1,  1035,  1036,    -1,    -1,   372,    -1,   374,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1809,    -1,  1811,    -1,
      -1,  1814,    -1,   422,    -1,    -1,    -1,    -1,    -1,    -1,
     406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1835,    -1,  1837,   451,   452,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1847,    -1,    -1,   463,    -1,    -1,
      -1,   460,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,   478,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
      -1,    -1,   508,   509,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   512,   513,   514,    -1,   516,    -1,    -1,
     519,    -1,    -1,  1476,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   530,   531,   532,    -1,    -1,    -1,    -1,    -1,   515,
     546,    -1,   548,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   551,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   682,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,  1473,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   314,  1500,  1501,   584,    -1,
      -1,    -1,    -1,    -1,  2007,  2008,  2009,  2010,  2011,    -1,
      -1,   330,    -1,  1576,    -1,  1519,    -1,  1521,  2021,  2022,
    2023,  2024,    -1,    -1,    -1,    -1,   612,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1554,  1555,    -1,  1114,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   676,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1142,    -1,    -1,    -1,  2088,  2089,  1591,  1149,    -1,
      -1,    -1,  1596,  1597,    -1,    -1,    -1,   683,    -1,    -1,
      -1,    -1,  1606,   689,  1608,  1609,    -1,    -1,  1612,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1620,    -1,    -1,  1623,
      -1,    -1,  1183,    -1,  1185,    -1,    -1,    -1,    -1,    -1,
     716,    -1,    -1,    -1,   720,   721,    -1,   867,    -1,    -1,
      -1,  1202,    -1,    -1,    -1,    -1,    -1,  1208,   878,   735,
      -1,    -1,    -1,    -1,    -1,    -1,   742,    -1,    -1,   745,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   764,    -1,
      -1,    -1,    -1,    -1,   770,   771,   772,   773,   774,   775,
     776,    -1,    -1,   779,   780,    -1,   782,   783,   784,   785,
     786,   787,   788,   789,    -1,   791,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   799,   800,   801,   802,   803,   804,   805,
     806,   807,   808,   809,   810,   811,   812,   813,   814,   815,
     816,   817,    -1,   819,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1500,  1501,    -1,
      -1,  1814,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   850,   851,    -1,    -1,    -1,    -1,
      -1,   880,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1793,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1554,  1555,   622,    -1,  1809,    -1,  1811,    -1,    -1,
     919,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   936,    -1,   938,
     939,  1835,   918,  1837,   920,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,    -1,   962,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1860,  1861,  1862,  1863,
      -1,    -1,  1866,    -1,   950,    -1,  1870,  1871,   130,  1873,
      -1,  1875,    -1,   959,    -1,   617,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1887,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   988,    -1,   990,    -1,    -1,    -1,    -1,   651,
     652,    -1,    -1,    -1,    -1,  1031,  1032,    -1,    -1,  1035,
    1036,  1037,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     192,   750,    -1,  1042,  1043,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   764,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   783,   784,   785,   786,   787,    -1,
    1056,   790,   791,    -1,    -1,    -1,    -1,   796,    -1,    -1,
     799,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   811,   812,   813,   814,   815,    -1,    -1,   818,
     819,    -1,    -1,  2007,  2008,  2009,  2010,  2011,    -1,    -1,
    1096,    -1,    -1,    -1,    -1,    -1,    -1,  2021,  2022,  2023,
    2024,  1107,    -1,    -1,    -1,    -1,   288,    -1,  2032,    -1,
      -1,   293,   294,    -1,    -1,   297,    -1,  2041,    -1,  2043,
      -1,   303,    -1,    -1,    -1,    -1,    -1,  1133,  1134,    -1,
      -1,    -1,   314,    -1,    -1,    -1,  1172,  1173,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1174,    -1,  1176,   330,    -1,
      -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2088,  2089,    -1,    -1,    -1,    -1,
      -1,  2095,  2096,    -1,    -1,  2099,    -1,  2101,    -1,    -1,
    2104,    -1,    -1,    -1,  2108,    -1,    -1,    -1,    -1,    -1,
     372,    -1,   374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1213,    -1,  1215,
      -1,    -1,    -1,    -1,    -1,     1,  2140,     3,     4,     5,
       6,    -1,     8,     9,   406,    -1,    -1,    -1,    -1,    -1,
      -1,  1237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,  2167,    -1,    -1,   106,    -1,    -1,  1255,
      -1,    37,    -1,  1259,    -1,    -1,  1262,    -1,    -1,    -1,
    1266,    -1,    -1,    -1,  1270,    -1,  1747,    -1,    -1,    -1,
      -1,  1752,  1753,  1754,  1755,  1756,  1757,    -1,    -1,    65,
    1761,  1762,  1763,  1764,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
     116,   117,   192,   515,  2007,  2008,    -1,  2010,  2011,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,  2021,  2022,
    2023,  2024,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     552,    -1,    -1,    -1,    -1,  1114,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,   584,  1142,    -1,    -1,    -1,    -1,    -1,    -1,
    1149,    -1,    -1,    -1,    66,  2088,  2089,    -1,    -1,    -1,
      -1,  1427,    74,    75,  1453,  1431,    -1,    79,    -1,    -1,
     612,    -1,    -1,    85,    86,    87,    -1,  1099,    -1,    -1,
    1102,    -1,    -1,    -1,  1183,    -1,  1185,    -1,   100,  1111,
      -1,    -1,    -1,    -1,   314,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,  1202,  1500,  1501,    -1,  1473,    -1,  1208,
     122,    -1,    -1,    -1,    -1,    -1,    -1,  1483,  1140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1494,    -1,
      -1,    -1,  1154,  1155,  1156,  1157,    -1,    -1,    -1,    -1,
      -1,   683,    -1,    -1,    -1,    -1,  1512,   689,  1514,    -1,
      -1,    -1,   372,  1519,   374,  1521,    -1,    -1,  1554,  1555,
      -1,    -1,    -1,  1262,    -1,    -1,    -1,    -1,  1557,    -1,
      -1,    -1,  1538,    -1,   716,    -1,    -1,    -1,   720,   721,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   735,    -1,    -1,    -1,    -1,    -1,    -1,
     742,    -1,    -1,   745,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   764,    -1,    -1,  1591,    -1,    -1,   770,   771,
     772,   773,   774,   775,   776,    -1,    -1,   779,   780,    -1,
     782,   783,   784,   785,   786,   787,   788,   789,    -1,   791,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   799,   800,   801,
     802,   803,   804,   805,   806,   807,   808,   809,   810,   811,
     812,   813,   814,   815,   816,   817,    -1,   819,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   850,   851,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   552,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1707,    -1,    -1,    -1,  1711,  1712,  1713,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1722,    -1,    -1,    -1,
      -1,  1727,  1728,    -1,   584,    -1,    -1,    -1,  1734,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   918,    -1,   920,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1753,  1754,    -1,
    1756,  1757,   612,    -1,    -1,  1761,  1762,  1763,  1764,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   950,    -1,
      -1,  1777,    -1,  1809,    -1,  1811,    -1,   959,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1793,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1835,
      -1,  1837,    -1,     1,    -1,    -1,   988,    -1,   990,  1838,
      -1,    -1,  1818,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,   716,    -1,    -1,    -1,
     720,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,  1056,   735,    74,    75,    -1,    -1,
      -1,    79,   742,    -1,    -1,   745,    -1,    85,    86,    87,
      -1,  1897,  1898,    -1,  1900,  1901,  1902,  1903,  1904,  1905,
    1906,  1907,   100,    -1,   764,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,  1096,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,  1107,    -1,    -1,    -1,    -1,
      -1,   791,  1938,  1939,  1596,  1597,    -1,    -1,    -1,   799,
      -1,    -1,  1948,    -1,  1606,    -1,  1608,  1609,    -1,    -1,
    1612,  1133,  1134,    -1,    -1,    -1,    -1,    -1,  1620,   819,
      -1,  1623,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2007,  2008,  2009,  2010,  2011,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2021,  2022,  2023,  2024,    -1,
      -1,    -1,    -1,    -1,  2000,    -1,    -1,    -1,  2004,  2005,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,  1747,    -1,
      -1,    -1,    -1,  1752,  1753,  1754,  1755,  1756,  1757,    -1,
      -1,    -1,  1761,  1762,  1763,  1764,    -1,    -1,    28,    -1,
      -1,  1213,    -1,  1215,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,  2088,  2089,    -1,  1237,    -1,    -1,   918,    -1,
     920,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,  1255,    74,    75,    -1,  1259,    -1,    79,
    1262,    -1,    82,    83,  1266,    85,    86,    87,  1270,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   959,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2114,    -1,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2132,    -1,   988,    -1,
     990,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,  1900,  1901,  1902,  1903,  1904,  1905,  1906,  1907,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1056,    -1,  1860,  1861,
    1862,  1863,    -1,    -1,  1866,    -1,    -1,    -1,  1870,  1871,
      -1,  1873,    -1,  1875,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,  1887,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    85,  1096,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1427,    -1,  1107,    98,  1431,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,  1133,  1134,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1494,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1512,    -1,  1514,    -1,    -1,    -1,    -1,  1519,    -1,  1521,
      -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1215,  1538,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2032,    -1,    -1,    -1,    -1,    -1,    -1,  1237,    -1,  2041,
      -1,  2043,    -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1259,
      -1,    -1,  1262,    -1,    -1,    -1,  1266,    -1,    -1,  1591,
    1270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,
      -1,    -1,    -1,  2095,  2096,    94,    95,  2099,    -1,  2101,
      -1,    -1,  2104,    -1,    -1,    -1,  2108,    -1,    -1,    -1,
      -1,    -1,    -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,  2140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,
      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2167,    -1,    -1,   258,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   180,   181,    -1,    -1,  1707,    -1,    -1,    -1,  1711,
    1712,  1713,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1722,    -1,    -1,    -1,    -1,  1727,  1728,    -1,    -1,    -1,
      -1,    -1,  1734,    -1,   213,    -1,    -1,    -1,    -1,    -1,
      -1,   311,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1753,  1754,    -1,  1756,  1757,    -1,    -1,    -1,  1761,
    1762,  1763,  1764,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   253,  1777,    -1,   256,   257,   258,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,    -1,    -1,
      -1,  1793,    -1,  1473,    -1,    -1,    -1,   276,   277,   278,
      -1,    -1,    -1,  1483,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1818,   296,    -1,    -1,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   311,    -1,  1514,    -1,    -1,    -1,    -1,  1519,
      -1,  1521,    -1,    -1,    -1,    -1,     1,    -1,    -1,     4,
       5,     6,   422,     8,     9,    -1,    -1,    -1,  1538,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1897,  1898,    -1,  1900,  1901,
    1902,  1903,  1904,  1905,  1906,  1907,    -1,    -1,    -1,    -1,
      65,  1591,    -1,    -1,     0,    -1,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,   404,    -1,    -1,    -1,    84,
      -1,   410,    -1,    -1,    -1,    -1,  1938,  1939,    -1,    -1,
      -1,    -1,   421,    98,    -1,    -1,  1948,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    45,
      46,    -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,   456,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    77,    78,    -1,   473,    -1,    82,    -1,  2000,    -1,
      -1,    87,  2004,  2005,    -1,    -1,    -1,    -1,    94,    95,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,    -1,    -1,
      -1,  1711,    -1,  1713,    -1,    -1,   515,    -1,    -1,   125,
      -1,    -1,  1722,   522,    -1,    -1,   525,  1727,  1728,    -1,
      -1,    -1,   622,    -1,  1734,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   649,
     650,   651,   652,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2114,  1793,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   213,   698,    -1,
    2132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   624,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   726,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,
     649,   650,   651,   652,    -1,    -1,    -1,    -1,    -1,    -1,
     266,    -1,   752,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     276,    -1,   278,    -1,    -1,    -1,    -1,    -1,   677,   678,
     679,    -1,    -1,   682,    -1,    -1,    -1,    -1,    -1,    -1,
     689,    -1,    -1,    -1,    -1,    -1,    -1,  1897,  1898,    -1,
     790,    -1,    -1,    -1,   703,    -1,    -1,    -1,   798,    -1,
      -1,   710,   711,   712,    -1,   714,   715,    -1,    -1,    -1,
      -1,    -1,   721,    -1,    -1,    -1,    -1,    -1,   818,     1,
      -1,     3,    -1,   732,    -1,    -1,   735,    -1,    -1,  1939,
      -1,    -1,    -1,   742,    -1,    -1,   745,    -1,  1948,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     880,    -1,    -1,    65,    66,    -1,    -1,    -1,   404,    -1,
      -1,    -1,    74,    75,  2004,  2005,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,   422,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   824,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,    -1,
     456,    -1,    -1,   459,   126,    -1,    -1,    -1,    -1,    -1,
     859,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   867,   868,
      -1,    -1,    -1,    -1,    -1,    -1,   875,    -1,    -1,   878,
     879,   880,    -1,   882,    -1,    -1,    -1,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,  2114,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,   531,    -1,    -1,    -1,    -1,
      -1,    -1,  2132,    -1,   933,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,   551,    -1,   553,    -1,    -1,
     949,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   564,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,   988,
     989,   990,    -1,    -1,   600,    -1,    -1,   996,    -1,    -1,
      -1,    -1,    66,    -1,   126,    -1,    -1,    -1,    -1,  1099,
      74,    75,  1102,  1103,  1104,    79,  1106,    -1,    82,    83,
      -1,    85,    86,    87,  1114,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1122,    -1,    -1,    -1,   100,    -1,    -1,  1129,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
    1140,   115,    -1,    -1,    -1,   177,    -1,  1147,    -1,    -1,
     124,    -1,  1152,    -1,  1154,  1155,  1156,  1157,    -1,   675,
      -1,    -1,    -1,    -1,    -1,    -1,   682,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   213,    -1,  1183,    -1,  1185,    -1,  1096,    -1,    -1,
    1099,    -1,    -1,  1102,   710,    -1,    -1,    -1,   714,    -1,
      86,    -1,    -1,    -1,  1204,    -1,  1115,    -1,    -1,    -1,
    1210,    -1,    -1,    -1,    -1,    -1,   732,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1140,    -1,  1233,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   276,  1154,  1155,  1156,  1157,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1177,    -1,
    1179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1280,    -1,    -1,    -1,    -1,    -1,  1195,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   180,   181,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1212,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1232,    -1,    -1,    -1,   213,    -1,    -1,
    1239,    -1,  1332,    -1,    -1,    -1,   852,   853,    -1,    -1,
      -1,    -1,    -1,   859,    -1,  1345,    -1,    -1,   380,  1258,
    1259,   867,   868,    -1,   386,    -1,  1265,  1266,    -1,   875,
    1269,  1270,   878,   879,   880,    -1,    -1,   253,    -1,    -1,
     256,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   277,    -1,    -1,    -1,    -1,  1396,    -1,    -1,    -1,
      -1,    -1,    -1,   919,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   927,    -1,    -1,    -1,    -1,   302,   933,    -1,    -1,
      -1,    -1,    -1,   939,   456,   311,    -1,    -1,     1,    -1,
      -1,    -1,    -1,   949,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
     996,    -1,    -1,    -1,   516,    -1,    -1,   519,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
     532,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,   404,    -1,
      -1,   553,    -1,    -1,    -1,    -1,  1042,   100,    -1,    -1,
      -1,    -1,    -1,    -1,   566,  1051,    -1,   110,   111,   112,
     113,   114,   115,    -1,    -1,   118,   119,   120,   121,    -1,
     123,    -1,    -1,   126,    -1,   128,   129,   130,    -1,   132,
     133,   134,   135,   136,  1473,    -1,    -1,  1476,    -1,    -1,
     456,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,  1596,  1597,    -1,    -1,
      -1,    -1,  1602,    -1,  1604,    -1,    -1,  1607,  1608,    -1,
     496,    66,    -1,  1613,  1614,    -1,  1616,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,  1626,    -1,  1628,   515,
      85,    86,    87,    -1,    -1,    -1,   522,    -1,    -1,   525,
      -1,    -1,    -1,    -1,   676,   100,    -1,    -1,    -1,    -1,
     682,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,
    1660,    -1,    -1,    -1,  1664,    -1,   121,  1576,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1195,
      -1,  1590,  1591,    -1,    -1,  1685,    -1,  1596,  1597,    -1,
      -1,    -1,    -1,    -1,  1694,    -1,  1212,     1,  1214,     3,
    1609,    -1,    -1,  1612,    -1,    -1,  1222,    -1,    -1,    -1,
      -1,  1620,    -1,    -1,    -1,    -1,  1232,    -1,    -1,    -1,
      -1,    -1,    -1,  1239,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,   649,   650,   651,   652,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   677,   678,   679,    -1,    -1,   100,    -1,    -1,    86,
      -1,    -1,    -1,   689,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,   116,    -1,    -1,    -1,    -1,   703,    -1,    -1,
      -1,  1730,   126,    -1,   710,   711,   712,    -1,   714,   715,
      -1,    -1,    -1,    -1,    -1,   721,   868,    -1,    -1,    -1,
      -1,    -1,    -1,   875,    -1,    -1,   732,    -1,  1848,   735,
      -1,    -1,    -1,    -1,    -1,    -1,   742,    -1,    -1,   745,
      -1,    -1,    -1,    -1,    -1,    -1,  1866,  1867,    -1,    -1,
      -1,    -1,    -1,    -1,  1874,    -1,    -1,    -1,  1878,    -1,
    1880,    -1,    -1,  1792,  1793,    -1,    -1,    -1,   311,  1889,
      -1,    -1,    -1,   180,   181,    -1,   928,    -1,    -1,    -1,
      -1,   933,    -1,    -1,    -1,  1814,    -1,    -1,  1424,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   949,    -1,    -1,
      -1,    -1,  1438,    -1,    -1,    -1,   213,    -1,    -1,  1445,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1453,   824,    -1,
    1940,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1474,    -1,
    1476,  1870,  1871,    -1,   996,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,   859,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   868,    -1,    -1,    -1,    -1,    -1,    -1,   875,
     277,    -1,    -1,    -1,   880,    -1,   882,    -1,    -1,   422,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
      -1,  1043,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,
    1052,    -1,  1054,    -1,   311,    -1,    -1,    -1,    -1,    -1,
      -1,  1940,    -1,  2033,  2034,    -1,  2036,    -1,  2038,    -1,
    1556,  2041,  2042,  2043,    -1,    -1,    -1,   933,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
    1576,    -1,    -1,   949,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2097,    -1,    -1,
    2100,    -1,   988,   989,   990,    -1,    -1,    -1,  2108,    -1,
     996,    -1,    65,    -1,    -1,    -1,    -1,   404,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1174,  2143,  1176,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,   456,
      -1,   124,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,  1701,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   622,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,
    1096,    -1,    -1,  1099,    -1,   638,  1102,    -1,    -1,   642,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    -1,   522,    -1,    -1,   525,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1140,    -1,    -1,  1773,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1154,  1155,
    1156,  1157,    -1,    -1,    -1,   698,    -1,    -1,    -1,  1795,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   712,
      -1,  1177,    -1,  1179,    -1,    -1,    -1,    -1,  1814,    -1,
      -1,    -1,    -1,   726,   727,    -1,    -1,    -1,    -1,  1195,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,  1212,    -1,   297,   752,
      -1,    -1,    -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1232,    -1,    -1,    -1,
      -1,    -1,    -1,  1239,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   649,   650,   651,   652,    -1,   790,    -1,    -1,
      -1,    -1,  1258,  1259,    -1,   798,    -1,    -1,    -1,  1265,
    1266,    -1,    -1,  1269,  1270,    -1,    -1,    -1,    -1,    -1,
     677,   678,   679,    -1,    -1,   818,    -1,    -1,    -1,    -1,
      -1,    -1,   689,   372,  1920,   374,    -1,  1439,    -1,    -1,
      -1,    -1,    -1,    -1,  1446,    -1,   703,    -1,    -1,    -1,
      -1,    -1,    -1,   710,   711,   712,    -1,   714,   715,    -1,
      -1,    -1,    -1,    -1,   721,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1474,    -1,  1476,   732,    -1,  1479,   735,    -1,
    1482,    -1,    -1,    -1,    -1,   742,    -1,   880,   745,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,  1557,    -1,    -1,    -1,    -1,
      74,    75,    -1,  1565,    -1,    79,    -1,   824,    82,    83,
      -1,    85,    86,    87,  1576,    -1,   515,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,   859,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,   868,   126,   552,   128,    -1,    -1,  1473,   875,    -1,
    1476,    -1,    -1,   880,    -1,   882,    -1,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    -1,    88,    89,    90,    -1,    -1,    -1,
      -1,    -1,    -1,   612,    98,    -1,   933,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   949,   117,   118,    -1,    -1,    -1,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
    1103,  1104,    -1,  1106,    -1,    -1,    -1,    -1,    -1,    -1,
    1576,  1114,    -1,    -1,  1117,    -1,    -1,    -1,    -1,  1122,
      -1,   988,   989,   990,  1590,  1591,  1129,  1130,    -1,   996,
    1596,  1597,    -1,    -1,   683,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1609,  1147,  1148,  1612,    -1,    -1,  1152,
      -1,    -1,    -1,    -1,  1620,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1781,
    1782,    -1,  1784,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1183,    -1,  1185,    -1,    -1,    -1,   735,    -1,    -1,    -1,
      -1,    -1,    -1,   742,    -1,    -1,   745,    -1,    -1,    -1,
      -1,  1204,    -1,    -1,    -1,    -1,    -1,  1210,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1838,    -1,    -1,  1096,
    1233,    -1,  1099,    -1,    -1,  1102,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,  1730,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1140,    -1,    -1,    -1,  1280,  1281,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1154,  1155,  1156,
    1157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1177,    -1,  1179,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,    -1,  1792,  1793,  1195,  1332,
      -1,  1334,    -1,    -1,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,  1345,  1346,    -1,  1212,    -1,    -1,  1814,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,  1232,   115,    -1,   117,   918,
      -1,   920,  1239,   122,    -1,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1258,  1259,  1396,    -1,  1398,    -1,    -1,  1265,  1266,
      -1,    -1,  1269,  1270,  1870,  1871,    -1,    -1,    -1,    -1,
     959,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,   988,
      -1,   990,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    78,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1940,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,   126,    -1,  1056,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   142,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,   158,    -1,    -1,
      -1,    84,    85,    -1,    -1,    -1,    -1,  1096,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,   177,    -1,  1107,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,  1582,
      -1,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,   212,   213,    -1,    -1,    -1,    -1,    -1,    -1,  1602,
    1603,  1604,  1605,    -1,  1607,  1608,  1473,    -1,    -1,  1476,
    1613,  1614,    -1,  1616,    -1,  1618,    -1,    -1,    -1,    46,
      -1,    -1,    -1,  1626,  1627,  1628,    -1,    -1,    -1,    -1,
      -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,    -1,    -1,    -1,    -1,
      77,    78,    -1,    -1,    -1,   276,    -1,  1660,    -1,  1662,
      -1,  1664,    -1,  1666,    -1,    -1,  1215,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1685,  1686,    -1,    -1,    -1,    -1,  1237,    -1,
      -1,  1694,  1695,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1576,
    1259,    -1,    -1,    -1,    -1,    -1,    -1,  1266,    -1,    -1,
      -1,  1270,    -1,  1590,  1591,    -1,    -1,    -1,    -1,  1596,
    1597,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,  1609,    -1,    -1,  1612,    -1,    -1,    -1,    -1,
     177,    -1,    -1,  1620,    -1,    -1,    -1,    -1,    -1,   380,
      28,    -1,    -1,    -1,    -1,   386,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,   213,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,   422,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,   456,    -1,    -1,    -1,   266,
      -1,    -1,   110,   111,   112,  1848,    -1,   115,    -1,   276,
      -1,   472,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,
      -1,    -1,    -1,  1730,  1867,    -1,    -1,    -1,    -1,  1872,
      -1,  1874,  1875,    -1,  1877,  1878,    -1,  1880,    -1,  1882,
      -1,    -1,    -1,    -1,    -1,  1888,  1889,    -1,    -1,    -1,
      -1,   512,   513,   514,    -1,   516,    -1,    -1,   519,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
     531,   532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1473,  1792,  1793,    -1,   549,    -1,
     551,    -1,   553,    -1,  1483,    -1,    -1,  1940,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   566,    -1,  1814,    -1,    -1,
      -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,   386,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1519,    -1,  1521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1538,
      -1,    -1,    -1,    -1,    -1,   422,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1870,  1871,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   456,
    2033,  2034,    -1,  2036,  2037,  2038,    -1,    -1,    -1,  2042,
    2043,    -1,  1591,    -1,    -1,    -1,    -1,   668,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   676,    -1,    -1,    -1,    -1,
      -1,   682,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1940,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,   516,
      -1,    -1,   519,    -1,  2097,  2098,    -1,  2100,  2101,    86,
      -1,    -1,  2105,   530,   531,   532,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   551,    -1,   553,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   566,
    2143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   148,  1711,    -1,  1713,   152,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1727,  1728,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   180,   181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1753,  1754,    -1,  1756,  1757,    -1,
      -1,    -1,  1761,  1762,  1763,  1764,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1793,   866,    -1,   868,    -1,   676,
      -1,    -1,    -1,    -1,   875,   682,    -1,    -1,    -1,   880,
      -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   919,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,   928,    -1,   296,
      -1,    -1,   933,    -1,    -1,   302,    -1,    -1,   939,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   949,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,  1900,  1901,  1902,  1903,  1904,  1905,  1906,  1907,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,   996,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
    1939,   115,   116,   117,    -1,    -1,   120,    -1,    -1,  1948,
     124,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,    -1,    -1,
      -1,  1042,  1043,   410,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1052,    -1,  1054,   421,    -1,    -1,    -1,    -1,    -1,
      -1,   868,    -1,    -1,    -1,    -1,    -1,    -1,   875,    -1,
      -1,  2000,    -1,   880,    -1,  2004,  2005,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,    -1,   456,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,   473,    -1,    -1,    -1,
      -1,    -1,   919,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,   928,    -1,    -1,    -1,    -1,   933,    -1,    -1,   496,
      -1,    -1,   939,    -1,    -1,   136,    -1,    -1,    -1,    -1,
      -1,    -1,   949,    -1,    -1,    -1,    -1,   148,   515,    -1,
      -1,   152,    -1,    -1,    -1,   522,    -1,    65,   525,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1174,    -1,  1176,    84,    85,    -1,   180,
     181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   996,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
     118,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1042,  1043,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1052,    -1,  1054,    -1,    -1,
      -1,    -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,    -1,
      -1,    -1,   649,   650,   651,   652,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,   296,     8,     9,    -1,    -1,
      -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     677,   678,   679,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,
      -1,    -1,    -1,   710,   711,    -1,    -1,   714,   715,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,  1174,   735,  1176,
      -1,    -1,    84,    85,    -1,   742,    -1,    -1,   745,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,   118,    -1,   120,   410,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
     421,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1439,    -1,
      -1,    -1,    -1,    -1,    -1,  1446,    -1,    -1,    -1,    -1,
      -1,    -1,  1453,    -1,    -1,    -1,    -1,   824,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   473,  1474,    -1,  1476,    -1,    -1,  1479,    -1,
      -1,  1482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   859,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     867,   868,    -1,    -1,    -1,     3,    -1,    -1,   875,    -1,
      -1,   878,    -1,    -1,   515,   882,    -1,    -1,    -1,    -1,
      -1,   522,    -1,    -1,   525,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,  1557,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1565,    -1,   933,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,  1576,    74,    75,    -1,    -1,
      -1,    79,   949,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,   988,   989,   990,    -1,    -1,    -1,    -1,   126,   996,
      -1,    -1,  1439,    -1,    -1,    -1,    -1,    -1,    -1,  1446,
      -1,    -1,    -1,    -1,    -1,    -1,  1453,    -1,   649,   650,
     651,   652,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1474,    -1,  1476,
      -1,    -1,  1479,    -1,    -1,  1482,   677,   678,   679,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,   703,    -1,    -1,    -1,    -1,    -1,    -1,   710,
     711,    -1,    -1,   714,   715,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,  1096,
      79,    -1,  1099,    -1,   735,  1102,    85,    86,    87,    -1,
      -1,   742,    -1,    -1,   745,    86,    -1,    -1,    -1,    -1,
    1557,   100,    -1,    -1,    -1,    -1,    -1,    -1,  1565,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,  1576,
      -1,    -1,    -1,  1140,    -1,    -1,    -1,   126,    -1,    -1,
    1781,  1782,    -1,  1784,    -1,    -1,    -1,  1154,  1155,  1156,
    1157,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,    -1,
    1177,   152,  1179,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1838,    -1,   180,
     181,    -1,    -1,    -1,    28,  1212,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1232,   867,    -1,    -1,    -1,
      -1,    -1,  1239,    -1,    -1,    -1,    -1,   878,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,  1258,  1259,    -1,    -1,    -1,    -1,    -1,  1265,  1266,
      84,    85,  1269,  1270,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   253,    -1,    98,   256,   257,   258,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,   277,    -1,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,     1,
      -1,     3,     4,     5,     6,   296,     8,     9,    -1,    -1,
      -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1781,  1782,    28,  1784,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   988,   989,   990,
      -1,    -1,    -1,    -1,    -1,   996,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,
      -1,  1838,    84,    85,    86,    -1,    88,    89,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,   118,    -1,   120,   410,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
     421,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1096,    -1,    -1,  1099,    -1,
      -1,  1102,    -1,    -1,    -1,    -1,  1473,    -1,    -1,  1476,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,  1140,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1154,  1155,  1156,  1157,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   515,    -1,  1177,    -1,  1179,    -1,
      -1,   522,    -1,    -1,   525,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1576,
      -1,  1212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1590,  1591,    -1,    -1,    -1,    -1,  1596,
    1597,  1232,    -1,    -1,    -1,    -1,    -1,    -1,  1239,    -1,
      -1,    -1,  1609,    -1,    -1,  1612,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1620,    -1,    -1,    -1,  1258,  1259,     3,
      -1,    -1,    -1,    -1,  1265,  1266,    -1,    -1,  1269,  1270,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,   649,   650,
     651,   652,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,   677,   678,   679,    -1,
      28,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,   703,    -1,    -1,    -1,   110,   111,   112,   710,
     711,   115,    -1,   714,   715,    -1,    -1,    65,   122,    -1,
      -1,    -1,   126,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   735,    -1,    84,    85,    -1,    -1,
      -1,   742,    -1,    -1,   745,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,  1792,  1793,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,     1,  1814,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1473,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1870,  1871,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,   867,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,   878,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1590,
    1591,    -1,    -1,    -1,    -1,  1596,  1597,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1609,    -1,
      -1,  1612,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1620,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   988,   989,   990,
      -1,    -1,    -1,    -1,    -1,   996,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,  1096,    -1,    79,  1099,    -1,
      -1,  1102,    84,    85,    86,    87,    88,    89,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,  1792,  1793,   115,    -1,   117,   118,    -1,    -1,  1140,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,  1154,  1155,  1156,  1157,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1177,    -1,  1179,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1870,
    1871,  1212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1232,    -1,    -1,    -1,    -1,    -1,    -1,  1239,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1258,  1259,    -1,
      -1,    -1,    -1,    -1,  1265,  1266,    -1,    -1,  1269,  1270,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,    -1,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,  1473,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1590,
    1591,    -1,    -1,    -1,    -1,  1596,  1597,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1609,    -1,
      -1,  1612,    -1,    -1,    -1,    -1,    -1,     0,     1,  1620,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1792,  1793,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,  1870,
    1871,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
      -1,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,   116,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
     116,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,   116,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,   116,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
     116,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,   118,    -1,   120,   121,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    88,    89,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,    -1,    -1,   122,
      -1,   124,   125,   126,    -1,   128,   129,   130,   131,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,   121,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,     1,   117,     3,     4,
       5,     6,    -1,     8,     9,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,     1,   117,     3,     4,     5,     6,    -1,     8,     9,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,     1,   117,
       3,     4,     5,     6,   122,     8,     9,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,    90,
      -1,     1,    -1,     3,     4,     5,     6,    98,     8,     9,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,   116,   117,   118,    28,   120,
      -1,   122,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,
      90,    -1,     1,    -1,     3,     4,     5,     6,    98,     8,
       9,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    28,
      -1,    -1,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    -1,    88,
      89,    90,    -1,     1,    -1,     3,     4,     5,     6,    98,
       8,     9,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      28,    -1,    -1,   122,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,   118,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,   118,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,
      -1,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,   120,    -1,    -1,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,   120,    -1,    -1,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,   120,    -1,    -1,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,   120,
      -1,    -1,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,   121,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,
     126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
      -1,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,   122,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,     0,     1,    -1,     3,     4,     5,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,   116,   117,
     118,    -1,   120,   121,    -1,    -1,    -1,   125,   126,     0,
       1,    -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,    -1,    -1,    -1,   125,   126,     0,     1,    -1,     3,
       4,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,     0,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,     0,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,     0,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,     1,
      -1,     3,     4,     5,    -1,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,     1,    -1,     3,
       4,     5,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,     0,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,    -1,    -1,    -1,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    -1,    66,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    -1,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,     0,    -1,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,
      -1,   124,    -1,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    -1,
      66,    -1,    68,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    -1,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,     0,    -1,    99,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,   122,    -1,   124,    -1,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    -1,    66,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    -1,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,     0,    -1,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,   122,    -1,   124,    -1,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    -1,    66,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    -1,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,     0,    -1,    99,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      -1,    66,    -1,    68,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      -1,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    -1,    99,   100,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,   126,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   126,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    76,    77,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
       3,    -1,    -1,    -1,   105,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   124,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    78,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,    -1,
      -1,   124,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,   120,   121,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   121,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,     3,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    76,    77,    -1,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,   100,   101,    -1,    -1,
      -1,   105,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,   118,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,   107,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,   107,    -1,    -1,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,   118,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,   118,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,   118,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    76,
      77,    -1,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,     0,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,   100,   101,    -1,    -1,    -1,   105,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,   116,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,   116,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    -1,    -1,   116,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    -1,    -1,    -1,    -1,   116,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,   116,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,   116,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,
      -1,    -1,   116,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,   115,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,   115,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,   115,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,   110,   111,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    80,    81,
      -1,    -1,    -1,    85,    86,    87,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    53,    65,    66,    74,    75,
      76,    77,    79,    80,    81,    82,    83,    85,    86,    87,
     100,   101,   105,   110,   111,   112,   115,   118,   138,   139,
     140,   142,   167,   204,   205,   206,   207,   208,   209,   264,
     267,   268,   271,   272,   273,   274,   275,   276,   277,   279,
     283,   286,   287,   288,   289,   290,   291,   296,   297,   306,
     307,   308,   315,   316,   320,   323,   328,   357,   360,   361,
     379,   380,   382,   383,   384,   385,   386,   387,    77,   124,
       5,    31,   209,   381,   209,   115,   115,   115,   142,   209,
     381,   277,   278,   315,   323,    37,   140,   209,   305,   306,
     308,   310,   311,   312,   314,   315,   323,   326,   327,   332,
     113,   118,   139,   140,   209,   122,   124,   118,   122,   121,
     112,   113,   204,   209,   122,   142,   209,   122,   124,   121,
     113,   122,   124,   122,   121,   122,   140,   209,   315,     1,
      31,    37,    38,   118,   138,   140,   206,   208,   209,   264,
     274,   275,   277,   279,   308,   312,   315,   323,   326,   327,
     328,   330,   338,   339,   340,   341,    37,    38,   140,   315,
     340,   115,   126,     1,    29,    30,    31,    32,    33,    65,
     116,   138,   209,   263,   267,   269,   270,   277,   279,   283,
     284,   285,   291,   295,   303,   304,   344,   345,   346,   347,
     348,   349,   323,   115,   308,   315,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    46,    47,    66,    85,
      87,   100,   122,   142,   163,   164,   263,   268,   269,   277,
     280,   284,   286,   294,   359,   362,   363,   364,   369,   370,
     371,    31,    76,   124,   206,   208,   296,   360,   361,   379,
     380,   387,     1,   206,   273,   290,   296,   328,   357,   383,
       1,   382,   383,     0,   209,   381,   381,     5,   119,   381,
       1,     4,     6,     8,     9,    65,    71,    72,    73,    84,
      85,    98,   102,   103,   104,   105,   106,   107,   108,   109,
     112,   115,   117,   125,   126,   128,   129,   130,   131,   142,
     168,   169,   209,   210,   211,   212,   215,   216,   220,   221,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   241,   243,   244,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     381,   393,   394,   395,   396,   139,   209,   122,   142,   209,
     277,   323,   126,   115,   126,   116,   303,   304,   348,   349,
     323,   326,   327,   305,   310,   314,   315,   116,   315,   116,
     315,   315,    85,   142,   194,   196,   198,   202,   203,   209,
     221,   227,   244,   249,   295,   118,   113,   113,   118,     1,
      68,    78,    80,    81,    88,    91,    92,    93,    94,    96,
      98,    99,   115,   117,   118,   121,   143,   144,   145,   146,
     147,   148,   149,   150,   165,   166,   168,   169,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   185,   189,
     190,   191,   192,   209,   216,   241,   295,   307,   309,   315,
     323,   328,   329,   358,    80,    81,   209,   263,   267,   277,
     280,   283,   291,   298,   299,     1,   121,   191,   192,   140,
     209,     1,   209,   265,   266,     1,   121,   266,   299,    65,
     195,   197,   199,   200,   201,   209,   295,     1,   121,   191,
     192,   299,     1,   121,   191,   192,     1,   121,   191,   192,
     140,   209,   120,   120,   120,   122,   323,   308,   312,   315,
       1,   119,   363,   370,   371,   363,   370,   371,     1,   118,
     120,   120,   323,   118,   127,   139,   209,   236,   257,   261,
     262,   120,   122,   142,   209,   121,   122,   121,   122,   315,
      37,   115,   126,   128,   138,   140,   209,   263,   269,   277,
     279,   284,   305,   306,   315,   321,   323,   324,   327,     1,
     116,   120,     1,   116,   120,     1,   120,     1,   120,   116,
     116,   308,   115,   308,   115,   115,     1,   118,     1,   121,
       1,    37,    38,   118,   209,   263,   269,   277,   280,   284,
     315,   340,   341,     1,   118,     1,   359,   362,   370,   371,
     359,   362,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    85,    86,    88,    89,    90,   118,   124,
     142,   186,   187,   188,   209,   216,   221,   237,   239,   244,
     257,   258,   259,   320,   350,   351,   354,   355,   356,   363,
     364,   365,   366,   367,   368,   370,   371,   373,   374,   375,
     376,   377,   378,   121,    31,   209,   381,   209,   204,   205,
     207,   208,   305,   306,   312,   315,   323,   328,   330,   363,
     371,   206,   296,   119,   235,   236,   256,   116,     1,   115,
     169,   212,   217,   220,   222,   242,   243,   245,   115,   221,
     244,   221,   244,   115,   209,   263,   269,   277,   280,   284,
     302,   261,   115,   115,   302,   261,   115,   115,   115,   115,
     115,   115,   222,   245,   116,   237,   239,   259,   269,   277,
     279,   284,   292,   342,   381,   122,   127,   170,   171,   213,
     218,   237,   122,     1,   121,   122,     1,     7,     8,     9,
     115,   123,   126,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,   119,   238,   171,   213,   214,   224,   246,
     112,   132,   133,   129,   130,    10,    11,   227,   249,    12,
      13,   113,   114,    14,    15,   128,   134,   135,    16,    17,
     136,   238,   116,     7,     8,     9,   115,   123,   126,   238,
     112,   132,   133,   129,   130,    10,    11,    12,    13,   113,
     114,    14,    15,   128,   134,   135,    16,    17,   136,   238,
     116,   116,   107,   209,   295,   388,   391,   392,   122,   122,
     127,   139,   261,   262,   127,   139,   261,   262,   116,   116,
     116,   116,   305,   310,   314,   116,   116,   305,    11,   114,
     120,   119,   115,   315,   323,   324,    65,   201,   209,   295,
     201,     1,   209,   263,   277,   280,   291,   300,   295,   328,
     329,   115,   142,   209,   209,   295,     1,   115,   300,   112,
     115,   209,   295,   118,   320,   370,   371,   370,   371,   370,
     118,   370,   371,   118,     1,   121,     1,     1,   118,   120,
     120,    69,    70,    91,    95,    97,   121,    69,    70,   121,
     118,     1,   189,   190,     1,   189,   190,     1,   119,   115,
     124,   209,   281,   282,   305,   311,   313,   315,   323,   330,
     331,   332,     1,   295,   303,   346,   323,   309,   315,   115,
     124,   149,   150,   165,   166,   168,   169,   178,   209,   295,
     113,   142,   209,   209,   263,   277,   280,   113,   113,   119,
     120,     1,   118,   122,    28,   141,   209,   114,   120,   119,
     209,   324,   326,   338,   338,   338,   118,   120,   121,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   213,   214,   216,   236,   257,   294,   335,   336,   305,
     308,   310,   312,   314,   305,   312,   122,   237,   258,   333,
     334,   370,   371,   370,   371,   338,   339,   338,   339,   127,
     127,   127,    51,   344,   345,     1,   266,   122,   122,     1,
     121,   191,   192,     1,   121,   191,   192,   122,   116,   209,
     303,   304,   315,   323,   324,   348,   349,   127,   139,   261,
     262,   315,   323,   327,   323,   115,   126,   321,     1,     1,
     120,     1,    51,   209,   344,   345,   120,     1,    51,   209,
     344,   345,   120,     1,    51,   209,   344,   345,   120,    51,
     209,   344,   345,     3,    28,    44,    74,    75,   116,   317,
     318,   319,   237,   139,   209,   121,   122,   118,   118,   124,
     261,   262,   124,   115,   115,     1,   115,    52,    53,    54,
      56,    57,    58,    59,    62,    86,   209,   259,   320,   350,
     373,   377,   115,   209,   118,   118,   118,   213,   214,   239,
     259,   115,   277,   115,   115,   182,   209,   118,   118,   118,
     124,   123,   238,     1,   123,   118,   120,   239,   259,   238,
     116,   120,   239,     1,   365,   366,   365,   366,   350,   351,
     359,   362,   350,   351,   359,   362,     1,     1,   381,   381,
     140,   209,   122,   122,   323,   312,   315,   363,   371,   363,
     371,   371,   236,   136,   118,   136,    65,   138,   209,   221,
     244,   269,   277,   279,   284,   293,   343,     1,     1,     7,
       8,     9,   115,   123,   126,     7,     8,     9,   115,   123,
     126,   209,   294,   113,   115,   126,   209,   263,   269,   277,
     280,   284,   315,   322,   323,   325,   209,   263,   269,   277,
     280,   284,   301,   239,   342,   370,   209,   126,   325,   301,
     237,   381,   381,   381,   237,   221,   244,   343,   116,   209,
     269,   277,   279,   284,   324,   116,   123,     1,   161,   162,
       1,   121,   120,   127,     1,   161,   162,   121,     1,   161,
     162,     1,   209,   116,   214,   218,   219,   258,     1,   209,
     239,   259,   213,   237,     1,   224,   246,   224,   246,   224,
     246,   225,   247,   225,   247,   226,   248,   226,   248,   227,
     249,   227,   249,   227,   249,   213,   214,   229,   250,   213,
     214,   229,   250,   213,   214,   230,   251,   213,   214,   231,
     252,   213,   214,   232,   253,   233,   254,   234,   255,   124,
     213,   214,   239,   240,   259,   260,   213,   237,     1,   209,
     116,   218,   219,     1,   209,   239,   259,   213,   237,   224,
     246,   224,   246,   224,   246,   225,   247,   225,   247,   226,
     248,   226,   248,   227,   249,   227,   249,   227,   249,   227,
     249,   213,   214,   229,   250,   213,   214,   229,   250,   213,
     214,   230,   251,   213,   214,   231,   252,   213,   214,   232,
     253,   233,   254,   234,   255,   124,   239,   240,   259,   260,
     213,   237,   113,   114,   209,   389,   390,   209,   121,   388,
     391,   392,   392,   127,   127,   127,   127,   127,   127,   202,
     194,   196,   198,   209,   315,   323,   114,   119,   324,   114,
     122,   113,   122,   209,   263,   277,   280,   324,   315,   323,
     330,   331,   182,   282,   305,   315,   323,   122,   209,   122,
     209,   324,   209,   315,   115,   118,   121,   172,   173,   172,
     173,   370,   370,   370,   211,   370,   370,     1,   335,   336,
     116,   261,   262,   122,   120,     1,   295,   303,   346,   323,
     305,   313,   315,   124,   320,   209,   115,   309,   309,   209,
       1,     1,   282,   203,   113,   201,   201,   261,   262,   265,
     191,   192,     1,   121,   266,   119,   124,   119,   124,   200,
     196,   209,   119,   209,   119,   370,   371,     1,   118,   120,
     118,   120,   118,   153,   154,   157,   158,   159,   121,   151,
     154,   118,   121,   153,   154,   157,   158,   159,   119,    37,
     330,   331,   332,   333,   334,   337,     1,   121,   266,     1,
     121,   266,     1,   121,   191,   192,   315,   323,   324,   116,
     116,   116,   127,   127,   127,   323,   321,   116,   348,   349,
     127,   139,   261,   262,   344,   345,   295,   344,   344,   344,
     345,   116,   115,   116,   120,   318,   116,   116,   116,     1,
     161,   162,   350,   351,   359,   362,   124,   124,   350,   351,
     359,   362,   239,   259,   239,   259,   116,   239,   259,   124,
     261,   262,   124,   115,   115,   350,   115,   214,   259,   115,
     124,    56,     1,   116,   118,   209,   239,   259,   372,   118,
     118,   118,   118,   118,   381,   115,   237,   237,   209,   350,
     351,   359,   362,    90,   214,   258,    88,    89,    90,   237,
     258,   214,   258,   237,   258,   113,   312,   371,   371,   118,
     239,   240,   259,   260,   239,   240,   259,   260,   138,   139,
     116,   138,   269,   277,   279,   284,   324,   116,     1,   209,
     116,   218,   219,     1,   209,   239,   259,     1,   209,   116,
     218,   219,     1,   209,   239,   259,   116,   116,   324,   203,
     116,   315,   325,   348,   349,   261,   262,   113,   323,   115,
     322,   126,   113,   126,   209,   263,   269,   277,   280,   284,
     325,   116,   116,   116,   116,   261,   262,   126,   126,   325,
     120,   116,   120,   120,   120,   116,   116,   224,   246,   381,
       1,   121,   213,   237,     1,     1,   116,   120,   116,   127,
     127,     1,   120,   124,   124,   120,   124,   124,   116,   127,
     127,   124,   124,   124,   124,   209,   209,   118,   120,   209,
     381,   121,   121,   315,   323,   196,   203,   113,   122,   122,
     209,   323,   315,   116,   323,   305,   116,   122,   122,   209,
     116,     1,   161,   162,   281,   315,   209,   115,   305,   313,
     313,   261,   262,   115,   116,   114,   203,   114,   114,   118,
       1,   118,   194,   193,   295,   194,   193,   198,   119,   122,
       1,   155,   156,     1,   155,   156,   371,     1,   335,   336,
     120,   121,   333,   334,     1,   118,     1,   118,   323,   321,
     116,   116,   116,   127,   127,   127,   324,   327,   239,   116,
     318,     1,   350,   351,   359,   362,   350,   351,   359,   362,
     116,   116,   116,   116,     1,   350,   116,   239,   350,   351,
     124,   124,   259,   116,   239,   259,    56,   259,   372,   381,
     115,   350,   124,   118,     1,   118,     1,   116,   259,   372,
       3,   116,   124,   381,   116,   116,   120,   115,   115,   182,
     124,   124,   124,   124,   124,   124,   124,   124,   116,   116,
       1,   116,   116,   127,   127,   116,   127,   127,   116,   114,
     315,   323,   325,   116,   116,   116,   127,   127,   203,   322,
     116,   348,   349,   261,   262,   203,   261,   262,   113,   126,
     115,   333,   127,   127,   261,   262,   261,   262,   126,   342,
     209,   209,   237,     1,   214,   258,   213,   214,   213,   214,
     236,   256,   213,   214,   236,   256,   213,   214,   213,   214,
     236,   256,   213,   214,   236,   256,   213,   214,   236,   256,
     213,   214,   236,   256,   213,   214,   236,   256,   213,   214,
     236,   256,   389,   118,   118,   114,   203,   122,   370,   305,
     119,   122,     1,   115,   124,   124,   114,   191,   192,   118,
     191,   192,   119,   324,   119,   198,   337,   121,   333,   334,
       1,   191,   192,   191,   192,   116,   350,   350,   350,   350,
     350,   351,   116,   115,   372,   116,   239,   259,   239,   350,
       1,   116,   239,   259,   352,   353,   381,   118,   353,     3,
     116,   124,   122,   182,   237,   237,     1,     1,   322,   116,
     114,   116,   116,   127,   127,   114,   127,   127,   203,   261,
     262,   342,   127,   127,   127,   127,   261,   262,   116,   116,
     116,   116,   114,   335,   261,   262,   261,   262,   191,   192,
     194,   194,   120,   121,     1,    64,    64,   239,   259,   116,
     239,   259,   116,   118,   116,   118,   350,   351,   116,   350,
     351,   116,   120,   124,   115,     3,   116,   124,   353,   118,
     353,    73,   182,   183,   184,   116,   116,   116,   120,   114,
     127,   127,   116,   127,   127,   118,   121,   350,   350,   116,
     116,   118,   350,   239,   350,   351,   118,   352,   353,   237,
     353,   118,   353,   116,   124,     3,   116,   124,   370,   370,
     121,   183,   122,   182,   224,   246,   333,   116,   116,   116,
     116,   116,   124,   118,   353,   353,   118,   353,   184,   116,
     350,   118,   118,   118,   353,   116,   116,   116,   124,   121,
     116,   118,   118,   118,   353,   118,   116,   118
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 138: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10919 "grammar.ec"
	break;
      case 139: /* "type" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10928 "grammar.ec"
	break;
      case 140: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10937 "grammar.ec"
	break;
      case 141: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 10946 "grammar.ec"
	break;
      case 142: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10955 "grammar.ec"
	break;
      case 143: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10964 "grammar.ec"
	break;
      case 144: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10973 "grammar.ec"
	break;
      case 145: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10982 "grammar.ec"
	break;
      case 146: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10991 "grammar.ec"
	break;
      case 147: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11000 "grammar.ec"
	break;
      case 148: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11009 "grammar.ec"
	break;
      case 149: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11018 "grammar.ec"
	break;
      case 150: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11027 "grammar.ec"
	break;
      case 151: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11036 "grammar.ec"
	break;
      case 152: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11045 "grammar.ec"
	break;
      case 153: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11054 "grammar.ec"
	break;
      case 154: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11063 "grammar.ec"
	break;
      case 155: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11072 "grammar.ec"
	break;
      case 156: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11081 "grammar.ec"
	break;
      case 157: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11090 "grammar.ec"
	break;
      case 158: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11099 "grammar.ec"
	break;
      case 159: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11108 "grammar.ec"
	break;
      case 160: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11117 "grammar.ec"
	break;
      case 161: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11126 "grammar.ec"
	break;
      case 162: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11135 "grammar.ec"
	break;
      case 163: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11144 "grammar.ec"
	break;
      case 164: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11153 "grammar.ec"
	break;
      case 168: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11162 "grammar.ec"
	break;
      case 169: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11171 "grammar.ec"
	break;
      case 172: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11180 "grammar.ec"
	break;
      case 173: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11189 "grammar.ec"
	break;
      case 174: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11198 "grammar.ec"
	break;
      case 175: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11207 "grammar.ec"
	break;
      case 178: /* "property" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 11216 "grammar.ec"
	break;
      case 189: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11225 "grammar.ec"
	break;
      case 190: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11234 "grammar.ec"
	break;
      case 191: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11243 "grammar.ec"
	break;
      case 192: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11252 "grammar.ec"
	break;
      case 193: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 11261 "grammar.ec"
	break;
      case 194: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11270 "grammar.ec"
	break;
      case 195: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11279 "grammar.ec"
	break;
      case 196: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11288 "grammar.ec"
	break;
      case 197: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11297 "grammar.ec"
	break;
      case 198: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11306 "grammar.ec"
	break;
      case 199: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11315 "grammar.ec"
	break;
      case 200: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11324 "grammar.ec"
	break;
      case 201: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 11333 "grammar.ec"
	break;
      case 202: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11342 "grammar.ec"
	break;
      case 203: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 11351 "grammar.ec"
	break;
      case 204: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11360 "grammar.ec"
	break;
      case 205: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 241 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11369 "grammar.ec"
	break;
      case 206: /* "class" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11378 "grammar.ec"
	break;
      case 207: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11387 "grammar.ec"
	break;
      case 208: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11396 "grammar.ec"
	break;
      case 209: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 196 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 11405 "grammar.ec"
	break;
      case 210: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11414 "grammar.ec"
	break;
      case 211: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11423 "grammar.ec"
	break;
      case 215: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11432 "grammar.ec"
	break;
      case 216: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11441 "grammar.ec"
	break;
      case 218: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11450 "grammar.ec"
	break;
      case 219: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11459 "grammar.ec"
	break;
      case 221: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11468 "grammar.ec"
	break;
      case 224: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11477 "grammar.ec"
	break;
      case 225: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11486 "grammar.ec"
	break;
      case 226: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11495 "grammar.ec"
	break;
      case 227: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11504 "grammar.ec"
	break;
      case 229: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11513 "grammar.ec"
	break;
      case 230: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11522 "grammar.ec"
	break;
      case 231: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11531 "grammar.ec"
	break;
      case 232: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11540 "grammar.ec"
	break;
      case 233: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11549 "grammar.ec"
	break;
      case 234: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11558 "grammar.ec"
	break;
      case 235: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11567 "grammar.ec"
	break;
      case 236: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11576 "grammar.ec"
	break;
      case 237: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11585 "grammar.ec"
	break;
      case 239: /* "expression" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11594 "grammar.ec"
	break;
      case 241: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11603 "grammar.ec"
	break;
      case 244: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11612 "grammar.ec"
	break;
      case 246: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11621 "grammar.ec"
	break;
      case 247: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11630 "grammar.ec"
	break;
      case 248: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11639 "grammar.ec"
	break;
      case 249: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11648 "grammar.ec"
	break;
      case 250: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11657 "grammar.ec"
	break;
      case 251: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11666 "grammar.ec"
	break;
      case 252: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11675 "grammar.ec"
	break;
      case 253: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11684 "grammar.ec"
	break;
      case 254: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11693 "grammar.ec"
	break;
      case 255: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11702 "grammar.ec"
	break;
      case 256: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11711 "grammar.ec"
	break;
      case 257: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11720 "grammar.ec"
	break;
      case 258: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11729 "grammar.ec"
	break;
      case 259: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11738 "grammar.ec"
	break;
      case 261: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11747 "grammar.ec"
	break;
      case 262: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11756 "grammar.ec"
	break;
      case 263: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11765 "grammar.ec"
	break;
      case 264: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11774 "grammar.ec"
	break;
      case 265: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 11783 "grammar.ec"
	break;
      case 266: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 11792 "grammar.ec"
	break;
      case 268: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11801 "grammar.ec"
	break;
      case 269: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11810 "grammar.ec"
	break;
      case 270: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11819 "grammar.ec"
	break;
      case 272: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11828 "grammar.ec"
	break;
      case 273: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11837 "grammar.ec"
	break;
      case 274: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11846 "grammar.ec"
	break;
      case 275: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11855 "grammar.ec"
	break;
      case 276: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11864 "grammar.ec"
	break;
      case 277: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11873 "grammar.ec"
	break;
      case 278: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11882 "grammar.ec"
	break;
      case 279: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11891 "grammar.ec"
	break;
      case 280: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11900 "grammar.ec"
	break;
      case 281: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11909 "grammar.ec"
	break;
      case 282: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 11918 "grammar.ec"
	break;
      case 283: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11927 "grammar.ec"
	break;
      case 284: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11936 "grammar.ec"
	break;
      case 285: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11945 "grammar.ec"
	break;
      case 286: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11954 "grammar.ec"
	break;
      case 287: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11963 "grammar.ec"
	break;
      case 288: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11972 "grammar.ec"
	break;
      case 289: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11981 "grammar.ec"
	break;
      case 290: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11990 "grammar.ec"
	break;
      case 292: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11999 "grammar.ec"
	break;
      case 293: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12008 "grammar.ec"
	break;
      case 294: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12017 "grammar.ec"
	break;
      case 295: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12026 "grammar.ec"
	break;
      case 296: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12035 "grammar.ec"
	break;
      case 297: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12044 "grammar.ec"
	break;
      case 298: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12053 "grammar.ec"
	break;
      case 299: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12062 "grammar.ec"
	break;
      case 303: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12071 "grammar.ec"
	break;
      case 304: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12080 "grammar.ec"
	break;
      case 305: /* "direct_declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12089 "grammar.ec"
	break;
      case 306: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12098 "grammar.ec"
	break;
      case 307: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12107 "grammar.ec"
	break;
      case 308: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12116 "grammar.ec"
	break;
      case 309: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12125 "grammar.ec"
	break;
      case 310: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12134 "grammar.ec"
	break;
      case 311: /* "direct_declarator_function_start_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12143 "grammar.ec"
	break;
      case 312: /* "direct_declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12152 "grammar.ec"
	break;
      case 313: /* "direct_declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12161 "grammar.ec"
	break;
      case 314: /* "direct_declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12170 "grammar.ec"
	break;
      case 315: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 12179 "grammar.ec"
	break;
      case 317: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12188 "grammar.ec"
	break;
      case 318: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 270 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 12197 "grammar.ec"
	break;
      case 319: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 271 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 12206 "grammar.ec"
	break;
      case 320: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 12215 "grammar.ec"
	break;
      case 321: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12224 "grammar.ec"
	break;
      case 322: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12233 "grammar.ec"
	break;
      case 323: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 12242 "grammar.ec"
	break;
      case 324: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12251 "grammar.ec"
	break;
      case 325: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12260 "grammar.ec"
	break;
      case 326: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12269 "grammar.ec"
	break;
      case 327: /* "declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12278 "grammar.ec"
	break;
      case 328: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12287 "grammar.ec"
	break;
      case 329: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12296 "grammar.ec"
	break;
      case 330: /* "declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12305 "grammar.ec"
	break;
      case 331: /* "declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12314 "grammar.ec"
	break;
      case 332: /* "declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12323 "grammar.ec"
	break;
      case 333: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12332 "grammar.ec"
	break;
      case 334: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12341 "grammar.ec"
	break;
      case 335: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12350 "grammar.ec"
	break;
      case 336: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12359 "grammar.ec"
	break;
      case 337: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 12368 "grammar.ec"
	break;
      case 338: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12377 "grammar.ec"
	break;
      case 339: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12386 "grammar.ec"
	break;
      case 340: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12395 "grammar.ec"
	break;
      case 341: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12404 "grammar.ec"
	break;
      case 342: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12413 "grammar.ec"
	break;
      case 343: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12422 "grammar.ec"
	break;
      case 344: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12431 "grammar.ec"
	break;
      case 345: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12440 "grammar.ec"
	break;
      case 346: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12449 "grammar.ec"
	break;
      case 347: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12458 "grammar.ec"
	break;
      case 348: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12467 "grammar.ec"
	break;
      case 349: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12476 "grammar.ec"
	break;
      case 350: /* "statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12485 "grammar.ec"
	break;
      case 351: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12494 "grammar.ec"
	break;
      case 355: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12503 "grammar.ec"
	break;
      case 356: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12512 "grammar.ec"
	break;
      case 357: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 12521 "grammar.ec"
	break;
      case 359: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 12530 "grammar.ec"
	break;
      case 363: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12539 "grammar.ec"
	break;
      case 364: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12548 "grammar.ec"
	break;
      case 365: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12557 "grammar.ec"
	break;
      case 366: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12566 "grammar.ec"
	break;
      case 367: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12575 "grammar.ec"
	break;
      case 368: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12584 "grammar.ec"
	break;
      case 369: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 12593 "grammar.ec"
	break;
      case 370: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12602 "grammar.ec"
	break;
      case 371: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12611 "grammar.ec"
	break;
      case 372: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12620 "grammar.ec"
	break;
      case 373: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12629 "grammar.ec"
	break;
      case 374: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12638 "grammar.ec"
	break;
      case 375: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12647 "grammar.ec"
	break;
      case 376: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12656 "grammar.ec"
	break;
      case 377: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12665 "grammar.ec"
	break;
      case 378: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12674 "grammar.ec"
	break;
      case 379: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 12683 "grammar.ec"
	break;
      case 380: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 12692 "grammar.ec"
	break;
      case 381: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12701 "grammar.ec"
	break;
      case 382: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 12710 "grammar.ec"
	break;
      case 383: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 12719 "grammar.ec"
	break;
      case 384: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 12728 "grammar.ec"
	break;
      case 385: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 12737 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 279 "grammar.y"
    {
      (yyval.specifier) = null;
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 308 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 366 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 368 "grammar.y"
    {
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);
      FreeIdentifier((yyvsp[(1) - (2)].id));
      FreeIdentifier((yyvsp[(2) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #else
      Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]);
      Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);
      yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 467 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 471 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 475 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 477 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start);
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 526 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 528 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 533 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(1) - (3)].list), FreeSpecifier); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 538 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(2) - (4)].list), FreeSpecifier) ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 543 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 545 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 550 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 552 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 557 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 559 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 564 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 566 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 568 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 570 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 572 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 576 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 580 "grammar.y"
    {
         if((yyvsp[(1) - (3)].classFunction).declarator)
         {
            (yyvsp[(1) - (3)].classFunction).declarator = MkStructDeclarator((yyvsp[(1) - (3)].classFunction).declarator, null);
            (yyvsp[(1) - (3)].classFunction).declarator.structDecl.attrib = (yyvsp[(2) - (3)].attrib);
         }
         ProcessClassFunctionBody((yyvsp[(1) - (3)].classFunction), null);
         (yyval.classFunction).loc = (yyloc);
      ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 593 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 595 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 597 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 599 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 601 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 607 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 609 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 614 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 619 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 624 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 626 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 628 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 632 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 633 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 637 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 639 "grammar.y"
    {
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end;

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 649 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 653 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 655 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 657 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 661 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 663 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 665 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 668 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 680 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end;
         {
            Initializer dummy = MkInitializerAssignment(MkExpDummy());
            MemberInit memberInit = MkMemberInit(null, dummy);
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end;
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end;
            ListAdd((yyvsp[(1) - (3)].list), memberInit);
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 691 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start;

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit);

         dummy = MkInitializerAssignment(MkExpDummy());
         memberInit = MkMemberInit(null, dummy);
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end;
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end;
         ListAdd((yyval.list), memberInit);
      ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 710 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 712 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 716 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 717 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 718 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 719 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 720 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 721 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 62:

/* Line 1464 of yacc.c  */
#line 722 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 64:

/* Line 1464 of yacc.c  */
#line 724 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 729 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 730 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 731 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 735 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 736 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 737 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 738 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 739 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 740 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 741 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 746 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 748 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 753 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 755 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 757 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 759 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 761 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 791 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 793 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 798 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 800 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 802 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 804 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 806 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 835 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 837 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 839 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 844 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 846 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 851 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 853 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 857 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 859 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 861 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 863 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 868 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 871 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 874 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 877 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]);
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 942 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 944 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 949 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 951 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 953 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 955 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 957 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 987 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 991 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 992 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 993 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 997 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 998 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 999 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 1003 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 1004 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 121:

/* Line 1464 of yacc.c  */
#line 1005 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 1011 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 1014 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 1017 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 1020 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 127:

/* Line 1464 of yacc.c  */
#line 1023 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 1029 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 1031 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 1033 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 1035 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 1037 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 1041 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1046 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1049 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1052 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1055 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 139:

/* Line 1464 of yacc.c  */
#line 1058 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1064 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1066 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1070 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1075 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1077 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1082 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1084 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1089 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1091 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1101 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1103 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1108 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1110 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1112 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1114 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1123 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1129 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1130 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1131 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1133 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1134 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1135 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1136 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1137 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1138 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1139 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1141 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1142 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1144 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1148 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1151 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1152 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1153 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1155 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1156 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1157 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1158 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1159 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1160 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1161 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1162 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1163 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1164 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1166 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1167 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1171 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1172 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1173 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1181 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1182 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1183 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 1187 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 1190 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1191 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1195 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1196 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1208 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1209 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1213 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1214 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1215 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1216 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1217 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1218 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1219 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1220 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1224 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1228 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1229 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1233 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1241 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 1242 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); ;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 1252 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 1253 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 1260 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1261 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1262 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1302 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1303 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1308 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1315 "grammar.y"
    { (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1317 "grammar.y"
    {
      (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name);
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]);
      FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1324 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1325 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1327 "grammar.y"
    { (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1329 "grammar.y"
    {
      (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list);
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]);
      FreeSpecifier((yyvsp[(2) - (5)].specifier));
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1337 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1338 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1343 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class);
      ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1350 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1357 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1363 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1370 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace(0, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1376 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass(0, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1385 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1392 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1398 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1404 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1410 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1416 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1422 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1433 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1449 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1454 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1455 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1457 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 272:

/* Line 1464 of yacc.c  */
#line 1458 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1459 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 1460 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1461 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1462 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1463 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1464 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1465 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1466 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1467 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1468 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1469 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1470 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1471 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1472 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1473 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1474 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1475 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1476 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1477 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1479 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 297:

/* Line 1464 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 298:

/* Line 1464 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpArray(null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 299:

/* Line 1464 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1505 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 305:

/* Line 1464 of yacc.c  */
#line 1506 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 306:

/* Line 1464 of yacc.c  */
#line 1507 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1508 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1509 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1510 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1511 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1512 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1513 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1515 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1516 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1517 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1518 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1519 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1520 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1521 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1522 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 1530 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1531 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1532 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1533 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1538 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1539 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1540 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1541 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1544 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1545 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1550 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1551 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1552 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 1556 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 344:

/* Line 1464 of yacc.c  */
#line 1557 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 345:

/* Line 1464 of yacc.c  */
#line 1558 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1559 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1560 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1564 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1565 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1566 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1567 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1568 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1569 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 354:

/* Line 1464 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 356:

/* Line 1464 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1574 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1576 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 364:

/* Line 1464 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 365:

/* Line 1464 of yacc.c  */
#line 1591 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 366:

/* Line 1464 of yacc.c  */
#line 1592 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1593 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 368:

/* Line 1464 of yacc.c  */
#line 1594 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1595 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1596 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1597 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 373:

/* Line 1464 of yacc.c  */
#line 1602 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 375:

/* Line 1464 of yacc.c  */
#line 1607 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 376:

/* Line 1464 of yacc.c  */
#line 1608 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 377:

/* Line 1464 of yacc.c  */
#line 1609 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1610 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1611 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1612 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 382:

/* Line 1464 of yacc.c  */
#line 1617 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 383:

/* Line 1464 of yacc.c  */
#line 1618 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 384:

/* Line 1464 of yacc.c  */
#line 1619 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1620 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 388:

/* Line 1464 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 389:

/* Line 1464 of yacc.c  */
#line 1627 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 390:

/* Line 1464 of yacc.c  */
#line 1628 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1633 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1641 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 394:

/* Line 1464 of yacc.c  */
#line 1642 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 395:

/* Line 1464 of yacc.c  */
#line 1643 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1644 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 397:

/* Line 1464 of yacc.c  */
#line 1645 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1646 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1647 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 402:

/* Line 1464 of yacc.c  */
#line 1653 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 403:

/* Line 1464 of yacc.c  */
#line 1654 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 404:

/* Line 1464 of yacc.c  */
#line 1655 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1656 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1658 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 407:

/* Line 1464 of yacc.c  */
#line 1659 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 408:

/* Line 1464 of yacc.c  */
#line 1660 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1661 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 411:

/* Line 1464 of yacc.c  */
#line 1666 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 412:

/* Line 1464 of yacc.c  */
#line 1667 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 413:

/* Line 1464 of yacc.c  */
#line 1669 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1670 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1675 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 417:

/* Line 1464 of yacc.c  */
#line 1676 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 418:

/* Line 1464 of yacc.c  */
#line 1678 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1679 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1684 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 422:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 423:

/* Line 1464 of yacc.c  */
#line 1687 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 426:

/* Line 1464 of yacc.c  */
#line 1693 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 427:

/* Line 1464 of yacc.c  */
#line 1694 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 429:

/* Line 1464 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 430:

/* Line 1464 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1705 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 433:

/* Line 1464 of yacc.c  */
#line 1706 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 434:

/* Line 1464 of yacc.c  */
#line 1707 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1708 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1710 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1712 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1713 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1715 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1716 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1717 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1718 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1720 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1721 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1728 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 450:

/* Line 1464 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 451:

/* Line 1464 of yacc.c  */
#line 1730 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1731 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 453:

/* Line 1464 of yacc.c  */
#line 1733 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1734 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1735 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1736 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 457:

/* Line 1464 of yacc.c  */
#line 1740 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1741 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 459:

/* Line 1464 of yacc.c  */
#line 1742 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1743 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1744 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1745 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1746 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1747 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1748 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1749 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1750 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1754 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1755 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1756 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1761 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 473:

/* Line 1464 of yacc.c  */
#line 1762 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 474:

/* Line 1464 of yacc.c  */
#line 1763 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 476:

/* Line 1464 of yacc.c  */
#line 1768 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 478:

/* Line 1464 of yacc.c  */
#line 1770 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 479:

/* Line 1464 of yacc.c  */
#line 1772 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 480:

/* Line 1464 of yacc.c  */
#line 1773 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1775 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 482:

/* Line 1464 of yacc.c  */
#line 1776 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1781 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1783 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1788 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1792 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); ;}
    break;

  case 488:

/* Line 1464 of yacc.c  */
#line 1794 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 489:

/* Line 1464 of yacc.c  */
#line 1796 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 490:

/* Line 1464 of yacc.c  */
#line 1797 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1799 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1805 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 494:

/* Line 1464 of yacc.c  */
#line 1807 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1812 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1816 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1817 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1818 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 499:

/* Line 1464 of yacc.c  */
#line 1819 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1820 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1821 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1822 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1823 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1824 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1825 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 506:

/* Line 1464 of yacc.c  */
#line 1826 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 507:

/* Line 1464 of yacc.c  */
#line 1827 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 513:

/* Line 1464 of yacc.c  */
#line 1843 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 515:

/* Line 1464 of yacc.c  */
#line 1848 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 516:

/* Line 1464 of yacc.c  */
#line 1849 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 517:

/* Line 1464 of yacc.c  */
#line 1850 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 1851 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 1852 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 1853 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 522:

/* Line 1464 of yacc.c  */
#line 1858 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 523:

/* Line 1464 of yacc.c  */
#line 1862 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 524:

/* Line 1464 of yacc.c  */
#line 1866 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 1870 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 527:

/* Line 1464 of yacc.c  */
#line 1878 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 528:

/* Line 1464 of yacc.c  */
#line 1879 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 529:

/* Line 1464 of yacc.c  */
#line 1880 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 1881 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 532:

/* Line 1464 of yacc.c  */
#line 1887 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         if((yyvsp[(1) - (2)].exp).identifier._class && !(yyvsp[(1) - (2)].exp).identifier._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(1) - (2)].exp).identifier.string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));

         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start);
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      }
      skipErrors = false;
   ;}
    break;

  case 533:

/* Line 1464 of yacc.c  */
#line 1937 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 534:

/* Line 1464 of yacc.c  */
#line 1938 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 535:

/* Line 1464 of yacc.c  */
#line 1939 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 1940 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 1941 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 538:

/* Line 1464 of yacc.c  */
#line 1942 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 1943 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 1948 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 542:

/* Line 1464 of yacc.c  */
#line 1949 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 543:

/* Line 1464 of yacc.c  */
#line 1950 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 1951 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 1958 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 1959 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 1960 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 1961 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 1966 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 551:

/* Line 1464 of yacc.c  */
#line 1967 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 552:

/* Line 1464 of yacc.c  */
#line 1969 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 1970 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 1975 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 556:

/* Line 1464 of yacc.c  */
#line 1976 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 557:

/* Line 1464 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 560:

/* Line 1464 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 561:

/* Line 1464 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 562:

/* Line 1464 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 565:

/* Line 1464 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 566:

/* Line 1464 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 568:

/* Line 1464 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 569:

/* Line 1464 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 571:

/* Line 1464 of yacc.c  */
#line 2005 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 572:

/* Line 1464 of yacc.c  */
#line 2006 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 573:

/* Line 1464 of yacc.c  */
#line 2007 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 2008 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 2009 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 2010 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 2011 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 2012 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 2014 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 2015 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 581:

/* Line 1464 of yacc.c  */
#line 2016 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 582:

/* Line 1464 of yacc.c  */
#line 2017 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 583:

/* Line 1464 of yacc.c  */
#line 2018 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 584:

/* Line 1464 of yacc.c  */
#line 2019 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 2020 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 2021 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 2023 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 2024 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 2025 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 2026 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 2028 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 2029 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 2030 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 2031 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 2034 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy());
         (yyval.exp).loc = (yyloc);
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]);
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 2041 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 597:

/* Line 1464 of yacc.c  */
#line 2045 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2049 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 600:

/* Line 1464 of yacc.c  */
#line 2056 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 601:

/* Line 1464 of yacc.c  */
#line 2060 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 602:

/* Line 1464 of yacc.c  */
#line 2065 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 603:

/* Line 1464 of yacc.c  */
#line 2066 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 604:

/* Line 1464 of yacc.c  */
#line 2070 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2071 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2072 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2079 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2080 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2081 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2085 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2086 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 613:

/* Line 1464 of yacc.c  */
#line 2087 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 614:

/* Line 1464 of yacc.c  */
#line 2088 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 617:

/* Line 1464 of yacc.c  */
#line 2098 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 618:

/* Line 1464 of yacc.c  */
#line 2099 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 619:

/* Line 1464 of yacc.c  */
#line 2100 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2101 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2102 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2106 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); declMode = defaultAccess; ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2107 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2108 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); declMode = staticAccess; ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2109 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2110 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2114 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2115 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 630:

/* Line 1464 of yacc.c  */
#line 2120 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2121 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 633:

/* Line 1464 of yacc.c  */
#line 2126 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 634:

/* Line 1464 of yacc.c  */
#line 2130 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 635:

/* Line 1464 of yacc.c  */
#line 2131 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 636:

/* Line 1464 of yacc.c  */
#line 2135 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2136 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 638:

/* Line 1464 of yacc.c  */
#line 2137 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2142 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2144 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 642:

/* Line 1464 of yacc.c  */
#line 2145 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 643:

/* Line 1464 of yacc.c  */
#line 2146 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 644:

/* Line 1464 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 645:

/* Line 1464 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2151 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2152 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 649:

/* Line 1464 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 650:

/* Line 1464 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 651:

/* Line 1464 of yacc.c  */
#line 2158 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); ;}
    break;

  case 652:

/* Line 1464 of yacc.c  */
#line 2159 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 653:

/* Line 1464 of yacc.c  */
#line 2163 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2165 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2169 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2170 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2171 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2172 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2173 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2174 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2175 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2176 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2177 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 665:

/* Line 1464 of yacc.c  */
#line 2179 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 666:

/* Line 1464 of yacc.c  */
#line 2180 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 667:

/* Line 1464 of yacc.c  */
#line 2182 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2183 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2184 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 670:

/* Line 1464 of yacc.c  */
#line 2185 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 671:

/* Line 1464 of yacc.c  */
#line 2186 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 676:

/* Line 1464 of yacc.c  */
#line 2200 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 677:

/* Line 1464 of yacc.c  */
#line 2204 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 678:

/* Line 1464 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 679:

/* Line 1464 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 680:

/* Line 1464 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 681:

/* Line 1464 of yacc.c  */
#line 2212 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2221 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2222 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2223 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 691:

/* Line 1464 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 692:

/* Line 1464 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 693:

/* Line 1464 of yacc.c  */
#line 2227 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 694:

/* Line 1464 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 698:

/* Line 1464 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 699:

/* Line 1464 of yacc.c  */
#line 2233 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 700:

/* Line 1464 of yacc.c  */
#line 2234 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 701:

/* Line 1464 of yacc.c  */
#line 2235 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 702:

/* Line 1464 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 703:

/* Line 1464 of yacc.c  */
#line 2237 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 704:

/* Line 1464 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 705:

/* Line 1464 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2243 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2245 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2247 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2249 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2251 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 715:

/* Line 1464 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 716:

/* Line 1464 of yacc.c  */
#line 2253 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 720:

/* Line 1464 of yacc.c  */
#line 2257 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 721:

/* Line 1464 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 722:

/* Line 1464 of yacc.c  */
#line 2259 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 723:

/* Line 1464 of yacc.c  */
#line 2260 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 724:

/* Line 1464 of yacc.c  */
#line 2267 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 725:

/* Line 1464 of yacc.c  */
#line 2269 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 726:

/* Line 1464 of yacc.c  */
#line 2271 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 727:

/* Line 1464 of yacc.c  */
#line 2273 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 728:

/* Line 1464 of yacc.c  */
#line 2275 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 729:

/* Line 1464 of yacc.c  */
#line 2277 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2279 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2281 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2283 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2285 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2289 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2290 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2295 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2301 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2307 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2314 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2323 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2324 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2325 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2326 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2330 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2331 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2332 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2334 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2335 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2336 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2338 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2339 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2340 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2344 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2349 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2357 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2366 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2374 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2376 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2377 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2378 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2383 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2390 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2397 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2400 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2413 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2427 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2430 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2432 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2434 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2439 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2443 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2444 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2445 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2446 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2447 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2448 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2449 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2450 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2455 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2456 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2457 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2459 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2460 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2463 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2468 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2469 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2470 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2471 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2472 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2482 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2483 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2484 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2485 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2496 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 814:

/* Line 1464 of yacc.c  */
#line 2497 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2498 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2500 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2501 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2502 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2503 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 821:

/* Line 1464 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 822:

/* Line 1464 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 824:

/* Line 1464 of yacc.c  */
#line 2513 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 826:

/* Line 1464 of yacc.c  */
#line 2515 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2516 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2517 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2518 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2519 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2520 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2522 "grammar.y"
    { _DeclClass(0, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2523 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass(0, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 834:

/* Line 1464 of yacc.c  */
#line 2526 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2544 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 837:

/* Line 1464 of yacc.c  */
#line 2562 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2566 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2567 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 840:

/* Line 1464 of yacc.c  */
#line 2568 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2569 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2570 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2571 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2572 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2573 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 846:

/* Line 1464 of yacc.c  */
#line 2575 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2593 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 848:

/* Line 1464 of yacc.c  */
#line 2609 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2610 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 850:

/* Line 1464 of yacc.c  */
#line 2611 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2612 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2613 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2614 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2615 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2616 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2617 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2618 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2619 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2620 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2622 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 861:

/* Line 1464 of yacc.c  */
#line 2640 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2656 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2657 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2658 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2659 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2660 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2661 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 868:

/* Line 1464 of yacc.c  */
#line 2662 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 869:

/* Line 1464 of yacc.c  */
#line 2663 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2664 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 871:

/* Line 1464 of yacc.c  */
#line 2665 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2666 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 873:

/* Line 1464 of yacc.c  */
#line 2667 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2669 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2687 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2703 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2704 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2708 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2709 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2710 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 881:

/* Line 1464 of yacc.c  */
#line 2711 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2712 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 884:

/* Line 1464 of yacc.c  */
#line 2718 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   ;}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2724 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); ;}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2727 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 887:

/* Line 1464 of yacc.c  */
#line 2736 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 888:

/* Line 1464 of yacc.c  */
#line 2745 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      ;}
    break;

  case 889:

/* Line 1464 of yacc.c  */
#line 2754 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2762 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 891:

/* Line 1464 of yacc.c  */
#line 2763 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 892:

/* Line 1464 of yacc.c  */
#line 2764 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 893:

/* Line 1464 of yacc.c  */
#line 2765 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2769 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 895:

/* Line 1464 of yacc.c  */
#line 2770 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2771 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 897:

/* Line 1464 of yacc.c  */
#line 2772 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 898:

/* Line 1464 of yacc.c  */
#line 2773 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 899:

/* Line 1464 of yacc.c  */
#line 2774 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 900:

/* Line 1464 of yacc.c  */
#line 2775 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 901:

/* Line 1464 of yacc.c  */
#line 2776 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 902:

/* Line 1464 of yacc.c  */
#line 2777 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 904:

/* Line 1464 of yacc.c  */
#line 2785 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 905:

/* Line 1464 of yacc.c  */
#line 2786 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 2787 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 907:

/* Line 1464 of yacc.c  */
#line 2788 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 2789 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 2795 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 910:

/* Line 1464 of yacc.c  */
#line 2804 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 911:

/* Line 1464 of yacc.c  */
#line 2813 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 912:

/* Line 1464 of yacc.c  */
#line 2822 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 916:

/* Line 1464 of yacc.c  */
#line 2845 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 917:

/* Line 1464 of yacc.c  */
#line 2846 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 918:

/* Line 1464 of yacc.c  */
#line 2847 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 919:

/* Line 1464 of yacc.c  */
#line 2848 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 2849 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 2855 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list));
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 2864 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null);
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 923:

/* Line 1464 of yacc.c  */
#line 2873 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list));
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 924:

/* Line 1464 of yacc.c  */
#line 2882 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null);
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start);
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 927:

/* Line 1464 of yacc.c  */
#line 2945 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 928:

/* Line 1464 of yacc.c  */
#line 2946 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 929:

/* Line 1464 of yacc.c  */
#line 2947 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 930:

/* Line 1464 of yacc.c  */
#line 2949 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 2960 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 2961 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 2962 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 2967 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 935:

/* Line 1464 of yacc.c  */
#line 2968 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 936:

/* Line 1464 of yacc.c  */
#line 2969 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 937:

/* Line 1464 of yacc.c  */
#line 2970 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 938:

/* Line 1464 of yacc.c  */
#line 2971 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 939:

/* Line 1464 of yacc.c  */
#line 2975 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 940:

/* Line 1464 of yacc.c  */
#line 2976 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 2980 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 2981 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 2982 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 2986 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 945:

/* Line 1464 of yacc.c  */
#line 2987 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 2991 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 2992 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 2993 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 2994 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 2995 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 951:

/* Line 1464 of yacc.c  */
#line 2996 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 2997 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 953:

/* Line 1464 of yacc.c  */
#line 2998 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 2999 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 3000 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 956:

/* Line 1464 of yacc.c  */
#line 3001 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 3002 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 958:

/* Line 1464 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 3004 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 960:

/* Line 1464 of yacc.c  */
#line 3005 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 961:

/* Line 1464 of yacc.c  */
#line 3006 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 962:

/* Line 1464 of yacc.c  */
#line 3010 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 963:

/* Line 1464 of yacc.c  */
#line 3011 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 3012 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 965:

/* Line 1464 of yacc.c  */
#line 3013 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 966:

/* Line 1464 of yacc.c  */
#line 3014 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 967:

/* Line 1464 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 968:

/* Line 1464 of yacc.c  */
#line 3016 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 969:

/* Line 1464 of yacc.c  */
#line 3017 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 970:

/* Line 1464 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 971:

/* Line 1464 of yacc.c  */
#line 3022 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 972:

/* Line 1464 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 973:

/* Line 1464 of yacc.c  */
#line 3024 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 974:

/* Line 1464 of yacc.c  */
#line 3028 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 976:

/* Line 1464 of yacc.c  */
#line 3030 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 977:

/* Line 1464 of yacc.c  */
#line 3031 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 978:

/* Line 1464 of yacc.c  */
#line 3032 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 979:

/* Line 1464 of yacc.c  */
#line 3036 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 981:

/* Line 1464 of yacc.c  */
#line 3038 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 982:

/* Line 1464 of yacc.c  */
#line 3039 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 983:

/* Line 1464 of yacc.c  */
#line 3040 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 985:

/* Line 1464 of yacc.c  */
#line 3046 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 986:

/* Line 1464 of yacc.c  */
#line 3048 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 987:

/* Line 1464 of yacc.c  */
#line 3050 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 3052 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 990:

/* Line 1464 of yacc.c  */
#line 3058 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 991:

/* Line 1464 of yacc.c  */
#line 3060 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 992:

/* Line 1464 of yacc.c  */
#line 3062 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 994:

/* Line 1464 of yacc.c  */
#line 3067 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 995:

/* Line 1464 of yacc.c  */
#line 3068 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 996:

/* Line 1464 of yacc.c  */
#line 3069 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 998:

/* Line 1464 of yacc.c  */
#line 3074 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 999:

/* Line 1464 of yacc.c  */
#line 3075 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1000:

/* Line 1464 of yacc.c  */
#line 3076 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1002:

/* Line 1464 of yacc.c  */
#line 3081 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1003:

/* Line 1464 of yacc.c  */
#line 3082 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1004:

/* Line 1464 of yacc.c  */
#line 3083 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1006:

/* Line 1464 of yacc.c  */
#line 3088 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1007:

/* Line 1464 of yacc.c  */
#line 3089 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1008:

/* Line 1464 of yacc.c  */
#line 3090 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1010:

/* Line 1464 of yacc.c  */
#line 3095 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1011:

/* Line 1464 of yacc.c  */
#line 3096 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1012:

/* Line 1464 of yacc.c  */
#line 3097 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1013:

/* Line 1464 of yacc.c  */
#line 3101 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3102 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1015:

/* Line 1464 of yacc.c  */
#line 3104 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init);
         }
      ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3119 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1017:

/* Line 1464 of yacc.c  */
#line 3120 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3121 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1019:

/* Line 1464 of yacc.c  */
#line 3123 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init);
         }
      ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3136 "grammar.y"
    {
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list));
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init);
         }
      ;}
    break;

  case 1021:

/* Line 1464 of yacc.c  */
#line 3151 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3153 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1023:

/* Line 1464 of yacc.c  */
#line 3157 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3158 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3162 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3163 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3164 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3165 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3168 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3169 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3173 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3174 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3175 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1034:

/* Line 1464 of yacc.c  */
#line 3179 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3183 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3187 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3188 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3189 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3190 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1040:

/* Line 1464 of yacc.c  */
#line 3192 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3200 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1042:

/* Line 1464 of yacc.c  */
#line 3209 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1043:

/* Line 1464 of yacc.c  */
#line 3210 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3211 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1045:

/* Line 1464 of yacc.c  */
#line 3212 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3216 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3217 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3221 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1049:

/* Line 1464 of yacc.c  */
#line 3222 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1050:

/* Line 1464 of yacc.c  */
#line 3227 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1051:

/* Line 1464 of yacc.c  */
#line 3228 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1052:

/* Line 1464 of yacc.c  */
#line 3229 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1053:

/* Line 1464 of yacc.c  */
#line 3230 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1054:

/* Line 1464 of yacc.c  */
#line 3231 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1055:

/* Line 1464 of yacc.c  */
#line 3233 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3251 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3252 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3256 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3257 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1060:

/* Line 1464 of yacc.c  */
#line 3258 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1061:

/* Line 1464 of yacc.c  */
#line 3259 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1062:

/* Line 1464 of yacc.c  */
#line 3260 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1063:

/* Line 1464 of yacc.c  */
#line 3261 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3263 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1065:

/* Line 1464 of yacc.c  */
#line 3264 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3265 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1067:

/* Line 1464 of yacc.c  */
#line 3266 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1068:

/* Line 1464 of yacc.c  */
#line 3270 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1069:

/* Line 1464 of yacc.c  */
#line 3271 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1070:

/* Line 1464 of yacc.c  */
#line 3272 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1071:

/* Line 1464 of yacc.c  */
#line 3273 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1072:

/* Line 1464 of yacc.c  */
#line 3274 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1073:

/* Line 1464 of yacc.c  */
#line 3276 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1074:

/* Line 1464 of yacc.c  */
#line 3277 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1075:

/* Line 1464 of yacc.c  */
#line 3278 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1077:

/* Line 1464 of yacc.c  */
#line 3283 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1078:

/* Line 1464 of yacc.c  */
#line 3284 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1079:

/* Line 1464 of yacc.c  */
#line 3285 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1080:

/* Line 1464 of yacc.c  */
#line 3286 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1081:

/* Line 1464 of yacc.c  */
#line 3287 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1083:

/* Line 1464 of yacc.c  */
#line 3292 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1086:

/* Line 1464 of yacc.c  */
#line 3299 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1088:

/* Line 1464 of yacc.c  */
#line 3301 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1089:

/* Line 1464 of yacc.c  */
#line 3302 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1090:

/* Line 1464 of yacc.c  */
#line 3303 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1098:

/* Line 1464 of yacc.c  */
#line 3314 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1099:

/* Line 1464 of yacc.c  */
#line 3315 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1100:

/* Line 1464 of yacc.c  */
#line 3316 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1101:

/* Line 1464 of yacc.c  */
#line 3317 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1102:

/* Line 1464 of yacc.c  */
#line 3318 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1103:

/* Line 1464 of yacc.c  */
#line 3319 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1104:

/* Line 1464 of yacc.c  */
#line 3320 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1105:

/* Line 1464 of yacc.c  */
#line 3324 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1106:

/* Line 1464 of yacc.c  */
#line 3325 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1107:

/* Line 1464 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1108:

/* Line 1464 of yacc.c  */
#line 3330 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1109:

/* Line 1464 of yacc.c  */
#line 3331 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1110:

/* Line 1464 of yacc.c  */
#line 3335 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1111:

/* Line 1464 of yacc.c  */
#line 3336 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3337 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3338 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3340 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3341 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3344 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3345 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3346 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3347 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3349 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3350 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3351 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3355 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3356 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3357 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3358 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3359 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3361 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3362 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3363 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3364 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3365 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3369 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3370 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3371 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3372 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3373 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3374 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3375 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3377 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3378 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3379 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(4) - (4)].declaration)); stmt.loc = (yylsp[(4) - (4)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), stmt); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3380 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(MkExpDummy(), stmt); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3381 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(3) - (3)].declaration)); stmt.loc = (yylsp[(3) - (3)]); Compiler_Warning(C89_DECL_WARNING); (yyval.stmt) = MkCaseStmt(null, stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3385 "grammar.y"
    { (yyval.declMode) = declMode = publicAccess; ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.declMode) = declMode = privateAccess; ;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3387 "grammar.y"
    { (yyval.declMode) = declMode = defaultAccess; ;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3391 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3396 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3397 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3398 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1154:

/* Line 1464 of yacc.c  */
#line 3399 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); ;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3403 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3404 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3405 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3407 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3408 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3409 "grammar.y"
    { declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3413 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3417 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3418 "grammar.y"
    {;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3420 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3421 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3422 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3426 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3427 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3428 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3429 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3433 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3434 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3438 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3439 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3440 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3444 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3445 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3446 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3447 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3448 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3449 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3450 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3454 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3455 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1185:

/* Line 1464 of yacc.c  */
#line 3456 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3457 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3461 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3462 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3463 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3464 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3468 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1192:

/* Line 1464 of yacc.c  */
#line 3472 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1193:

/* Line 1464 of yacc.c  */
#line 3477 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1194:

/* Line 1464 of yacc.c  */
#line 3479 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3482 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1196:

/* Line 1464 of yacc.c  */
#line 3487 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1197:

/* Line 1464 of yacc.c  */
#line 3488 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3489 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1199:

/* Line 1464 of yacc.c  */
#line 3493 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3494 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3495 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3496 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3497 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3498 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3502 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3507 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3508 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3509 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3511 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3512 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3514 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3515 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3516 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3517 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1216:

/* Line 1464 of yacc.c  */
#line 3518 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3520 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1218:

/* Line 1464 of yacc.c  */
#line 3521 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3525 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3526 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1221:

/* Line 1464 of yacc.c  */
#line 3527 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3528 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3532 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3533 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3534 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3535 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3537 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3538 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3539 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3540 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3541 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3542 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3543 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3546 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3550 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3555 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3556 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1239:

/* Line 1464 of yacc.c  */
#line 3560 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1240:

/* Line 1464 of yacc.c  */
#line 3561 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3562 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3563 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3564 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3565 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1245:

/* Line 1464 of yacc.c  */
#line 3566 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1246:

/* Line 1464 of yacc.c  */
#line 3567 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3571 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3572 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3573 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3574 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3580 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3582 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3583 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3585 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3587 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3588 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3591 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3592 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3593 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3594 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3595 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3596 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3600 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3602 "grammar.y"
    {
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3613 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3615 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1267:

/* Line 1464 of yacc.c  */
#line 3618 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1268:

/* Line 1464 of yacc.c  */
#line 3621 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1269:

/* Line 1464 of yacc.c  */
#line 3622 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1270:

/* Line 1464 of yacc.c  */
#line 3623 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1271:

/* Line 1464 of yacc.c  */
#line 3625 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1272:

/* Line 1464 of yacc.c  */
#line 3634 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1273:

/* Line 1464 of yacc.c  */
#line 3636 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1274:

/* Line 1464 of yacc.c  */
#line 3638 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1275:

/* Line 1464 of yacc.c  */
#line 3639 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1276:

/* Line 1464 of yacc.c  */
#line 3640 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); declMode = defaultDeclMode; ;}
    break;

  case 1277:

/* Line 1464 of yacc.c  */
#line 3641 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); declMode = defaultDeclMode; ;}
    break;

  case 1278:

/* Line 1464 of yacc.c  */
#line 3643 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();
   ;}
    break;

  case 1279:

/* Line 1464 of yacc.c  */
#line 3652 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1280:

/* Line 1464 of yacc.c  */
#line 3653 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1281:

/* Line 1464 of yacc.c  */
#line 3654 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1282:

/* Line 1464 of yacc.c  */
#line 3655 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1283:

/* Line 1464 of yacc.c  */
#line 3656 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1284:

/* Line 1464 of yacc.c  */
#line 3657 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1285:

/* Line 1464 of yacc.c  */
#line 3661 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1286:

/* Line 1464 of yacc.c  */
#line 3663 "grammar.y"
    {
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      declMode = defaultDeclMode;
   ;}
    break;

  case 1287:

/* Line 1464 of yacc.c  */
#line 3670 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1288:

/* Line 1464 of yacc.c  */
#line 3672 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1289:

/* Line 1464 of yacc.c  */
#line 3673 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1290:

/* Line 1464 of yacc.c  */
#line 3676 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1291:

/* Line 1464 of yacc.c  */
#line 3677 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1292:

/* Line 1464 of yacc.c  */
#line 3681 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1293:

/* Line 1464 of yacc.c  */
#line 3682 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1294:

/* Line 1464 of yacc.c  */
#line 3683 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1297:

/* Line 1464 of yacc.c  */
#line 3689 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1298:

/* Line 1464 of yacc.c  */
#line 3690 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1299:

/* Line 1464 of yacc.c  */
#line 3692 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1300:

/* Line 1464 of yacc.c  */
#line 3694 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1303:

/* Line 1464 of yacc.c  */
#line 3700 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1304:

/* Line 1464 of yacc.c  */
#line 3704 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1305:

/* Line 1464 of yacc.c  */
#line 3705 "grammar.y"
    { Symbol symbol = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1306:

/* Line 1464 of yacc.c  */
#line 3706 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1307:

/* Line 1464 of yacc.c  */
#line 3710 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1308:

/* Line 1464 of yacc.c  */
#line 3714 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1309:

/* Line 1464 of yacc.c  */
#line 3715 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1310:

/* Line 1464 of yacc.c  */
#line 3716 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1311:

/* Line 1464 of yacc.c  */
#line 3720 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1312:

/* Line 1464 of yacc.c  */
#line 3721 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1313:

/* Line 1464 of yacc.c  */
#line 3725 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1314:

/* Line 1464 of yacc.c  */
#line 3726 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1315:

/* Line 1464 of yacc.c  */
#line 3730 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1316:

/* Line 1464 of yacc.c  */
#line 3731 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1317:

/* Line 1464 of yacc.c  */
#line 3732 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1318:

/* Line 1464 of yacc.c  */
#line 3733 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1319:

/* Line 1464 of yacc.c  */
#line 3737 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1320:

/* Line 1464 of yacc.c  */
#line 3741 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1321:

/* Line 1464 of yacc.c  */
#line 3745 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1322:

/* Line 1464 of yacc.c  */
#line 3749 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 22193 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3752 "grammar.y"


