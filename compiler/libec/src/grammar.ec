/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING   "eC expects all declarations to precede statements in the block (C89 style)\n"

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 107 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     LONG = 294,
     SIGNED = 295,
     UNSIGNED = 296,
     FLOAT = 297,
     DOUBLE = 298,
     CONST = 299,
     VOLATILE = 300,
     VOID = 301,
     VALIST = 302,
     STRUCT = 303,
     UNION = 304,
     ENUM = 305,
     ELLIPSIS = 306,
     CASE = 307,
     DEFAULT = 308,
     IF = 309,
     SWITCH = 310,
     WHILE = 311,
     DO = 312,
     FOR = 313,
     GOTO = 314,
     CONTINUE = 315,
     BREAK = 316,
     RETURN = 317,
     IFX = 318,
     ELSE = 319,
     CLASS = 320,
     THISCLASS = 321,
     CLASS_NAME = 322,
     PROPERTY = 323,
     SETPROP = 324,
     GETPROP = 325,
     NEWOP = 326,
     RENEW = 327,
     DELETE = 328,
     EXT_DECL = 329,
     EXT_STORAGE = 330,
     IMPORT = 331,
     DEFINE = 332,
     VIRTUAL = 333,
     ATTRIB = 334,
     PUBLIC = 335,
     PRIVATE = 336,
     TYPED_OBJECT = 337,
     ANY_OBJECT = 338,
     _INCREF = 339,
     EXTENSION = 340,
     ASM = 341,
     TYPEOF = 342,
     WATCH = 343,
     STOPWATCHING = 344,
     FIREWATCHERS = 345,
     WATCHABLE = 346,
     CLASS_DESIGNER = 347,
     CLASS_NO_EXPANSION = 348,
     CLASS_FIXED = 349,
     ISPROPSET = 350,
     CLASS_DEFAULT_PROPERTY = 351,
     PROPERTY_CATEGORY = 352,
     CLASS_DATA = 353,
     CLASS_PROPERTY = 354,
     SUBCLASS = 355,
     NAMESPACE = 356,
     NEW0OP = 357,
     RENEW0 = 358,
     VAARG = 359,
     DBTABLE = 360,
     DBFIELD = 361,
     DBINDEX = 362,
     DATABASE_OPEN = 363,
     ALIGNOF = 364,
     ATTRIB_DEP = 365,
     __ATTRIB = 366
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 37 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;
   
   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 299 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 324 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  283
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   38382

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  137
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  260
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1310
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2185

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   366

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   131,     2,     2,   125,   133,   128,     2,
     115,   116,   112,   129,   120,   130,   123,   132,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   124,   118,
     113,   119,   114,   136,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   126,     2,   127,   134,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   122,   135,   121,   117,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    84,    86,
      89,    91,    94,    97,   100,   103,   106,   109,   111,   113,
     117,   119,   123,   127,   129,   131,   135,   139,   141,   145,
     149,   153,   157,   159,   162,   165,   167,   169,   172,   175,
     178,   181,   183,   186,   189,   191,   193,   196,   199,   201,
     204,   207,   210,   213,   215,   218,   221,   225,   230,   236,
     241,   245,   250,   253,   257,   262,   268,   273,   277,   282,
     288,   294,   299,   302,   306,   310,   314,   318,   321,   326,
     330,   334,   337,   342,   346,   349,   353,   356,   360,   363,
     365,   368,   372,   376,   380,   383,   385,   389,   393,   395,
     399,   403,   406,   411,   417,   421,   426,   430,   432,   436,
     440,   444,   447,   451,   454,   459,   465,   469,   474,   478,
     480,   484,   488,   491,   493,   496,   499,   502,   504,   507,
     513,   521,   531,   538,   547,   552,   559,   561,   564,   568,
     573,   576,   579,   581,   583,   586,   589,   591,   593,   595,
     597,   605,   607,   610,   615,   617,   619,   622,   626,   629,
     632,   635,   639,   641,   644,   647,   650,   652,   654,   656,
     659,   662,   665,   669,   673,   675,   677,   680,   683,   685,
     688,   691,   694,   697,   699,   702,   704,   707,   710,   715,
     720,   727,   730,   735,   740,   747,   749,   751,   755,   757,
     762,   768,   770,   772,   774,   776,   780,   782,   784,   786,
     790,   794,   798,   800,   804,   806,   809,   812,   816,   820,
     826,   832,   839,   846,   849,   852,   856,   860,   864,   868,
     872,   876,   880,   884,   888,   892,   896,   898,   900,   904,
     906,   909,   914,   916,   918,   923,   928,   934,   943,   945,
     947,   950,   957,   964,   970,   976,   983,   990,   996,  1002,
    1010,  1018,  1025,  1032,  1040,  1048,  1055,  1062,  1067,  1073,
    1078,  1085,  1090,  1092,  1094,  1096,  1098,  1102,  1104,  1107,
    1110,  1113,  1115,  1120,  1125,  1129,  1134,  1139,  1143,  1147,
    1150,  1153,  1158,  1163,  1167,  1172,  1176,  1180,  1183,  1186,
    1188,  1193,  1198,  1202,  1207,  1212,  1216,  1220,  1223,  1226,
    1231,  1236,  1240,  1245,  1249,  1253,  1256,  1259,  1261,  1263,
    1267,  1271,  1273,  1275,  1279,  1283,  1286,  1289,  1292,  1295,
    1298,  1303,  1306,  1311,  1317,  1323,  1328,  1331,  1336,  1338,
    1340,  1342,  1344,  1346,  1348,  1350,  1352,  1354,  1356,  1358,
    1360,  1362,  1367,  1369,  1373,  1377,  1381,  1385,  1389,  1393,
    1395,  1399,  1403,  1407,  1411,  1413,  1417,  1421,  1425,  1429,
    1432,  1434,  1437,  1441,  1445,  1449,  1453,  1457,  1461,  1465,
    1467,  1471,  1475,  1479,  1483,  1487,  1491,  1495,  1499,  1501,
    1505,  1509,  1513,  1517,  1519,  1523,  1527,  1531,  1535,  1537,
    1541,  1545,  1549,  1553,  1555,  1559,  1563,  1565,  1569,  1573,
    1575,  1581,  1587,  1593,  1599,  1605,  1611,  1617,  1623,  1629,
    1635,  1641,  1647,  1653,  1659,  1665,  1671,  1673,  1677,  1681,
    1685,  1689,  1693,  1697,  1701,  1705,  1707,  1709,  1711,  1713,
    1715,  1717,  1719,  1721,  1723,  1725,  1727,  1729,  1733,  1737,
    1740,  1742,  1746,  1750,  1752,  1754,  1757,  1760,  1764,  1768,
    1772,  1776,  1780,  1784,  1788,  1790,  1793,  1796,  1800,  1804,
    1808,  1812,  1816,  1820,  1824,  1827,  1830,  1833,  1836,  1840,
    1843,  1849,  1856,  1863,  1867,  1870,  1876,  1878,  1880,  1882,
    1884,  1886,  1891,  1893,  1897,  1901,  1905,  1909,  1913,  1917,
    1919,  1923,  1927,  1931,  1935,  1937,  1941,  1945,  1949,  1953,
    1955,  1958,  1962,  1966,  1970,  1974,  1978,  1982,  1986,  1988,
    1992,  1996,  2000,  2004,  2008,  2012,  2016,  2020,  2022,  2026,
    2030,  2034,  2038,  2040,  2044,  2048,  2052,  2056,  2058,  2062,
    2066,  2070,  2074,  2076,  2080,  2084,  2086,  2090,  2094,  2096,
    2102,  2108,  2114,  2120,  2125,  2130,  2135,  2140,  2146,  2152,
    2158,  2164,  2169,  2174,  2179,  2184,  2190,  2196,  2202,  2208,
    2214,  2220,  2226,  2232,  2236,  2240,  2243,  2246,  2248,  2252,
    2256,  2260,  2264,  2266,  2269,  2273,  2277,  2280,  2283,  2286,
    2288,  2291,  2295,  2299,  2301,  2303,  2305,  2307,  2309,  2311,
    2313,  2315,  2317,  2319,  2321,  2323,  2325,  2329,  2333,  2335,
    2339,  2342,  2344,  2347,  2350,  2353,  2358,  2363,  2367,  2371,
    2376,  2382,  2387,  2394,  2401,  2406,  2412,  2417,  2424,  2431,
    2434,  2437,  2440,  2446,  2450,  2456,  2463,  2469,  2477,  2485,
    2494,  2503,  2511,  2519,  2523,  2527,  2531,  2536,  2540,  2546,
    2552,  2554,  2556,  2558,  2560,  2562,  2564,  2566,  2568,  2570,
    2573,  2575,  2577,  2579,  2581,  2583,  2585,  2587,  2589,  2591,
    2593,  2595,  2597,  2599,  2601,  2603,  2605,  2610,  2615,  2620,
    2622,  2624,  2626,  2628,  2630,  2632,  2634,  2636,  2638,  2640,
    2642,  2644,  2646,  2648,  2650,  2652,  2654,  2656,  2658,  2663,
    2668,  2673,  2675,  2677,  2680,  2683,  2687,  2693,  2696,  2700,
    2706,  2712,  2718,  2720,  2724,  2727,  2730,  2734,  2738,  2741,
    2745,  2749,  2754,  2758,  2762,  2766,  2770,  2774,  2778,  2783,
    2788,  2793,  2795,  2797,  2802,  2806,  2809,  2813,  2817,  2821,
    2825,  2829,  2833,  2837,  2841,  2845,  2849,  2853,  2857,  2859,
    2861,  2863,  2866,  2868,  2871,  2873,  2876,  2878,  2881,  2883,
    2886,  2888,  2891,  2893,  2896,  2898,  2901,  2903,  2906,  2908,
    2911,  2913,  2916,  2918,  2921,  2923,  2926,  2928,  2931,  2933,
    2936,  2938,  2941,  2943,  2946,  2948,  2951,  2953,  2956,  2958,
    2961,  2963,  2966,  2968,  2971,  2973,  2976,  2978,  2981,  2983,
    2986,  2988,  2991,  2993,  2995,  2997,  3000,  3002,  3005,  3007,
    3010,  3012,  3015,  3020,  3026,  3028,  3030,  3032,  3035,  3037,
    3040,  3042,  3045,  3047,  3050,  3055,  3061,  3063,  3066,  3068,
    3071,  3073,  3076,  3078,  3081,  3083,  3086,  3088,  3091,  3096,
    3102,  3104,  3107,  3109,  3112,  3114,  3117,  3119,  3122,  3124,
    3127,  3129,  3132,  3137,  3143,  3147,  3151,  3153,  3157,  3161,
    3165,  3169,  3171,  3173,  3175,  3180,  3185,  3190,  3194,  3199,
    3204,  3209,  3213,  3215,  3219,  3224,  3228,  3233,  3238,  3243,
    3248,  3252,  3255,  3259,  3263,  3267,  3271,  3274,  3277,  3280,
    3284,  3289,  3291,  3293,  3296,  3300,  3304,  3308,  3312,  3315,
    3318,  3321,  3325,  3330,  3332,  3334,  3336,  3338,  3340,  3345,
    3347,  3349,  3351,  3353,  3355,  3357,  3359,  3361,  3363,  3368,
    3370,  3373,  3377,  3384,  3390,  3394,  3399,  3402,  3406,  3410,
    3414,  3418,  3423,  3428,  3433,  3436,  3440,  3444,  3448,  3453,
    3458,  3462,  3467,  3470,  3474,  3478,  3482,  3487,  3492,  3494,
    3497,  3500,  3504,  3506,  3508,  3511,  3514,  3518,  3520,  3522,
    3525,  3528,  3532,  3534,  3537,  3541,  3544,  3547,  3549,  3552,
    3556,  3559,  3561,  3564,  3568,  3572,  3574,  3577,  3581,  3585,
    3587,  3590,  3594,  3598,  3600,  3603,  3607,  3611,  3613,  3616,
    3620,  3624,  3626,  3630,  3635,  3637,  3642,  3645,  3651,  3655,
    3657,  3659,  3661,  3663,  3665,  3667,  3671,  3675,  3678,  3681,
    3683,  3685,  3689,  3692,  3696,  3698,  3702,  3706,  3710,  3714,
    3718,  3720,  3723,  3727,  3731,  3733,  3736,  3738,  3741,  3744,
    3747,  3750,  3754,  3756,  3758,  3762,  3766,  3768,  3772,  3777,
    3781,  3786,  3790,  3794,  3799,  3803,  3808,  3810,  3814,  3818,
    3823,  3827,  3831,  3835,  3840,  3842,  3846,  3850,  3854,  3858,
    3862,  3864,  3868,  3871,  3873,  3875,  3877,  3879,  3881,  3884,
    3886,  3888,  3890,  3892,  3895,  3898,  3901,  3903,  3905,  3907,
    3909,  3911,  3914,  3916,  3918,  3923,  3925,  3929,  3930,  3937,
    3946,  3957,  3970,  3979,  3990,  4001,  4007,  4015,  4025,  4037,
    4045,  4055,  4065,  4069,  4074,  4079,  4083,  4087,  4091,  4096,
    4101,  4105,  4108,  4112,  4115,  4117,  4119,  4121,  4123,  4125,
    4128,  4132,  4135,  4138,  4141,  4145,  4149,  4152,  4158,  4165,
    4168,  4171,  4174,  4177,  4180,  4183,  4185,  4188,  4191,  4195,
    4197,  4200,  4202,  4205,  4208,  4210,  4213,  4216,  4219,  4222,
    4225,  4228,  4230,  4232,  4235,  4238,  4240,  4242,  4245,  4248,
    4250,  4253,  4256,  4258,  4261,  4263,  4266,  4269,  4275,  4281,
    4289,  4297,  4303,  4309,  4313,  4316,  4322,  4327,  4332,  4340,
    4347,  4354,  4360,  4368,  4375,  4380,  4388,  4398,  4402,  4407,
    4412,  4418,  4424,  4431,  4439,  4446,  4453,  4459,  4465,  4470,
    4474,  4477,  4479,  4482,  4487,  4491,  4497,  4502,  4506,  4509,
    4512,  4515,  4519,  4523,  4527,  4531,  4534,  4537,  4539,  4541,
    4546,  4550,  4555,  4559,  4563,  4566,  4571,  4575,  4580,  4584,
    4588,  4591,  4593,  4596,  4598,  4600,  4603,  4605,  4608,  4612,
    4616,  4618,  4621,  4624,  4627,  4631,  4636,  4641,  4644,  4647,
    4650,  4653,  4655,  4658,  4660,  4663,  4665,  4668,  4671,  4673,
    4676,  4678,  4681,  4684,  4687,  4690,  4692,  4695,  4698,  4702,
    4704,  4706,  4707,  4714,  4721,  4727,  4732,  4734,  4737,  4740,
    4742,  4746,  4750,  4755,  4757,  4759,  4762,  4765,  4772,  4779,
    4786
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     386,     0,    -1,   209,   112,    -1,   209,   113,    -1,   142,
      -1,   209,   209,    -1,    28,    -1,    28,    -1,   140,    -1,
     140,   113,   203,   114,    -1,   140,   113,   203,    11,    -1,
     295,   330,    -1,   328,    -1,   295,   115,   116,    -1,   117,
     295,   115,   116,    -1,    78,   295,   330,    -1,    78,   328,
      -1,   295,   331,    -1,   329,    -1,    78,   295,   331,    -1,
      78,   329,    -1,   143,   370,    -1,   146,   370,    -1,   146,
     118,    -1,   144,   370,    -1,   145,   370,    -1,   143,   118,
      -1,   143,   371,    -1,   147,    -1,   146,   371,    -1,   148,
      -1,   148,   118,    -1,   294,   330,    -1,   294,   332,    -1,
     294,   331,    -1,   151,   370,    -1,   151,   371,    -1,   152,
      -1,   151,    -1,   216,   119,   335,    -1,   335,    -1,   216,
     119,   336,    -1,   216,   119,     1,    -1,   336,    -1,   155,
      -1,   157,   120,   155,    -1,   158,   120,   155,    -1,   156,
      -1,   157,   120,   156,    -1,   158,   120,   156,    -1,   157,
     120,     1,    -1,   158,   120,     1,    -1,   120,    -1,   157,
     118,    -1,   158,   118,    -1,   159,    -1,   153,    -1,   162,
     159,    -1,   162,   153,    -1,   160,   159,    -1,   160,   153,
      -1,   118,    -1,   162,   118,    -1,   160,   118,    -1,   160,
      -1,   157,    -1,   160,   157,    -1,   162,   157,    -1,   154,
      -1,   161,   154,    -1,   162,   154,    -1,   160,   154,    -1,
     160,   158,    -1,   158,    -1,   157,     1,    -1,   164,   121,
      -1,   164,     1,   121,    -1,   294,   209,   122,   162,    -1,
     294,   209,   122,   161,     1,    -1,   294,   209,   122,   161,
      -1,   294,   209,   122,    -1,   294,   209,   122,     1,    -1,
     166,   121,    -1,   166,     1,   121,    -1,   295,   209,   122,
     162,    -1,   295,   209,   122,   161,     1,    -1,   295,   209,
     122,   161,    -1,   295,   209,   122,    -1,   295,   209,   122,
       1,    -1,   296,   209,   122,   161,   121,    -1,   296,   209,
     122,   162,   121,    -1,   296,   209,   122,   121,    -1,   169,
     121,    -1,   169,     1,   121,    -1,   142,   122,   161,    -1,
     209,   122,   161,    -1,   142,   122,   162,    -1,   142,   122,
      -1,   142,   122,   161,     1,    -1,   142,   122,     1,    -1,
     209,   122,   162,    -1,   209,   122,    -1,   209,   122,   161,
       1,    -1,   209,   122,     1,    -1,   171,   121,    -1,   171,
       1,   121,    -1,   122,   162,    -1,   122,   161,     1,    -1,
     122,     1,    -1,   122,    -1,   122,   161,    -1,   216,   119,
     335,    -1,   216,   119,   336,    -1,   216,   119,     1,    -1,
     216,     1,    -1,   172,    -1,   174,   120,   172,    -1,   175,
     120,   172,    -1,   173,    -1,   174,   120,   173,    -1,   175,
     120,   173,    -1,   174,     1,    -1,    68,   300,   209,   122,
      -1,    68,   300,   324,   209,   122,    -1,    68,   300,   122,
      -1,    68,   300,   324,   122,    -1,    68,     1,   122,    -1,
     176,    -1,   177,    69,   370,    -1,   177,    70,   370,    -1,
     177,    95,   370,    -1,   177,    91,    -1,   177,    97,   211,
      -1,   177,   121,    -1,    99,   300,   209,   122,    -1,    99,
     300,   324,   209,   122,    -1,    99,   300,   122,    -1,    99,
     300,   324,   122,    -1,    99,     1,   122,    -1,   179,    -1,
     180,    69,   370,    -1,   180,    70,   370,    -1,   180,   121,
      -1,   209,    -1,   182,   209,    -1,   182,   370,    -1,    73,
     370,    -1,   183,    -1,   184,   183,    -1,    88,   115,   182,
     116,   370,    -1,    88,   115,   237,   116,   122,   184,   121,
      -1,   237,   123,    88,   115,   237,   116,   122,   184,   121,
      -1,    89,   115,   237,   120,   182,   116,    -1,   237,   123,
      89,   115,   237,   120,   182,   116,    -1,    89,   115,   237,
     116,    -1,   237,   123,    89,   115,   237,   116,    -1,    90,
      -1,    90,   182,    -1,   216,   123,    90,    -1,   237,   123,
      90,   182,    -1,   190,   118,    -1,   174,   118,    -1,   149,
      -1,   178,    -1,   358,   149,    -1,   358,   178,    -1,   181,
      -1,    91,    -1,    93,    -1,    94,    -1,    99,   115,   209,
     116,   119,   335,   118,    -1,   118,    -1,   358,   124,    -1,
     358,   115,   209,   116,    -1,   150,    -1,   295,    -1,   295,
     282,    -1,   358,   295,   282,    -1,   358,   295,    -1,   358,
     168,    -1,   358,   165,    -1,    98,   295,   282,    -1,   185,
      -1,    92,   209,    -1,    92,   142,    -1,    96,   209,    -1,
     168,    -1,   165,    -1,   174,    -1,   166,     1,    -1,   169,
       1,    -1,   358,   150,    -1,   358,   166,     1,    -1,   358,
     169,     1,    -1,   175,    -1,   189,    -1,   191,   189,    -1,
     192,   189,    -1,   190,    -1,   191,     1,    -1,   192,     1,
      -1,   191,   190,    -1,   192,   190,    -1,   295,    -1,   295,
     324,    -1,   295,    -1,   295,   324,    -1,    65,   209,    -1,
      65,   209,   119,   194,    -1,    65,   209,   124,   193,    -1,
      65,   209,   124,   193,   119,   194,    -1,    65,   141,    -1,
      65,   141,   119,   194,    -1,    65,   141,   124,   193,    -1,
      65,   141,   124,   193,   119,   194,    -1,   209,    -1,   209,
      -1,   209,   119,   196,    -1,   226,    -1,   295,   209,   119,
     198,    -1,   295,   324,   209,   119,   198,    -1,   195,    -1,
     197,    -1,   199,    -1,   200,    -1,   201,   120,   200,    -1,
     198,    -1,   196,    -1,   194,    -1,   209,   119,   198,    -1,
     209,   119,   196,    -1,   209,   119,   194,    -1,   202,    -1,
     203,   120,   202,    -1,    65,    -1,   204,   209,    -1,   204,
     140,    -1,   209,   204,   209,    -1,   209,   204,   140,    -1,
     204,   209,   113,   201,   114,    -1,   204,   140,   113,   201,
     114,    -1,   209,   204,   209,   113,   201,   114,    -1,   209,
     204,   140,   113,   201,   114,    -1,   208,   121,    -1,   207,
     118,    -1,   205,   122,   121,    -1,   207,   122,   121,    -1,
     204,   209,   118,    -1,   204,   139,   118,    -1,   205,   124,
     299,    -1,   205,   122,   192,    -1,   207,   122,   192,    -1,
     205,   122,   191,    -1,   207,   122,   191,    -1,   205,   122,
       1,    -1,   207,   122,     1,    -1,     3,    -1,   212,    -1,
     115,   239,   116,    -1,   381,    -1,   125,   381,    -1,   125,
     381,   123,   381,    -1,   209,    -1,   168,    -1,    85,   115,
     370,   116,    -1,    85,   115,   239,   116,    -1,    85,   115,
     342,   116,   333,    -1,    85,   115,   342,   116,   115,   342,
     116,   333,    -1,     4,    -1,   211,    -1,   115,   116,    -1,
      71,   302,   325,   126,   261,   127,    -1,    71,   302,   325,
     126,   262,   127,    -1,    71,   302,   126,   261,   127,    -1,
      71,   302,   126,   262,   127,    -1,   102,   302,   325,   126,
     261,   127,    -1,   102,   302,   325,   126,   262,   127,    -1,
     102,   302,   126,   261,   127,    -1,   102,   302,   126,   262,
     127,    -1,    72,   261,   301,   325,   126,   261,   127,    -1,
      72,   261,   301,   325,   126,   262,   127,    -1,    72,   261,
     301,   126,   261,   127,    -1,    72,   261,   301,   126,   262,
     127,    -1,   103,   261,   301,   325,   126,   261,   127,    -1,
     103,   261,   301,   325,   126,   262,   127,    -1,   103,   261,
     301,   126,   261,   127,    -1,   103,   261,   301,   126,   262,
     127,    -1,    65,   115,   294,   116,    -1,    65,   115,   294,
     324,   116,    -1,    65,   115,   209,   116,    -1,   104,   115,
     237,   120,   342,   116,    -1,    98,   115,   209,   116,    -1,
     393,    -1,   394,    -1,   395,    -1,   396,    -1,   126,   218,
     127,    -1,   170,    -1,   171,     1,    -1,   115,   239,    -1,
     115,   259,    -1,   210,    -1,   216,   126,   239,   127,    -1,
     216,   126,   259,   127,    -1,   216,   115,   116,    -1,   216,
     115,   218,   116,    -1,   216,   115,   219,   116,    -1,   216,
     123,   209,    -1,   216,     7,   209,    -1,   216,     8,    -1,
     216,     9,    -1,   241,   126,   239,   127,    -1,   241,   126,
     259,   127,    -1,   241,   115,   116,    -1,   241,   115,   218,
     116,    -1,   241,   123,   209,    -1,   241,     7,   209,    -1,
     241,     8,    -1,   241,     9,    -1,   212,    -1,   217,   126,
     239,   127,    -1,   217,   126,   259,   127,    -1,   217,   115,
     116,    -1,   217,   115,   218,   116,    -1,   217,   115,   219,
     116,    -1,   217,   123,   209,    -1,   217,     7,   209,    -1,
     217,     8,    -1,   217,     9,    -1,   242,   126,   239,   127,
      -1,   242,   126,   259,   127,    -1,   242,   115,   116,    -1,
     242,   115,   218,   116,    -1,   242,   123,   209,    -1,   242,
       7,   209,    -1,   242,     8,    -1,   242,     9,    -1,   237,
      -1,   213,    -1,   218,   120,   237,    -1,   218,   120,   213,
      -1,   258,    -1,   214,    -1,   218,   120,   258,    -1,   218,
     120,   214,    -1,   218,   120,    -1,     8,   221,    -1,     9,
     221,    -1,   223,   224,    -1,   223,   213,    -1,     6,   115,
     221,   116,    -1,     6,   222,    -1,     6,   115,   343,   116,
      -1,     6,   115,    65,   139,   116,    -1,     6,   115,    65,
     138,   116,    -1,   109,   115,   221,   116,    -1,   109,   222,
      -1,   109,   115,   343,   116,    -1,   220,    -1,   216,    -1,
     220,    -1,   217,    -1,   128,    -1,   112,    -1,   129,    -1,
     130,    -1,   117,    -1,   131,    -1,    73,    -1,    84,    -1,
     221,    -1,   115,   342,   116,   224,    -1,   224,    -1,   225,
     112,   224,    -1,   225,   132,   224,    -1,   225,   133,   224,
      -1,   247,   112,   224,    -1,   247,   132,   224,    -1,   247,
     133,   224,    -1,   225,    -1,   226,   129,   225,    -1,   226,
     130,   225,    -1,   248,   129,   225,    -1,   248,   130,   225,
      -1,   226,    -1,   227,    10,   226,    -1,   227,    11,   226,
      -1,   249,    10,   226,    -1,   249,    11,   226,    -1,   229,
     113,    -1,   227,    -1,   228,   227,    -1,   229,   114,   227,
      -1,   229,    12,   227,    -1,   229,    13,   227,    -1,   250,
     113,   227,    -1,   250,   114,   227,    -1,   250,    12,   227,
      -1,   250,    13,   227,    -1,   229,    -1,   230,    14,   229,
      -1,   230,    15,   229,    -1,   251,    14,   229,    -1,   251,
      15,   229,    -1,   230,    14,   213,    -1,   230,    15,   213,
      -1,   251,    14,   213,    -1,   251,    15,   213,    -1,   230,
      -1,   231,   128,   230,    -1,   252,   128,   230,    -1,   231,
     128,   213,    -1,   252,   128,   213,    -1,   231,    -1,   232,
     134,   231,    -1,   253,   134,   231,    -1,   232,   134,   213,
      -1,   253,   134,   213,    -1,   232,    -1,   233,   135,   232,
      -1,   254,   135,   232,    -1,   233,   135,   213,    -1,   254,
     135,   213,    -1,   233,    -1,   234,    16,   233,    -1,   255,
      16,   233,    -1,   234,    -1,   235,    17,   234,    -1,   256,
      17,   234,    -1,   235,    -1,   235,   136,   239,   124,   236,
      -1,   235,   136,   259,   124,   236,    -1,   256,   136,   239,
     124,   236,    -1,   256,   136,   259,   124,   236,    -1,   235,
     136,   240,   124,   236,    -1,   235,   136,   260,   124,   236,
      -1,   256,   136,   240,   124,   236,    -1,   256,   136,   260,
     124,   236,    -1,   235,   136,   239,   124,   213,    -1,   235,
     136,   259,   124,   213,    -1,   256,   136,   239,   124,   213,
      -1,   256,   136,   259,   124,   213,    -1,   235,   136,   240,
     124,   213,    -1,   235,   136,   260,   124,   213,    -1,   256,
     136,   240,   124,   213,    -1,   256,   136,   260,   124,   213,
      -1,   236,    -1,   221,   238,   237,    -1,   244,   238,   237,
      -1,   236,   238,   237,    -1,   257,   238,   237,    -1,   221,
     238,   213,    -1,   244,   238,   213,    -1,   236,   238,   213,
      -1,   257,   238,   213,    -1,   119,    -1,    18,    -1,    19,
      -1,    20,    -1,    21,    -1,    22,    -1,    23,    -1,    24,
      -1,    25,    -1,    26,    -1,    27,    -1,   237,    -1,   239,
     120,   237,    -1,   259,   120,   237,    -1,   259,   116,    -1,
     213,    -1,   239,   120,   213,    -1,   259,   120,   213,    -1,
     215,    -1,     1,    -1,   216,     1,    -1,   169,     1,    -1,
     216,     7,     1,    -1,   241,     7,     1,    -1,   216,   115,
     218,    -1,   216,   115,   219,    -1,   216,   123,     1,    -1,
     241,   115,   219,    -1,   241,   123,     1,    -1,     1,    -1,
     217,     1,    -1,   169,     1,    -1,   217,     7,     1,    -1,
     242,     7,     1,    -1,   217,   115,   218,    -1,   217,   115,
     219,    -1,   217,   123,     1,    -1,   242,   115,   219,    -1,
     242,   123,     1,    -1,     8,   244,    -1,     9,   244,    -1,
     223,   246,    -1,   223,   214,    -1,     6,   115,   244,    -1,
       6,   245,    -1,     6,   115,   343,   116,     1,    -1,     6,
     115,    65,   139,   116,     1,    -1,     6,   115,    65,   138,
     116,     1,    -1,   109,   115,   244,    -1,   109,   245,    -1,
     109,   115,   343,   116,     1,    -1,   243,    -1,   241,    -1,
     243,    -1,   242,    -1,   244,    -1,   115,   342,   116,   246,
      -1,   246,    -1,   225,   112,   246,    -1,   225,   132,   246,
      -1,   225,   133,   246,    -1,   247,   112,   246,    -1,   247,
     132,   246,    -1,   247,   133,   246,    -1,   247,    -1,   226,
     129,   247,    -1,   226,   130,   247,    -1,   248,   129,   247,
      -1,   248,   130,   247,    -1,   248,    -1,   227,    10,   248,
      -1,   227,    11,   248,    -1,   249,    10,   248,    -1,   249,
      11,   248,    -1,   249,    -1,   228,   249,    -1,   229,   114,
     249,    -1,   229,    12,   249,    -1,   229,    13,   249,    -1,
     250,   113,   249,    -1,   250,   114,   249,    -1,   250,    12,
     249,    -1,   250,    13,   249,    -1,   250,    -1,   230,    14,
     250,    -1,   230,    15,   250,    -1,   251,    14,   250,    -1,
     251,    15,   250,    -1,   230,    14,   214,    -1,   230,    15,
     214,    -1,   251,    14,   214,    -1,   251,    15,   214,    -1,
     251,    -1,   231,   128,   251,    -1,   252,   128,   251,    -1,
     231,   128,   214,    -1,   252,   128,   214,    -1,   252,    -1,
     232,   134,   252,    -1,   253,   134,   252,    -1,   232,   134,
     214,    -1,   253,   134,   214,    -1,   253,    -1,   233,   135,
     253,    -1,   254,   135,   253,    -1,   233,   135,   214,    -1,
     254,   135,   214,    -1,   254,    -1,   234,    16,   254,    -1,
     255,    16,   254,    -1,   255,    -1,   235,    17,   255,    -1,
     256,    17,   255,    -1,   256,    -1,   235,   136,   239,   124,
     256,    -1,   235,   136,   259,   124,   256,    -1,   256,   136,
     239,   124,   256,    -1,   256,   136,   259,   124,   256,    -1,
     235,   136,   239,   124,    -1,   235,   136,   259,   124,    -1,
     256,   136,   239,   124,    -1,   256,   136,   259,   124,    -1,
     235,   136,   240,   124,   256,    -1,   235,   136,   260,   124,
     256,    -1,   256,   136,   240,   124,   256,    -1,   256,   136,
     260,   124,   256,    -1,   235,   136,   240,   124,    -1,   235,
     136,   260,   124,    -1,   256,   136,   240,   124,    -1,   256,
     136,   260,   124,    -1,   235,   136,   239,   124,   214,    -1,
     235,   136,   259,   124,   214,    -1,   256,   136,   239,   124,
     214,    -1,   256,   136,   259,   124,   214,    -1,   235,   136,
     240,   124,   214,    -1,   235,   136,   260,   124,   214,    -1,
     256,   136,   240,   124,   214,    -1,   256,   136,   260,   124,
     214,    -1,   235,   136,   124,    -1,   256,   136,   124,    -1,
     235,   136,    -1,   256,   136,    -1,   257,    -1,   221,   238,
     258,    -1,   244,   238,   258,    -1,   221,   238,   214,    -1,
     244,   238,   214,    -1,   258,    -1,   237,     1,    -1,   239,
     120,   258,    -1,   259,   120,   258,    -1,   239,   239,    -1,
     259,   239,    -1,   239,   259,    -1,   214,    -1,   213,     1,
      -1,   239,   120,   214,    -1,   259,   120,   214,    -1,   236,
      -1,   257,    -1,    29,    -1,    30,    -1,    31,    -1,    32,
      -1,    33,    -1,    29,    -1,    30,    -1,    31,    -1,    32,
      -1,    33,    -1,   209,    -1,   209,   119,   261,    -1,   209,
     119,   262,    -1,   265,    -1,   266,   120,   265,    -1,   266,
     120,    -1,    50,    -1,   267,   209,    -1,   267,   142,    -1,
     270,   121,    -1,   267,   209,   122,   121,    -1,   267,   142,
     122,   121,    -1,   267,   122,   266,    -1,   267,   122,     1,
      -1,   267,   209,   122,   266,    -1,   267,   209,   122,   266,
       1,    -1,   267,   209,   122,     1,    -1,   267,   209,   122,
     266,   118,   191,    -1,   267,   209,   122,   266,   118,   192,
      -1,   267,   142,   122,   266,    -1,   267,   142,   122,   266,
       1,    -1,   267,   142,   122,     1,    -1,   267,   142,   122,
     266,   118,   191,    -1,   267,   142,   122,   266,   118,   192,
      -1,   267,   209,    -1,   267,   142,    -1,   273,   121,    -1,
     271,   124,   299,   122,   121,    -1,   271,   122,   121,    -1,
     271,   124,   299,   122,   266,    -1,   271,   124,   299,   122,
     266,     1,    -1,   271,   124,   299,   122,     1,    -1,   271,
     124,   299,   122,   266,   118,   191,    -1,   271,   124,   299,
     122,   266,   118,   192,    -1,   271,   124,   299,   122,   266,
       1,   118,   191,    -1,   271,   124,   299,   122,   266,     1,
     118,   192,    -1,   271,   124,   299,   122,     1,   118,   191,
      -1,   271,   124,   299,   122,     1,   118,   192,    -1,   267,
     122,   266,    -1,   267,   122,     1,    -1,   271,   122,   266,
      -1,   271,   122,   266,     1,    -1,   271,   122,     1,    -1,
     271,   122,   266,   118,   191,    -1,   271,   122,   266,   118,
     192,    -1,   272,    -1,   289,    -1,   273,    -1,   290,    -1,
     315,    -1,    44,    -1,    45,    -1,   276,    -1,   277,    -1,
     278,   277,    -1,    46,    -1,    34,    -1,    35,    -1,    36,
      -1,    37,    -1,    38,    -1,    47,    -1,    39,    -1,    42,
      -1,    43,    -1,    40,    -1,    41,    -1,    85,    -1,   286,
      -1,   268,    -1,   139,    -1,    87,   115,   237,   116,    -1,
     100,   115,   139,   116,    -1,   100,   115,   209,   116,    -1,
      66,    -1,    82,    -1,    83,    -1,    46,    -1,    34,    -1,
      35,    -1,    36,    -1,    37,    -1,    38,    -1,    47,    -1,
      39,    -1,    42,    -1,    43,    -1,    40,    -1,    41,    -1,
      85,    -1,   286,    -1,   268,    -1,   142,    -1,    87,   115,
     237,   116,    -1,   100,   115,   139,   116,    -1,   100,   115,
     209,   116,    -1,    66,    -1,   332,    -1,   332,   320,    -1,
     124,   261,    -1,   332,   124,   261,    -1,   332,   124,   261,
     124,   261,    -1,   124,   262,    -1,   332,   124,   262,    -1,
     332,   124,   261,   124,   262,    -1,   332,   124,   262,   124,
     262,    -1,   332,   124,   262,   124,   261,    -1,   281,    -1,
     282,   120,   281,    -1,   291,   209,    -1,   291,   140,    -1,
     291,   315,   209,    -1,   291,   315,   140,    -1,   285,   121,
      -1,   283,   122,   121,    -1,   291,   122,   121,    -1,   291,
     315,   122,   121,    -1,   283,   122,   191,    -1,   283,   122,
     192,    -1,   283,   122,     1,    -1,   291,   122,   191,    -1,
     291,   122,   192,    -1,   291,   122,     1,    -1,   291,   315,
     122,   191,    -1,   291,   315,   122,   192,    -1,   291,   315,
     122,     1,    -1,   283,    -1,   283,    -1,   283,   113,   201,
     114,    -1,   287,   124,   299,    -1,   290,   121,    -1,   288,
     122,   121,    -1,   287,   122,   121,    -1,   291,   122,   121,
      -1,   288,   122,   191,    -1,   288,   122,   192,    -1,   288,
     122,     1,    -1,   287,   122,   191,    -1,   287,   122,   192,
      -1,   287,   122,     1,    -1,   291,   122,   191,    -1,   291,
     122,   192,    -1,   291,   122,     1,    -1,    48,    -1,    49,
      -1,   277,    -1,   292,   277,    -1,   279,    -1,   292,   279,
      -1,   269,    -1,   292,   269,    -1,   284,    -1,   292,   284,
      -1,   277,    -1,   293,   277,    -1,   279,    -1,   293,   279,
      -1,   138,    -1,   293,   138,    -1,   269,    -1,   293,   269,
      -1,   284,    -1,   293,   284,    -1,   263,    -1,   294,   263,
      -1,   277,    -1,   294,   277,    -1,   280,    -1,   294,   280,
      -1,   269,    -1,   294,   269,    -1,   284,    -1,   294,   284,
      -1,   263,    -1,   295,   263,    -1,   277,    -1,   295,   277,
      -1,   279,    -1,   295,   279,    -1,   138,    -1,   295,   138,
      -1,   284,    -1,   295,   284,    -1,   269,    -1,   295,   269,
      -1,   264,    -1,   296,   264,    -1,   277,    -1,   296,   277,
      -1,   279,    -1,   296,   279,    -1,   138,    -1,   296,   138,
      -1,   274,    -1,   296,   274,    -1,   275,    -1,   296,   275,
      -1,    81,    -1,    80,    -1,   263,    -1,   298,   263,    -1,
     277,    -1,   298,   277,    -1,   280,    -1,   298,   280,    -1,
     209,    -1,   298,   209,    -1,   209,   113,   203,   114,    -1,
     298,   209,   113,   203,   114,    -1,   298,    -1,   291,    -1,
     263,    -1,   300,   263,    -1,   277,    -1,   300,   277,    -1,
     280,    -1,   300,   280,    -1,   209,    -1,   300,   209,    -1,
     209,   113,   203,   114,    -1,   300,   209,   113,   203,   114,
      -1,   263,    -1,   301,   263,    -1,   277,    -1,   301,   277,
      -1,   280,    -1,   301,   280,    -1,   284,    -1,   301,   284,
      -1,   269,    -1,   301,   269,    -1,   209,    -1,   301,   209,
      -1,   209,   113,   203,   114,    -1,   301,   209,   113,   203,
     114,    -1,   263,    -1,   302,   263,    -1,   277,    -1,   302,
     277,    -1,   280,    -1,   302,   280,    -1,   284,    -1,   302,
     284,    -1,   269,    -1,   302,   269,    -1,   209,    -1,   302,
     209,    -1,   209,   113,   203,   114,    -1,   302,   209,   113,
     203,   114,    -1,   304,   120,     1,    -1,   303,   120,     1,
      -1,   209,    -1,   304,   120,   209,    -1,   303,   120,   209,
      -1,   346,   120,   209,    -1,   347,   120,   209,    -1,   306,
      -1,   140,    -1,    37,    -1,   140,   126,   261,   127,    -1,
     140,   126,   262,   127,    -1,   140,   126,   139,   127,    -1,
     140,   126,   127,    -1,   305,   126,   261,   127,    -1,   305,
     126,   262,   127,    -1,   305,   126,   139,   127,    -1,   305,
     126,   127,    -1,   209,    -1,   115,   326,   116,    -1,   115,
     315,   326,   116,    -1,   115,   327,   116,    -1,   115,   315,
     327,   116,    -1,   306,   126,   261,   127,    -1,   306,   126,
     262,   127,    -1,   306,   126,   139,   127,    -1,   306,   126,
     127,    -1,   306,   115,    -1,   307,   348,   116,    -1,   307,
     349,   116,    -1,   307,   304,   116,    -1,   307,   303,   116,
      -1,   307,   116,    -1,   307,   303,    -1,   307,     1,    -1,
     307,   346,   115,    -1,   307,   295,   209,   115,    -1,   308,
      -1,   306,    -1,   305,   115,    -1,   311,   348,   116,    -1,
     311,   349,   116,    -1,   311,   304,   116,    -1,   311,   303,
     116,    -1,   311,   116,    -1,   311,   303,    -1,   311,     1,
      -1,   311,   346,   115,    -1,   311,   295,   209,   115,    -1,
     312,    -1,   305,    -1,    74,    -1,    75,    -1,   320,    -1,
      86,   115,   381,   116,    -1,    79,    -1,   110,    -1,   111,
      -1,     3,    -1,    28,    -1,    75,    -1,    74,    -1,    44,
      -1,   317,    -1,   317,   115,   239,   116,    -1,   318,    -1,
     319,   318,    -1,   319,   120,   318,    -1,   316,   115,   115,
     319,   116,   116,    -1,   316,   115,   115,   116,   116,    -1,
     115,   324,   116,    -1,   115,   315,   324,   116,    -1,   126,
     127,    -1,   126,   261,   127,    -1,   126,   262,   127,    -1,
     126,   139,   127,    -1,   321,   126,   127,    -1,   321,   126,
     261,   127,    -1,   321,   126,   139,   127,    -1,   321,   126,
     262,   127,    -1,   115,   116,    -1,   115,   348,   116,    -1,
     115,   349,   116,    -1,   321,   115,   116,    -1,   321,   115,
     348,   116,    -1,   321,   115,   349,   116,    -1,   115,   325,
     116,    -1,   115,   315,   325,   116,    -1,   115,   116,    -1,
     115,   348,   116,    -1,   115,   349,   116,    -1,   322,   115,
     116,    -1,   322,   115,   348,   116,    -1,   322,   115,   349,
     116,    -1,   112,    -1,   112,   278,    -1,   112,   323,    -1,
     112,   278,   323,    -1,   323,    -1,   321,    -1,   323,   321,
      -1,   315,   323,    -1,   315,   323,   321,    -1,   323,    -1,
     322,    -1,   323,   322,    -1,   315,   323,    -1,   315,   323,
     322,    -1,   310,    -1,   323,   310,    -1,   315,   323,   310,
      -1,   326,   315,    -1,   332,   315,    -1,   314,    -1,   323,
     314,    -1,   315,   323,   314,    -1,   327,   315,    -1,   308,
      -1,   323,   308,    -1,   315,   323,   308,    -1,   323,   315,
     308,    -1,   309,    -1,   323,   309,    -1,   315,   323,   309,
      -1,   323,   315,   309,    -1,   312,    -1,   323,   312,    -1,
     315,   323,   312,    -1,   323,   315,   312,    -1,   313,    -1,
     323,   313,    -1,   315,   323,   313,    -1,   323,   315,   313,
      -1,   305,    -1,   323,   305,    -1,   315,   323,   305,    -1,
     323,   315,   305,    -1,   237,    -1,   122,   337,   121,    -1,
     122,   337,   120,   121,    -1,   258,    -1,   122,   337,   121,
       1,    -1,   122,   337,    -1,   122,   337,   120,   121,     1,
      -1,   122,   337,   120,    -1,   236,    -1,   213,    -1,   257,
      -1,   214,    -1,   333,    -1,   334,    -1,   337,   120,   333,
      -1,   337,   120,   334,    -1,   337,   333,    -1,   337,   334,
      -1,   326,    -1,   327,    -1,   326,   119,   333,    -1,   326,
       1,    -1,   326,   119,   334,    -1,   338,    -1,   340,   120,
     338,    -1,    37,   120,   338,    -1,    38,   120,   338,    -1,
     140,   120,   338,    -1,   341,   120,   338,    -1,   339,    -1,
     338,     1,    -1,   340,   120,   339,    -1,   341,   120,   339,
      -1,   292,    -1,   292,   324,    -1,   293,    -1,   293,   324,
      -1,   295,   327,    -1,   295,   324,    -1,   295,   128,    -1,
     295,   128,   327,    -1,   295,    -1,    65,    -1,   295,   327,
       1,    -1,   295,   324,     1,    -1,   344,    -1,   346,   120,
     344,    -1,   346,     1,   120,   344,    -1,   347,   120,   344,
      -1,   347,     1,   120,   344,    -1,     1,   120,   344,    -1,
     304,   120,   344,    -1,   304,     1,   120,   344,    -1,   303,
     120,   344,    -1,   303,     1,   120,   344,    -1,   345,    -1,
     346,   120,   345,    -1,   347,   120,   345,    -1,   347,     1,
     120,   345,    -1,     1,   120,   345,    -1,   304,   120,   345,
      -1,   303,   120,   345,    -1,   303,     1,   120,   345,    -1,
     346,    -1,   346,   120,    51,    -1,   347,   120,    51,    -1,
     304,   120,    51,    -1,   303,   120,    51,    -1,     1,   120,
      51,    -1,   347,    -1,   346,   120,     1,    -1,   347,     1,
      -1,   355,    -1,   320,    -1,   370,    -1,   118,    -1,   124,
      -1,   239,   118,    -1,   373,    -1,   375,    -1,   377,    -1,
     354,    -1,   188,   118,    -1,   187,   118,    -1,   186,   118,
      -1,   356,    -1,   376,    -1,   371,    -1,   374,    -1,   378,
      -1,   377,     1,    -1,   259,    -1,   381,    -1,   381,   115,
     237,   116,    -1,   352,    -1,   353,   120,   352,    -1,    -1,
      86,   277,   115,   381,   116,   118,    -1,    86,   277,   115,
     381,   124,   353,   116,   118,    -1,    86,   277,   115,   381,
     124,   353,   124,   353,   116,   118,    -1,    86,   277,   115,
     381,   124,   353,   124,   353,   124,   353,   116,   118,    -1,
      86,   277,   115,   381,     3,   353,   116,   118,    -1,    86,
     277,   115,   381,     3,   353,   124,   353,   116,   118,    -1,
      86,   277,   115,   381,   124,   353,     3,   353,   116,   118,
      -1,    86,   115,   381,   116,   118,    -1,    86,   115,   381,
     124,   353,   116,   118,    -1,    86,   115,   381,   124,   353,
     124,   353,   116,   118,    -1,    86,   115,   381,   124,   353,
     124,   353,   124,   353,   116,   118,    -1,    86,   115,   381,
       3,   353,   116,   118,    -1,    86,   115,   381,     3,   353,
     124,   353,   116,   118,    -1,    86,   115,   381,   124,   353,
       3,   353,   116,   118,    -1,   209,   124,   350,    -1,    52,
     261,   124,   350,    -1,    52,   262,   124,   350,    -1,    52,
     124,   350,    -1,    53,   124,   350,    -1,   209,   124,   351,
      -1,    52,   261,   124,   351,    -1,    52,   262,   124,   351,
      -1,    52,   124,   351,    -1,    52,   124,    -1,    53,   124,
     351,    -1,    53,   124,    -1,    80,    -1,    81,    -1,    53,
      -1,    80,    -1,    81,    -1,   294,   118,    -1,   294,   340,
     118,    -1,   163,   118,    -1,   362,   118,    -1,   296,   118,
      -1,   296,   340,   118,    -1,   297,   340,   118,    -1,   167,
     118,    -1,    77,   209,   119,   236,   118,    -1,    31,    77,
     209,   119,   236,   118,    -1,   296,     1,    -1,   294,     1,
      -1,   362,     1,    -1,   164,     1,    -1,   163,     1,    -1,
     294,   341,    -1,   359,    -1,   363,   359,    -1,   364,   359,
      -1,   363,     1,   118,    -1,   362,    -1,   363,   362,    -1,
     350,    -1,   365,   350,    -1,   366,   350,    -1,   351,    -1,
     365,   351,    -1,   366,   351,    -1,   365,   359,    -1,   366,
     359,    -1,   365,   362,    -1,   366,   362,    -1,   365,    -1,
     363,    -1,   363,   365,    -1,   364,   365,    -1,   366,    -1,
     364,    -1,   363,   366,    -1,   364,   366,    -1,   122,    -1,
     371,   121,    -1,   369,   368,    -1,   369,    -1,   369,   367,
      -1,   118,    -1,   239,   118,    -1,   259,   118,    -1,    54,
     115,   239,   116,   350,    -1,    54,   115,   259,   116,   350,
      -1,    54,   115,   239,   116,   350,    64,   350,    -1,    54,
     115,   259,   116,   350,    64,   350,    -1,    55,   115,   239,
     116,   350,    -1,    55,   115,   259,   116,   350,    -1,    54,
     115,   259,    -1,   373,     1,    -1,    56,   115,   239,   116,
     350,    -1,    56,   115,   259,   350,    -1,    56,   115,   116,
     350,    -1,    57,   350,    56,   115,   239,   116,   118,    -1,
      57,   350,    56,   115,   259,   118,    -1,    58,   115,   372,
     372,   116,   350,    -1,    58,   115,   372,   116,   350,    -1,
      58,   115,   372,   372,   239,   116,   350,    -1,    58,   115,
     372,   372,   259,   350,    -1,    58,   115,   116,   350,    -1,
      58,   115,   209,   124,   239,   116,   350,    -1,    58,   115,
     209,   124,   239,   118,   239,   116,   350,    -1,    58,   115,
       1,    -1,    58,   115,   259,     1,    -1,    58,   115,   372,
       1,    -1,    58,   115,   372,   259,     1,    -1,    58,   115,
     372,   372,   259,    -1,    58,   115,   372,   372,   116,   351,
      -1,    58,   115,   372,   372,   239,   116,   351,    -1,    58,
     115,   372,   372,   259,   351,    -1,    57,   350,    56,   115,
     239,   116,    -1,    57,   350,    56,   115,   239,    -1,    57,
     350,    56,   115,   259,    -1,    57,   350,    56,   115,    -1,
      57,   350,    56,    -1,    57,   350,    -1,    57,    -1,    56,
       1,    -1,    56,   115,   116,     1,    -1,    56,   115,   259,
      -1,    56,   115,   239,   116,   351,    -1,    56,   115,   259,
     351,    -1,    59,   209,   118,    -1,    60,   118,    -1,    61,
     118,    -1,    62,   118,    -1,    62,   239,   118,    -1,    62,
     259,   118,    -1,    62,   213,   118,    -1,    62,   214,   118,
      -1,    62,   259,    -1,    62,   214,    -1,    62,    -1,    59,
      -1,   296,   328,   363,   370,    -1,   296,   328,   370,    -1,
     296,   330,   363,   370,    -1,   296,   330,   370,    -1,   328,
     363,   370,    -1,   328,   370,    -1,   296,   328,   363,   371,
      -1,   296,   328,   371,    -1,   296,   330,   363,   371,    -1,
     296,   330,   371,    -1,   328,   363,   371,    -1,   328,   371,
      -1,     5,    -1,   381,     5,    -1,   379,    -1,   206,    -1,
     296,   206,    -1,   360,    -1,    76,   381,    -1,    76,    31,
     381,    -1,    76,   209,   381,    -1,   118,    -1,   357,   379,
      -1,   357,   206,    -1,   357,   360,    -1,   357,    76,   381,
      -1,   357,    76,    31,   381,    -1,   357,    76,   209,   381,
      -1,   357,   124,    -1,    31,   124,    -1,   101,   209,    -1,
     101,   142,    -1,   387,    -1,   357,   387,    -1,   208,    -1,
     296,   208,    -1,   380,    -1,   357,   208,    -1,   357,   380,
      -1,   361,    -1,   357,   361,    -1,   383,    -1,   385,   383,
      -1,   384,   383,    -1,   385,     1,    -1,   384,     1,    -1,
     382,    -1,   385,   382,    -1,   384,   206,    -1,   384,   357,
     206,    -1,   385,    -1,   384,    -1,    -1,   105,   381,   209,
     122,   392,   121,    -1,   105,   381,   142,   122,   392,   121,
      -1,   105,   381,   122,   392,   121,    -1,   295,   209,   381,
     118,    -1,   209,    -1,   114,   209,    -1,   113,   209,    -1,
     389,    -1,   390,   120,   389,    -1,   107,   390,   118,    -1,
     107,   390,   209,   118,    -1,   388,    -1,   391,    -1,   392,
     388,    -1,   392,   391,    -1,   108,   115,   237,   120,   237,
     116,    -1,   106,   115,   381,   120,   209,   116,    -1,   107,
     115,   381,   120,   209,   116,    -1,   105,   115,   381,   116,
      -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   278,   278,   307,   366,   367,   467,   471,   474,   475,
     476,   525,   527,   532,   537,   542,   544,   549,   551,   556,
     558,   563,   565,   567,   569,   571,   575,   580,   582,   584,
     586,   588,   594,   596,   601,   606,   611,   613,   615,   620,
     621,   625,   626,   637,   641,   642,   644,   649,   650,   652,
     655,   667,   678,   697,   699,   704,   705,   706,   707,   708,
     709,   710,   711,   712,   716,   717,   718,   719,   723,   724,
     725,   726,   727,   728,   729,   733,   735,   740,   742,   744,
     746,   748,   778,   780,   785,   787,   789,   791,   793,   822,
     824,   826,   831,   833,   838,   840,   844,   846,   848,   850,
     855,   858,   861,   864,   929,   931,   936,   938,   940,   942,
     944,   975,   979,   980,   981,   985,   986,   987,   991,   992,
     993,   994,   998,  1001,  1004,  1007,  1010,  1015,  1016,  1018,
    1020,  1022,  1024,  1029,  1033,  1036,  1039,  1042,  1045,  1050,
    1051,  1053,  1058,  1062,  1064,  1069,  1071,  1076,  1078,  1083,
    1088,  1090,  1095,  1097,  1099,  1101,  1106,  1108,  1110,  1112,
    1117,  1118,  1119,  1120,  1121,  1122,  1123,  1124,  1125,  1126,
    1127,  1129,  1130,  1132,  1136,  1139,  1140,  1141,  1142,  1143,
    1144,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,  1154,
    1155,  1159,  1160,  1161,  1165,  1169,  1170,  1171,  1175,  1176,
    1177,  1178,  1179,  1183,  1184,  1190,  1191,  1201,  1202,  1203,
    1204,  1205,  1206,  1207,  1208,  1212,  1216,  1217,  1221,  1232,
    1233,  1237,  1238,  1239,  1243,  1244,  1248,  1249,  1250,  1251,
    1252,  1253,  1293,  1294,  1298,  1306,  1307,  1315,  1316,  1318,
    1319,  1328,  1329,  1334,  1341,  1348,  1354,  1361,  1367,  1376,
    1383,  1389,  1395,  1401,  1407,  1413,  1424,  1429,  1430,  1435,
    1436,  1437,  1441,  1442,  1443,  1444,  1445,  1446,  1447,  1448,
    1449,  1450,  1451,  1452,  1453,  1454,  1455,  1456,  1457,  1458,
    1459,  1460,  1461,  1462,  1463,  1464,  1465,  1466,  1467,  1468,
    1469,  1471,  1472,  1473,  1474,  1475,  1477,  1481,  1485,  1489,
    1490,  1494,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,
    1504,  1506,  1507,  1508,  1509,  1510,  1511,  1512,  1513,  1517,
    1519,  1520,  1521,  1522,  1523,  1524,  1525,  1526,  1527,  1529,
    1530,  1531,  1532,  1533,  1534,  1535,  1536,  1540,  1541,  1542,
    1543,  1547,  1548,  1549,  1550,  1551,  1555,  1556,  1557,  1558,
    1559,  1560,  1561,  1562,  1563,  1565,  1566,  1567,  1571,  1572,
    1576,  1577,  1581,  1582,  1583,  1584,  1585,  1586,  1587,  1588,
    1592,  1593,  1597,  1598,  1599,  1600,  1601,  1602,  1603,  1607,
    1608,  1609,  1610,  1611,  1615,  1616,  1617,  1618,  1619,  1623,
    1631,  1632,  1633,  1634,  1635,  1636,  1637,  1638,  1639,  1643,
    1644,  1645,  1646,  1647,  1649,  1650,  1651,  1652,  1656,  1657,
    1658,  1660,  1661,  1665,  1666,  1667,  1669,  1670,  1674,  1675,
    1676,  1678,  1679,  1683,  1684,  1685,  1689,  1690,  1691,  1695,
    1696,  1697,  1698,  1699,  1701,  1702,  1703,  1704,  1706,  1707,
    1708,  1709,  1711,  1712,  1713,  1714,  1718,  1719,  1720,  1721,
    1722,  1724,  1725,  1726,  1727,  1731,  1732,  1733,  1734,  1735,
    1736,  1737,  1738,  1739,  1740,  1741,  1745,  1746,  1747,  1748,
    1752,  1753,  1754,  1758,  1759,  1760,  1761,  1763,  1764,  1766,
    1767,  1772,  1774,  1779,  1783,  1784,  1785,  1787,  1788,  1790,
    1791,  1796,  1798,  1803,  1807,  1808,  1809,  1810,  1811,  1812,
    1813,  1814,  1815,  1816,  1817,  1818,  1822,  1823,  1827,  1828,
    1833,  1834,  1838,  1839,  1840,  1841,  1842,  1843,  1844,  1848,
    1849,  1853,  1857,  1861,  1868,  1869,  1870,  1871,  1872,  1876,
    1877,  1928,  1929,  1930,  1931,  1932,  1933,  1934,  1938,  1939,
    1940,  1941,  1942,  1949,  1950,  1951,  1952,  1956,  1957,  1958,
    1960,  1961,  1965,  1966,  1967,  1969,  1970,  1974,  1975,  1976,
    1978,  1979,  1983,  1984,  1985,  1989,  1990,  1991,  1995,  1996,
    1997,  1998,  1999,  2000,  2001,  2002,  2003,  2005,  2006,  2007,
    2008,  2009,  2010,  2011,  2012,  2014,  2015,  2016,  2017,  2019,
    2020,  2021,  2022,  2024,  2031,  2035,  2039,  2046,  2047,  2051,
    2056,  2057,  2061,  2062,  2063,  2064,  2070,  2071,  2072,  2076,
    2077,  2078,  2079,  2083,  2085,  2089,  2090,  2091,  2092,  2093,
    2097,  2098,  2099,  2100,  2101,  2105,  2106,  2107,  2111,  2112,
    2113,  2117,  2121,  2122,  2126,  2127,  2128,  2132,  2133,  2135,
    2136,  2137,  2138,  2139,  2141,  2142,  2143,  2144,  2145,  2149,
    2150,  2154,  2155,  2156,  2160,  2161,  2162,  2163,  2164,  2165,
    2166,  2167,  2168,  2170,  2171,  2173,  2174,  2175,  2176,  2177,
    2181,  2182,  2186,  2187,  2191,  2195,  2196,  2197,  2202,  2203,
    2207,  2208,  2209,  2210,  2211,  2212,  2213,  2214,  2215,  2216,
    2217,  2218,  2219,  2220,  2221,  2222,  2223,  2224,  2225,  2226,
    2227,  2228,  2232,  2233,  2234,  2235,  2236,  2237,  2238,  2239,
    2240,  2241,  2242,  2243,  2244,  2245,  2246,  2247,  2248,  2249,
    2250,  2251,  2257,  2259,  2261,  2263,  2265,  2267,  2269,  2271,
    2273,  2275,  2280,  2281,  2285,  2291,  2297,  2304,  2314,  2315,
    2316,  2317,  2321,  2322,  2323,  2325,  2326,  2327,  2329,  2330,
    2331,  2335,  2339,  2347,  2356,  2365,  2366,  2368,  2369,  2373,
    2380,  2387,  2390,  2403,  2417,  2420,  2422,  2424,  2429,  2430,
    2434,  2435,  2436,  2437,  2438,  2439,  2440,  2441,  2445,  2446,
    2447,  2448,  2449,  2450,  2451,  2452,  2453,  2454,  2458,  2459,
    2460,  2461,  2462,  2463,  2464,  2465,  2466,  2467,  2471,  2472,
    2473,  2474,  2475,  2476,  2477,  2478,  2479,  2480,  2481,  2482,
    2486,  2487,  2488,  2489,  2490,  2491,  2492,  2493,  2494,  2495,
    2499,  2500,  2504,  2505,  2506,  2507,  2508,  2509,  2510,  2511,
    2512,  2514,  2516,  2534,  2552,  2553,  2557,  2558,  2559,  2560,
    2561,  2562,  2563,  2564,  2565,  2583,  2600,  2601,  2602,  2603,
    2604,  2605,  2606,  2607,  2608,  2609,  2610,  2611,  2612,  2630,
    2647,  2648,  2649,  2650,  2651,  2652,  2653,  2654,  2655,  2656,
    2657,  2658,  2659,  2677,  2694,  2695,  2699,  2700,  2701,  2702,
    2703,  2707,  2708,  2715,  2717,  2726,  2735,  2744,  2753,  2754,
    2755,  2756,  2760,  2761,  2762,  2763,  2764,  2765,  2766,  2767,
    2768,  2772,  2776,  2777,  2778,  2779,  2780,  2785,  2794,  2803,
    2812,  2826,  2827,  2832,  2836,  2837,  2838,  2839,  2840,  2845,
    2854,  2863,  2872,  2886,  2887,  2936,  2937,  2938,  2939,  2951,
    2952,  2953,  2958,  2959,  2960,  2961,  2962,  2966,  2967,  2971,
    2972,  2973,  2977,  2978,  2982,  2983,  2984,  2985,  2986,  2987,
    2988,  2989,  2990,  2991,  2992,  2993,  2994,  2995,  2996,  2997,
    3001,  3002,  3003,  3004,  3005,  3006,  3007,  3008,  3012,  3013,
    3014,  3015,  3019,  3020,  3021,  3022,  3023,  3027,  3028,  3029,
    3030,  3031,  3035,  3036,  3038,  3040,  3042,  3047,  3048,  3050,
    3052,  3057,  3058,  3059,  3060,  3064,  3065,  3066,  3067,  3071,
    3072,  3073,  3074,  3078,  3079,  3080,  3081,  3085,  3086,  3087,
    3088,  3092,  3093,  3094,  3110,  3111,  3112,  3113,  3126,  3142,
    3143,  3148,  3149,  3153,  3154,  3155,  3156,  3159,  3160,  3164,
    3165,  3166,  3170,  3174,  3178,  3179,  3180,  3181,  3182,  3191,
    3200,  3201,  3202,  3203,  3207,  3208,  3212,  3213,  3218,  3219,
    3220,  3221,  3222,  3223,  3242,  3243,  3247,  3248,  3249,  3250,
    3251,  3252,  3254,  3255,  3256,  3257,  3261,  3262,  3263,  3264,
    3265,  3267,  3268,  3269,  3273,  3274,  3275,  3276,  3277,  3278,
    3282,  3283,  3284,  3289,  3290,  3291,  3292,  3293,  3294,  3295,
    3296,  3297,  3298,  3299,  3300,  3301,  3305,  3306,  3307,  3308,
    3309,  3310,  3311,  3315,  3316,  3320,  3321,  3322,  3326,  3327,
    3328,  3329,  3331,  3332,  3333,  3335,  3336,  3337,  3338,  3340,
    3341,  3342,  3346,  3347,  3348,  3349,  3350,  3354,  3355,  3356,
    3357,  3358,  3359,  3360,  3364,  3365,  3366,  3370,  3371,  3375,
    3376,  3377,  3378,  3382,  3383,  3384,  3386,  3387,  3388,  3392,
    3396,  3397,  3399,  3400,  3401,  3405,  3406,  3407,  3408,  3412,
    3413,  3417,  3418,  3419,  3423,  3424,  3425,  3426,  3427,  3428,
    3429,  3433,  3434,  3435,  3436,  3440,  3441,  3442,  3443,  3447,
    3451,  3455,  3457,  3460,  3466,  3467,  3468,  3472,  3473,  3474,
    3475,  3476,  3477,  3481,  3482,  3486,  3487,  3488,  3490,  3491,
    3493,  3494,  3495,  3496,  3497,  3499,  3500,  3504,  3505,  3506,
    3507,  3511,  3512,  3513,  3514,  3516,  3517,  3518,  3519,  3520,
    3521,  3522,  3525,  3529,  3530,  3534,  3535,  3539,  3540,  3541,
    3542,  3543,  3544,  3545,  3546,  3550,  3551,  3552,  3553,  3559,
    3560,  3562,  3563,  3566,  3567,  3570,  3571,  3572,  3573,  3574,
    3575,  3579,  3580,  3592,  3593,  3596,  3599,  3601,  3602,  3603,
    3613,  3615,  3616,  3618,  3619,  3620,  3621,  3631,  3632,  3633,
    3634,  3635,  3636,  3640,  3641,  3649,  3651,  3652,  3654,  3656,
    3660,  3661,  3662,  3663,  3664,  3668,  3669,  3670,  3672,  3677,
    3678,  3679,  3683,  3684,  3685,  3689,  3693,  3694,  3695,  3699,
    3700,  3704,  3705,  3709,  3710,  3711,  3712,  3716,  3720,  3724,
    3728
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "LONG", "SIGNED", "UNSIGNED", "FLOAT",
  "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST", "STRUCT", "UNION",
  "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH", "WHILE", "DO",
  "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX", "ELSE", "CLASS",
  "THISCLASS", "CLASS_NAME", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "'*'",
  "'<'", "'>'", "'('", "')'", "'~'", "';'", "'='", "','", "'}'", "'{'",
  "'.'", "':'", "'$'", "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'",
  "'%'", "'^'", "'|'", "'?'", "$accept", "guess_type", "type",
  "base_strict_type", "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "simple_postfix_expression", "argument_expression_list",
  "argument_expression_list_error", "common_unary_expression",
  "unary_expression", "simple_unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "simple_postfix_expression_error", "common_unary_expression_error",
  "unary_expression_error", "simple_unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    42,    60,    62,    40,    41,   126,    59,    61,
      44,   125,   123,    46,    58,    36,    91,    93,    38,    43,
      45,    33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   137,   138,   138,   139,   139,   140,   141,   142,   142,
     142,   143,   143,   144,   145,   146,   146,   147,   147,   148,
     148,   149,   149,   149,   149,   149,   149,   150,   150,   150,
     150,   150,   151,   151,   152,   153,   154,   154,   154,   155,
     155,   156,   156,   156,   157,   157,   157,   158,   158,   158,
     158,   158,   158,   159,   159,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   161,   161,   161,   161,   162,   162,
     162,   162,   162,   162,   162,   163,   163,   164,   164,   164,
     164,   164,   165,   165,   166,   166,   166,   166,   166,   167,
     167,   167,   168,   168,   169,   169,   169,   169,   169,   169,
     169,   169,   169,   169,   170,   170,   171,   171,   171,   171,
     171,   172,   173,   173,   173,   174,   174,   174,   175,   175,
     175,   175,   176,   176,   176,   176,   176,   177,   177,   177,
     177,   177,   177,   178,   179,   179,   179,   179,   179,   180,
     180,   180,   181,   182,   182,   183,   183,   184,   184,   185,
     186,   186,   187,   187,   187,   187,   188,   188,   188,   188,
     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   189,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   191,   191,   191,   192,   192,
     192,   192,   192,   193,   193,   194,   194,   195,   195,   195,
     195,   195,   195,   195,   195,   196,   197,   197,   198,   199,
     199,   200,   200,   200,   201,   201,   202,   202,   202,   202,
     202,   202,   203,   203,   204,   205,   205,   205,   205,   205,
     205,   205,   205,   206,   206,   206,   206,   206,   206,   207,
     208,   208,   208,   208,   208,   208,   209,   210,   210,   211,
     211,   211,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   213,   214,   215,
     215,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   218,   218,   218,
     218,   219,   219,   219,   219,   219,   220,   220,   220,   220,
     220,   220,   220,   220,   220,   220,   220,   220,   221,   221,
     222,   222,   223,   223,   223,   223,   223,   223,   223,   223,
     224,   224,   225,   225,   225,   225,   225,   225,   225,   226,
     226,   226,   226,   226,   227,   227,   227,   227,   227,   228,
     229,   229,   229,   229,   229,   229,   229,   229,   229,   230,
     230,   230,   230,   230,   230,   230,   230,   230,   231,   231,
     231,   231,   231,   232,   232,   232,   232,   232,   233,   233,
     233,   233,   233,   234,   234,   234,   235,   235,   235,   236,
     236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
     236,   236,   236,   236,   236,   236,   237,   237,   237,   237,
     237,   237,   237,   237,   237,   238,   238,   238,   238,   238,
     238,   238,   238,   238,   238,   238,   239,   239,   239,   239,
     240,   240,   240,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   242,   242,   242,   242,   242,   242,
     242,   242,   242,   242,   243,   243,   243,   243,   243,   243,
     243,   243,   243,   243,   243,   243,   244,   244,   245,   245,
     246,   246,   247,   247,   247,   247,   247,   247,   247,   248,
     248,   248,   248,   248,   249,   249,   249,   249,   249,   250,
     250,   250,   250,   250,   250,   250,   250,   250,   251,   251,
     251,   251,   251,   251,   251,   251,   251,   252,   252,   252,
     252,   252,   253,   253,   253,   253,   253,   254,   254,   254,
     254,   254,   255,   255,   255,   256,   256,   256,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   258,   258,   258,
     258,   258,   259,   259,   259,   259,   259,   259,   259,   260,
     260,   260,   260,   261,   262,   263,   263,   263,   263,   263,
     264,   264,   264,   264,   264,   265,   265,   265,   266,   266,
     266,   267,   268,   268,   269,   269,   269,   270,   270,   270,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   271,
     271,   272,   272,   272,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     274,   274,   275,   275,   276,   277,   277,   277,   278,   278,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   281,   281,   281,   281,   281,   281,   281,   281,
     281,   281,   282,   282,   283,   283,   283,   283,   284,   284,
     284,   284,   285,   285,   285,   285,   285,   285,   285,   285,
     285,   286,   287,   287,   288,   289,   289,   289,   289,   290,
     290,   290,   290,   290,   290,   290,   290,   290,   291,   291,
     292,   292,   292,   292,   292,   292,   292,   292,   293,   293,
     293,   293,   293,   293,   293,   293,   293,   293,   294,   294,
     294,   294,   294,   294,   294,   294,   294,   294,   295,   295,
     295,   295,   295,   295,   295,   295,   295,   295,   295,   295,
     296,   296,   296,   296,   296,   296,   296,   296,   296,   296,
     297,   297,   298,   298,   298,   298,   298,   298,   298,   298,
     298,   298,   298,   298,   299,   299,   300,   300,   300,   300,
     300,   300,   300,   300,   300,   300,   301,   301,   301,   301,
     301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
     302,   302,   302,   302,   302,   302,   302,   302,   302,   302,
     302,   302,   302,   302,   303,   303,   304,   304,   304,   304,
     304,   305,   305,   305,   305,   305,   305,   305,   305,   305,
     305,   305,   306,   306,   306,   306,   306,   306,   306,   306,
     306,   307,   308,   308,   308,   308,   308,   309,   309,   309,
     309,   310,   310,   311,   312,   312,   312,   312,   312,   313,
     313,   313,   313,   314,   314,   315,   315,   315,   315,   316,
     316,   316,   317,   317,   317,   317,   317,   318,   318,   319,
     319,   319,   320,   320,   321,   321,   321,   321,   321,   321,
     321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
     322,   322,   322,   322,   322,   322,   322,   322,   323,   323,
     323,   323,   324,   324,   324,   324,   324,   325,   325,   325,
     325,   325,   326,   326,   326,   326,   326,   327,   327,   327,
     327,   328,   328,   328,   328,   329,   329,   329,   329,   330,
     330,   330,   330,   331,   331,   331,   331,   332,   332,   332,
     332,   333,   333,   333,   334,   334,   334,   334,   334,   335,
     335,   336,   336,   337,   337,   337,   337,   337,   337,   338,
     338,   338,   339,   339,   340,   340,   340,   340,   340,   340,
     341,   341,   341,   341,   342,   342,   343,   343,   344,   344,
     344,   344,   344,   344,   345,   345,   346,   346,   346,   346,
     346,   346,   346,   346,   346,   346,   347,   347,   347,   347,
     347,   347,   347,   347,   348,   348,   348,   348,   348,   348,
     349,   349,   349,   350,   350,   350,   350,   350,   350,   350,
     350,   350,   350,   350,   350,   350,   351,   351,   351,   351,
     351,   351,   351,   352,   352,   353,   353,   353,   354,   354,
     354,   354,   354,   354,   354,   354,   354,   354,   354,   354,
     354,   354,   355,   355,   355,   355,   355,   356,   356,   356,
     356,   356,   356,   356,   357,   357,   357,   358,   358,   359,
     359,   359,   359,   360,   360,   360,   360,   360,   360,   361,
     362,   362,   362,   362,   362,   363,   363,   363,   363,   364,
     364,   365,   365,   365,   366,   366,   366,   366,   366,   366,
     366,   367,   367,   367,   367,   368,   368,   368,   368,   369,
     370,   371,   371,   371,   372,   372,   372,   373,   373,   373,
     373,   373,   373,   374,   374,   375,   375,   375,   375,   375,
     375,   375,   375,   375,   375,   375,   375,   376,   376,   376,
     376,   376,   376,   376,   376,   376,   376,   376,   376,   376,
     376,   376,   376,   376,   376,   376,   376,   377,   377,   377,
     377,   377,   377,   377,   377,   378,   378,   378,   378,   379,
     379,   379,   379,   379,   379,   380,   380,   380,   380,   380,
     380,   381,   381,   382,   382,   382,   382,   382,   382,   382,
     382,   382,   382,   382,   382,   382,   382,   382,   382,   382,
     382,   382,   382,   383,   383,   383,   383,   383,   383,   383,
     384,   384,   384,   384,   384,   385,   385,   385,   385,   386,
     386,   386,   387,   387,   387,   388,   389,   389,   389,   390,
     390,   391,   391,   392,   392,   392,   392,   393,   394,   395,
     396
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     2,
       1,     2,     2,     2,     2,     2,     2,     1,     1,     3,
       1,     3,     3,     1,     1,     3,     3,     1,     3,     3,
       3,     3,     1,     2,     2,     1,     1,     2,     2,     2,
       2,     1,     2,     2,     1,     1,     2,     2,     1,     2,
       2,     2,     2,     1,     2,     2,     3,     4,     5,     4,
       3,     4,     2,     3,     4,     5,     4,     3,     4,     5,
       5,     4,     2,     3,     3,     3,     3,     2,     4,     3,
       3,     2,     4,     3,     2,     3,     2,     3,     2,     1,
       2,     3,     3,     3,     2,     1,     3,     3,     1,     3,
       3,     2,     4,     5,     3,     4,     3,     1,     3,     3,
       3,     2,     3,     2,     4,     5,     3,     4,     3,     1,
       3,     3,     2,     1,     2,     2,     2,     1,     2,     5,
       7,     9,     6,     8,     4,     6,     1,     2,     3,     4,
       2,     2,     1,     1,     2,     2,     1,     1,     1,     1,
       7,     1,     2,     4,     1,     1,     2,     3,     2,     2,
       2,     3,     1,     2,     2,     2,     1,     1,     1,     2,
       2,     2,     3,     3,     1,     1,     2,     2,     1,     2,
       2,     2,     2,     1,     2,     1,     2,     2,     4,     4,
       6,     2,     4,     4,     6,     1,     1,     3,     1,     4,
       5,     1,     1,     1,     1,     3,     1,     1,     1,     3,
       3,     3,     1,     3,     1,     2,     2,     3,     3,     5,
       5,     6,     6,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     1,     1,     3,     1,
       2,     4,     1,     1,     4,     4,     5,     8,     1,     1,
       2,     6,     6,     5,     5,     6,     6,     5,     5,     7,
       7,     6,     6,     7,     7,     6,     6,     4,     5,     4,
       6,     4,     1,     1,     1,     1,     3,     1,     2,     2,
       2,     1,     4,     4,     3,     4,     4,     3,     3,     2,
       2,     4,     4,     3,     4,     3,     3,     2,     2,     1,
       4,     4,     3,     4,     4,     3,     3,     2,     2,     4,
       4,     3,     4,     3,     3,     2,     2,     1,     1,     3,
       3,     1,     1,     3,     3,     2,     2,     2,     2,     2,
       4,     2,     4,     5,     5,     4,     2,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     1,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     2,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     1,     3,     3,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     2,
       1,     3,     3,     1,     1,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     1,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     2,     2,     2,     2,     3,     2,
       5,     6,     6,     3,     2,     5,     1,     1,     1,     1,
       1,     4,     1,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     1,     3,     3,     1,     5,
       5,     5,     5,     4,     4,     4,     4,     5,     5,     5,
       5,     4,     4,     4,     4,     5,     5,     5,     5,     5,
       5,     5,     5,     3,     3,     2,     2,     1,     3,     3,
       3,     3,     1,     2,     3,     3,     2,     2,     2,     1,
       2,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     1,     3,
       2,     1,     2,     2,     2,     4,     4,     3,     3,     4,
       5,     4,     6,     6,     4,     5,     4,     6,     6,     2,
       2,     2,     5,     3,     5,     6,     5,     7,     7,     8,
       8,     7,     7,     3,     3,     3,     4,     3,     5,     5,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     4,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     4,
       4,     1,     1,     2,     2,     3,     5,     2,     3,     5,
       5,     5,     1,     3,     2,     2,     3,     3,     2,     3,
       3,     4,     3,     3,     3,     3,     3,     3,     4,     4,
       4,     1,     1,     4,     3,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     1,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     3,     3,     1,     3,     3,     3,
       3,     1,     1,     1,     4,     4,     4,     3,     4,     4,
       4,     3,     1,     3,     4,     3,     4,     4,     4,     4,
       3,     2,     3,     3,     3,     3,     2,     2,     2,     3,
       4,     1,     1,     2,     3,     3,     3,     3,     2,     2,
       2,     3,     4,     1,     1,     1,     1,     1,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     1,
       2,     3,     6,     5,     3,     4,     2,     3,     3,     3,
       3,     4,     4,     4,     2,     3,     3,     3,     4,     4,
       3,     4,     2,     3,     3,     3,     4,     4,     1,     2,
       2,     3,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     3,     1,     2,     3,     2,     2,     1,     2,     3,
       2,     1,     2,     3,     3,     1,     2,     3,     3,     1,
       2,     3,     3,     1,     2,     3,     3,     1,     2,     3,
       3,     1,     3,     4,     1,     4,     2,     5,     3,     1,
       1,     1,     1,     1,     1,     3,     3,     2,     2,     1,
       1,     3,     2,     3,     1,     3,     3,     3,     3,     3,
       1,     2,     3,     3,     1,     2,     1,     2,     2,     2,
       2,     3,     1,     1,     3,     3,     1,     3,     4,     3,
       4,     3,     3,     4,     3,     4,     1,     3,     3,     4,
       3,     3,     3,     4,     1,     3,     3,     3,     3,     3,
       1,     3,     2,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       1,     2,     1,     1,     4,     1,     3,     0,     6,     8,
      10,    12,     8,    10,    10,     5,     7,     9,    11,     7,
       9,     9,     3,     4,     4,     3,     3,     3,     4,     4,
       3,     2,     3,     2,     1,     1,     1,     1,     1,     2,
       3,     2,     2,     2,     3,     3,     2,     5,     6,     2,
       2,     2,     2,     2,     2,     1,     2,     2,     3,     1,
       2,     1,     2,     2,     1,     2,     2,     2,     2,     2,
       2,     1,     1,     2,     2,     1,     1,     2,     2,     1,
       2,     2,     1,     2,     1,     2,     2,     5,     5,     7,
       7,     5,     5,     3,     2,     5,     4,     4,     7,     6,
       6,     5,     7,     6,     4,     7,     9,     3,     4,     4,
       5,     5,     6,     7,     6,     6,     5,     5,     4,     3,
       2,     1,     2,     4,     3,     5,     4,     3,     2,     2,
       2,     3,     3,     3,     3,     2,     2,     1,     1,     4,
       3,     4,     3,     3,     2,     4,     3,     4,     3,     3,
       2,     1,     2,     1,     1,     2,     1,     2,     3,     3,
       1,     2,     2,     2,     3,     4,     4,     2,     2,     2,
       2,     1,     2,     1,     2,     1,     2,     2,     1,     2,
       1,     2,     2,     2,     2,     1,     2,     2,     3,     1,
       1,     0,     6,     6,     5,     4,     1,     2,     2,     1,
       3,     3,     4,     1,     1,     2,     2,     6,     6,     6,
       4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1291,   256,     6,   620,   621,   622,   623,   624,   681,   682,
     683,   684,   685,   687,   690,   691,   688,   689,   675,   676,
     680,   686,   768,   769,   631,  1136,   234,   699,   925,   926,
       0,     0,   929,  1134,  1135,   700,   701,   692,     0,     0,
       0,     0,     0,   930,   931,   968,     0,  1260,   816,   695,
       8,     4,     0,     0,     0,  1254,     0,  1273,   892,   810,
       0,   694,     0,   670,   672,   818,   820,   677,   812,   814,
     751,   693,     0,     0,   671,   673,     0,     0,     0,     0,
       0,   991,   674,     0,   927,     0,     0,     0,  1256,  1278,
    1253,  1275,  1285,  1280,     0,     0,     0,  1271,     0,  1268,
    1251,     0,     0,  1257,     0,     0,     0,     0,  1270,  1269,
       0,   678,   969,   674,   970,   883,   882,   892,   924,   881,
     911,   982,     0,   923,   987,     0,     0,     0,     0,     0,
       0,  1146,     0,   236,   235,     0,     0,   244,     0,   243,
       2,     3,     0,     5,     0,   633,   632,     0,     0,   651,
       0,     0,     0,     0,   755,     0,   735,   734,     0,  1149,
     622,   684,   685,  1143,   817,     8,  1255,  1274,   892,   811,
     819,   821,   813,   815,   991,   999,   674,     0,     0,  1030,
       0,     0,     0,  1040,     0,     0,   883,     0,   882,     0,
       0,   901,     0,     0,   615,   616,   617,   618,   619,  1053,
     906,   804,   876,   798,     0,   808,     0,   800,   802,   751,
     806,     0,     0,  1052,     0,     0,  1056,  1066,     0,     0,
       0,     0,     0,     0,   992,     0,   703,   704,   705,   706,
     707,   709,   712,   713,   710,   711,   702,   708,   721,   714,
       0,     0,  1179,   717,     0,     0,   788,   716,   794,   790,
     792,   796,   715,     0,  1155,     0,     0,     0,     0,  1244,
    1250,   622,     0,  1267,  1262,  1276,     0,  1263,  1279,  1261,
    1277,  1272,  1284,  1287,     0,     0,     0,     0,     0,  1282,
    1283,  1286,  1281,     1,     0,  1258,  1259,  1252,     0,     0,
     474,   268,     0,     0,     0,     0,     0,     0,   368,   369,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     363,     0,   366,     0,     0,   362,   364,   365,   367,     0,
     263,     0,   262,   301,   269,   257,   473,     0,   358,   370,
       0,   372,   379,   384,   390,     0,   399,   408,   413,   418,
     423,   426,   429,   446,     0,   507,   506,   510,   512,   519,
     524,   529,   538,   547,   552,   557,   562,   565,   568,     0,
     259,   292,   293,   294,   295,     0,     0,     0,     0,     0,
     679,   971,     0,   913,     0,   918,     0,     0,     0,     0,
       0,     0,     0,   924,   983,   988,     0,   893,   985,   895,
     990,   986,   692,     4,   228,   227,   226,   232,     0,   262,
     370,   218,   510,     0,   205,   248,     0,     0,   247,   254,
       0,     0,  1137,  1138,     0,   167,     0,   168,   169,     0,
       0,     0,     0,     0,   171,   245,     0,     0,     0,     0,
      28,    30,   162,   174,   187,     0,   186,     0,   115,   118,
       0,   194,   127,     0,   163,   139,     0,   166,   182,   195,
     198,     0,     0,   262,     0,     0,   175,     0,   995,   674,
       0,    12,    18,     0,   823,   822,   830,   824,     0,   826,
     828,   751,   835,   834,   249,   255,   246,     0,     0,   238,
     237,   664,   625,   628,   663,   667,   653,     0,     0,     0,
     221,   222,   223,   224,     0,   216,     0,   764,   757,     0,
       0,   754,   761,   756,     0,     0,   767,   758,     0,     0,
     737,   736,     0,     0,     0,     0,     0,   992,  1000,     0,
    1032,     0,     0,  1240,  1246,     0,  1242,  1248,  1041,  1144,
       0,     0,     0,  1145,   900,     0,   262,   613,   614,     0,
       0,     0,     0,   633,   632,   634,     0,   738,     0,     0,
     684,     0,     0,  1050,   805,     8,   892,   799,   809,   801,
     803,   807,   924,   881,   674,   973,   972,     0,     0,     0,
     905,     0,     0,   904,     0,     0,     0,  1082,     0,   902,
     903,   993,     0,   994,     0,     0,  1153,  1141,  1152,    75,
    1150,   706,   707,  1139,   892,   789,   795,   791,   793,   797,
     674,     0,  1154,  1151,  1142,     0,  1156,     0,  1243,  1249,
    1157,     0,     0,     0,     0,     0,     0,     0,     0,  1238,
       0,     0,     0,   714,     0,     0,     0,   156,  1086,  1087,
     717,     0,     0,     0,   262,     0,   370,     0,     0,   510,
     597,   602,     0,  1084,  1161,  1164,  1092,  1083,  1096,     0,
       0,     0,     0,  1183,  1181,  1085,  1098,     0,  1099,  1090,
    1097,     0,  1100,  1180,     0,     0,  1264,   892,     0,     0,
       0,  1274,     0,   881,   999,   674,     0,     0,     0,     0,
    1250,  1288,     0,     0,   429,     0,     0,   928,   484,     0,
       0,   319,     0,   360,   351,   509,   508,   499,     0,   346,
     494,   347,   495,     0,   870,   860,   868,   862,   864,   866,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   356,   504,   270,     0,     0,     0,   774,   770,
     772,   776,  1044,     0,   260,     0,   297,     0,   338,     0,
     337,     0,   476,    92,     0,   475,     0,   309,   310,     0,
       0,     0,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   455,     0,     0,   349,   497,   348,   496,     0,
       0,     0,     0,     0,     0,     0,   391,   530,     0,     0,
     389,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   696,     0,   317,   318,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   697,
     698,     0,     0,     0,  1303,  1304,     0,     0,     0,   887,
       0,     0,     0,   891,     0,     0,     0,   917,   916,   914,
     915,   924,   983,   988,   894,   896,  1010,    10,     9,     0,
       0,     0,   674,   972,   206,     0,     0,   262,   205,     0,
       0,   842,   836,   838,   840,     0,     0,     0,    16,    20,
       0,   184,   183,   185,     0,     0,     0,     0,   363,     0,
     262,     0,    26,    21,    27,    24,     0,    25,    23,    22,
      29,    31,   189,    82,   190,   121,   161,     0,     0,     0,
       0,   131,     0,     0,   133,     0,     0,   142,   160,   199,
     196,   201,   200,   197,   202,   114,     0,     0,     0,   892,
     732,   176,  1007,     0,  1003,   674,     0,    11,    17,   722,
     908,  1052,     0,     0,     0,   996,     0,     0,   172,   164,
     191,   180,     0,   179,     0,   165,   892,   178,     0,   633,
     632,   831,   825,   827,   829,     0,     0,     0,   630,   666,
       0,     0,     7,   211,   207,   753,     0,     0,     0,     0,
    1029,  1036,  1037,  1038,    61,    52,    91,    38,    37,    56,
      68,    44,    47,     0,    73,    55,     0,     0,     0,  1020,
    1022,     0,  1019,  1021,     0,    40,    43,   924,   993,   984,
    1001,   989,  1010,  1002,     0,  1011,  1014,  1031,  1033,  1239,
    1245,  1241,  1247,  1035,  1042,  1039,  1043,   899,   897,   898,
    1079,  1061,  1070,   638,   637,     0,     0,   474,   739,     0,
       0,   474,   740,     0,     0,     0,   954,   892,     0,     0,
     674,   972,     0,     0,     0,   946,     0,     0,     0,     0,
       0,  1051,   975,     0,     0,   974,  1055,  1054,     0,   875,
    1078,   878,  1064,  1072,     0,   874,  1077,   877,  1062,  1071,
       0,  1081,  1075,   879,  1057,  1067,     0,  1076,   880,  1059,
    1068,   932,   933,   936,   935,   934,     0,   937,   939,     0,
       0,     0,     0,    76,     0,  1140,  1158,     0,     0,     0,
       0,     0,     0,  1222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   262,     0,  1084,  1220,  1089,  1091,
       0,     0,  1228,  1229,  1230,     0,  1236,     0,     0,     0,
       0,     0,     0,   157,   143,  1095,  1094,  1093,     0,     0,
       0,   603,     0,  1088,     0,     0,     0,     0,   469,     0,
       0,   474,     0,     0,     0,     0,  1162,  1165,  1167,     0,
    1163,  1166,  1168,     0,  1194,  1101,  1265,  1266,   236,   235,
       0,     0,     0,  1000,     0,     0,  1246,     0,  1248,  1249,
       0,     0,  1147,     0,     0,   782,   262,     0,   498,   784,
     778,   780,   786,  1046,     0,   486,   485,     0,   327,   328,
       0,     0,     0,     0,   335,   336,     0,     0,     0,     0,
       0,     0,     0,     0,   871,   861,   869,   863,   865,   867,
     674,   978,   977,     0,   856,   846,   854,   848,   850,   852,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   503,     0,   258,     0,   775,   771,
     773,   777,  1045,     0,     0,   474,     0,     0,     0,   104,
       0,   296,   474,     0,     0,    93,   474,     0,     0,   477,
     308,   304,   342,   479,   480,   341,   481,   307,     0,     0,
     451,   447,   298,   373,   513,   374,   514,   375,   515,   380,
     520,   381,   521,   385,   525,   386,   526,   393,   532,   394,
     533,   392,   531,   404,   543,   400,   539,   405,   544,   401,
     540,   411,   550,   409,   548,   416,   555,   414,   553,   421,
     560,   419,   558,   424,   563,   427,   566,   593,     0,   609,
       0,     0,     0,     0,   453,   449,   478,   316,   313,     0,
     482,   483,   315,     0,     0,   452,   448,   376,   516,   377,
     517,   378,   518,   382,   522,   383,   523,   387,   527,   388,
     528,   397,   536,   398,   537,   395,   534,   396,   535,   406,
     545,   402,   541,   407,   546,   403,   542,   412,   551,   410,
     549,   417,   556,   415,   554,   422,   561,   420,   559,   425,
     564,   428,   567,   594,     0,     0,     0,     0,   454,   450,
       0,     0,  1296,  1299,     0,     0,  1294,  1305,  1306,     0,
       0,   886,   884,   885,   890,   888,   889,   233,   231,   230,
     229,   262,   674,   975,   240,     0,   206,   239,   126,     0,
     124,   843,   837,   839,   841,     0,   674,     0,    15,    19,
       0,   181,  1007,   674,     0,   138,     0,   136,   843,     0,
     262,   674,     0,    83,   116,   119,   117,   120,   128,   129,
     130,   132,   140,   141,   113,   111,   112,    13,   724,   727,
       0,     0,   920,  1052,     0,     0,     0,  1008,  1004,     0,
       0,   723,   892,   909,   997,   998,   892,   192,   193,   177,
       0,     0,     0,     0,   626,   627,   629,     0,     0,   656,
     652,     0,     0,     0,     0,     0,   225,   217,   215,     0,
       0,     0,    35,    36,    74,    53,     0,    54,     0,    63,
      60,    71,    66,    72,    59,    89,    38,    69,    62,    90,
      58,    70,    67,     0,    57,     0,   706,    32,    34,    33,
    1023,  1024,     0,   646,   636,     0,   641,   635,     0,   474,
     741,     0,     0,     0,   972,     0,   944,   955,   956,   949,
     947,   948,     0,   976,   957,     0,     0,   950,     0,     0,
       0,  1065,  1073,  1052,  1063,  1058,  1060,  1069,   943,     0,
       0,     0,   940,   718,   719,   720,   474,     0,     0,  1125,
    1130,     0,     0,  1126,  1132,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1219,   474,     0,  1184,   262,     0,
       0,     0,  1227,  1233,  1234,  1231,  1232,     0,     0,     0,
       0,   144,  1122,  1127,   158,   600,   598,     0,     0,     0,
     467,   604,   601,   599,   468,   605,     0,  1001,  1245,  1247,
    1148,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   350,   783,   785,   779,   781,   787,  1047,     0,   487,
     326,   322,   489,   490,   491,   325,     0,     0,   488,   334,
     331,     0,   492,   493,   333,     0,     0,   289,   287,     0,
       0,   962,   674,     0,     0,     0,     0,     0,     0,   980,
       0,   979,     0,     0,     0,   857,   847,   855,   849,   851,
     853,     0,   265,     0,   264,   291,     0,     0,     0,     0,
       0,     0,  1310,     0,     0,     0,   355,     0,   371,   511,
     261,   107,   105,   340,   339,    98,   102,   305,     0,   306,
     302,   303,   610,     0,     0,     0,     0,     0,     0,   314,
     311,   312,     0,     0,     0,     0,  1298,  1297,  1301,     0,
       0,     0,  1293,  1292,     0,   972,   217,     0,     0,   122,
     125,     0,     0,     0,     0,     0,  1008,     0,   134,   137,
       0,    14,   474,     0,     0,   733,     0,   892,   921,  1009,
    1005,  1006,   725,   728,   910,   173,   832,     0,   242,   241,
       0,   655,     0,   212,   213,   203,   208,   209,   219,     0,
       0,    50,    45,    48,    51,    46,    49,    36,    42,    39,
      41,     0,     0,  1027,  1028,   645,     0,   640,     0,   975,
     974,   945,   958,   959,   952,   951,   953,  1049,  1048,     0,
     942,   941,    78,  1123,  1128,  1124,  1129,     0,     0,     0,
       0,   474,  1197,     0,     0,  1196,  1226,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1204,     0,
    1185,   474,  1186,   474,     0,     0,     0,  1107,   928,  1107,
       0,     0,   154,     0,     0,     0,   159,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   500,   323,   324,
     320,   321,   332,   329,   330,   288,   872,     0,   977,     0,
     960,   963,   964,   273,   274,     0,   981,   965,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   266,   277,
     278,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     505,   344,   343,   471,   611,   438,   585,   430,   569,   442,
     589,   434,   577,   472,   612,   439,   586,   431,   570,   443,
     590,   435,   578,   440,   587,   432,   571,   444,   591,   436,
     579,   441,   588,   433,   572,   445,   592,   437,   580,  1300,
    1302,  1295,   844,     0,   123,   149,  1009,     0,   135,    85,
     922,     0,     0,   833,     0,     0,     0,     0,     0,     0,
     204,     0,   220,     0,     0,  1025,  1026,  1015,     0,     0,
       0,     0,   938,  1187,  1188,  1191,  1192,  1195,  1225,     0,
       0,     0,     0,     0,     0,     0,  1201,   474,     0,     0,
       0,  1105,     0,  1103,  1115,     0,  1107,     0,  1107,     0,
       0,     0,     0,   502,   501,   979,   961,   873,   966,   967,
     271,   272,   858,   281,   282,     0,     0,     0,     0,   275,
     276,   285,   286,     0,     0,   290,  1308,  1309,  1307,   845,
       0,   726,   729,   731,   730,     0,     0,   214,   210,     0,
    1012,  1017,     0,     0,     0,     0,     0,     0,     0,  1215,
    1199,     0,     0,  1200,  1212,     0,  1203,  1214,     0,     0,
    1107,     0,  1107,     0,  1107,     0,  1108,     0,     0,     0,
     147,     0,   152,     0,   155,     0,   859,   279,   280,     0,
     283,   284,   170,  1013,  1189,  1190,     0,     0,  1198,  1205,
       0,  1202,  1213,  1119,  1106,     0,     0,     0,  1116,     0,
       0,  1107,  1107,     0,  1107,   146,   145,   150,   148,     0,
       0,   371,   511,   267,     0,     0,  1104,     0,     0,  1107,
    1112,     0,     0,  1109,     0,     0,   153,  1206,  1120,  1121,
    1117,     0,     0,     0,     0,  1107,   151,     0,  1113,  1114,
    1110,     0,  1118,     0,  1111
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   201,    49,    50,   963,   319,   426,   427,   428,   429,
     430,   431,   432,   433,   977,   978,   979,   980,   981,   982,
     983,   984,   985,   986,   987,   988,   244,   245,   434,   435,
      52,   320,   321,   736,   764,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,  2109,  2110,  2111,   448,   631,
     632,   633,   449,   450,   451,   452,  1804,   394,   490,   395,
     491,   396,   492,   493,   856,   397,   398,    53,    54,    55,
      56,    57,   322,   323,   324,   325,   989,   990,   326,   327,
     692,   739,  1274,   328,   636,   694,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     725,   818,   638,  1331,   345,   695,   346,   639,   697,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     640,   641,  1115,  1333,   539,   540,   203,    59,   483,   484,
     204,    61,   205,   206,    62,    63,    64,    65,    66,    67,
     207,   112,   208,   250,   920,   921,   209,   210,   211,    71,
      72,    73,    74,    75,   212,   732,  1193,   253,   456,    77,
      78,   473,   474,   866,  1230,   710,  1038,  1039,   118,    79,
     457,    81,   458,   121,   122,   123,   924,   124,   113,    83,
    1087,  1088,  1089,    84,   565,  1221,   460,   567,  1223,   127,
     179,   461,   462,   181,   928,   129,  1007,  1541,   995,   996,
    1542,   182,   183,   184,   185,   733,  1194,   216,   217,   218,
     219,   220,   221,   644,   645,  2031,  2032,   646,   647,   648,
      87,   463,   254,    88,    89,   255,   256,   257,   651,   652,
     653,   654,   258,   655,   886,  1621,  1118,   658,   659,   660,
    1119,   662,    90,    91,   360,    92,    93,    94,    95,    96,
      97,   824,  1403,  1404,   825,   826,   361,   362,   363,   364
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1994
static const int yypact[] =
{
   35364, -1994, -1994, -1994, -1994,    69, -1994, -1994, -1994, -1994,
   -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994,
   -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994,
    1189,   160, -1994, -1994, -1994, -1994, -1994, -1994,    71,    81,
     226,   134,   430, -1994, -1994,  2546,  3099, -1994, -1994, -1994,
     398, -1994,   489,   134,   402, -1994,   587,   619,   982, -1994,
     328, -1994,   859, -1994,   627, -1994, -1994, -1994, -1994, -1994,
    1063, -1994,  1250,   645, -1994,   665,   694, 35000,  2484,   220,
   35632, -1994,   648,   678, -1994,  1215, 38082, 33766, -1994, -1994,
   -1994, -1994, -1994, -1994, 35455, 34627,   801, -1994,   160, -1994,
   -1994,   430,   430,   820,   737,   430, 27364,   134, -1994, -1994,
     211, -1994,  2546, -1994, -1994, -1994,   745, -1994,   638,  1125,
   -1994, -1994, 35721, -1994, -1994,  3099,  2066,  2506,  2679,  2427,
   21678, -1994,   782,    27,   858, 28431, 37729, -1994, 28550, -1994,
   -1994, -1994,   134, -1994,  1405,  1366,  1398,   163, 37729, -1994,
   37474, 28669, 37729, 28788, -1994, 28907, -1994, -1994,   134, -1994,
   -1994,   902,   804, -1994, -1994,   762, -1994,   619,   860, -1994,
   -1994, -1994, -1994, -1994,  1507,  1681,   648,  2066,  1820,  2427,
   38082, 38082,   538, -1994,  1418,   825,   839,   804,   949,   648,
    1430, -1994, 25904,   854, -1994, -1994, -1994, -1994, -1994, -1994,
   -1994, -1994,   990, -1994,   384, -1994,   877, -1994, -1994,   899,
   -1994,   903,  2189, 11690,   382,   656, -1994, -1994,   699,   796,
     941,   952,   370,   971, -1994,   370, -1994, -1994, -1994, -1994,
   -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994,
     983,   992, -1994, -1994,   111,   103, -1994, -1994, -1994, -1994,
   -1994, -1994, -1994, 35182, -1994, 16676,  4899, 38271, 16808, -1994,
     960,  1106,  1231, -1994, -1994,   619, 35091, -1994, -1994, -1994,
   -1994, -1994, -1994, -1994,   627,   665, 36166, 38082, 36430, -1994,
   -1994, -1994, -1994, -1994,  1061,   820,   820, -1994, 27364,   179,
   -1994, -1994, 27437, 27510, 27510,  1073, 37899, 27364, -1994, -1994,
    1080,  1163, 37899, 27364,  1170,  1173,  1199,  1209,  1220, 27583,
   -1994, 21908, -1994,   430, 25977, -1994, -1994, -1994, -1994,  1183,
   -1994,   148,  1289, -1994, -1994, -1994, -1994, 12095, -1994,  1958,
   25977, -1994,    62,   784,  1194, 27364,  1178,  1382,  1214,  1229,
    1210,  1412,   165,  1958,  1327,   593, -1994,  1958, -1994,  1012,
    1478,  1638,  1242,  1614,  1310,  1320,  1345,  1484,   233,  1958,
     820, -1994, -1994, -1994, -1994,  1429,   102, 37559,  1427,  1434,
   -1994, -1994, 26050, -1994, 26123, -1994,   872,   939,  1456,  1464,
    2066,  2702,  2725,   638, -1994, -1994,   981, -1994, -1994, -1994,
   -1994, -1994,  1080,  1183, -1994, -1994, -1994, -1994,   946,   643,
   -1994,   784, -1994,  1478, 33172, -1994, 21793, 37474, -1994,  1241,
   37219, 36518, -1994, -1994,  1468, -1994,   134, -1994, -1994,   160,
   36694, 36342,  6728, 37814, -1994, -1994,   966,  1465,  1465,  1024,
   -1994,  1479, -1994, -1994, -1994,   164,   234,   170, -1994, -1994,
   27828,  1494, -1994,  1515, -1994, -1994,   689, -1994, -1994, -1994,
    1486, 27955, 28074,   269,  1120,   593, 33962, 35810, -1994,   648,
    1215, -1994, -1994, 33864, -1994, -1994,  1519, -1994,   134, -1994,
   -1994, -1994,  2056, 37899, -1994,  1241, -1994, 28193, 28312,  1524,
    1530, -1994,  1554, -1994,  1564, -1994, -1994,  2942,  1569,   561,
   -1994, -1994, -1994, -1994,  1023,   792, 33172,  1036, -1994, 29026,
   29145, -1994,  1036, -1994, 29264, 29383,  1036, -1994, 29502, 29621,
   -1994, -1994,  3099,  3099,  3099, 19975,   981,  1507,  1681,   981,
   -1994, 26196,  4899, -1994,   960,  4899, -1994,   960, -1994, -1994,
    3099,  3099,   981, -1994, -1994,  1578,   337, -1994, -1994,  1585,
    1595, 37304,  1552,  1572,  1605, -1994, 29740, -1994, 29859,   439,
   -1994,  6244, 26269,  3099, -1994,  1190,   990, -1994, -1994, -1994,
   -1994, -1994,   638,  1617,   648,   672,   200,   298,  1836,  1611,
   -1994, 36958,  1625, -1994, 37045,  1627, 37132,  1631, 37389, -1994,
   -1994, -1994,  1411, -1994, 27364,   134, -1994, -1994,  1633, -1994,
   -1994,   902,   804, -1994,  1635, -1994, -1994, -1994, -1994, -1994,
     648,  1439,   825, -1994, -1994,  1651, -1994, 16940, -1994,   960,
   -1994,   182, 26342,  1660,  1671,  1673,   481, 17072,  1675,   160,
    1676,  1678, 17204,  1080,  2135,  1683,  1694,   160, -1994, -1994,
    1183,  1685,  1696,  1697,  1441, 15351,  1958, 15488, 23495,  1958,
    1958, -1994, 15620, 35273, -1994, -1994, -1994, -1994, -1994, 17336,
   17468, 17600, 17732, -1994, -1994, -1994,   960, 17864, -1994, -1994,
   -1994, 17996, -1994, -1994,   430,   430,   820,   283,   134,  1442,
    1698, -1994,   638,   220, -1994,   648,  2066, 38082, 38082,  4899,
   -1994, -1994, 36254, 27364,   358,  1704,   408, -1994, -1994, 22039,
     222, -1994, 12232, -1994, -1994,  1149, -1994, -1994, 26415, -1994,
   -1994, -1994, -1994, 37899,  1703, -1994, -1994, -1994, -1994, -1994,
   33370, 37899, 22170,   160, 33469, 37899, 27364,   430,   430,   430,
   27364, 22285, -1994, -1994, -1994, 12415, 12611, 12748, -1994, -1994,
   -1994, -1994,  8543,  1717,   194, 20106, -1994,   244, -1994,   258,
   -1994, 20237,  1714, -1994, 20368, -1994,  1567, -1994, -1994, 11385,
    1574, 27364, -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994,
   -1994, -1994, -1994, 25977,   267, -1994, -1994, -1994, -1994, 27364,
   27364, 27364, 27364, 27364, 27364, 27364,  1194,  1638, 27364, 27364,
   -1994, 27364, 25977, 25977, 25977, 25977, 25977, 27364, 27364, 12885,
   25977, -1994,  1575, -1994, -1994, 23568,  1587, 27364, 25977, 27364,
   27364, 27364, 27364, 27364, 27364, 27364, 27364, 27364, 27364, 27364,
   25977, 25977, 25977, 25977, 25977, 27364, 27364, 13022, 25977, -1994,
   -1994,   771,   990, 37814, -1994, -1994, 34718, 37559, 37559, -1994,
    1711,  1712,  1715, -1994,  1716,  1718,  1725, -1994, -1994, -1994,
   -1994,   638, -1994, -1994, -1994, -1994,  1728, -1994, -1994, 21678,
   21678, 32588,   648,   765, -1994,   532,  1046,   740, 33172,  1102,
    1722,  1742, -1994, -1994, -1994,  2056, 10001, 36606, -1994, -1994,
     160, -1994, -1994, -1994, 34060,  1734,   160, 33271,  2215, 22416,
    1618, 36782, -1994, -1994,   960, -1994,   960, -1994, -1994, -1994,
     960, -1994,  1745, -1994,  1105, -1994, -1994,  2607,  2607,  1465,
    1465, -1994,  1465,   196, -1994,  1465,  1465, -1994, -1994,   956,
   -1994,  1486,   956, -1994,  1486,  1109, 26488,  2294, 27364,   425,
   -1994,  1747,   638, 35899, -1994,   648,  2066, -1994, -1994,  1159,
     854, 11690, 27701,   629,   370, -1994,   370,  3099, -1994, -1994,
   -1994, -1994,   273, -1994,   279, -1994,   269, 33962, 21678, -1994,
   -1994,  1755, -1994, -1994, -1994, 37474, 37474, 27364,   160, -1994,
   32239,   276, -1994,   814,   991, -1994, 37474,   160,   809,   160,
    2374, -1994, -1994, -1994, -1994, -1994, -1994,  1465, -1994, -1994,
   -1994, -1994, -1994, 34157,  1480, -1994, 20499, 38177, 20630, -1994,
   -1994, 11826, -1994, -1994, 36870, -1994, -1994,   638,  1507, -1994,
    1681, -1994,   638, -1994, 26196, -1994, -1994, -1994, -1994, -1994,
     960, -1994,   960, -1994, -1994, -1994, -1994, -1994, -1994, -1994,
   -1994, -1994, -1994, -1994,  1564,   315,   344,  1749, -1994, 29978,
   30097,  1752, -1994, 30216, 30335, 30454, -1994,   670,   554,   567,
    1258,  1938,  1763,  1766,  1769, -1994,  1760,  1761,  1762,   648,
     981,  2427,   200, 35988, 26561,   672, -1994, -1994, 37644, -1994,
   -1994,   990, -1994, -1994, 37644, -1994, -1994,   990, -1994, -1994,
   37644, -1994, -1994,   990, -1994, -1994, 37644, -1994,   990, -1994,
   -1994, -1994, -1994, -1994, -1994, -1994,  1774,  1776, -1994,  1238,
    1777,  1781,   355, -1994, 20761, -1994, -1994, 18128,  1778,  1780,
   18260, 27364, 27364, -1994, 26634, 26707,  1783,  1793,  1794,  6985,
    1797,   160, 23641,  2354,  1499, 23714, -1994,  1861, -1994, -1994,
   23787,  1802, -1994, -1994, -1994,  1803,  1806, 23860, 15752,   430,
    1811, 27364, 27364,   160, -1994, -1994, -1994, -1994, 22729,   717,
   25977, -1994,  1168, -1994, 27364, 13159, 13296, 25977, -1994, 27364,
   13433,  1651, 18392, 18524, 18656, 18788, -1994, -1994, -1994, 18920,
   -1994, -1994, -1994, 19052, -1994, -1994,   820,   820,  1815,  1816,
   32357, 32475,   981, -1994,   981,  4899, -1994,  4899, -1994, -1994,
    1814, 25977, -1994, 25977,   714, -1994,   269,  1817, -1994, -1994,
   -1994, -1994, -1994,  8543,  1819,  1714, -1994,  1665, -1994, -1994,
   23933,  1668, 27364,  1669, -1994, -1994, 24006,  1687, 27364,  1821,
   37983, 21678, 35543, 27364,  1823, -1994, -1994, -1994, -1994, -1994,
     648,  1827,  1828,  1818,  1832, -1994, -1994, -1994, -1994, -1994,
   33568, 24079,  1834,  1837,  1839, 27364,  1822, 33667,  1838,   586,
     475,   498,  1840,  1843, -1994,  1845, -1994,   160, -1994, -1994,
   -1994, -1994, -1994, 27364,   430,   287, 11023, 20892,  1842, -1994,
   25977, -1994,   311, 34251, 21023, -1994,   322, 34345, 21154, -1994,
   -1994, -1994, -1994,   235,  1848, -1994, -1994, -1994, 24152,  4206,
   -1994, -1994,  1842, -1994, -1994, -1994, -1994, -1994, -1994,    62,
    1012,    62,  1012,   784,  1478,   784,  1478,  1194,  1638,  1194,
    1638,  1194,  1638, -1994, -1994,  1178,  1242, -1994, -1994,  1178,
    1242, -1994, -1994,  1382,  1614, -1994, -1994,  1214,  1310, -1994,
   -1994,  1229,  1320,  1210,  1345,  1412,  1484, -1994,    91, -1994,
   24225,  1841,  8141,  1849, -1994, -1994, -1994, -1994, -1994,  1086,
   -1994, -1994, -1994, 24298,  5030, -1994, -1994, -1994, -1994, -1994,
   -1994, -1994, -1994,    62,  1012,    62,  1012,   784,  1478,   784,
    1478,  1194,  1638,  1194,  1638,  1194,  1638,  1194,  1638, -1994,
   -1994,  1178,  1242, -1994, -1994,  1178,  1242, -1994, -1994,  1382,
    1614, -1994, -1994,  1214,  1310, -1994, -1994,  1229,  1320,  1210,
    1345,  1412,  1484, -1994, 24371,  1862,  8398,  1863, -1994, -1994,
     160,   160, -1994, -1994,   306,  1164, -1994, -1994, -1994, 34812,
   34906, -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994,
   -1994,   890,  1348,   765, -1994, 21678,   160, -1994, -1994, 21678,
   -1994,    87, -1994, -1994, -1994,   579,   648,  2066, -1994, -1994,
     459,  1747,  1728,   648,  2066, -1994,  1851, -1994,   698,   617,
    1103,  3099,  1856, -1994, -1994, -1994, -1994, -1994, -1994, -1994,
   -1994, -1994, -1994, -1994,  3323, -1994, -1994, -1994, -1994, -1994,
   21285,  2861,   854, 11690, 19844,   728,   981,   638, -1994,   981,
   27364, -1994,   666, -1994, -1994, -1994,  1872,  1745,  1714,  1747,
    1184, 21678,  1208,  1262, -1994, -1994, -1994, 30573, 30692,  1871,
   -1994,  3158, 37814, 37814, 37814, 37814, -1994, -1994, -1994, 27364,
    1873, 26780, -1994,   960, -1994, -1994, 26853, -1994, 26926, -1994,
   -1994, -1994,  1581,  1480, -1994, -1994,  1465, -1994, -1994, -1994,
   -1994, -1994,  1581,  1480, -1994, 26999,  4785, -1994, -1994, -1994,
   -1994, -1994, 19184, -1994, -1994,    99, -1994, -1994,   250,  1869,
   -1994, 30811, 30930,   648,  1938,  1884, -1994, -1994, -1994, -1994,
   -1994, -1994,   981,   672, -1994,  1886,  1887, -1994,  1878,  1879,
    1880, -1994, -1994, 11690, -1994, -1994, -1994, -1994, -1994, 27364,
    1902,  1265, -1994, -1994, -1994, -1994,   353, 34439, 21416, -1994,
   -1994, 22729, 22729, -1994, -1994, 24444, 15884, 24517, 24590, 22820,
   24663, 16016,  6985,  1896,  1897,  6985, 27364, 27072,  1966, 24736,
    1806,  7577,   430,  6985,  1908, 32977,  6985, -1994,  1586, 24809,
   10409, 24882, -1994, -1994, -1994, -1994, -1994,   114,   430,  1909,
    1151, -1994, -1994, -1994, -1994, -1994, -1994,  1912,  1914,   160,
   -1994, -1994, -1994, -1994, -1994, -1994, 37474, -1994, -1994, -1994,
   -1994, 24955,  1907, 11519,  1910, 25028,  1911, 22911,  1913,  1916,
    1917, -1994, -1994, -1994, -1994, -1994, -1994, -1994, 13570, -1994,
   -1994, -1994,  1207,  1922, -1994, -1994, 25101, 22984, -1994, -1994,
   -1994,  1325, -1994, -1994, -1994, 25174, 23057, -1994, -1994,  1929,
    1293, -1994,  2784,  1930,  1931,  1934,  1924,  1933, 21678,  1828,
   36077,  1827, 27364, 21678, 27364,  1943, -1994, -1994, -1994, -1994,
   -1994,  1935, -1994, 27145, -1994, -1994,  1939,  1941, 27364, 27364,
    1936,  5921, -1994,   160,   160, 27364, -1994, 13707, -1994, -1994,
     820, -1994, -1994, -1994, -1994, -1994, -1994, -1994, 13844, -1994,
   -1994, -1994, -1994, 25977, 13981, 14118, 25977, 14255, 14392, -1994,
   -1994, -1994, 14529, 14666, 14803, 14940, -1994, -1994, -1994,   771,
    1947,   474, -1994, -1994,   648,   765,  2059,  1322, 21678, -1994,
   -1994,  1951,   981,   981,  1465,   981,  1728,  1955, -1994, -1994,
    1957, -1994,   363, 34533, 21547, -1994,   648,   936, -1994,   638,
   -1994, -1994,  1956,  1963, -1994, -1994, -1994,  1332, -1994, -1994,
   32239,  1974, 32239, -1994,  1962, 33172, -1994,  1977, -1994, 27364,
   26196,  2636, -1994, -1994,  2636, -1994, -1994, -1994,  2636, -1994,
   -1994, 19316, 19448, -1994, -1994, -1994, 32239, -1994, 32239,   200,
     672, -1994, -1994, -1994, -1994, -1994, -1994, -1994,  2427, 25247,
   -1994, -1994, -1994, -1994, -1994, -1994, -1994,  6985, 22547,  6985,
   22547, 32686, -1994, 22729, 16148, -1994, -1994,  6985,  6985, 25320,
    6985, 25393, 22638,  1983, 23130, 25466,   124, 19580, -1994, 27364,
   -1994, 32783, -1994, 33074,  6985, 23203, 27218,   430,  1981,   430,
     128,  1980, -1994,   160, 27364, 27364,   160, 25977, 25977, 25977,
   25977, 25977, 25977, 25977, 25977, 15077, 15214, -1994, -1994, -1994,
   -1994, -1994, -1994, -1994, -1994, -1994, -1994,   648,  1828,  1988,
   -1994, -1994, -1994, -1994, -1994,  1342,  1827, -1994,  1990,  1991,
    1986,  1987,  1350,  1989,  1993, 21678, 27364, 21908, -1994, -1994,
   -1994,  1997,  1998,  1999,  2006, 27364,  1992,  1994,  2001,  2018,
   -1994, -1994, -1994, -1994, -1994, -1994, -1994, -1994,   408, -1994,
   -1994, -1994,   408, -1994, -1994, -1994, -1994, -1994,   408, -1994,
   -1994, -1994,   408, -1994, -1994, -1994,   408, -1994, -1994, -1994,
     408, -1994, -1994, -1994,   408, -1994, -1994, -1994,   408, -1994,
   -1994, -1994, -1994,  1355, -1994, -1994,  1728, 25977, -1994, -1994,
   -1994, 27364, 27364, -1994, 31049, 31168, 32239, 31287, 31406, 37814,
   -1994, 37814, -1994, 23276, 19712, -1994, -1994, -1994, 31525, 31644,
   31763, 31882, -1994,  2058,  2072, -1994, -1994, -1994, -1994,  6985,
   27364, 27291,  1981, 16280, 16412, 23349, -1994, 32880, 22729, 25539,
   16544, -1994,   922,   565, -1994,   218,   430,  2019,   430,   112,
     559,  2027,  1341, -1994, -1994,  1827, -1994, -1994, -1994, -1994,
   -1994, -1994, -1994, -1994, -1994,  1358,  2017,  2021,  2035, -1994,
   -1994, -1994, -1994,  2026,  2029, -1994, -1994, -1994, -1994, -1994,
    2039, -1994, -1994, -1994, -1994, 32001, 32120, -1994, -1994, 25612,
   -1994, -1994,  6985,  6985, 25685, 23422,  6985, 25758, 22638,  2040,
   -1994,  6985, 27364, -1994, -1994, 22729, -1994, -1994,  2046,   430,
     430, 27364,   430,  2050,   430,  1237, -1994,   228,  1465,   639,
   -1994,   721, -1994,  2048, -1994,   160, -1994, -1994, -1994, 26780,
   -1994, -1994, -1994, -1994, -1994, -1994,  2040,  6985, -1994, -1994,
   25831, -1994, -1994, -1994, -1994,  1361,  2055,  1367, -1994,  1263,
    2065,   430,   430,  2067,   430, -1994, -1994, -1994, -1994,   112,
     570, -1994, -1994, -1994,  6985,  2071, -1994,  2073,  2075,   430,
   -1994,  1390,  1391, -1994,  1275,   774, -1994, -1994, -1994, -1994,
   -1994,  1393,  2080,  2081,  2083,   430, -1994,  2088, -1994, -1994,
   -1994,  1401, -1994,  2090, -1994
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1994,  1558,   -35,  9542, -1994,  2052, -1994, -1994, -1994, -1994,
   -1994, -1994,  1710,  1721,  -974, -1994,  -954,  -658,   198,   201,
    -944,  -680,  -609, -1994,  -633,  -574, -1994, -1994,  1748,  1750,
   -1994,  4257,  2672, -1994,  -155,   758,   828, -1994, -1994, -1994,
   -1994,  1753, -1994, -1994, -1994,  -603, -1993,    70, -1994, -1994,
   -1994, -1994,  -245,  2621,  -115,   -82,   713,  -838, -1994,  -828,
   -1994,  -839, -1994,  1254,  -142,  1373,  -862,    43,  1948,    29,
    1950,    16,     0, -1994,  1328,   414, 10040,  3081, -1994,  3454,
   -1994,  -568,  -731,   499,  4883,  1919, -1994,  -278,   575,   -79,
     199, -1994,   583,  -656,  -644,  -397,  -184,   -89,  -229,  7363,
    3269,  -314,  8305,  -791,  5406, -1994,   508,  5421,  1921,  -242,
     630,   360,   208,   637,   178,   214,    17,   100,   320,  -213,
    1898,  -459,  7210,  -780,   962,   535, 10099,   -68,  1276,  -127,
    1223, 10167,  8039, -1994, -1994, -1994,   -29,   -20,    32, -1994,
    6924, -1994,   350,  2798,   752,  -742,  1949,  8683, -1994, 10826,
   -1994, -1994, -1994,    -3,  2266, -1994, -1994,   608,  6335,   -44,
   -1994, -1994,  1385,  1846,  1520,  1940,   -59,   -55,  9552,  9266,
    5497,  2318,  -453,  -123,  -357,  1995,  -772,    49,  3266, -1994,
   -1994, -1084, -1994,  5862,  -469, -1174,  7242,   764,  -697,   110,
     778,   210,  1825,  -195,  -797,  -440,  -938,  -519,  -910,  -902,
     428,  1016,  1211,    18,  1996,  -708,  1522,   157,  -398,  -422,
   -1994,  -121,   -33,  9525,  -461,   142,  -241, -1994, -1994, -1994,
    2154, -1994,  1129,  2168,   -42,  1161,   -98,  2000,  1112,  1127,
   -1994, -1994, -1994,   -67,   816, -1582,  -211, -1994, -1994, -1994,
    -203, -1994,  2170,    -8,    19,  2167,  1688, -1994, -1994, -1994,
    2182,  -816,   514, -1994,  -798,   979, -1994, -1994, -1994, -1994
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1291
static const yytype_int16 yytable[] =
{
      58,   378,  1008,   384,  1232,  1582,  1465,   935,   494,   169,
    1407,  1420,  1418,  1526,  1466,   763,   929,  1236,   132,   259,
     487,   214,  1419,   477,  1133,   215,  1395,  1865,  1408,   790,
     102,   104,  1520,   798,  1530,   933,   499,  1397,   504,  1876,
     508,   109,  1522,   266,  1532,   268,   117,   657,  1701,   103,
     276,   401,   767,   134,   384,   661,   478,   170,   143,   684,
     146,   110,  1006,   376,  1340,   274,  1540,   377,   684,   500,
    1439,   505,   365,   509,   684,   686,   157,   168,   117,   270,
     202,   678,   522,   525,   686,   117,  1490,    58,   768,   379,
     686,   275,  1742,   167,    58,    58,   190,  1055,   284,   923,
    1825,   142,  1256,   265,   588,     1,   166,   366,  1263,   171,
     369,  1267,   586,   523,   526,     1,   264,  1877,  2148,   287,
     285,   286,   202,   273,   289,   117,   117,  1877,  1313,   287,
     399,  2036,  1441,   287,   143,   453,   466,     1,   453,  1507,
     406,  1317,   480,  1022,   482,    -8,    98,   482,   466,   742,
     495,   453,   466,   453,  1478,   453,  1379,   535,   511,   737,
     649,  1257,     2,     1,   485,   892,     1,  1264,   143,  1383,
    1268,   894,  2148,  1063,   769,   385,  1069,   117,  1075,   679,
    1080,  1273,   788,   603,   287,  2108,   105,   178,   178,   608,
    1157,  1161,   536,    99,   770,   771,   106,  1538,   169,   287,
    1768,   100,   143,     1,   544,  1489,   910,   913,   169,  1769,
      86,   142,   157,   556,     1,  -470,   287,  1826,   820,   958,
    -644,  2102,   117,  1195,   589,   117,   385,  1339,     2,   587,
    1878,  2142,   910,   913,   682,   381,   268,   115,  1879,     2,
    2022,  -263,  -263,  -263,  2037,  1258,   170,   274,  1879,   274,
     816,  1827,  2038,   594,   910,   913,   170,   842,   634,   910,
     913,   927,   665,   910,   913,   859,   667,  1440,  1282,   743,
     270,   601,     1,   275,  1487,   275,    58,  1499,    58,     1,
    1488,   666,  1526,  2021,   486,   893,     1,   180,  -108,  1526,
    1275,   743,   671,  1526,   265,   687,   704,    86,   171,  1056,
     604,   789,   704,  1530,   277,    86,  1523,   681,  1533,     1,
    1530,   536,   -99,  1532,  1530,   551,  1543,  1254,     1,   668,
    1532,   313,  1140,  -103,  1532,  1147,   552,   401,  1521,  1527,
    1531,     1,   734,   367,  2103,   191,  1275,   830,  2099,   834,
       1,   107,  2104,   743,  2143,  1546,   192,     1,  2099,  1690,
      69,  1737,  2144,  -263,   -81,  1738,     2,  -263,     1,   883,
     885,   887,   889,   178,   -88,  1259,   143,   822,  1828,   817,
     958,  -639,   536,     1,   536,   788,   178,  1524,  1260,  1534,
     117,   140,   141,   569,  1055,  1261,   117,     1,  1259,  1321,
    1652,   744,  1656,   999,   893,   140,   141,  1500,   932,   143,
     743,  1654,   215,  1658,   822,   515,   857,   495,  -108,   999,
     861,   556,     2, -1049, -1049,  1024,   872,  1387, -1049,   873,
     822,   861,   880,   822,  1758,   816,  1759,   173,     1,   843,
    1043,  1029,   -99,  1033,   929,   100,  1544,    69,   657,   657,
     657,   657,     1,  -103,    69,    69,   661,   661,   661,   661,
     144,   453,   453,   143,   684,  1009,   919,   202,  1011,   744,
     117,  1587,     1,   946,  1030,  1547,  1034,     2,   950,  1673,
     686,  1585,   157,   951,   -81,  1682,   180,   453,   453,   287,
     287,  1484,  1103,  1485,   -88,    46,   677,   678,   277,   964,
     403,  1283,  1285,  1287,  1181,   143,   968,  1841,   570,   453,
     453,  1475,   571,   287,   453,   453,   542,   929,   453,   453,
     923,   130,   117,   117,   117,  1693,   117,  1046,  1044,   117,
    1588,  1347,  1349,  1351,   135,  1916,   136,  1284,  1286,  1288,
     117,   117,   117,  1711,   776,     1,   143,   140,   141,   528,
    1720,   822,   482,   777,  1183,  1006,   453,  1470,   453,   511,
    1091,  1037,   536,   117,  1539,   569,   143,  1348,  1350,  1352,
     962,  1035,     1,   560,     1,  1001,   117,  1767,   572,   923,
     287,  1061,  1055,     1,  1067,  1774,  1073,  1533,  1078,  1175,
    1177,  1001,     1,  1563,  1533,  1092,  1420,  1418,  1533,   962,
     923,   287,  1981,  1407,  1407,  1723,  1104,  1766,  1527,  1531,
     792,   793,   794,  1323,  1823,  1527,  1531,   131,   737,  1527,
    1531,  1408,  1408,  1526,   169,   385,   173,  1114,  1724,  1121,
       1,   868,   970,   970,   970,  1819,   173,  1134,    69,  1797,
     575,  1389,  1672,  1820,  1530,   737,  1590,   923,  1681,  1594,
     178,   178,     1,   737,  1532,  1233,     1,   703,  1534,   634,
     634,   634,   634,   274,  -215,  1534, -1034,   572, -1034,  1534,
    1572,   730,   170,   737,  1803,  1478,  1806,   143,  1169,     1,
    1808,  -876,  1438,     1,   571,  2112,   117,  1633,  1577,   275,
    2101,  1636,   556,  1166,  1167,  1641,  2166,   574,  1643,  1186,
    1645,  1157,  1161,  1157,  1161,  1293,  1295,     1,  1021,  1325,
     575,  1770,  1722,  1209,  1790,   137,   691,  1791,   795,   138,
    1214,  1224,   536,  1234,  1214,  1224,   796,     1,  1276,   797,
       1,  1186,     2,   691,     1,  1357,  1359,  1391,  1062,   575,
    1043,  1068,  1247,  1074,  2045,  1079,  1239,  1240,  1241,  1779,
     139,  1275,     2,     1,  1483, -1074,  1270,  1275,   149,   576,
    1277,  -215,   927,   373,   560,   140,   141,  -215,   905,   906,
      45,   242,   850,  -215,   374,   744,   403,   153,    28,    29,
     401,   401,   573,    32,     1,  1928,   574,     1,   140,   141,
      38,  1794,   140,   141,   910,   913,   154,  1053,   910,   913,
    -876,   693,  1337,   223,  2108,     1,  1342,   577,  1054,  1537,
     696,   283,   378,  1322,    43,    44,   560,  1634,   693,  1526,
     907,  1768,     1,  1492,  1493, -1074,   155,   696,  1044,   576,
    1778,  1402,   143,  1405,   128,   287,   822,   822,   822,   703,
    1530,  1388,  1458,  1459,  1501,  1460,  1915,  1783,  1462,  1463,
    1532,  1922,  2147,  1788, -1074,  1497,   560,  2108,   576,   399,
    1421,   202,   140,   141,  -215,   964,   288,   143,   968,  1425,
    -215,     1,   744,     1,  1474,   157,  1431,   556,   377,   401,
    1134,   372,  1540,   569,   556,   130,  1446,  1448,  1498,  1450,
     851,   822,   514,  2005,  1400,  1401,   657,  1324,   372,   657,
     379,   552,   677,     1,   661,  2176,  1784,   661,  1545,  1548,
     405,  -215,   260,   382,   140,   141,  1983,   832,  1533,   836,
    1512,   967, -1080,   772,   773,  1390,   578,   117,   384,   143,
    1551,   140,   141,   202,   513,    26,   117,   657,  1509,  1527,
    1531,  1482,  1565,  1502,   117,   661,   117,  1486,  1503,     1,
     572,   657,   657,   657,   657,   531,   143,   919,   399,   661,
     661,   661,   661,  1552,  1563,   495,   495,   847,   482,   512,
     453,   482,  1314,  -474,  -474,  -474,   495,  1508,   143,  1510,
    2002,   407,   140,   141,   541,  1728,   408,  1297,  1299,  1534,
    1301,   147,   515,   148,     1,     1,  1298,  1300,   837,  1302,
    1380,   568,   571,     1,   117,  1909,   524,   527,   545,  1318,
    1790,  1791,   140,   141,  -215,  1361,  1363,  1365,  1367,     2,
    -215,  1729,   744,  1936,  1362,  1364,  1366,  1368,   115,  1568,
    1566,   546,   512,  1824,   547,   482,   482,  1384,  -883,   453,
     453,   929,   173,   453,   453,   453,  1886,   143,  2098,  1191,
     117,   117,  2099,  -474,  -474,  -474,  2100,    26,   140,   141,
     117,  1990,   117,   202,   536,   838,   477,   579,   822,   574,
     848,   143,   730,  2055,   822,  1823,   849,   143,   580,   514,
     822,  1191,   609,   143,   656,   372,   822,  2070,   143,  -474,
     923,   663,  1250,  1006,   882,  1830,   582,  1048,   242,   478,
     385,  1694,   143,   680,   140,   141,    46,   634,   584,   385,
     634,  1001,   140,   141,  1533,   737,     1,   585,  1326,  1114,
    1504,  1121,  -476,  -476,  -476,  1505,  -475,  -475,  -475,   923,
    1618,   915,   923,   994,   799,  1527,  1531,   746,   747,   748,
    1844,  1846,   401,  1631,  1294,  1296,  1392,   965,   634,  1277,
    1856,  2005,   888,   966,   800,   801,   242,  1099,  1627,  1660,
     381,  -474,   634,   634,   634,   634,  1203,  1204,  1205,  -474,
    1424,  2077,  -474,  2078,  1358,  1360,   966,     1,   854,   100,
     453,   453,   117,   560,   117,  1534,   150,  -892,  -892,  1695,
     683,  2153,  -892,    98,   822,  -752,   143,  -752,   703,  -892,
     778,   779,     1,   822,   100,   712,  -882,  1670,  -882,  -882,
     128,  1675,  1749,  1679,   774,   775,  1738,  1684,   560,   403,
     403,   399,   202,  -892,  -892,  1571,  1427,   560,     1,  2058,
     101,  1574,   966,    60,   560,   744,  1265,  1575,  -476,   730,
    1705,   560,  -475,  1576,     1,   749,   100,  1705,    32,   916,
     191,  1081,   884,   750,  -912,   890,   751,   143,  -474,  -474,
    -474,   192,   910,   913,   806,   807,  1637,  1638,  1639,   711,
     969,     1,   664,  -882,  1206,   715,  1082,  1882,  1081,    43,
      44,  1883,  1207,  1730,  -882,  1208,   140,   141,   713,  1942,
    2040,   560,  1083,  1480,  1641,   716,     2,  1645,   717,    28,
      29,   780,   781,  1082,    32,   115,  1830,   560,  1796,  -882,
      60,    38,  2006,   130,   849,   741,   910,   913,   403,  1083,
      60,  1210,  1084,  1085,   718,  1042,   372,    60,    60,  -882,
    -882,  -882,  1798,  1898,   719,    43,    44,  1738,   966,   128,
      46,  1051,    28,    29,   831,   720,   835,    32,  1010,  1084,
    1085,  1012,   784,   994,    38,   786,   401,  1289,  1291,   994,
     401,  1006,   994,  2140,  1580,   808,   809,  2099,  1581,   468,
    1563,  2141,  1006,   785,  -474,  1305,  1309,  -474,    43,    44,
      45,   468,   151,   551,   152,   468,  1799,  1353,  1355,  2158,
     657,   657,   966,  2099,   552,   606,   610,  2159,   661,   661,
     657,  2174,  2018,  1371,  1375,  2099,   782,   783,   661,  2175,
    1756,  1757,  1290,  1292,  1760,   143,   481,  1906,     1,   822,
     822,   744,   401,   849,  1081,   923,   923,   607,   611,  1306,
    1310,   143,    28,    29,  1761,  1421,  1510,    32,   787,   399,
     401,   842,  1354,  1356,    38,  1771,  1982,   117,   812,  1082,
    1631,  1902,   849,   791,   117,  1738,  1993,  1372,  1376,  1780,
     143,   117,   849,  1469,   813,  1083,  2047,  2114,    43,    44,
      45,  2115,   849,   851,  2052,   656,   656,   656,   656,  2069,
     849,   117,  2116,  1787,   552,   849,   117,  2155,   849,   117,
     814,  2099,   143,  2157,  1824,  1084,  1085,  2099,  -650,    60,
    -650,   399,  1495,  1176,  1178,  1179,  1252,   453,   453,    60,
     815,    60,   822,   822,   822,   822,  2172,  2173,  -911,  2177,
    2099,  2099,  2150,  2099,  1047,   684,   684,  2183,   684,   684,
    -649,  2099,  -649,   684,   684,   684,   684,  1086,   971,   972,
     973,  1948,  1952,   488,  1958,  1962,   529,   501,   530,  1966,
    1970,  1974,  1978,  1665,  1006,   819,  1013,  1015,   533,   827,
     530,   453,   453,  1023,   117,     1,   828,  1095,    48,   530,
    2006,   381,   117,   744,  1170,  1138,   136,  2094,  1269,  2097,
       1,   403,   839,   556,  1098,  1276,  1336,     1,     1,  1918,
     840,  -911,  -911,   870,   899,   900,  -911,   242,  1341,  1570,
       1,   634,   634,  -911,   994,   994,   994,   891,  1517,  1114,
    1518,   634,  1114,   843,   908,  1114,   901,   802,   803,  1618,
     902,  1001,   903,  1114,   898,  1042,  1114,  -911,  -911,   401,
    1006,   744,  1426,  1613,   401,  -911,  -911,  -911,   810,   811,
    1435,  1866,   948,   468,  2132,   164,   904,   955,  2035,  1134,
    1604,  1449,   657,   956,   468,    48,   495,  1880,   804,   805,
     661,   606,    48,    48,   606,  1454,  1456,   128,   684,   684,
     684,   684,   684,   684,   684,   684,  1669,  1919,     1,  1674,
    1678,     1,     1,   957,   686,   686,   686,   686,   686,   686,
     686,   686,  -923,   607,   958,  1994,   607,  1997,  1683,   401,
       1,   961,  -892,  -892,  1025,   128,   468,  -892,   399,  1515,
     202,  1516,   994,   399,  -892,  1017,   999,  1985,   744,   568,
    1869,  2008,  1018,  2010,  1812,   128,  1815,  1813,  1995,  1816,
    1998,  1247,  1019,  1937,  1938,  1455,  1457,  1026,  -892,  -892,
     401,  1058,   737,   737,   737,   737,   737,   737,   737,   737,
     744,  1014,  1016,   192,  2009,  1064,  2011,  1070,  1697,   910,
     913,  1076,   910,   913,  1093,  -923,  -923,  1094,   684,  1402,
    -923,  1152,  1154,   910,   913,   910,   913,  -923,   399,  1096,
    1717,   554,   117,   117,   686,   117,  1153,  1155,   606,   610,
    1158,  1162,   279,   282,  1100,   403,  1101,   143,  1102,   403,
    1120,  -923,  -923,  1513,  1122,  2105,  1123,  2107,  1131,  -923,
     453,  -923,   453,  1135,  1555,   822,  1409,  1410,   606,  1132,
     607,   611,  1159,  1163,  1136,  1137,  1211,   657,   382,   657,
    1171,   520,  1182,   560,   164,   661,   453,   661,   453,   117,
     910,   913,   737,  1253,   164,  1265,    48,  1057,  1411,  1412,
     607,  2151,  1413,  1414,  1428,  1415,   401,  1114,  1114,  1114,
    1114,   403,  1416,   634,   374,  1429,  1445,  1114,  1114,  2135,
    1114,  2137,  1114,  2139,   994,   994,  1453,  1471,  1491,   403,
    -744,   994,   994,  -747,  1114,   994,   994,  2152,  1001,  1556,
    1468,  2075,  1557,  1134,   657,  1558,  1631,  1559,  1560,  1561,
    1578,  1579,   661,  1583,    28,    29,  2033,  1584,  2033,    32,
    2161,  2162,  1591,  2164,  1592,    60,    38,  1605,  1606,  1607,
      28,    29,  1609,   656,  2076,    32,   656,  1614,  2171,  1494,
    1622,  1623,    38,   560,  1624,   399,  1628,   536,  1646,   407,
      43,    44,  1650,  1661,  2181,  1668,  1698,  1687, -1029,   521,
   -1029,     1,  1700,  1212,  1702,  1703,    43,    44,  1718,    70,
    1713, -1048, -1048,  1714,   656,  1715, -1048,  1667,  1721,  1726,
    1725,  1727,   554,  1732,  1739,  1745,     2,  1777,   656,   656,
     656,   656,  1781,  1748,  1689,   115,   752,   753,   754,   755,
     756,   757,   758,   759,   760,   761,  1753,  1755,  1795,  1800,
    -750,  1648,  1809,  1649,   453,   453,   453,   453,   453,   822,
    1831,   822,  1832,  1833,   359,  1834,  1835,  1836,   453,   453,
     453,   453,    28,    29,   554,  1793,  1569,    32,  1840,  1114,
    1857,  1858,  1863,  1867,    38,  1881,    70,  1884,   634,  1885,
     634,  1888,  1895,  1896,  1890,  1892,    70,  1894,  1899,  1134,
    1631,  2145,  2146,    70,    70,  1905,  1910,  1911,    43,    44,
    1912,  1913,    51,   551,   554,  2033,  1925,  2033,   403,     1,
    1914,  1926,  1935,   403,   552,  1980,  1929,  1603,  1930,     1,
    -230,   730,   175,  1984,  1987,   453,   453,   762,   994,  1988,
    1991,  1999,  1114,  1114,     2,   471,  1114,  1992,  1114,   468,
     538,  1114,  1996,   108,     2,   634,  2001,   471,  2020,  2034,
     468,   471,  2039,   115,  2046,    51,  2048,  2049,  2065,  1631,
    2066,  1134,   145,  2050,  2051,  1134,  2053,  2067,  2033,  2033,
    2054,  2033,  2082,  2033,  2059,  2060,  2061,  1114,   403,    51,
      28,    29,    51,  2062,  2068,    32,  2083,  2106,   243,    51,
      28,    29,    38,  2113,  2117,    32,    51,    51,  2118,  1134,
    1631,  2119,    38,  2120,  1114,   560,  2121,  2122,  2128,    51,
    2033,  2033,   368,  2033,  2133,  1134,    43,    44,  2138,   403,
    2149,  2156,   518,   939,    51,  1696,    43,    44,  2033,    18,
      19,    46,   393,  2160,   940,  2163,  1555,   393,   243,  2168,
     393,  2169,     1,  2170,  2033,   994,   994,  1716,  2178,  2179,
     243,  2180,    51,   393,   243,   393,  2182,   393,  2184,    28,
      29,   941,   359,   942,    32,    70,   945,     2,  1807,  2165,
    1506,    38,  1417,  1785,   669,    70,   670,    70,   722,   382,
     723,  1461,   243,   243,  1496,  1237,   869,  1921,  2003,  1924,
     164,  2134,   714,  1245,   393,    43,    44,  1185,   278,   602,
    1129,   568,  -968,  1932,  1934,   267,   543,   269,   650,    18,
      19,   175,   281,    28,    29,    51,    76,   877,    32,   271,
     538,   674,   538,  1979,     0,    38,     0,   730,     0,  1185,
       0,  1158,  1162,  1158,  1162,   403,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     1,     0,    43,
      44,    38,     0,     0,   606,   243,   606,     0,   243,   243,
     630,   548,     0,  1159,  1163,  1159,  1163,     0,    51,     0,
       0,     0,     2,     0,     0,    43,    44,    45,    51,   243,
      51,   115,     0,     0,     0,     0,   607,  1837,   607,     0,
       0,     0,  1817,    76,     0,     0,     0,     0,   243,     0,
       0,  1838,     0,    76,   243,     0,     0,     0,     0,   471,
      76,    76,     0,   393,   120,     0,     0,     0,    28,    29,
     471,     0,     0,    32,     0,     0,     0,     0,     0,     0,
      38,   554,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   994,   994,     0,     0,   174,   120,     0,    18,    19,
       0,     0,   472,   224,    43,    44,    45,   656,   656,    46,
    1467,     0,     0,   993,   472,     0,   554,   656,   472,    51,
       0,     0,   471,     0,   393,   554,   393,     0,    28,    29,
       0,     0,   554,    32,     0,     0,     0,     0,     0,   554,
      38,     0,  1792,   120,   120,     0,     0,     0,    28,    29,
     538,   674,     0,    32,     0,     0,    51,     0,   393,    51,
      38,  2057,   243,    51,    43,    44,     0,     0,   871,  1612,
    2064,     0,    51,   243,     0,    51,     0,     0,     0,     0,
       0,     0,   359,     0,    43,    44,     0,     1,     0,   554,
       0,     0,     0,  1511,     0,   517,     0,     0,     0,     0,
       0,    28,    29,   393,   393,   554,    32,     0,    51,    51,
     538,  1000,     2,    38,  1003,   393,     0,     0,     0,     0,
     949,   186,   187,     0,     0,   243,  2072,  2074,     0,   393,
     393,     0,    76,     0,     0,     0,     0,    43,    44,     0,
     581,     0,    76,   583,    76,     0,     0,     0,    51,     0,
       0,   393,   393,     0,     0,     0,   393,   393,    28,    29,
     393,   393,     0,    32,     0,     0,     0,   630,     0,  2000,
      38,   120,     0,     0,   243,     0,     0,   243,     0,     0,
      28,    29,     0,     0,   174,    32,     0,     0,     0,     0,
      18,    19,    38,    51,    43,    44,    45,     0,   393,    46,
     393,     0,     0,    51,   393,     0,     0,     0,   290,     0,
       1,   291,   100,     0,   359,     0,    43,    44,   359,     0,
      28,    29,   387,    51,     0,    32,    51,     0,    51,     0,
      51,    70,    38,   993,     0,     2,     0,    51,     0,   993,
       0,     0,   993,  -474,     0,     0,  -474,  -474,  -474,  -474,
    -474,  -474,  -474,  -474,     0,     0,    43,    44,    45,     0,
       0,   359,     0,     0,  1920,     0,  1923,     0,     0,   656,
       0,  1173,   295,     0,     0,     0,   865,   674,   296,   297,
    1931,  1933,     0,     0,     0,     0,     0,   865,   359,     0,
       0,     0,   300,     0,     0,     0,   359,     0,   120,     0,
       0,   630,   630,   630,   630,   301,     0,     0,     0,   302,
     303,   304,   305,   306,   307,   308,   359,     0,     0,     0,
       0,     0,   698,     0,     0,     0,     0,     0,     0,   243,
     243,   243,   313,   314,    51,     0,     0,     0,     0,   865,
     120,   393,  1659,     0,     0,     0,     0,     0,     0,  -474,
    -474,  1662,     0,    28,    29,   243,     0,     0,    32,  -474,
       0,     0,   243,   243,   393,    38,   243,   243,  -474,  -474,
    -474,  -474,  -474,   393,     0,     0,    28,    29,   224,     0,
       0,    32,     0,     0,    51,     0,     0,   630,    38,    43,
      44,     0,     0,   630,     0,   389,   630,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,   437,     0,     0,
     437,    38,    43,    44,   993,   471,   538,     0,   844,     0,
       0,     0,     0,   437,     0,   437,   471,   437,     0,     0,
     120,   120,   120,     0,   998,    43,    44,   583,     0,     0,
       0,   845,     0,     0,   656,     0,   656,     0,   120,   120,
     120,     0,     0,     0,     0,   538,     0,     0,    28,    29,
       0,     0,   674,    32,     1,     0,     0,     0,     0,   120,
      38,     0,     0,     0,     0,    51,     0,     0,    51,    51,
      51,     0,     0,     0,   993,     0,   993,     0,  2056,     2,
       0,     0,     0,     0,    43,    44,    45,  2063,   115,  1212,
       0,   393,   393,    51,     0,     0,     0,     0,     0,     0,
      51,   656,     0,     0,     0,     0,     0,     0,   243,    51,
       0,  1173,     0,     0,     0,     0,    51,     0,     0,   243,
       0,   393,     0,    51,   470,    28,    29,     0,     0,     0,
      32,     0,   674,   959,     0,  -665,   470,    38,    76,     0,
     470,     0,   538,  2071,  2073,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   690,     0,     0,     0,     0,     0,
    -665,    43,    44,    45,     0,    51,    46,     0,     0,  -665,
    -665,   690,     0,    51,     0,   918,     0,     0,     0,   674,
       0,     0,   993,     0,   224,     0,     0,     0,     0,    51,
     393,     0,     0,   538,     0,     0,     0,    51,    51,     0,
       0,     0,   393,     0,     0,     0,  -665,  -665,    51,     0,
       0,  -665,     0,     0,     0,     0,     0,     0,  -665,   359,
     359,   554,     0,     0,     0,     0,     0,     0,   630,   243,
     630,     0,     0,     0,     0,     0,   243,     0,     0,     0,
       0,   598,  -665,  -665,  -665,     0,     0,  -665,     0,     0,
     960,     0,   958,  -665,     0,     0,     0,     0,     0,     0,
       0,     0,   911,   914,     0,     0,     0,     0,     0,     0,
       0,   393,   393,     0,     0,   393,   393,   393,     0,     0,
       0,     0,     0,     0,   708,     0,     0,     0,   911,   914,
     708,     0,     1,     0,     0,    51,   393,     0,     0,     0,
      51,   538,     0,     0,     0,     0,    51,     0,     0,     0,
     911,   914,    51,   437,   437,   911,   914,     2,    51,   911,
     914,   554,   865,   538,     0,   944,   115,     0,     0,     0,
       0,     0,     0,   865,     0,     0,   630,     0,     0,   437,
     437,     0,     0,     0,     0,   993,     0,     0,   359,  1801,
       0,  -654,   993,     0,     0,     0,   993,  1647,     0,  1003,
       0,   437,   437,    28,    29,     0,   437,   437,    32,     0,
     437,   437,     0,     0,     0,    38,  -654,     0,     0,     0,
       0,     0,     0,     0,     0,  -654,  -654,   120,     0,     0,
       0,     0,     0,     0,   630,   630,   630,   630,   864,    43,
      44,    45,     0,     0,    46,     0,     0,     0,   437,   864,
     437,     0,   393,   393,     0,     0,     0,   243,     0,   243,
       0,     0,  -654,  -654,     0,   120,    51,  -654,     0,     0,
       0,     0,     0,     0,  -654,    51,     0,     0,     0,     0,
       0,     0,   581,     0,   583,   120,     0,     0,     0,     0,
       0,     0,   243,   393,    51,     0,    82,     0,  -654,  -654,
    -654,   954,     0,  -654,     0,     0,  1802,     0,   958,  -654,
       0,     0,   243,     0,     0,     0,     0,     0,     0,   243,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   243,   630,
       0,     0,   125,     0,     0,   243,   630,     0,     0,   243,
     630,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -474,  -474,  -474,  -474,  -474,  -474,  -474,  -474,  -474,  -474,
    -474,     0,   158,   176,   189,     0,     0,     0,     0,     0,
       0,   225,     0,    82,     0,     0,     0,     0,   120,   120,
      82,    82,     0,   554,     0,     0,     0,     0,   993,     0,
       0,     0,     0,     0,     0,   344,     0,     0,   538,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   189,   386,   388,   390,   391,     0,     0,     0,     0,
       0,   459,     0,     0,   459,     0,     0,     0,     0,   359,
       0,   766,     0,     0,   993,     0,   993,   459,     0,   459,
       0,   459,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1173,   993,     0,     0,  -474,  -474,     0,     0,
       0,     0,     0,   519,   388,   390,  -474,     0,     0,     0,
       0,  -474,  -474,  -474,     0,  -474,  -474,  -474,  -474,  -474,
       0,    51,    51,     0,     0,     0,     0,     0,     0,     0,
       0,  1647,     0,     0,  1003,     0,     0,   393,   549,   564,
       0,   393,     0,     0,     0,     0,   993,     0,     0,     0,
     581,     0,   583,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1218,  1228,
       0,     0,  1218,  1228,     0,     0,     0,     0,     0,   600,
       0,     0,   630,     0,     0,    51,     0,   637,     0,     0,
       0,     0,   176,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   675,   393,    82,     0,     0,     0,     0,   393,
     393,     0,     0,     0,    51,    51,    51,    51,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   740,     0,     0,     0,     0,     0,   454,
       0,     0,   454,     0,     0,     0,     0,     0,     0,     0,
     538,     0,   538,   393,   393,   454,     0,   454,     0,   454,
       0,   359,     0,     0,     0,     0,   538,   538,     0,     0,
       0,     0,     0,   359,     0,    51,     0,     0,     0,     0,
       0,     0,   437,     0,     0,     0,     0,     0,     0,   243,
     630,     0,     0,     0,     0,     0,   386,   388,   390,     0,
     911,   914,     0,     0,   911,   914,     0,     0,     0,     0,
       0,     0,     0,     0,  1434,     0,     0,     0,     0,     0,
     852,     0,     0,     0,     0,  1434,     0,   459,     0,     0,
       0,     0,   993,     0,     0,     0,     0,     0,   125,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    51,     0,
       0,   437,   437,  1126,     0,   437,   437,   437,     0,     0,
       0,     0,   635,     0,     0,     0,     0,   459,   459,     0,
       0,     0,   925,     0,     0,     0,   936,     0,     0,   459,
       0,     0,     0,     0,     0,     0,     0,     0,   158,     0,
       0,     0,     0,   459,   459,     0,     0,     0,     0,     0,
     393,     0,    51,     0,     0,   393,     0,     0,     0,     0,
       0,     0,   852,     0,     0,   459,   459,  1647,  1003,   120,
     459,   459,     0,    51,   459,   459,     0,     0,   189,   189,
     189,     0,   359,   359,     0,     0,     0,     0,     0,     0,
    1005,     0,   598,     0,     0,     0,   189,   189,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   459,     0,   459,     0,     0,  1040,     0,  1049,
     393,     0,     0,     0,   538,     0,     0,     0,     0,     0,
    1272,     0,     0,   538,   390,   243,   630,     0,     0,     0,
       0,     0,   437,   437,     0,     0,     0,     0,     0,     0,
       0,     0,   393,  1090,   393,     0,     0,    51,     0,     0,
       0,     0,     0,  1304,  1308,  1312,  1316,  1320,     0,     0,
    1329,     0,   120,     0,     0,     0,  1272,     0,   393,     0,
     393,     0,     0,     0,     0,     0,   637,     0,     0,   538,
     538,  1370,  1374,  1378,  1382,  1386,     0,     0,  1329,     0,
       0,     0,     0,     0,     0,   454,   454,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   637,   637,
     637,   637,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   454,   454,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1174,     0,     0,     0,     0,     0,   675,     0,
       0,     0,     0,   454,   454,     0,     0,     0,   454,   454,
       0,     0,   454,   454,     0,     0,     0,     0,     0,   991,
       0,     0,     0,     0,     0,     0,  1220,   393,     0,   393,
    1220,     0,     0,     0,     0,  1238,     0,     0,     0,  1242,
       0,     0,     0,     0,     0,     0,     0,     0,   852,   359,
     454,     0,   454,     0,     0,     0,     0,     0,   598,     0,
       0,     0,     0,     0,     0,     0,     0,   359,   740,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1709,     0,
       0,     0,  1281,     0,     0,  1709,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   393,   393,   393,   393,
     393,    51,     0,    51,     0,     0,     0,     0,     0,  1335,
     393,   393,   393,   393,   740,     0,     0,  1346,     0,     0,
       0,   635,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1399,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   635,   635,   635,   635,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1422,   911,   914,
       0,     0,     0,     0,   852,     0,     0,   393,   393,     0,
       0,   158,   852,  1436,     0,     0,     0,     0,     0,     0,
    1443,     0,     0,   852,     0,  1451,     0,   120,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   437,
     437,     0,   911,   914,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,     0,     0,     0,     0,     0,   991,
       0,     0,  1479,  1610,     0,   991,     0,   564,   991,     0,
       0,     0,     0,   125,     0,     0,     0,   290,     0,     1,
     291,   100,   292,   925,   293,   294,     0,     0,     0,     0,
       0,  1635,     0,   437,   437,     0,   459,     0,  1642,     0,
       0,     0,     0,     0,     2,     0,   388,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     925,     0,  1329,     0,  1329,     0,     0,     0,     0,     0,
       0,   295,     0,  1005,     0,     0,     0,   296,   297,   298,
       0,  1272,     0,     0,     0,     0,     0,  1272,     0,     0,
     299,   300,     0,     0,     0,   459,   459,     0,     0,   459,
     459,   459,     0,     0,   301,     0,  1553,   386,   302,   303,
     304,   305,   306,   307,   308,   309,     0,   390,   310,     0,
       0,   311,  1148,   312,     0,     0,  1149,     0,     0,     0,
       0,   313,   314,  1741,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   454,   454,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   637,     0,     0,   637,
       0,     0,     0,     0,     0,     0,     0,     0,   637,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   436,     0,     0,   436,     0,     0,     0,     0,
    1629,  1630,     0,     0,     0,     0,     0,   637,   436,  1281,
     436,     0,   436,  1640,   454,     0,  1346,     0,  1644,     0,
       0,   637,   637,   637,   637,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   459,   459,     0,     0,
     991,     0,   991,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   852,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   740,
       0,     0,   437,     0,   437,   740,   852,     0,  1692,     0,
       0,     0,     0,   454,   454,     0,     0,   454,   454,   454,
       0,     0,     0,     0,     0,     0,  1220,     0,   437,     0,
     437,     0,     0,  1220,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1734,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   991,     0,
       0,   635,     0,     0,   635,     0,     0,     0,     0,     0,
       0,     0,     0,   635,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   635,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   635,   635,   635,   635,
       0,     0,     0,     0,     0,   911,   914,     0,   911,   914,
       0,     0,     0,     0,   454,   454,     0,     0,     0,   911,
     914,   911,   914,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   437,   437,   437,   437,
     437,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     437,   437,   437,   437,     0,     0,     0,     0,  1764,     0,
       0,     0,     0,     0,     0,     0,   911,   914,     0,     0,
       0,     0,     0,  1773,     0,     0,     0,     0,   436,   436,
     386,   991,     0,     0,     0,     0,     0,   189,   991,     0,
     943,     0,   991,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   436,   436,     0,  1786,     0,   564,
       0,     0,     0,     0,     0,     0,     0,   437,   437,     0,
       0,     0,     0,     0,     0,     0,   436,   436,     0,     0,
       0,   436,   436,   459,   459,   436,   436,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1005,     0,     0,     0,     0,     0,  -883,     0,     0,  -883,
    -883,  -883,     0,  -883,  -883,     0,     0,     0,     0,     0,
       0,     0,     0,   436,     0,   436,     0,     0,     0,     0,
       0,  1005,     0,     0,     0,     0,     0,   459,   459,  1941,
     386,     0,     0,     0,  1944,  1946,  1950,  1954,  1956,  1960,
       0,     0,     0,  1964,  1968,  1972,  1976,     0,     0,   564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -883,     0,     0,     0,     0,     0,  -883,  -883,  -883,     0,
     637,   637,     0,     0,     0,     0,     0,     0,   637,  -883,
     637,   637,     0,     0,   637,     0,     0,     0,     0,     0,
       0,     0,   637,  -883,     0,   637,     0,  -883,  -883,  -883,
    -883,  -883,  -883,  -883,  -883,     0,     0,     0,     0,     0,
     605,     0,  -883,  -883,     0,  -883,  -883,  -883,     0,     0,
    -883,  -883,     0,  -883,  -883,  -883,  -883,     0,     0,     0,
       0,     0,     0,     0,   991,     0,     0,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,   454,   454,     0,     0,     0,     0,     0,  1907,     0,
       0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
     991,     0,   991,    28,    29,     0,     0,     0,    32,     0,
       0,     0,  1005,     0,   239,    38,   240,     0,     0,   329,
       0,     0,     0,     0,  1939,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,   454,   454,  1734,     0,    43,
      44,     0,  1640,   400,     0,  1644,     0,     0,     0,     0,
       0,   242,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,   991,     0,     0,   635,   635,     0,     0,     0,
       0,     0,     0,   635,     0,   635,   635,     0,     2,   635,
       0,     0,     0,     0,     0,     0,   459,   635,   459,     0,
     635,   852,     0,     0,     0,   400,     0,     0,     0,  1005,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1005,     0,   459,     0,   459,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   390,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   299,   300,   637,   637,   637,   637,
       0,     0,   637,     0,     0,     0,   637,   637,   301,   637,
       0,   637,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,   637,     0,   311,  1148,   312,     0,     0,
    1149,     0,     0,  2041,  2042,   313,   314,  1751,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   400,     0,     0,     0,     0,   699,   701,     0,     0,
     400,     0,     0,     0,     0,     0,   400,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   400,     0,     0,     0,   436,   400,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   991,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   454,   400,   454,   400,     0,     0,
     459,   459,   459,   459,   459,     0,     0,     0,     0,     0,
       0,     0,  1005,     0,   459,   459,   459,   459,     0,     0,
     454,     0,   454,     0,     0,     0,   436,   436,   637,   400,
     436,   436,   436,     0,     0,     0,     0,   637,     0,   637,
       0,   635,   635,   635,   635,     0,     0,   635,     0,     0,
       0,   635,   635,     0,   635,     0,   635,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   635,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   459,   459,     0,     0,     0,     0,     0,  1005,     0,
       0,   637,   637,     0,     0,   637,     0,   637,     0,     0,
     637,     0,     0,     0,   637,     0,     0,     0,     0,     0,
    2136,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1005,     0,
       0,     0,     0,     0,     0,     0,   637,     0,   400,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   637,     0,     0,     0,   436,   436,     0,
       0,     0,     0,     0,     0,   400,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   454,   454,
     454,   454,   454,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   454,   454,   454,   454,     0,   329,     0,     0,
       0,     0,     0,   635,     0,     0,     0,     0,     0,     0,
       0,     0,   635,     0,   635,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   400,     0,    80,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   347,     0,   454,
     454,     0,     0,     0,     0,     0,   635,   635,     0,     0,
     635,   455,   635,    80,   455,   635,     0,     0,     0,   635,
       0,   402,     0,     0,     0,     0,     0,   455,     0,   455,
       0,   455,     0,     0,     0,     0,   400,     0,     0,     0,
       0,     0,  1187,     0,    80,    80,     0,     0,     0,     0,
       0,   635,    80,     0,    80,     0,     0,     0,     0,     0,
       0,    80,    80,     0,     0,     0,     0,     0,     0,   329,
       0,     0,     0,   329,  1243,     0,     0,     0,   635,     0,
       0,     0,     0,   402,     0,     0,     0,     0,   400,     0,
       0,     0,    80,    80,   400,     0,     0,   400,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,     0,     0,     0,
       0,     0,   400,   400,   400,   400,   400,   400,   400,     0,
       0,   400,   400,     0,   400,   400,   400,   400,   400,   400,
     400,   400,     0,   329,    80,     0,     0,     0,     0,     0,
       0,   329,   400,   400,   400,   400,   400,   400,   400,   400,
     400,   400,   400,   400,   400,   400,   400,   400,   400,   400,
       0,   329,     0,     0,     0,     0,     0,     0,     0,   402,
       0,     0,     0,     0,   700,   702,     0,     0,   402,    80,
       0,     0,    80,     0,   402,     0,     0,     0,     0,     0,
       0,     0,   400,   400,     0,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      80,   402,     0,     0,   436,   436,   402,     0,     0,     0,
       0,     0,     0,    80,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    80,     0,    80,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   402,     0,   402,     0,     0,     0,   400,
       0,   400,     0,     0,     0,     0,     0,     0,   436,   436,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   402,     0,     0,
       0,   400,     0,     0,     0,     0,     0,     0,     0,     0,
     400,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   455,   455,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   400,
       0,   400,     0,     0,     0,     0,     0,    80,     0,     0,
       0,     0,     0,   455,   455,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   455,   455,     0,     0,     0,
     455,   455,     0,     0,   455,   455,     0,     0,     0,    80,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   402,   400,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,   455,     0,   455,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,   402,     0,     0,     0,   400,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,   400,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,   347,    37,    38,    39,    80,
      80,    80,     0,    80,   329,   329,    80,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,    80,    80,    80,
       0,    43,    44,   402,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    80,     0,
       0,     0,     0,     0,     0,     0,     0,   436,     0,   436,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   436,     0,   436,     0,     0,     0,     0,
       0,     0,     0,     0,   400,     0,   400,     0,     0,     0,
       0,     0,     0,     0,   402,     0,     0,     0,     0,     0,
    1188,     0,     0,     0,     0,     0,     0,     0,   400,     0,
     643,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   400,   347,     0,     0,
     400,   347,  1244,   329,     0,     0,     0,   400,     0,     0,
       0,   400,     0,     0,     0,     0,   402,     0,     0,     0,
       0,     0,   402,     0,     0,   402,     0,     0,     0,     0,
       0,     0,     0,    80,     0,     0,     0,     0,     0,    80,
       0,     0,     0,     0,   347,     0,     0,     0,     0,     0,
     402,   402,   402,   402,   402,   402,   402,     0,     0,   402,
     402,     0,   402,   402,   402,   402,   402,   402,   402,   402,
       0,   347,     0,     0,     0,     0,     0,     0,     0,   347,
     402,   402,   402,   402,   402,   402,   402,   402,   402,   402,
     402,   402,   402,   402,   402,   402,   402,   402,     0,   347,
       0,     0,     0,     0,     0,   193,     0,     1,     0,     0,
       0,   436,   436,   436,   436,   436,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   436,   436,   436,   436,     0,
     402,   402,     2,   194,   195,   196,   197,   198,     8,     9,
      10,   550,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,   455,   455,     0,     0,     0,   400,   199,
      27,     0,   400,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,   436,   436,     0,     0,     0,   402,     0,   402,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,   400,    43,    44,    45,     0,     0,   551,
    1036,     0,     0,   400,     0,     0,   455,     0,     0,   402,
     552,     0,     0,     0,   400,     0,    80,     0,   402,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   400,     0,   329,     0,     0,     0,     0,   400,
       0,   400,     0,     0,     0,     0,     0,   402,     0,   402,
       0,     0,     0,     0,    80,   213,     0,     0,   400,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    80,   455,   455,     0,     0,   455,
     455,   455,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   213,     0,     0,
       0,     0,     0,     0,     0,   404,     0,     0,     0,     0,
       0,   400,     0,     0,     0,   402,     0,     0,     0,  1116,
       0,     0,     0,     0,     0,   496,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   643,   643,   643,   643,   402,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   402,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    80,    80,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   347,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   455,   455,     0,     0,
       0,   400,     0,     0,     0,   400,   400,   400,     0,     0,
       0,     0,     0,     0,     0,     0,   329,     0,     0,     0,
       0,   400,   400,     0,     0,     0,     0,     0,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   400,   400,     0,
     400,   400,   402,     0,   402,   400,   400,   400,   400,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   400,     0,     0,     0,     0,   402,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   400,     0,    80,
       0,    80,     0,     0,   402,     0,     0,     0,   402,     0,
       0,   347,     0,     0,     0,   402,     0,     0,     0,   402,
       0,     0,   400,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   823,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,   858,   496,     0,     0,     0,   867,     0,     0,     0,
       0,     0,     0,     0,     0,   874,     2,     0,   881,     0,
       0,     0,     0,     0,     0,   115,     0,   329,   329,     0,
     400,   400,   400,   400,   400,   400,   400,   400,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1481,   931,   295,     0,     0,     0,     0,   947,   296,
     297,   298,    28,    29,     0,     0,     0,    32,   400,   400,
       0,     0,   299,   300,    38,     0,     0,     0,   400,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     878,     0,     0,   879,   724,   312,   402,     0,     0,     0,
     402,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     400,     0,     0,     0,   400,   400,   213,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   213,     0,     0,     0,
       0,   402,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   402,     0,   455,   455,     0,   213,     0,     0,   213,
       0,   213,   402,   213,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    68,     0,     0,     0,     0,     0,
     402,     0,   347,     0,     0,     0,     0,   402,     0,   402,
       0,     0,     0,     0,     0,     0,     0,     0,    80,     0,
       0,     0,     0,     0,     0,     0,   402,   455,   455,  1116,
       0,     0,  1116,     0,     0,     0,     0,     0,     0,   111,
       0,  1116,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,     0,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,     0,     0,     0,     0,
    1116,   172,   329,     0,     0,     0,     0,     0,     0,   402,
     249,    68,     0,     2,   643,   643,   643,   643,    68,    68,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   370,  1105,  1106,  1107,
     615,  1108,  1109,  1110,  1111,   620,   621,  1112,     0,     0,
     295,    80,     0,     0,     0,     0,   296,   297,   298,     0,
     469,     0,     0,     0,    32,     0,     0,     0,     0,   299,
     300,  1113,   469,   625,   626,   627,   469,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   310,     0,     0,
     311,     0,   312,   628,   249,   249,     0,   242,     0,   629,
     313,   314,     0,   315,   316,   317,   318,     0,     0,   402,
       0,     0,     0,   402,   402,   402,     0,     0,     0,     0,
       0,     0,     0,     0,   347,     0,     0,   559,     0,   402,
     402,     0,     0,     0,     0,     0,   347,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   823,   823,   823,     0,   402,   402,     0,   402,   402,
       0,     0,     0,   402,   402,   402,   402,   597,     0,     0,
     249,   249,   249,     0,   404,   404,   213,     0,     0,   402,
     172,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     172,   249,    68,     0,     0,   402,   455,     0,   455,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     707,     0,     0,     0,     0,     0,   707,     0,     0,     0,
     402,     0,   455,     0,   455,   729,     0,     0,     0,     0,
       0,     0,    85,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1473,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   404,     0,     0,     0,   114,   126,     0,
     496,   496,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   496,     0,     0,     0,   347,   347,     0,   402,   402,
     402,   402,   402,   402,   402,   402,     0,     0,     0,   177,
     126,     0,     0,     0,   222,     0,    80,     0,   559,    85,
       0,     0,     0,     0,   863,     0,    85,    85,     0,     0,
       0,     0,     0,     0,     0,   863,   402,   402,     0,     0,
       0,     0,     0,     0,   371,     0,   402,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   380,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     559,     0,     0,     0,     0,     0,     0,     0,   213,     0,
       0,     0,     0,   213,     0,     0,     0,   953,     0,  1573,
     455,   455,   455,   455,   455,  1573,     0,     0,   402,     0,
       0,   213,   402,   402,   455,   455,   455,   455,   516,     0,
     559,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   532,     0,     0,     0,     0,     0,     0,     0,   249,
       0,     0,     0,     0,     0,     0,   249,     0,     0,   249,
       0,     0,     0,  1116,  1116,   566,     0,     0,     0,     0,
       0,  1116,     0,  1116,  1116,     0,     0,  1116,   642,     0,
       0,     0,     0,     0,     0,  1116,     0,     0,  1116,     0,
       0,   455,   455,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   126,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   177,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   676,     0,
      85,   727,   347,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,     0,     0,     0,     0,     0,   404,   213,  1130,     0,
       0,     0,     0,     0,     0,   537,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,   249,   249,   249,     0,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   249,   249,   249,     0,     2,   172,     0,     0,     0,
       0,     0,     0,  1190,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   249,     0,     0,
       0,     0,   727,     0,  1217,  1227,   729,     0,  1217,  1227,
       0,     0,   295,     0,     0,  1190,   853,     0,   296,   297,
     298,   685,     0,     0,     0,     0,  1249,     0,     0,   249,
     537,   299,   300,     0,   126,   249,   537,     0,   249,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     0,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1148,   312,  1626,     0,  1149,   926,     0,
       0,   934,   313,   314,     0,   315,   316,   317,   318,  1116,
    1116,  1116,  1116,     0,     0,  1116,     0,     0,     0,  1116,
    1116,     0,  1116,     0,  1116,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   537,  1116,   537,   853,     0,
       0,     0,     0,     0,   823,   823,     0,   559,     0,     0,
       0,     0,     0,     0,   126,   126,   126,     0,     0,     0,
     404,     0,     0,     0,   404,     0,     0,     0,     0,     0,
       0,     0,   126,   126,     0,     0,     0,     0,     0,     0,
       0,     0,   559,     0,     0,     0,     0,     0,     0,     0,
    1433,   559,     0,  1041,     0,  1050,     0,     0,   559,     0,
       0,  1433,   111,   729,     0,   559,  1052,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   404,     0,     0,     0,
       0,     0,  1128,     0,     0,     0,     0,   404,  1805,   404,
    1805,     0,   532,     0,     0,     0,     0,     0,  1146,     0,
       0,     0,     0,     0,     0,   559,     0,     0,     0,   642,
     642,   642,   642,     0,     0,     0,     0,     0,     0,     0,
       0,   559,     0,     0,     0,     0,     0,     0,   992,     0,
       0,  1116,     0,     0,     0,     0,     0,     0,     0,     0,
    1116,     0,  1116,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   727,     0,
     249,   249,   249,     0,     0,   537,     0,  1172,   597,     0,
       0,     0,     0,     0,   676,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1146,     0,     0,     0,
       0,     0,     0,     0,  1116,  1116,     0,     0,  1116,     0,
    1116,     0,  1222,  1116,     0,     0,  1222,  1116,     0,     0,
       0,  1279,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   853,   537,     0,     0,     0,     0,
       0,   496,     0,     0,     0,     0,     0,     0,     0,  1116,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1332,
       0,     0,     0,     0,     0,     0,     0,  1344,     0,     0,
       0,     0,     0,     0,     0,     0,  1116,     0,   249,     0,
       0,     0,     0,     0,     0,     0,     0,  1396,     0,     0,
       0,     0,     0,   404,     0,   213,     0,  1130,   404,     0,
       0,     0,     0,     0,     0,     0,  1180,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   249,   249,   249,   249,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   727,
       0,     0,     0,   853,  1423,     0,     0,     0,   992,   249,
     853,   249,     0,   404,   992,     0,     0,   992,   853,  1437,
       0,     0,     0,     0,     0,     0,  1444,  1664,     0,   853,
     114,   126,     0,     0,     0,   248,     0,     0,     0,     0,
       0,     0,     0,     0,   597,     0,     0,     0,     0,     0,
       0,     0,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,     0,     0,  1708,     0,     0,     0,     0,   126,
       0,  1708,     0,     0,     0,     0,     0,  1476,     0,     2,
       0,     0,     0,   566,     0,     0,     0,     0,     0,   126,
     249,   249,     0,     0,     0,     0,     0,   249,   249,   926,
       0,   249,   249,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,     0,     0,     0,     0,   248,
     248,     0,     0,     0,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   926,     0,     0,   301,
       0,     0,     0,   302,   303,   304,   305,   306,   307,   308,
     309,     0,   558,   310,     0,     0,   311,  1148,   312,     0,
     404,  1746,     0,     0,     0,  1747,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   992,
       0,   537,  1554,     0,     0,     0,     0,     0,     0,     0,
       0,  1562,   596,     0,     0,   248,   248,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   642,     0,     0,
     642,  1596,  1598,     0,  1601,     0,   248,     0,     0,     0,
     537,     0,  1611,     0,     0,     0,     0,     0,     0,     0,
    1620,     0,     0,     0,   404,   706,   404,  1146,     0,     0,
       0,   706,     0,     0,     0,     0,     0,     0,   642,   992,
     728,   992,     0,     0,     0,  1146,     0,     0,     0,     0,
    1146,     0,   642,   642,   642,   642,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1653,     0,  1657,   249,     0,     0,   559,     0,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,  1677,     0,     0,     0,     0,   537,  1686,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,   853,     0,     0,     0,     0,
       0,  1146,     0,   558,     0,     0,     0,     0,     0,     0,
       0,     0,   853,     0,  1222,     0,     0,   992,     0,     0,
       0,     0,  1699,   295,     0,     0,     0,     0,   537,   296,
     297,   298,  1222,     0,     0,     0,     0,     0,     0,  1222,
       0,     0,   299,   300,     0,     0,     0,     0,  1146,     0,
       0,     0,     0,     0,     0,   558,   301,   559,     0,     0,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,   249,   249,   311,  1148,   312,     0,     0,  1746,     0,
       0,     0,  1754,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,   558,     0,     0,     0,     0,
    1146,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,  1146,   248,     0,     0,     0,     0,     0,
       0,   248,     0,     0,   248,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,   537,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,   537,     0,
       0,     0,     0,     0,  1146,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,   726,    28,    29,     0,
     992,     0,    32,     0,     0,    35,    36,   992,    37,    38,
      39,   992,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,   729,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,     0,     0,   851,     0,
       0,     0,     0,     0,  1765,     0,     0,     0,     0,   552,
       0,     0,     0,     0,     0,     0,     0,     0,  1772,     0,
       0,     0,     0,     0,     0,  1775,     0,     0,   248,   248,
     248,   248,     0,   380,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   249,   249,     0,
       0,     0,     0,  1444,     0,   566,   248,   248,   248,     0,
       0,     0,     0,     0,     0,     0,     0,   726,  1189,   559,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   248,     0,     0,     0,     0,     0,     0,  1216,
    1226,   728,     0,  1216,  1226,     0,     0,     0,     0,     0,
    1189,     0,     0,     0,     0,     0,     0,     0,     0,   251,
       0,  1248,     0,     0,   248,     0,     0,     0,     0,     0,
     248,     0,     0,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1829,     0,     0,     0,     0,
       0,   642,   642,     0,     0,  1146,     0,  1146,     0,     0,
    1146,   642,     0,     0,     0,   566,  1859,  1862,     0,  1864,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1146,
       0,  1875,     0,   992,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   537,     0,     0,     0,     0,     0,     0,
       0,   729,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1146,   558,   251,   251,  1146,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   992,
       0,   992,     0,     0,     0,     0,  1146,     0,     0,     0,
       0,     0,     0,     0,     0,  1146,   561,   558,   992,     0,
       0,     0,     0,     0,     0,     0,   558,     0,     0,     0,
       0,     0,     0,   558,     0,     0,     0,     0,   728,     0,
     558,     0,     0,     0,     0,     0,     0,  1127,     0,     0,
       0,     0,     0,     0,  1908,     0,   599,     0,     0,   251,
     251,   251,     0,  1145,     0,     0,     0,  1150,     0,     0,
       0,   992,     0,     0,     0,     0,     0,     0,     0,     0,
     251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     558,     0,     0,     0,     0,     0,     0,     0,     0,   709,
       0,     0,     0,     0,     0,   709,   558,     0,     0,     0,
       0,     0,     0,     0,   731,     0,     0,     0,     0,     0,
       0,     0,     0,   726,     0,     0,  1423,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1231,     0,     0,
       0,     0,     0,     0,     0,   248,   248,   248,  1775,     0,
       0,  1145,  1150,   596,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   853,     0,  1146,
       0,     0,     0,     0,     0,     0,  1278,     0,     0,     0,
       0,     0,     0,   642,  1146,   537,     0,   537,     0,     0,
       0,  1146,     0,     0,     0,  1864,     0,  2024,     0,     0,
       0,   537,   537,     0,     0,     0,  2030,   561,     0,     0,
       0,     0,     0,     0,  1330,     0,     0,     0,     0,     0,
       0,     0,  1343,     0,     0,     0,     0,  1947,  1951,     0,
    1957,  1961,     0,     0,     0,  1965,  1969,  1973,  1977,     0,
       0,     0,  1394,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   248,     0,     0,     0,   727,     0,   561,
       0,     0,     0,     0,     0,     0,     0,   992,     0,  1699,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   561,
       0,     0,     0,     0,   726,     0,     0,     0,     0,     0,
       0,   248,   248,   248,   248,     0,     0,     0,   251,     0,
       0,     0,     0,     0,     0,   251,     0,     0,   251,     0,
       0,     0,     0,     0,   248,     0,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2085,  2088,  1663,  1146,     0,  1146,     0,     0,   642,  1146,
     642,     0,     0,     0,     0,     0,     0,     0,     0,   596,
    1947,  1951,  1957,  1961,  1965,  1969,  1973,  1977,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1707,
       0,     0,     0,     0,     0,     0,  1707,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   537,
       0,     0,     0,     0,  1146,   248,   248,  1146,   537,     0,
       0,     0,   248,   248,     0,   642,   248,   248,     0,     0,
       0,     0,   119,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   251,   251,   251,   251,     0,     0,     0,     0,
    1146,     0,     0,   119,   119,     0,     0,     0,     0,     0,
     992,     0,     0,     0,   537,   537,     0,     0,     0,     0,
     251,   251,   251,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1192,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   251,     0,     0,     0,
       0,   119,   119,  1219,  1229,   731,     0,  1219,  1229,     0,
       0,     0,     0,     0,  1192,     0,  1595,  1597,     0,  1600,
       0,     0,     0,     0,     0,  1251,     0,  1127,   251,     0,
    1150,     0,     0,     0,   251,  1619,     0,   251,     0,     0,
       0,     0,  1145,  1150,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,     0,     0,     0,     0,     0,     0,
    1145,  1150,     0,     0,     0,  1145,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   563,
       0,     0,     0,     0,     0,     0,  1651,     0,  1655,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   561,  1676,     0,   248,
       0,     0,   558,  1685,     0,     0,     0,     0,     0,   119,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,     0,     0,     0,  1145,     0,     0,     0,
       0,   561,   673,     0,     0,     0,     0,     0,     0,     0,
     561,     0,     0,     0,     0,     0,     0,   561,     0,     0,
       0,     0,   731,     0,   561,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1145,  1150,     0,     0,     0,   116,     0,
       0,     0,     0,     0,     0,   133,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   558,     0,   561,     0,     0,     0,   156,   165,
     188,     0,     0,     0,     0,     0,   248,   248,     0,     0,
     561,     0,     0,     0,     0,  1145,     0,  1150,     0,     0,
       0,     0,     0,     0,     0,     0,   119,     0,  1145,  1150,
       0,     0,   563,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   116,   116,   251,
     251,   251,     0,     0,     0,     0,     0,   599,   383,     0,
       0,     0,     0,     0,   479,     0,     0,     0,   119,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1145,
     510,  1150,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   116,
       0,     0,   563,     0,     0,     0,     0,     0,     0,   383,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   156,   555,     0,     0,     0,     0,
     728,     0,     0,     0,     0,   562,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   251,   119,   119,
     119,     0,   119,     0,     0,   673,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   165,   119,   119,   119,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   165,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   555,   563,
       0,     0,   248,   248,     0,     0,     0,     0,   672,     0,
       0,     0,   563,     0,     0,   251,   251,   251,   251,     0,
       0,     0,     0,     0,   558,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   251,     0,
     251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1666,     0,     0,     0,
       0,     0,     0,     0,  1839,     0,     0,     0,     0,     0,
       0,     0,     0,   599,     0,     0,     0,     0,     0,     0,
    1145,  1150,  1145,  1150,     0,  1145,  1854,     0,     0,     0,
       0,  1595,  1861,  1710,  1619,     0,  1150,     0,     0,     0,
    1710,     0,   116,     0,  1145,  1150,  1619,     0,   116,     0,
       0,     0,   841,     0,     0,     0,     0,     0,   846,   251,
     251,     0,   673,     0,     0,     0,   251,   251,   673,     0,
     251,   251,     0,     0,     0,     0,  1145,     0,  1150,     0,
    1145,     0,  1150,     0,   555,     0,   728,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1145,  1150,     0,     0,     0,     0,     0,     0,     0,
    1145,  1150,     0,     0,     0,     0,     0,     0,   555,     0,
       0,     0,     0,     0,     1,     0,     0,     0,   922,     0,
       0,     0,     0,     0,   156,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,   116,   116,   116,     0,   116,     0,
       0,   116,     0,     0,     0,     0,     0,   238,   997,     0,
       0,  1002,   116,   116,   116,    28,    29,     0,     0,     0,
      32,     0,     0,     0,   997,     0,   239,    38,   240,     0,
       0,   510,     0,   555,     0,   116,     0,     0,     0,     0,
       0,   241,     0,     0,     0,   562,     0,     0,   116,     0,
       0,    43,    44,    45,     0,     0,   851,     0,   562,     0,
       0,     0,     0,  1430,     0,     0,     0,   552,     0,     0,
       0,     0,     0,   563,     0,     0,     0,     0,     0,     0,
     563,     0,  1117,     0,  1145,   119,     0,     0,     0,     0,
       0,     0,     0,   251,     0,     0,   561,     0,     0,  1145,
       0,     0,     0,     0,  1150,     0,  1145,  1854,     0,  1150,
    1619,     0,  2023,     0,  2025,     0,  1156,  1160,     0,     0,
    1150,  2029,     0,   119,     0,   246,     0,     0,     0,     0,
       0,     0,   563,     0,     0,     0,     0,   563,     0,     0,
       0,     0,     0,   119,     0,     0,     0,     0,     0,     0,
    1168,     0,     0,   563,     0,     0,     0,     0,   116,     0,
       0,     0,     0,     0,   555,     0,     0,     0,   672,     0,
       0,     0,   726,     0,   672,   467,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   467,     0,     0,
       0,   467,     0,   247,     0,     0,   561,     0,     0,     0,
     563,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     251,   251,     0,     0,     0,     0,     0,     0,     0,   246,
     246,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   247,     0,     0,   119,   119,     0,     0,
       0,     0,   557,     0,     0,   247,   563,     0,   563,   247,
       0,     0,     0,     0,     0,  2084,  2087,     0,  1145,  1150,
    1145,     0,     0,     0,  1145,  1854,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   247,   247,     0,
       0,     0,   595,     0,   738,   246,   246,   246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     765,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1145,
    1150,     0,  1145,  1854,     0,   705,     0,  2130,     0,     0,
       0,   705,     0,     0,   731,     0,     0,   156,     0,   555,
    1871,     0,     1,   291,   100,   292,   555,   293,   294,   672,
     247,   555,     0,   247,   247,   247,  1442,     0,     0,     0,
       0,     0,     0,     0,     0,  1145,     0,     2,   673,     0,
     673,     0,     0,     0,   247,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   116,
       0,     0,     0,   247,     0,     0,   251,   251,   116,   247,
       0,     0,     0,   555,   295,     0,     0,     0,  1477,   116,
     296,   297,   298,   562,     0,     0,     0,     0,   561,   555,
       0,     0,     0,   299,   300,     0,     0,     0,     0,   922,
       0,     0,     0,   557,     0,     0,     0,   301,     0,   862,
       0,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     862,   310,     0,     0,   311,  1148,   312,  1872,     0,  1149,
       0,     0,     0,     0,   313,   314,   555,   315,   316,   317,
     318,     0,     0,     0,     0,     0,   922,     0,     0,     0,
       0,     0,     0,     0,     0,   557,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   952,     0,     0,     0,     0,   247,     0,     0,
       0,     0,   116,   116,     0,     0,     0,     0,   247,     0,
       0,     0,   116,   383,   116,   557,     0,     0,     0,     0,
       0,     0,   562,     0,   562,     0,     0,     0,     0,     0,
     731,     0,     0,     0,   246,     0,     0,     0,     0,     0,
       0,   246,  1589,     0,   246,  1593,     0,     0,     0,     0,
       0,     0,     0,     0,  1608,     0,     0,     0,     0,     0,
     247,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1125,  1632,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1156,  1160,  1156,
    1160,     0,   247,     0,     0,     0,     0,     0,     0,   247,
       0,     0,   247,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   563,     0,     0,     0,     0,     0,     0,
     563,     0,     0,     0,   116,     0,   116,   119,     0,     0,
       0,     0,     0,     0,   672,     0,   672,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   563,     0,   563,
       0,     0,   563,     0,     0,   563,     0,     0,   246,   246,
     246,   246,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,   246,   246,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   738,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,  1280,     0,     0,     0,     0,     0,  1215,
    1225,     0,     0,  1215,  1225,     0,   247,   247,   247,   247,
     119,     0,  1303,  1307,  1311,  1315,  1319,     0,   563,  1328,
    1334,     0,     0,     0,   246,   738,     0,     0,  1345,   563,
     246,     0,     0,   246,   247,   247,   247,     0,     0,     0,
    1369,  1373,  1377,  1381,  1385,     0,     0,  1328,  1398,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     247,     0,     0,     0,     0,     0,     0,   247,   247,     0,
       0,   247,   247,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   247,     0,     0,     0,     0,     0,   247,     0,
       0,   247,   252,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   557,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   557,     0,     0,
       0,     0,   252,     0,     0,  1432,   557,     0,     0,     0,
       0,     0,     0,   557,   252,     0,  1432,     0,   252,   116,
     557,     0,     0,     0,     0,     0,   116,     0,     0,   672,
       0,     0,     0,   116,     0,     0,  1776,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   252,   252,     0,     0,
       0,     0,     0,   116,     0,   555,     0,     0,   116,     0,
       0,   116,     0,  1442,  1731,   562,     0,     0,  1789,     0,
     557,  1002,     0,   247,     0,     0,     0,     0,   563,   563,
       0,   563,     0,     0,   247,     0,   557,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,   252,
       0,     0,   252,   252,   252,   246,   246,   246,     0,   238,
       0,     0,     0,   595,     0,   119,   116,    28,    29,     0,
       0,     0,    32,   252,   116,     0,   841,     0,   239,    38,
     240,     0,     0,     0,   562,   555,  1843,  1845,     0,     0,
       0,     0,   252,   241,  1852,   562,  1855,  1589,   252,     0,
    1593,     0,     0,    43,    44,     0,     0,     0,  1632,     0,
       0,  1868,     0,     0,  -110,     0,     0,     0,     0,     0,
       0,     0,  1125,   247,   247,   247,     0,     0,     0,     0,
       0,   247,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1280,     0,     0,     0,     0,     0,     0,  1345,     0,     0,
       0,     0,     0,   246,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1328,     0,  1328,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   252,     0,     0,     0,
     738,     0,     0,     0,     0,     0,   738,   252,     0,     0,
       0,   246,   246,   246,   246,     0,     0,     0,     0,     0,
       0,   247,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   246,     0,   246,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   252,
    1733,     0,     0,     0,     0,     0,     0,     0,     0,   595,
       0,     0,     0,     0,   116,   116,     0,   116,     0,   247,
     247,   247,   247,     0,   672,   672,     0,  1986,     0,  1706,
       0,     0,     0,     0,     0,     0,  1706,     0,     0,     0,
       0,   252,   247,     0,   247,     0,     0,     0,   252,     0,
       0,   252,     0,     0,     0,   246,   246,     0,     0,     0,
       0,     0,   246,   246,     0,     0,   246,   246,     0,     0,
       0,   116,  2013,  2014,  2015,  2016,     0,   247,  2017,     0,
       0,   997,  1843,  1845,     0,  1852,   290,  1855,     1,   291,
     100,   292,     0,   293,   294,     0,     0,   247,     0,  2026,
       0,     0,     0,     0,   247,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   247,   247,     0,     0,     0,     0,     0,
     247,   247,     0,     0,   247,   247,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   299,
     300,     0,     0,     0,     0,   252,   252,   252,   252,     0,
       0,     0,     0,   301,     0,     0,     0,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  1271,   312,   252,   252,   252,     0,   735,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
     290,     0,     1,   291,   100,   292,     0,   293,   294,   252,
       0,     0,     0,     0,     0,     0,   252,   252,     0,     0,
     252,   252,     0,     0,  2017,     0,     0,     2,     0,     0,
       0,     0,     0,  2093,     0,  2096,     0,     0,     0,     0,
       0,   252,     0,     0,     0,     0,     0,   252,     0,   246,
     252,     0,   557,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   299,   300,     0,     0,  2124,  2125,     0,
       0,  2093,     0,  2096,     0,     0,  2129,   301,     0,     0,
    2131,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,  1148,   312,   247,     0,  1746,
       0,     0,     0,  1889,   313,   314,     0,   315,   316,   317,
     318,     0,  2131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   557,     0,     0,     0,     0,     0,     0,  2167,
       0,     0,     0,     0,     0,     0,   246,   246,     0,     0,
       0,     0,   252,     1,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,   550,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   247,   247,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,  1733,     0,
       0,     0,     0,  1943,  1945,  1949,  1953,  1955,  1959,     0,
      40,     0,  1963,  1967,  1971,  1975,     0,     0,     0,     0,
      43,    44,    45,     0,     0,   551,     0,     0,     0,     0,
       0,     0,   252,   252,   252,     0,   552,     0,   553,     0,
     252,     0,     0,     0,     0,     0,     0,   745,     0,     0,
       0,     0,     0,   746,   747,   748,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,     0,     0,     0,
       0,     0,   246,   246,     0,     0,     0,     0,     0,     0,
       0,     0,  -359,     0,     0,     0,     0,     0,     0,     0,
    -359,  -359,     0,     0,   557,  -359,     0,     0,     0,     0,
       0,  -359,  -359,  -359,     0,     0,     0,     0,     0,     0,
     252,     0,     0,     0,     0,     0,  -359,  1945,  1949,  1955,
    1959,  1963,  1967,  1971,  1975,     0,  -359,  -359,  -359,  -359,
    -359,   749,     0,     0,  -359,  1535,  -359,  -359,     0,   750,
     247,   247,   751,     0,  -359,  -359,  -359,     0,  -359,  -359,
    -359,  -359,  -359,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   252,   252,
     252,   252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   252,     0,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   252,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   252,     0,     0,     0,
       0,     0,     0,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   252,   252,     0,     0,     0,     0,     0,   252,
     252,     0,     0,   252,   252,  -359,   745,     0,  -359,  -359,
    -359,  -359,   746,   747,   748,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,     0,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,     0,     0,
    -359,  -359,     0,  -359,     0,     0,  -359,  -359,  -359,  -359,
    -359,     0,     0,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
       0,  -359,     0,  -359,  -359,  -359,     0,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
     749,  -359,  -359,  -359,  -359,  -359,  -359,  -359,   750,  -359,
    -359,   751,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -361,  1196,     0,  -361,  -361,  -361,  -361,  1197,
    1198,  1199,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,     0,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,     0,   252,  -361,  -361,     0,
    -361,     0,     0,  -361,  -361,  -361,  -361,  -361,     0,     0,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,     0,  -361,     0,
    -361,  -361,  -361,     0,  -361,  -361,  -361,  -361,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  1200,  -361,  -361,
    -361,  -361,  -361,  -361,  -361,  1201,  -361,  -361,  1202,  -361,
    -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,  -361,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   252,   252,  -466,  1141,     0,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,     0,  -466,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,     0,     0,
    -466,  -466,     0,  -466,     0,     0,  -466,  -466,  -466,  -466,
    -466,     0,     0,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
       0,  -466,     0,  -466,  -466,  -466,     0,  -466,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
    -466,  -466,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   252,
     252,  -299,   290,     0,     1,   291,   100,   292,  -299,   293,
     294,  -299,  -299,  -299,  -299,  -299,  -299,  -299,  -299,  -299,
    -299,  -299,  -299,  -299,  -299,  -299,  -299,  -299,  -299,     2,
    -299,  -299,  -299,  -299,  -299,  -299,  -299,  -299,  -299,  -299,
    -299,  -299,  -299,  -299,  -299,  -299,  -299,  -299,  -299,  -299,
    -299,  -299,     0,  -299,  -299,  -299,  -299,  -299,  -299,  -299,
    -299,  -299,  -299,  -299,     0,     0,   295,  -299,     0,  -299,
       0,     0,   296,   297,   298,  -299,  -299,     0,     0,  -299,
    -299,  -299,  -299,  -299,  -299,   299,   300,  -299,  -299,  -299,
    -299,  -299,  -299,  -299,  -299,  -299,     0,  -299,     0,   301,
    -299,  -299,     0,   302,   303,   304,   305,   306,   307,   308,
     309,  -299,  -299,   310,  -299,  -299,   311,  1246,   312,  -299,
    -299,  1144,  -299,  -299,  -299,  -299,   313,   314,  -299,   315,
     316,   317,   318,  -299,  -299,  -299,  -299,  -299,  -300,   290,
       0,     1,   291,   100,   292,  -300,   293,   294,  -300,  -300,
    -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,
    -300,  -300,  -300,  -300,  -300,  -300,     2,  -300,  -300,  -300,
    -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,
    -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,     0,
    -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,  -300,
    -300,     0,     0,   295,  -300,     0,  -300,     0,     0,   296,
     297,   298,  -300,  -300,     0,     0,  -300,  -300,  -300,  -300,
    -300,  -300,   299,   300,  -300,  -300,  -300,  -300,  -300,  -300,
    -300,  -300,  -300,     0,  -300,     0,   301,  -300,  -300,     0,
     302,   303,   304,   305,   306,   307,   308,   309,  -300,  -300,
     310,  -300,  -300,   311,  1148,   312,  -300,  -300,  1149,  -300,
    -300,  -300,  -300,   313,   314,  -300,   315,   316,   317,   318,
    -300,  -300,  -300,  -300,  -300,  -595,   290,     0,     1,   291,
     100,   292,  -595,   293,   294,  -595,  -595,  -595,  -595,  -595,
    -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,
    -595,  -595,  -595,     2,  -595,  -595,  -595,  -595,  -595,  -595,
    -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,
    -595,  -595,  -595,  -595,  -595,  -595,     0,  -595,  -595,  -595,
    -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,     0,     0,
     295,  -595,     0,  -595,     0,     0,   296,   297,   298,  -595,
    -595,     0,     0,  -595,  -595,  -595,  -595,  -595,  -595,   299,
     300,  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,  -595,
       0,  -595,     0,   301,  -595,  -595,     0,   302,   303,   304,
     305,   306,   307,   308,   309,  -595,  -595,   310,  -595,  -595,
     311,  -595,   312,  -595,  -595,  -595,  -595,   735,  -595,  1327,
     313,   314,  -595,   315,   316,   317,   318,  -595,  -595,  -595,
    -595,  -595,  -596,   290,     0,     1,   291,   100,   292,  -596,
     293,   294,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,
    -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,
       2,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,
    -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,
    -596,  -596,  -596,     0,  -596,  -596,  -596,  -596,  -596,  -596,
    -596,  -596,  -596,  -596,  -596,     0,     0,   295,  -596,     0,
    -596,     0,     0,   296,   297,   298,  -596,  -596,     0,     0,
    -596,  -596,  -596,  -596,  -596,  -596,   299,   300,  -596,  -596,
    -596,  -596,  -596,  -596,  -596,  -596,  -596,     0,  -596,     0,
     301,  -596,  -596,     0,   302,   303,   304,   305,   306,   307,
     308,   309,  -596,  -596,   310,  -596,  -596,   311,  -596,   312,
    -596,  -596,  -596,  -596,   735,  -596,  1393,   313,   314,  -596,
     315,   316,   317,   318,  -596,  -596,  -596,  -596,  -596,  -606,
     290,     0,     1,   291,   100,   292,  -606,   293,   294,  -606,
    -606,  -606,  -606,  -606,  -606,  -606,  -606,  -606,  -606,  -606,
    -606,  -606,  -606,  -606,  -606,  -606,  -606,     2,  -606,  -606,
    -606,  -606,  -606,  -606,  -606,  -606,  -606,  -606,  -606,  -606,
    -606,  -606,  -606,  -606,  -606,  -606,  -606,  -606,  -606,  -606,
       0,  -606,  -606,  -606,  -606,  -606,  -606,  -606,  -606,  -606,
    -606,  -606,     0,     0,   295,  -606,     0,  -606,     0,     0,
     296,   297,   298,  -606,  -606,     0,     0,  -606,  -606,  -606,
    -606,  -606,  -606,   299,   300,  -606,  -606,  -606,  -606,  -606,
    -606,  -606,  -606,  -606,     0,  -606,     0,   301,  -606,  -606,
       0,   302,   303,   304,   305,   306,   307,   308,   309,  -606,
    -606,   310,  -606,  -606,   311,  -606,   312,  -606,  -606,  1144,
    -606,  -606,  -606,  -606,   313,   314,  -606,   315,   316,   317,
     318,  -606,  -606,  -606,  -606,  -606,  -608,   290,     0,     1,
     291,   100,   292,  -608,   293,   294,  -608,  -608,  -608,  -608,
    -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,
    -608,  -608,  -608,  -608,     2,  -608,  -608,  -608,  -608,  -608,
    -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,
    -608,  -608,  -608,  -608,  -608,  -608,  -608,     0,  -608,  -608,
    -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,     0,
       0,   295,  -608,     0,  -608,     0,     0,   296,   297,   298,
    -608,  -608,     0,     0,  -608,  -608,  -608,  -608,  -608,  -608,
     299,   300,  -608,  -608,  -608,  -608,  -608,  -608,  -608,  -608,
    -608,     0,  -608,     0,   301,  -608,  -608,     0,   302,   303,
     304,   305,   306,   307,   308,   309,  -608,  -608,   310,  -608,
    -608,   311,  1148,   312,  -608,  -608,  1149,  -608,  -608,  -608,
    -608,   313,   314,  -608,   315,   316,   317,   318,  -608,  -608,
    -608,  -608,  -608,  -607,   290,     0,     1,   291,   100,   292,
    -607,   293,   294,  -607,  -607,  -607,  -607,  -607,  -607,  -607,
    -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,
    -607,     2,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,
    -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,
    -607,  -607,  -607,  -607,     0,  -607,  -607,  -607,  -607,  -607,
    -607,  -607,  -607,  -607,  -607,  -607,     0,     0,   295,  -607,
       0,  -607,     0,     0,   296,   297,   298,  -607,  -607,     0,
       0,  -607,  -607,  -607,  -607,  -607,  -607,   299,   300,  -607,
    -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,     0,  -607,
       0,   301,  -607,  -607,     0,   302,   303,   304,   305,   306,
     307,   308,   309,  -607,  -607,   310,  -607,  -607,   311,  -607,
     312,  -607,  -607,  1144,  -607,  -607,  -607,  -607,   313,   314,
    -607,   315,   316,   317,   318,  -607,  -607,  -607,  -607,  -607,
    -352,  1897,     0,  -352,  -352,  -352,  -352,  -352,  -352,  -352,
    -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,
    -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,
    -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,
    -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,
    -352,     0,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,
    -352,  -352,  -352,     0,     0,  -352,  -352,     0,  -352,     0,
       0,  -352,  -352,  -352,  -352,  -352,     0,     0,  -352,  -352,
    -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,
    -352,  -352,  -352,  -352,  -352,     0,  -352,     0,  -352,  -352,
    -352,     0,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,
    -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,
    -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,  -352,
    -352,  -352,  -352,  -352,  -352,  -352,  -352,  -357,  1940,     0,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,     0,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
       0,     0,  -357,  -357,     0,  -357,     0,     0,  -357,  -357,
    -357,  -357,  -357,     0,     0,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,     0,  -357,     0,  -357,  -357,  -357,     0,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -345,   290,     0,     1,   291,   100,
     292,  -345,   293,   294,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,     2,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,     0,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,     0,   295,
    -345,     0,  -345,     0,     0,   296,   297,   298,  -345,  -345,
       0,     0,  -345,  -345,  -345,  -345,  -345,  -345,   299,   300,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,
    -345,     0,   301,  -345,  -345,     0,   302,   303,   304,   305,
     306,   307,   308,   309,  -345,  -345,   310,  -345,  -345,   311,
    -345,   312,  -345,  -345,  -345,  -345,   735,  -345,  -345,   313,
     314,  -345,   315,   316,   317,   318,  -345,  -345,  -345,  -345,
    -345,  -573,   290,     0,     1,   291,   100,   292,  -573,   293,
     294,  -573,  -573,  -573,  -573,  -573,  -573,  -573,  -573,  -573,
    -573,  -573,  -573,  -573,  -573,  -573,  -573,  -573,  -573,     2,
    -573,  -573,  -573,  -573,  -573,  -573,  -573,  -573,  -573,  -573,
    -573,  -573,  -573,  -573,  -573,  -573,  -573,  -573,  -573,  -573,
    -573,  -573,     0,  -573,  -573,  -573,  -573,  -573,  -573,  -573,
    -573,  -573,  -573,  -573,     0,     0,   295,  -573,     0,  -573,
       0,     0,   296,   297,   298,  -573,  -573,     0,     0,  -573,
    -573,  -573,  -573,  -573,  -573,   299,   300,  -573,  -573,  -573,
    -573,  -573,  -573,  -573,  -573,  -573,     0,  -573,     0,   301,
    -573,  -573,     0,   302,   303,   304,   305,   306,   307,   308,
     309,  -573,  -573,   310,  -573,  -573,   311,  -573,   312,  -573,
    -573,  -573,  -573,   735,  -573,  -573,   313,   314,  -573,   315,
     316,   317,   318,  -573,  -573,  -573,  -573,  -573,  -581,   290,
       0,     1,   291,   100,   292,  -581,   293,   294,  -581,  -581,
    -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,
    -581,  -581,  -581,  -581,  -581,  -581,     2,  -581,  -581,  -581,
    -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,
    -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,     0,
    -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,
    -581,     0,     0,   295,  -581,     0,  -581,     0,     0,   296,
     297,   298,  -581,  -581,     0,     0,  -581,  -581,  -581,  -581,
    -581,  -581,   299,   300,  -581,  -581,  -581,  -581,  -581,  -581,
    -581,  -581,  -581,     0,  -581,     0,   301,  -581,  -581,     0,
     302,   303,   304,   305,   306,   307,   308,   309,  -581,  -581,
     310,  -581,  -581,   311,  -581,   312,  -581,  -581,  -581,  -581,
     735,  -581,  -581,   313,   314,  -581,   315,   316,   317,   318,
    -581,  -581,  -581,  -581,  -581,  -574,   290,     0,     1,   291,
     100,   292,  -574,   293,   294,  -574,  -574,  -574,  -574,  -574,
    -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,
    -574,  -574,  -574,     2,  -574,  -574,  -574,  -574,  -574,  -574,
    -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,
    -574,  -574,  -574,  -574,  -574,  -574,     0,  -574,  -574,  -574,
    -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,     0,     0,
     295,  -574,     0,  -574,     0,     0,   296,   297,   298,  -574,
    -574,     0,     0,  -574,  -574,  -574,  -574,  -574,  -574,   299,
     300,  -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,  -574,
       0,  -574,     0,   301,  -574,  -574,     0,   302,   303,   304,
     305,   306,   307,   308,   309,  -574,  -574,   310,  -574,  -574,
     311,  -574,   312,  -574,  -574,  -574,  -574,   735,  -574,  -574,
     313,   314,  -574,   315,   316,   317,   318,  -574,  -574,  -574,
    -574,  -574,  -582,   290,     0,     1,   291,   100,   292,  -582,
     293,   294,  -582,  -582,  -582,  -582,  -582,  -582,  -582,  -582,
    -582,  -582,  -582,  -582,  -582,  -582,  -582,  -582,  -582,  -582,
       2,  -582,  -582,  -582,  -582,  -582,  -582,  -582,  -582,  -582,
    -582,  -582,  -582,  -582,  -582,  -582,  -582,  -582,  -582,  -582,
    -582,  -582,  -582,     0,  -582,  -582,  -582,  -582,  -582,  -582,
    -582,  -582,  -582,  -582,  -582,     0,     0,   295,  -582,     0,
    -582,     0,     0,   296,   297,   298,  -582,  -582,     0,     0,
    -582,  -582,  -582,  -582,  -582,  -582,   299,   300,  -582,  -582,
    -582,  -582,  -582,  -582,  -582,  -582,  -582,     0,  -582,     0,
     301,  -582,  -582,     0,   302,   303,   304,   305,   306,   307,
     308,   309,  -582,  -582,   310,  -582,  -582,   311,  -582,   312,
    -582,  -582,  -582,  -582,   735,  -582,  -582,   313,   314,  -582,
     315,   316,   317,   318,  -582,  -582,  -582,  -582,  -582,  -575,
     290,     0,     1,   291,   100,   292,  -575,   293,   294,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,     2,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
       0,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,     0,     0,   295,  -575,     0,  -575,     0,     0,
     296,   297,   298,  -575,  -575,     0,     0,  -575,  -575,  -575,
    -575,  -575,  -575,   299,   300,  -575,  -575,  -575,  -575,  -575,
    -575,  -575,  -575,  -575,     0,  -575,     0,   301,  -575,  -575,
       0,   302,   303,   304,   305,   306,   307,   308,   309,  -575,
    -575,   310,  -575,  -575,   311,  -575,   312,  -575,  -575,  -575,
    -575,   735,  -575,  -575,   313,   314,  -575,   315,   316,   317,
     318,  -575,  -575,  -575,  -575,  -575,  -583,   290,     0,     1,
     291,   100,   292,  -583,   293,   294,  -583,  -583,  -583,  -583,
    -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,
    -583,  -583,  -583,  -583,     2,  -583,  -583,  -583,  -583,  -583,
    -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,
    -583,  -583,  -583,  -583,  -583,  -583,  -583,     0,  -583,  -583,
    -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,     0,
       0,   295,  -583,     0,  -583,     0,     0,   296,   297,   298,
    -583,  -583,     0,     0,  -583,  -583,  -583,  -583,  -583,  -583,
     299,   300,  -583,  -583,  -583,  -583,  -583,  -583,  -583,  -583,
    -583,     0,  -583,     0,   301,  -583,  -583,     0,   302,   303,
     304,   305,   306,   307,   308,   309,  -583,  -583,   310,  -583,
    -583,   311,  -583,   312,  -583,  -583,  -583,  -583,   735,  -583,
    -583,   313,   314,  -583,   315,   316,   317,   318,  -583,  -583,
    -583,  -583,  -583,  -576,   290,     0,     1,   291,   100,   292,
    -576,   293,   294,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,     2,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,     0,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,     0,     0,   295,  -576,
       0,  -576,     0,     0,   296,   297,   298,  -576,  -576,     0,
       0,  -576,  -576,  -576,  -576,  -576,  -576,   299,   300,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,     0,  -576,
       0,   301,  -576,  -576,     0,   302,   303,   304,   305,   306,
     307,   308,   309,  -576,  -576,   310,  -576,  -576,   311,  -576,
     312,  -576,  -576,  -576,  -576,   735,  -576,  -576,   313,   314,
    -576,   315,   316,   317,   318,  -576,  -576,  -576,  -576,  -576,
    -584,   290,     0,     1,   291,   100,   292,  -584,   293,   294,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,     2,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,     0,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,     0,     0,   295,  -584,     0,  -584,     0,
       0,   296,   297,   298,  -584,  -584,     0,     0,  -584,  -584,
    -584,  -584,  -584,  -584,   299,   300,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,     0,  -584,     0,   301,  -584,
    -584,     0,   302,   303,   304,   305,   306,   307,   308,   309,
    -584,  -584,   310,  -584,  -584,   311,  -584,   312,  -584,  -584,
    -584,  -584,   735,  -584,  -584,   313,   314,  -584,   315,   316,
     317,   318,  -584,  -584,  -584,  -584,  -584,  -354,  2043,     0,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,     0,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
       0,     0,  -354,  -354,     0,  -354,     0,     0,  -354,  -354,
    -354,  -354,  -354,     0,     0,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,     0,  -354,     0,  -354,  -354,  -354,     0,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,  -354,
    -354,  -354,  -354,  -354,  -353,  2044,     0,  -353,  -353,  -353,
    -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,
    -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,
    -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,
    -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,
    -353,  -353,  -353,  -353,  -353,     0,  -353,  -353,  -353,  -353,
    -353,  -353,  -353,  -353,  -353,  -353,  -353,     0,     0,  -353,
    -353,     0,  -353,     0,     0,  -353,  -353,  -353,  -353,  -353,
       0,     0,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,
    -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,     0,
    -353,     0,  -353,  -353,  -353,     0,  -353,  -353,  -353,  -353,
    -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,
    -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,
    -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,  -353,
    -353,  -359,   745,     0,  -359,  -359,  -359,  -359,   746,   747,
     748,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,     0,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,     0,     0,  -359,  -359,     0,  -359,
       0,     0,  -359,  -359,  -359,  -359,  -359,     0,     0,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,     0,  -359,     0,  -359,
    -359,  -359,     0,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,   749,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  1139,  -359,  -359,   751,     0,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -466,  1141,
       0,  -466,  -466,  -466,  -466,     0,  -466,  -466,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -466,  -466,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,     0,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
    -466,     0,     0,  -466,  -466,     0,  -466,     0,     0,  -466,
    -466,  -466,  -466,  -466,     0,     0,  -466,  -466,  -466,  -466,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
    -466,  -466,  -466,     0,  -466,     0,  -466,  -466,  -466,     0,
    -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,  -466,
    -466,     0,     0,  -466,  -466,  -466,  -466,     0,  -466,  -466,
    -466,  1142,  -466,  -466,  -466,     0,  -466,  -466,  -466,  -466,
   -1102,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1102,
   -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102,
   -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102,
   -1102,     0, -1102, -1102, -1102, -1102, -1102, -1102, -1102, -1102,
   -1102, -1102, -1102,     0,     0,   295, -1102,     0, -1102,     0,
       0,   296,   297,   298, -1102, -1102,     0,     0, -1102, -1102,
   -1102, -1102, -1102, -1102,   299,   300, -1102, -1102, -1102, -1102,
   -1102, -1102, -1102, -1102, -1102,     0, -1102,     0,   301, -1102,
   -1102,     0,   302,   303,   304,   305,   306,   307,   308,   309,
   -1102, -1102,   310,     0,     0,   311,  1148,   312, -1102,     0,
    1149, -1102, -1102,     0, -1102,   313,   314,     0,   315,   316,
     317,   318, -1235,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235,     0, -1235, -1235, -1235, -1235, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235,     0,     0,   295, -1235,     0,
   -1235,     0,     0,   296,   297,   298, -1235, -1235,     0,     0,
   -1235, -1235, -1235, -1235, -1235, -1235,   299,   300, -1235, -1235,
   -1235, -1235, -1235, -1235, -1235, -1235, -1235,     0, -1235,     0,
     301, -1235, -1235,     0,   302,   303,   304,   305,   306,   307,
     308,   309, -1235, -1235,   310,     0,     0,   311,  1148,   312,
    1626,     0,  1149, -1235, -1235,     0, -1235,   313,   314,     0,
     315,   316,   317,   318, -1193,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1193, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193,     0, -1193, -1193, -1193, -1193,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193,     0,     0,   295,
   -1193,     0, -1193,     0,     0,   296,   297,   298, -1193, -1193,
       0,     0, -1193, -1193, -1193, -1193, -1193, -1193,   299,   300,
   -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193, -1193,     0,
   -1193,     0,   301, -1193, -1193,     0,   302,   303,   304,   305,
     306,   307,   308,   309, -1193, -1193,   310,     0,     0,   311,
    1848,   312, -1193,     0,  1149, -1193, -1193,     0, -1193,   313,
     314,     0,   315,   316,   317,   318, -1224,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1224, -1224, -1224, -1224, -1224,
   -1224, -1224, -1224, -1224, -1224, -1224, -1224, -1224, -1224, -1224,
   -1224, -1224, -1224, -1224, -1224, -1224, -1224,     0,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,     0,
       0,   295, -1224,     0, -1224,     0,     0,   296,   297,   298,
   -1224, -1224,     0,     0, -1224,    32, -1224, -1224, -1224, -1224,
     299,   300,  1113, -1224,   625,   626,   627, -1224, -1224, -1224,
   -1224,     0, -1224,     0,   301, -1224, -1224,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,  1148,   312,   628,     0,  1149, -1224,   242,     0,
     629,   313,   314,     0,   315,   316,   317,   318,  -607,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,  -607,  -607,  -607,
    -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,
    -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,     0,
    -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,  -607,
    -607,     0,     0,   295,  -607,     0,  -607,     0,     0,   296,
     297,   298,  -607,  -607,     0,     0,  -607,  -607,  -607,  -607,
    -607,  -607,   299,   300,  -607,  -607,  -607,  -607,  -607,  -607,
    -607,  -607,  -607,     0,  -607,     0,   301,  -607,  -607,     0,
     302,   303,   304,   305,   306,   307,   308,   309,  -607,  -607,
     310,     0,     0,   311,  -607,   312,  1143,     0,  1144,  -607,
    -607,     0,  -607,   313,   314,     0,   315,   316,   317,   318,
   -1216,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216,     0, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216,     0,     0,   295, -1216,     0, -1216,     0,
       0,   296,   297,   298, -1216, -1216,     0,     0, -1216, -1216,
   -1216, -1216, -1216, -1216,   299,   300, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216,     0, -1216,     0,   301, -1216,
   -1216,     0,   302,   303,   304,   305,   306,   307,   308,   309,
   -1216, -1216,   310,     0,     0,   311,  2089,   312, -1216,     0,
    1144, -1216, -1216,     0, -1216,   313,   314,     0,   315,   316,
     317,   318, -1217,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217,
   -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217, -1217,
   -1217, -1217, -1217,     0, -1217, -1217, -1217, -1217, -1217, -1217,
   -1217, -1217, -1217, -1217, -1217,     0,     0,   295, -1217,     0,
   -1217,     0,     0,   296,   297,   298, -1217, -1217,     0,     0,
   -1217, -1217, -1217, -1217, -1217, -1217,   299,   300, -1217, -1217,
   -1217, -1217, -1217, -1217, -1217, -1217, -1217,     0, -1217,     0,
     301, -1217, -1217,     0,   302,   303,   304,   305,   306,   307,
     308,   309, -1217, -1217,   310,     0,     0,   311,  1148,   312,
    2090,     0,  1149, -1217, -1217,     0, -1217,   313,   314,     0,
     315,   316,   317,   318, -1211,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1211, -1211, -1211, -1211, -1211, -1211, -1211,
   -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211,
   -1211, -1211, -1211, -1211, -1211,     0,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,     0,     0,   295,
   -1211,     0, -1211,     0,     0,   296,   297,   298, -1211, -1211,
       0,     0, -1211,    32, -1211, -1211, -1211, -1211,   299,   300,
    1113, -1211,   625,   626,   627, -1211, -1211, -1211, -1211,     0,
   -1211,     0,   301, -1211, -1211,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
    1148,   312,   628,     0,  1149, -1211,   242,     0,   629,   313,
     314,     0,   315,   316,   317,   318, -1159,   603,     0, -1159,
   -1159, -1159, -1159,     0, -1159, -1159,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159,     0, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,     0,
       0, -1159, -1159,     0, -1159,     0,     0, -1159, -1159, -1159,
   -1159, -1159,     0,     0, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,
   -1159,     0, -1159,     0, -1159, -1159, -1159,     0, -1159, -1159,
   -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159, -1159,     0,
       0, -1159,     0, -1159,   604,     0, -1159, -1159, -1159,     0,
   -1159, -1159, -1159,     0, -1159, -1159, -1159, -1159, -1182,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,     0,     0,   295,   238,     0, -1182,     0,     0,   296,
     297,   298,    28,    29,     0,     0, -1182,    32, -1182, -1182,
   -1182, -1182,   299,   623,   624,   240,   625,   626,   627, -1182,
   -1182, -1182, -1182,     0, -1182,     0,   301, -1182,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   628,     0, -1182, -1182,
     242,     0,   629,   313,   314,     0,   315,   316,   317,   318,
   -1160,   603,     0, -1160, -1160, -1160, -1160,     0, -1160, -1160,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160,     0, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160,     0,     0, -1160, -1160,     0, -1160,     0,
       0, -1160, -1160, -1160, -1160, -1160,     0,     0, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160, -1160, -1160,     0, -1160,     0, -1160, -1160,
   -1160,     0, -1160, -1160, -1160, -1160, -1160, -1160, -1160, -1160,
   -1160, -1160, -1160,     0,     0, -1160,     0, -1160,   604,     0,
   -1160, -1160, -1160,     0, -1160, -1160, -1160,     0, -1160, -1160,
   -1160, -1160, -1221,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221, -1221, -1221,     0,  1105,  1106,  1107,   615,  1108,  1109,
    1110,  1111,   620,   621,  1112,     0,     0,   295, -1221,     0,
   -1221,     0,     0,   296,   297,   298, -1221, -1221,     0,     0,
   -1221,    32, -1221, -1221, -1221, -1221,   299,   300,  1113, -1221,
     625,   626,   627, -1221, -1221, -1221, -1221,     0, -1221,     0,
     301, -1221, -1221,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,     0,   312,
     628,     0, -1221, -1221,   242,     0,   629,   313,   314,     0,
     315,   316,   317,   318, -1237,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1237, -1237, -1237, -1237, -1237, -1237, -1237,
   -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237,
   -1237, -1237, -1237, -1237, -1237,     0, -1237, -1237, -1237, -1237,
   -1237, -1237, -1237, -1237, -1237, -1237, -1237,     0,     0,   295,
   -1237,     0, -1237,     0,     0,   296,   297,   298, -1237, -1237,
       0,     0, -1237, -1237, -1237, -1237, -1237, -1237,   299,   300,
   -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237, -1237,     0,
   -1237,     0,   301, -1237, -1237,     0,   302,   303,   304,   305,
     306,   307,   308,   309, -1237, -1237,   310,     0,     0,   311,
       0,   312,  1124,     0, -1237, -1237,   735,     0, -1237,   313,
     314,     0,   315,   316,   317,   318, -1172,  1151,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,     0,
       0,   295,   238,     0, -1172,     0,     0,   296,   297,   298,
      28,    29,     0,     0, -1172,    32, -1172, -1172, -1172, -1172,
     299,   623,   624,   240,   625,   626,   627, -1172, -1172, -1172,
   -1172,     0, -1172,     0,   301, -1172,   241,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,   628,     0, -1172, -1172,   242,     0,
     629,   313,   314,     0,   315,   316,   317,   318, -1176,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,     0,     0,   295,   238,     0, -1176,     0,     0,   296,
     297,   298,    28,    29,     0,     0, -1176,    32, -1176, -1176,
   -1176, -1176,   299,   623,   624,   240,   625,   626,   627, -1176,
   -1176, -1176, -1176,     0, -1176,     0,   301, -1176,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   628,     0, -1176, -1176,
     242,     0,   629,   313,   314,     0,   315,   316,   317,   318,
   -1171,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,     0,     0,   295,   238,     0, -1171,     0,
       0,   296,   297,   298,    28,    29,     0,     0, -1171,    32,
   -1171, -1171, -1171, -1171,   299,   623,   624,   240,   625,   626,
     627, -1171, -1171, -1171, -1171,     0, -1171,     0,   301, -1171,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   628,     0,
   -1171, -1171,   242,     0,   629,   313,   314,     0,   315,   316,
     317,   318, -1175,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,     0,     0,   295,   238,     0,
   -1175,     0,     0,   296,   297,   298,    28,    29,     0,     0,
   -1175,    32, -1175, -1175, -1175, -1175,   299,   623,   624,   240,
     625,   626,   627, -1175, -1175, -1175, -1175,     0, -1175,     0,
     301, -1175,   241,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,     0,   312,
     628,     0, -1175, -1175,   242,     0,   629,   313,   314,     0,
     315,   316,   317,   318, -1089,  1164,     0, -1089, -1089, -1089,
   -1089,     0, -1089, -1089,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089,     0, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089, -1089, -1089,     0,     0, -1089,
   -1089,     0, -1089,     0,     0, -1089, -1089, -1089, -1089, -1089,
       0,     0, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089, -1089,     0,
   -1089,     0, -1089, -1089, -1089,     0, -1089, -1089, -1089, -1089,
   -1089, -1089, -1089, -1089, -1089, -1089, -1089,     0,     0, -1089,
       0, -1089, -1089,     0, -1089, -1089, -1089,     0, -1089, -1089,
   -1089,     0, -1089, -1089, -1089, -1089, -1091,  1165,     0, -1091,
   -1091, -1091, -1091,     0, -1091, -1091,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091,     0, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,     0,
       0, -1091, -1091,     0, -1091,     0,     0, -1091, -1091, -1091,
   -1091, -1091,     0,     0, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091,     0, -1091,     0, -1091, -1091, -1091,     0, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,     0,
       0, -1091,     0, -1091, -1091,     0, -1091, -1091, -1091,     0,
   -1091, -1091, -1091,     0, -1091, -1091, -1091, -1091, -1131,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,
   -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131, -1131,     0,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,     0,     0,   295, -1131,     0, -1131,     0,     0,   296,
     297,   298, -1131, -1131,     0,     0, -1131,    32, -1131, -1131,
   -1131, -1131,   299,   300,  1113, -1131,   625,   626,   627, -1131,
   -1131, -1131, -1131,     0, -1131,     0,   301, -1131, -1131,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   628,     0, -1131, -1131,
     242,     0,   629,   313,   314,     0,   315,   316,   317,   318,
   -1133,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1133,
   -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133,
   -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133, -1133,
   -1133,     0,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,     0,     0,   295, -1133,     0, -1133,     0,
       0,   296,   297,   298, -1133, -1133,     0,     0, -1133,    32,
   -1133, -1133, -1133, -1133,   299,   300,  1113, -1133,   625,   626,
     627, -1133, -1133, -1133, -1133,     0, -1133,     0,   301, -1133,
   -1133,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   628,     0,
   -1133, -1133,   242,     0,   629,   313,   314,     0,   315,   316,
     317,   318, -1173,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,     0,     0,   295,   238,     0,
   -1173,     0,     0,   296,   297,   298,    28,    29,     0,     0,
   -1173,    32, -1173, -1173, -1173, -1173,   299,   623,   624,   240,
     625,   626,   627, -1173, -1173, -1173, -1173,     0, -1173,     0,
     301, -1173,   241,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,     0,   312,
     628,     0, -1173, -1173,   242,     0,   629,   313,   314,     0,
     315,   316,   317,   318, -1177,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,     0,     0,   295,
     238,     0, -1177,     0,     0,   296,   297,   298,    28,    29,
       0,     0, -1177,    32, -1177, -1177, -1177, -1177,   299,   623,
     624,   240,   625,   626,   627, -1177, -1177, -1177, -1177,     0,
   -1177,     0,   301, -1177,   241,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,   628,     0, -1177, -1177,   242,     0,   629,   313,
     314,     0,   315,   316,   317,   318, -1174,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,     0,
       0,   295,   238,     0, -1174,     0,     0,   296,   297,   298,
      28,    29,     0,     0, -1174,    32, -1174, -1174, -1174, -1174,
     299,   623,   624,   240,   625,   626,   627, -1174, -1174, -1174,
   -1174,     0, -1174,     0,   301, -1174,   241,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,   628,     0, -1174, -1174,   242,     0,
     629,   313,   314,     0,   315,   316,   317,   318, -1178,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,     0,     0,   295,   238,     0, -1178,     0,     0,   296,
     297,   298,    28,    29,     0,     0, -1178,    32, -1178, -1178,
   -1178, -1178,   299,   623,   624,   240,   625,   626,   627, -1178,
   -1178, -1178, -1178,     0, -1178,     0,   301, -1178,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   628,     0, -1178, -1178,
     242,     0,   629,   313,   314,     0,   315,   316,   317,   318,
   -1169,   603,     0, -1169, -1169, -1169, -1169,     0, -1169, -1169,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1169, -1169,
   -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169,     0, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169, -1169, -1169,     0,     0, -1169, -1169,     0, -1169,     0,
       0, -1169, -1169, -1169, -1169, -1169,     0,     0, -1169, -1169,
   -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169, -1169, -1169, -1169, -1169,     0, -1169,     0, -1169, -1169,
   -1169,     0, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169, -1169, -1169,     0,     0, -1169,     0, -1169,   604,     0,
   -1169, -1169, -1169,     0, -1169, -1169, -1169,     0, -1169, -1169,
   -1169, -1169, -1170,   603,     0, -1170, -1170, -1170, -1170,     0,
   -1170, -1170,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170,     0, -1170, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170, -1170, -1170,     0,     0, -1170, -1170,     0,
   -1170,     0,     0, -1170, -1170, -1170, -1170, -1170,     0,     0,
   -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170, -1170, -1170, -1170, -1170,     0, -1170,     0,
   -1170, -1170, -1170,     0, -1170, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170, -1170, -1170,     0,     0, -1170,     0, -1170,
     604,     0, -1170, -1170, -1170,     0, -1170, -1170, -1170,     0,
   -1170, -1170, -1170, -1170, -1016,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016,     0, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016,     0,     0,   295,
   -1016,     0, -1016,     0,     0,   296,   297,   298, -1016, -1016,
       0,     0, -1016, -1016, -1016, -1016, -1016, -1016,   299,   300,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,     0,
   -1016,     0,   301, -1016, -1016,     0,   302,   303,   304,   305,
     306,   307,   308,   309, -1016, -1016,   310,     0,     0,   311,
       0,   312, -1016,     0,  1821,  1822,  1004,     0, -1016,   313,
     314,     0,   315,   316,   317,   318, -1018,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018,     0, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,     0,
       0,   295, -1018,     0, -1018,     0,     0,   296,   297,   298,
   -1018, -1018,     0,     0, -1018, -1018, -1018, -1018, -1018, -1018,
     299,   300, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018,     0, -1018,     0,   301, -1018, -1018,     0,   302,   303,
     304,   305,   306,   307,   308,   309, -1018, -1018,   310,     0,
       0,   311,     0,   312, -1018,     0, -1018,  2004,  1004,     0,
   -1018,   313,   314,     0,   315,   316,   317,   318, -1012,  2007,
       0, -1012, -1012, -1012, -1012,     0, -1012, -1012,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1012, -1012, -1012, -1012,
   -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012,
   -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012,     0,
   -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012,
   -1012,     0,     0, -1012, -1012,     0, -1012,     0,     0, -1012,
   -1012, -1012, -1012, -1012,     0,     0, -1012, -1012, -1012, -1012,
   -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012,
   -1012, -1012, -1012,     0, -1012,     0, -1012, -1012, -1012,     0,
   -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012, -1012,
   -1012,     0,     0, -1012,     0, -1012, -1012,     0, -1012, -1012,
   -1012,     0, -1012, -1012, -1012,     0, -1012, -1012, -1012, -1012,
   -1218,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1218,
   -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218,
   -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218,
   -1218,     0, -1218, -1218, -1218, -1218, -1218, -1218, -1218, -1218,
   -1218, -1218, -1218,     0,     0,   295, -1218,     0, -1218,     0,
       0,   296,   297,   298, -1218, -1218,     0,     0, -1218, -1218,
   -1218, -1218, -1218, -1218,   299,   300, -1218, -1218, -1218, -1218,
   -1218, -1218, -1218, -1218, -1218,     0, -1218,     0,   301, -1218,
   -1218,     0,   302,   303,   304,   305,   306,   307,   308,   309,
   -1218, -1218,   310,     0,     0,   311,     0,   312, -1218,     0,
   -1218, -1218, -1218,     0, -1218,   313,   314,     0,   315,   316,
     317,   318, -1013,  2081,     0, -1013, -1013, -1013, -1013,     0,
   -1013, -1013,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013,     0, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013,     0,     0, -1013, -1013,     0,
   -1013,     0,     0, -1013, -1013, -1013, -1013, -1013,     0,     0,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013, -1013, -1013,     0, -1013,     0,
   -1013, -1013, -1013,     0, -1013, -1013, -1013, -1013, -1013, -1013,
   -1013, -1013, -1013, -1013, -1013,     0,     0, -1013,     0, -1013,
   -1013,     0, -1013, -1013, -1013,     0, -1013, -1013, -1013,     0,
   -1013, -1013, -1013, -1013,  -919,   569,     0,  -919,  -919,  -919,
    -919,     0,  -919,  -919,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,
    -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,
    -919,  -919,  -919,  -919,  -919,     0,     0,  -919,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -919,
    -919,     0,  -919,     0,     0,  -919,  -919,  -919,  -919,  -919,
       0,     0,  -919,  -919,  -919,  -919,  -919,  -919,  -919,  -919,
    -919,  -919,  -919,     0,     0,  -919,  -919,  -919,  -919,     0,
    -919,     0,  -919,  -919,  -919,     0,  -919,  -919,  -919,  -919,
    -919,  -919,  -919,  -919,  -919,  -919,  -919,     0,     0,  -919,
     837,  -919,  -919,     0,   571,  -919,  -919,     0,     0,  -919,
    -919,     0,  -919,  -919,  -919,  -919,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,   238,     0,     0,     0,     0,   296,   297,   298,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   299,
     623,    38,   240,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,   241,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   310,     0,     0,
     311,     0,   312,   974,     0,   975,   976,   735,     0,     0,
     313,   314,     0,   315,   316,   317,   318,  1255,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,   238,     0,     0,     0,     0,   296,   297,   298,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     299,   623,    38,   240,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,   241,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,   974,     0,   975,  -109,   735,     0,
       0,   313,   314,     0,   315,   316,   317,   318,  1262,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,    18,    19,   236,   237,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,   238,     0,     0,     0,     0,   296,   297,
     298,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   299,   623,    38,   240,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,   241,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   311,     0,   312,   974,     0,   975,   -97,   735,
       0,     0,   313,   314,     0,   315,   316,   317,   318,  1266,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,   238,     0,     0,     0,     0,   296,
     297,   298,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   299,   623,    38,   240,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   974,     0,   975,  -101,
     735,     0,     0,   313,   314,     0,   315,   316,   317,   318,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,   238,     0,     0,     0,     0,
     296,   297,   298,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,   299,   623,    38,   240,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,   241,
       0,   302,   303,   304,   305,   306,   307,   308,   309,    43,
      44,   310,     0,     0,   311,     0,   312,  1519,     0,   975,
     -64,   735,     0,     0,   313,   314,     0,   315,   316,   317,
     318,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,   238,     0,     0,     0,
       0,   296,   297,   298,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   299,   623,    38,   240,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,  1528,     0,
     975,  1529,   735,     0,     0,   313,   314,     0,   315,   316,
     317,   318,  1586,     0,     1,   291,   100,   292,     0,   293,
     294,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,   238,     0,     0,
       0,     0,   296,   297,   298,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   299,   623,    38,   240,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,   241,     0,   302,   303,   304,   305,   306,   307,   308,
     309,    43,    44,   310,     0,     0,   311,     0,   312,   974,
       0,   975,   -80,   735,     0,     0,   313,   314,     0,   315,
     316,   317,   318,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,   238,     0,
       0,     0,     0,   296,   297,   298,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   299,   623,    38,   240,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,   241,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,     0,   312,
    1528,     0,   975,  -106,   735,     0,     0,   313,   314,     0,
     315,   316,   317,   318,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,   238,
       0,     0,     0,     0,   296,   297,   298,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,   299,   623,    38,
     240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,   241,     0,   302,   303,   304,   305,   306,
     307,   308,   309,    43,    44,   310,     0,     0,   311,     0,
     312,  1528,     0,   975,   -96,   735,     0,     0,   313,   314,
       0,   315,   316,   317,   318,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
     238,     0,     0,     0,     0,   296,   297,   298,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   299,   623,
      38,   240,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,   241,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,  1528,     0,   975,  -100,   735,     0,     0,   313,
     314,     0,   315,   316,   317,   318,  1782,     0,     1,   291,
     100,   292,     0,   293,   294,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,   238,     0,     0,     0,     0,   296,   297,   298,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   299,
     623,    38,   240,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,   241,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   310,     0,     0,
     311,     0,   312,   974,     0,   975,   -87,   735,     0,     0,
     313,   314,     0,   315,   316,   317,   318,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,   238,     0,     0,     0,     0,   296,   297,   298,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     299,   623,    38,   240,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,   241,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,  1528,     0,   975,   -77,   735,     0,
       0,   313,   314,     0,   315,   316,   317,   318,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,    18,    19,   236,   237,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,   238,     0,     0,     0,     0,   296,   297,
     298,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   299,   623,    38,   240,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,   241,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   311,     0,   312,  1528,     0,   975,   -84,   735,
       0,     0,   313,   314,     0,   315,   316,   317,   318,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,     0,     0,     0,   296,
     297,   298,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,   299,   392,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,    40,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,   290,   312,     1,   291,   100,   292,
       0,   293,   294,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   855,    27,
       0,     0,     0,     0,   296,   297,   298,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,   299,   392,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,    40,     0,   302,   303,   304,   305,   306,
     307,   308,   309,    43,    44,   310,     0,     0,   311,   290,
     312,     1,   291,   100,   292,     0,   293,   294,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,     0,     0,     0,   296,
     297,   298,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,   299,   392,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,    40,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,   724,   312,     0,     0,     0,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1184,    27,     0,     0,     0,     0,
     296,   297,   298,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,   299,   392,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,    40,
       0,   302,   303,   304,   305,   306,   307,   308,   309,    43,
      44,   310,     0,     0,   698,   724,   312,     0,     0,     0,
       0,     0,     0,     0,   313,   314,     0,   315,   316,   317,
     318,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,     0,     0,
       0,   296,   297,   298,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,   299,   392,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
      40,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,   290,   312,     1,   291,
     100,   292,   242,   293,   294,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,     0,     0,     0,   296,   297,   298,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,   299,
     392,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,    40,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   310,     0,     0,
     698,   724,   312,     0,     0,     0,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       8,     9,    10,   550,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,     0,     0,     0,   296,   297,   298,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     299,   392,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,    40,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   878,     0,
       0,   879,   724,   312,     0,     0,     0,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1105,
    1106,  1107,   615,  1108,  1109,  1110,  1111,   620,   621,  1112,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,     0,     0,     0,     0,     0,    32,     0,     0,     0,
       0,   299,   300,  1113,     0,   625,   626,   627,     0,   290,
       0,     1,   291,   100,   292,   301,   293,   294,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   311,  -469,   312,   628,     2,  -469,     0,   242,
       0,   629,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1105,  1106,  1107,   615,  1108,  1109,  1110,  1111,   620,   621,
    1112,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,     0,     0,     0,     0,     0,    32,     0,     0,
       0,     0,   299,   300,  1113,     0,   625,   626,   627,     0,
     290,     0,     1,   291,   100,   292,   301,   293,   294,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,  1148,   312,   628,     2,  1149,     0,
     242,     0,   629,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,   299,   300,  1113,     0,   625,   626,   627,
       0,  1851,     0,     1,   291,   100,   292,   301,   293,   294,
       0,   302,   303,   304,   305,   306,   307,   308,   309,    43,
      44,   310,     0,     0,   311,     0,   312,   628,     2,     0,
       0,   242,     0,   629,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1105,  1106,  1107,   615,  1108,  1109,  1110,  1111,
     620,   621,  1112,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,   299,   300,  1113,     0,   625,   626,
     627,     0,   290,     0,     1,   291,   100,   292,   301,   293,
     294,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   628,     2,
       0,     0,   242,     0,   629,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  1148,   312,     0,
       0,  1746,     0,     0,     0,  1893,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1148,   312,     0,     0,  1149,     0,     0,     0,     0,   313,
     314,  1901,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1148,   312,     0,     0,  1149,     0,     0,
       0,     0,   313,   314,  1904,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,  2027,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  1148,   312,  1872,     0,
    1149,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  1148,
     312,  1872,     0,  1149,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,     0,   312,     0,     0,  2079,  2080,  1004,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,  2091,   312,  2092,     0,  1144,
       0,     0,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,  1148,   312,
    2090,     0,  1149,     0,     0,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,     0,   312,  1143,     0,  1144,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  1338,   312,     0,     0,     0,     0,
     735,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,     0,   312,  1124,
       0,     0,     0,   735,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,  1615,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1148,   312,     0,     0,  1149,     0,     0,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1616,   312,  1617,     0,     0,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,     0,   312,  1625,     0,
    1144,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  1671,
     312,     0,     0,     0,     0,   735,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  1680,   312,     0,     0,     0,     0,   735,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,  1712,   312,     0,     0,  1144,
       0,     0,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,  1144,     0,     0,     0,     0,   313,   314,  1740,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,     0,   312,     0,     0,  1743,     0,     0,     0,  1744,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,     0,   312,     0,     0,  1144,     0,
       0,     0,     0,   313,   314,  1750,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,     0,   312,     0,
       0,  1743,     0,     0,     0,  1752,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1847,   312,     0,     0,  1144,     0,     0,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1849,   312,     0,     0,  1144,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  1850,   312,     0,     0,
    1149,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  1853,
     312,     0,     0,  1144,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  1616,   312,  1617,     0,     0,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,  1873,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,  1870,     0,  1144,
       0,     0,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,  1874,   312,
    1617,     0,     0,     0,     0,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,     0,   312,     0,     0,  1743,     0,     0,     0,  1887,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,     0,   312,     0,     0,  1743,     0,
       0,     0,  1891,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,     0,   312,     0,
       0,  1144,     0,     0,     0,     0,   313,   314,  1900,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
       0,   312,     0,     0,  1144,     0,     0,     0,     0,   313,
     314,  1903,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  2012,   312,     0,     0,  1144,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  1848,   312,     0,     0,
    1149,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  2019,
     312,     0,     0,  1144,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  1874,   312,  1617,     0,     0,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,  2095,   312,     0,     0,  1144,
       0,     0,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,     0,  2123,  1004,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  2126,   312,     0,     0,  1144,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  2127,   312,     0,     0,  1144,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  2154,   312,     0,
       0,  1144,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
       0,   312,     0,     0,     0,     0,     0,     0,     0,   313,
     314,   534,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,     0,   312,     0,     0,     0,     0,   735,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,     0,   312,     0,     0,
       0,     0,     0,     0,     0,   313,   314,   829,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,     0,
     312,     0,     0,     0,     0,     0,     0,     0,   313,   314,
     833,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,     0,   312,     0,     0,     0,     0,  1004,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,     0,     0,     0,
       0,     0,     0,     0,   313,   314,  1045,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,     0,     0,     0,     0,  1097,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,  1464,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,   724,   312,     0,     0,     0,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,     0,   312,     0,     0,     0,     0,
     735,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,     0,   312,     0,
       0,     0,     0,     0,     0,     0,   313,   314,  1567,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1599,   312,     0,     0,     0,     0,     0,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,     0,   312,     0,     0,     0,     0,     0,
       0,  1602,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,  1811,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,     0,   312,     0,     0,
       0,     0,  1810,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,  1814,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,     0,
     312,     0,     0,     0,     0,   735,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
    1818,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,     0,   312,     0,     0,     0,     0,   735,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,     0,     0,     0,
       0,   735,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,  1860,   312,
       0,     0,     0,     0,     0,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
    1927,     0,   312,     0,     0,     0,     0,  1810,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  2028,   312,     0,     0,     0,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  2086,   312,     0,
       0,     0,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   688,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
       0,   312,     0,     0,     0,     0,     0,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   689,     0,   312,     0,     0,     0,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   688,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   698,     0,   312,     0,     0,
       0,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     0,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   721,     0,
     312,  -907,   569,     0,  -907,  -907,  -907,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,
    -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,  -907,
    -907,  -907,     0,     0,  -907,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -907,  -907,     0,  -907,
       0,     0,  -907,  -907,     0,  -907,  -907,     0,     0,  -907,
    -907,  -907,  -907,  -907,  -907,     0,  -907,  -907,  -907,  -907,
       0,     0,  -907,  -907,  -907,  -907,     0,  -907,     0,  -907,
    -907,  -907,     0,  -907,  -907,  -907,  -907,  -907,  -907,  -907,
       0,  -907,  -907,  -907,     0,     0,  -907,   570,  -907,  -907,
       0,   571,  -907,     0,     0,     0,  -907,  -907,  -188,   895,
       0,  -188,  -188,  -188,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -188,  -188,  -188,  -188,
    -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,
    -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,     0,
       0,  -188,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -188,  -188,     0,  -188,     0,     0,  -188,
    -188,     0,  -188,  -188,     0,     0,  -188,  -188,  -188,  -188,
    -188,  -188,     0,  -188,  -188,  -188,  -188,     0,     0,  -188,
    -188,  -188,  -188,     0,  -188,     0,  -188,  -188,  -188,     0,
    -188,  -188,  -188,  -188,  -188,  -188,  -188,     0,  -188,  -188,
    -188,     0,     0,  -188,     0,  -188,   896,     0,   897,  -188,
       0,     0,     0,  -188,  -188,  -252,   909,     0,     1,   291,
     100,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,  -252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   410,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   411,    32,   412,   413,    35,    36,     0,
     392,    38,    39,   414,     0,     0,   415,   416,   417,   418,
       0,   419,     0,   420,   421,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     422,     0,   423,   424,  -250,   912,  -252,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,  -250,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   410,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   411,    32,   412,   413,    35,    36,     0,   392,
      38,    39,   414,     0,     0,   415,   416,   417,   418,     0,
     419,     0,   420,   421,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   422,
       0,   423,   424,  -253,   909,  -250,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,  -253,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   410,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   411,    32,   412,   413,    35,    36,     0,   392,    38,
      39,   414,     0,     0,   415,   416,   417,   418,     0,   419,
       0,   420,   421,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   422,     0,
     423,   424,  -251,   912,  -253,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,  -251,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     410,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     411,    32,   412,   413,    35,    36,     0,   392,    38,    39,
     414,     0,     0,   415,   416,   417,   418,     0,   419,     0,
     420,   421,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   422,     0,   423,
     424,     0,   409,  -251,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   410,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   411,
      32,   412,   413,    35,    36,     0,   392,    38,    39,   414,
       0,     0,   415,   416,   417,   418,     0,   419,     0,   420,
     421,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   422,     0,   423,   424,
       0,   475,   425,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   410,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   411,    32,
     412,   413,    35,    36,     0,   392,    38,    39,   414,     0,
       0,   415,   416,   417,   418,     0,   419,     0,   420,   421,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   422,     0,   423,   424,     0,
     497,   476,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   410,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   411,    32,   412,
     413,    35,    36,     0,   392,    38,    39,   414,     0,     0,
     415,   416,   417,   418,     0,   419,     0,   420,   421,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   422,     0,   423,   424,     0,   502,
     498,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   410,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   411,    32,   412,   413,
      35,    36,     0,   392,    38,    39,   414,     0,     0,   415,
     416,   417,   418,     0,   419,     0,   420,   421,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   422,     0,   423,   424,     0,   506,   503,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   410,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   411,    32,   412,   413,    35,
      36,     0,   392,    38,    39,   414,     0,     0,   415,   416,
     417,   418,     0,   419,     0,   420,   421,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   422,     0,   423,   424,     0,   909,   507,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   410,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   411,    32,   412,   413,    35,    36,
       0,   392,    38,    39,   414,     0,     0,   415,   416,   417,
     418,     0,   419,     0,   420,   421,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   422,     0,   423,   424,     0,   912,  -762,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   410,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   411,    32,   412,   413,    35,    36,     0,
     392,    38,    39,   414,     0,     0,   415,   416,   417,   418,
       0,   419,     0,   420,   421,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     422,     0,   423,   424,     0,   909,  -763,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   410,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   411,    32,   412,   413,    35,    36,     0,   392,
      38,    39,   414,     0,     0,   415,   416,   417,   418,     0,
     419,     0,   420,   421,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   422,
       0,   423,   424,     0,   912,  -759,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   410,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   411,    32,   412,   413,    35,    36,     0,   392,    38,
      39,   414,     0,     0,   415,   416,   417,   418,     0,   419,
       0,   420,   421,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   422,     0,
     423,   424,     0,   909,  -760,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     410,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     411,    32,   412,   413,    35,    36,     0,   392,    38,    39,
     414,     0,     0,   415,   416,   417,   418,     0,   419,     0,
     420,   421,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   422,     0,   423,
     424,     0,   912,  -765,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   410,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   411,
      32,   412,   413,    35,    36,     0,   392,    38,    39,   414,
       0,     0,   415,   416,   417,   418,     0,   419,     0,   420,
     421,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   422,     0,   423,   424,
       0,  1027,  -766,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   410,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   411,    32,
     412,   413,    35,    36,     0,   392,    38,    39,   414,     0,
       0,   415,   416,   417,   418,     0,   419,     0,   420,   421,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   422,     0,   423,   424,     0,
    1031,  1028,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   410,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   411,    32,   412,
     413,    35,    36,     0,   392,    38,    39,   414,     0,     0,
     415,   416,   417,   418,     0,   419,     0,   420,   421,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   422,     0,   423,   424,     0,   909,
    1032,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   410,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   411,    32,   412,   413,
      35,    36,     0,   392,    38,    39,   414,     0,     0,   415,
     416,   417,   418,     0,   419,     0,   420,   421,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   422,     0,   423,   424,     0,   912,  -742,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   410,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   411,    32,   412,   413,    35,
      36,     0,   392,    38,    39,   414,     0,     0,   415,   416,
     417,   418,     0,   419,     0,   420,   421,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   422,     0,   423,   424,     0,   909,  -743,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   410,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   411,    32,   412,   413,    35,    36,
       0,   392,    38,    39,   414,     0,     0,   415,   416,   417,
     418,     0,   419,     0,   420,   421,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   422,     0,   423,   424,     0,   912,  -745,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   410,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   411,    32,   412,   413,    35,    36,     0,
     392,    38,    39,   414,     0,     0,   415,   416,   417,   418,
       0,   419,     0,   420,   421,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     422,     0,   423,   424,     0,  1549,  -746,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   410,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   411,    32,   412,   413,    35,    36,     0,   392,
      38,    39,   414,     0,     0,   415,   416,   417,   418,     0,
     419,     0,   420,   421,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   422,
       0,   423,   424,     0,   909,  1550,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   410,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   411,    32,   412,   413,    35,    36,     0,   392,    38,
      39,   414,     0,     0,   415,   416,   417,   418,     0,   419,
       0,   420,   421,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   422,     0,
     423,   424,     0,   912,  -668,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     410,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     411,    32,   412,   413,    35,    36,     0,   392,    38,    39,
     414,     0,     0,   415,   416,   417,   418,     0,   419,     0,
     420,   421,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   422,     0,   423,
     424,     0,   909,  -669,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   410,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   411,
      32,   412,   413,    35,    36,     0,   392,    38,    39,   414,
       0,     0,   415,   416,   417,   418,     0,   419,     0,   420,
     421,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   422,     0,   423,   424,
       0,   912,  -748,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   410,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   411,    32,
     412,   413,    35,    36,     0,   392,    38,    39,   414,     0,
       0,   415,   416,   417,   418,     0,   419,     0,   420,   421,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   422,     0,   423,   424,     0,
     909,  -749,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   410,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   411,    32,   412,
     413,    35,    36,     0,   392,    38,    39,   414,     0,     0,
     415,   416,   417,   418,     0,   419,     0,   420,   421,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   422,     0,   423,   424,     0,   912,
    -661,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   410,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   411,    32,   412,   413,
      35,    36,     0,   392,    38,    39,   414,     0,     0,   415,
     416,   417,   418,     0,   419,     0,   420,   421,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   422,     0,   423,   424,     0,   909,  -662,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   410,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   411,    32,   412,   413,    35,
      36,     0,   392,    38,    39,   414,     0,     0,   415,   416,
     417,   418,     0,   419,     0,   420,   421,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   422,     0,   423,   424,     0,   912,  -657,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   410,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   411,    32,   412,   413,    35,    36,
       0,   392,    38,    39,   414,     0,     0,   415,   416,   417,
     418,     0,   419,     0,   420,   421,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   422,     0,   423,   424,     0,   909,  -658,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   410,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   411,    32,   412,   413,    35,    36,     0,
     392,    38,    39,   414,     0,     0,   415,   416,   417,   418,
       0,   419,     0,   420,   421,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     422,     0,   423,   424,     0,   912,  -647,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   410,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   411,    32,   412,   413,    35,    36,     0,   392,
      38,    39,   414,     0,     0,   415,   416,   417,   418,     0,
     419,     0,   420,   421,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   422,
       0,   423,   424,     0,   909,  -648,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   410,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   411,    32,   412,   413,    35,    36,     0,   392,    38,
      39,   414,     0,     0,   415,   416,   417,   418,     0,   419,
       0,   420,   421,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   422,     0,
     423,   424,     0,   912,  -642,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     410,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     411,    32,   412,   413,    35,    36,     0,   392,    38,    39,
     414,     0,     0,   415,   416,   417,   418,     0,   419,     0,
     420,   421,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   422,     0,   423,
     424,     0,   909,  -643,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   410,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   411,
      32,   412,   413,    35,    36,     0,   392,    38,    39,   414,
       0,     0,   415,   416,   417,   418,     0,   419,     0,   420,
     421,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   422,     0,   423,   424,
       0,   912,  -659,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   410,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   411,    32,
     412,   413,    35,    36,     0,   392,    38,    39,   414,     0,
       0,   415,   416,   417,   418,     0,   419,     0,   420,   421,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   422,     0,   423,   424,     0,
     290,  -660,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   410,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   411,    32,   412,
     413,    35,    36,     0,   392,    38,    39,   414,     0,     0,
     415,   416,   417,   418,     0,   419,     0,   420,   421,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   422,     0,   423,   424,   409,     0,
       1,   291,   100,     0,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   410,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   411,    32,   412,   413,    35,
      36,     0,   392,    38,    39,   414,     0,     0,   415,   416,
     417,   418,     0,   419,     0,   420,   421,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   422,     0,   423,   424,   475,     0,     1,   291,
     100,     0,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   410,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   411,    32,   412,   413,    35,    36,     0,
     392,    38,    39,   414,     0,     0,   415,   416,   417,   418,
       0,   419,     0,   420,   421,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,   193,
     422,     1,   423,   424,     0,     0,     0,     0,     0,     0,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   199,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1223,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,     0,     0,   851,  1036,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   552, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223,     0, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,     0,
       0,     0, -1223,     0, -1223,     0,     0,     0,     0,     0,
   -1223, -1223,     0,     0, -1223, -1223, -1223, -1223, -1223, -1223,
       0,     0, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,
   -1223,     0, -1223, -1208,     0, -1223, -1223,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1223, -1223,     0,     0,
       0,     0,     0,     0, -1223,     0,     0, -1223, -1223,     0,
   -1223,     0, -1208, -1208, -1208, -1208, -1208, -1208, -1208, -1208,
   -1208, -1208, -1208, -1208, -1208, -1208, -1208, -1208, -1208, -1208,
   -1208, -1208, -1208, -1208,     0, -1208, -1208, -1208, -1208, -1208,
   -1208, -1208, -1208, -1208, -1208, -1208,     0,     0,     0, -1208,
       0, -1208,     0,     0,     0,     0,     0, -1208, -1208,     0,
       0, -1208, -1208, -1208, -1208, -1208, -1208,     0,     0, -1208,
   -1208, -1208, -1208, -1208, -1208, -1208, -1208, -1208,     0, -1208,
   -1210,     0, -1208, -1208,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1208, -1208,     0,     0,     0,     0,     0,
       0, -1208,     0,     0, -1208, -1208,     0, -1208,     0, -1210,
   -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210,
   -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210,
   -1210,     0, -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210,
   -1210, -1210, -1210,     0,     0,     0, -1210,     0, -1210,     0,
       0,     0,     0,     0, -1210, -1210,     0,     0, -1210, -1210,
   -1210, -1210, -1210, -1210,     0,     0, -1210, -1210, -1210, -1210,
   -1210, -1210, -1210, -1210, -1210,     0, -1210, -1207,     0, -1210,
   -1210,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1210, -1210,     0,     0,     0,     0,     0,     0, -1210,     0,
       0, -1210, -1210,     0, -1210,     0, -1207, -1207, -1207, -1207,
   -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207,
   -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207,     0, -1207,
   -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207, -1207,
       0,     0,     0, -1207,     0, -1207,     0,     0,     0,     0,
       0, -1207, -1207,     0,     0, -1207, -1207, -1207, -1207, -1207,
   -1207,     0,     0, -1207, -1207, -1207, -1207, -1207, -1207, -1207,
   -1207, -1207,     0, -1207, -1209,     0, -1207, -1207,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1207, -1207,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1207, -1207,
       0, -1207,     0, -1209, -1209, -1209, -1209, -1209, -1209, -1209,
   -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209,
   -1209, -1209, -1209, -1209, -1209,     0, -1209, -1209, -1209, -1209,
   -1209, -1209, -1209, -1209, -1209, -1209, -1209,     0,     0,     0,
   -1209,     0, -1209,     0,     0,     0,     0,     0, -1209, -1209,
       0,     0, -1209, -1209, -1209, -1209, -1209, -1209,     0,     0,
   -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209, -1209,     0,
   -1209,     0,     0, -1209, -1209,     1,     0,     0,     0,     0,
       0,     0,     0,     0, -1209, -1209,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1209, -1209,     0, -1209,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     1,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,   851,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   552,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   241,     0,     1,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,     0,     0,   851,     0,     0,     0,
       0,     0,     0,  1447,     0,     0,     0,   552,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   238,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   239,    38,   240,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     241,     0,     1,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,     0,     0,  1212,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1213,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   239,    38,   240,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   241,
       0,     1,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,  1212,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1235,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   238,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   239,    38,   240,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   241,     0,
       1,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,     0,     0,  1212,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1704,     2,   194,   195,   196,   197,
     198,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,    18,    19,   236,   237,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   238,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   239,    38,   240,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   241,     0,     1,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
       0,     0,  1212,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1719,     2,     3,     4,   261,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    26,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,   262,    31,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     1,     0,     0,
       0,    42,     0,     0,     0,     0,    43,    44,    45,     0,
       0,    46,     0,     0,     0,     0,     0,     0,     0,     0,
     263,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,   410,     0,     0,     0,     0,     0,    28,    29,
       0,     0,   411,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,     0,     0,   937,
       0,   423,     0,     0,     0,     0,     0,     0,   938,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,   550,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     1,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,   917,     0,     0,
       0,     0,     0,     0,     0,     0,   918,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,   550,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1514,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,     0,     0,    46,     0,     0,     0,     0,
       0,     0,     0,     0,   918,   -65,   -65,   -65,   -65,   -65,
     -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,
     -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   -65,     0,     0,     0,     0,     0,     0,
       0,   -65,   -65,     0,     0,     0,   -65,     0,     0,     0,
       0,     0,   -65,   -65,   -65,     0,     0,     0,     0,     0,
       0,     0,  1735,     0,     0,     0,     0,   -65,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -65,   -65,     0,
       0,     0,     0,     0,     0,  1515,     0,  1516,   -65,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
       0,     0,     0,     0,     0,     0,  1736,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -94,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   238,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     239,    38,   240,     0,     0,     0,     0,     0,     0,     0,
    1842,     0,     0,     0,     0,   241,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -95,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   239,    38,   240,     0,     0,     0,
       0,     0,     0,     0,  1989,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -79,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   238,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   239,    38,
     240,     0,     0,     0,     0,     0,     0, -1289,   280,     0,
       1,     0,     0,   241,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -86,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,    30,    31,     0,    32,    33,    34,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     1,     0,     0,     0,     0,     0,    40,    41,     0,
       0,     0,    42,     0,     0,     0,     0,    43,    44,    45,
       0,     0,    46,     0,     0,    47,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,     0,     0,    40,     0,
       0,     0,     0,     0,     0,   821,     0,     0,    43,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1406,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     0,    40,     0,     0,     0,     0,     0,     0,   821,
       0,     0,    43,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1762,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,   159,     0,     1,     0,     0,    40,     0,     0,     0,
       0,     0,     0,   821,     0,     0,    43,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1763,     2,     3,
       4,   160,     6,     7,     8,     9,    10,   161,   162,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    26,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,   159,     0,     1,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,     0,     0,    46,     0,     0,   163,     2,
       3,     4,   160,     6,     7,     8,     9,    10,   161,   162,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,   590,     0,     1,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,     0,     0,    46,     0,     0,   163,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   591,
     592,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   238,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   239,    38,   240,
       0,     0,     0,     0,  -927,     0,  -927,     0,     0,     0,
       0,     0,   241,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,    46,     0,     0,
     593,  -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,
    -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,  -927,
    -927,  -927,  -927,  -927,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -927,
       0,     0,     0,     0,     0,     0,     0,  -927,  -927,     0,
       0,     0,  -927,     0,     0,     0,     0,     0,  -927,  -927,
    -927,     0,     0,     0,     0,     0,     0,     1,     0,     0,
       0,     0,     0,  -927,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -927,  -927,  -927,     0,     0,  -927,     0,
       0,  -927,     2,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
      30,    31,     0,    32,    33,    34,    35,    36,     0,    37,
      38,    39,     0,     0,     0, -1290,   272,     0,     1,     0,
       0,     0,     0,     0,    40,    41,     0,     0,     0,    42,
       0,     0,     0,     0,    43,    44,    45,     0,     0,    46,
       0,     0,    47,     2,     3,     4,   160,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,    33,    34,    35,    36,     0,
      37,    38,    39,     0,   193,     0,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
      46,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   199,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,   193,     0,     1,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,     0,     0,  1212,  1691,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   199,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,   193,     0,     1,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,     0,     0,     0,     0,   200,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   199,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,   930,     0,     1,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,     0,   375,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   199,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
    1472,     0,     1,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,     0,     0,     0,     0,   200,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   199,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,   193,
       0,     1,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,     0,     0,     0,     0,   375,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   199,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,   193,     0,
       1,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     0,     0,     0,  1564,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   199,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,   159,     0,     1,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,     0,
       0,     0,     0,  1917,     2,     3,     4,   160,     6,     7,
       8,     9,    10,   550,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    26,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,   159,     0,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,     0,
       0,    46,     2,     3,     4,   160,     6,     7,     8,     9,
      10,   550,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,   875,     0,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,     0,     0,    46,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   238,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   239,    38,   240,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
       0,     0,   241,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,     0,     0,     0,   876,     2,     3,
       4,   160,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    26,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     1,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,     0,     0,    46,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,     0,     0,    46,     2,   194,   195,   196,   197,   198,
       8,     9,    10,   550,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,     0,
       0,    46,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,   713,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,     0,     0,     0,  1452,     2,   194,
     195,   196,   197,   198,   226,   227,   228,  1536,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   238,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   239,    38,   240,     0,  1059,
       0,     1,     0,     0,     0,     0,     0,     0,     0,     0,
     241,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,     0,     0,    46,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,  1060,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   199,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,  1065,     0,     1,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,  1066,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     199,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,  1071,     0,     1,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,  1072,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   199,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
     860,     0,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,     0,     0,     0,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   239,    38,   240,     1,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,  1020,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   199,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    1077,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   199,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     1,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   489,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     1,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,   821,     0,     0,    43,
      44,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   199,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,   464,
     465,     0,     0,     0,   239,    38,   240,     1,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     1,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   239,    38,   240,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   238,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   239,    38,
     240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   241,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,     0,     0,   851,  1688,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   552,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   238,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   239,    38,   240,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   241,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   242,     2,   194,   195,   196,   197,
     198,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,    18,    19,   236,   237,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   238,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   239,    38,   240,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   241,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1525,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44
};

static const yytype_int16 yycheck[] =
{
       0,   122,   521,   126,   712,  1089,   916,   460,   150,    77,
     826,   850,   850,   987,   916,   329,   456,   714,    53,    86,
     147,    80,   850,   138,   627,    80,   817,  1609,   826,   343,
      30,    31,   986,   347,   988,   457,   151,   817,   153,  1621,
     155,    41,   986,    87,   988,    87,    46,   258,  1222,    30,
      94,   130,   330,    53,   177,   258,   138,    77,    58,   288,
      60,    42,   521,   122,   795,    94,  1004,   122,   297,   151,
     867,   153,   107,   155,   303,   288,    76,    77,    78,    87,
      80,   276,   180,   181,   297,    85,   948,    87,   330,   122,
     303,    94,     1,    77,    94,    95,    78,   566,    98,   456,
       1,    58,   735,    87,     1,     3,    77,   107,   741,    77,
     110,   744,     1,   180,   181,     3,    87,     3,  2111,     5,
     101,   102,   122,    94,   105,   125,   126,     3,   784,     5,
     130,     3,   874,     5,   134,   135,   136,     3,   138,   967,
     113,   785,   142,   541,   144,   118,    77,   147,   148,     1,
     150,   151,   152,   153,   926,   155,   812,   192,   158,   314,
     258,   735,    28,     3,     1,     1,     3,   741,   168,   813,
     744,     1,  2165,   571,   112,   126,   574,   177,   576,   277,
     578,   749,    17,     1,     5,    73,   115,    77,    78,   256,
     651,   652,   192,   124,   132,   133,   115,   994,   266,     5,
     113,     5,   202,     3,   204,   947,   451,   452,   276,   122,
       0,   168,   212,   213,     3,   124,     5,   118,   116,   120,
     121,     3,   222,     1,   121,   225,   177,   795,    28,   118,
     116,     3,   477,   478,   278,   125,   278,    37,   124,    28,
     116,     7,     8,     9,   116,     1,   266,   276,   124,   278,
      17,     1,   124,   253,   499,   500,   276,   380,   258,   504,
     505,   456,   262,   508,   509,   407,   266,   870,     1,   121,
     278,   253,     3,   276,     1,   278,   276,     1,   278,     3,
       1,   262,  1256,  1865,   121,   121,     3,    77,     1,  1263,
     749,   121,   276,  1267,   278,   116,   296,    87,   266,     1,
     118,   136,   302,  1257,    94,    95,   986,   278,   988,     3,
    1264,   311,     1,  1257,  1268,   115,     1,   123,     3,   276,
    1264,   125,   636,     1,  1268,   639,   126,   406,   986,   987,
     988,     3,   313,   122,   116,   115,   795,   372,   120,   374,
       3,   115,   124,   121,   116,     1,   126,     3,   120,  1211,
       0,   116,   124,   119,     1,   120,    28,   123,     3,   426,
     427,   428,   429,   253,     1,   121,   366,   367,   118,   136,
     120,   121,   372,     3,   374,    17,   266,   986,   120,   988,
     380,   112,   113,     1,   853,   127,   386,     3,   121,   786,
    1181,   122,  1183,   516,   121,   112,   113,   121,   457,   399,
     121,  1181,   457,  1183,   404,   122,   406,   407,   121,   532,
     410,   411,    28,   115,   116,   542,   416,   814,   120,   419,
     420,   421,   422,   423,   118,    17,   120,    77,     3,   380,
     551,   546,   121,   548,   874,     5,   121,    87,   649,   650,
     651,   652,     3,   121,    94,    95,   649,   650,   651,   652,
     122,   451,   452,   453,   683,   522,   456,   457,   525,   122,
     460,  1094,     3,   463,   546,   121,   548,    28,   468,  1200,
     683,   116,   472,   473,   121,  1206,   266,   477,   478,     5,
       5,   934,     1,   936,   121,   115,   276,   682,   278,   489,
     130,   769,   770,   771,   136,   495,   496,  1581,   116,   499,
     500,   923,   120,     5,   504,   505,   122,   947,   508,   509,
     867,   113,   512,   513,   514,  1212,   516,   552,   551,   519,
    1094,   799,   800,   801,   122,  1699,   124,   769,   770,   771,
     530,   531,   532,  1230,   335,     3,   536,   112,   113,     1,
    1237,   541,   542,   335,   136,  1004,   546,   122,   548,   549,
     585,   551,   552,   553,   994,     1,   556,   799,   800,   801,
      28,   122,     3,   213,     3,   516,   566,  1429,     1,   926,
       5,   571,  1041,     3,   574,   116,   576,  1257,   578,   677,
     678,   532,     3,  1052,  1264,   585,  1425,  1425,  1268,    28,
     947,     5,   118,  1409,  1410,   120,   115,  1425,  1256,  1257,
       7,     8,     9,   787,  1542,  1263,  1264,   118,   763,  1267,
    1268,  1409,  1410,  1587,   682,   566,   266,   617,   120,   619,
       3,   411,   512,   513,   514,  1535,   276,   627,   278,  1491,
       1,   815,  1200,  1535,  1588,   790,  1097,   994,  1206,  1100,
     530,   531,     3,   798,  1588,   712,     3,   115,  1257,   649,
     650,   651,   652,   682,    11,  1264,   118,     1,   120,  1268,
    1058,   311,   682,   818,  1502,  1437,  1504,   667,   668,     3,
    1509,     1,   867,     3,   120,   116,   676,  1138,  1076,   682,
     115,  1140,   682,   664,   665,  1144,   116,   120,  1147,   689,
    1149,  1152,  1153,  1154,  1155,   774,   775,     3,   541,   788,
       1,   122,   116,   703,  1476,   118,   292,  1479,   115,   122,
     710,   711,   712,   713,   714,   715,   123,     3,     1,   126,
       3,   721,    28,   309,     3,   804,   805,   816,   571,     1,
     851,   574,   732,   576,  1908,   578,   717,   718,   719,   122,
     121,  1200,    28,     3,   115,   116,   746,  1206,   121,   120,
     750,    11,   947,   115,   404,   112,   113,   114,    69,    70,
     112,   122,   119,   120,   126,   122,   406,   122,    74,    75,
     849,   850,   116,    79,     3,  1713,   120,     3,   112,   113,
      86,   115,   112,   113,  1029,  1030,   121,   115,  1033,  1034,
     120,   292,   792,   115,    73,     3,   796,     1,   126,   994,
     292,     0,   923,   786,   110,   111,   456,    90,   309,  1783,
     121,   113,     3,   955,   956,   116,   122,   309,   851,   120,
     122,   821,   822,   823,    46,     5,   826,   827,   828,   115,
    1784,   814,   899,   900,   961,   902,  1698,  1470,   905,   906,
    1784,  1703,   121,   115,   116,   960,   496,    73,   120,   849,
     850,   851,   112,   113,   114,   855,   119,   857,   858,   119,
     120,     3,   122,     3,   923,   865,   866,   867,   923,   948,
     870,   126,  1810,     1,   874,   113,   876,   877,   960,   879,
     115,   881,   120,  1821,   113,   114,  1097,   787,   126,  1100,
     923,   126,   682,     3,  1097,   121,  1470,  1100,  1025,  1026,
     118,    11,    86,   125,   112,   113,  1768,   372,  1588,   374,
     977,   119,   116,   129,   130,   815,   120,   917,  1041,   919,
    1035,   112,   113,   923,   120,    65,   926,  1138,   119,  1587,
    1588,   931,  1053,   119,   934,  1138,   936,   937,   124,     3,
       1,  1152,  1153,  1154,  1155,   120,   946,   947,   948,  1152,
    1153,  1154,  1155,  1035,  1423,   955,   956,    11,   958,   120,
     960,   961,   784,     7,     8,     9,   966,   967,   968,   969,
    1809,   113,   112,   113,   120,  1253,   118,   778,   779,  1588,
     781,   122,   122,   124,     3,     3,   778,   779,   116,   781,
     812,   213,   120,     3,   994,  1692,   180,   181,   121,   785,
    1772,  1773,   112,   113,   114,   806,   807,   808,   809,    28,
     120,  1253,   122,  1721,   806,   807,   808,   809,    37,  1054,
    1053,   122,   120,  1542,   121,  1025,  1026,   813,   126,  1029,
    1030,  1471,   682,  1033,  1034,  1035,  1639,  1037,   116,   689,
    1040,  1041,   120,     7,     8,     9,   124,    65,   112,   113,
    1050,   115,  1052,  1053,  1054,   116,  1171,   116,  1058,   120,
     114,  1061,   712,  1925,  1064,  2003,   120,  1067,   116,   120,
    1070,   721,   256,  1073,   258,   126,  1076,  1987,  1078,   123,
    1437,   121,   732,  1542,   118,  1554,   115,   552,   122,  1171,
    1041,  1212,  1092,   277,   112,   113,   115,  1097,   115,  1050,
    1100,  1052,   112,   113,  1784,  1260,     3,   115,   788,  1109,
     119,  1111,     7,     8,     9,   124,     7,     8,     9,  1476,
    1120,     1,  1479,   515,   112,  1783,  1784,     7,     8,     9,
    1591,  1592,  1211,  1133,   774,   775,   816,   114,  1138,  1139,
    1601,  2079,   118,   120,   132,   133,   122,   612,  1129,  1184,
    1040,   115,  1152,  1153,  1154,  1155,     7,     8,     9,   123,
     114,  1999,   126,  2001,   804,   805,   120,     3,   404,     5,
    1170,  1171,  1172,   823,  1174,  1784,   113,    74,    75,  1212,
     119,  2119,    79,    77,  1184,   122,  1186,   124,   115,    86,
      12,    13,     3,  1193,     5,   115,     6,  1197,     8,     9,
     422,  1201,   116,  1203,    10,    11,   120,  1207,   858,   849,
     850,  1211,  1212,   110,   111,  1058,   114,   867,     3,  1927,
      31,  1064,   120,     0,   874,   122,   121,  1070,   123,   879,
    1230,   881,   123,  1076,     3,   115,     5,  1237,    79,   119,
     115,     3,   426,   123,   119,   429,   126,  1247,     7,     8,
       9,   126,  1497,  1498,    12,    13,    88,    89,    90,   297,
     496,     3,    31,    73,   115,   303,    28,   116,     3,   110,
     111,   120,   123,  1254,    84,   126,   112,   113,   115,  1738,
    1883,   931,    44,   124,  1743,   115,    28,  1746,   115,    74,
      75,   113,   114,    28,    79,    37,  1765,   947,   114,   109,
      77,    86,  1821,   113,   120,   122,  1551,  1552,   948,    44,
      87,   703,    74,    75,   115,   551,   126,    94,    95,   129,
     130,   131,   114,   116,   115,   110,   111,   120,   120,   551,
     115,   553,    74,    75,   372,   115,   374,    79,   522,    74,
      75,   525,   128,   735,    86,   135,  1425,   772,   773,   741,
    1429,  1810,   744,   116,   116,   113,   114,   120,   120,   136,
    1829,   124,  1821,   134,   123,   782,   783,   126,   110,   111,
     112,   148,   122,   115,   124,   152,   114,   802,   803,   116,
    1591,  1592,   120,   120,   126,   256,   257,   124,  1591,  1592,
    1601,   116,  1853,   810,   811,   120,    14,    15,  1601,   124,
    1400,  1401,   772,   773,  1404,  1405,     1,   114,     3,  1409,
    1410,   122,  1491,   120,     3,  1772,  1773,   256,   257,   782,
     783,  1421,    74,    75,  1405,  1425,  1426,    79,    16,  1429,
    1509,  1554,   802,   803,    86,  1435,   114,  1437,   128,    28,
    1440,   116,   120,   116,  1444,   120,   114,   810,   811,  1449,
    1450,  1451,   120,   918,   134,    44,   114,   116,   110,   111,
     112,   120,   120,   115,   114,   649,   650,   651,   652,   114,
     120,  1471,   114,  1473,   126,   120,  1476,   116,   120,  1479,
     135,   120,  1482,   116,  2003,    74,    75,   120,   122,   266,
     124,  1491,   957,   677,   678,   679,   732,  1497,  1498,   276,
      16,   278,  1502,  1503,  1504,  1505,   116,   116,     1,   116,
     120,   120,  2115,   120,   552,  1744,  1745,   116,  1747,  1748,
     122,   120,   124,  1752,  1753,  1754,  1755,   116,   512,   513,
     514,  1744,  1745,   148,  1747,  1748,   118,   152,   120,  1752,
    1753,  1754,  1755,  1193,  2003,   116,   530,   531,   118,   122,
     120,  1551,  1552,     1,  1554,     3,   122,   118,     0,   120,
    2079,  1451,  1562,   122,   122,   124,   124,  2028,     1,  2030,
       3,  1211,   116,  1573,   612,     1,     1,     3,     3,  1700,
     116,    74,    75,   115,    69,    70,    79,   122,     1,  1054,
       3,  1591,  1592,    86,   986,   987,   988,   118,   118,  1599,
     120,  1601,  1602,  1554,   118,  1605,    91,   129,   130,  1609,
      95,  1562,    97,  1613,   120,   851,  1616,   110,   111,  1698,
    2079,   122,   858,   124,  1703,   118,   119,   120,    14,    15,
     866,  1612,   113,   410,  2095,    77,   121,   113,  1879,  1639,
    1105,   877,  1853,   113,   421,    87,  1646,  1628,    10,    11,
    1853,   522,    94,    95,   525,   897,   898,   879,  1887,  1888,
    1889,  1890,  1891,  1892,  1893,  1894,     1,  1700,     3,     1,
       1,     3,     3,   119,  1887,  1888,  1889,  1890,  1891,  1892,
    1893,  1894,     1,   522,   120,  1800,   525,  1802,     1,  1768,
       3,   122,    74,    75,   122,   917,   473,    79,  1698,   118,
    1700,   120,  1094,  1703,    86,   127,  1829,  1774,   122,   931,
     124,  1826,   127,  1828,  1516,   937,  1518,  1516,  1800,  1518,
    1802,  1721,   127,  1723,  1724,   897,   898,   122,   110,   111,
    1809,   120,  1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,
     122,   530,   531,   126,  1826,   120,  1828,   120,  1213,  1994,
    1995,   120,  1997,  1998,   121,    74,    75,   122,  1987,  1759,
      79,   649,   650,  2008,  2009,  2010,  2011,    86,  1768,   118,
    1235,   213,  1772,  1773,  1987,  1775,   649,   650,   649,   650,
     651,   652,    94,    95,   124,  1425,   115,  1787,   115,  1429,
     115,   110,   111,   977,   118,  2036,   118,  2038,   115,   118,
    1800,   120,  1802,   118,  1040,  1805,   827,   828,   679,   115,
     649,   650,   651,   652,   118,   118,   113,  2028,  1040,  2030,
     122,     1,   118,  1473,   266,  2028,  1826,  2030,  1828,  1829,
    2075,  2076,  1987,   116,   276,   121,   278,     1,   127,   127,
     679,  2119,   127,   127,   122,   127,  1925,  1847,  1848,  1849,
    1850,  1491,   127,  1853,   126,   113,   122,  1857,  1858,  2100,
    1860,  2102,  1862,  2104,  1256,  1257,   121,   120,   113,  1509,
     121,  1263,  1264,   121,  1874,  1267,  1268,  2119,  1829,   116,
     918,  1996,   116,  1883,  2095,   116,  1886,   127,   127,   127,
     116,   115,  2095,   116,    74,    75,  1877,   116,  1879,    79,
    2141,  2142,   124,  2144,   124,   682,    86,   124,   115,   115,
      74,    75,   115,  1097,  1996,    79,  1100,    56,  2159,   957,
     118,   118,    86,  1573,   118,  1925,   115,  1927,   113,   113,
     110,   111,   118,   116,  2175,   116,   113,   116,   118,   119,
     120,     3,   115,   115,   126,   113,   110,   111,   126,     0,
     116,   115,   116,   116,  1138,   116,   120,  1193,   120,   116,
     120,   116,   404,   121,   116,   124,    28,   116,  1152,  1153,
    1154,  1155,   116,   124,  1210,    37,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,   124,   124,   116,   118,
     121,  1175,   119,  1177,  1994,  1995,  1996,  1997,  1998,  1999,
     116,  2001,   116,   116,   106,   127,   127,   127,  2008,  2009,
    2010,  2011,    74,    75,   456,  1480,  1054,    79,   116,  2019,
     124,   124,    56,   115,    86,   116,    77,   115,  2028,   115,
    2030,   124,   116,   116,   124,   124,    87,   124,   116,  2039,
    2040,  2108,  2109,    94,    95,   116,   116,   116,   110,   111,
     116,   127,     0,   115,   496,  2036,   113,  2038,  1698,     3,
     127,   126,   126,  1703,   126,   118,   127,  1105,   127,     3,
      11,  1721,    77,   122,   119,  2075,  2076,   119,  1470,   122,
     124,   119,  2082,  2083,    28,   136,  2086,   124,  2088,   866,
     192,  2091,   118,    41,    28,  2095,   119,   148,   115,   118,
     877,   152,   122,    37,   116,    53,   116,   116,   116,  2109,
     116,  2111,    60,   127,   127,  2115,   127,   116,  2099,  2100,
     127,  2102,    64,  2104,   127,   127,   127,  2127,  1768,    77,
      74,    75,    80,   127,   116,    79,    64,   118,    86,    87,
      74,    75,    86,   116,   127,    79,    94,    95,   127,  2149,
    2150,   116,    86,   127,  2154,  1805,   127,   118,   118,   107,
    2141,  2142,   110,  2144,   118,  2165,   110,   111,   118,  1809,
     122,   116,   177,   463,   122,  1213,   110,   111,  2159,    44,
      45,   115,   130,   118,   463,   118,  1422,   135,   136,   118,
     138,   118,     3,   118,  2175,  1587,  1588,  1235,   118,   118,
     148,   118,   150,   151,   152,   153,   118,   155,   118,    74,
      75,   463,   314,   463,    79,   266,   463,    28,  1505,  2149,
     966,    86,   849,  1471,   276,   276,   276,   278,   309,  1451,
     309,   903,   180,   181,   958,   715,   411,  1702,  1810,  1704,
     682,  2099,   302,   721,   192,   110,   111,   689,    94,   253,
     115,  1473,    37,  1718,  1719,    87,   204,    87,   258,    44,
      45,   266,    95,    74,    75,   213,     0,   421,    79,    87,
     372,   276,   374,  1759,    -1,    86,    -1,  1927,    -1,   721,
      -1,  1152,  1153,  1154,  1155,  1925,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,     3,    -1,   110,
     111,    86,    -1,    -1,  1175,   253,  1177,    -1,   256,   257,
     258,   122,    -1,  1152,  1153,  1154,  1155,    -1,   266,    -1,
      -1,    -1,    28,    -1,    -1,   110,   111,   112,   276,   277,
     278,    37,    -1,    -1,    -1,    -1,  1175,  1573,  1177,    -1,
      -1,    -1,  1526,    77,    -1,    -1,    -1,    -1,   296,    -1,
      -1,  1573,    -1,    87,   302,    -1,    -1,    -1,    -1,   410,
      94,    95,    -1,   311,    46,    -1,    -1,    -1,    74,    75,
     421,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    -1,
      86,   823,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1783,  1784,    -1,    -1,    77,    78,    -1,    44,    45,
      -1,    -1,   136,    85,   110,   111,   112,  1591,  1592,   115,
     116,    -1,    -1,   515,   148,    -1,   858,  1601,   152,   367,
      -1,    -1,   473,    -1,   372,   867,   374,    -1,    74,    75,
      -1,    -1,   874,    79,    -1,    -1,    -1,    -1,    -1,   881,
      86,    -1,  1480,   125,   126,    -1,    -1,    -1,    74,    75,
     552,   456,    -1,    79,    -1,    -1,   404,    -1,   406,   407,
      86,  1926,   410,   411,   110,   111,    -1,    -1,   416,   115,
    1935,    -1,   420,   421,    -1,   423,    -1,    -1,    -1,    -1,
      -1,    -1,   584,    -1,   110,   111,    -1,     3,    -1,   931,
      -1,    -1,    -1,   119,    -1,   177,    -1,    -1,    -1,    -1,
      -1,    74,    75,   451,   452,   947,    79,    -1,   456,   457,
     612,   516,    28,    86,   519,   463,    -1,    -1,    -1,    -1,
     468,    37,    38,    -1,    -1,   473,  1991,  1992,    -1,   477,
     478,    -1,   266,    -1,    -1,    -1,    -1,   110,   111,    -1,
     222,    -1,   276,   225,   278,    -1,    -1,    -1,   496,    -1,
      -1,   499,   500,    -1,    -1,    -1,   504,   505,    74,    75,
     508,   509,    -1,    79,    -1,    -1,    -1,   515,    -1,  1805,
      86,   253,    -1,    -1,   522,    -1,    -1,   525,    -1,    -1,
      74,    75,    -1,    -1,   266,    79,    -1,    -1,    -1,    -1,
      44,    45,    86,   541,   110,   111,   112,    -1,   546,   115,
     548,    -1,    -1,   551,   552,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,    -1,   716,    -1,   110,   111,   720,    -1,
      74,    75,   116,   571,    -1,    79,   574,    -1,   576,    -1,
     578,   682,    86,   735,    -1,    28,    -1,   585,    -1,   741,
      -1,    -1,   744,     7,    -1,    -1,    10,    11,    12,    13,
      14,    15,    16,    17,    -1,    -1,   110,   111,   112,    -1,
      -1,   763,    -1,    -1,  1702,    -1,  1704,    -1,    -1,  1853,
      -1,   676,    65,    -1,    -1,    -1,   410,   682,    71,    72,
    1718,  1719,    -1,    -1,    -1,    -1,    -1,   421,   790,    -1,
      -1,    -1,    85,    -1,    -1,    -1,   798,    -1,   380,    -1,
      -1,   649,   650,   651,   652,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   818,    -1,    -1,    -1,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   677,
     678,   679,   125,   126,   682,    -1,    -1,    -1,    -1,   473,
     422,   689,  1184,    -1,    -1,    -1,    -1,    -1,    -1,   113,
     114,  1193,    -1,    74,    75,   703,    -1,    -1,    79,   123,
      -1,    -1,   710,   711,   712,    86,   714,   715,   132,   133,
     134,   135,   136,   721,    -1,    -1,    74,    75,   460,    -1,
      -1,    79,    -1,    -1,   732,    -1,    -1,   735,    86,   110,
     111,    -1,    -1,   741,    -1,   116,   744,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,   135,    -1,    -1,
     138,    86,   110,   111,   916,   866,   918,    -1,   116,    -1,
      -1,    -1,    -1,   151,    -1,   153,   877,   155,    -1,    -1,
     512,   513,   514,    -1,   516,   110,   111,   519,    -1,    -1,
      -1,   116,    -1,    -1,  2028,    -1,  2030,    -1,   530,   531,
     532,    -1,    -1,    -1,    -1,   957,    -1,    -1,    74,    75,
      -1,    -1,   867,    79,     3,    -1,    -1,    -1,    -1,   551,
      86,    -1,    -1,    -1,    -1,   823,    -1,    -1,   826,   827,
     828,    -1,    -1,    -1,   986,    -1,   988,    -1,  1926,    28,
      -1,    -1,    -1,    -1,   110,   111,   112,  1935,    37,   115,
      -1,   849,   850,   851,    -1,    -1,    -1,    -1,    -1,    -1,
     858,  2095,    -1,    -1,    -1,    -1,    -1,    -1,   866,   867,
      -1,   926,    -1,    -1,    -1,    -1,   874,    -1,    -1,   877,
      -1,   879,    -1,   881,   136,    74,    75,    -1,    -1,    -1,
      79,    -1,   947,     1,    -1,     3,   148,    86,   682,    -1,
     152,    -1,  1054,  1991,  1992,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      28,   110,   111,   112,    -1,   923,   115,    -1,    -1,    37,
      38,   309,    -1,   931,    -1,   124,    -1,    -1,    -1,   994,
      -1,    -1,  1094,    -1,   676,    -1,    -1,    -1,    -1,   947,
     948,    -1,    -1,  1105,    -1,    -1,    -1,   955,   956,    -1,
      -1,    -1,   960,    -1,    -1,    -1,    74,    75,   966,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    -1,    86,  1131,
    1132,  1473,    -1,    -1,    -1,    -1,    -1,    -1,   986,   987,
     988,    -1,    -1,    -1,    -1,    -1,   994,    -1,    -1,    -1,
      -1,   253,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
     118,    -1,   120,   121,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   451,   452,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1029,  1030,    -1,    -1,  1033,  1034,  1035,    -1,    -1,
      -1,    -1,    -1,    -1,   296,    -1,    -1,    -1,   477,   478,
     302,    -1,     3,    -1,    -1,  1053,  1054,    -1,    -1,    -1,
    1058,  1213,    -1,    -1,    -1,    -1,  1064,    -1,    -1,    -1,
     499,   500,  1070,   451,   452,   504,   505,    28,  1076,   508,
     509,  1573,   866,  1235,    -1,   463,    37,    -1,    -1,    -1,
      -1,    -1,    -1,   877,    -1,    -1,  1094,    -1,    -1,   477,
     478,    -1,    -1,    -1,    -1,  1257,    -1,    -1,  1260,     1,
      -1,     3,  1264,    -1,    -1,    -1,  1268,  1172,    -1,  1174,
      -1,   499,   500,    74,    75,    -1,   504,   505,    79,    -1,
     508,   509,    -1,    -1,    -1,    86,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,   879,    -1,    -1,
      -1,    -1,    -1,    -1,  1152,  1153,  1154,  1155,   410,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,   546,   421,
     548,    -1,  1170,  1171,    -1,    -1,    -1,  1175,    -1,  1177,
      -1,    -1,    74,    75,    -1,   917,  1184,    79,    -1,    -1,
      -1,    -1,    -1,    -1,    86,  1193,    -1,    -1,    -1,    -1,
      -1,    -1,   934,    -1,   936,   937,    -1,    -1,    -1,    -1,
      -1,    -1,  1210,  1211,  1212,    -1,     0,    -1,   110,   111,
     112,   473,    -1,   115,    -1,    -1,   118,    -1,   120,   121,
      -1,    -1,  1230,    -1,    -1,    -1,    -1,    -1,    -1,  1237,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1256,  1257,
      -1,    -1,    46,    -1,    -1,  1263,  1264,    -1,    -1,  1267,
    1268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    -1,    87,    -1,    -1,    -1,    -1,  1040,  1041,
      94,    95,    -1,  1805,    -1,    -1,    -1,    -1,  1470,    -1,
      -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,  1480,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,   127,   128,   129,    -1,    -1,    -1,    -1,
      -1,   135,    -1,    -1,   138,    -1,    -1,    -1,    -1,  1511,
      -1,   330,    -1,    -1,  1516,    -1,  1518,   151,    -1,   153,
      -1,   155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1437,  1535,    -1,    -1,   113,   114,    -1,    -1,
      -1,    -1,    -1,   177,   178,   179,   123,    -1,    -1,    -1,
      -1,   128,   129,   130,    -1,   132,   133,   134,   135,   136,
      -1,  1409,  1410,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1476,    -1,    -1,  1479,    -1,    -1,  1425,   212,   213,
      -1,  1429,    -1,    -1,    -1,    -1,  1588,    -1,    -1,    -1,
    1172,    -1,  1174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   710,   711,
      -1,    -1,   714,   715,    -1,    -1,    -1,    -1,    -1,   253,
      -1,    -1,  1470,    -1,    -1,  1473,    -1,   258,    -1,    -1,
      -1,    -1,   266,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   276,  1491,   278,    -1,    -1,    -1,    -1,  1497,
    1498,    -1,    -1,    -1,  1502,  1503,  1504,  1505,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   314,    -1,    -1,    -1,    -1,    -1,   135,
      -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1702,    -1,  1704,  1551,  1552,   151,    -1,   153,    -1,   155,
      -1,  1713,    -1,    -1,    -1,    -1,  1718,  1719,    -1,    -1,
      -1,    -1,    -1,  1725,    -1,  1573,    -1,    -1,    -1,    -1,
      -1,    -1,   960,    -1,    -1,    -1,    -1,    -1,    -1,  1587,
    1588,    -1,    -1,    -1,    -1,    -1,   380,   381,   382,    -1,
    1029,  1030,    -1,    -1,  1033,  1034,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   866,    -1,    -1,    -1,    -1,    -1,
     404,    -1,    -1,    -1,    -1,   877,    -1,   411,    -1,    -1,
      -1,    -1,  1784,    -1,    -1,    -1,    -1,    -1,   422,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1646,    -1,
      -1,  1029,  1030,   622,    -1,  1033,  1034,  1035,    -1,    -1,
      -1,    -1,   258,    -1,    -1,    -1,    -1,   451,   452,    -1,
      -1,    -1,   456,    -1,    -1,    -1,   460,    -1,    -1,   463,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   472,    -1,
      -1,    -1,    -1,   477,   478,    -1,    -1,    -1,    -1,    -1,
    1698,    -1,  1700,    -1,    -1,  1703,    -1,    -1,    -1,    -1,
      -1,    -1,   496,    -1,    -1,   499,   500,  1772,  1773,  1451,
     504,   505,    -1,  1721,   508,   509,    -1,    -1,   512,   513,
     514,    -1,  1884,  1885,    -1,    -1,    -1,    -1,    -1,    -1,
     521,    -1,   994,    -1,    -1,    -1,   530,   531,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,   548,    -1,    -1,   551,    -1,   553,
    1768,    -1,    -1,    -1,  1926,    -1,    -1,    -1,    -1,    -1,
     749,    -1,    -1,  1935,   568,  1783,  1784,    -1,    -1,    -1,
      -1,    -1,  1170,  1171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1800,   584,  1802,    -1,    -1,  1805,    -1,    -1,
      -1,    -1,    -1,   782,   783,   784,   785,   786,    -1,    -1,
     789,    -1,  1554,    -1,    -1,    -1,   795,    -1,  1826,    -1,
    1828,    -1,    -1,    -1,    -1,    -1,   617,    -1,    -1,  1991,
    1992,   810,   811,   812,   813,   814,    -1,    -1,   817,    -1,
      -1,    -1,    -1,    -1,    -1,   451,   452,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   649,   650,
     651,   652,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,   478,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   676,    -1,    -1,    -1,    -1,    -1,   682,    -1,
      -1,    -1,    -1,   499,   500,    -1,    -1,    -1,   504,   505,
      -1,    -1,   508,   509,    -1,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    -1,    -1,    -1,    -1,   710,  1925,    -1,  1927,
     714,    -1,    -1,    -1,    -1,   716,    -1,    -1,    -1,   720,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   732,  2101,
     546,    -1,   548,    -1,    -1,    -1,    -1,    -1,  1210,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2119,   749,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1230,    -1,
      -1,    -1,   763,    -1,    -1,  1237,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1994,  1995,  1996,  1997,
    1998,  1999,    -1,  2001,    -1,    -1,    -1,    -1,    -1,   790,
    2008,  2009,  2010,  2011,   795,    -1,    -1,   798,    -1,    -1,
      -1,   617,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   818,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   649,   650,   651,   652,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   851,  1497,  1498,
      -1,    -1,    -1,    -1,   858,    -1,    -1,  2075,  2076,    -1,
      -1,   865,   866,   867,    -1,    -1,    -1,    -1,    -1,    -1,
     874,    -1,    -1,   877,    -1,   879,    -1,  1829,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1497,
    1498,    -1,  1551,  1552,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   917,    -1,    -1,    -1,    -1,    -1,   735,
      -1,    -1,   926,  1112,    -1,   741,    -1,   931,   744,    -1,
      -1,    -1,    -1,   937,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,   947,     8,     9,    -1,    -1,    -1,    -1,
      -1,  1140,    -1,  1551,  1552,    -1,   960,    -1,  1147,    -1,
      -1,    -1,    -1,    -1,    28,    -1,   970,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     994,    -1,  1181,    -1,  1183,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,  1004,    -1,    -1,    -1,    71,    72,    73,
      -1,  1200,    -1,    -1,    -1,    -1,    -1,  1206,    -1,    -1,
      84,    85,    -1,    -1,    -1,  1029,  1030,    -1,    -1,  1033,
    1034,  1035,    -1,    -1,    98,    -1,  1040,  1041,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,  1051,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   897,   898,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1097,    -1,    -1,  1100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   135,    -1,    -1,   138,    -1,    -1,    -1,    -1,
    1131,  1132,    -1,    -1,    -1,    -1,    -1,  1138,   151,  1140,
     153,    -1,   155,  1144,   960,    -1,  1147,    -1,  1149,    -1,
      -1,  1152,  1153,  1154,  1155,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1170,  1171,    -1,    -1,
     986,    -1,   988,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1193,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1200,
      -1,    -1,  1800,    -1,  1802,  1206,  1210,    -1,  1212,    -1,
      -1,    -1,    -1,  1029,  1030,    -1,    -1,  1033,  1034,  1035,
      -1,    -1,    -1,    -1,    -1,    -1,  1230,    -1,  1826,    -1,
    1828,    -1,    -1,  1237,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1260,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1094,    -1,
      -1,  1097,    -1,    -1,  1100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1109,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1152,  1153,  1154,  1155,
      -1,    -1,    -1,    -1,    -1,  1994,  1995,    -1,  1997,  1998,
      -1,    -1,    -1,    -1,  1170,  1171,    -1,    -1,    -1,  2008,
    2009,  2010,  2011,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1994,  1995,  1996,  1997,
    1998,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2008,  2009,  2010,  2011,    -1,    -1,    -1,    -1,  1422,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2075,  2076,    -1,    -1,
      -1,    -1,    -1,  1437,    -1,    -1,    -1,    -1,   451,   452,
    1444,  1257,    -1,    -1,    -1,    -1,    -1,  1451,  1264,    -1,
     463,    -1,  1268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,   478,    -1,  1471,    -1,  1473,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2075,  2076,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   499,   500,    -1,    -1,
      -1,   504,   505,  1497,  1498,   508,   509,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1511,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   546,    -1,   548,    -1,    -1,    -1,    -1,
      -1,  1542,    -1,    -1,    -1,    -1,    -1,  1551,  1552,  1738,
    1554,    -1,    -1,    -1,  1743,  1744,  1745,  1746,  1747,  1748,
      -1,    -1,    -1,  1752,  1753,  1754,  1755,    -1,    -1,  1573,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
    1591,  1592,    -1,    -1,    -1,    -1,    -1,    -1,  1599,    84,
    1601,  1602,    -1,    -1,  1605,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1613,    98,    -1,  1616,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,    -1,
       1,    -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1470,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,  1497,  1498,    -1,    -1,    -1,    -1,    -1,  1692,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
    1516,    -1,  1518,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,  1713,    -1,    85,    86,    87,    -1,    -1,   106,
      -1,    -1,    -1,    -1,  1725,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,  1551,  1552,  1738,    -1,   110,
     111,    -1,  1743,   130,    -1,  1746,    -1,    -1,    -1,    -1,
      -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,  1588,    -1,    -1,  1591,  1592,    -1,    -1,    -1,
      -1,    -1,    -1,  1599,    -1,  1601,  1602,    -1,    28,  1605,
      -1,    -1,    -1,    -1,    -1,    -1,  1800,  1613,  1802,    -1,
    1616,  1805,    -1,    -1,    -1,   192,    -1,    -1,    -1,  1810,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1821,    -1,  1826,    -1,  1828,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,  1838,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    85,  1847,  1848,  1849,  1850,
      -1,    -1,  1853,    -1,    -1,    -1,  1857,  1858,    98,  1860,
      -1,  1862,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,  1874,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,  1884,  1885,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,    -1,    -1,    -1,    -1,   293,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,    -1,   303,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   314,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   330,    -1,    -1,    -1,   960,   335,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1784,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1800,   372,  1802,   374,    -1,    -1,
    1994,  1995,  1996,  1997,  1998,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2003,    -1,  2008,  2009,  2010,  2011,    -1,    -1,
    1826,    -1,  1828,    -1,    -1,    -1,  1029,  1030,  2019,   406,
    1033,  1034,  1035,    -1,    -1,    -1,    -1,  2028,    -1,  2030,
      -1,  1847,  1848,  1849,  1850,    -1,    -1,  1853,    -1,    -1,
      -1,  1857,  1858,    -1,  1860,    -1,  1862,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1874,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2075,  2076,    -1,    -1,    -1,    -1,    -1,  2079,    -1,
      -1,  2082,  2083,    -1,    -1,  2086,    -1,  2088,    -1,    -1,
    2091,    -1,    -1,    -1,  2095,    -1,    -1,    -1,    -1,    -1,
    2101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2119,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2127,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2154,    -1,    -1,    -1,  1170,  1171,    -1,
      -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1994,  1995,
    1996,  1997,  1998,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2008,  2009,  2010,  2011,    -1,   584,    -1,    -1,
      -1,    -1,    -1,  2019,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2028,    -1,  2030,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,     0,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,  2075,
    2076,    -1,    -1,    -1,    -1,    -1,  2082,  2083,    -1,    -1,
    2086,   135,  2088,    46,   138,  2091,    -1,    -1,    -1,  2095,
      -1,   130,    -1,    -1,    -1,    -1,    -1,   151,    -1,   153,
      -1,   155,    -1,    -1,    -1,    -1,   683,    -1,    -1,    -1,
      -1,    -1,   689,    -1,    77,    78,    -1,    -1,    -1,    -1,
      -1,  2127,    85,    -1,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,   716,
      -1,    -1,    -1,   720,   721,    -1,    -1,    -1,  2154,    -1,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   735,    -1,
      -1,    -1,   125,   126,   741,    -1,    -1,   744,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   763,    -1,    -1,    -1,
      -1,    -1,   769,   770,   771,   772,   773,   774,   775,    -1,
      -1,   778,   779,    -1,   781,   782,   783,   784,   785,   786,
     787,   788,    -1,   790,   177,    -1,    -1,    -1,    -1,    -1,
      -1,   798,   799,   800,   801,   802,   803,   804,   805,   806,
     807,   808,   809,   810,   811,   812,   813,   814,   815,   816,
      -1,   818,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
      -1,    -1,    -1,    -1,   293,   294,    -1,    -1,   297,   222,
      -1,    -1,   225,    -1,   303,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   849,   850,    -1,   314,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     253,   330,    -1,    -1,  1497,  1498,   335,    -1,    -1,    -1,
      -1,    -1,    -1,   266,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   276,    -1,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   372,    -1,   374,    -1,    -1,    -1,   916,
      -1,   918,    -1,    -1,    -1,    -1,    -1,    -1,  1551,  1552,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,    -1,
      -1,   948,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     957,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   451,   452,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   986,
      -1,   988,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,
      -1,    -1,    -1,   477,   478,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   499,   500,    -1,    -1,    -1,
     504,   505,    -1,    -1,   508,   509,    -1,    -1,    -1,   422,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   515,  1054,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,   546,    -1,   548,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,   552,    -1,    -1,    -1,  1094,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,  1105,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,   584,    85,    86,    87,   512,
     513,   514,    -1,   516,  1131,  1132,   519,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,   530,   531,   532,
      -1,   110,   111,   612,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   551,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1800,    -1,  1802,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1826,    -1,  1828,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1211,    -1,  1213,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   683,    -1,    -1,    -1,    -1,    -1,
     689,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1235,    -1,
     258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1253,   716,    -1,    -1,
    1257,   720,   721,  1260,    -1,    -1,    -1,  1264,    -1,    -1,
      -1,  1268,    -1,    -1,    -1,    -1,   735,    -1,    -1,    -1,
      -1,    -1,   741,    -1,    -1,   744,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   676,    -1,    -1,    -1,    -1,    -1,   682,
      -1,    -1,    -1,    -1,   763,    -1,    -1,    -1,    -1,    -1,
     769,   770,   771,   772,   773,   774,   775,    -1,    -1,   778,
     779,    -1,   781,   782,   783,   784,   785,   786,   787,   788,
      -1,   790,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   798,
     799,   800,   801,   802,   803,   804,   805,   806,   807,   808,
     809,   810,   811,   812,   813,   814,   815,   816,    -1,   818,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,  1994,  1995,  1996,  1997,  1998,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2008,  2009,  2010,  2011,    -1,
     849,   850,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   897,   898,    -1,    -1,    -1,  1425,    65,
      66,    -1,  1429,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,  2075,  2076,    -1,    -1,    -1,   916,    -1,   918,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1470,   110,   111,   112,    -1,    -1,   115,
     116,    -1,    -1,  1480,    -1,    -1,   960,    -1,    -1,   948,
     126,    -1,    -1,    -1,  1491,    -1,   879,    -1,   957,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1509,    -1,  1511,    -1,    -1,    -1,    -1,  1516,
      -1,  1518,    -1,    -1,    -1,    -1,    -1,   986,    -1,   988,
      -1,    -1,    -1,    -1,   917,    80,    -1,    -1,  1535,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   937,  1029,  1030,    -1,    -1,  1033,
    1034,  1035,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
      -1,  1588,    -1,    -1,    -1,  1054,    -1,    -1,    -1,   617,
      -1,    -1,    -1,    -1,    -1,   150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   649,   650,   651,   652,  1094,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1105,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1040,  1041,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1131,  1132,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1170,  1171,    -1,    -1,
      -1,  1698,    -1,    -1,    -1,  1702,  1703,  1704,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1713,    -1,    -1,    -1,
      -1,  1718,  1719,    -1,    -1,    -1,    -1,    -1,  1725,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1744,  1745,    -1,
    1747,  1748,  1211,    -1,  1213,  1752,  1753,  1754,  1755,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1768,    -1,    -1,    -1,    -1,  1235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1784,    -1,  1172,
      -1,  1174,    -1,    -1,  1253,    -1,    -1,    -1,  1257,    -1,
      -1,  1260,    -1,    -1,    -1,  1264,    -1,    -1,    -1,  1268,
      -1,    -1,  1809,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,   406,   407,    -1,    -1,    -1,   411,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   420,    28,    -1,   423,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,  1884,  1885,    -1,
    1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   929,   457,    65,    -1,    -1,    -1,    -1,   463,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,  1925,  1926,
      -1,    -1,    84,    85,    86,    -1,    -1,    -1,  1935,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,  1425,    -1,    -1,    -1,
    1429,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1987,    -1,    -1,    -1,  1991,  1992,   541,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   551,    -1,    -1,    -1,
      -1,  1470,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1480,    -1,  1497,  1498,    -1,   571,    -1,    -1,   574,
      -1,   576,  1491,   578,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
    1509,    -1,  1511,    -1,    -1,    -1,    -1,  1516,    -1,  1518,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1451,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1535,  1551,  1552,  1097,
      -1,    -1,  1100,    -1,    -1,    -1,    -1,    -1,    -1,    45,
      -1,  1109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2101,    -1,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
    1138,    77,  2119,    -1,    -1,    -1,    -1,    -1,    -1,  1588,
      86,    87,    -1,    28,  1152,  1153,  1154,  1155,    94,    95,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   112,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,  1554,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
     136,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,   148,    88,    89,    90,   152,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,   180,   181,    -1,   122,    -1,   124,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,  1698,
      -1,    -1,    -1,  1702,  1703,  1704,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1713,    -1,    -1,   213,    -1,  1718,
    1719,    -1,    -1,    -1,    -1,    -1,  1725,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   826,   827,   828,    -1,  1744,  1745,    -1,  1747,  1748,
      -1,    -1,    -1,  1752,  1753,  1754,  1755,   253,    -1,    -1,
     256,   257,   258,    -1,   849,   850,   851,    -1,    -1,  1768,
     266,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     276,   277,   278,    -1,    -1,  1784,  1800,    -1,  1802,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     296,    -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,    -1,
    1809,    -1,  1826,    -1,  1828,   311,    -1,    -1,    -1,    -1,
      -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   923,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   948,    -1,    -1,    -1,    45,    46,    -1,
     955,   956,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   966,    -1,    -1,    -1,  1884,  1885,    -1,  1887,  1888,
    1889,  1890,  1891,  1892,  1893,  1894,    -1,    -1,    -1,    77,
      78,    -1,    -1,    -1,    82,    -1,  1829,    -1,   404,    87,
      -1,    -1,    -1,    -1,   410,    -1,    94,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   421,  1925,  1926,    -1,    -1,
      -1,    -1,    -1,    -1,   112,    -1,  1935,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     456,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1053,    -1,
      -1,    -1,    -1,  1058,    -1,    -1,    -1,   473,    -1,  1064,
    1994,  1995,  1996,  1997,  1998,  1070,    -1,    -1,  1987,    -1,
      -1,  1076,  1991,  1992,  2008,  2009,  2010,  2011,   176,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    -1,    -1,    -1,    -1,   522,    -1,    -1,   525,
      -1,    -1,    -1,  1591,  1592,   213,    -1,    -1,    -1,    -1,
      -1,  1599,    -1,  1601,  1602,    -1,    -1,  1605,   258,    -1,
      -1,    -1,    -1,    -1,    -1,  1613,    -1,    -1,  1616,    -1,
      -1,  2075,  2076,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,    -1,
     278,   311,  2101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2119,    -1,    -1,    -1,    -1,    -1,  1211,  1212,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   649,   650,   651,   652,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   677,   678,   679,    -1,    28,   682,    -1,    -1,    -1,
      -1,    -1,    -1,   689,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,
      -1,    -1,   422,    -1,   710,   711,   712,    -1,   714,   715,
      -1,    -1,    65,    -1,    -1,   721,   404,    -1,    71,    72,
      73,   288,    -1,    -1,    -1,    -1,   732,    -1,    -1,   735,
     297,    84,    85,    -1,   422,   741,   303,    -1,   744,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,   118,    -1,   120,   456,    -1,
      -1,   459,   125,   126,    -1,   128,   129,   130,   131,  1847,
    1848,  1849,  1850,    -1,    -1,  1853,    -1,    -1,    -1,  1857,
    1858,    -1,  1860,    -1,  1862,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   372,  1874,   374,   496,    -1,
      -1,    -1,    -1,    -1,  1409,  1410,    -1,   823,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,
    1425,    -1,    -1,    -1,  1429,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,   531,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   858,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     866,   867,    -1,   551,    -1,   553,    -1,    -1,   874,    -1,
      -1,   877,   878,   879,    -1,   881,   564,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1491,    -1,    -1,    -1,
      -1,    -1,   622,    -1,    -1,    -1,    -1,  1502,  1503,  1504,
    1505,    -1,   600,    -1,    -1,    -1,    -1,    -1,   638,    -1,
      -1,    -1,    -1,    -1,    -1,   931,    -1,    -1,    -1,   649,
     650,   651,   652,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   947,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
      -1,  2019,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2028,    -1,  2030,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   698,    -1,
     986,   987,   988,    -1,    -1,   552,    -1,   675,   994,    -1,
      -1,    -1,    -1,    -1,   682,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   726,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2082,  2083,    -1,    -1,  2086,    -1,
    2088,    -1,   710,  2091,    -1,    -1,   714,  2095,    -1,    -1,
      -1,   751,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   732,   612,    -1,    -1,    -1,    -1,
      -1,  1646,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2127,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   789,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   797,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2154,    -1,  1094,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   817,    -1,    -1,
      -1,    -1,    -1,  1698,    -1,  1700,    -1,  1113,  1703,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   683,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1152,  1153,  1154,  1155,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   879,
      -1,    -1,    -1,   851,   852,    -1,    -1,    -1,   735,  1175,
     858,  1177,    -1,  1768,   741,    -1,    -1,   744,   866,   867,
      -1,    -1,    -1,    -1,    -1,    -1,   874,  1193,    -1,   877,
     878,   879,    -1,    -1,    -1,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1210,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,  1230,    -1,    -1,    -1,    -1,   917,
      -1,  1237,    -1,    -1,    -1,    -1,    -1,   925,    -1,    28,
      -1,    -1,    -1,   931,    -1,    -1,    -1,    -1,    -1,   937,
    1256,  1257,    -1,    -1,    -1,    -1,    -1,  1263,  1264,   947,
      -1,  1267,  1268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,   180,
     181,    -1,    -1,    -1,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   994,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,   213,   112,    -1,    -1,   115,   116,   117,    -1,
    1925,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,   916,
      -1,   918,  1040,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1049,   253,    -1,    -1,   256,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1097,    -1,    -1,
    1100,  1101,  1102,    -1,  1104,    -1,   277,    -1,    -1,    -1,
     957,    -1,  1112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1120,    -1,    -1,    -1,  1999,   296,  2001,  1127,    -1,    -1,
      -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,  1138,   986,
     311,   988,    -1,    -1,    -1,  1145,    -1,    -1,    -1,    -1,
    1150,    -1,  1152,  1153,  1154,  1155,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1181,    -1,  1183,  1470,    -1,    -1,  1473,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,  1202,    -1,    -1,    -1,    -1,  1054,  1208,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1193,    -1,    -1,    -1,    -1,
      -1,  1231,    -1,   404,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1210,    -1,  1212,    -1,    -1,  1094,    -1,    -1,
      -1,    -1,  1220,    65,    -1,    -1,    -1,    -1,  1105,    71,
      72,    73,  1230,    -1,    -1,    -1,    -1,    -1,    -1,  1237,
      -1,    -1,    84,    85,    -1,    -1,    -1,    -1,  1278,    -1,
      -1,    -1,    -1,    -1,    -1,   456,    98,  1573,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,  1587,  1588,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,
    1330,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,  1343,   515,    -1,    -1,    -1,    -1,    -1,
      -1,   522,    -1,    -1,   525,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,  1213,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,  1235,    -1,
      -1,    -1,    -1,    -1,  1394,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,   311,    74,    75,    -1,
    1257,    -1,    79,    -1,    -1,    82,    83,  1264,    85,    86,
      87,  1268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,  1721,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,  1422,    -1,    -1,    -1,    -1,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1436,    -1,
      -1,    -1,    -1,    -1,    -1,  1443,    -1,    -1,   649,   650,
     651,   652,    -1,  1451,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1783,  1784,    -1,
      -1,    -1,    -1,  1471,    -1,  1473,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   422,   689,  1805,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   703,    -1,    -1,    -1,    -1,    -1,    -1,   710,
     711,   712,    -1,   714,   715,    -1,    -1,    -1,    -1,    -1,
     721,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      -1,   732,    -1,    -1,   735,    -1,    -1,    -1,    -1,    -1,
     741,    -1,    -1,   744,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1553,    -1,    -1,    -1,    -1,
      -1,  1591,  1592,    -1,    -1,  1595,    -1,  1597,    -1,    -1,
    1600,  1601,    -1,    -1,    -1,  1573,  1606,  1607,    -1,  1609,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1619,
      -1,  1621,    -1,  1470,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1480,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1927,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1651,   823,   180,   181,  1655,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1516,
      -1,  1518,    -1,    -1,    -1,    -1,  1676,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1685,   213,   858,  1535,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   867,    -1,    -1,    -1,
      -1,    -1,    -1,   874,    -1,    -1,    -1,    -1,   879,    -1,
     881,    -1,    -1,    -1,    -1,    -1,    -1,   622,    -1,    -1,
      -1,    -1,    -1,    -1,  1692,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,   638,    -1,    -1,    -1,   642,    -1,    -1,
      -1,  1588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     931,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
      -1,    -1,    -1,    -1,    -1,   302,   947,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   311,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   698,    -1,    -1,  1764,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   712,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   986,   987,   988,  1786,    -1,
      -1,   726,   727,   994,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1805,    -1,  1839,
      -1,    -1,    -1,    -1,    -1,    -1,   751,    -1,    -1,    -1,
      -1,    -1,    -1,  1853,  1854,  1702,    -1,  1704,    -1,    -1,
      -1,  1861,    -1,    -1,    -1,  1865,    -1,  1867,    -1,    -1,
      -1,  1718,  1719,    -1,    -1,    -1,  1876,   404,    -1,    -1,
      -1,    -1,    -1,    -1,   789,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   797,    -1,    -1,    -1,    -1,  1744,  1745,    -1,
    1747,  1748,    -1,    -1,    -1,  1752,  1753,  1754,  1755,    -1,
      -1,    -1,   817,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1094,    -1,    -1,    -1,  1927,    -1,   456,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1784,    -1,  1907,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,
      -1,    -1,    -1,    -1,   879,    -1,    -1,    -1,    -1,    -1,
      -1,  1152,  1153,  1154,  1155,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    -1,   522,    -1,    -1,   525,    -1,
      -1,    -1,    -1,    -1,  1175,    -1,  1177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2020,  2021,  1193,  2023,    -1,  2025,    -1,    -1,  2028,  2029,
    2030,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1210,
    1887,  1888,  1889,  1890,  1891,  1892,  1893,  1894,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1230,
      -1,    -1,    -1,    -1,    -1,    -1,  1237,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1926,
      -1,    -1,    -1,    -1,  2084,  1256,  1257,  2087,  1935,    -1,
      -1,    -1,  1263,  1264,    -1,  2095,  1267,  1268,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   649,   650,   651,   652,    -1,    -1,    -1,    -1,
    2130,    -1,    -1,    77,    78,    -1,    -1,    -1,    -1,    -1,
    1987,    -1,    -1,    -1,  1991,  1992,    -1,    -1,    -1,    -1,
     677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   689,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,
      -1,   125,   126,   710,   711,   712,    -1,   714,   715,    -1,
      -1,    -1,    -1,    -1,   721,    -1,  1101,  1102,    -1,  1104,
      -1,    -1,    -1,    -1,    -1,   732,    -1,  1112,   735,    -1,
    1115,    -1,    -1,    -1,   741,  1120,    -1,   744,    -1,    -1,
      -1,    -1,  1127,  1128,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
    1145,  1146,    -1,    -1,    -1,  1150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   213,
      -1,    -1,    -1,    -1,    -1,    -1,  1181,    -1,  1183,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   823,  1202,    -1,  1470,
      -1,    -1,  1473,  1208,    -1,    -1,    -1,    -1,    -1,   253,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,    -1,    -1,    -1,  1231,    -1,    -1,    -1,
      -1,   858,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     867,    -1,    -1,    -1,    -1,    -1,    -1,   874,    -1,    -1,
      -1,    -1,   879,    -1,   881,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1278,  1279,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1573,    -1,   931,    -1,    -1,    -1,    76,    77,
      78,    -1,    -1,    -1,    -1,    -1,  1587,  1588,    -1,    -1,
     947,    -1,    -1,    -1,    -1,  1330,    -1,  1332,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,  1343,  1344,
      -1,    -1,   386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,   986,
     987,   988,    -1,    -1,    -1,    -1,    -1,   994,   126,    -1,
      -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,   422,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1394,
     158,  1396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,   456,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   212,   213,    -1,    -1,    -1,    -1,
    1721,    -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1094,   512,   513,
     514,    -1,   516,    -1,    -1,   519,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   253,   530,   531,   532,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   551,   276,   553,
      -1,    -1,  1783,  1784,    -1,    -1,    -1,    -1,   276,    -1,
      -1,    -1,   566,    -1,    -1,  1152,  1153,  1154,  1155,    -1,
      -1,    -1,    -1,    -1,  1805,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1175,    -1,
    1177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1193,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1579,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1210,    -1,    -1,    -1,    -1,    -1,    -1,
    1595,  1596,  1597,  1598,    -1,  1600,  1601,    -1,    -1,    -1,
      -1,  1606,  1607,  1230,  1609,    -1,  1611,    -1,    -1,    -1,
    1237,    -1,   380,    -1,  1619,  1620,  1621,    -1,   386,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,   386,  1256,
    1257,    -1,   676,    -1,    -1,    -1,  1263,  1264,   682,    -1,
    1267,  1268,    -1,    -1,    -1,    -1,  1651,    -1,  1653,    -1,
    1655,    -1,  1657,    -1,   422,    -1,  1927,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1676,  1677,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1685,  1686,    -1,    -1,    -1,    -1,    -1,    -1,   456,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,   456,    -1,
      -1,    -1,    -1,    -1,   472,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,   512,   513,   514,    -1,   516,    -1,
      -1,   519,    -1,    -1,    -1,    -1,    -1,    66,   516,    -1,
      -1,   519,   530,   531,   532,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,   532,    -1,    85,    86,    87,    -1,
      -1,   549,    -1,   551,    -1,   553,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   553,    -1,    -1,   566,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   566,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,   867,    -1,    -1,    -1,    -1,    -1,    -1,
     874,    -1,   617,    -1,  1839,   879,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1470,    -1,    -1,  1473,    -1,    -1,  1854,
      -1,    -1,    -1,    -1,  1859,    -1,  1861,  1862,    -1,  1864,
    1865,    -1,  1867,    -1,  1869,    -1,   651,   652,    -1,    -1,
    1875,  1876,    -1,   917,    -1,    86,    -1,    -1,    -1,    -1,
      -1,    -1,   926,    -1,    -1,    -1,    -1,   931,    -1,    -1,
      -1,    -1,    -1,   937,    -1,    -1,    -1,    -1,    -1,    -1,
     668,    -1,    -1,   947,    -1,    -1,    -1,    -1,   676,    -1,
      -1,    -1,    -1,    -1,   682,    -1,    -1,    -1,   676,    -1,
      -1,    -1,  1927,    -1,   682,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,    -1,    -1,
      -1,   152,    -1,    86,    -1,    -1,  1573,    -1,    -1,    -1,
     994,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1587,  1588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   180,
     181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   136,    -1,    -1,  1040,  1041,    -1,    -1,
      -1,    -1,   213,    -1,    -1,   148,  1050,    -1,  1052,   152,
      -1,    -1,    -1,    -1,    -1,  2020,  2021,    -1,  2023,  2024,
    2025,    -1,    -1,    -1,  2029,  2030,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   180,   181,    -1,
      -1,    -1,   253,    -1,   314,   256,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     330,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2084,
    2085,    -1,  2087,  2088,    -1,   296,    -1,  2092,    -1,    -1,
      -1,   302,    -1,    -1,  1721,    -1,    -1,   865,    -1,   867,
       1,    -1,     3,     4,     5,     6,   874,     8,     9,   867,
     253,   879,    -1,   256,   257,   258,   874,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2130,    -1,    28,  1172,    -1,
    1174,    -1,    -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   917,
      -1,    -1,    -1,   296,    -1,    -1,  1783,  1784,   926,   302,
      -1,    -1,    -1,   931,    65,    -1,    -1,    -1,   926,   937,
      71,    72,    73,   931,    -1,    -1,    -1,    -1,  1805,   947,
      -1,    -1,    -1,    84,    85,    -1,    -1,    -1,    -1,   947,
      -1,    -1,    -1,   404,    -1,    -1,    -1,    98,    -1,   410,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
     421,   112,    -1,    -1,   115,   116,   117,   118,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,   994,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,   994,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   456,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   473,    -1,    -1,    -1,    -1,   410,    -1,    -1,
      -1,    -1,  1040,  1041,    -1,    -1,    -1,    -1,   421,    -1,
      -1,    -1,  1050,  1041,  1052,   496,    -1,    -1,    -1,    -1,
      -1,    -1,  1050,    -1,  1052,    -1,    -1,    -1,    -1,    -1,
    1927,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,
      -1,   522,  1097,    -1,   525,  1100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1109,    -1,    -1,    -1,    -1,    -1,
     473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   622,  1138,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1152,  1153,  1154,
    1155,    -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,   522,
      -1,    -1,   525,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1437,    -1,    -1,    -1,    -1,    -1,    -1,
    1444,    -1,    -1,    -1,  1172,    -1,  1174,  1451,    -1,    -1,
      -1,    -1,    -1,    -1,  1172,    -1,  1174,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1471,    -1,  1473,
      -1,    -1,  1476,    -1,    -1,  1479,    -1,    -1,   649,   650,
     651,   652,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   749,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   703,   763,    -1,    -1,    -1,    -1,    -1,   710,
     711,    -1,    -1,   714,   715,    -1,   649,   650,   651,   652,
    1554,    -1,   782,   783,   784,   785,   786,    -1,  1562,   789,
     790,    -1,    -1,    -1,   735,   795,    -1,    -1,   798,  1573,
     741,    -1,    -1,   744,   677,   678,   679,    -1,    -1,    -1,
     810,   811,   812,   813,   814,    -1,    -1,   817,   818,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     703,    -1,    -1,    -1,    -1,    -1,    -1,   710,   711,    -1,
      -1,   714,   715,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   735,    -1,    -1,    -1,    -1,    -1,   741,    -1,
      -1,   744,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   823,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   858,    -1,    -1,
      -1,    -1,   136,    -1,    -1,   866,   867,    -1,    -1,    -1,
      -1,    -1,    -1,   874,   148,    -1,   877,    -1,   152,  1437,
     881,    -1,    -1,    -1,    -1,    -1,  1444,    -1,    -1,  1437,
      -1,    -1,    -1,  1451,    -1,    -1,  1444,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   180,   181,    -1,    -1,
      -1,    -1,    -1,  1471,    -1,  1473,    -1,    -1,  1476,    -1,
      -1,  1479,    -1,  1471,     1,  1473,    -1,    -1,  1476,    -1,
     931,  1479,    -1,   866,    -1,    -1,    -1,    -1,  1772,  1773,
      -1,  1775,    -1,    -1,   877,    -1,   947,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,   253,
      -1,    -1,   256,   257,   258,   986,   987,   988,    -1,    66,
      -1,    -1,    -1,   994,    -1,  1829,  1554,    74,    75,    -1,
      -1,    -1,    79,   277,  1562,    -1,  1554,    -1,    85,    86,
      87,    -1,    -1,    -1,  1562,  1573,  1591,  1592,    -1,    -1,
      -1,    -1,   296,   100,  1599,  1573,  1601,  1602,   302,    -1,
    1605,    -1,    -1,   110,   111,    -1,    -1,    -1,  1613,    -1,
      -1,  1616,    -1,    -1,   121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1112,   986,   987,   988,    -1,    -1,    -1,    -1,
      -1,   994,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1140,    -1,    -1,    -1,    -1,    -1,    -1,  1147,    -1,    -1,
      -1,    -1,    -1,  1094,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1181,    -1,  1183,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   410,    -1,    -1,    -1,
    1200,    -1,    -1,    -1,    -1,    -1,  1206,   421,    -1,    -1,
      -1,  1152,  1153,  1154,  1155,    -1,    -1,    -1,    -1,    -1,
      -1,  1094,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1175,    -1,  1177,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   473,
    1260,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1210,
      -1,    -1,    -1,    -1,  1772,  1773,    -1,  1775,    -1,  1152,
    1153,  1154,  1155,    -1,  1772,  1773,    -1,  1775,    -1,  1230,
      -1,    -1,    -1,    -1,    -1,    -1,  1237,    -1,    -1,    -1,
      -1,   515,  1175,    -1,  1177,    -1,    -1,    -1,   522,    -1,
      -1,   525,    -1,    -1,    -1,  1256,  1257,    -1,    -1,    -1,
      -1,    -1,  1263,  1264,    -1,    -1,  1267,  1268,    -1,    -1,
      -1,  1829,  1847,  1848,  1849,  1850,    -1,  1210,  1853,    -1,
      -1,  1829,  1857,  1858,    -1,  1860,     1,  1862,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,  1230,    -1,  1874,
      -1,    -1,    -1,    -1,  1237,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1256,  1257,    -1,    -1,    -1,    -1,    -1,
    1263,  1264,    -1,    -1,  1267,  1268,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      85,    -1,    -1,    -1,    -1,   649,   650,   651,   652,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,   677,   678,   679,    -1,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,   703,
      -1,    -1,    -1,    -1,    -1,    -1,   710,   711,    -1,    -1,
     714,   715,    -1,    -1,  2019,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,  2028,    -1,  2030,    -1,    -1,    -1,    -1,
      -1,   735,    -1,    -1,    -1,    -1,    -1,   741,    -1,  1470,
     744,    -1,  1473,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    84,    85,    -1,    -1,  2082,  2083,    -1,
      -1,  2086,    -1,  2088,    -1,    -1,  2091,    98,    -1,    -1,
    2095,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,   116,   117,  1470,    -1,   120,
      -1,    -1,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,    -1,  2127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1573,    -1,    -1,    -1,    -1,    -1,    -1,  2154,
      -1,    -1,    -1,    -1,    -1,    -1,  1587,  1588,    -1,    -1,
      -1,    -1,   866,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   877,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1587,  1588,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,  1738,    -1,
      -1,    -1,    -1,  1743,  1744,  1745,  1746,  1747,  1748,    -1,
     100,    -1,  1752,  1753,  1754,  1755,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,
      -1,    -1,   986,   987,   988,    -1,   126,    -1,   128,    -1,
     994,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
      -1,    -1,    -1,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,  1783,  1784,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,  1805,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
    1094,    -1,    -1,    -1,    -1,    -1,   100,  1887,  1888,  1889,
    1890,  1891,  1892,  1893,  1894,    -1,   110,   111,   112,   113,
     114,   115,    -1,    -1,   118,   119,   120,   121,    -1,   123,
    1783,  1784,   126,    -1,   128,   129,   130,    -1,   132,   133,
     134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1152,  1153,
    1154,  1155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1175,    -1,  1177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1210,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1230,    -1,    -1,    -1,
      -1,    -1,    -1,  1237,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1256,  1257,    -1,    -1,    -1,    -1,    -1,  1263,
    1264,    -1,    -1,  1267,  1268,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,  1470,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1587,  1588,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1783,
    1784,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,    -1,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,   116,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,   116,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
     116,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,   116,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,   116,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
     116,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
     116,   117,   118,    -1,   120,   121,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,   121,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,     1,   117,     3,     4,     5,     6,
      -1,     8,     9,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,     1,
     117,     3,     4,     5,     6,    -1,     8,     9,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,     1,   117,     3,     4,
       5,     6,   122,     8,     9,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    -1,    88,    89,    90,    -1,     1,
      -1,     3,     4,     5,     6,    98,     8,     9,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,   116,   117,   118,    28,   120,    -1,   122,
      -1,   124,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    -1,    88,    89,    90,    -1,
       1,    -1,     3,     4,     5,     6,    98,     8,     9,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,   118,    28,   120,    -1,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,    90,
      -1,     1,    -1,     3,     4,     5,     6,    98,     8,     9,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    28,    -1,
      -1,   122,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,
      90,    -1,     1,    -1,     3,     4,     5,     6,    98,     8,
       9,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    28,
      -1,    -1,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,   118,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,   116,   117,   118,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
     118,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,    -1,    -1,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,   120,    -1,    -1,    -1,   124,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
     118,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,   120,    -1,    -1,    -1,   124,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,    -1,   120,    -1,
      -1,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,   121,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,
     126,   127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,    -1,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,    -1,
      -1,   124,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,   122,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,    -1,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,     0,     1,    -1,     3,     4,     5,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,   116,   117,   118,
      -1,   120,   121,    -1,    -1,    -1,   125,   126,     0,     1,
      -1,     3,     4,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
      -1,    -1,    -1,   125,   126,     0,     1,    -1,     3,     4,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,     0,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,     0,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,     0,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,     1,    -1,
       3,     4,     5,    -1,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,     1,    -1,     3,     4,
       5,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,     1,
     115,     3,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    -1,    66,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    -1,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,     0,    -1,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,    -1,
     124,    -1,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    -1,    66,
      -1,    68,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    -1,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
       0,    -1,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,   118,    -1,    -1,   121,   122,    -1,   124,    -1,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    -1,    66,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    -1,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,     0,    -1,    99,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,   122,    -1,   124,    -1,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    -1,    66,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    -1,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,     0,    -1,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,   122,
      -1,   124,    -1,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    -1,
      66,    -1,    68,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    -1,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    -1,    99,   100,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,   126,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   126,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   126,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   126,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    76,    77,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,     3,    -1,    -1,
      -1,   105,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     124,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    68,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    78,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   124,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,   120,   121,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     121,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,
       3,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    76,    77,    -1,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,   100,   101,    -1,
      -1,    -1,   105,    -1,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,   118,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,   107,
      -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,   118,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,   118,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      76,    77,    -1,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,     0,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,   100,   101,    -1,    -1,    -1,   105,
      -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,   118,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,   116,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,    -1,   116,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,   116,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    -1,    -1,   116,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    -1,    -1,    -1,    -1,   116,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,   116,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,   116,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,   115,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,   115,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,   115,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,   110,
     111,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    80,
      81,    -1,    -1,    -1,    85,    86,    87,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,   116,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    53,    65,    66,    74,    75,
      76,    77,    79,    80,    81,    82,    83,    85,    86,    87,
     100,   101,   105,   110,   111,   112,   115,   118,   138,   139,
     140,   142,   167,   204,   205,   206,   207,   208,   209,   264,
     267,   268,   271,   272,   273,   274,   275,   276,   277,   279,
     283,   286,   287,   288,   289,   290,   291,   296,   297,   306,
     307,   308,   315,   316,   320,   323,   328,   357,   360,   361,
     379,   380,   382,   383,   384,   385,   386,   387,    77,   124,
       5,    31,   209,   381,   209,   115,   115,   115,   142,   209,
     381,   277,   278,   315,   323,    37,   140,   209,   305,   306,
     308,   310,   311,   312,   314,   315,   323,   326,   327,   332,
     113,   118,   139,   140,   209,   122,   124,   118,   122,   121,
     112,   113,   204,   209,   122,   142,   209,   122,   124,   121,
     113,   122,   124,   122,   121,   122,   140,   209,   315,     1,
      31,    37,    38,   118,   138,   140,   206,   208,   209,   264,
     274,   275,   277,   279,   308,   312,   315,   323,   326,   327,
     328,   330,   338,   339,   340,   341,    37,    38,   140,   315,
     340,   115,   126,     1,    29,    30,    31,    32,    33,    65,
     116,   138,   209,   263,   267,   269,   270,   277,   279,   283,
     284,   285,   291,   295,   303,   304,   344,   345,   346,   347,
     348,   349,   323,   115,   308,   315,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    46,    47,    66,    85,
      87,   100,   122,   142,   163,   164,   263,   268,   269,   277,
     280,   284,   286,   294,   359,   362,   363,   364,   369,   370,
     371,    31,    76,   124,   206,   208,   296,   360,   361,   379,
     380,   387,     1,   206,   273,   290,   296,   328,   357,   383,
       1,   382,   383,     0,   209,   381,   381,     5,   119,   381,
       1,     4,     6,     8,     9,    65,    71,    72,    73,    84,
      85,    98,   102,   103,   104,   105,   106,   107,   108,   109,
     112,   115,   117,   125,   126,   128,   129,   130,   131,   142,
     168,   169,   209,   210,   211,   212,   215,   216,   220,   221,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   241,   243,   244,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     381,   393,   394,   395,   396,   139,   209,   122,   142,   209,
     277,   323,   126,   115,   126,   116,   303,   304,   348,   349,
     323,   326,   327,   305,   310,   314,   315,   116,   315,   116,
     315,   315,    85,   142,   194,   196,   198,   202,   203,   209,
     221,   226,   244,   248,   295,   118,   113,   113,   118,     1,
      68,    78,    80,    81,    88,    91,    92,    93,    94,    96,
      98,    99,   115,   117,   118,   121,   143,   144,   145,   146,
     147,   148,   149,   150,   165,   166,   168,   169,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   185,   189,
     190,   191,   192,   209,   216,   241,   295,   307,   309,   315,
     323,   328,   329,   358,    80,    81,   209,   263,   267,   277,
     280,   283,   291,   298,   299,     1,   121,   191,   192,   140,
     209,     1,   209,   265,   266,     1,   121,   266,   299,    65,
     195,   197,   199,   200,   201,   209,   295,     1,   121,   191,
     192,   299,     1,   121,   191,   192,     1,   121,   191,   192,
     140,   209,   120,   120,   120,   122,   323,   308,   312,   315,
       1,   119,   363,   370,   371,   363,   370,   371,     1,   118,
     120,   120,   323,   118,   127,   139,   209,   236,   257,   261,
     262,   120,   122,   142,   209,   121,   122,   121,   122,   315,
      37,   115,   126,   128,   138,   140,   209,   263,   269,   277,
     279,   284,   305,   306,   315,   321,   323,   324,   327,     1,
     116,   120,     1,   116,   120,     1,   120,     1,   120,   116,
     116,   308,   115,   308,   115,   115,     1,   118,     1,   121,
       1,    37,    38,   118,   209,   263,   269,   277,   280,   284,
     315,   340,   341,     1,   118,     1,   359,   362,   370,   371,
     359,   362,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    85,    86,    88,    89,    90,   118,   124,
     142,   186,   187,   188,   209,   216,   221,   237,   239,   244,
     257,   258,   259,   320,   350,   351,   354,   355,   356,   363,
     364,   365,   366,   367,   368,   370,   371,   373,   374,   375,
     376,   377,   378,   121,    31,   209,   381,   209,   204,   205,
     207,   208,   305,   306,   312,   315,   323,   328,   330,   363,
     371,   206,   296,   119,   235,   236,   256,   116,     1,   115,
     169,   212,   217,   220,   222,   242,   243,   245,   115,   221,
     244,   221,   244,   115,   209,   263,   269,   277,   280,   284,
     302,   261,   115,   115,   302,   261,   115,   115,   115,   115,
     115,   115,   222,   245,   116,   237,   239,   259,   269,   277,
     279,   284,   292,   342,   381,   122,   170,   171,   213,   218,
     237,   122,     1,   121,   122,     1,     7,     8,     9,   115,
     123,   126,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,   119,   238,   171,   213,   214,   224,   246,   112,
     132,   133,   129,   130,    10,    11,   227,   249,    12,    13,
     113,   114,    14,    15,   128,   134,   135,    16,    17,   136,
     238,   116,     7,     8,     9,   115,   123,   126,   238,   112,
     132,   133,   129,   130,    10,    11,    12,    13,   113,   114,
      14,    15,   128,   134,   135,    16,    17,   136,   238,   116,
     116,   107,   209,   295,   388,   391,   392,   122,   122,   127,
     139,   261,   262,   127,   139,   261,   262,   116,   116,   116,
     116,   305,   310,   314,   116,   116,   305,    11,   114,   120,
     119,   115,   315,   323,   324,    65,   201,   209,   295,   201,
       1,   209,   263,   277,   280,   291,   300,   295,   328,   329,
     115,   142,   209,   209,   295,     1,   115,   300,   112,   115,
     209,   295,   118,   370,   371,   370,   371,   370,   118,   370,
     371,   118,     1,   121,     1,     1,   118,   120,   120,    69,
      70,    91,    95,    97,   121,    69,    70,   121,   118,     1,
     189,   190,     1,   189,   190,     1,   119,   115,   124,   209,
     281,   282,   305,   311,   313,   315,   323,   330,   331,   332,
       1,   295,   303,   346,   323,   309,   315,   115,   124,   149,
     150,   165,   166,   168,   169,   178,   209,   295,   113,   142,
     209,   209,   263,   277,   280,   113,   113,   119,   120,     1,
     118,   122,    28,   141,   209,   114,   120,   119,   209,   324,
     326,   338,   338,   338,   118,   120,   121,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   213,
     214,   216,   236,   257,   294,   335,   336,   305,   308,   310,
     312,   314,   305,   312,   122,   237,   258,   333,   334,   370,
     371,   370,   371,   338,   339,   338,   339,   127,   127,   127,
      51,   344,   345,     1,   266,   122,   122,     1,   121,   191,
     192,     1,   121,   191,   192,   122,   116,   209,   303,   304,
     315,   323,   324,   348,   349,   127,   139,   261,   262,   315,
     323,   327,   323,   115,   126,   321,     1,     1,   120,     1,
      51,   209,   344,   345,   120,     1,    51,   209,   344,   345,
     120,     1,    51,   209,   344,   345,   120,    51,   209,   344,
     345,     3,    28,    44,    74,    75,   116,   317,   318,   319,
     237,   139,   209,   121,   122,   118,   118,   124,   261,   262,
     124,   115,   115,     1,   115,    52,    53,    54,    56,    57,
      58,    59,    62,    86,   209,   259,   320,   350,   373,   377,
     115,   209,   118,   118,   118,   213,   214,   239,   259,   115,
     277,   115,   115,   182,   209,   118,   118,   118,   124,   123,
     238,     1,   123,   118,   120,   239,   259,   238,   116,   120,
     239,     1,   365,   366,   365,   366,   350,   351,   359,   362,
     350,   351,   359,   362,     1,     1,   381,   381,   140,   209,
     122,   122,   323,   312,   315,   363,   371,   363,   371,   371,
     236,   136,   118,   136,    65,   138,   209,   221,   244,   269,
     277,   279,   284,   293,   343,     1,     1,     7,     8,     9,
     115,   123,   126,     7,     8,     9,   115,   123,   126,   209,
     294,   113,   115,   126,   209,   263,   269,   277,   280,   284,
     315,   322,   323,   325,   209,   263,   269,   277,   280,   284,
     301,   239,   342,   370,   209,   126,   325,   301,   237,   381,
     381,   381,   237,   221,   244,   343,   116,   209,   269,   277,
     279,   284,   324,   116,   123,     1,   161,   162,     1,   121,
     120,   127,     1,   161,   162,   121,     1,   161,   162,     1,
     209,   116,   214,   218,   219,   258,     1,   209,   239,   259,
     213,   237,     1,   224,   246,   224,   246,   224,   246,   225,
     247,   225,   247,   226,   248,   226,   248,   227,   249,   227,
     249,   227,   249,   213,   214,   229,   250,   213,   214,   229,
     250,   213,   214,   230,   251,   213,   214,   231,   252,   213,
     214,   232,   253,   233,   254,   234,   255,   124,   213,   214,
     239,   240,   259,   260,   213,   237,     1,   209,   116,   218,
     219,     1,   209,   239,   259,   213,   237,   224,   246,   224,
     246,   224,   246,   225,   247,   225,   247,   226,   248,   226,
     248,   227,   249,   227,   249,   227,   249,   227,   249,   213,
     214,   229,   250,   213,   214,   229,   250,   213,   214,   230,
     251,   213,   214,   231,   252,   213,   214,   232,   253,   233,
     254,   234,   255,   124,   239,   240,   259,   260,   213,   237,
     113,   114,   209,   389,   390,   209,   121,   388,   391,   392,
     392,   127,   127,   127,   127,   127,   127,   202,   194,   196,
     198,   209,   315,   323,   114,   119,   324,   114,   122,   113,
     122,   209,   263,   277,   280,   324,   315,   323,   330,   331,
     182,   282,   305,   315,   323,   122,   209,   122,   209,   324,
     209,   315,   115,   121,   172,   173,   172,   173,   370,   370,
     370,   211,   370,   370,     1,   335,   336,   116,   261,   262,
     122,   120,     1,   295,   303,   346,   323,   305,   313,   315,
     124,   320,   209,   115,   309,   309,   209,     1,     1,   282,
     203,   113,   201,   201,   261,   262,   265,   191,   192,     1,
     121,   266,   119,   124,   119,   124,   200,   196,   209,   119,
     209,   119,   370,   371,     1,   118,   120,   118,   120,   118,
     153,   154,   157,   158,   159,   121,   151,   154,   118,   121,
     153,   154,   157,   158,   159,   119,    37,   330,   331,   332,
     333,   334,   337,     1,   121,   266,     1,   121,   266,     1,
     121,   191,   192,   315,   323,   324,   116,   116,   116,   127,
     127,   127,   323,   321,   116,   348,   349,   127,   139,   261,
     262,   344,   345,   295,   344,   344,   344,   345,   116,   115,
     116,   120,   318,   116,   116,   116,     1,   161,   162,   350,
     351,   124,   124,   350,   351,   239,   259,   239,   259,   116,
     239,   259,   124,   261,   262,   124,   115,   115,   350,   115,
     214,   259,   115,   124,    56,     1,   116,   118,   209,   239,
     259,   372,   118,   118,   118,   118,   118,   381,   115,   237,
     237,   209,   350,   351,    90,   214,   258,    88,    89,    90,
     237,   258,   214,   258,   237,   258,   113,   312,   371,   371,
     118,   239,   240,   259,   260,   239,   240,   259,   260,   138,
     139,   116,   138,   269,   277,   279,   284,   324,   116,     1,
     209,   116,   218,   219,     1,   209,   239,   259,     1,   209,
     116,   218,   219,     1,   209,   239,   259,   116,   116,   324,
     203,   116,   315,   325,   348,   349,   261,   262,   113,   323,
     115,   322,   126,   113,   126,   209,   263,   269,   277,   280,
     284,   325,   116,   116,   116,   116,   261,   262,   126,   126,
     325,   120,   116,   120,   120,   120,   116,   116,   224,   246,
     381,     1,   121,   213,   237,     1,     1,   116,   120,   116,
     127,   127,     1,   120,   124,   124,   120,   124,   124,   116,
     127,   127,   124,   124,   124,   124,   209,   209,   118,   120,
     209,   381,   121,   121,   315,   323,   196,   203,   113,   122,
     122,   209,   323,   315,   116,   323,   305,   116,   122,   122,
     209,   116,     1,   161,   162,   281,   315,   209,   115,   305,
     313,   313,   261,   262,   115,   116,   114,   203,   114,   114,
     118,     1,   118,   194,   193,   295,   194,   193,   198,   119,
     122,     1,   155,   156,     1,   155,   156,   371,     1,   335,
     336,   120,   121,   333,   334,     1,   118,     1,   118,   323,
     321,   116,   116,   116,   127,   127,   127,   324,   327,   239,
     116,   318,     1,   350,   351,   350,   351,   116,   116,   116,
     116,     1,   350,   116,   239,   350,   351,   124,   124,   259,
     116,   239,   259,    56,   259,   372,   381,   115,   350,   124,
     118,     1,   118,     1,   116,   259,   372,     3,   116,   124,
     381,   116,   116,   120,   115,   115,   182,   124,   124,   124,
     124,   124,   124,   124,   124,   116,   116,     1,   116,   116,
     127,   127,   116,   127,   127,   116,   114,   315,   323,   325,
     116,   116,   116,   127,   127,   203,   322,   116,   348,   349,
     261,   262,   203,   261,   262,   113,   126,   115,   333,   127,
     127,   261,   262,   261,   262,   126,   342,   209,   209,   237,
       1,   214,   258,   213,   214,   213,   214,   236,   256,   213,
     214,   236,   256,   213,   214,   213,   214,   236,   256,   213,
     214,   236,   256,   213,   214,   236,   256,   213,   214,   236,
     256,   213,   214,   236,   256,   213,   214,   236,   256,   389,
     118,   118,   114,   203,   122,   370,   305,   119,   122,     1,
     115,   124,   124,   114,   191,   192,   118,   191,   192,   119,
     324,   119,   198,   337,   121,   333,   334,     1,   191,   192,
     191,   192,   116,   350,   350,   350,   350,   350,   351,   116,
     115,   372,   116,   239,   259,   239,   350,     1,   116,   239,
     259,   352,   353,   381,   118,   353,     3,   116,   124,   122,
     182,   237,   237,     1,     1,   322,   116,   114,   116,   116,
     127,   127,   114,   127,   127,   203,   261,   262,   342,   127,
     127,   127,   127,   261,   262,   116,   116,   116,   116,   114,
     335,   261,   262,   261,   262,   191,   192,   194,   194,   120,
     121,     1,    64,    64,   239,   259,   116,   239,   259,   116,
     118,   116,   118,   350,   351,   116,   350,   351,   116,   120,
     124,   115,     3,   116,   124,   353,   118,   353,    73,   182,
     183,   184,   116,   116,   116,   120,   114,   127,   127,   116,
     127,   127,   118,   121,   350,   350,   116,   116,   118,   350,
     239,   350,   351,   118,   352,   353,   237,   353,   118,   353,
     116,   124,     3,   116,   124,   370,   370,   121,   183,   122,
     182,   224,   246,   333,   116,   116,   116,   116,   116,   124,
     118,   353,   353,   118,   353,   184,   116,   350,   118,   118,
     118,   353,   116,   116,   116,   124,   121,   116,   118,   118,
     118,   353,   118,   116,   118
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 138: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10761 "grammar.ec"
	break;
      case 139: /* "type" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10770 "grammar.ec"
	break;
      case 140: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10779 "grammar.ec"
	break;
      case 141: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 10788 "grammar.ec"
	break;
      case 142: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10797 "grammar.ec"
	break;
      case 143: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10806 "grammar.ec"
	break;
      case 144: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10815 "grammar.ec"
	break;
      case 145: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10824 "grammar.ec"
	break;
      case 146: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10833 "grammar.ec"
	break;
      case 147: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10842 "grammar.ec"
	break;
      case 148: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10851 "grammar.ec"
	break;
      case 149: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10860 "grammar.ec"
	break;
      case 150: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10869 "grammar.ec"
	break;
      case 151: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10878 "grammar.ec"
	break;
      case 152: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10887 "grammar.ec"
	break;
      case 153: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10896 "grammar.ec"
	break;
      case 154: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10905 "grammar.ec"
	break;
      case 155: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 10914 "grammar.ec"
	break;
      case 156: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 10923 "grammar.ec"
	break;
      case 157: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 10932 "grammar.ec"
	break;
      case 158: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 10941 "grammar.ec"
	break;
      case 159: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 10950 "grammar.ec"
	break;
      case 160: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 10959 "grammar.ec"
	break;
      case 161: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 10968 "grammar.ec"
	break;
      case 162: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 10977 "grammar.ec"
	break;
      case 163: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 10986 "grammar.ec"
	break;
      case 164: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 10995 "grammar.ec"
	break;
      case 168: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11004 "grammar.ec"
	break;
      case 169: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11013 "grammar.ec"
	break;
      case 172: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11022 "grammar.ec"
	break;
      case 173: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11031 "grammar.ec"
	break;
      case 174: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11040 "grammar.ec"
	break;
      case 175: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11049 "grammar.ec"
	break;
      case 178: /* "property" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 11058 "grammar.ec"
	break;
      case 189: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11067 "grammar.ec"
	break;
      case 190: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11076 "grammar.ec"
	break;
      case 191: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11085 "grammar.ec"
	break;
      case 192: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11094 "grammar.ec"
	break;
      case 193: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 11103 "grammar.ec"
	break;
      case 194: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11112 "grammar.ec"
	break;
      case 195: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11121 "grammar.ec"
	break;
      case 196: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11130 "grammar.ec"
	break;
      case 197: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11139 "grammar.ec"
	break;
      case 198: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11148 "grammar.ec"
	break;
      case 199: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11157 "grammar.ec"
	break;
      case 200: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11166 "grammar.ec"
	break;
      case 201: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 11175 "grammar.ec"
	break;
      case 202: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11184 "grammar.ec"
	break;
      case 203: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 11193 "grammar.ec"
	break;
      case 204: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11202 "grammar.ec"
	break;
      case 205: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 241 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11211 "grammar.ec"
	break;
      case 206: /* "class" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11220 "grammar.ec"
	break;
      case 207: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11229 "grammar.ec"
	break;
      case 208: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11238 "grammar.ec"
	break;
      case 209: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 196 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 11247 "grammar.ec"
	break;
      case 210: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11256 "grammar.ec"
	break;
      case 211: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11265 "grammar.ec"
	break;
      case 215: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11274 "grammar.ec"
	break;
      case 216: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11283 "grammar.ec"
	break;
      case 218: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11292 "grammar.ec"
	break;
      case 219: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11301 "grammar.ec"
	break;
      case 221: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11310 "grammar.ec"
	break;
      case 224: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11319 "grammar.ec"
	break;
      case 225: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11328 "grammar.ec"
	break;
      case 226: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11337 "grammar.ec"
	break;
      case 227: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11346 "grammar.ec"
	break;
      case 229: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11355 "grammar.ec"
	break;
      case 230: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11364 "grammar.ec"
	break;
      case 231: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11373 "grammar.ec"
	break;
      case 232: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11382 "grammar.ec"
	break;
      case 233: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11391 "grammar.ec"
	break;
      case 234: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11400 "grammar.ec"
	break;
      case 235: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11409 "grammar.ec"
	break;
      case 236: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11418 "grammar.ec"
	break;
      case 237: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11427 "grammar.ec"
	break;
      case 239: /* "expression" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11436 "grammar.ec"
	break;
      case 241: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11445 "grammar.ec"
	break;
      case 244: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11454 "grammar.ec"
	break;
      case 246: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11463 "grammar.ec"
	break;
      case 247: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11472 "grammar.ec"
	break;
      case 248: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11481 "grammar.ec"
	break;
      case 249: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11490 "grammar.ec"
	break;
      case 250: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11499 "grammar.ec"
	break;
      case 251: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11508 "grammar.ec"
	break;
      case 252: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11517 "grammar.ec"
	break;
      case 253: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11526 "grammar.ec"
	break;
      case 254: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11535 "grammar.ec"
	break;
      case 255: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11544 "grammar.ec"
	break;
      case 256: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11553 "grammar.ec"
	break;
      case 257: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11562 "grammar.ec"
	break;
      case 258: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11571 "grammar.ec"
	break;
      case 259: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11580 "grammar.ec"
	break;
      case 261: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11589 "grammar.ec"
	break;
      case 262: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11598 "grammar.ec"
	break;
      case 263: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11607 "grammar.ec"
	break;
      case 264: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11616 "grammar.ec"
	break;
      case 265: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 11625 "grammar.ec"
	break;
      case 266: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 11634 "grammar.ec"
	break;
      case 268: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11643 "grammar.ec"
	break;
      case 269: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11652 "grammar.ec"
	break;
      case 270: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11661 "grammar.ec"
	break;
      case 272: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11670 "grammar.ec"
	break;
      case 273: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11679 "grammar.ec"
	break;
      case 274: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11688 "grammar.ec"
	break;
      case 275: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11697 "grammar.ec"
	break;
      case 276: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11706 "grammar.ec"
	break;
      case 277: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11715 "grammar.ec"
	break;
      case 278: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11724 "grammar.ec"
	break;
      case 279: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11733 "grammar.ec"
	break;
      case 280: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11742 "grammar.ec"
	break;
      case 281: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11751 "grammar.ec"
	break;
      case 282: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 11760 "grammar.ec"
	break;
      case 283: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11769 "grammar.ec"
	break;
      case 284: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11778 "grammar.ec"
	break;
      case 285: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11787 "grammar.ec"
	break;
      case 286: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11796 "grammar.ec"
	break;
      case 287: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11805 "grammar.ec"
	break;
      case 288: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11814 "grammar.ec"
	break;
      case 289: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11823 "grammar.ec"
	break;
      case 290: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11832 "grammar.ec"
	break;
      case 292: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11841 "grammar.ec"
	break;
      case 293: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11850 "grammar.ec"
	break;
      case 294: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11859 "grammar.ec"
	break;
      case 295: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11868 "grammar.ec"
	break;
      case 296: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11877 "grammar.ec"
	break;
      case 297: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11886 "grammar.ec"
	break;
      case 298: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11895 "grammar.ec"
	break;
      case 299: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11904 "grammar.ec"
	break;
      case 303: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 11913 "grammar.ec"
	break;
      case 304: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 11922 "grammar.ec"
	break;
      case 305: /* "direct_declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11931 "grammar.ec"
	break;
      case 306: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11940 "grammar.ec"
	break;
      case 307: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11949 "grammar.ec"
	break;
      case 308: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11958 "grammar.ec"
	break;
      case 309: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11967 "grammar.ec"
	break;
      case 310: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11976 "grammar.ec"
	break;
      case 311: /* "direct_declarator_function_start_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11985 "grammar.ec"
	break;
      case 312: /* "direct_declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11994 "grammar.ec"
	break;
      case 313: /* "direct_declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12003 "grammar.ec"
	break;
      case 314: /* "direct_declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12012 "grammar.ec"
	break;
      case 315: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 12021 "grammar.ec"
	break;
      case 317: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12030 "grammar.ec"
	break;
      case 318: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 270 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 12039 "grammar.ec"
	break;
      case 319: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 271 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 12048 "grammar.ec"
	break;
      case 320: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 12057 "grammar.ec"
	break;
      case 321: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12066 "grammar.ec"
	break;
      case 322: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12075 "grammar.ec"
	break;
      case 323: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 12084 "grammar.ec"
	break;
      case 324: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12093 "grammar.ec"
	break;
      case 325: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12102 "grammar.ec"
	break;
      case 326: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12111 "grammar.ec"
	break;
      case 327: /* "declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12120 "grammar.ec"
	break;
      case 328: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12129 "grammar.ec"
	break;
      case 329: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12138 "grammar.ec"
	break;
      case 330: /* "declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12147 "grammar.ec"
	break;
      case 331: /* "declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12156 "grammar.ec"
	break;
      case 332: /* "declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12165 "grammar.ec"
	break;
      case 333: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12174 "grammar.ec"
	break;
      case 334: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12183 "grammar.ec"
	break;
      case 335: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12192 "grammar.ec"
	break;
      case 336: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12201 "grammar.ec"
	break;
      case 337: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 12210 "grammar.ec"
	break;
      case 338: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12219 "grammar.ec"
	break;
      case 339: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12228 "grammar.ec"
	break;
      case 340: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12237 "grammar.ec"
	break;
      case 341: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12246 "grammar.ec"
	break;
      case 342: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12255 "grammar.ec"
	break;
      case 343: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12264 "grammar.ec"
	break;
      case 344: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12273 "grammar.ec"
	break;
      case 345: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12282 "grammar.ec"
	break;
      case 346: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12291 "grammar.ec"
	break;
      case 347: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12300 "grammar.ec"
	break;
      case 348: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12309 "grammar.ec"
	break;
      case 349: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12318 "grammar.ec"
	break;
      case 350: /* "statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12327 "grammar.ec"
	break;
      case 351: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12336 "grammar.ec"
	break;
      case 355: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12345 "grammar.ec"
	break;
      case 356: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12354 "grammar.ec"
	break;
      case 357: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 12363 "grammar.ec"
	break;
      case 359: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 12372 "grammar.ec"
	break;
      case 363: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12381 "grammar.ec"
	break;
      case 364: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12390 "grammar.ec"
	break;
      case 365: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12399 "grammar.ec"
	break;
      case 366: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12408 "grammar.ec"
	break;
      case 367: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12417 "grammar.ec"
	break;
      case 368: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12426 "grammar.ec"
	break;
      case 369: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 12435 "grammar.ec"
	break;
      case 370: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12444 "grammar.ec"
	break;
      case 371: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12453 "grammar.ec"
	break;
      case 372: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12462 "grammar.ec"
	break;
      case 373: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12471 "grammar.ec"
	break;
      case 374: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12480 "grammar.ec"
	break;
      case 375: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12489 "grammar.ec"
	break;
      case 376: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12498 "grammar.ec"
	break;
      case 377: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12507 "grammar.ec"
	break;
      case 378: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12516 "grammar.ec"
	break;
      case 379: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 12525 "grammar.ec"
	break;
      case 380: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 12534 "grammar.ec"
	break;
      case 381: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12543 "grammar.ec"
	break;
      case 382: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 12552 "grammar.ec"
	break;
      case 383: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 12561 "grammar.ec"
	break;
      case 384: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 12570 "grammar.ec"
	break;
      case 385: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 12579 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 279 "grammar.y"
    {
      (yyval.specifier) = null;
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 308 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 366 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 368 "grammar.y"
    {
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);
      FreeIdentifier((yyvsp[(1) - (2)].id));
      FreeIdentifier((yyvsp[(2) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #else
      Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]); 
      Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);      
      yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 467 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 471 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 475 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 477 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start); 
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 526 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 528 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 533 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(1) - (3)].list), FreeSpecifier); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 538 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(2) - (4)].list), FreeSpecifier) ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 543 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 545 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 550 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 552 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 557 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 559 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 564 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 566 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 568 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 570 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 572 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 576 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 581 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 583 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 585 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 587 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 589 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 595 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 597 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 602 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 607 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 612 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 614 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 616 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 620 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 621 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 625 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 627 "grammar.y"
    { 
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; 

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 637 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 641 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 643 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 645 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 649 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 651 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 653 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 656 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end; 
         { 
            Initializer dummy = MkInitializerAssignment(MkExpDummy()); 
            MemberInit memberInit = MkMemberInit(null, dummy); 
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end; 
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end; 
            ListAdd((yyvsp[(1) - (3)].list), memberInit); 
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 668 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end; 
         { 
            Initializer dummy = MkInitializerAssignment(MkExpDummy()); 
            MemberInit memberInit = MkMemberInit(null, dummy); 
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end; 
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end; 
            ListAdd((yyvsp[(1) - (3)].list), memberInit); 
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 679 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy); 
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start; 
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start; 

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit); 

         dummy = MkInitializerAssignment(MkExpDummy()); 
         memberInit = MkMemberInit(null, dummy); 
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end; 
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end; 
         ListAdd((yyval.list), memberInit); 
      ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 698 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 700 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 704 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 705 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 706 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 707 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 708 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 709 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 710 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 63:

/* Line 1464 of yacc.c  */
#line 712 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 65:

/* Line 1464 of yacc.c  */
#line 717 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 718 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 719 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 723 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 724 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 725 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 726 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 727 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 728 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 729 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 734 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 736 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 741 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 743 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 745 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 747 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 749 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 779 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 781 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 786 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 788 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 790 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 792 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 794 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 823 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 825 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 827 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 832 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 834 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 839 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 841 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 845 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 847 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 849 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 851 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 856 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 859 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 862 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 865 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 930 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 932 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 937 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 939 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 941 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 943 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 945 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 975 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 979 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 980 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 981 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 985 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 986 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 987 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 991 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 992 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 993 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 122:

/* Line 1464 of yacc.c  */
#line 999 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 1002 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 1005 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 1008 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 1011 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 128:

/* Line 1464 of yacc.c  */
#line 1017 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 1019 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 1021 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 1023 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 1025 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 1029 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 1034 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1037 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1040 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1043 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1046 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 140:

/* Line 1464 of yacc.c  */
#line 1052 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1054 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1058 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1063 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1065 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1070 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1072 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1077 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1079 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1084 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1089 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1091 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1098 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1100 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1102 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1107 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1109 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1111 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1123 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1126 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1127 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1129 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1130 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1136 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1139 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1140 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1141 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1142 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1143 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1144 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1145 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1146 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1147 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1148 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1149 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1150 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1151 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1152 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1155 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1159 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1160 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1161 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1165 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1169 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1170 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1171 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 201:

/* Line 1464 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 1179 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1183 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1184 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1190 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (1)].list), null)); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1191 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument(MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator))); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1201 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1202 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1203 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1204 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1205 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1206 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1207 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1208 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1212 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1216 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1217 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1221 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1232 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), MkTemplateDatatype((yyvsp[(1) - (4)].list), null), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1233 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(3) - (5)].id), MkTemplateDatatype((yyvsp[(1) - (5)].list), (yyvsp[(2) - (5)].declarator)), (yyvsp[(5) - (5)].templateArgument)); ;}
    break;

  case 224:

/* Line 1464 of yacc.c  */
#line 1243 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 1244 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 229:

/* Line 1464 of yacc.c  */
#line 1251 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 1252 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1253 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1293 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1294 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1299 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1306 "grammar.y"
    { (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1308 "grammar.y"
    { 
      (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); 
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); 
      FreeSpecifier((yyvsp[(2) - (2)].specifier)); 
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1315 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1316 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1318 "grammar.y"
    { (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1320 "grammar.y"
    { 
      (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); 
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); 
      FreeSpecifier((yyvsp[(2) - (5)].specifier)); 
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1328 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1329 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1335 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class); 
      ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1342 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1349 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1355 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1362 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace(0, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1368 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass(0, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1377 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1384 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1390 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1396 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1402 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1408 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1414 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1425 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 258:

/* Line 1464 of yacc.c  */
#line 1431 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1435 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1436 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1437 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1447 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 1449 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 272:

/* Line 1464 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1454 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1455 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1456 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1457 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1458 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1459 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1460 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1461 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1462 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1463 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1464 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1465 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1466 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1467 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1468 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1469 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1471 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 296:

/* Line 1464 of yacc.c  */
#line 1477 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 297:

/* Line 1464 of yacc.c  */
#line 1481 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 298:

/* Line 1464 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 299:

/* Line 1464 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 305:

/* Line 1464 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 306:

/* Line 1464 of yacc.c  */
#line 1500 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1501 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1502 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1503 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1504 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1506 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1507 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1508 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1509 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1510 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1511 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1512 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1513 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1519 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 1520 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1521 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 1522 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 1523 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1524 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1525 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1526 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1530 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1531 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1532 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1533 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1540 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1541 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1547 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1548 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 344:

/* Line 1464 of yacc.c  */
#line 1550 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 345:

/* Line 1464 of yacc.c  */
#line 1551 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1555 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1556 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1557 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1558 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1559 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1560 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1561 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1562 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 354:

/* Line 1464 of yacc.c  */
#line 1563 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1565 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 356:

/* Line 1464 of yacc.c  */
#line 1566 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1567 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 362:

/* Line 1464 of yacc.c  */
#line 1581 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 363:

/* Line 1464 of yacc.c  */
#line 1582 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 364:

/* Line 1464 of yacc.c  */
#line 1583 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 365:

/* Line 1464 of yacc.c  */
#line 1584 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 366:

/* Line 1464 of yacc.c  */
#line 1585 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1586 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 368:

/* Line 1464 of yacc.c  */
#line 1587 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1588 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1593 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 373:

/* Line 1464 of yacc.c  */
#line 1598 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 374:

/* Line 1464 of yacc.c  */
#line 1599 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 375:

/* Line 1464 of yacc.c  */
#line 1600 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 376:

/* Line 1464 of yacc.c  */
#line 1601 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 377:

/* Line 1464 of yacc.c  */
#line 1602 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1603 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1608 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 381:

/* Line 1464 of yacc.c  */
#line 1609 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 382:

/* Line 1464 of yacc.c  */
#line 1610 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 383:

/* Line 1464 of yacc.c  */
#line 1611 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1616 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 386:

/* Line 1464 of yacc.c  */
#line 1617 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1618 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 388:

/* Line 1464 of yacc.c  */
#line 1619 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 389:

/* Line 1464 of yacc.c  */
#line 1624 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1632 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 392:

/* Line 1464 of yacc.c  */
#line 1633 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1634 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 394:

/* Line 1464 of yacc.c  */
#line 1635 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 395:

/* Line 1464 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 397:

/* Line 1464 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1639 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1644 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 401:

/* Line 1464 of yacc.c  */
#line 1645 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 402:

/* Line 1464 of yacc.c  */
#line 1646 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 403:

/* Line 1464 of yacc.c  */
#line 1647 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 404:

/* Line 1464 of yacc.c  */
#line 1649 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1650 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1651 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 407:

/* Line 1464 of yacc.c  */
#line 1652 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1657 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 410:

/* Line 1464 of yacc.c  */
#line 1658 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 411:

/* Line 1464 of yacc.c  */
#line 1660 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 412:

/* Line 1464 of yacc.c  */
#line 1661 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1666 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 415:

/* Line 1464 of yacc.c  */
#line 1667 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1669 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 417:

/* Line 1464 of yacc.c  */
#line 1670 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1675 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 420:

/* Line 1464 of yacc.c  */
#line 1676 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1678 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 422:

/* Line 1464 of yacc.c  */
#line 1679 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1684 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 425:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 427:

/* Line 1464 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 428:

/* Line 1464 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 430:

/* Line 1464 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 431:

/* Line 1464 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 433:

/* Line 1464 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 434:

/* Line 1464 of yacc.c  */
#line 1701 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1702 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1703 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1704 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1706 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1707 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1708 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1709 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1712 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1713 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1719 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 448:

/* Line 1464 of yacc.c  */
#line 1720 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1721 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 450:

/* Line 1464 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 451:

/* Line 1464 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 453:

/* Line 1464 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1727 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1731 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1732 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 457:

/* Line 1464 of yacc.c  */
#line 1733 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1734 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 459:

/* Line 1464 of yacc.c  */
#line 1735 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1736 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1737 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1738 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1739 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1740 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1741 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1745 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1746 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1747 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1752 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 471:

/* Line 1464 of yacc.c  */
#line 1753 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1754 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 474:

/* Line 1464 of yacc.c  */
#line 1759 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 476:

/* Line 1464 of yacc.c  */
#line 1761 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 477:

/* Line 1464 of yacc.c  */
#line 1763 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 478:

/* Line 1464 of yacc.c  */
#line 1764 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 479:

/* Line 1464 of yacc.c  */
#line 1766 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 480:

/* Line 1464 of yacc.c  */
#line 1767 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1772 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 482:

/* Line 1464 of yacc.c  */
#line 1774 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1779 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1783 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); ;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1785 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 487:

/* Line 1464 of yacc.c  */
#line 1787 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 488:

/* Line 1464 of yacc.c  */
#line 1788 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 489:

/* Line 1464 of yacc.c  */
#line 1790 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 490:

/* Line 1464 of yacc.c  */
#line 1791 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1796 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1798 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1803 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 494:

/* Line 1464 of yacc.c  */
#line 1807 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1808 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1809 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1810 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1811 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 499:

/* Line 1464 of yacc.c  */
#line 1812 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1813 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1814 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1815 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1816 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1817 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1818 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 511:

/* Line 1464 of yacc.c  */
#line 1834 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 513:

/* Line 1464 of yacc.c  */
#line 1839 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 514:

/* Line 1464 of yacc.c  */
#line 1840 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 515:

/* Line 1464 of yacc.c  */
#line 1841 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 516:

/* Line 1464 of yacc.c  */
#line 1842 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 517:

/* Line 1464 of yacc.c  */
#line 1843 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 1844 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 1849 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 521:

/* Line 1464 of yacc.c  */
#line 1853 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 522:

/* Line 1464 of yacc.c  */
#line 1857 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 523:

/* Line 1464 of yacc.c  */
#line 1861 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 1869 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 526:

/* Line 1464 of yacc.c  */
#line 1870 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 527:

/* Line 1464 of yacc.c  */
#line 1871 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 528:

/* Line 1464 of yacc.c  */
#line 1872 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 1878 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         if((yyvsp[(1) - (2)].exp).identifier._class && !(yyvsp[(1) - (2)].exp).identifier._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(1) - (2)].exp).identifier.string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));
         
         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*         
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      } 
      skipErrors = false;
   ;}
    break;

  case 531:

/* Line 1464 of yacc.c  */
#line 1928 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 532:

/* Line 1464 of yacc.c  */
#line 1929 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 533:

/* Line 1464 of yacc.c  */
#line 1930 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 534:

/* Line 1464 of yacc.c  */
#line 1931 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 535:

/* Line 1464 of yacc.c  */
#line 1932 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 1933 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 1934 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 1939 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 540:

/* Line 1464 of yacc.c  */
#line 1940 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 1941 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 542:

/* Line 1464 of yacc.c  */
#line 1942 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 543:

/* Line 1464 of yacc.c  */
#line 1949 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 1950 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 1951 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 1952 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 1957 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 549:

/* Line 1464 of yacc.c  */
#line 1958 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 1960 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 551:

/* Line 1464 of yacc.c  */
#line 1961 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 1966 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 554:

/* Line 1464 of yacc.c  */
#line 1967 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 1969 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 556:

/* Line 1464 of yacc.c  */
#line 1970 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 1975 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 559:

/* Line 1464 of yacc.c  */
#line 1976 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 560:

/* Line 1464 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 561:

/* Line 1464 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 564:

/* Line 1464 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 566:

/* Line 1464 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 567:

/* Line 1464 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 569:

/* Line 1464 of yacc.c  */
#line 1996 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 570:

/* Line 1464 of yacc.c  */
#line 1997 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 571:

/* Line 1464 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 572:

/* Line 1464 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 573:

/* Line 1464 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 2001 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 2002 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 2003 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 2005 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 2006 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 2007 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 2008 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 581:

/* Line 1464 of yacc.c  */
#line 2009 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 582:

/* Line 1464 of yacc.c  */
#line 2010 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 583:

/* Line 1464 of yacc.c  */
#line 2011 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 584:

/* Line 1464 of yacc.c  */
#line 2012 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 2014 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 2015 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 2016 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 2017 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 2019 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 2020 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 2021 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 2022 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 2025 "grammar.y"
    { 
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); 
         (yyval.exp).loc = (yyloc); 
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); 
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]); 
      ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 2032 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 2036 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 2040 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2047 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 599:

/* Line 1464 of yacc.c  */
#line 2051 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 600:

/* Line 1464 of yacc.c  */
#line 2056 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 601:

/* Line 1464 of yacc.c  */
#line 2057 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 602:

/* Line 1464 of yacc.c  */
#line 2061 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 603:

/* Line 1464 of yacc.c  */
#line 2062 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 604:

/* Line 1464 of yacc.c  */
#line 2063 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2064 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2070 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2071 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2072 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2076 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2077 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2078 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2079 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 615:

/* Line 1464 of yacc.c  */
#line 2089 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 616:

/* Line 1464 of yacc.c  */
#line 2090 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 617:

/* Line 1464 of yacc.c  */
#line 2091 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 618:

/* Line 1464 of yacc.c  */
#line 2092 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 619:

/* Line 1464 of yacc.c  */
#line 2093 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2097 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); declMode = defaultAccess; ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2098 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2099 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); declMode = staticAccess; ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2100 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2101 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2105 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2106 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2107 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2111 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2117 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 632:

/* Line 1464 of yacc.c  */
#line 2121 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 633:

/* Line 1464 of yacc.c  */
#line 2122 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 634:

/* Line 1464 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 635:

/* Line 1464 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 636:

/* Line 1464 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 638:

/* Line 1464 of yacc.c  */
#line 2133 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2135 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2136 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2137 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 642:

/* Line 1464 of yacc.c  */
#line 2138 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 643:

/* Line 1464 of yacc.c  */
#line 2139 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 644:

/* Line 1464 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 645:

/* Line 1464 of yacc.c  */
#line 2142 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2143 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2144 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2145 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 649:

/* Line 1464 of yacc.c  */
#line 2149 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); ;}
    break;

  case 650:

/* Line 1464 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 651:

/* Line 1464 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 652:

/* Line 1464 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 653:

/* Line 1464 of yacc.c  */
#line 2156 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2160 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2161 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2162 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2163 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2164 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2165 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2166 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2167 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2168 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2170 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2171 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 665:

/* Line 1464 of yacc.c  */
#line 2173 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 666:

/* Line 1464 of yacc.c  */
#line 2174 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 667:

/* Line 1464 of yacc.c  */
#line 2175 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2176 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2177 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 674:

/* Line 1464 of yacc.c  */
#line 2191 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 675:

/* Line 1464 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 676:

/* Line 1464 of yacc.c  */
#line 2196 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 677:

/* Line 1464 of yacc.c  */
#line 2197 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 678:

/* Line 1464 of yacc.c  */
#line 2202 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 679:

/* Line 1464 of yacc.c  */
#line 2203 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 680:

/* Line 1464 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 681:

/* Line 1464 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2209 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2212 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2213 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2214 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2215 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 691:

/* Line 1464 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 692:

/* Line 1464 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 696:

/* Line 1464 of yacc.c  */
#line 2223 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 697:

/* Line 1464 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 698:

/* Line 1464 of yacc.c  */
#line 2225 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 699:

/* Line 1464 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 700:

/* Line 1464 of yacc.c  */
#line 2227 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 701:

/* Line 1464 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 702:

/* Line 1464 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 703:

/* Line 1464 of yacc.c  */
#line 2233 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 704:

/* Line 1464 of yacc.c  */
#line 2234 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 705:

/* Line 1464 of yacc.c  */
#line 2235 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2237 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2239 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2241 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2243 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 718:

/* Line 1464 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 719:

/* Line 1464 of yacc.c  */
#line 2249 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 720:

/* Line 1464 of yacc.c  */
#line 2250 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 721:

/* Line 1464 of yacc.c  */
#line 2251 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 722:

/* Line 1464 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 723:

/* Line 1464 of yacc.c  */
#line 2260 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 724:

/* Line 1464 of yacc.c  */
#line 2262 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 725:

/* Line 1464 of yacc.c  */
#line 2264 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 726:

/* Line 1464 of yacc.c  */
#line 2266 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 727:

/* Line 1464 of yacc.c  */
#line 2268 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 728:

/* Line 1464 of yacc.c  */
#line 2270 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 729:

/* Line 1464 of yacc.c  */
#line 2272 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2274 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2276 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2280 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2281 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2286 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2292 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2298 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2305 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2314 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2315 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2316 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2317 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2321 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2322 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2323 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2325 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2326 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2327 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2329 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2330 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2331 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2335 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2340 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2348 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2357 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2365 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2367 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2368 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2369 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2374 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2381 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2388 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2391 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2404 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2418 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2421 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2423 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2425 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2429 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2430 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2434 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2435 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2436 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2437 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2439 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2440 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2441 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2445 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2446 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2447 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2448 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2449 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2450 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2451 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2452 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2453 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2459 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2460 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2463 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2464 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2465 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2471 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2472 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2477 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2478 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2479 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2481 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2482 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 814:

/* Line 1464 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2493 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2494 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2499 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 821:

/* Line 1464 of yacc.c  */
#line 2500 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 822:

/* Line 1464 of yacc.c  */
#line 2504 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2505 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 824:

/* Line 1464 of yacc.c  */
#line 2506 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2507 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 826:

/* Line 1464 of yacc.c  */
#line 2508 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2509 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2510 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2511 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2513 "grammar.y"
    { _DeclClass(0, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2514 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass(0, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2517 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2535 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2553 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 836:

/* Line 1464 of yacc.c  */
#line 2557 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 837:

/* Line 1464 of yacc.c  */
#line 2558 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2559 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2560 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 840:

/* Line 1464 of yacc.c  */
#line 2561 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2562 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2563 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2564 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2566 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2584 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 846:

/* Line 1464 of yacc.c  */
#line 2600 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2601 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 848:

/* Line 1464 of yacc.c  */
#line 2602 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2603 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 850:

/* Line 1464 of yacc.c  */
#line 2604 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2605 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2606 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2607 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2608 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2609 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2610 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2611 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2613 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2631 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2647 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 861:

/* Line 1464 of yacc.c  */
#line 2648 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2649 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2650 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2651 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2652 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2653 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2654 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 868:

/* Line 1464 of yacc.c  */
#line 2655 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 869:

/* Line 1464 of yacc.c  */
#line 2656 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2657 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 871:

/* Line 1464 of yacc.c  */
#line 2658 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2660 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 873:

/* Line 1464 of yacc.c  */
#line 2678 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2694 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2695 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2699 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2700 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2701 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2702 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2703 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2709 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   ;}
    break;

  case 883:

/* Line 1464 of yacc.c  */
#line 2715 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); ;}
    break;

  case 884:

/* Line 1464 of yacc.c  */
#line 2718 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2727 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2736 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      ;}
    break;

  case 887:

/* Line 1464 of yacc.c  */
#line 2745 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      ;}
    break;

  case 888:

/* Line 1464 of yacc.c  */
#line 2753 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 889:

/* Line 1464 of yacc.c  */
#line 2754 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2755 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 891:

/* Line 1464 of yacc.c  */
#line 2756 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 892:

/* Line 1464 of yacc.c  */
#line 2760 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 893:

/* Line 1464 of yacc.c  */
#line 2761 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2762 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 895:

/* Line 1464 of yacc.c  */
#line 2763 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2764 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 897:

/* Line 1464 of yacc.c  */
#line 2765 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 898:

/* Line 1464 of yacc.c  */
#line 2766 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 899:

/* Line 1464 of yacc.c  */
#line 2767 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 900:

/* Line 1464 of yacc.c  */
#line 2768 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 902:

/* Line 1464 of yacc.c  */
#line 2776 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 903:

/* Line 1464 of yacc.c  */
#line 2777 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 904:

/* Line 1464 of yacc.c  */
#line 2778 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 905:

/* Line 1464 of yacc.c  */
#line 2779 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 2780 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 907:

/* Line 1464 of yacc.c  */
#line 2786 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list)); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 2795 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 2804 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); 
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 910:

/* Line 1464 of yacc.c  */
#line 2813 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 914:

/* Line 1464 of yacc.c  */
#line 2836 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 915:

/* Line 1464 of yacc.c  */
#line 2837 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 916:

/* Line 1464 of yacc.c  */
#line 2838 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 917:

/* Line 1464 of yacc.c  */
#line 2839 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 918:

/* Line 1464 of yacc.c  */
#line 2840 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 919:

/* Line 1464 of yacc.c  */
#line 2846 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list)); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 2855 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 2864 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); 
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 2873 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 925:

/* Line 1464 of yacc.c  */
#line 2936 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 926:

/* Line 1464 of yacc.c  */
#line 2937 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 927:

/* Line 1464 of yacc.c  */
#line 2938 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 928:

/* Line 1464 of yacc.c  */
#line 2940 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 929:

/* Line 1464 of yacc.c  */
#line 2951 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 930:

/* Line 1464 of yacc.c  */
#line 2952 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 2953 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 2958 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 2959 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 2960 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 935:

/* Line 1464 of yacc.c  */
#line 2961 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 936:

/* Line 1464 of yacc.c  */
#line 2962 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 937:

/* Line 1464 of yacc.c  */
#line 2966 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 938:

/* Line 1464 of yacc.c  */
#line 2967 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 939:

/* Line 1464 of yacc.c  */
#line 2971 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 940:

/* Line 1464 of yacc.c  */
#line 2972 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 2973 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 2977 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 2978 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 2982 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 945:

/* Line 1464 of yacc.c  */
#line 2983 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 2984 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 2985 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 2986 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 2987 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 2988 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 951:

/* Line 1464 of yacc.c  */
#line 2989 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 2990 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 953:

/* Line 1464 of yacc.c  */
#line 2991 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 2992 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 2993 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 956:

/* Line 1464 of yacc.c  */
#line 2994 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 2995 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 958:

/* Line 1464 of yacc.c  */
#line 2996 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 2997 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 960:

/* Line 1464 of yacc.c  */
#line 3001 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 961:

/* Line 1464 of yacc.c  */
#line 3002 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 962:

/* Line 1464 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 963:

/* Line 1464 of yacc.c  */
#line 3004 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 3005 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 965:

/* Line 1464 of yacc.c  */
#line 3006 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 966:

/* Line 1464 of yacc.c  */
#line 3007 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 967:

/* Line 1464 of yacc.c  */
#line 3008 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 968:

/* Line 1464 of yacc.c  */
#line 3012 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 969:

/* Line 1464 of yacc.c  */
#line 3013 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 970:

/* Line 1464 of yacc.c  */
#line 3014 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 971:

/* Line 1464 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 972:

/* Line 1464 of yacc.c  */
#line 3019 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 974:

/* Line 1464 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 975:

/* Line 1464 of yacc.c  */
#line 3022 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 976:

/* Line 1464 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 977:

/* Line 1464 of yacc.c  */
#line 3027 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 979:

/* Line 1464 of yacc.c  */
#line 3029 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 980:

/* Line 1464 of yacc.c  */
#line 3030 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 981:

/* Line 1464 of yacc.c  */
#line 3031 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 983:

/* Line 1464 of yacc.c  */
#line 3037 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 984:

/* Line 1464 of yacc.c  */
#line 3039 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 985:

/* Line 1464 of yacc.c  */
#line 3041 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 986:

/* Line 1464 of yacc.c  */
#line 3043 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 3049 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 989:

/* Line 1464 of yacc.c  */
#line 3051 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 990:

/* Line 1464 of yacc.c  */
#line 3053 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 992:

/* Line 1464 of yacc.c  */
#line 3058 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 993:

/* Line 1464 of yacc.c  */
#line 3059 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 994:

/* Line 1464 of yacc.c  */
#line 3060 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 996:

/* Line 1464 of yacc.c  */
#line 3065 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 997:

/* Line 1464 of yacc.c  */
#line 3066 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 998:

/* Line 1464 of yacc.c  */
#line 3067 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1000:

/* Line 1464 of yacc.c  */
#line 3072 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1001:

/* Line 1464 of yacc.c  */
#line 3073 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1002:

/* Line 1464 of yacc.c  */
#line 3074 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1004:

/* Line 1464 of yacc.c  */
#line 3079 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1005:

/* Line 1464 of yacc.c  */
#line 3080 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1006:

/* Line 1464 of yacc.c  */
#line 3081 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1008:

/* Line 1464 of yacc.c  */
#line 3086 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1009:

/* Line 1464 of yacc.c  */
#line 3087 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1010:

/* Line 1464 of yacc.c  */
#line 3088 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1011:

/* Line 1464 of yacc.c  */
#line 3092 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1012:

/* Line 1464 of yacc.c  */
#line 3093 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1013:

/* Line 1464 of yacc.c  */
#line 3095 "grammar.y"
    { 
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); 
         (yyval.initializer).loc = (yyloc); 

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init); 
         }
      ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3110 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1015:

/* Line 1464 of yacc.c  */
#line 3111 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3112 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1017:

/* Line 1464 of yacc.c  */
#line 3114 "grammar.y"
    { 
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list)); 
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init); 
         }
      ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3127 "grammar.y"
    { 
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); 
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init); 
         }
      ;}
    break;

  case 1019:

/* Line 1464 of yacc.c  */
#line 3142 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3144 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1021:

/* Line 1464 of yacc.c  */
#line 3148 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3149 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1023:

/* Line 1464 of yacc.c  */
#line 3153 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3154 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3155 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3156 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3159 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3160 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3164 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3165 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3166 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3170 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3174 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1034:

/* Line 1464 of yacc.c  */
#line 3178 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3179 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3180 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3181 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3183 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3191 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1040:

/* Line 1464 of yacc.c  */
#line 3200 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3201 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1042:

/* Line 1464 of yacc.c  */
#line 3202 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1043:

/* Line 1464 of yacc.c  */
#line 3203 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3207 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1045:

/* Line 1464 of yacc.c  */
#line 3208 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3212 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3213 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3218 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1049:

/* Line 1464 of yacc.c  */
#line 3219 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1050:

/* Line 1464 of yacc.c  */
#line 3220 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1051:

/* Line 1464 of yacc.c  */
#line 3221 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1052:

/* Line 1464 of yacc.c  */
#line 3222 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1053:

/* Line 1464 of yacc.c  */
#line 3224 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1054:

/* Line 1464 of yacc.c  */
#line 3242 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1055:

/* Line 1464 of yacc.c  */
#line 3243 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3247 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3248 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3249 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3250 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1060:

/* Line 1464 of yacc.c  */
#line 3251 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1061:

/* Line 1464 of yacc.c  */
#line 3252 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1062:

/* Line 1464 of yacc.c  */
#line 3254 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1063:

/* Line 1464 of yacc.c  */
#line 3255 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3256 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1065:

/* Line 1464 of yacc.c  */
#line 3257 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3261 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1067:

/* Line 1464 of yacc.c  */
#line 3262 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1068:

/* Line 1464 of yacc.c  */
#line 3263 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1069:

/* Line 1464 of yacc.c  */
#line 3264 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1070:

/* Line 1464 of yacc.c  */
#line 3265 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1071:

/* Line 1464 of yacc.c  */
#line 3267 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1072:

/* Line 1464 of yacc.c  */
#line 3268 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1073:

/* Line 1464 of yacc.c  */
#line 3269 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1075:

/* Line 1464 of yacc.c  */
#line 3274 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1076:

/* Line 1464 of yacc.c  */
#line 3275 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1077:

/* Line 1464 of yacc.c  */
#line 3276 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1078:

/* Line 1464 of yacc.c  */
#line 3277 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1079:

/* Line 1464 of yacc.c  */
#line 3278 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1081:

/* Line 1464 of yacc.c  */
#line 3283 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1084:

/* Line 1464 of yacc.c  */
#line 3290 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1086:

/* Line 1464 of yacc.c  */
#line 3292 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1087:

/* Line 1464 of yacc.c  */
#line 3293 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1088:

/* Line 1464 of yacc.c  */
#line 3294 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1096:

/* Line 1464 of yacc.c  */
#line 3305 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1097:

/* Line 1464 of yacc.c  */
#line 3306 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1098:

/* Line 1464 of yacc.c  */
#line 3307 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1099:

/* Line 1464 of yacc.c  */
#line 3308 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1100:

/* Line 1464 of yacc.c  */
#line 3309 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1101:

/* Line 1464 of yacc.c  */
#line 3310 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1102:

/* Line 1464 of yacc.c  */
#line 3311 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1103:

/* Line 1464 of yacc.c  */
#line 3315 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1104:

/* Line 1464 of yacc.c  */
#line 3316 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1105:

/* Line 1464 of yacc.c  */
#line 3320 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1106:

/* Line 1464 of yacc.c  */
#line 3321 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1107:

/* Line 1464 of yacc.c  */
#line 3322 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1108:

/* Line 1464 of yacc.c  */
#line 3326 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1109:

/* Line 1464 of yacc.c  */
#line 3327 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1110:

/* Line 1464 of yacc.c  */
#line 3328 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1111:

/* Line 1464 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3331 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3332 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3333 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3335 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3336 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3337 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3338 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3340 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3341 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3346 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3347 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3348 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3349 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3350 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3354 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3355 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3356 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3357 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3358 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3359 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3360 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3364 "grammar.y"
    { (yyval.declMode) = declMode = publicAccess; ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3365 "grammar.y"
    { (yyval.declMode) = declMode = privateAccess; ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3366 "grammar.y"
    { (yyval.declMode) = declMode = defaultAccess; ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3370 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3371 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3375 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3376 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3377 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3378 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3382 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3384 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3387 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3388 "grammar.y"
    { declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3396 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3397 "grammar.y"
    {;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3399 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3400 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1154:

/* Line 1464 of yacc.c  */
#line 3401 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3405 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3406 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3407 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3408 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3412 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3413 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3417 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3418 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3419 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3423 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3424 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3425 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3426 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3427 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3428 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3429 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3433 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3434 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3435 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3436 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3440 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3441 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3442 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3443 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3447 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3451 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3456 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3458 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3461 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3466 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1185:

/* Line 1464 of yacc.c  */
#line 3467 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3468 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3472 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3473 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3474 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3475 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3476 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1192:

/* Line 1464 of yacc.c  */
#line 3477 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1193:

/* Line 1464 of yacc.c  */
#line 3481 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3486 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1196:

/* Line 1464 of yacc.c  */
#line 3487 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1197:

/* Line 1464 of yacc.c  */
#line 3488 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3490 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1199:

/* Line 1464 of yacc.c  */
#line 3491 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3493 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3494 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3495 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3496 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3497 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3499 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1206:

/* Line 1464 of yacc.c  */
#line 3500 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3504 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3505 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3506 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3507 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3511 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3512 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3513 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3514 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3516 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1216:

/* Line 1464 of yacc.c  */
#line 3517 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3518 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1218:

/* Line 1464 of yacc.c  */
#line 3519 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3520 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3521 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1221:

/* Line 1464 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3525 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3529 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3530 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3534 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3535 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3539 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3540 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3541 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3542 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3543 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3544 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3545 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3546 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3550 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3552 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3553 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1239:

/* Line 1464 of yacc.c  */
#line 3559 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1240:

/* Line 1464 of yacc.c  */
#line 3561 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3562 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3564 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3566 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3567 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1245:

/* Line 1464 of yacc.c  */
#line 3570 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1246:

/* Line 1464 of yacc.c  */
#line 3571 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3572 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3573 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3574 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3575 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3579 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3581 "grammar.y"
    { 
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3592 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3594 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3597 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3600 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3601 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3602 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3604 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess); 
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror(); 
   ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3613 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3615 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3617 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3618 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3619 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); declMode = defaultDeclMode; ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3620 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); declMode = defaultDeclMode; ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3622 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();  
   ;}
    break;

  case 1267:

/* Line 1464 of yacc.c  */
#line 3631 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1268:

/* Line 1464 of yacc.c  */
#line 3632 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1269:

/* Line 1464 of yacc.c  */
#line 3633 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1270:

/* Line 1464 of yacc.c  */
#line 3634 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1271:

/* Line 1464 of yacc.c  */
#line 3635 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1272:

/* Line 1464 of yacc.c  */
#line 3636 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1273:

/* Line 1464 of yacc.c  */
#line 3640 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1274:

/* Line 1464 of yacc.c  */
#line 3642 "grammar.y"
    {
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      declMode = defaultDeclMode;
   ;}
    break;

  case 1275:

/* Line 1464 of yacc.c  */
#line 3649 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1276:

/* Line 1464 of yacc.c  */
#line 3651 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1277:

/* Line 1464 of yacc.c  */
#line 3652 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1278:

/* Line 1464 of yacc.c  */
#line 3655 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1279:

/* Line 1464 of yacc.c  */
#line 3656 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1280:

/* Line 1464 of yacc.c  */
#line 3660 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1281:

/* Line 1464 of yacc.c  */
#line 3661 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1282:

/* Line 1464 of yacc.c  */
#line 3662 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1285:

/* Line 1464 of yacc.c  */
#line 3668 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1286:

/* Line 1464 of yacc.c  */
#line 3669 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1287:

/* Line 1464 of yacc.c  */
#line 3671 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1288:

/* Line 1464 of yacc.c  */
#line 3673 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1291:

/* Line 1464 of yacc.c  */
#line 3679 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1292:

/* Line 1464 of yacc.c  */
#line 3683 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1293:

/* Line 1464 of yacc.c  */
#line 3684 "grammar.y"
    { Symbol symbol = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1294:

/* Line 1464 of yacc.c  */
#line 3685 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1295:

/* Line 1464 of yacc.c  */
#line 3689 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1296:

/* Line 1464 of yacc.c  */
#line 3693 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1297:

/* Line 1464 of yacc.c  */
#line 3694 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1298:

/* Line 1464 of yacc.c  */
#line 3695 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1299:

/* Line 1464 of yacc.c  */
#line 3699 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1300:

/* Line 1464 of yacc.c  */
#line 3700 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1301:

/* Line 1464 of yacc.c  */
#line 3704 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1302:

/* Line 1464 of yacc.c  */
#line 3705 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1303:

/* Line 1464 of yacc.c  */
#line 3709 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1304:

/* Line 1464 of yacc.c  */
#line 3710 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1305:

/* Line 1464 of yacc.c  */
#line 3711 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1306:

/* Line 1464 of yacc.c  */
#line 3712 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1307:

/* Line 1464 of yacc.c  */
#line 3716 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1308:

/* Line 1464 of yacc.c  */
#line 3720 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1309:

/* Line 1464 of yacc.c  */
#line 3724 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1310:

/* Line 1464 of yacc.c  */
#line 3728 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 21943 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3731 "grammar.y"


