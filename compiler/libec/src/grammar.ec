/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 105 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     LONG = 294,
     SIGNED = 295,
     UNSIGNED = 296,
     FLOAT = 297,
     DOUBLE = 298,
     CONST = 299,
     VOLATILE = 300,
     VOID = 301,
     VALIST = 302,
     STRUCT = 303,
     UNION = 304,
     ENUM = 305,
     ELLIPSIS = 306,
     CASE = 307,
     DEFAULT = 308,
     IF = 309,
     SWITCH = 310,
     WHILE = 311,
     DO = 312,
     FOR = 313,
     GOTO = 314,
     CONTINUE = 315,
     BREAK = 316,
     RETURN = 317,
     IFX = 318,
     ELSE = 319,
     CLASS = 320,
     THISCLASS = 321,
     CLASS_NAME = 322,
     PROPERTY = 323,
     SETPROP = 324,
     GETPROP = 325,
     NEWOP = 326,
     RENEW = 327,
     DELETE = 328,
     EXT_DECL = 329,
     EXT_STORAGE = 330,
     IMPORT = 331,
     DEFINE = 332,
     VIRTUAL = 333,
     ATTRIB = 334,
     PUBLIC = 335,
     PRIVATE = 336,
     TYPED_OBJECT = 337,
     ANY_OBJECT = 338,
     _INCREF = 339,
     EXTENSION = 340,
     ASM = 341,
     TYPEOF = 342,
     WATCH = 343,
     STOPWATCHING = 344,
     FIREWATCHERS = 345,
     WATCHABLE = 346,
     CLASS_DESIGNER = 347,
     CLASS_NO_EXPANSION = 348,
     CLASS_FIXED = 349,
     ISPROPSET = 350,
     CLASS_DEFAULT_PROPERTY = 351,
     PROPERTY_CATEGORY = 352,
     CLASS_DATA = 353,
     CLASS_PROPERTY = 354,
     SUBCLASS = 355,
     NAMESPACE = 356,
     NEW0OP = 357,
     RENEW0 = 358,
     VAARG = 359,
     DBTABLE = 360,
     DBFIELD = 361,
     DBINDEX = 362,
     DATABASE_OPEN = 363,
     ALIGNOF = 364,
     ATTRIB_DEP = 365,
     __ATTRIB = 366
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 35 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;
   
   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 297 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 322 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  265
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   37018

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  137
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  252
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1266
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2064

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   366

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   131,     2,     2,   125,   133,   128,     2,
     115,   116,   112,   129,   120,   130,   123,   132,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   124,   118,
     113,   119,   114,   136,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   126,     2,   127,   134,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   122,   135,   121,   117,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    84,    86,
      89,    91,    94,    97,   100,   103,   106,   109,   111,   113,
     117,   119,   123,   127,   129,   131,   135,   139,   141,   145,
     149,   153,   157,   159,   162,   165,   167,   169,   172,   175,
     178,   181,   183,   186,   189,   191,   193,   196,   199,   201,
     204,   207,   210,   213,   215,   218,   221,   225,   230,   236,
     241,   245,   250,   253,   257,   262,   268,   273,   277,   282,
     288,   294,   299,   302,   306,   310,   314,   318,   321,   326,
     330,   334,   337,   342,   346,   349,   353,   356,   360,   363,
     365,   368,   372,   376,   380,   383,   385,   389,   393,   395,
     399,   403,   406,   411,   417,   421,   426,   430,   432,   436,
     440,   444,   447,   451,   454,   459,   465,   469,   474,   478,
     480,   484,   488,   491,   493,   496,   499,   502,   504,   507,
     513,   521,   531,   538,   547,   552,   559,   561,   564,   568,
     573,   577,   580,   583,   586,   588,   590,   595,   599,   603,
     607,   610,   613,   616,   621,   623,   626,   628,   632,   636,
     638,   640,   644,   652,   654,   657,   662,   664,   667,   670,
     672,   674,   677,   681,   685,   688,   691,   693,   695,   698,
     701,   703,   706,   709,   712,   715,   717,   720,   722,   724,
     727,   732,   737,   744,   747,   752,   757,   764,   766,   768,
     772,   774,   777,   782,   784,   786,   788,   790,   794,   796,
     798,   800,   804,   808,   812,   816,   820,   824,   826,   830,
     832,   835,   838,   842,   846,   852,   858,   865,   872,   875,
     878,   882,   886,   890,   894,   898,   902,   906,   910,   914,
     918,   922,   924,   926,   930,   932,   935,   940,   942,   944,
     949,   954,   960,   969,   971,   973,   976,   983,   990,   996,
    1002,  1009,  1016,  1022,  1028,  1036,  1044,  1051,  1058,  1066,
    1074,  1081,  1088,  1093,  1099,  1104,  1111,  1116,  1118,  1120,
    1122,  1124,  1128,  1130,  1133,  1136,  1139,  1141,  1146,  1151,
    1155,  1160,  1165,  1169,  1173,  1176,  1179,  1184,  1189,  1193,
    1198,  1202,  1206,  1209,  1212,  1214,  1219,  1224,  1228,  1233,
    1238,  1242,  1246,  1249,  1252,  1257,  1262,  1266,  1271,  1275,
    1279,  1282,  1285,  1287,  1289,  1293,  1297,  1299,  1301,  1305,
    1309,  1312,  1315,  1318,  1321,  1324,  1329,  1332,  1337,  1343,
    1349,  1354,  1357,  1362,  1364,  1366,  1368,  1370,  1372,  1374,
    1376,  1378,  1380,  1382,  1384,  1386,  1388,  1393,  1395,  1399,
    1403,  1407,  1411,  1415,  1419,  1421,  1425,  1429,  1433,  1437,
    1439,  1443,  1447,  1451,  1455,  1458,  1460,  1463,  1467,  1471,
    1475,  1479,  1483,  1487,  1491,  1493,  1497,  1501,  1505,  1509,
    1513,  1517,  1521,  1525,  1527,  1531,  1535,  1539,  1543,  1545,
    1549,  1553,  1557,  1561,  1563,  1567,  1571,  1575,  1579,  1581,
    1585,  1589,  1591,  1595,  1599,  1601,  1607,  1613,  1619,  1625,
    1631,  1637,  1643,  1649,  1655,  1661,  1667,  1673,  1679,  1685,
    1691,  1697,  1699,  1703,  1707,  1711,  1715,  1719,  1723,  1727,
    1731,  1733,  1735,  1737,  1739,  1741,  1743,  1745,  1747,  1749,
    1751,  1753,  1755,  1759,  1763,  1766,  1768,  1772,  1776,  1778,
    1780,  1783,  1786,  1790,  1794,  1798,  1802,  1806,  1810,  1814,
    1816,  1819,  1822,  1826,  1830,  1834,  1838,  1842,  1846,  1850,
    1853,  1856,  1859,  1862,  1866,  1869,  1875,  1882,  1889,  1893,
    1896,  1902,  1904,  1906,  1908,  1910,  1912,  1917,  1919,  1923,
    1927,  1931,  1935,  1939,  1943,  1945,  1949,  1953,  1957,  1961,
    1963,  1967,  1971,  1975,  1979,  1981,  1984,  1988,  1992,  1996,
    2000,  2004,  2008,  2012,  2014,  2018,  2022,  2026,  2030,  2034,
    2038,  2042,  2046,  2048,  2052,  2056,  2060,  2064,  2066,  2070,
    2074,  2078,  2082,  2084,  2088,  2092,  2096,  2100,  2102,  2106,
    2110,  2112,  2116,  2120,  2122,  2128,  2134,  2140,  2146,  2151,
    2156,  2161,  2166,  2172,  2178,  2184,  2190,  2195,  2200,  2205,
    2210,  2216,  2222,  2228,  2234,  2240,  2246,  2252,  2258,  2262,
    2266,  2269,  2272,  2274,  2278,  2282,  2286,  2290,  2292,  2295,
    2299,  2303,  2306,  2309,  2312,  2314,  2317,  2321,  2325,  2327,
    2329,  2331,  2333,  2335,  2337,  2339,  2341,  2343,  2345,  2347,
    2349,  2351,  2355,  2359,  2361,  2365,  2368,  2370,  2373,  2376,
    2379,  2384,  2389,  2393,  2397,  2402,  2408,  2413,  2420,  2427,
    2432,  2438,  2443,  2450,  2457,  2460,  2463,  2466,  2472,  2476,
    2482,  2489,  2495,  2503,  2511,  2520,  2529,  2537,  2545,  2549,
    2553,  2557,  2562,  2566,  2572,  2578,  2580,  2582,  2584,  2586,
    2588,  2590,  2592,  2594,  2596,  2598,  2601,  2603,  2605,  2607,
    2609,  2611,  2613,  2615,  2617,  2619,  2621,  2623,  2625,  2627,
    2629,  2631,  2633,  2638,  2643,  2648,  2650,  2652,  2654,  2656,
    2658,  2660,  2662,  2664,  2666,  2668,  2670,  2672,  2674,  2676,
    2678,  2680,  2682,  2684,  2686,  2691,  2696,  2701,  2703,  2705,
    2708,  2711,  2715,  2721,  2724,  2728,  2734,  2740,  2746,  2748,
    2752,  2755,  2758,  2761,  2765,  2769,  2773,  2777,  2781,  2785,
    2789,  2793,  2795,  2797,  2802,  2806,  2809,  2813,  2817,  2821,
    2825,  2829,  2833,  2837,  2841,  2845,  2849,  2853,  2857,  2859,
    2861,  2863,  2866,  2868,  2871,  2873,  2876,  2878,  2881,  2883,
    2886,  2888,  2891,  2893,  2896,  2898,  2901,  2903,  2906,  2908,
    2911,  2913,  2916,  2918,  2921,  2923,  2926,  2928,  2931,  2933,
    2936,  2938,  2941,  2943,  2946,  2948,  2951,  2953,  2956,  2958,
    2961,  2963,  2966,  2968,  2971,  2973,  2976,  2978,  2981,  2983,
    2986,  2988,  2991,  2993,  2995,  2997,  3000,  3002,  3005,  3007,
    3010,  3012,  3015,  3020,  3026,  3028,  3030,  3032,  3035,  3037,
    3040,  3042,  3045,  3047,  3050,  3055,  3061,  3063,  3066,  3068,
    3071,  3073,  3076,  3078,  3081,  3083,  3086,  3088,  3091,  3096,
    3102,  3104,  3107,  3109,  3112,  3114,  3117,  3119,  3122,  3124,
    3127,  3129,  3132,  3137,  3143,  3147,  3151,  3153,  3157,  3161,
    3165,  3169,  3171,  3175,  3180,  3185,  3190,  3194,  3197,  3201,
    3205,  3209,  3213,  3216,  3219,  3222,  3226,  3231,  3233,  3235,
    3238,  3241,  3243,  3245,  3250,  3252,  3254,  3256,  3258,  3260,
    3262,  3264,  3266,  3268,  3273,  3275,  3278,  3285,  3291,  3295,
    3298,  3302,  3306,  3310,  3314,  3319,  3324,  3329,  3332,  3336,
    3340,  3344,  3349,  3354,  3358,  3361,  3365,  3369,  3373,  3378,
    3383,  3385,  3388,  3391,  3395,  3397,  3399,  3402,  3405,  3408,
    3412,  3414,  3416,  3419,  3422,  3425,  3429,  3431,  3434,  3438,
    3441,  3443,  3446,  3449,  3453,  3457,  3459,  3462,  3465,  3469,
    3473,  3475,  3478,  3481,  3485,  3489,  3491,  3495,  3500,  3502,
    3507,  3510,  3516,  3520,  3522,  3524,  3526,  3528,  3530,  3532,
    3536,  3540,  3543,  3546,  3548,  3552,  3555,  3559,  3561,  3565,
    3569,  3571,  3574,  3578,  3582,  3584,  3587,  3589,  3592,  3595,
    3598,  3601,  3605,  3607,  3609,  3613,  3617,  3619,  3623,  3628,
    3632,  3637,  3641,  3645,  3650,  3654,  3659,  3661,  3665,  3669,
    3674,  3678,  3682,  3686,  3691,  3693,  3697,  3701,  3705,  3709,
    3713,  3715,  3719,  3722,  3724,  3726,  3728,  3730,  3732,  3735,
    3737,  3739,  3741,  3743,  3746,  3749,  3752,  3754,  3756,  3758,
    3760,  3762,  3765,  3767,  3769,  3774,  3776,  3780,  3781,  3788,
    3797,  3808,  3821,  3830,  3841,  3852,  3858,  3866,  3876,  3888,
    3896,  3906,  3916,  3920,  3925,  3930,  3934,  3938,  3942,  3947,
    3952,  3956,  3959,  3963,  3966,  3968,  3970,  3972,  3974,  3976,
    3979,  3983,  3986,  3989,  3992,  3996,  4000,  4003,  4009,  4016,
    4019,  4022,  4025,  4028,  4031,  4034,  4036,  4039,  4042,  4046,
    4048,  4051,  4053,  4056,  4059,  4061,  4064,  4067,  4070,  4073,
    4076,  4079,  4081,  4083,  4086,  4089,  4091,  4093,  4096,  4099,
    4101,  4104,  4107,  4109,  4112,  4114,  4117,  4120,  4126,  4132,
    4140,  4148,  4154,  4160,  4164,  4167,  4173,  4178,  4183,  4191,
    4198,  4205,  4211,  4219,  4226,  4231,  4239,  4249,  4253,  4258,
    4263,  4269,  4275,  4282,  4290,  4297,  4304,  4310,  4316,  4321,
    4325,  4328,  4330,  4333,  4338,  4342,  4348,  4353,  4357,  4360,
    4363,  4366,  4370,  4374,  4378,  4382,  4385,  4388,  4390,  4392,
    4397,  4401,  4405,  4408,  4413,  4417,  4421,  4424,  4426,  4429,
    4431,  4433,  4436,  4438,  4441,  4445,  4449,  4451,  4454,  4457,
    4460,  4464,  4469,  4474,  4477,  4480,  4483,  4486,  4488,  4491,
    4493,  4496,  4498,  4501,  4504,  4506,  4509,  4511,  4514,  4517,
    4520,  4523,  4525,  4528,  4531,  4535,  4537,  4539,  4540,  4547,
    4554,  4560,  4565,  4567,  4570,  4573,  4575,  4579,  4583,  4588,
    4590,  4592,  4595,  4598,  4605,  4612,  4619
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     378,     0,    -1,   209,   112,    -1,   209,   113,    -1,   142,
      -1,   209,   209,    -1,    28,    -1,    28,    -1,   140,    -1,
     140,   113,   203,   114,    -1,   140,   113,   203,    11,    -1,
     295,   322,    -1,   322,    -1,   295,   115,   116,    -1,   117,
     295,   115,   116,    -1,    78,   295,   322,    -1,    78,   322,
      -1,   295,   323,    -1,   323,    -1,    78,   295,   323,    -1,
      78,   323,    -1,   143,   362,    -1,   146,   362,    -1,   146,
     118,    -1,   144,   362,    -1,   145,   362,    -1,   143,   118,
      -1,   143,   363,    -1,   147,    -1,   146,   363,    -1,   148,
      -1,   148,   118,    -1,   294,   322,    -1,   294,   324,    -1,
     294,   323,    -1,   151,   362,    -1,   151,   363,    -1,   152,
      -1,   151,    -1,   216,   119,   327,    -1,   327,    -1,   216,
     119,   328,    -1,   216,   119,     1,    -1,   328,    -1,   155,
      -1,   157,   120,   155,    -1,   158,   120,   155,    -1,   156,
      -1,   157,   120,   156,    -1,   158,   120,   156,    -1,   157,
     120,     1,    -1,   158,   120,     1,    -1,   120,    -1,   157,
     118,    -1,   158,   118,    -1,   159,    -1,   153,    -1,   162,
     159,    -1,   162,   153,    -1,   160,   159,    -1,   160,   153,
      -1,   118,    -1,   162,   118,    -1,   160,   118,    -1,   160,
      -1,   157,    -1,   160,   157,    -1,   162,   157,    -1,   154,
      -1,   161,   154,    -1,   162,   154,    -1,   160,   154,    -1,
     160,   158,    -1,   158,    -1,   157,     1,    -1,   164,   121,
      -1,   164,     1,   121,    -1,   294,   209,   122,   162,    -1,
     294,   209,   122,   161,     1,    -1,   294,   209,   122,   161,
      -1,   294,   209,   122,    -1,   294,   209,   122,     1,    -1,
     166,   121,    -1,   166,     1,   121,    -1,   295,   209,   122,
     162,    -1,   295,   209,   122,   161,     1,    -1,   295,   209,
     122,   161,    -1,   295,   209,   122,    -1,   295,   209,   122,
       1,    -1,   296,   209,   122,   161,   121,    -1,   296,   209,
     122,   162,   121,    -1,   296,   209,   122,   121,    -1,   169,
     121,    -1,   169,     1,   121,    -1,   142,   122,   161,    -1,
     209,   122,   161,    -1,   142,   122,   162,    -1,   142,   122,
      -1,   142,   122,   161,     1,    -1,   142,   122,     1,    -1,
     209,   122,   162,    -1,   209,   122,    -1,   209,   122,   161,
       1,    -1,   209,   122,     1,    -1,   171,   121,    -1,   171,
       1,   121,    -1,   122,   162,    -1,   122,   161,     1,    -1,
     122,     1,    -1,   122,    -1,   122,   161,    -1,   216,   119,
     327,    -1,   216,   119,   328,    -1,   216,   119,     1,    -1,
     216,     1,    -1,   172,    -1,   174,   120,   172,    -1,   175,
     120,   172,    -1,   173,    -1,   174,   120,   173,    -1,   175,
     120,   173,    -1,   174,     1,    -1,    68,   300,   209,   122,
      -1,    68,   300,   319,   209,   122,    -1,    68,   300,   122,
      -1,    68,   300,   319,   122,    -1,    68,     1,   122,    -1,
     176,    -1,   177,    69,   362,    -1,   177,    70,   362,    -1,
     177,    95,   362,    -1,   177,    91,    -1,   177,    97,   211,
      -1,   177,   121,    -1,    99,   300,   209,   122,    -1,    99,
     300,   319,   209,   122,    -1,    99,   300,   122,    -1,    99,
     300,   319,   122,    -1,    99,     1,   122,    -1,   179,    -1,
     180,    69,   362,    -1,   180,    70,   362,    -1,   180,   121,
      -1,   209,    -1,   182,   209,    -1,   182,   362,    -1,    73,
     362,    -1,   183,    -1,   184,   183,    -1,    88,   115,   182,
     116,   362,    -1,    88,   115,   237,   116,   122,   184,   121,
      -1,   237,   123,    88,   115,   237,   116,   122,   184,   121,
      -1,    89,   115,   237,   120,   182,   116,    -1,   237,   123,
      89,   115,   237,   120,   182,   116,    -1,    89,   115,   237,
     116,    -1,   237,   123,    89,   115,   237,   116,    -1,    90,
      -1,    90,   182,    -1,   216,   123,    90,    -1,   237,   123,
      90,   182,    -1,   295,   282,   118,    -1,   295,   118,    -1,
     168,   118,    -1,   165,   118,    -1,   149,    -1,   178,    -1,
     350,   295,   282,   118,    -1,   350,   295,   118,    -1,   350,
     168,   118,    -1,   350,   165,   118,    -1,   350,   149,    -1,
     350,   178,    -1,   174,   118,    -1,    98,   295,   282,   118,
      -1,   181,    -1,   185,   118,    -1,    91,    -1,    92,   209,
     118,    -1,    92,   142,   118,    -1,    93,    -1,    94,    -1,
      96,   209,   118,    -1,    99,   115,   209,   116,   119,   327,
     118,    -1,   118,    -1,   350,   124,    -1,   350,   115,   209,
     116,    -1,   150,    -1,   166,     1,    -1,   169,     1,    -1,
     165,    -1,   168,    -1,   350,   150,    -1,   350,   166,     1,
      -1,   350,   169,     1,    -1,   350,   165,    -1,   350,   168,
      -1,   175,    -1,   189,    -1,   191,   189,    -1,   192,   189,
      -1,   190,    -1,   191,     1,    -1,   192,     1,    -1,   191,
     190,    -1,   192,   190,    -1,   294,    -1,   294,   319,    -1,
     209,    -1,   193,    -1,    65,   209,    -1,    65,   209,   119,
     194,    -1,    65,   209,   124,   193,    -1,    65,   209,   124,
     193,   119,   194,    -1,    65,   141,    -1,    65,   141,   119,
     194,    -1,    65,   141,   124,   193,    -1,    65,   141,   124,
     193,   119,   194,    -1,   209,    -1,   209,    -1,   209,   119,
     196,    -1,   261,    -1,   193,   209,    -1,   193,   209,   119,
     198,    -1,   195,    -1,   197,    -1,   199,    -1,   200,    -1,
     201,   120,   200,    -1,   198,    -1,   196,    -1,   194,    -1,
     209,   119,   198,    -1,   209,   119,   196,    -1,   209,   119,
     194,    -1,   193,   119,   198,    -1,   193,   119,   196,    -1,
     193,   119,   194,    -1,   202,    -1,   203,   120,   202,    -1,
      65,    -1,   204,   209,    -1,   204,   140,    -1,   209,   204,
     209,    -1,   209,   204,   140,    -1,   204,   209,   113,   201,
     114,    -1,   204,   140,   113,   201,   114,    -1,   209,   204,
     209,   113,   201,   114,    -1,   209,   204,   140,   113,   201,
     114,    -1,   208,   121,    -1,   207,   118,    -1,   205,   122,
     121,    -1,   207,   122,   121,    -1,   204,   209,   118,    -1,
     204,   139,   118,    -1,   205,   124,   299,    -1,   205,   122,
     192,    -1,   207,   122,   192,    -1,   205,   122,   191,    -1,
     207,   122,   191,    -1,   205,   122,     1,    -1,   207,   122,
       1,    -1,     3,    -1,   212,    -1,   115,   239,   116,    -1,
     373,    -1,   125,   373,    -1,   125,   373,   123,   373,    -1,
     209,    -1,   168,    -1,    85,   115,   362,   116,    -1,    85,
     115,   239,   116,    -1,    85,   115,   334,   116,   325,    -1,
      85,   115,   334,   116,   115,   334,   116,   325,    -1,     4,
      -1,   211,    -1,   115,   116,    -1,    71,   302,   320,   126,
     261,   127,    -1,    71,   302,   320,   126,   262,   127,    -1,
      71,   302,   126,   261,   127,    -1,    71,   302,   126,   262,
     127,    -1,   102,   302,   320,   126,   261,   127,    -1,   102,
     302,   320,   126,   262,   127,    -1,   102,   302,   126,   261,
     127,    -1,   102,   302,   126,   262,   127,    -1,    72,   261,
     301,   320,   126,   261,   127,    -1,    72,   261,   301,   320,
     126,   262,   127,    -1,    72,   261,   301,   126,   261,   127,
      -1,    72,   261,   301,   126,   262,   127,    -1,   103,   261,
     301,   320,   126,   261,   127,    -1,   103,   261,   301,   320,
     126,   262,   127,    -1,   103,   261,   301,   126,   261,   127,
      -1,   103,   261,   301,   126,   262,   127,    -1,    65,   115,
     294,   116,    -1,    65,   115,   294,   319,   116,    -1,    65,
     115,   209,   116,    -1,   104,   115,   237,   120,   334,   116,
      -1,    98,   115,   209,   116,    -1,   385,    -1,   386,    -1,
     387,    -1,   388,    -1,   126,   218,   127,    -1,   170,    -1,
     171,     1,    -1,   115,   239,    -1,   115,   259,    -1,   210,
      -1,   216,   126,   239,   127,    -1,   216,   126,   259,   127,
      -1,   216,   115,   116,    -1,   216,   115,   218,   116,    -1,
     216,   115,   219,   116,    -1,   216,   123,   209,    -1,   216,
       7,   209,    -1,   216,     8,    -1,   216,     9,    -1,   241,
     126,   239,   127,    -1,   241,   126,   259,   127,    -1,   241,
     115,   116,    -1,   241,   115,   218,   116,    -1,   241,   123,
     209,    -1,   241,     7,   209,    -1,   241,     8,    -1,   241,
       9,    -1,   212,    -1,   217,   126,   239,   127,    -1,   217,
     126,   259,   127,    -1,   217,   115,   116,    -1,   217,   115,
     218,   116,    -1,   217,   115,   219,   116,    -1,   217,   123,
     209,    -1,   217,     7,   209,    -1,   217,     8,    -1,   217,
       9,    -1,   242,   126,   239,   127,    -1,   242,   126,   259,
     127,    -1,   242,   115,   116,    -1,   242,   115,   218,   116,
      -1,   242,   123,   209,    -1,   242,     7,   209,    -1,   242,
       8,    -1,   242,     9,    -1,   237,    -1,   213,    -1,   218,
     120,   237,    -1,   218,   120,   213,    -1,   258,    -1,   214,
      -1,   218,   120,   258,    -1,   218,   120,   214,    -1,   218,
     120,    -1,     8,   221,    -1,     9,   221,    -1,   223,   224,
      -1,   223,   213,    -1,     6,   115,   221,   116,    -1,     6,
     222,    -1,     6,   115,   335,   116,    -1,     6,   115,    65,
     139,   116,    -1,     6,   115,    65,   138,   116,    -1,   109,
     115,   221,   116,    -1,   109,   222,    -1,   109,   115,   335,
     116,    -1,   220,    -1,   216,    -1,   220,    -1,   217,    -1,
     128,    -1,   112,    -1,   129,    -1,   130,    -1,   117,    -1,
     131,    -1,    73,    -1,    84,    -1,   221,    -1,   115,   334,
     116,   224,    -1,   224,    -1,   225,   112,   224,    -1,   225,
     132,   224,    -1,   225,   133,   224,    -1,   247,   112,   224,
      -1,   247,   132,   224,    -1,   247,   133,   224,    -1,   225,
      -1,   226,   129,   225,    -1,   226,   130,   225,    -1,   248,
     129,   225,    -1,   248,   130,   225,    -1,   226,    -1,   227,
      10,   226,    -1,   227,    11,   226,    -1,   249,    10,   226,
      -1,   249,    11,   226,    -1,   229,   113,    -1,   227,    -1,
     228,   227,    -1,   229,   114,   227,    -1,   229,    12,   227,
      -1,   229,    13,   227,    -1,   250,   113,   227,    -1,   250,
     114,   227,    -1,   250,    12,   227,    -1,   250,    13,   227,
      -1,   229,    -1,   230,    14,   229,    -1,   230,    15,   229,
      -1,   251,    14,   229,    -1,   251,    15,   229,    -1,   230,
      14,   213,    -1,   230,    15,   213,    -1,   251,    14,   213,
      -1,   251,    15,   213,    -1,   230,    -1,   231,   128,   230,
      -1,   252,   128,   230,    -1,   231,   128,   213,    -1,   252,
     128,   213,    -1,   231,    -1,   232,   134,   231,    -1,   253,
     134,   231,    -1,   232,   134,   213,    -1,   253,   134,   213,
      -1,   232,    -1,   233,   135,   232,    -1,   254,   135,   232,
      -1,   233,   135,   213,    -1,   254,   135,   213,    -1,   233,
      -1,   234,    16,   233,    -1,   255,    16,   233,    -1,   234,
      -1,   235,    17,   234,    -1,   256,    17,   234,    -1,   235,
      -1,   235,   136,   239,   124,   236,    -1,   235,   136,   259,
     124,   236,    -1,   256,   136,   239,   124,   236,    -1,   256,
     136,   259,   124,   236,    -1,   235,   136,   240,   124,   236,
      -1,   235,   136,   260,   124,   236,    -1,   256,   136,   240,
     124,   236,    -1,   256,   136,   260,   124,   236,    -1,   235,
     136,   239,   124,   213,    -1,   235,   136,   259,   124,   213,
      -1,   256,   136,   239,   124,   213,    -1,   256,   136,   259,
     124,   213,    -1,   235,   136,   240,   124,   213,    -1,   235,
     136,   260,   124,   213,    -1,   256,   136,   240,   124,   213,
      -1,   256,   136,   260,   124,   213,    -1,   236,    -1,   221,
     238,   237,    -1,   244,   238,   237,    -1,   236,   238,   237,
      -1,   257,   238,   237,    -1,   221,   238,   213,    -1,   244,
     238,   213,    -1,   236,   238,   213,    -1,   257,   238,   213,
      -1,   119,    -1,    18,    -1,    19,    -1,    20,    -1,    21,
      -1,    22,    -1,    23,    -1,    24,    -1,    25,    -1,    26,
      -1,    27,    -1,   237,    -1,   239,   120,   237,    -1,   259,
     120,   237,    -1,   259,   116,    -1,   213,    -1,   239,   120,
     213,    -1,   259,   120,   213,    -1,   215,    -1,     1,    -1,
     216,     1,    -1,   169,     1,    -1,   216,     7,     1,    -1,
     241,     7,     1,    -1,   216,   115,   218,    -1,   216,   115,
     219,    -1,   216,   123,     1,    -1,   241,   115,   219,    -1,
     241,   123,     1,    -1,     1,    -1,   217,     1,    -1,   169,
       1,    -1,   217,     7,     1,    -1,   242,     7,     1,    -1,
     217,   115,   218,    -1,   217,   115,   219,    -1,   217,   123,
       1,    -1,   242,   115,   219,    -1,   242,   123,     1,    -1,
       8,   244,    -1,     9,   244,    -1,   223,   246,    -1,   223,
     214,    -1,     6,   115,   244,    -1,     6,   245,    -1,     6,
     115,   335,   116,     1,    -1,     6,   115,    65,   139,   116,
       1,    -1,     6,   115,    65,   138,   116,     1,    -1,   109,
     115,   244,    -1,   109,   245,    -1,   109,   115,   335,   116,
       1,    -1,   243,    -1,   241,    -1,   243,    -1,   242,    -1,
     244,    -1,   115,   334,   116,   246,    -1,   246,    -1,   225,
     112,   246,    -1,   225,   132,   246,    -1,   225,   133,   246,
      -1,   247,   112,   246,    -1,   247,   132,   246,    -1,   247,
     133,   246,    -1,   247,    -1,   226,   129,   247,    -1,   226,
     130,   247,    -1,   248,   129,   247,    -1,   248,   130,   247,
      -1,   248,    -1,   227,    10,   248,    -1,   227,    11,   248,
      -1,   249,    10,   248,    -1,   249,    11,   248,    -1,   249,
      -1,   228,   249,    -1,   229,   114,   249,    -1,   229,    12,
     249,    -1,   229,    13,   249,    -1,   250,   113,   249,    -1,
     250,   114,   249,    -1,   250,    12,   249,    -1,   250,    13,
     249,    -1,   250,    -1,   230,    14,   250,    -1,   230,    15,
     250,    -1,   251,    14,   250,    -1,   251,    15,   250,    -1,
     230,    14,   214,    -1,   230,    15,   214,    -1,   251,    14,
     214,    -1,   251,    15,   214,    -1,   251,    -1,   231,   128,
     251,    -1,   252,   128,   251,    -1,   231,   128,   214,    -1,
     252,   128,   214,    -1,   252,    -1,   232,   134,   252,    -1,
     253,   134,   252,    -1,   232,   134,   214,    -1,   253,   134,
     214,    -1,   253,    -1,   233,   135,   253,    -1,   254,   135,
     253,    -1,   233,   135,   214,    -1,   254,   135,   214,    -1,
     254,    -1,   234,    16,   254,    -1,   255,    16,   254,    -1,
     255,    -1,   235,    17,   255,    -1,   256,    17,   255,    -1,
     256,    -1,   235,   136,   239,   124,   256,    -1,   235,   136,
     259,   124,   256,    -1,   256,   136,   239,   124,   256,    -1,
     256,   136,   259,   124,   256,    -1,   235,   136,   239,   124,
      -1,   235,   136,   259,   124,    -1,   256,   136,   239,   124,
      -1,   256,   136,   259,   124,    -1,   235,   136,   240,   124,
     256,    -1,   235,   136,   260,   124,   256,    -1,   256,   136,
     240,   124,   256,    -1,   256,   136,   260,   124,   256,    -1,
     235,   136,   240,   124,    -1,   235,   136,   260,   124,    -1,
     256,   136,   240,   124,    -1,   256,   136,   260,   124,    -1,
     235,   136,   239,   124,   214,    -1,   235,   136,   259,   124,
     214,    -1,   256,   136,   239,   124,   214,    -1,   256,   136,
     259,   124,   214,    -1,   235,   136,   240,   124,   214,    -1,
     235,   136,   260,   124,   214,    -1,   256,   136,   240,   124,
     214,    -1,   256,   136,   260,   124,   214,    -1,   235,   136,
     124,    -1,   256,   136,   124,    -1,   235,   136,    -1,   256,
     136,    -1,   257,    -1,   221,   238,   258,    -1,   244,   238,
     258,    -1,   221,   238,   214,    -1,   244,   238,   214,    -1,
     258,    -1,   237,     1,    -1,   239,   120,   258,    -1,   259,
     120,   258,    -1,   239,   239,    -1,   259,   239,    -1,   239,
     259,    -1,   214,    -1,   213,     1,    -1,   239,   120,   214,
      -1,   259,   120,   214,    -1,   236,    -1,   257,    -1,    29,
      -1,    30,    -1,    31,    -1,    32,    -1,    33,    -1,    29,
      -1,    30,    -1,    31,    -1,    32,    -1,    33,    -1,   209,
      -1,   209,   119,   261,    -1,   209,   119,   262,    -1,   265,
      -1,   266,   120,   265,    -1,   266,   120,    -1,    50,    -1,
     267,   209,    -1,   267,   142,    -1,   270,   121,    -1,   267,
     209,   122,   121,    -1,   267,   142,   122,   121,    -1,   267,
     122,   266,    -1,   267,   122,     1,    -1,   267,   209,   122,
     266,    -1,   267,   209,   122,   266,     1,    -1,   267,   209,
     122,     1,    -1,   267,   209,   122,   266,   118,   191,    -1,
     267,   209,   122,   266,   118,   192,    -1,   267,   142,   122,
     266,    -1,   267,   142,   122,   266,     1,    -1,   267,   142,
     122,     1,    -1,   267,   142,   122,   266,   118,   191,    -1,
     267,   142,   122,   266,   118,   192,    -1,   267,   209,    -1,
     267,   142,    -1,   273,   121,    -1,   271,   124,   299,   122,
     121,    -1,   271,   122,   121,    -1,   271,   124,   299,   122,
     266,    -1,   271,   124,   299,   122,   266,     1,    -1,   271,
     124,   299,   122,     1,    -1,   271,   124,   299,   122,   266,
     118,   191,    -1,   271,   124,   299,   122,   266,   118,   192,
      -1,   271,   124,   299,   122,   266,     1,   118,   191,    -1,
     271,   124,   299,   122,   266,     1,   118,   192,    -1,   271,
     124,   299,   122,     1,   118,   191,    -1,   271,   124,   299,
     122,     1,   118,   192,    -1,   267,   122,   266,    -1,   267,
     122,     1,    -1,   271,   122,   266,    -1,   271,   122,   266,
       1,    -1,   271,   122,     1,    -1,   271,   122,   266,   118,
     191,    -1,   271,   122,   266,   118,   192,    -1,   272,    -1,
     289,    -1,   273,    -1,   290,    -1,    75,    -1,   310,    -1,
      44,    -1,    45,    -1,   276,    -1,   277,    -1,   278,   277,
      -1,    46,    -1,    34,    -1,    35,    -1,    36,    -1,    37,
      -1,    38,    -1,    47,    -1,    39,    -1,    42,    -1,    43,
      -1,    40,    -1,    41,    -1,    85,    -1,   286,    -1,   268,
      -1,   139,    -1,    87,   115,   237,   116,    -1,   100,   115,
     139,   116,    -1,   100,   115,   209,   116,    -1,    66,    -1,
      82,    -1,    83,    -1,    46,    -1,    34,    -1,    35,    -1,
      36,    -1,    37,    -1,    38,    -1,    47,    -1,    39,    -1,
      42,    -1,    43,    -1,    40,    -1,    41,    -1,    85,    -1,
     286,    -1,   268,    -1,   142,    -1,    87,   115,   237,   116,
      -1,   100,   115,   139,   116,    -1,   100,   115,   209,   116,
      -1,    66,    -1,   324,    -1,   324,   315,    -1,   124,   261,
      -1,   324,   124,   261,    -1,   324,   124,   261,   124,   261,
      -1,   124,   262,    -1,   324,   124,   262,    -1,   324,   124,
     261,   124,   262,    -1,   324,   124,   262,   124,   262,    -1,
     324,   124,   262,   124,   261,    -1,   281,    -1,   282,   120,
     281,    -1,   291,   209,    -1,   291,   140,    -1,   285,   121,
      -1,   283,   122,   121,    -1,   291,   122,   121,    -1,   283,
     122,   191,    -1,   283,   122,   192,    -1,   283,   122,     1,
      -1,   291,   122,   191,    -1,   291,   122,   192,    -1,   291,
     122,     1,    -1,   283,    -1,   283,    -1,   283,   113,   201,
     114,    -1,   287,   124,   299,    -1,   290,   121,    -1,   288,
     122,   121,    -1,   287,   122,   121,    -1,   291,   122,   121,
      -1,   288,   122,   191,    -1,   288,   122,   192,    -1,   288,
     122,     1,    -1,   287,   122,   191,    -1,   287,   122,   192,
      -1,   287,   122,     1,    -1,   291,   122,   191,    -1,   291,
     122,   192,    -1,   291,   122,     1,    -1,    48,    -1,    49,
      -1,   277,    -1,   292,   277,    -1,   279,    -1,   292,   279,
      -1,   269,    -1,   292,   269,    -1,   284,    -1,   292,   284,
      -1,   277,    -1,   293,   277,    -1,   279,    -1,   293,   279,
      -1,   138,    -1,   293,   138,    -1,   269,    -1,   293,   269,
      -1,   284,    -1,   293,   284,    -1,   263,    -1,   294,   263,
      -1,   277,    -1,   294,   277,    -1,   280,    -1,   294,   280,
      -1,   269,    -1,   294,   269,    -1,   284,    -1,   294,   284,
      -1,   263,    -1,   295,   263,    -1,   277,    -1,   295,   277,
      -1,   279,    -1,   295,   279,    -1,   138,    -1,   295,   138,
      -1,   284,    -1,   295,   284,    -1,   269,    -1,   295,   269,
      -1,   264,    -1,   296,   264,    -1,   277,    -1,   296,   277,
      -1,   279,    -1,   296,   279,    -1,   138,    -1,   296,   138,
      -1,   274,    -1,   296,   274,    -1,   275,    -1,   296,   275,
      -1,    81,    -1,    80,    -1,   263,    -1,   298,   263,    -1,
     277,    -1,   298,   277,    -1,   280,    -1,   298,   280,    -1,
     209,    -1,   298,   209,    -1,   209,   113,   203,   114,    -1,
     298,   209,   113,   203,   114,    -1,   298,    -1,   291,    -1,
     263,    -1,   300,   263,    -1,   277,    -1,   300,   277,    -1,
     280,    -1,   300,   280,    -1,   209,    -1,   300,   209,    -1,
     209,   113,   203,   114,    -1,   300,   209,   113,   203,   114,
      -1,   263,    -1,   301,   263,    -1,   277,    -1,   301,   277,
      -1,   280,    -1,   301,   280,    -1,   284,    -1,   301,   284,
      -1,   269,    -1,   301,   269,    -1,   209,    -1,   301,   209,
      -1,   209,   113,   203,   114,    -1,   301,   209,   113,   203,
     114,    -1,   263,    -1,   302,   263,    -1,   277,    -1,   302,
     277,    -1,   280,    -1,   302,   280,    -1,   284,    -1,   302,
     284,    -1,   269,    -1,   302,   269,    -1,   209,    -1,   302,
     209,    -1,   209,   113,   203,   114,    -1,   302,   209,   113,
     203,   114,    -1,   304,   120,     1,    -1,   303,   120,     1,
      -1,   209,    -1,   304,   120,   209,    -1,   303,   120,   209,
      -1,   338,   120,   209,    -1,   339,   120,   209,    -1,   209,
      -1,   115,   321,   116,    -1,   305,   126,   261,   127,    -1,
     305,   126,   262,   127,    -1,   305,   126,   139,   127,    -1,
     305,   126,   127,    -1,   305,   115,    -1,   306,   340,   116,
      -1,   306,   341,   116,    -1,   306,   304,   116,    -1,   306,
     303,   116,    -1,   306,   116,    -1,   306,   303,    -1,   306,
       1,    -1,   306,   338,   115,    -1,   306,   295,   209,   115,
      -1,   307,    -1,   305,    -1,   310,   307,    -1,   310,   305,
      -1,    74,    -1,   315,    -1,    86,   115,   373,   116,    -1,
      79,    -1,   110,    -1,   111,    -1,     3,    -1,    28,    -1,
      75,    -1,    74,    -1,    44,    -1,   312,    -1,   312,   115,
     239,   116,    -1,   313,    -1,   314,   313,    -1,   311,   115,
     115,   314,   116,   116,    -1,   311,   115,   115,   116,   116,
      -1,   115,   319,   116,    -1,   126,   127,    -1,   126,   261,
     127,    -1,   126,   262,   127,    -1,   126,   139,   127,    -1,
     316,   126,   127,    -1,   316,   126,   261,   127,    -1,   316,
     126,   139,   127,    -1,   316,   126,   262,   127,    -1,   115,
     116,    -1,   115,   340,   116,    -1,   115,   341,   116,    -1,
     316,   115,   116,    -1,   316,   115,   340,   116,    -1,   316,
     115,   341,   116,    -1,   115,   320,   116,    -1,   115,   116,
      -1,   115,   340,   116,    -1,   115,   341,   116,    -1,   317,
     115,   116,    -1,   317,   115,   340,   116,    -1,   317,   115,
     341,   116,    -1,   112,    -1,   112,   278,    -1,   112,   318,
      -1,   112,   278,   318,    -1,   318,    -1,   316,    -1,   318,
     316,    -1,   310,   318,    -1,   310,   316,    -1,   310,   318,
     316,    -1,   318,    -1,   317,    -1,   318,   317,    -1,   310,
     318,    -1,   310,   317,    -1,   310,   318,   317,    -1,   309,
      -1,   318,   309,    -1,   310,   318,   309,    -1,   321,   310,
      -1,   307,    -1,   318,   307,    -1,   310,   307,    -1,   310,
     318,   307,    -1,   318,   310,   307,    -1,   308,    -1,   318,
     308,    -1,   310,   308,    -1,   310,   318,   308,    -1,   318,
     310,   308,    -1,   305,    -1,   318,   305,    -1,   310,   305,
      -1,   310,   318,   305,    -1,   318,   310,   305,    -1,   237,
      -1,   122,   329,   121,    -1,   122,   329,   120,   121,    -1,
     258,    -1,   122,   329,   121,     1,    -1,   122,   329,    -1,
     122,   329,   120,   121,     1,    -1,   122,   329,   120,    -1,
     236,    -1,   213,    -1,   257,    -1,   214,    -1,   325,    -1,
     326,    -1,   329,   120,   325,    -1,   329,   120,   326,    -1,
     329,   325,    -1,   329,   326,    -1,   321,    -1,   321,   119,
     325,    -1,   321,     1,    -1,   321,   119,   326,    -1,   330,
      -1,   332,   120,   330,    -1,   333,   120,   330,    -1,   331,
      -1,   330,     1,    -1,   332,   120,   331,    -1,   333,   120,
     331,    -1,   292,    -1,   292,   319,    -1,   293,    -1,   293,
     319,    -1,   295,   321,    -1,   295,   319,    -1,   295,   128,
      -1,   295,   128,   321,    -1,   295,    -1,    65,    -1,   295,
     321,     1,    -1,   295,   319,     1,    -1,   336,    -1,   338,
     120,   336,    -1,   338,     1,   120,   336,    -1,   339,   120,
     336,    -1,   339,     1,   120,   336,    -1,     1,   120,   336,
      -1,   304,   120,   336,    -1,   304,     1,   120,   336,    -1,
     303,   120,   336,    -1,   303,     1,   120,   336,    -1,   337,
      -1,   338,   120,   337,    -1,   339,   120,   337,    -1,   339,
       1,   120,   337,    -1,     1,   120,   337,    -1,   304,   120,
     337,    -1,   303,   120,   337,    -1,   303,     1,   120,   337,
      -1,   338,    -1,   338,   120,    51,    -1,   339,   120,    51,
      -1,   304,   120,    51,    -1,   303,   120,    51,    -1,     1,
     120,    51,    -1,   339,    -1,   338,   120,     1,    -1,   339,
       1,    -1,   347,    -1,   315,    -1,   362,    -1,   118,    -1,
     124,    -1,   239,   118,    -1,   365,    -1,   367,    -1,   369,
      -1,   346,    -1,   188,   118,    -1,   187,   118,    -1,   186,
     118,    -1,   348,    -1,   368,    -1,   363,    -1,   366,    -1,
     370,    -1,   369,     1,    -1,   259,    -1,   373,    -1,   373,
     115,   237,   116,    -1,   344,    -1,   345,   120,   344,    -1,
      -1,    86,   277,   115,   373,   116,   118,    -1,    86,   277,
     115,   373,   124,   345,   116,   118,    -1,    86,   277,   115,
     373,   124,   345,   124,   345,   116,   118,    -1,    86,   277,
     115,   373,   124,   345,   124,   345,   124,   345,   116,   118,
      -1,    86,   277,   115,   373,     3,   345,   116,   118,    -1,
      86,   277,   115,   373,     3,   345,   124,   345,   116,   118,
      -1,    86,   277,   115,   373,   124,   345,     3,   345,   116,
     118,    -1,    86,   115,   373,   116,   118,    -1,    86,   115,
     373,   124,   345,   116,   118,    -1,    86,   115,   373,   124,
     345,   124,   345,   116,   118,    -1,    86,   115,   373,   124,
     345,   124,   345,   124,   345,   116,   118,    -1,    86,   115,
     373,     3,   345,   116,   118,    -1,    86,   115,   373,     3,
     345,   124,   345,   116,   118,    -1,    86,   115,   373,   124,
     345,     3,   345,   116,   118,    -1,   209,   124,   342,    -1,
      52,   261,   124,   342,    -1,    52,   262,   124,   342,    -1,
      52,   124,   342,    -1,    53,   124,   342,    -1,   209,   124,
     343,    -1,    52,   261,   124,   343,    -1,    52,   262,   124,
     343,    -1,    52,   124,   343,    -1,    52,   124,    -1,    53,
     124,   343,    -1,    53,   124,    -1,    80,    -1,    81,    -1,
      53,    -1,    80,    -1,    81,    -1,   294,   118,    -1,   294,
     332,   118,    -1,   163,   118,    -1,   354,   118,    -1,   296,
     118,    -1,   296,   332,   118,    -1,   297,   332,   118,    -1,
     167,   118,    -1,    77,   209,   119,   236,   118,    -1,    31,
      77,   209,   119,   236,   118,    -1,   296,     1,    -1,   294,
       1,    -1,   354,     1,    -1,   164,     1,    -1,   163,     1,
      -1,   294,   333,    -1,   351,    -1,   355,   351,    -1,   356,
     351,    -1,   355,     1,   118,    -1,   354,    -1,   355,   354,
      -1,   342,    -1,   357,   342,    -1,   358,   342,    -1,   343,
      -1,   357,   343,    -1,   358,   343,    -1,   357,   351,    -1,
     358,   351,    -1,   357,   354,    -1,   358,   354,    -1,   357,
      -1,   355,    -1,   355,   357,    -1,   356,   357,    -1,   358,
      -1,   356,    -1,   355,   358,    -1,   356,   358,    -1,   122,
      -1,   363,   121,    -1,   361,   360,    -1,   361,    -1,   361,
     359,    -1,   118,    -1,   239,   118,    -1,   259,   118,    -1,
      54,   115,   239,   116,   342,    -1,    54,   115,   259,   116,
     342,    -1,    54,   115,   239,   116,   342,    64,   342,    -1,
      54,   115,   259,   116,   342,    64,   342,    -1,    55,   115,
     239,   116,   342,    -1,    55,   115,   259,   116,   342,    -1,
      54,   115,   259,    -1,   365,     1,    -1,    56,   115,   239,
     116,   342,    -1,    56,   115,   259,   342,    -1,    56,   115,
     116,   342,    -1,    57,   342,    56,   115,   239,   116,   118,
      -1,    57,   342,    56,   115,   259,   118,    -1,    58,   115,
     364,   364,   116,   342,    -1,    58,   115,   364,   116,   342,
      -1,    58,   115,   364,   364,   239,   116,   342,    -1,    58,
     115,   364,   364,   259,   342,    -1,    58,   115,   116,   342,
      -1,    58,   115,   209,   124,   239,   116,   342,    -1,    58,
     115,   209,   124,   239,   118,   239,   116,   342,    -1,    58,
     115,     1,    -1,    58,   115,   259,     1,    -1,    58,   115,
     364,     1,    -1,    58,   115,   364,   259,     1,    -1,    58,
     115,   364,   364,   259,    -1,    58,   115,   364,   364,   116,
     343,    -1,    58,   115,   364,   364,   239,   116,   343,    -1,
      58,   115,   364,   364,   259,   343,    -1,    57,   342,    56,
     115,   239,   116,    -1,    57,   342,    56,   115,   239,    -1,
      57,   342,    56,   115,   259,    -1,    57,   342,    56,   115,
      -1,    57,   342,    56,    -1,    57,   342,    -1,    57,    -1,
      56,     1,    -1,    56,   115,   116,     1,    -1,    56,   115,
     259,    -1,    56,   115,   239,   116,   343,    -1,    56,   115,
     259,   343,    -1,    59,   209,   118,    -1,    60,   118,    -1,
      61,   118,    -1,    62,   118,    -1,    62,   239,   118,    -1,
      62,   259,   118,    -1,    62,   213,   118,    -1,    62,   214,
     118,    -1,    62,   259,    -1,    62,   214,    -1,    62,    -1,
      59,    -1,   296,   322,   355,   362,    -1,   296,   322,   362,
      -1,   322,   355,   362,    -1,   322,   362,    -1,   296,   322,
     355,   363,    -1,   296,   322,   363,    -1,   322,   355,   363,
      -1,   322,   363,    -1,     5,    -1,   373,     5,    -1,   371,
      -1,   206,    -1,   296,   206,    -1,   352,    -1,    76,   373,
      -1,    76,    31,   373,    -1,    76,   209,   373,    -1,   118,
      -1,   349,   371,    -1,   349,   206,    -1,   349,   352,    -1,
     349,    76,   373,    -1,   349,    76,    31,   373,    -1,   349,
      76,   209,   373,    -1,   349,   124,    -1,    31,   124,    -1,
     101,   209,    -1,   101,   142,    -1,   379,    -1,   349,   379,
      -1,   208,    -1,   296,   208,    -1,   372,    -1,   349,   208,
      -1,   349,   372,    -1,   353,    -1,   349,   353,    -1,   375,
      -1,   377,   375,    -1,   376,   375,    -1,   377,     1,    -1,
     376,     1,    -1,   374,    -1,   377,   374,    -1,   376,   206,
      -1,   376,   349,   206,    -1,   377,    -1,   376,    -1,    -1,
     105,   373,   209,   122,   384,   121,    -1,   105,   373,   142,
     122,   384,   121,    -1,   105,   373,   122,   384,   121,    -1,
     295,   209,   373,   118,    -1,   209,    -1,   114,   209,    -1,
     113,   209,    -1,   381,    -1,   382,   120,   381,    -1,   107,
     382,   118,    -1,   107,   382,   209,   118,    -1,   380,    -1,
     383,    -1,   384,   380,    -1,   384,   383,    -1,   108,   115,
     237,   120,   237,   116,    -1,   106,   115,   373,   120,   209,
     116,    -1,   107,   115,   373,   120,   209,   116,    -1,   105,
     115,   373,   116,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   274,   274,   303,   362,   363,   463,   467,   470,   471,
     472,   521,   523,   528,   533,   538,   540,   545,   547,   552,
     554,   559,   561,   563,   565,   567,   571,   576,   578,   580,
     582,   584,   590,   592,   597,   602,   607,   609,   611,   616,
     617,   621,   622,   633,   637,   638,   640,   645,   646,   648,
     651,   663,   674,   693,   695,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   712,   713,   714,   715,   719,   720,
     721,   722,   723,   724,   725,   729,   731,   736,   738,   740,
     742,   744,   774,   776,   781,   783,   785,   787,   789,   818,
     820,   822,   827,   829,   834,   836,   840,   842,   844,   846,
     851,   854,   857,   860,   925,   927,   932,   934,   936,   938,
     940,   971,   975,   976,   977,   981,   982,   983,   987,   988,
     989,   990,   994,   997,  1000,  1003,  1006,  1011,  1012,  1014,
    1016,  1018,  1020,  1025,  1029,  1032,  1035,  1038,  1041,  1046,
    1047,  1049,  1054,  1058,  1060,  1065,  1067,  1072,  1074,  1079,
    1084,  1086,  1091,  1093,  1095,  1097,  1102,  1104,  1106,  1108,
    1113,  1114,  1115,  1116,  1117,  1118,  1120,  1121,  1122,  1123,
    1124,  1125,  1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,
    1135,  1136,  1137,  1139,  1140,  1142,  1146,  1147,  1148,  1149,
    1150,  1152,  1153,  1154,  1155,  1156,  1158,  1162,  1163,  1164,
    1168,  1169,  1170,  1171,  1172,  1176,  1177,  1178,  1182,  1186,
    1187,  1188,  1189,  1190,  1191,  1192,  1193,  1197,  1201,  1202,
    1206,  1210,  1211,  1215,  1216,  1217,  1221,  1222,  1226,  1227,
    1228,  1229,  1230,  1231,  1232,  1244,  1256,  1271,  1272,  1276,
    1284,  1285,  1293,  1294,  1296,  1297,  1306,  1307,  1311,  1318,
    1325,  1331,  1338,  1344,  1353,  1360,  1366,  1372,  1378,  1384,
    1390,  1401,  1406,  1407,  1412,  1413,  1414,  1418,  1419,  1420,
    1421,  1422,  1423,  1424,  1425,  1426,  1427,  1428,  1429,  1430,
    1431,  1432,  1433,  1434,  1435,  1436,  1437,  1438,  1439,  1440,
    1441,  1442,  1443,  1444,  1445,  1446,  1448,  1449,  1450,  1451,
    1452,  1454,  1458,  1462,  1466,  1467,  1471,  1473,  1474,  1475,
    1476,  1477,  1478,  1479,  1480,  1481,  1483,  1484,  1485,  1486,
    1487,  1488,  1489,  1490,  1494,  1496,  1497,  1498,  1499,  1500,
    1501,  1502,  1503,  1504,  1506,  1507,  1508,  1509,  1510,  1511,
    1512,  1513,  1517,  1518,  1519,  1520,  1524,  1525,  1526,  1527,
    1528,  1532,  1533,  1534,  1535,  1536,  1537,  1538,  1539,  1540,
    1542,  1543,  1544,  1548,  1549,  1553,  1554,  1558,  1559,  1560,
    1561,  1562,  1563,  1564,  1565,  1569,  1570,  1574,  1575,  1576,
    1577,  1578,  1579,  1580,  1584,  1585,  1586,  1587,  1588,  1592,
    1593,  1594,  1595,  1596,  1600,  1608,  1609,  1610,  1611,  1612,
    1613,  1614,  1615,  1616,  1620,  1621,  1622,  1623,  1624,  1626,
    1627,  1628,  1629,  1633,  1634,  1635,  1637,  1638,  1642,  1643,
    1644,  1646,  1647,  1651,  1652,  1653,  1655,  1656,  1660,  1661,
    1662,  1666,  1667,  1668,  1672,  1673,  1674,  1675,  1676,  1678,
    1679,  1680,  1681,  1683,  1684,  1685,  1686,  1688,  1689,  1690,
    1691,  1695,  1696,  1697,  1698,  1699,  1701,  1702,  1703,  1704,
    1708,  1709,  1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,
    1718,  1722,  1723,  1724,  1725,  1729,  1730,  1731,  1735,  1736,
    1737,  1738,  1740,  1741,  1743,  1744,  1749,  1751,  1756,  1760,
    1761,  1762,  1764,  1765,  1767,  1768,  1773,  1775,  1780,  1784,
    1785,  1786,  1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,
    1795,  1799,  1800,  1804,  1805,  1810,  1811,  1815,  1816,  1817,
    1818,  1819,  1820,  1821,  1825,  1826,  1830,  1834,  1838,  1845,
    1846,  1847,  1848,  1849,  1853,  1854,  1905,  1906,  1907,  1908,
    1909,  1910,  1911,  1915,  1916,  1917,  1918,  1919,  1926,  1927,
    1928,  1929,  1933,  1934,  1935,  1937,  1938,  1942,  1943,  1944,
    1946,  1947,  1951,  1952,  1953,  1955,  1956,  1960,  1961,  1962,
    1966,  1967,  1968,  1972,  1973,  1974,  1975,  1976,  1977,  1978,
    1979,  1980,  1982,  1983,  1984,  1985,  1986,  1987,  1988,  1989,
    1991,  1992,  1993,  1994,  1996,  1997,  1998,  1999,  2001,  2008,
    2012,  2016,  2023,  2024,  2028,  2033,  2034,  2038,  2039,  2040,
    2041,  2047,  2048,  2049,  2053,  2054,  2055,  2056,  2060,  2062,
    2066,  2067,  2068,  2069,  2070,  2074,  2075,  2076,  2077,  2078,
    2082,  2083,  2084,  2088,  2089,  2090,  2094,  2098,  2099,  2103,
    2104,  2105,  2109,  2110,  2112,  2113,  2114,  2115,  2116,  2118,
    2119,  2120,  2121,  2122,  2126,  2127,  2131,  2132,  2133,  2137,
    2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,  2147,  2148,
    2150,  2151,  2152,  2153,  2154,  2158,  2159,  2163,  2164,  2168,
    2169,  2173,  2174,  2175,  2180,  2181,  2185,  2186,  2187,  2188,
    2189,  2190,  2191,  2192,  2193,  2194,  2195,  2196,  2197,  2198,
    2199,  2200,  2201,  2202,  2203,  2204,  2205,  2206,  2210,  2211,
    2212,  2213,  2214,  2215,  2216,  2217,  2218,  2219,  2220,  2221,
    2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2235,  2237,
    2239,  2241,  2243,  2245,  2247,  2249,  2251,  2253,  2258,  2259,
    2263,  2269,  2278,  2279,  2280,  2284,  2285,  2286,  2288,  2289,
    2290,  2294,  2298,  2306,  2315,  2324,  2325,  2327,  2328,  2332,
    2339,  2346,  2349,  2362,  2376,  2379,  2381,  2383,  2388,  2389,
    2393,  2394,  2395,  2396,  2397,  2398,  2399,  2400,  2404,  2405,
    2406,  2407,  2408,  2409,  2410,  2411,  2412,  2413,  2417,  2418,
    2419,  2420,  2421,  2422,  2423,  2424,  2425,  2426,  2430,  2431,
    2432,  2433,  2434,  2435,  2436,  2437,  2438,  2439,  2440,  2441,
    2445,  2446,  2447,  2448,  2449,  2450,  2451,  2452,  2453,  2454,
    2458,  2459,  2463,  2464,  2465,  2466,  2467,  2468,  2469,  2470,
    2471,  2473,  2475,  2493,  2511,  2512,  2516,  2517,  2518,  2519,
    2520,  2521,  2522,  2523,  2524,  2542,  2559,  2560,  2561,  2562,
    2563,  2564,  2565,  2566,  2567,  2568,  2569,  2570,  2571,  2589,
    2606,  2607,  2608,  2609,  2610,  2611,  2612,  2613,  2614,  2615,
    2616,  2617,  2618,  2636,  2653,  2654,  2658,  2659,  2660,  2661,
    2662,  2666,  2667,  2668,  2669,  2670,  2671,  2675,  2679,  2680,
    2681,  2682,  2683,  2688,  2697,  2706,  2715,  2729,  2730,  2731,
    2733,  2778,  2779,  2780,  2792,  2793,  2794,  2799,  2800,  2801,
    2802,  2803,  2807,  2808,  2812,  2813,  2817,  2818,  2822,  2824,
    2826,  2828,  2830,  2832,  2834,  2836,  2838,  2840,  2842,  2844,
    2846,  2848,  2850,  2855,  2857,  2859,  2861,  2863,  2865,  2867,
    2872,  2873,  2874,  2875,  2879,  2880,  2881,  2882,  2883,  2884,
    2888,  2889,  2890,  2891,  2892,  2893,  2897,  2898,  2900,  2902,
    2907,  2908,  2909,  2910,  2911,  2915,  2916,  2917,  2918,  2919,
    2923,  2924,  2925,  2926,  2927,  2931,  2932,  2933,  2949,  2950,
    2951,  2952,  2965,  2981,  2982,  2987,  2988,  2992,  2993,  2994,
    2995,  2998,  2999,  3003,  3004,  3008,  3012,  3016,  3017,  3018,
    3022,  3023,  3024,  3025,  3029,  3030,  3034,  3035,  3040,  3041,
    3042,  3043,  3044,  3045,  3064,  3065,  3069,  3070,  3071,  3072,
    3073,  3074,  3076,  3077,  3078,  3079,  3083,  3084,  3085,  3086,
    3087,  3089,  3090,  3091,  3095,  3096,  3097,  3098,  3099,  3100,
    3104,  3105,  3106,  3111,  3112,  3113,  3114,  3115,  3116,  3117,
    3118,  3119,  3120,  3121,  3122,  3123,  3127,  3128,  3129,  3130,
    3131,  3132,  3133,  3137,  3138,  3142,  3143,  3144,  3148,  3149,
    3150,  3151,  3153,  3154,  3155,  3157,  3158,  3159,  3160,  3162,
    3163,  3164,  3168,  3169,  3170,  3171,  3172,  3176,  3177,  3178,
    3179,  3180,  3181,  3182,  3186,  3187,  3188,  3192,  3193,  3197,
    3198,  3199,  3200,  3204,  3205,  3206,  3208,  3209,  3210,  3214,
    3218,  3219,  3221,  3222,  3223,  3227,  3228,  3229,  3230,  3234,
    3235,  3239,  3240,  3241,  3245,  3246,  3247,  3248,  3249,  3250,
    3251,  3255,  3256,  3257,  3258,  3262,  3263,  3264,  3265,  3269,
    3273,  3277,  3279,  3282,  3288,  3289,  3290,  3294,  3295,  3296,
    3297,  3298,  3299,  3303,  3304,  3308,  3309,  3310,  3312,  3313,
    3315,  3316,  3317,  3318,  3319,  3321,  3322,  3326,  3327,  3328,
    3329,  3333,  3334,  3335,  3336,  3338,  3339,  3340,  3341,  3342,
    3343,  3344,  3347,  3351,  3352,  3356,  3357,  3361,  3362,  3363,
    3364,  3365,  3366,  3367,  3368,  3372,  3373,  3374,  3375,  3381,
    3382,  3385,  3386,  3389,  3390,  3391,  3392,  3396,  3397,  3409,
    3410,  3413,  3416,  3418,  3419,  3420,  3430,  3432,  3433,  3435,
    3436,  3437,  3438,  3448,  3449,  3450,  3451,  3452,  3453,  3457,
    3458,  3466,  3468,  3469,  3471,  3473,  3477,  3478,  3479,  3480,
    3481,  3485,  3486,  3487,  3489,  3494,  3495,  3496,  3500,  3501,
    3502,  3506,  3510,  3511,  3512,  3516,  3517,  3521,  3522,  3526,
    3527,  3528,  3529,  3533,  3537,  3541,  3545
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "LONG", "SIGNED", "UNSIGNED", "FLOAT",
  "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST", "STRUCT", "UNION",
  "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH", "WHILE", "DO",
  "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX", "ELSE", "CLASS",
  "THISCLASS", "CLASS_NAME", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "'*'",
  "'<'", "'>'", "'('", "')'", "'~'", "';'", "'='", "','", "'}'", "'{'",
  "'.'", "':'", "'$'", "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'",
  "'%'", "'^'", "'|'", "'?'", "$accept", "guess_type", "type",
  "base_strict_type", "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "simple_postfix_expression", "argument_expression_list",
  "argument_expression_list_error", "common_unary_expression",
  "unary_expression", "simple_unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "simple_postfix_expression_error", "common_unary_expression_error",
  "unary_expression_error", "simple_unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction", "direct_declarator_function_start",
  "direct_declarator_function", "direct_declarator_function_error",
  "direct_declarator", "ext_decl", "_attrib", "attribute_word",
  "attribute", "attribs_list", "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_function",
  "declarator_function_error", "declarator_nofunction", "initializer",
  "initializer_error", "initializer_condition",
  "initializer_condition_error", "initializer_list", "init_declarator",
  "init_declarator_error", "init_declarator_list",
  "init_declarator_list_error", "type_name", "guess_type_name",
  "parameter_declaration", "parameter_declaration_error", "parameter_list",
  "parameter_list_error", "parameter_type_list",
  "parameter_type_list_error", "statement", "statement_error", "asm_field",
  "asm_field_list", "asm_statement", "labeled_statement",
  "labeled_statement_error", "declaration_mode", "member_access",
  "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    42,    60,    62,    40,    41,   126,    59,    61,
      44,   125,   123,    46,    58,    36,    91,    93,    38,    43,
      45,    33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   137,   138,   138,   139,   139,   140,   141,   142,   142,
     142,   143,   143,   144,   145,   146,   146,   147,   147,   148,
     148,   149,   149,   149,   149,   149,   149,   150,   150,   150,
     150,   150,   151,   151,   152,   153,   154,   154,   154,   155,
     155,   156,   156,   156,   157,   157,   157,   158,   158,   158,
     158,   158,   158,   159,   159,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   161,   161,   161,   161,   162,   162,
     162,   162,   162,   162,   162,   163,   163,   164,   164,   164,
     164,   164,   165,   165,   166,   166,   166,   166,   166,   167,
     167,   167,   168,   168,   169,   169,   169,   169,   169,   169,
     169,   169,   169,   169,   170,   170,   171,   171,   171,   171,
     171,   172,   173,   173,   173,   174,   174,   174,   175,   175,
     175,   175,   176,   176,   176,   176,   176,   177,   177,   177,
     177,   177,   177,   178,   179,   179,   179,   179,   179,   180,
     180,   180,   181,   182,   182,   183,   183,   184,   184,   185,
     186,   186,   187,   187,   187,   187,   188,   188,   188,   188,
     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   189,   189,   189,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   191,   191,   191,
     192,   192,   192,   192,   192,   193,   193,   193,   194,   195,
     195,   195,   195,   195,   195,   195,   195,   196,   197,   197,
     198,   199,   199,   200,   200,   200,   201,   201,   202,   202,
     202,   202,   202,   202,   202,   202,   202,   203,   203,   204,
     205,   205,   205,   205,   205,   205,   205,   205,   206,   206,
     206,   206,   206,   206,   207,   208,   208,   208,   208,   208,
     208,   209,   210,   210,   211,   211,   211,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   213,   214,   215,   215,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   218,   218,   218,   218,   219,   219,   219,   219,
     219,   220,   220,   220,   220,   220,   220,   220,   220,   220,
     220,   220,   220,   221,   221,   222,   222,   223,   223,   223,
     223,   223,   223,   223,   223,   224,   224,   225,   225,   225,
     225,   225,   225,   225,   226,   226,   226,   226,   226,   227,
     227,   227,   227,   227,   228,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   230,   230,   230,   230,   230,   230,
     230,   230,   230,   231,   231,   231,   231,   231,   232,   232,
     232,   232,   232,   233,   233,   233,   233,   233,   234,   234,
     234,   235,   235,   235,   236,   236,   236,   236,   236,   236,
     236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
     236,   237,   237,   237,   237,   237,   237,   237,   237,   237,
     238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
     238,   239,   239,   239,   239,   240,   240,   240,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   242,
     242,   242,   242,   242,   242,   242,   242,   242,   242,   243,
     243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
     243,   244,   244,   245,   245,   246,   246,   247,   247,   247,
     247,   247,   247,   247,   248,   248,   248,   248,   248,   249,
     249,   249,   249,   249,   250,   250,   250,   250,   250,   250,
     250,   250,   250,   251,   251,   251,   251,   251,   251,   251,
     251,   251,   252,   252,   252,   252,   252,   253,   253,   253,
     253,   253,   254,   254,   254,   254,   254,   255,   255,   255,
     256,   256,   256,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   258,   258,   258,   258,   258,   259,   259,   259,
     259,   259,   259,   259,   260,   260,   260,   260,   261,   262,
     263,   263,   263,   263,   263,   264,   264,   264,   264,   264,
     265,   265,   265,   266,   266,   266,   267,   268,   268,   269,
     269,   269,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   271,   271,   272,   272,   272,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   274,   274,   275,   275,   276,
     276,   277,   277,   277,   278,   278,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   281,   281,
     281,   281,   281,   281,   281,   281,   281,   281,   282,   282,
     283,   283,   284,   284,   284,   285,   285,   285,   285,   285,
     285,   286,   287,   287,   288,   289,   289,   289,   289,   290,
     290,   290,   290,   290,   290,   290,   290,   290,   291,   291,
     292,   292,   292,   292,   292,   292,   292,   292,   293,   293,
     293,   293,   293,   293,   293,   293,   293,   293,   294,   294,
     294,   294,   294,   294,   294,   294,   294,   294,   295,   295,
     295,   295,   295,   295,   295,   295,   295,   295,   295,   295,
     296,   296,   296,   296,   296,   296,   296,   296,   296,   296,
     297,   297,   298,   298,   298,   298,   298,   298,   298,   298,
     298,   298,   298,   298,   299,   299,   300,   300,   300,   300,
     300,   300,   300,   300,   300,   300,   301,   301,   301,   301,
     301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
     302,   302,   302,   302,   302,   302,   302,   302,   302,   302,
     302,   302,   302,   302,   303,   303,   304,   304,   304,   304,
     304,   305,   305,   305,   305,   305,   305,   306,   307,   307,
     307,   307,   307,   308,   308,   308,   308,   309,   309,   309,
     309,   310,   310,   310,   311,   311,   311,   312,   312,   312,
     312,   312,   313,   313,   314,   314,   315,   315,   316,   316,
     316,   316,   316,   316,   316,   316,   316,   316,   316,   316,
     316,   316,   316,   317,   317,   317,   317,   317,   317,   317,
     318,   318,   318,   318,   319,   319,   319,   319,   319,   319,
     320,   320,   320,   320,   320,   320,   321,   321,   321,   321,
     322,   322,   322,   322,   322,   323,   323,   323,   323,   323,
     324,   324,   324,   324,   324,   325,   325,   325,   326,   326,
     326,   326,   326,   327,   327,   328,   328,   329,   329,   329,
     329,   329,   329,   330,   330,   331,   331,   332,   332,   332,
     333,   333,   333,   333,   334,   334,   335,   335,   336,   336,
     336,   336,   336,   336,   337,   337,   338,   338,   338,   338,
     338,   338,   338,   338,   338,   338,   339,   339,   339,   339,
     339,   339,   339,   339,   340,   340,   340,   340,   340,   340,
     341,   341,   341,   342,   342,   342,   342,   342,   342,   342,
     342,   342,   342,   342,   342,   342,   343,   343,   343,   343,
     343,   343,   343,   344,   344,   345,   345,   345,   346,   346,
     346,   346,   346,   346,   346,   346,   346,   346,   346,   346,
     346,   346,   347,   347,   347,   347,   347,   348,   348,   348,
     348,   348,   348,   348,   349,   349,   349,   350,   350,   351,
     351,   351,   351,   352,   352,   352,   352,   352,   352,   353,
     354,   354,   354,   354,   354,   355,   355,   355,   355,   356,
     356,   357,   357,   357,   358,   358,   358,   358,   358,   358,
     358,   359,   359,   359,   359,   360,   360,   360,   360,   361,
     362,   363,   363,   363,   364,   364,   364,   365,   365,   365,
     365,   365,   365,   366,   366,   367,   367,   367,   367,   367,
     367,   367,   367,   367,   367,   367,   367,   368,   368,   368,
     368,   368,   368,   368,   368,   368,   368,   368,   368,   368,
     368,   368,   368,   368,   368,   368,   368,   369,   369,   369,
     369,   369,   369,   369,   369,   370,   370,   370,   370,   371,
     371,   371,   371,   372,   372,   372,   372,   373,   373,   374,
     374,   374,   374,   374,   374,   374,   374,   374,   374,   374,
     374,   374,   374,   374,   374,   374,   374,   374,   374,   375,
     375,   375,   375,   375,   375,   375,   376,   376,   376,   376,
     376,   377,   377,   377,   377,   378,   378,   378,   379,   379,
     379,   380,   381,   381,   381,   382,   382,   383,   383,   384,
     384,   384,   384,   385,   386,   387,   388
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     2,
       1,     2,     2,     2,     2,     2,     2,     1,     1,     3,
       1,     3,     3,     1,     1,     3,     3,     1,     3,     3,
       3,     3,     1,     2,     2,     1,     1,     2,     2,     2,
       2,     1,     2,     2,     1,     1,     2,     2,     1,     2,
       2,     2,     2,     1,     2,     2,     3,     4,     5,     4,
       3,     4,     2,     3,     4,     5,     4,     3,     4,     5,
       5,     4,     2,     3,     3,     3,     3,     2,     4,     3,
       3,     2,     4,     3,     2,     3,     2,     3,     2,     1,
       2,     3,     3,     3,     2,     1,     3,     3,     1,     3,
       3,     2,     4,     5,     3,     4,     3,     1,     3,     3,
       3,     2,     3,     2,     4,     5,     3,     4,     3,     1,
       3,     3,     2,     1,     2,     2,     2,     1,     2,     5,
       7,     9,     6,     8,     4,     6,     1,     2,     3,     4,
       3,     2,     2,     2,     1,     1,     4,     3,     3,     3,
       2,     2,     2,     4,     1,     2,     1,     3,     3,     1,
       1,     3,     7,     1,     2,     4,     1,     2,     2,     1,
       1,     2,     3,     3,     2,     2,     1,     1,     2,     2,
       1,     2,     2,     2,     2,     1,     2,     1,     1,     2,
       4,     4,     6,     2,     4,     4,     6,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     1,     3,     1,     1,
       1,     3,     3,     3,     3,     3,     3,     1,     3,     1,
       2,     2,     3,     3,     5,     5,     6,     6,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     1,     3,     1,     2,     4,     1,     1,     4,
       4,     5,     8,     1,     1,     2,     6,     6,     5,     5,
       6,     6,     5,     5,     7,     7,     6,     6,     7,     7,
       6,     6,     4,     5,     4,     6,     4,     1,     1,     1,
       1,     3,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     4,     4,     3,     4,     4,
       3,     3,     2,     2,     4,     4,     3,     4,     3,     3,
       2,     2,     1,     1,     3,     3,     1,     1,     3,     3,
       2,     2,     2,     2,     2,     4,     2,     4,     5,     5,
       4,     2,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     1,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       5,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     2,     1,     3,     3,     1,     1,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     1,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     2,     2,     3,     2,     5,     6,     6,     3,     2,
       5,     1,     1,     1,     1,     1,     4,     1,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     5,     5,     5,     5,     4,     4,
       4,     4,     5,     5,     5,     5,     4,     4,     4,     4,
       5,     5,     5,     5,     5,     5,     5,     5,     3,     3,
       2,     2,     1,     3,     3,     3,     3,     1,     2,     3,
       3,     2,     2,     2,     1,     2,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     1,     3,     2,     1,     2,     2,     2,
       4,     4,     3,     3,     4,     5,     4,     6,     6,     4,
       5,     4,     6,     6,     2,     2,     2,     5,     3,     5,
       6,     5,     7,     7,     8,     8,     7,     7,     3,     3,
       3,     4,     3,     5,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     4,     4,     1,     1,     2,
       2,     3,     5,     2,     3,     5,     5,     5,     1,     3,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     1,     4,     3,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     1,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     4,     5,     3,     3,     1,     3,     3,     3,
       3,     1,     3,     4,     4,     4,     3,     2,     3,     3,
       3,     3,     2,     2,     2,     3,     4,     1,     1,     2,
       2,     1,     1,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     1,     2,     6,     5,     3,     2,
       3,     3,     3,     3,     4,     4,     4,     2,     3,     3,
       3,     4,     4,     3,     2,     3,     3,     3,     4,     4,
       1,     2,     2,     3,     1,     1,     2,     2,     2,     3,
       1,     1,     2,     2,     2,     3,     1,     2,     3,     2,
       1,     2,     2,     3,     3,     1,     2,     2,     3,     3,
       1,     2,     2,     3,     3,     1,     3,     4,     1,     4,
       2,     5,     3,     1,     1,     1,     1,     1,     1,     3,
       3,     2,     2,     1,     3,     2,     3,     1,     3,     3,
       1,     2,     3,     3,     1,     2,     1,     2,     2,     2,
       2,     3,     1,     1,     3,     3,     1,     3,     4,     3,
       4,     3,     3,     4,     3,     4,     1,     3,     3,     4,
       3,     3,     3,     4,     1,     3,     3,     3,     3,     3,
       1,     3,     2,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       1,     2,     1,     1,     4,     1,     3,     0,     6,     8,
      10,    12,     8,    10,    10,     5,     7,     9,    11,     7,
       9,     9,     3,     4,     4,     3,     3,     3,     4,     4,
       3,     2,     3,     2,     1,     1,     1,     1,     1,     2,
       3,     2,     2,     2,     3,     3,     2,     5,     6,     2,
       2,     2,     2,     2,     2,     1,     2,     2,     3,     1,
       2,     1,     2,     2,     1,     2,     2,     2,     2,     2,
       2,     1,     1,     2,     2,     1,     1,     2,     2,     1,
       2,     2,     1,     2,     1,     2,     2,     5,     5,     7,
       7,     5,     5,     3,     2,     5,     4,     4,     7,     6,
       6,     5,     7,     6,     4,     7,     9,     3,     4,     4,
       5,     5,     6,     7,     6,     6,     5,     5,     4,     3,
       2,     1,     2,     4,     3,     5,     4,     3,     2,     2,
       2,     3,     3,     3,     3,     2,     2,     1,     1,     4,
       3,     3,     2,     4,     3,     3,     2,     1,     2,     1,
       1,     2,     1,     2,     3,     3,     1,     2,     2,     2,
       3,     4,     4,     2,     2,     2,     2,     1,     2,     1,
       2,     1,     2,     2,     1,     2,     1,     2,     2,     2,
       2,     1,     2,     2,     3,     1,     1,     0,     6,     6,
       5,     4,     1,     2,     2,     1,     3,     3,     4,     1,
       1,     2,     2,     6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1247,   261,     6,   625,   626,   627,   628,   629,   687,   688,
     689,   690,   691,   693,   696,   697,   694,   695,   681,   682,
     686,   692,   768,   769,   636,  1096,   239,   705,   901,   679,
       0,     0,   904,  1094,  1095,   706,   707,   698,     0,     0,
       0,     0,     0,   905,   906,   940,     0,  1216,   816,   701,
       8,     4,     0,     0,     0,  1210,     0,  1229,   881,   810,
       0,   700,     0,   675,   677,   818,   820,   683,   812,   814,
     751,   699,     0,     0,   676,   678,     0,     0,     0,     0,
       0,   960,   680,     0,   902,     0,     0,     0,  1212,  1234,
    1209,  1231,  1241,  1236,     0,     0,     0,  1227,     0,  1224,
    1207,     0,     0,  1213,     0,     0,     0,     0,  1226,  1225,
       0,   684,   941,   680,   942,   881,   898,   897,   956,     0,
       0,     0,     0,  1106,     0,   241,   240,     0,     0,   249,
       0,   248,     2,     3,     0,     5,     0,   638,   637,     0,
       0,   656,     0,     0,     0,     0,   755,     0,   741,   740,
    1109,   627,  1103,   817,  1211,  1230,   881,   811,   819,   821,
     813,   815,   960,   680,     0,     0,     0,     0,  1000,     0,
       0,     0,   887,     0,     0,   620,   621,   622,   623,   624,
    1013,   892,   804,   876,   798,     0,   808,     0,   800,   802,
     751,   806,     0,     0,  1012,     0,     0,  1016,  1026,     0,
       0,     0,     0,   962,     0,     0,   961,     0,   709,   710,
     711,   712,   713,   715,   718,   719,   716,   717,   708,   714,
     727,   720,     0,     0,  1139,   723,     0,     0,   788,   722,
     794,   790,   792,   796,   721,     0,  1115,     0,     0,     0,
       0,  1202,  1206,   627,     0,  1223,  1218,  1232,     0,  1219,
    1235,  1217,  1233,  1228,  1240,  1243,     0,     0,     0,     0,
       0,  1238,  1239,  1242,  1237,     1,     0,  1214,  1215,  1208,
       0,     0,   479,   273,     0,     0,     0,     0,     0,     0,
     373,   374,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   368,     0,   371,     0,     0,   367,   369,   370,
     372,     0,   268,     0,   267,   306,   274,   262,   478,     0,
     363,   375,     0,   377,   384,   389,   395,     0,   404,   413,
     418,   423,   428,   431,   434,   451,     0,   512,   511,   515,
     517,   524,   529,   534,   543,   552,   557,   562,   567,   570,
     573,     0,   264,   297,   298,   299,   300,     0,     0,     0,
       0,     0,   685,   943,   900,   899,     0,   957,     0,   882,
     959,   720,   723,   208,   230,   229,   228,   237,     0,   267,
     375,   434,   618,   515,     0,   220,   205,   253,     0,     0,
     252,   259,     0,     0,  1097,  1098,   698,     0,   176,     0,
     179,   180,     0,     0,     0,     0,     0,   183,   250,     4,
       0,     0,     0,     0,    28,    30,   164,   186,   189,     0,
     190,     0,   115,   118,     0,   196,   127,     0,   165,   139,
       0,   174,     0,   197,   200,     0,     0,   267,     0,     0,
       0,     0,   965,   680,     0,    12,    18,     0,   823,   822,
     830,   824,     0,   826,   828,   751,   835,   834,   254,   260,
     251,     0,     0,   243,   242,   669,   630,   633,   668,   672,
     658,     0,     0,     0,     0,   223,   224,   225,   226,     0,
     218,   764,   757,     0,     0,   754,   761,   756,     0,     0,
     767,   758,     0,     0,     0,   962,     0,   961,     0,   995,
       0,     0,  1200,  1204,  1001,  1104,     0,     0,  1105,   886,
       0,   267,   619,     0,     0,     0,     0,   638,   637,   639,
       0,   742,     0,     0,     0,  1010,   805,   881,   799,   809,
     801,   803,   807,   680,   945,   944,     0,     0,     0,   891,
       0,     0,   890,     0,     0,     0,  1042,     0,   888,   889,
     963,     0,   964,     0,     0,  1113,  1101,  1112,    75,  1110,
    1099,   881,   789,   795,   791,   793,   797,   680,     0,  1114,
    1111,  1102,     0,  1116,     0,  1201,  1205,  1117,     0,     0,
       0,     0,     0,     0,     0,     0,  1198,     0,     0,     0,
       0,     0,     0,   156,  1046,  1047,     0,     0,     0,   267,
       0,   375,     0,     0,   515,   602,   607,     0,  1044,  1121,
    1124,  1052,  1043,  1056,     0,     0,     0,     0,  1143,  1141,
    1045,  1058,     0,  1059,  1050,  1057,     0,  1060,  1140,     0,
       0,  1220,   881,     0,     0,     0,  1230,     0,     0,  1206,
    1244,     0,     0,     0,   903,   489,     0,     0,   324,     0,
     365,   356,   514,   513,   504,     0,   351,   499,   352,   500,
       0,   870,   860,   868,   862,   864,   866,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   361,
     509,   275,     0,     0,     0,   774,   770,   772,   776,  1004,
       0,   265,     0,   302,     0,   343,     0,   342,     0,   481,
      92,     0,   480,     0,   314,   315,     0,     0,     0,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   460,
       0,     0,   354,   502,   353,   501,     0,     0,     0,     0,
       0,     0,     0,   396,   535,     0,     0,   394,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   702,     0,
     322,   323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   703,   704,     0,     0,
       0,  1259,  1260,     0,     0,     0,   958,     0,    10,     9,
       0,     0,     0,     0,     0,   680,   944,   206,     0,   208,
       0,   267,     0,     0,   842,   836,   838,   840,     0,     0,
       0,    16,    20,     0,     0,     0,     0,     0,     0,     0,
       0,   368,     0,   267,     0,    26,    21,    27,    24,     0,
      25,    23,    22,    29,    31,   163,   187,    82,   162,   188,
     121,   172,     0,     0,     0,     0,   131,     0,     0,   133,
       0,     0,   142,   175,   201,   198,   203,   202,   199,   204,
     114,     0,     0,   161,     0,   881,   738,     0,   970,   680,
       0,    11,    17,   728,   894,  1012,     0,     0,   967,     0,
     966,     0,     0,   184,   170,   191,   194,     0,   195,     0,
     171,   881,     0,     0,   638,   637,   831,   825,   827,   829,
       0,     0,     0,   635,   671,     0,     0,     7,   213,   209,
     221,   753,     0,     0,    61,    52,    91,    38,    37,    56,
      68,    44,    47,     0,    73,    55,     0,     0,     0,   984,
     986,     0,   983,   985,     0,    40,    43,   963,   964,     0,
     975,   978,   994,   996,  1199,  1203,   998,  1002,   999,  1003,
     885,   883,   884,  1039,  1021,  1030,   643,   642,     0,     0,
     479,   743,     0,     0,   479,   744,     0,     0,   927,   881,
       0,     0,     0,     0,     0,   919,     0,     0,     0,  1011,
     948,   947,     0,     0,   946,  1015,  1014,     0,   875,  1038,
     878,  1024,  1032,     0,   874,  1037,   877,  1022,  1031,     0,
    1041,  1035,   879,  1017,  1027,     0,  1036,   880,  1019,  1028,
     907,   908,   911,   910,   909,     0,   912,   914,     0,     0,
       0,     0,    76,     0,  1100,  1118,     0,     0,     0,     0,
       0,     0,  1182,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   267,     0,  1044,  1180,  1049,  1051,     0,
       0,  1188,  1189,  1190,     0,  1196,     0,     0,     0,     0,
       0,     0,   157,   143,  1055,  1054,  1053,     0,     0,     0,
     608,     0,  1048,     0,     0,     0,     0,   474,     0,     0,
     479,     0,     0,     0,     0,  1122,  1125,  1127,     0,  1123,
    1126,  1128,     0,  1154,  1061,  1221,  1222,   241,   240,     0,
       0,     0,  1204,  1205,     0,  1107,     0,   782,   267,     0,
     503,   784,   778,   780,   786,  1006,     0,   491,   490,     0,
     332,   333,     0,     0,     0,     0,   340,   341,     0,     0,
       0,     0,     0,     0,     0,     0,   871,   861,   869,   863,
     865,   867,   680,   951,   950,     0,   856,   846,   854,   848,
     850,   852,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   508,     0,   263,     0,
     775,   771,   773,   777,  1005,     0,     0,   479,     0,     0,
       0,   104,     0,   301,   479,     0,     0,    93,   479,     0,
       0,   482,   313,   309,   347,   484,   485,   346,   486,   312,
       0,     0,   456,   452,   303,   378,   518,   379,   519,   380,
     520,   385,   525,   386,   526,   390,   530,   391,   531,   398,
     537,   399,   538,   397,   536,   409,   548,   405,   544,   410,
     549,   406,   545,   416,   555,   414,   553,   421,   560,   419,
     558,   426,   565,   424,   563,   429,   568,   432,   571,   598,
       0,   614,     0,     0,     0,     0,   458,   454,   483,   321,
     318,     0,   487,   488,   320,     0,     0,   457,   453,   381,
     521,   382,   522,   383,   523,   387,   527,   388,   528,   392,
     532,   393,   533,   402,   541,   403,   542,   400,   539,   401,
     540,   411,   550,   407,   546,   412,   551,   408,   547,   417,
     556,   415,   554,   422,   561,   420,   559,   427,   566,   425,
     564,   430,   569,   433,   572,   599,     0,     0,     0,     0,
     459,   455,     0,     0,  1252,  1255,     0,     0,  1250,  1261,
    1262,     0,     0,   208,   236,   235,   234,   267,   238,   233,
     232,   231,     0,     0,     0,     0,     0,     0,     0,     0,
     947,   245,     0,   244,   126,     0,   124,   843,   837,   839,
     841,     0,    15,    19,     0,   178,   177,   181,     0,   970,
     680,     0,   138,     0,   136,   843,     0,   267,     0,    83,
     116,   119,   117,   120,   128,   129,   130,   132,   140,   141,
     113,   111,   112,    13,   730,   733,     0,   160,     0,   972,
       0,   971,     0,     0,   729,   881,   895,   968,   969,   881,
     169,   192,   168,   193,   167,     0,     0,     0,     0,     0,
     631,   632,   634,     0,     0,   661,   657,     0,     0,     0,
       0,     0,     0,   227,   219,   217,    35,    36,    74,    53,
       0,    54,     0,    63,    60,    71,    66,    72,    59,    89,
      38,    69,    62,    90,    58,    70,    67,     0,    57,     0,
      32,    34,    33,   987,   988,     0,   651,   641,     0,   646,
     640,     0,   918,   928,   929,   922,   920,   921,   949,   930,
       0,     0,   923,     0,     0,     0,  1025,  1033,  1012,  1023,
    1018,  1020,  1029,   917,     0,     0,   915,   724,   725,   726,
     479,     0,     0,  1085,  1090,     0,     0,  1086,  1092,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1179,   479,
       0,  1144,   267,     0,     0,     0,  1187,  1193,  1194,  1191,
    1192,     0,     0,     0,     0,   144,  1082,  1087,   158,   605,
     603,     0,     0,     0,   472,   609,   606,   604,   473,   610,
       0,  1203,  1108,     0,     0,   355,   783,   785,   779,   781,
     787,  1007,     0,   492,   331,   327,   494,   495,   496,   330,
       0,     0,   493,   339,   336,     0,   497,   498,   338,     0,
       0,   294,   292,     0,     0,   934,     0,     0,     0,     0,
       0,     0,   954,   953,     0,   952,     0,     0,     0,   857,
     847,   855,   849,   851,   853,     0,   270,     0,   269,   296,
       0,     0,     0,     0,     0,     0,  1266,     0,     0,     0,
     360,     0,   376,   516,   266,   107,   105,   345,   344,    98,
     102,   310,     0,   311,   307,   308,   615,     0,     0,     0,
       0,     0,     0,   319,   316,   317,     0,     0,     0,     0,
    1254,  1253,  1257,     0,     0,     0,  1249,  1248,     0,     0,
       0,     0,     0,     0,     0,     0,   219,     0,     0,   122,
     125,     0,     0,   173,   972,     0,   971,     0,     0,   134,
     137,     0,    14,   479,     0,     0,   739,     0,   973,   974,
     731,   734,   896,   185,   166,   832,     0,   247,   246,     0,
     660,     0,   214,   207,   215,   210,   211,   222,    50,    45,
      48,    51,    46,    49,    36,    42,    39,    41,     0,     0,
     991,   992,   650,     0,   645,     0,   931,   932,   925,   924,
     926,  1009,  1008,     0,   916,    78,  1083,  1088,  1084,  1089,
       0,     0,     0,     0,   479,  1157,     0,     0,  1156,  1186,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1164,     0,  1145,   479,  1146,   479,     0,     0,     0,
    1067,   903,  1067,     0,     0,   154,     0,     0,     0,   159,
       0,     0,   505,   328,   329,   325,   326,   337,   334,   335,
     293,   872,   933,   935,   936,   278,   279,     0,   955,   937,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   271,   282,   283,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   510,   349,   348,   476,   616,   443,   590,
     435,   574,   447,   594,   439,   582,   477,   617,   444,   591,
     436,   575,   448,   595,   440,   583,   445,   592,   437,   576,
     449,   596,   441,   584,   446,   593,   438,   577,   450,   597,
     442,   585,  1256,  1258,  1251,   844,     0,   123,   149,   973,
     974,     0,   135,    85,     0,     0,   833,     0,     0,     0,
       0,     0,     0,     0,     0,   989,   990,   979,     0,     0,
       0,     0,   913,  1147,  1148,  1151,  1152,  1155,  1185,     0,
       0,     0,     0,     0,     0,     0,  1161,   479,     0,     0,
       0,  1065,     0,  1063,  1075,     0,  1067,     0,  1067,     0,
       0,     0,     0,   507,   506,   873,   938,   939,   276,   277,
     858,   286,   287,     0,     0,     0,     0,     0,   280,   281,
     290,   291,     0,     0,   295,  1264,  1265,  1263,   845,     0,
     732,   735,   737,   736,     0,     0,   216,   212,   981,     0,
       0,     0,     0,     0,     0,     0,  1175,  1159,     0,     0,
    1160,  1172,     0,  1163,  1174,     0,     0,  1067,     0,  1067,
       0,  1067,     0,  1068,     0,     0,     0,   147,     0,   152,
       0,   155,     0,   859,   284,   285,     0,     0,   976,   288,
     289,   182,  1149,  1150,     0,     0,  1158,  1165,     0,  1162,
    1173,  1079,  1066,     0,     0,     0,  1076,     0,     0,  1067,
    1067,     0,  1067,   146,   145,   150,   148,     0,     0,   376,
     516,   272,   977,     0,     0,  1064,     0,     0,  1067,  1072,
       0,     0,  1069,     0,     0,   153,  1166,  1080,  1081,  1077,
       0,     0,     0,     0,  1067,   151,     0,  1073,  1074,  1070,
       0,  1078,     0,  1071
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   182,    49,    50,   898,   301,   400,   401,   402,   403,
     404,   405,   406,   407,   907,   908,   909,   910,   911,   912,
     913,   914,   915,   916,   917,   918,   226,   227,   408,   409,
      52,   302,   303,   683,   711,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,  1986,  1987,  1988,   422,   586,
     587,   588,   423,   424,   425,   426,   363,   364,   465,   365,
     466,   366,   467,   468,   790,   367,   368,    53,    54,    55,
      56,    57,   304,   305,   306,   307,   919,   920,   308,   309,
     639,   686,  1186,   310,   591,   641,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     672,   765,   593,  1243,   327,   642,   328,   594,   644,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     595,   596,  1034,  1245,   375,   504,   184,    59,   457,   458,
     185,    61,   186,   187,    62,    63,    64,    65,    66,    67,
     188,   112,   189,   232,   856,   857,   190,   191,   192,    71,
      72,    73,    74,    75,   193,   679,  1105,   376,   430,    77,
      78,   447,   448,   799,  1142,   657,   960,   961,    79,   431,
      81,   432,   118,   113,    83,  1006,  1007,  1008,    84,   524,
    1133,   434,   526,  1135,   121,   435,   436,   863,  1453,  1454,
     925,   926,  1455,   167,   168,   169,   170,   680,  1106,   197,
     198,   199,   200,   201,   202,   599,   600,  1911,  1912,   601,
     602,   603,    87,   437,   236,    88,    89,   237,   238,   239,
     606,   607,   608,   609,   240,   610,   819,  1525,  1037,   613,
     614,   615,  1038,   617,    90,    91,   342,    92,    93,    94,
      95,    96,    97,   771,  1315,  1316,   772,   773,   343,   344,
     345,   346
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1452
static const int yypact[] =
{
   34089, -1452, -1452, -1452, -1452,   489, -1452, -1452, -1452, -1452,
   -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452,
   -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452,
    1022,    37, -1452, -1452, -1452, -1452, -1452, -1452,   -26,    26,
     223,   835,   169, -1452, -1452,  2035,  1270, -1452, -1452, -1452,
     305, -1452,   332,   835,   438, -1452,   948,   350,   947, -1452,
     262, -1452,  1100, -1452,   360, -1452, -1452, -1452, -1452, -1452,
    1152, -1452,  1136,   402, -1452,   481,   377, 33725,  1270,   340,
   34357, -1452,   724,   502, -1452,  1283, 36718, 32393, -1452, -1452,
   -1452, -1452, -1452, -1452, 34180, 33352,   620, -1452,    37, -1452,
   -1452,   169,   169,   633,   569,   169, 26513,   835, -1452, -1452,
     792, -1452,  2035, -1452, -1452, -1452,   340, -1452, -1452,   724,
    1283,  1391, 20809, -1452,   586,   829,   719, 27326, 36103, -1452,
   27445, -1452, -1452, -1452,   835, -1452,  1383,  1350,  1351,    89,
   36103, -1452, 36273, 27564, 36103, 27683, -1452, 27802, -1452, -1452,
   -1452, -1452, -1452, -1452, -1452,   350,   433, -1452, -1452, -1452,
   -1452, -1452,  1117,   724,  1283,  1133, 36718,   185, -1452,  1365,
     636,  1366, -1452, 25199,   701, -1452, -1452, -1452, -1452, -1452,
   -1452, -1452, -1452,   646, -1452,   425, -1452,   708, -1452, -1452,
     739, -1452,   747,   472, 31119,    99,   510, -1452, -1452,   574,
     585,   770,   793, -1452,   111,   805, -1452,   111, -1452, -1452,
   -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452,
   -1452, -1452,   831,   849, -1452, -1452,    72,   124, -1452, -1452,
   -1452, -1452, -1452, -1452, -1452, 33907, -1452, 15807,  4175, 36907,
   15939, -1452,   866,   940,  1062, -1452, -1452,   350, 33816, -1452,
   -1452, -1452, -1452, -1452, -1452, -1452,   360,   481, 34713, 36718,
   34977, -1452, -1452, -1452, -1452, -1452,   887,   633,   633, -1452,
   26513,   160, -1452, -1452, 26586, 26659, 26659,   953, 36358, 26513,
   -1452, -1452,   980,  1002, 36358, 26513,  1021,  1026,  1033,  1036,
    1041, 26732, -1452, 21039, -1452,   169, 25272, -1452, -1452, -1452,
   -1452,   966, -1452,   130,  1054, -1452, -1452, -1452, -1452, 11072,
   -1452,  1602, 25272, -1452,  1031,  1334,  1469, 26513,   894,  1478,
    1069,  1070,  1080,  1268,   101,  1602,  1181,   393, -1452,  1602,
   -1452,  1088,  1385,  1508,   950,  1538,  1174,  1175,  1190,  1342,
     136,  1602,   633, -1452, -1452, -1452, -1452,  1212,   176, 35933,
    1219,  1231, -1452, -1452,   340, -1452,  1283, -1452,   111, -1452,
   -1452,   980,   966,  1246, -1452, -1452, -1452, -1452,  1075,  1315,
   -1452,   229, -1452, -1452,   287, -1452, 36619, -1452, 20924, 36273,
   -1452,   306, 35678, 35065, -1452, -1452,   980,  1253, -1452,   835,
   -1452, -1452,    37, 35153, 34889,  5151, 36188, -1452, -1452,   966,
    1149,  1257,  1257,  1160, -1452,  1278, -1452, -1452,  1299,   145,
     958,   177, -1452, -1452,   494,  1269, -1452,  1194, -1452, -1452,
     810, -1452,  1313, -1452, -1452, 26850, 26969,   294,   903,   393,
   32589, 34446, -1452,   724,  1283, -1452, -1452, 32491, -1452, -1452,
    1341, -1452,   835, -1452, -1452, -1452,   835, 36358, -1452,   306,
   -1452, 27088, 27207,  1356,  1363, -1452,  1280, -1452,  1368, -1452,
   -1452,  2373,  1375,   839,    37, -1452, -1452, -1452, -1452,   -39,
     109,  1146, -1452, 27921, 28040, -1452,  1146, -1452, 28159, 28278,
    1146, -1452, 28397, 28516, 19106,  1493,  1283,  1117,   111, -1452,
   25345,  4175, -1452,   866, -1452, -1452,  1270,  1270, -1452, -1452,
    1373,   338, -1452,  1381,  1395, 35763,  1486,  1406,  1414, -1452,
   28635, -1452, 28754,  8400, 25418,  1270, -1452,   646, -1452, -1452,
   -1452, -1452, -1452,    80,   563,  1091,   374,   935,  1421, -1452,
   35417,  1425, -1452, 35504,  1443, 35591,  1461, 35848, -1452, -1452,
   -1452,   987, -1452, 26513,   835, -1452, -1452,  1488, -1452, -1452,
   -1452,  1497, -1452, -1452, -1452, -1452, -1452,   724,  1411,   636,
   -1452, -1452,  1512, -1452, 16071, -1452,   866, -1452,   131, 25491,
    1511,  1529,  1540,   370, 16203,  1545,    37,  1522,  1558, 16335,
    1653,  1565,  1569,    37, -1452, -1452,  1564,  1571,  1572,  1410,
   14346,  1602, 14619,  9924,  1602,  1602, -1452, 14751, 33998, -1452,
   -1452, -1452, -1452, -1452, 16467, 16599, 16731, 16863, -1452, -1452,
   -1452,   866, 16995, -1452, -1452, -1452, 17127, -1452, -1452,   169,
     169,   633,   515,   835,  1418,  1536, -1452, 36718,  4175, -1452,
   -1452, 34801, 26513,  1574, -1452, -1452, 21170,   190, -1452, 11267,
   -1452, -1452,  1164, -1452, -1452, 25564, -1452, -1452, -1452, -1452,
   36358,  1581, -1452, -1452, -1452, -1452, -1452, 31904, 36358, 21301,
      37, 32003, 36358, 26513,   169,   169,   169, 26513, 21416, -1452,
   -1452, -1452, 11411, 11605, 11743, -1452, -1452, -1452, -1452, 32294,
    1570,   116, 19237, -1452,   196, -1452,   564, -1452, 19368,  1575,
   -1452, 19499, -1452,  1543, -1452, -1452, 22863,  1567, 26513, -1452,
   -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452,
   25272,   207, -1452, -1452, -1452, -1452, 26513, 26513, 26513, 26513,
   26513, 26513, 26513,  1469,  1508, 26513, 26513, -1452, 26513, 25272,
   25272, 25272, 25272, 25272, 26513, 26513, 11880, 25272, -1452,  1568,
   -1452, -1452, 22936,  1573, 26513, 25272, 26513, 26513, 26513, 26513,
   26513, 26513, 26513, 26513, 26513, 26513, 26513, 25272, 25272, 25272,
   25272, 25272, 26513, 26513, 12017, 25272, -1452, -1452,   775,   646,
   36188, -1452, -1452, 33443, 35933, 35933, -1452, 20809, -1452, -1452,
   20809, 20809, 25272, 25272, 10802,   898,   581, -1452,   500,   135,
      62,   874,   204,  1578,  1582, -1452, -1452, -1452,   835, 31706,
   35065, -1452, -1452,    37,  1584,  1585,  1586, 32785,  1583,    37,
   31805,  2035, 21547,  1451, 35241, -1452, -1452,   866, -1452,   866,
   -1452, -1452, -1452,   866, -1452, -1452,  1587, -1452, -1452,   733,
   -1452, -1452,  2907,  2907,  1257,  1257, -1452,  1257,   212, -1452,
    1257,  1257, -1452, -1452,   778, -1452, -1452,   778, -1452, -1452,
     919, 25637,  1222, -1452, 26513,   531, -1452,  1457,   340,   724,
    1283, -1452, -1452,   844,   701, 31119, 18975,   416, -1452,   111,
   -1452,   111,  1270, -1452, -1452, -1452,  1588,   246,  1589,   249,
   -1452,   294, 32687, 20809, -1452, -1452,  1598, -1452, -1452, -1452,
   36273, 36273, 26513,    37, -1452, 30777,   134, -1452,   973,  1001,
    1593, -1452, 36273,    37, -1452, -1452, -1452,  1257, -1452, -1452,
   -1452, -1452, -1452,  4562,  1460, -1452, 19630, 36813, 19761, -1452,
   -1452, 14482, -1452, -1452, 35329, -1452, -1452,  1117,  1493, 25345,
   -1452, -1452, -1452, -1452, -1452,   866, -1452, -1452, -1452, -1452,
   -1452, -1452, -1452, -1452, -1452, -1452, -1452,  1368,   154,   208,
    1594, -1452, 28873, 28992,  1595, -1452, 29111, 29230, -1452,   670,
     419,   491,  1597,  1601,  1608, -1452,  1599,  1603,  1606,  1337,
     563,  1091, 34535, 25710,   563, -1452, -1452, 36018, -1452, -1452,
     646, -1452, -1452, 36018, -1452, -1452,   646, -1452, -1452, 36018,
   -1452, -1452,   646, -1452, -1452, 36018, -1452,   646, -1452, -1452,
   -1452, -1452, -1452, -1452, -1452,  1618,  1620, -1452,  1118,  1621,
    1622,   184, -1452, 19892, -1452, -1452, 17259,  1590,  1612, 17391,
   26513, 26513, -1452, 25783, 25856,  1623,  1633,  1634, 21860,  1637,
      37, 23009,  1887,  1464, 23082, -1452,  1689, -1452, -1452, 23155,
    1636, -1452, -1452, -1452,  1641,  1642, 23228, 14883,   169,  1646,
   26513, 26513,    37, -1452, -1452, -1452, -1452, 21951,   555, 25272,
   -1452,  1039, -1452, 26513, 12154, 12291, 25272, -1452, 26513, 12428,
    1512, 17523, 17655, 17787, 17919, -1452, -1452, -1452, 18051, -1452,
   -1452, -1452, 18183, -1452, -1452,   633,   633,  1649,  1652, 30895,
   31013,  4175, -1452, -1452,  1648, -1452,   798, -1452,   294,  1659,
   -1452, -1452, -1452, -1452, -1452, 32294,  1661,  1575, -1452,  1592,
   -1452, -1452, 23301,  1604, 26513,  1613, -1452, -1452, 23374,  1630,
   26513,  1662, 36520, 20809, 34268, 26513,  1669, -1452, -1452, -1452,
   -1452, -1452,   428,  1670,  1671,  1665,  1679, -1452, -1452, -1452,
   -1452, -1452, 32102, 23447,  1677,  1678,  1681, 26513,  1672, 32201,
    1680,   211,   149,   257,  1682,  1683, -1452,  1687, -1452,    37,
   -1452, -1452, -1452, -1452, -1452, 26513,   169,   266, 32882, 20023,
    1685, -1452, 25272, -1452,   269, 32976, 20154, -1452,   276, 33070,
   20285, -1452, -1452, -1452, -1452,  1215,  1688, -1452, -1452, -1452,
    6176,  5627, -1452, -1452,  1685, -1452, -1452, -1452, -1452, -1452,
   -1452,  1031,  1088,  1031,  1088,  1334,  1385,  1334,  1385,  1469,
    1508,  1469,  1508,  1469,  1508, -1452, -1452,   894,   950, -1452,
   -1452,   894,   950, -1452, -1452,  1478,  1538, -1452, -1452,  1069,
    1174, -1452, -1452,  1070,  1175,  1080,  1190,  1268,  1342, -1452,
      24, -1452, 23520,  1684,  6816,  1686, -1452, -1452, -1452, -1452,
   -1452,  1220, -1452, -1452, -1452, 23593,  8126, -1452, -1452, -1452,
   -1452, -1452, -1452, -1452, -1452,  1031,  1088,  1031,  1088,  1334,
    1385,  1334,  1385,  1469,  1508,  1469,  1508,  1469,  1508,  1469,
    1508, -1452, -1452,   894,   950, -1452, -1452,   894,   950, -1452,
   -1452,  1478,  1538, -1452, -1452,  1069,  1174, -1452, -1452,  1070,
    1175,  1080,  1190,  1268,  1342, -1452, 23666,  1690,  9132,  1691,
   -1452, -1452,    37,    37, -1452, -1452,   445,   998, -1452, -1452,
   -1452, 33537, 33631, -1452, -1452, -1452, -1452,   918, -1452, -1452,
   -1452, -1452, 23739,  1692, 10641,  1693, 23812,  1694, 22133,  1695,
     581, -1452, 20809, -1452, -1452, 20809, -1452,   808, -1452, -1452,
   -1452,   518, -1452, -1452,   462, -1452, -1452, -1452,  1518,  1706,
     724,  1283, -1452,  1696, -1452,   878,   526,  1144,  1697, -1452,
   -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452,
    1814, -1452, -1452, -1452, -1452, -1452, 20416, -1452,   613,   340,
     111,   340,   111, 26513, -1452,   863, -1452, -1452, -1452,  1704,
   -1452,  1587, -1452,  1575, -1452,  1521,   240, 20809,   284,   688,
   -1452, -1452, -1452, 29349, 29468,  1715, -1452,  2779, 36358, 36358,
   36358, 36358, 26513, -1452, -1452, -1452, -1452,   866, -1452, -1452,
   25929, -1452, 26002, -1452, -1452, -1452,  1525,  1460, -1452, -1452,
    1257, -1452, -1452, -1452, -1452, -1452,  1525,  1460, -1452, 26075,
   -1452, -1452, -1452, -1452, -1452, 18315, -1452, -1452,   222, -1452,
   -1452,   232, -1452, -1452, -1452, -1452, -1452, -1452,   563, -1452,
    1719,  1723, -1452,  1713,  1714,  1716, -1452, -1452, 31119, -1452,
   -1452, -1452, -1452, -1452, 26513,  1726, -1452, -1452, -1452, -1452,
     278, 33164, 20547, -1452, -1452, 21951, 21951, -1452, -1452, 23885,
   15015, 23958, 24031, 22042, 24104, 15147, 21860,  1721,  1722, 21860,
   26513, 26148,  1755, 24177,  1642, 22206,   169, 21860,  1732, 31511,
   21860, -1452,  1526, 24250, 22279, 24323, -1452, -1452, -1452, -1452,
   -1452,   108,   169,  1734,  1227, -1452, -1452, -1452, -1452, -1452,
   -1452,  1733,  1737,    37, -1452, -1452, -1452, -1452, -1452, -1452,
   36273, -1452, -1452,  1739,  1741, -1452, -1452, -1452, -1452, -1452,
   -1452, -1452, 12565, -1452, -1452, -1452,  1230,  1742, -1452, -1452,
   24396, 22352, -1452, -1452, -1452,  1232, -1452, -1452, -1452, 24469,
   22425, -1452, -1452,  1743,   884, -1452,  1744,  1745,  1746,  1736,
    1740, 20809,  1670,  1671, 34624,  1670, 26513, 20809, 26513,  1751,
   -1452, -1452, -1452, -1452, -1452,  1727, -1452, 26221, -1452, -1452,
    1747,  1748, 26513, 26513,  1750, 36436, -1452,    37,    37, 26513,
   -1452, 12702, -1452, -1452,   633, -1452, -1452, -1452, -1452, -1452,
   -1452, -1452, 12839, -1452, -1452, -1452, -1452, 25272, 12976, 13113,
   25272, 13250, 13387, -1452, -1452, -1452, 13524, 13661, 13798, 13935,
   -1452, -1452, -1452,   775,  1754,   430, -1452, -1452, 25272, 25272,
   25272, 25272, 25272, 25272, 25272, 25272,  1857,   929, 20809, -1452,
   -1452,  1762,  1257, -1452,  1706,   111,  1706,   111,  1766, -1452,
   -1452,  1764, -1452,   282, 33258, 20678, -1452,   724,   340,   340,
    1763,  1769, -1452, -1452, -1452, -1452,   992, -1452, -1452, 30777,
    1776, 30777, -1452, -1452,  1777, -1452,  1778, -1452,  2283, -1452,
   -1452,  2283, -1452, -1452, -1452,  2283, -1452, -1452, 18447, 18579,
   -1452, -1452, -1452, 30777, -1452, 30777, -1452, -1452, -1452, -1452,
   -1452, -1452,  1337, 24542, -1452, -1452, -1452, -1452, -1452, -1452,
   21860, 21678, 21860, 21678, 31220, -1452, 21951, 15279, -1452, -1452,
   21860, 21860, 24615, 21860, 24688, 21769,  1780, 22498, 24761,   172,
   18711, -1452, 26513, -1452, 31317, -1452, 31608, 21860, 22571, 26294,
     169,  1782,   169,   209,  1781, -1452,    37, 26513, 26513,    37,
   14072, 14209, -1452, -1452, -1452, -1452, -1452, -1452, -1452, -1452,
   -1452, -1452, -1452, -1452, -1452, -1452, -1452,  1030,  1670, -1452,
    1753,  1786,  1771,  1784,  1085,  1785,  1788, 20809, 26513, 21039,
   25345, -1452, -1452, -1452,  1789,  1791,  1795,  1796, 26513,  1808,
    1810,  1813,  1817, -1452, -1452, -1452, -1452, -1452, -1452, -1452,
   -1452,   287, -1452, -1452, -1452,   287, -1452, -1452, -1452, -1452,
   -1452,   287, -1452, -1452, -1452,   287, -1452, -1452, -1452,   287,
   -1452, -1452, -1452,   287, -1452, -1452, -1452,   287, -1452, -1452,
   -1452,   287, -1452, -1452, -1452, -1452,  1126, -1452, -1452,  1706,
    1706, 25272, -1452, -1452, 26513, 26513, -1452, 29587, 29706, 30777,
   29825, 29944, 36358, 36358, 18843, -1452, -1452, -1452, 30063, 30182,
   30301, 30420, -1452,  1840,  1843, -1452, -1452, -1452, -1452, 21860,
   26513, 26367,  1782, 15411, 15543, 22644, -1452, 31414, 21951, 24834,
   15675, -1452,   963,   614, -1452,   215,   169,  1816,   169,   535,
     538,  1823,  1271, -1452, -1452, -1452, -1452, -1452, -1452, -1452,
   -1452, -1452, -1452,  1148,  1818,  1824,  1825, 22717, -1452, -1452,
   -1452, -1452,  1826,  1829, -1452, -1452, -1452, -1452, -1452,  1822,
   -1452, -1452, -1452, -1452, 30539, 30658, -1452, -1452, -1452, 21860,
   21860, 24907, 22790, 21860, 24980, 21769,  1834, -1452, 21860, 26513,
   -1452, -1452, 21951, -1452, -1452,  1839,   169,   169, 26513,   169,
    1846,   169,  1239, -1452,   231,  1257,   550, -1452,   504, -1452,
    1836, -1452,    37, -1452, -1452, -1452, 26440, 25053, -1452, -1452,
   -1452, -1452, -1452, -1452,  1834, 21860, -1452, -1452, 25126, -1452,
   -1452, -1452, -1452,  1286,  1854,  1312, -1452,  1281,  1856,   169,
     169,  1858,   169, -1452, -1452, -1452, -1452,   535,   590, -1452,
   -1452, -1452, -1452, 21860,  1859, -1452,  1860,  1861,   169, -1452,
    1322,  1324, -1452,  1306,   579, -1452, -1452, -1452, -1452, -1452,
    1325,  1862,  1863,  1867,   169, -1452,  1873, -1452, -1452, -1452,
    1340, -1452,  1876, -1452
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1452,  1471,     8,    96, -1452,  1930, -1452, -1452, -1452, -1452,
   -1452, -1452,  1559,  1562,  -873, -1452,  -889,  -235,   217,   224,
    -868,  -850,  -812, -1452,  -522,  -486, -1452, -1452,  1576,  1577,
   -1452,  3946,  3895, -1452,  -288,   727,   752, -1452, -1452, -1452,
   -1452,  1609, -1452, -1452, -1452,  -582, -1415,   -52, -1452, -1452,
   -1452, -1452,   367,  2190,   -91,   -42,  -126,  -743, -1452,  -753,
   -1452,  -755, -1452,  1093,   -85,  1221,  -699,     6,  1757,    22,
    1760,    74,     0, -1452,  1168,   557,  5797,  7218, -1452,  3447,
   -1452,  -625,  -727,   634,  4002,  1717, -1452,  -308,   418,   487,
      -8, -1452,   453,   -57,    12,   -23,    29,    31,  1871,  8844,
    2196,  -232,  9057,    61,  2091, -1452,   648,  4805,  1718,  -303,
     561,   578,   432,   484,   243,   115,   182,   271,   321,  3401,
     745,  -471,  8386,   467,   391,   253,  7489,   -60,  1119,  -125,
    1462,  7886,  6474, -1452, -1452, -1452,   -31,   -59,    -7, -1452,
    5916, -1452,   639,  1407,   623,  -331,  2679,  6931, -1452,  8443,
   -1452, -1452, -1452,   -22,  3064, -1452, -1452,  2268,  1833,    -3,
   -1452, -1452,  1317,  1625,  1358,  1738,   -45,   -43,  9549,  5872,
   10178,  -310,  -113,  2604, -1452, -1452,  1013, -1452,  3069,  -512,
   -1067, 10120,  -343,  -640,   -35,  1404,  -328,  1099,  -485,  -470,
    -848,  -839,   216,  1104,  1170,   -55,  1794,  -657,  1362,  -274,
    -161,  1605, -1452,  -503,  -468,  5774,  -321,    56, -1103, -1452,
   -1452, -1452,  1940, -1452,   107,  1951,   -40,   699,  -107,  1799,
    1065,  1067, -1452, -1452, -1452,   -80,   -37, -1451,    28, -1452,
   -1452, -1452,    59, -1452,  1954,   -18,    66,  1953,  1579, -1452,
   -1452, -1452,  1962,  -741,   397, -1452,  -737,   904, -1452, -1452,
   -1452, -1452
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1247
static const yytype_int16 yytable[] =
{
      58,  1052,  1144,  1381,   714,   932,   241,   357,   684,   715,
     963,   970,  1382,   974,   461,  1252,   464,   157,   158,   931,
     933,  1148,  1326,   171,  1325,  1636,  1331,  1434,  1330,  1444,
     102,   104,  1319,   787,  1324,   195,  1320,   196,  1329,   451,
       1,   109,   165,   165,  1440,   964,   115,   250,  1436,   242,
    1446,   357,   473,   126,   478,   802,   482,   469,   135,   491,
     138,   124,  1758,   256,   134,  1592,  1437,  1595,  1447,   252,
     159,  1185,   257,   545,  1769,   901,   149,   156,   115,   710,
     183,   902,   115,     1,   248,   115,   492,    58,   452,   105,
     459,   258,     1,   737,    58,    58,   103,   745,   266,   154,
     528,   474,   862,   479,  1438,   483,  1448,   348,   110,   246,
     351,  1770,  -207,   269,     1,   347,   255,  1251,   735,   115,
     115,   269,   369,   868,   870,   547,   135,   427,   440,   493,
     427,   689,   560,   604,   454,  1415,   456,     1,     1,   456,
     440,   106,   470,   427,   440,   427,   826,   427,  -475,   125,
    1424,   155,   628,   763,   269,  1456,   135,     1,   565,   527,
    1168,   247,   134,   115,   115,   269,  1175,   267,   268,  1179,
     962,   271,   148,   501,   100,  1770,  1341,   269,   829,     1,
     558,   500,   902,   135,  1406,   508,   494,     1,   157,   158,
     546,  1107,    45,   149,   517,   513,  1169,  1170,   157,   158,
     165,   566,  1176,   611,   115,  1180,   514,   115,  1194,  1459,
     460,     1,  1916,   165,   269,   529,   269,   100,  1979,   530,
     250,  1354,   629,  1722,  1771,  1187,    46,   256,   903,   256,
     453,   944,  1772,  1724,  2020,   551,   257,   736,   257,  1166,
     589,   159,   252,   776,   620,   548,   735,  1401,   622,   561,
    1403,   690,   789,   464,   777,  1416,   981,   631,    58,   987,
      58,   993,   269,   998,   623,     1,   827,  -108,   612,  1617,
     -99,  1187,   764,   970,   974,  1457,   634,  -103,   651,   -81,
    1444,   963,   630,   -88,   651,  1076,  1080,  1444,  1902,   148,
       2,  1444,   767,   501,   792,  1440,  1772,     1,   690,   616,
    1489,  1446,  1440,  -997,   763,  -997,  1440,  1901,  1446,   723,
     621,   690,  1446,  -479,  -479,  -479,   964,  1171,  1343,  1447,
     816,   818,   820,   822,   902,  1917,  1447,  1616,  1171,  1460,
    1447,  1980,   626,  1918,   247,  1976,  1164,   295,   107,  1981,
    1723,     1,   893,  -649,   945,   563,   567,  2021,   135,   769,
    1725,  1976,   893,  -644,  1695,  2022,   115,  1448,   115,  1059,
     780,   681,  1066,   817,  1448,   782,   823,   827,  1448,   982,
     690,  1022,   988,   776,   994,   975,   999,  1618,   791,   470,
       1,   947,   794,   517,   136,  1567,   866,  -108,   196,   805,
     -99,  1576,   806,   769,   794,   813,   769,  -103,  1697,   -81,
     739,   740,   741,   -88,   902,     2,   132,   133,  1195,  1197,
    1199,   934,   357,  1196,  1198,  1200,   691,   534,   122,   952,
     528,   956,   684,   783,  1584,   427,   427,   135,     1,  -479,
     855,   183,  -479,   115,   115,   269,     1,   881,  1259,  1261,
    1263,   962,   885,  1260,  1262,  1264,   149,   886,     1,   684,
     123,   427,   427,     2,   935,   172,  1351,   684,   931,  1468,
     691,   165,   165,   899,   900,     1,   173,  1366,   953,  1470,
     957,   131,  1353,   427,   427,     1,  1358,   684,   427,   427,
     969,   141,   427,   427,  1586,  1023,   115,  1566,   115, -1009,
   -1009,  1491,   531,  1575, -1009,   830,   115,   115,    26,   147,
       2,   135,  1605,     1,  1471,   769,   456,     1,   742,  1614,
     427,   531,   427,   959,   501,   115,   743,   135,     1,   744,
    1091,     1,   966,   115,   145,   115,  1798,  1492,   897,     1,
     980,  1396, -1034,   986,     1,   992,   535,   997,     1,   530,
      45,     1,   148,  1124,  1011,   132,   133,   506,  1864,   868,
     870,  1405,  1010,     1,   862,   484,  1188,   115,     1,  1397,
     127,  1398,   128,  1652,   503,  1653,    98,   611,   611,   611,
     611,   157,   158,  2026,  1033,   534,  1040,  1985,  1672,  1145,
    1319,  1319,     1,  1053,  1320,  1320,   536,  1331,  1540,  1666,
    1092,  1093,  1545,     1,   512,  1547,  1451,  1549,   563,  1329,
     256,  1716,   146,  1444,   589,   589,   589,   589,  1985,   257,
    1717,   533,   831,    99,   832,   650,     1,   205,  1440,   269,
     265,  1587,   135,  1088,  1446,  2025,   532,   132,   133,  2026,
     533,   517,   612,   612,   612,   612,  1098,   484,   269,    69,
    1670,  1187,  1447,   132,   133,  1538,  1667,  1187,  1680,     1,
    1121,  1323,  1985,  1386,  1989,  1323,  1588,  1126,  1136,   501,
    1146,  1126,  1136,   616,   616,   616,   616,  1707,  1098,  1915,
     658,  -876,   224,     1,  1225,  1702,   662,  1705,   972,  1159,
    1448,  1435,  1441,  1445,  1172,  1085,  1086,    28,   270,   973,
   -1034,  1173,    32,  1182,   535,  1494,   784,  1189,  1498,    38,
    2055, -1040,  1291,  1476,   377,   537,  2045,   514,  1696,  1479,
    1233,   563,   567,  1077,  1081,  1480,   161,  1209,  1211,  1087,
    1213,  1481,     1,    43,    44,    45,    69,     1,    46,  1978,
    1151,  1152,  1153,    69,    69,   563,  1537,   854,  1299,  1249,
    -481,  -481,  -481,  1254,  1229,  1273,  1275,  1277,  1279,   724,
    1076,  1080,  1076,  1080,  1374,  1375,   497,  1376,   132,   133,
    1378,  1379,  1561,  1235,   464,   464,  1237,   968,  1314,   135,
    1317,  1417,  1295,   769,   769,   769,   464,  1327,     1,  1583,
     369,  1327,   132,   133,   183,  -479,  -479,  -479,   899,   900,
    -876,  1301,   845,   848,  1303,     1,  1444,   269,   149,  1347,
     517,     1,  1698,  1053,  1413,  1408,  1409,   517,   902,  1363,
    1365,  1440,  1367,  1982,   769,  1984,  1477,  1446,   845,   848,
       2,   505,  1018,  1458,  1461,  1307,     2,  1426,  1468,   509,
     527,   638,   379,   521,  1482,  1447,    45,   380,     1,    46,
     845,   848,     1,  1333,  1337,   845,   848,  1230,   638,   845,
     848,   341,   115,  1414,  1177,   135,  -481,  1622,   776,   115,
     115,   510,  1623,     2,  1684,  1395,     1,   897,   511,   115,
    1427,   115,  1399,  1448,  2013,  1296,  2015,  -207,  2017,   840,
     841,   135,   855,   369,   684,  -207,   538,   161,  1312,  1313,
     470,   470,  1797,   456,   148,   427,   456,   161,  1804,    69,
    1685,  -479,   470,  1425,   850,   967,   725,   726,   640,   539,
     693,   694,   695,   650,   349,  1234,  2040,  2041,   502,  2043,
     541,  1668,   643,    32,   115,   640,  -480,  -480,  -480,  -207,
    1669,   842,   677,  1441,  1445,  2050,   976,   564,   568,   643,
    1441,  1445,   378,  1300,  1441,  1445,   543,    -8,   456,   456,
       1,  2060,   427,   427,    43,    44,   427,   427,  1819,   135,
    1017,  1779,   753,   754,   544,  -268,  -268,  -268,  1393,  1866,
    1720,   115,   183,   501,  1226,   132,   133,   769,  1692,   611,
     135,  1473,   611,   769,   931,  1721,   135,   618,  -207,   769,
    1000,  1668,   135,  1342,  -207,   769,   691,   135,  1791,   451,
    1679,     1,  1292,   100,   780,  1236,   632,   727,   728,    28,
      45,   135,    26,   784,    32,  1001,   589,    98,   696,   589,
     611,    38,   851,  1949,   514,     1,   697,   100,  1033,   698,
    1040,  1002,  -207,  1302,   611,   611,   611,   611,  -207,  1522,
     691,   341,  -480,  1865,   612,    43,    44,   612,   452,   780,
   -1008, -1008,  1535,   101,  1551, -1008,  1238,   589,  1189,   132,
     133,  1003,  1004,   755,   756,     1,   129,   100,   650,   521,
     130,   589,   589,   589,   589,   616,   828,  -268,   616,  1975,
    1397,  -268,  1398,  1976,  1304,   612,   778,  1977,   688,   427,
     427,  1800,  1418,   619,     1,   659,   769,  1419,   135,   612,
     612,   612,   612,  1005,  1554,   769,  1876,  1385,  1933,  1564,
     132,   133,   780,  1569,  1531,  1573,   616,   660,  -897,  1578,
    1420,  1000,  1811,   369,   183,  1421,  1801,  1541,  1542,  1543,
     616,   616,   616,   616,   489,  1731,   663,  1201,  1203,  1956,
    1957,   664,  1599,   716,  1925,  1411,  1001,     1,   665,  1599,
     780,   666,  1936,  -479,  -479,  -479,   667,  1210,  1212,   135,
    1214,  1825,  1002,   717,   718,    28,  1545,  1265,  1267,  1549,
      32,  1115,  1116,  1117,  1737,  1739,   691,    38,  1077,  1081,
    1077,  1081,  1217,  1221,  1749,  1274,  1276,  1278,  1280,   779,
     564,  -897,  1003,  1004,  1920,   780,  -897,   731,   563,  1930,
     746,    43,    44,  -897,   732,   780,   513,    28,  1205,  1207,
    1283,  1287,    32,  1218,  1222,   733,  1323,   514,  -881,    38,
     747,   748,   139,  -881,   140,     1,  1475,  -897,  -897,   923,
    -881,  1309,  1624,  1885,  1485,  -897,  -897,  -897,  1269,  1271,
    1948,  1284,  1288,    43,    44,  1384,   780,   931,  1886,  1335,
    1339,  -993,   490,  -993,  -881,  -881,  1441,  1445,   143,   502,
     144,  -479,  1993,   834,   835,   142,   691,   815,   780,  -479,
     161,   224,  -479,     1,  -752,  1103,  -752,  1508,   821,  1118,
    1202,  1204,   224,  1410,   734,   836,     1,  1119,   341,   837,
    1120,   838,  1323,  1704,  1323,  1706,    28,   738,   677,  1206,
    1208,    32,   759,   564,   568,  1078,  1082,  1103,    38,   760,
    1266,  1268,  1650,  1651,   502,   839,  1654,   135,  1162,   845,
     848,   769,   769,   845,   848,   761,  -207,   564,   766,  1270,
    1272,  1631,    43,    44,    45,  1632,  1643,    46,  1383,   931,
    1632,   774,  1327,  1775,    28,   369,  1783,  1776,  1787,    32,
    1632,  1671,  1632,   775,  1535,  2018,    38,    28,   762,  1976,
     115,   115,    32,  2019,  1474,   777,  1681,   135,   803,    38,
     684,   684,   684,   684,   684,   684,   684,   684,  1590,   224,
      43,    44,    45,  1655,   455,    46,     1,  1991,   115,   833,
     115,  1992,   115,    43,    44,   135,   824,  2037,    46,   892,
    1611,  1976,  2034,  1714,    86,  2038,  1976,   369,   341,   521,
    2028,    28,   341,   427,   427,  1507,    32,   825,  1703,  1703,
    1703,  1703,  2053,    38,   464,  1898,  1976,   923,  2036,  -207,
    2054,   843,  1976,   923,   781,  -207,   923,   691,  2051,   521,
    2052,  2056,  1976,  1732,  1976,  1976,   521,    43,    44,  1441,
    1445,   677,  1720,   521,   883,   341,  2062,   462,   611,   611,
    1976,   475,    60,   719,   720,    28,   931,  1721,   611,   890,
      32,    48,  -655,  -654,  -655,  -654,   891,    38,   517,   721,
     722,   166,   341,   495,   498,   496,   496,   946,   893,     1,
     341,    86,   729,   730,  -899,   589,   589,   896,   259,    86,
     940,    43,    44,  1033,   521,   589,  1033,   359,   941,  1033,
     341,  2031,  1885,  1522,   749,   750,  1589,  1033,   751,   752,
    1033,   521,   942,   612,   612,  -881,   931,  1886,   948,  1014,
    -881,   496,   691,   612,  1057,   444,   949,  -881,  1610,    60,
    1089,   977,   128,  1053,  1181,   983,     1,   444,   153,    60,
     470,   444,   757,   758,   616,   616,    60,    60,    48,  1370,
    1372,  -881,  -881,   989,   616,    48,    48,  -899,  1188,  1248,
       1,     1,  -899,   691,  1253,  1387,     1,  1388,  1431,  -899,
    1432,   995,  1759,   684,  1371,  1373,   691,  1971,  1517,  1974,
     442,   369,  1868,  1563,   183,     1,   923,   369,  1773,   502,
     936,   938,   442,  -899,  -899,  1568,   442,     1,  1877,  1012,
    1880,  -899,  -899,  -899,  1572,  1159,     1,  1820,  1821,  1013,
     699,   700,   701,   702,   703,   704,   705,   706,   707,   708,
    1015,  1577,  1888,     1,  1890,  1019,  1673,   502,  1388,  1694,
    1041,  1388,   555,  1429,  1020,  1430,  1691,  1709,   691,  1712,
    1762,  2010,   166,  1314,  1710,  1021,  1713,  1878,  1090,  1881,
    1039,   923,   627,   923,   259,   516,   937,   939,   369,  1071,
    1073,  1072,  1074,   261,   264,   115,  1042,   115,  1321,  1322,
    1050,  1889,  1054,  1891,  1051,   655,  1165,   115,  2029,  1055,
    1056,   655,  1095,  2030,  1123,  1345,  1177,    18,    19,   427,
    1344,   427,  1355,  1356,  1357,  1362,  1400,  1402,  1369,   611,
      60,  1407,  1422,  1462,  1495,  -747,  -750,  1463,   502,   153,
      60,   709,    60,   427,  1464,   427,  1465,    28,    29,   153,
    1466,    48,    32,  1467,  1483,  1484,  1496,  1487,  1488,    38,
    1033,  1033,  1033,  1033,  1559,  1518,   589,  1509,  1510,  1511,
    1033,  1033,  1513,  1033,  1526,  1033,  1323,  1323,   923,  1527,
    1528,  1532,  1550,    43,    44,   379,  1552,  1033,  1048,   502,
    1078,  1082,  1078,  1082,   612,  1555,  1053,  1562,  1581,  1535,
     845,   848,  1591,   555,  1690,  1594,  1124,   801,  1954,   797,
     564,  1596,  1597,  1607,  1608,   341,   341,  1609,  1612,  1620,
    1615,   797,  1619,  1621,  1633,   616,  1626,   369,  1639,   501,
    1642,  1756,  1678,  1682,  1647,  1649,  1659,  1661,  1663,  1665,
    1693,  -479,  -479,  -479,  -479,  -479,  -479,  -479,  -479,  -479,
    -479,  -479,   173,  1699,   861,  1726,  1913,  1955,  1913,  1727,
    1728,  1729,  1734,  1730,   442,  1750,  1751,  1760,  1777,  1803,
    1774,  1806,  1778,  1808,   889,  1780,   442,  1781,  1784,  1790,
    1792,  1793,  1794,  1795,  1807,  1815,  1817,  1796,  -232,  1926,
     502,   611,  1863,   611,  1812,  1813,  1818,   427,   427,   427,
     427,   427,  1703,  1703,  1867,  1871,  1872,  1874,   427,   427,
     427,   427,   502,  1875,  1879,  1900,  1882,  1883,  1928,  1033,
    1914,   516,  1927,  1919,  1959,  2023,  2024,  1960,   589,   442,
     589,  1929,  1931,   194,   923,  1932,  1938,   341,  1939,  1053,
    1535,   923,  1940,  1941,  1944,   923,  1945,  -479,  -479,  1946,
      51,    18,    19,  1947,  1983,   611,   612,  -479,   612,  1990,
    2001,  1996,  -479,  -479,  -479,  1994,  -479,  -479,  -479,  -479,
    -479,  1995,  2006,  1999,   427,   427,  2000,  2011,  2027,  1033,
    1033,    28,    29,  1033,  2016,  1033,    32,   616,  1033,   616,
    2035,   108,   589,    38,  2039,  2044,  2042,  2047,  2048,  2049,
    2057,  2058,  1913,    51,  1913,  2059,  1535,  1802,  1053,  1805,
     137,  2061,  1053,   371,  2063,  1423,   874,    43,    44,   875,
     612,  1328,  1516,  1814,  1816,  1033,  1377,    51,   669,   670,
      51,  1686,  1412,   876,   877,   624,   225,    51,   625,   810,
    1149,  1486,   661,  1452,    51,    51,  1937,  1053,  1535,   559,
    1157,   616,  2012,  1033,   260,   627,   867,    51,   249,   605,
     350,   251,  1913,  1913,  1053,  1913,   880,  1913,   263,   253,
    1862,     0,   362,     0,     0,     0,     0,   399,   225,     0,
     399,  1935,     0,     0,  1130,  1140,     0,     0,  1130,  1140,
     225,  1943,   225,   399,   225,   399,     0,   399,     0,    18,
      19,     0,     0,     0,     0,  1913,  1913,     0,  1913,     0,
       0,     0,     0,    60,     0,     0,   225,     0,     0,     0,
       0,     0,   153,   399,  1913,     0,     0,  1097,     0,    28,
      29,     0,     0,     0,    32,   507,     0,   521,     0,     0,
    1913,    38,     0,     0,    51,     0,     0,  1951,  1953,     0,
       0,   923,     0,     0,     0,     0,     0,     0,   502,  1097,
       0,   371,     0,     0,     0,    43,    44,    45,     0,     0,
     371,     0,     0,     0,     0,     0,   371,     0,     0,     0,
       0,     0,     0,     0,     0,   225,     0,     0,   225,   225,
     362,     0,     0,     0,     0,   923,     0,   923,    51,     0,
       0,     0,   770,     0,     0,     0,     0,     0,    51,   225,
      51,     0,     0,     0,   923,     0,     0,     0,     0,  1934,
       0,     0,     0,     0,  1352,     0,  1350,     0,   225,  1942,
       0,     0,     0,     0,   225,     0,   800,  1350,   429,     0,
       0,   429,     0,   399,     0,     0,   807,     0,     0,   814,
       0,     0,     0,     0,   429,     0,   429,   923,   429,     0,
       0,   516,     0,     0,   845,   848,     0,   845,   848,   371,
       0,     0,     0,     0,   677,   845,   848,   845,   848,     0,
       0,   442,     0,     0,   865,  1950,  1952,     0,     0,     0,
     882,   516,   442,     0,     0,     0,     0,     0,   516,    51,
       0,     0,     0,     0,     0,   516,   861,     0,     0,     0,
    -479,     0,     0,  -479,  -479,  -479,  -479,  -479,  -479,  -479,
    -479,     0,   326,     0,     0,     0,   225,     0,   362,   225,
       0,     0,   225,    51,     0,     0,     0,     0,     0,   804,
       0,   845,   848,    51,   225,     0,    51,     0,  1450,     0,
       0,   555,     0,     0,     0,     0,   516,     0,   194,     0,
       0,   502,     0,   502,     0,     0,   194,     0,     0,     0,
       0,     0,   341,   516,   235,   399,   399,   502,   502,     0,
      51,    51,     0,   194,   341,     0,   194,   399,   194,     0,
     194,     0,   884,     0,   894,     0,  -670,   225,     0,     0,
       0,   399,   399,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -479,  -479,     0,     0,
       0,     0,     0,   399,   399,     0,  -479,     0,   399,   399,
       0,     0,   399,   399,   362,  -479,  -479,  -479,  -479,  -479,
       0,   225,     0,     0,     0,     0,     0,     0,     0,     0,
     923,     0,     0,     0,   235,    51,   592,     0,     0,     0,
     399,     0,   399,    51,   399,     0,     0,  -670,   677,     0,
       0,     0,  -670,     0,     0,     0,     0,     0,     0,  -670,
      51,     0,     0,    51,     0,    51,     0,    51,     0,     0,
       0,     0,     0,     0,    51,     0,     0,     0,     0,     0,
       0,     0,     0,  -670,  -670,  -670,     0,     0,  -670,     0,
       0,   895,   687,   893,  -670,     0,     0,     0,     0,     0,
       0,     0,     0,   371,     0,     0,   235,   235,   235,     0,
       0,     0,     0,     0,     0,     0,   429,   429,     0,     0,
       0,     0,   341,   341,     0,     0,     0,   235,     0,   555,
       0,     0,     0,     0,   362,   362,   362,   362,     0,     0,
       0,     0,   429,   429,     0,     0,     0,     0,     0,  1603,
       0,     0,     0,   502,     0,     0,  1603,   225,   225,     0,
       0,    51,     0,   502,   429,   429,   399,  1553,     0,   429,
     429,     0,     0,   429,   429,     0,  1556,     0,     0,     0,
     225,     0,     0,     0,     0,     0,     0,   225,   225,   399,
       0,   225,   225,     0,     0,     0,     0,     0,   399,     0,
       0,   429,     0,   429,    82,     0,   770,   770,   770,    51,
       0,     0,   362,     0,     0,   846,   849,   194,   362,   502,
     502,   362,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   846,   849,     0,     0,     0,     0,     0,   371,     0,
     119,   371,   371,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   846,   849,     0,     0,     0,   846,   849,
       0,     0,   846,   849,     0,     0,     0,     0,     0,    70,
       0,   163,   119,     0,     0,     0,   930,     0,     0,   207,
       0,    82,     0,     0,     0,     0,     0,     0,    82,    82,
      51,     0,     0,    51,    51,    51,     0,   362,     0,     0,
     362,   362,     0,     0,    51,     0,     0,     0,     0,     0,
       0,     0,     0,   341,   358,   360,     0,     0,     0,   225,
      51,   433,     0,     0,   433,     0,     0,    51,     0,  1009,
     225,   341,   399,     0,    51,     0,     0,   433,     0,   433,
       0,   433,   924,     0,   371,     0,    70,     0,     0,   235,
       0,     0,     0,     0,     0,     0,    70,     0,   488,   360,
     592,     0,     0,    70,    70,     0,     0,     0,     0,     0,
    1700,     0,  -659,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    51,     0,     0,   523,     0,
     592,   592,   592,   592,     0,   194,     0,   445,     0,     0,
     194,     0,    51,   362,     0,     0,  1478,     0,     0,   445,
     225,   225,  1478,   445,     0,   399,     0,     0,   194,     0,
       0,     0,   225,     0,     0,     0,     0,     0,     0,   557,
       0,     0,     0,     0,     0,     0,   362,   225,   362,     0,
       0,     0,   163,  -659,   225,     0,     0,     0,  -659,  1150,
       0,     0,    82,  1154,    82,  -659,     0,     0,     0,     0,
       0,     0,   235,   235,   235,   235,     0,     0,     0,     0,
       0,     0,   399,   399,     0,     0,   399,   399,     0,  -659,
    -659,  -659,   687,     0,  -659,   235,   235,  1701,     0,   893,
    -659,     0,    51,   399,     0,     0,  1193,    51,   272,     0,
       1,   273,   100,    51,     0,     0,     0,     0,  1122,    51,
       0,     0,     0,   429,   429,    51,     0,    70,     0,     0,
       0,     0,     0,  1247,     0,     2,     0,    70,   687,    70,
       0,  1258,     0,   362,     0,     0,     0,     0,     0,   516,
     924,     0,     0,     0,     0,     0,   924,   194,     0,   924,
     358,  1311,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,     0,     0,     0,     0,     0,   278,   279,
     785,     0,     0,     0,     0,     0,   429,   433,     0,     0,
       0,     0,   282,     0,   371,     0,     0,     0,     0,   119,
       0,   362,   362,   362,   362,   283,     0,     0,     0,   284,
     285,   286,   287,   288,   289,   290,     0,     0,     0,   399,
     399,   225,   645,     0,     0,     0,    51,     0,     0,   433,
     433,     0,   295,   296,   859,    51,     0,     0,   871,     0,
       0,   433,     0,   429,   429,     0,     0,   429,   429,     0,
       0,     0,   225,   362,    51,   433,   433,     0,     0,     0,
       0,   445,     0,     0,    76,     0,     0,     0,     0,     0,
       0,     0,   225,   445,     0,     0,     0,   433,   433,   225,
       0,     0,   433,   433,     0,     0,   433,   433,     0,     0,
     358,     0,     0,     0,     0,     0,     0,     0,   225,   362,
     119,   119,     0,     0,     0,   225,   362,     0,     0,   225,
     362,     0,     0,     0,   433,     0,   433,   523,     0,   119,
       0,     0,     0,     0,     0,   930,   445,     0,     0,   358,
       0,   360,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    76,   846,   849,     0,     0,   846,   849,     0,     0,
       0,    76,     0,     0,   770,   770,     0,     0,    76,    76,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     429,   429,     0,     0,   924,   924,   924,     0,     0,     0,
       0,     0,   446,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   446,     0,     0,     0,   446,     0,
       0,     0,   592,   371,     0,   592,   371,     0,     0,     0,
       0,     0,     0,     0,   592,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    82,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1533,  1534,     0,     0,
       0,    51,    51,   592,     0,  1193,     0,     0,     0,  1544,
       0,  1132,  1258,     0,  1548,  1132,     0,   592,   592,   592,
     592,     0,   362,     0,     0,   362,     0,     0,   371,     0,
       0,   924,     0,   785,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   371,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   687,   598,
      70,     0,    76,     0,   687,     0,   362,     0,     0,     0,
       0,     0,    76,     0,    76,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   362,     0,   235,
     235,   235,   235,   399,   399,     0,     0,     0,   225,   225,
     225,   225,     0,     0,     0,     0,     0,     0,     0,   235,
       0,     0,     0,     0,     0,     0,     0,     0,  1628,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   785,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   785,   433,     0,     0,     0,    51,     0,
       0,  1360,     0,     0,   785,     0,   557,     0,     0,     0,
       0,   225,   362,     0,     0,     0,     0,   194,     0,     0,
       0,     0,     0,     0,     0,     0,   924,   924,     0,     0,
       0,     0,     0,   924,   924,     0,   798,   924,   924,     0,
       0,     0,     0,     0,     0,     0,   119,     0,   798,     0,
       0,     0,   371,     0,  1392,     0,     0,     0,   371,   523,
       0,     0,     0,     0,     0,     0,   119,     0,   445,     0,
     225,     0,     0,     0,     0,     0,   859,     0,     0,   445,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   433,
       0,     0,     0,     0,   429,   429,     0,     0,     0,   371,
     371,   798,   371,   371,     0,     0,     0,   371,   371,   371,
     371,   362,     0,   374,    51,     0,     0,   362,   859,   371,
     371,   371,   371,   371,   371,   371,   371,     0,     0,   371,
       0,     0,     0,     0,     0,    51,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   433,   433,     0,     0,
     433,   433,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   360,   428,   358,     0,   428,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     428,     0,   428,     0,   428,     0,     0,     0,   362,     0,
       0,     0,     0,   846,   849,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   225,   362,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   399,
       0,   399,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1035,     0,     0,     0,     0,     0,     0,
       0,   930,     0,   399,   924,   399,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   374,     0,   598,   598,   598,   598,     0,   371,     0,
     374,     0,     0,     0,     0,     0,   374,   590,     0,     0,
       0,   592,   592,   433,   433,    76,     0,     0,     0,   592,
       0,   592,   592,     0,     0,   592,     0,     0,     0,   785,
       0,     0,     0,   592,     0,     0,   592,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   785,     0,  1132,     0,
       0,     0,     0,     0,     0,     0,     0,   362,     0,   399,
       0,     0,   371,     0,     0,     0,  1132,     0,     0,     0,
       0,     0,     0,  1132,     0,     0,     0,     0,     0,   924,
     924,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   374,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     429,     0,   429,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   930,     0,     0,     0,   399,   399,   399,
     399,   399,   225,   225,   429,  1822,   429,     0,   399,   399,
     399,   399,     0,     0,     0,     0,     0,     0,  1628,     0,
       0,     0,     0,  1544,     0,     0,  1548,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   798,     0,     0,     0,     0,     0,     0,
       0,     0,   428,   428,   798,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   399,   399,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   428,   428,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   930,     0,     0,     0,     0,     0,
     428,   428,     0,     0,     0,   428,   428,     0,     0,   428,
     428,   921,  1394,     0,     0,     0,   592,   592,   592,   592,
       0,     0,   592,     0,     0,     0,   592,   592,     0,   592,
       0,   592,   924,   924,     0,     0,     0,   428,     0,   428,
       0,     0,     0,   592,     0,  1677,     0,     0,   429,   429,
     429,   429,   429,  1921,  1922,     0,     0,     0,     0,   429,
     429,   429,   429,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1687,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   930,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   433,   433,     0,
       0,   590,   411,     0,     0,   411,     0,     0,     0,     0,
       0,     0,     0,   374,     0,     0,     0,     0,   411,     0,
     411,     0,   411,     0,     0,   429,   429,     0,     0,     0,
       0,   590,   590,   590,   590,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   846,   849,     0,
     846,   849,     0,   410,     0,     0,   410,     0,   846,   849,
     846,   849,   523,     0,     0,  1035,     0,     0,  1035,   410,
       0,   410,     0,   410,     0,   592,     0,  1035,     0,     0,
       0,     0,     0,     0,   592,     0,   592,     0,   311,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   370,     0,  1035,     0,     0,   921,
       0,     0,     0,   930,     0,   921,     0,     0,   921,     0,
     598,   598,   598,   598,   846,   849,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   592,   592,     0,     0,   592,
       0,   592,     0,     0,   592,     0,     0,     0,   592,   637,
       0,     0,     0,     0,  2014,   370,   562,     0,   374,     0,
       0,   374,   374,     0,     0,     0,   637,     0,     0,     0,
       0,     0,   930,   930,     0,     0,     0,     0,     0,     0,
       0,   592,     0,     2,   175,   176,   177,   178,   179,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    18,
      19,   218,   219,    22,    23,    24,     0,     0,     0,   592,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   220,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     221,    38,   222,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   370,     0,     0,   223,     0,   646,   648,   428,
     428,   370,     0,     0,   374,    43,    44,   370,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   224,   311,     0,
       0,     0,     0,   433,     0,   433,     0,     0,     0,     0,
       0,     0,     0,     0,   370,     0,     0,     0,     0,   370,
     411,   411,     0,     0,     0,     0,     0,   433,     0,   433,
       0,     0,   879,     0,     0,     0,   360,     0,     0,     0,
       0,     0,   428,     0,     0,     0,   411,   411,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   921,     0,   921,     0,     0,   411,   411,
       0,   410,   410,   411,   411,     0,     0,   411,   411,     0,
     370,     0,     0,   878,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   410,   410,   428,
     428,     0,     0,   428,   428,   411,     0,   411,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   410,
     410,     0,     0,     0,   410,   410,     0,     0,   410,   410,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   410,     0,   410,     0,
     921,     0,     0,   590,     0,     0,   590,     0,     0,     0,
       0,     0,     0,     0,     0,   590,     0,     0,     0,     0,
       0,   433,   433,   433,   433,   433,   370,     0,     0,     0,
       0,     0,   433,   433,   433,   433,     0,     0,     0,     0,
       0,     0,     0,     0,   590,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   370,     0,   590,   590,
     590,   590,     0,     0,   374,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   428,   428,     0,     0,
       0,     0,     0,     0,     0,   311,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   433,   433,
       0,     0,     0,  1428,  1035,  1035,     0,     0,     0,     0,
       0,   370,  1035,     0,  1035,  1035,     0,     0,  1035,     0,
       0,     0,     0,     0,     0,     0,  1035,     0,     0,  1035,
     -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,
     -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,
     -65,   -65,   -65,     0,     0,     0,   921,     0,     0,     0,
       0,     0,     0,   921,     0,     0,     0,   921,   -65,     0,
       0,     0,     0,     0,   370,     0,   -65,   -65,  1099,     0,
       0,   -65,     0,     0,     0,     0,     0,   -65,   -65,   -65,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -65,     0,     0,   311,     0,     0,     0,   311,
    1155,     0,   -65,   -65,     0,     0,     0,     0,     0,     0,
    1429,     0,  1430,   -65,   370,     0,     0,     0,     0,     0,
     370,     0,     0,   370,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   311,     0,     0,     0,     0,     0,   370,   370,
     370,   370,   370,   370,   370,     0,     0,   370,   370,     0,
     370,   370,   370,   370,   370,   370,   370,   370,     0,   311,
       0,     0,     0,   374,     0,     0,   374,   311,   370,   370,
     370,   370,   370,   370,   370,   370,   370,   370,   370,   370,
     370,   370,   370,   370,   370,   370,     0,   311,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   370,
       0,     0,   370,   370,     0,     0,     0,     0,     0,     0,
     411,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   374,  1035,
    1035,  1035,  1035,     0,     0,  1035,     0,     0,     0,  1035,
    1035,     0,  1035,   374,  1035,     0,     0,     0,     0,     0,
       0,     0,     0,   921,     0,     0,  1035,     0,     0,     0,
       0,   410,     0,     0,     0,     0,     0,   411,   411,     0,
       0,   411,   411,   370,     0,     0,   370,     0,     0,     0,
     428,   428,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   921,     0,   921,
       0,     0,     0,     0,     0,   370,     0,     0,     0,     0,
       0,     0,     0,     0,   370,     0,     0,     0,   410,   410,
       0,     0,   410,   410,     0,     0,     0,     0,     0,     0,
       0,   329,     0,     0,     0,     0,     0,     0,   370,     0,
     370,     0,     0,     0,     0,     0,     0,   373,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   921,
       0,     0,   590,   590,     0,     0,     0,     0,     0,     0,
     590,     0,   590,   590,     0,     0,   590,     0,     0,     0,
       0,     0,     0,     0,   590,     0,     0,   590,  1035,     0,
       0,     0,     0,     0,     0,   370,     0,  1035,   373,  1035,
       0,     0,     0,     0,   411,   411,     0,     0,     0,     0,
       0,     0,   374,     0,     0,     0,     0,     0,   374,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   370,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   370,     0,  1035,  1035,
       0,     0,  1035,     0,  1035,   410,   410,  1035,     0,  1831,
    1835,  1035,  1841,  1845,     0,     0,     0,  1849,  1853,  1857,
    1861,     0,   311,   311,     0,     0,     0,     0,     0,   374,
     374,   374,   374,   374,   374,   374,   374,     0,     0,   374,
       0,     0,     0,     0,  1035,   373,     0,     0,     0,     0,
     647,   649,     0,     0,   373,     0,     0,     0,     0,     0,
     373,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,  1035,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   373,     0,     0,
       0,     0,   373,     0,     0,   370,     0,   370,     0,     0,
       0,     0,   921,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   428,     0,   428,   370,
       0,     0,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,     0,     0,     0,     0,     0,   370,     0,     0,
     428,   370,   428,     0,   311,     0,     0,     0,   370,     2,
       0,     0,   370,   373,     0,     0,     0,   590,   590,   590,
     590,     0,     0,   590,     0,     0,     0,   590,   590,     0,
     590,     0,   590,     0,     0,     0,     0,     0,   374,     0,
       0,     0,     0,     0,   590,     0,   277,     0,     0,     0,
       0,     0,   278,   279,   280,    28,     0,     0,     0,     0,
      32,     0,     0,     0,     0,   281,   282,    38,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   283,
       0,     0,     0,   284,   285,   286,   287,   288,   289,   290,
     291,    43,    44,   811,     0,     0,   812,   671,   294,     0,
       0,     0,   374,     0,     0,     0,   295,   296,     0,   297,
     298,   299,   300,     0,     0,     0,     0,     0,     0,   373,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   411,   411,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   373,
       0,     0,     0,     0,   428,   428,   428,   428,   428,     0,
       0,     0,     0,     0,     0,   428,   428,   428,   428,     0,
       0,     0,     0,     0,   370,     0,   590,   370,   329,     0,
       0,     0,     0,     0,     0,   590,     0,   590,     0,   410,
     410,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   373,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   370,     0,
       0,     0,     0,     0,     0,   370,     0,     0,     0,     0,
       0,   428,   428,     0,     0,     0,   590,   590,     0,   370,
     590,     0,   590,     0,     0,   590,     0,     0,     0,   590,
       0,     0,     0,     0,   370,     0,     0,     0,     0,     0,
       0,     0,   370,     0,   370,     0,     0,   373,     0,     0,
       0,  1100,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   370,   590,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,     0,
       0,     0,   329,  1156,     0,     0,     0,     0,     0,     0,
     590,     0,     0,     0,     0,     0,     0,   373,     0,     0,
       0,     0,     0,   373,   370,     0,   373,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,     0,     0,     0,     0,
       0,   373,   373,   373,   373,   373,   373,   373,     0,     0,
     373,   373,     0,   373,   373,   373,   373,   373,   373,   373,
     373,     0,   329,     0,     0,     0,     0,     0,     0,     0,
     329,   373,   373,   373,   373,   373,   373,   373,   373,   373,
     373,   373,   373,   373,   373,   373,   373,   373,   373,     0,
     329,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   373,     0,     0,   373,   373,     0,     0,     0,
       0,     0,     0,   370,   411,     0,   411,     0,   370,   370,
     370,     0,     0,     0,     0,     0,     0,     0,     0,   311,
       0,     0,     0,     0,   370,   370,     0,     0,   411,     0,
     411,   311,     0,     0,     0,     0,     0,     0,   272,     0,
       1,   273,   100,   274,     0,   275,   276,     0,     0,     0,
     370,   370,     0,   370,   370,   410,     0,   410,   370,   370,
     370,   370,     0,     0,     0,     2,   373,     0,     0,   373,
     370,   370,   370,   370,   370,   370,   370,   370,     0,   410,
     370,   410,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   370,   373,     0,
       0,     0,   277,     0,     0,     0,     0,   373,   278,   279,
     280,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
       0,   373,     0,   373,     0,   283,     0,     0,     0,   284,
     285,   286,   287,   288,   289,   290,   291,     0,     0,   292,
       0,     0,   293,  1067,   294,     0,     0,  1068,     0,     0,
       0,     0,   295,   296,  1635,   297,   298,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   411,   411,   411,   411,   411,     0,   373,   311,
     311,     0,     0,   411,   411,   411,   411,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   370,
     370,     0,     0,     0,     0,     0,     0,     0,   373,     0,
     370,     0,     0,   410,   410,   410,   410,   410,     0,   373,
       0,     0,     0,     0,   410,   410,   410,   410,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   411,
     411,     0,     0,     0,     0,   329,   329,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    80,   370,     0,     0,   370,   370,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     410,   410,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    68,     0,    80,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   373,     0,
     373,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    80,
      80,     0,   373,     0,    80,     0,     0,    80,     0,    80,
       0,   111,     0,     0,     0,     0,    80,    80,     0,     0,
     373,     0,     0,     0,   373,     0,     0,   329,     0,     0,
     311,   373,     0,     0,     0,   373,     0,     0,     0,     0,
       0,    80,    80,   160,     0,     0,     0,     0,   311,     0,
       0,     0,   231,    68,     0,     0,     0,     0,     0,     0,
      68,    68,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   352,     0,
       0,     0,     0,     0,     0,    80,    80,     0,   231,     0,
       0,     0,     0,     0,   443,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   443,     0,   231,     0,
     443,     0,     0,     0,     0,     0,    80,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    80,     0,     0,    80,
       0,     0,   231,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   685,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    80,     0,   712,
     520,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      80,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      80,     0,    80,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   373,     0,     0,
     373,   554,     0,     0,   231,   231,   231,     0,     0,     0,
       0,     0,     0,     0,   160,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   160,   231,    68,   272,     0,     1,
     273,   100,   274,     0,   275,   276,     0,     0,     0,     0,
       0,   373,     0,     0,   654,     0,     0,     0,   373,     0,
     654,     0,     0,     0,     2,     0,     0,     0,     0,   676,
       0,     0,   373,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   373,    80,     0,
      80,     0,     0,     0,     0,   373,     0,   373,     0,     0,
       0,   277,     0,     0,     0,     0,     0,   278,   279,   280,
       0,     0,     0,     0,   373,     0,     0,     0,     0,     0,
     281,   282,     0,     0,     0,     0,     0,    80,     0,     0,
       0,     0,     0,     0,   283,     0,     0,     0,   284,   285,
     286,   287,   288,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   554,   294,   231,   231,  1063,   373,   796,     0,
       0,   295,   296,  1634,   297,   298,   299,   300,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   520,     0,  1036,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    80,     0,
      80,     0,     0,   888,     0,     0,     0,     0,    80,    80,
       0,     0,     0,     0,     0,     0,  1044,     0,     0,     0,
    1075,  1079,     0,     0,     0,    80,     0,    80,     0,     0,
       0,     0,     0,     0,     0,    80,   373,    80,     0,     0,
     231,   373,   373,   373,     0,     0,     0,   231,     0,     0,
       0,     0,   329,     0,     0,     0,     0,   373,   373,     0,
       0,     0,     0,     0,   329,     0,     0,     0,     0,    80,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   373,   373,     0,   373,   373,     0,     0,
       0,   373,   373,   373,   373,     0,     0,     0,     0,     0,
       0,     0,     0,   373,   373,   373,   373,   373,   373,   373,
     373,     0,     0,   373,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     373,     0,     0,   685,     0,     0,  1049,     0,     0,     0,
       0,     0,     0,    80,     0,     0,     0,  1192,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     231,   231,   231,   231,     0,     0,  1215,  1219,  1223,  1227,
    1231,     0,     0,  1240,  1246,     0,     0,     0,     0,   685,
       0,     0,  1257,   231,   231,     0,     0,   160,     0,     0,
       0,     0,  1102,     0,  1281,  1285,  1289,  1293,  1297,     0,
     230,  1240,  1310,     0,     0,     0,   231,     0,     0,     0,
       0,     0,     0,  1129,  1139,   676,     0,  1129,  1139,  1240,
    1240,     0,   329,   329,  1102,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1161,   230,     0,   231,     0,
       0,     0,     0,     0,   231,     0,     0,   231,     0,     0,
       0,     0,   373,   373,     0,     0,   230,     0,     0,     0,
       0,     0,     0,   373,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     230,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   519,     0,
       0,     0,     0,     0,     0,     0,   373,     0,     0,   373,
     373,     0,     0,     0,    80,     0,   520,     0,     0,     0,
       0,     0,     0,   231,     0,     0,   231,   231,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   553,
       0,     0,   230,   230,   230,  1349,   520,     0,     0,     0,
       0,     0,     0,   520,    80,     0,  1349,   111,   676,     0,
     520,     0,     0,   230,     0,     0,     0,    80,     0,     0,
       0,     0,     0,     0,    80,     0,     0,     0,     0,     0,
       0,     0,   653,     0,     0,     0,     0,     0,   653,     0,
       0,     0,     0,     0,     0,     0,     0,   675,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   520,     0,   329,     0,     0,     0,     0,     0,     0,
    1493,     0,     0,  1497,     0,     0,     0,     0,   520,   231,
       0,   329,  1512,     0,     0,     0,   231,   231,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   272,   231,     1,
     273,   100,   274,     0,   275,   276,     0,     0,  1044,     0,
       0,  1536,   231,   231,   231,     0,     0,     0,     0,     0,
     554,     0,     0,    80,     2,  1075,  1079,  1075,  1079,     0,
     553,     0,   230,   230,     0,     0,  1192,     0,     0,     0,
       0,     0,     0,  1257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,     0,     0,     0,     0,     0,   278,   279,   280,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     281,   282,     0,     0,   519,     0,     0,     0,     0,   685,
       0,     0,     0,     0,   283,   685,     0,     0,   284,   285,
     286,   287,   288,   289,   290,   291,     0,     0,   292,   231,
       0,   293,  1067,   294,     0,     0,  1640,     0,     0,     0,
    1641,   295,   296,     0,   297,   298,   299,   300,  1049,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   230,     0,
       0,     0,     0,     0,     0,   230,     0,     0,     0,  1627,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   231,   231,   231,
     231,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   231,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,     0,     0,
       0,  1558,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   554,   231,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,     0,     0,     0,     0,  1602,     0,
       0,     0,     0,     0,     0,  1602,     0,     0,     0,     0,
       0,     0,     0,   233,     0,     0,     0,     0,   230,   230,
     230,   230,     0,     0,   231,   231,     0,     0,     0,     0,
       0,   231,   231,     0,     0,   231,   231,   233,     0,     0,
       0,   230,   230,     0,     0,     0,     0,     0,     0,     0,
    1101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   230,   522,     0,     0,     0,     0,
       0,  1128,  1138,   675,     0,  1128,  1138,     0,     0,     0,
       0,     0,  1101,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1160,     0,     0,   230,     0,     0,     0,
       0,     0,   230,     0,     0,   230,   556,     0,     0,   233,
     233,   233,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     233,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   656,
       0,     0,     0,     0,     0,   656,     0,     0,     0,     0,
       0,     0,     0,     0,   678,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   519,     0,     0,     0,     0,     0,
       0,   230,     0,     0,   230,   230,     0,     0,   231,     0,
       0,   231,     0,     0,     0,     0,     0,     0,     0,  1736,
    1738,     0,     0,     0,   519,     0,     0,  1745,     0,  1748,
    1493,   519,     0,  1497,     0,     0,   675,     0,   519,     0,
       0,  1536,     0,     0,  1761,     0,     0,     0,     0,     0,
       0,     0,   231,     0,     0,     0,     0,   556,     0,   233,
     233,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   231,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   231,   231,   231,   231,     0,   519,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      80,     0,     0,     0,     0,     0,   519,   230,     0,     0,
       0,   522,     0,     0,   230,   230,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   230,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     230,   230,   230,     0,   520,     0,     0,     0,   553,     0,
       0,     0,     0,     0,     0,     0,     0,   231,   231,     0,
       0,     0,     0,     0,     0,   233,     0,     0,     0,     0,
       0,     0,   233,     0,     0,     0,     0,     0,     0,  1627,
       0,     0,     0,     0,  1826,  1828,  1832,  1836,  1838,  1842,
       0,     0,     0,  1846,  1850,  1854,  1858,     0,     0,     0,
       0,     0,     0,     0,     0,  1828,  1832,  1838,  1842,  1846,
    1850,  1854,  1858,     0,     0,     0,   231,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   230,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   231,     0,     0,
       0,     0,     0,   231,  1893,  1894,  1895,  1896,     0,     0,
    1897,     0,     0,     0,  1736,  1738,     0,  1745,     0,  1748,
     713,   676,     0,     0,     0,   233,   233,   233,   233,     0,
       0,  1906,     0,     0,     0,   230,   230,   230,   230,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   233,   233,
       0,     0,     0,     0,     0,   230,     0,  1104,     0,     0,
       0,     0,     0,     0,     0,   228,     0,     0,     0,  1557,
       0,   233,     0,     0,   231,     0,     0,     0,  1131,  1141,
     678,     0,  1131,  1141,     0,     0,   553,   230,     0,  1104,
     231,   231,     0,     0,     0,     0,     0,     0,     0,     0,
    1163,   228,     0,   233,     0,     0,  1601,   441,     0,   233,
       0,     0,   233,  1601,     0,     0,     0,     0,     0,   441,
       0,   228,     0,   441,     0,     0,     0,     0,     0,     0,
       0,     0,   230,   230,     0,     0,     0,     0,     0,   230,
     230,     0,     0,   230,   230,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1897,     0,     0,     0,     0,     0,     0,
       0,     0,  1970,   518,  1973,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   522,     0,     0,     0,     0,     0,     0,   233,     0,
       0,   233,   233,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   231,   552,   676,     0,   228,   228,   228,
       0,   522,     0,  2002,  2003,     0,     0,  1970,   522,  1973,
       0,     0,  2007,   678,     0,   522,  2009,     0,   228,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   652,     0,     0,
       0,     0,     0,   652,     0,     0,     0,     0,     0,  2009,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   522,  1045,   231,   231,
       0,     0,     0,     0,     0,     0,     0,  2046,     0,     0,
       0,     0,     0,   522,   233,     0,   230,     0,     0,   230,
       0,   233,   233,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   233,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,   233,   233,
       0,     0,     0,     0,     0,   556,     0,     0,     0,     0,
     230,     0,     0,     0,     0,   552,     0,   228,   228,     0,
       0,   795,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   230,     0,   795,     0,     0,     0,     0,     0,     0,
       0,     0,   230,   230,   230,   230,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1184,     0,     0,     0,     0,   518,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   887,     0,     0,     0,
       0,     0,     0,     0,   233,     0,     0,  1216,  1220,  1224,
    1228,  1232,   519,     0,  1241,     0,     0,     0,     0,     0,
    1184,     0,     0,     0,     0,   230,   230,     0,     0,     0,
       0,     0,   229,   228,     0,  1282,  1286,  1290,  1294,  1298,
     228,     0,  1241,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1241,  1241,   233,   233,   233,   233,     0,     0,   229,     0,
       0,     0,     0,     0,   229,     0,     0,     0,     0,     0,
       0,     0,   233,     0,   230,     0,   229,     0,   229,     0,
     229,     0,     0,     0,     0,     0,  1560,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   229,   556,   233,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   230,     0,     0,     0,     0,
       0,   230,     0,  1604,     0,     0,     0,     0,     0,     0,
    1604,     0,     0,     0,     0,     0,     0,     0,     0,   675,
       0,     0,     0,   228,   228,   228,   228,     0,     0,   233,
     233,     0,     0,     0,     0,     0,   233,   233,     0,     0,
     233,   233,     0,     0,     0,     0,   228,   228,     0,     0,
       0,   229,     0,     0,   229,   229,   229,   272,     0,     1,
     273,   100,   274,     0,   275,   276,     0,     0,     0,   228,
       0,     0,   230,     0,     0,   229,  1127,  1137,     0,     0,
    1127,  1137,     0,     0,     2,     0,     0,     0,   230,   230,
       0,     0,     0,     0,   229,     0,     0,     0,     0,     0,
     229,   228,     0,     0,     0,     0,     0,   228,     0,     0,
     228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,     0,     0,     0,     0,     0,   278,   279,   280,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,     0,     0,   284,   285,
     286,   287,   288,   289,   290,   291,     0,     0,   292,     0,
       0,   293,  1067,   294,     0,     0,  1068,     0,     0,  1514,
       0,   295,   296,  1645,   297,   298,   299,   300,     0,   518,
       0,     0,   229,     0,   229,   229,   228,     0,   229,   228,
     228,     0,     0,   233,     0,     0,   233,  1539,     0,     0,
     229,   230,     0,   675,  1546,     0,     0,     0,  1348,   518,
       0,     0,     0,     0,     0,     0,   518,     0,     0,  1348,
       0,     0,     0,   518,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   233,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1184,     0,     0,   229,     0,     0,  1184,     0,   233,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
     233,   233,   233,     0,   518,     0,   230,   230,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     229,   518,   228,     0,     0,     0,     0,   229,     0,   228,
     228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   228,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   174,     0,     1,     0,   228,   228,   228,     0,   522,
       0,     0,     0,   552,     0,     0,     0,     0,     0,     0,
       0,     0,   233,   233,     0,     0,     0,     0,     2,   175,
     176,   177,   178,   179,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   180,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,   233,    35,    36,     0,    37,    38,    39,     0,     0,
     229,   229,   229,   229,     0,     0,     0,     0,     0,     0,
      40,     0,   228,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,   229,   229,   513,   958,     0,     0,     0,
       0,     0,   233,     0,     0,     0,   514,     0,   233,   234,
       0,     0,     0,     0,     0,     0,   229,     0,     0,     0,
       0,     0,     0,   229,   229,     0,   678,   229,   229,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     228,   228,   228,   228,     0,   234,     0,     0,   229,     0,
       0,   234,     0,     0,   229,     0,     0,   229,     0,     0,
     228,     0,     0,   234,     0,   234,     0,   234,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   233,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   234,
       0,   552,   228,     0,     0,   233,   233,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   597,     0,     0,     0,
       0,  1600,     0,     0,     0,     0,     0,     0,  1600,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   228,   228,     0,
       0,     0,     0,   229,   228,   228,   229,   229,   228,   228,
       0,     0,     0,     0,     0,     0,     0,     0,   234,   674,
       0,   234,   234,   234,     0,   229,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   229,     0,     0,     0,
       0,     0,   234,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   234,     0,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   233,     0,
     678,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   229,
       0,     0,     0,     0,     0,     0,   229,   229,     0,     0,
       0,   674,     0,     0,     0,     0,     0,     0,   229,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   229,   229,   229,     0,     0,     0,     0,     0,
     229,     0,     0,   233,   233,     0,     0,     0,     0,   234,
       0,   234,   234,     0,     0,   234,     0,     0,     0,     0,
       0,   228,     0,     0,   228,     0,     0,   234,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1824,     0,     0,     0,     0,  1827,  1829,  1833,  1837,  1839,
    1843,     0,     0,     0,  1847,  1851,  1855,  1859,     0,     0,
       0,     0,     0,     0,     0,   228,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     234,     0,     0,     0,     0,     0,   228,     0,     0,   229,
       0,     0,     0,     0,     0,     0,     0,   228,   228,   228,
     228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   234,     0,     0,
       0,     0,     0,     0,   234,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   229,   229,   229,
     229,     0,     0,     0,     0,  1047,   372,   518,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   229,     0,  1065,
     228,   228,     0,     0,     0,     0,     0,     0,     0,     0,
     597,   597,   597,   597,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   229,   229,
       0,     0,     0,     0,     0,     0,     0,   372,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   229,     0,
       0,   674,     0,     0,     0,   229,     0,     0,     0,   228,
       0,     0,     0,     0,     0,     0,     0,   234,   234,   234,
     234,     0,     0,     0,   229,   229,     0,     0,     0,  1065,
       0,   229,   229,     0,     0,   229,   229,     0,     0,     0,
     234,   234,     0,     0,     0,     0,     0,     0,     0,     0,
     228,     0,     0,     0,  1191,     0,   228,     0,     0,     0,
       0,     0,     0,   234,     0,     0,     0,     0,     0,     0,
     234,   234,     0,     0,   234,   234,     0,     0,     0,     0,
       0,     0,     0,     0,   633,     0,     0,     0,     0,     0,
       0,     0,  1244,   372,     0,   234,     0,     0,     0,   372,
    1256,   234,     0,   272,   234,     1,   273,   100,   274,     0,
     275,   276,     0,     0,     0,     0,     0,     0,     0,     0,
    1308,     0,     0,     0,     0,     0,     0,   228,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,  1334,  1338,
       0,     0,     0,   228,   228,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   277,   674,     0,
       0,     0,     0,   278,   279,   280,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   281,   282,     0,     0,
     234,     0,   372,   234,   234,     0,     0,     0,   229,     0,
     283,   229,     0,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   234,     0,   292,     0,     0,   293,  1067,   294,
       0,     0,  1640,   234,     0,     0,  1648,   295,   296,     0,
     297,   298,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,   229,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   229,     0,     0,   228,     0,     0,     0,
       0,     0,     0,     0,   229,   229,   229,   229,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   234,     0,   922,     0,
       0,     0,     0,   234,   234,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   234,     0,     0,     0,     0,
     673,     0,     0,     0,     0,     0,     0,     0,   372,   234,
     234,   234,     0,     0,     0,     0,     0,   234,     0,     0,
       0,   228,   228,     0,     0,     0,     0,   229,   229,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   597,     0,     0,   597,  1500,  1502,     0,  1505,
       0,     0,     0,   372,     0,     0,     0,  1515,     0,     0,
       0,     0,     0,     0,     0,  1524,     0,     0,     0,     0,
       0,     0,  1065,     0,     0,     0,   229,     0,     0,     0,
       0,     0,     0,   597,     0,     0,     0,     0,     0,     0,
    1065,     0,   673,     0,     0,  1065,   234,   597,   597,   597,
     597,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1094,   229,     0,     0,
       0,     0,     0,   229,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1571,     0,     0,     0,     0,     0,  1580,     0,     0,     0,
       0,     0,     0,     0,   234,   234,   234,   234,     0,     0,
       0,     0,     0,     0,     0,     0,   922,     0,     0,  1065,
       0,     0,   922,     0,   234,   922,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   229,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   234,   234,     0,     0,     0,
     229,   229,     0,     0,     0,     0,  1065,     0,     0,     0,
       0,     0,     0,     0,     0,   234,     0,     0,     0,     0,
       0,     0,   234,     0,     0,   116,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   234,   234,     0,     0,     0,     0,     0,   234,   234,
       0,   372,   234,   234,   372,   372,   116,   116,  1065,     0,
       0,     0,     0,     0,     0,     0,  1046,     0,     0,     0,
       0,  1065,     0,     0,     0,     0,     0,     0,     0,     0,
    1064,     0,     0,     0,  1069,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   354,   116,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1065,   229,     0,   922,     0,     0,   372,     0,
       0,     0,   673,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   354,   116,     0,     0,  1143,     0,  1065,     0,
       0,     0,  1065,     0,     0,     0,     0,   372,     0,     0,
    1064,  1069,     0,     0,     0,     0,   372,     0,     0,     0,
       0,     0,     0,   116,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1190,     0,     0,     0,     0,
     922,     0,   922,     0,     0,     0,     0,     0,   229,   229,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   116,   234,     0,     0,   234,     0,
       0,     0,     0,  1242,     0,     0,     0,   116,     0,     0,
       0,  1255,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   372,     0,     0,
       0,  1306,     0,     0,     0,     0,     0,     0,     0,   234,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1332,
    1336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     234,     0,     0,     0,     0,     0,     0,   922,     0,     0,
       0,   234,   234,   234,   234,     0,     0,     0,   372,   673,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   597,   597,     0,     0,  1065,     0,  1065,     0,     0,
    1065,   597,     0,     0,     0,     0,  1752,  1755,     0,  1757,
       0,     0,     0,     0,     0,   116,     0,   354,     0,  1065,
       0,  1768,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   272,     0,     1,   273,   100,
     274,     0,   275,   276,   234,   234,     0,     0,     0,     0,
       0,     0,     0,     0,   116,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,  1065,     0,     0,     0,
       0,     0,     0,     0,     0,  1065,     0,   372,     0,   372,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   858,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   277,
       0,   372,     0,   234,     0,   278,   279,   280,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   922,     0,     0,     0,     0,     0,     0,
     922,     0,   283,     0,   922,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   234,   116,   292,   354,     0,   293,
     234,   294,  1062,     0,  1063,   116,   116,     0,     0,   295,
     296,     0,   297,   298,   299,   300,     0,     0,     0,     0,
       0,     0,   116,     0,   116,     0,     0,     0,     0,     0,
       0,     0,   354,     0,   116,     0,     0,  1499,  1501,     0,
    1504,     0,     0,     0,     0,     0,     0,     0,  1046,     0,
       0,  1069,     0,     0,     0,     0,  1523,     0,     0,     0,
       0,     0,     0,  1064,  1069,     0,   354,     0,     0,     0,
       0,   234,     0,     0,     0,     0,     0,     0,     0,  1065,
      85,  1064,  1069,     0,     0,     0,  1064,   234,   234,     0,
       0,     0,   597,  1065,     0,     0,     0,     0,     0,     0,
    1065,     0,     0,     0,  1757,     0,  1904,     0,     0,     0,
       0,     0,     0,     0,     0,  1910,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   114,   120,     0,     0,     0,
       0,  1570,     0,     0,     0,     0,     0,  1579,     0,     0,
       0,     0,     0,     0,     0,     0,   372,     0,     0,   372,
       0,     0,     0,     0,     0,   674,     0,   164,   120,     0,
    1064,     0,   204,     0,     0,     0,     0,    85,     0,     0,
       0,     0,     0,     0,    85,    85,     0,     0,     0,     0,
       0,     0,     0,     0,   117,     0,     0,     0,     0,     0,
     922,     0,   353,     0,     0,     0,     0,   372,     0,   356,
       0,     0,     0,     0,     0,     0,     0,  1064,  1069,     0,
     234,   372,     0,     0,     0,   162,   117,     0,     0,     0,
     203,     0,     0,   206,     0,     0,   372,     0,     0,     0,
       0,     0,     0,     0,   922,     0,   922,     0,     0,     0,
       0,     0,     0,   486,     0,     0,  1962,  1965,     0,  1065,
       0,  1065,     0,   922,   597,  1065,   597,   355,   117,  1064,
       0,  1069,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1064,  1069,   525,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   234,   234,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   922,     0,     0,     0,
       0,   485,   487,     0,     0,     0,     0,  1065,     0,     0,
    1065,     0,     0,     0,     0,   120,  1359,     0,   597,     0,
       0,   116,     0,  1064,     0,  1069,     0,     0,   164,     0,
       0,     0,   117,     0,     0,     0,     0,     0,    85,     0,
      85,     0,   540,     0,     0,   542,     0,     0,     0,  1064,
       0,  1069,     0,  1064,  1065,  1069,     0,     0,     0,     0,
       0,   116,     0,     0,     0,     0,     0,     0,  1389,  1391,
       0,     0,     0,   117,   116,     0,     0,     0,     0,     0,
       0,   116,     0,     0,     0,     0,   162,     0,     0,     0,
       0,   858,     0,     0,     0,   372,     0,     0,     0,     0,
     372,   372,   372,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   372,   372,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   858,     0,     0,     0,     0,     0,     0,
       0,     0,  1830,  1834,     0,  1840,  1844,     0,     0,     0,
    1848,  1852,  1856,  1860,     0,     0,   786,     0,     0,     0,
       0,     0,  1830,  1834,  1840,  1844,  1848,  1852,  1856,  1860,
       0,     0,   372,     0,     0,   120,     0,     0,     0,     0,
     116,     0,     0,     0,     0,     0,     0,     0,     0,   922,
       0,     0,     0,     0,   117,     0,   355,     0,     0,     0,
       0,  1733,     0,     0,     0,     0,     0,     0,     0,     0,
     860,     0,     0,   869,     0,     0,  1064,  1069,  1064,  1069,
       0,  1064,  1747,     0,     0,     0,     0,  1499,  1754,     0,
    1523,     0,  1069,   117,     0,     0,     0,     0,     0,     0,
    1064,  1069,  1523,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   203,   206,     0,     0,     0,   120,   120,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1064,  1069,     0,
       0,     0,     0,   525,     0,   120,  1064,  1069,     0,     0,
       0,     0,   272,   971,     1,   273,   100,   274,     0,   275,
     276,   372,   372,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   372,     0,   927,     0,   928,     0,     0,     2,
       0,     0,     0,     0,   117,   117,     0,   356,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,     0,   117,     0,     0,     0,     0,     0,     0,
       0,   355,     0,   117,     0,     0,   277,     0,     0,     0,
       0,     0,   278,   279,   280,   922,     0,     0,   372,   372,
       0,     0,     0,     0,     0,   281,   282,     0,     0,     0,
       0,     0,     0,     0,     0,   355,     0,     0,     0,   283,
       0,     0,     0,   284,   285,   286,   287,   288,   289,   290,
     291,    85,     0,   292,     0,     0,   293,  1067,   294,     0,
       0,  1640,     0,     0,     0,  1660,   295,   296,     0,   297,
     298,   299,   300,     0,     0,     0,     0,  1134,     0,     0,
       0,  1134,     0,     0,     0,     0,     0,     0,     0,     0,
    1064,     0,     0,     0,     0,     0,     0,     0,     0,   786,
       0,     0,     0,   174,  1064,     1,     0,     0,     0,  1069,
       0,  1064,  1747,     0,  1069,  1523,     0,  1903,     0,  1905,
       0,     0,     0,     0,     0,  1069,  1909,     0,     0,     0,
       2,   175,   176,   177,   178,   179,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   673,   180,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,   786,  1340,     0,     0,     0,  1674,
    1676,     0,    43,    44,    45,     0,     0,   784,   958,   786,
       0,     0,     0,     0,     0,     0,     0,  1361,   514,     0,
     786,   114,   120,     0,     0,     0,     0,  1359,     0,  1688,
       0,  1689,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1961,  1964,     0,
    1064,  1069,  1064,     0,     0,     0,  1064,  1747,     0,     0,
       0,     0,   120,     0,     0,     0,     0,     0,     0,  1390,
       0,     0,     0,     0,     0,   525,     0,     0,     0,     0,
     117,     0,   120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   860,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1064,  1069,
       0,  1064,  1747,     0,     0,     0,  2008,   116,     0,     0,
     117,     0,     0,     0,     0,     0,     0,   203,   206,     0,
       0,     0,     0,   117,   860,     0,     0,   540,     0,   542,
     117,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1064,     0,     0,     0,     0,
       0,     0,  -364,   692,     0,  -364,  -364,  -364,  -364,   693,
     694,   695,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,     0,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,     0,     0,  -364,  -364,     0,
    -364,     0,     0,  -364,  -364,  -364,  -364,  -364,     0,   117,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,     0,  -364,     0,
    -364,  -364,  -364,     0,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,   696,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,   697,  -364,  -364,   698,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1869,   786,  1870,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1674,     0,     0,     0,
       0,     0,   786,     0,  1134,     0,     0,     0,     0,     0,
       0,     0,  1593,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1134,     0,     0,     0,     0,  -366,  1108,  1134,
    -366,  -366,  -366,  -366,  1109,  1110,  1111,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,     0,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
       0,     0,  -366,  -366,     0,  -366,     0,     0,  -366,  -366,
    -366,  -366,  -366,     0,     0,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,     0,  -366,     0,  -366,  -366,  -366,     0,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  1112,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    1113,  -366,  -366,  1114,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,     0,     0,     0,     0,     0,     0,
       0,  -471,  1060,     0,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,     0,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,     0,     0,  -471,  -471,     0,  -471,
    1675,     0,  -471,  -471,  -471,  -471,  -471,     0,     0,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,     0,  -471,  1361,  -471,
    -471,  -471,     0,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   540,     0,
     542,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   525,     0,
       0,     0,     0,     0,     0,  -304,   272,     0,     1,   273,
     100,   274,  -304,   275,   276,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,     2,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,   117,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,     0,     0,
     277,  -304,     0,  -304,     0,     0,   278,   279,   280,  -304,
    -304,     0,     0,  -304,  -304,  -304,  -304,  -304,  -304,   281,
     282,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
       0,  -304,     0,   283,  -304,  -304,     0,   284,   285,   286,
     287,   288,   289,   290,   291,  -304,  -304,   292,  -304,  -304,
     293,  1158,   294,  -304,  -304,  1063,  -304,  -304,  -304,  -304,
     295,   296,  -304,   297,   298,   299,   300,  -304,  -304,  -304,
    -304,  -304,     0,  -305,   272,     0,     1,   273,   100,   274,
    -305,   275,   276,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,     2,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,     0,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,     0,  1675,   277,  -305,
       0,  -305,     0,     0,   278,   279,   280,  -305,  -305,     0,
       0,  -305,  -305,  -305,  -305,  -305,  -305,   281,   282,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,  -305,
       0,   283,  -305,  -305,     0,   284,   285,   286,   287,   288,
     289,   290,   291,  -305,  -305,   292,  -305,  -305,   293,  1067,
     294,  -305,  -305,  1068,  -305,  -305,  -305,  -305,   295,   296,
    -305,   297,   298,   299,   300,  -305,  -305,  -305,  -305,  -305,
    -600,   272,     0,     1,   273,   100,   274,  -600,   275,   276,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,     2,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,     0,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,     0,     0,   277,  -600,     0,  -600,     0,
       0,   278,   279,   280,  -600,  -600,     0,     0,  -600,  -600,
    -600,  -600,  -600,  -600,   281,   282,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,     0,  -600,     0,   283,  -600,
    -600,     0,   284,   285,   286,   287,   288,   289,   290,   291,
    -600,  -600,   292,  -600,  -600,   293,  -600,   294,  -600,  -600,
    -600,  -600,   682,  -600,  1239,   295,   296,  -600,   297,   298,
     299,   300,  -600,  -600,  -600,  -600,  -600,  -601,   272,     0,
       1,   273,   100,   274,  -601,   275,   276,  -601,  -601,  -601,
    -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
    -601,  -601,  -601,  -601,  -601,     2,  -601,  -601,  -601,  -601,
    -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
    -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,     0,  -601,
    -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
       0,     0,   277,  -601,     0,  -601,     0,     0,   278,   279,
     280,  -601,  -601,     0,     0,  -601,  -601,  -601,  -601,  -601,
    -601,   281,   282,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
    -601,  -601,     0,  -601,     0,   283,  -601,  -601,     0,   284,
     285,   286,   287,   288,   289,   290,   291,  -601,  -601,   292,
    -601,  -601,   293,  -601,   294,  -601,  -601,  -601,  -601,   682,
    -601,  1305,   295,   296,  -601,   297,   298,   299,   300,  -601,
    -601,  -601,  -601,  -601,  -611,   272,     0,     1,   273,   100,
     274,  -611,   275,   276,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,     2,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,     0,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,     0,     0,   277,
    -611,     0,  -611,     0,     0,   278,   279,   280,  -611,  -611,
       0,     0,  -611,  -611,  -611,  -611,  -611,  -611,   281,   282,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,     0,
    -611,     0,   283,  -611,  -611,     0,   284,   285,   286,   287,
     288,   289,   290,   291,  -611,  -611,   292,  -611,  -611,   293,
    -611,   294,  -611,  -611,  1063,  -611,  -611,  -611,  -611,   295,
     296,  -611,   297,   298,   299,   300,  -611,  -611,  -611,  -611,
    -611,  -613,   272,     0,     1,   273,   100,   274,  -613,   275,
     276,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,
    -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,     2,
    -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,
    -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,
    -613,  -613,     0,  -613,  -613,  -613,  -613,  -613,  -613,  -613,
    -613,  -613,  -613,  -613,     0,     0,   277,  -613,     0,  -613,
       0,     0,   278,   279,   280,  -613,  -613,     0,     0,  -613,
    -613,  -613,  -613,  -613,  -613,   281,   282,  -613,  -613,  -613,
    -613,  -613,  -613,  -613,  -613,  -613,     0,  -613,     0,   283,
    -613,  -613,     0,   284,   285,   286,   287,   288,   289,   290,
     291,  -613,  -613,   292,  -613,  -613,   293,  1067,   294,  -613,
    -613,  1068,  -613,  -613,  -613,  -613,   295,   296,  -613,   297,
     298,   299,   300,  -613,  -613,  -613,  -613,  -613,  -612,   272,
       0,     1,   273,   100,   274,  -612,   275,   276,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,     2,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,     0,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,     0,     0,   277,  -612,     0,  -612,     0,     0,   278,
     279,   280,  -612,  -612,     0,     0,  -612,  -612,  -612,  -612,
    -612,  -612,   281,   282,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,     0,  -612,     0,   283,  -612,  -612,     0,
     284,   285,   286,   287,   288,   289,   290,   291,  -612,  -612,
     292,  -612,  -612,   293,  -612,   294,  -612,  -612,  1063,  -612,
    -612,  -612,  -612,   295,   296,  -612,   297,   298,   299,   300,
    -612,  -612,  -612,  -612,  -612,  -357,  1782,     0,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,     0,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,     0,     0,
    -357,  -357,     0,  -357,     0,     0,  -357,  -357,  -357,  -357,
    -357,     0,     0,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
       0,  -357,     0,  -357,  -357,  -357,     0,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -362,  1823,     0,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,     0,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,     0,     0,  -362,  -362,     0,
    -362,     0,     0,  -362,  -362,  -362,  -362,  -362,     0,     0,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,     0,  -362,     0,
    -362,  -362,  -362,     0,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -350,
     272,     0,     1,   273,   100,   274,  -350,   275,   276,  -350,
    -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,
    -350,  -350,  -350,  -350,  -350,  -350,  -350,     2,  -350,  -350,
    -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,
    -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,
       0,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,
    -350,  -350,     0,     0,   277,  -350,     0,  -350,     0,     0,
     278,   279,   280,  -350,  -350,     0,     0,  -350,  -350,  -350,
    -350,  -350,  -350,   281,   282,  -350,  -350,  -350,  -350,  -350,
    -350,  -350,  -350,  -350,     0,  -350,     0,   283,  -350,  -350,
       0,   284,   285,   286,   287,   288,   289,   290,   291,  -350,
    -350,   292,  -350,  -350,   293,  -350,   294,  -350,  -350,  -350,
    -350,   682,  -350,  -350,   295,   296,  -350,   297,   298,   299,
     300,  -350,  -350,  -350,  -350,  -350,  -578,   272,     0,     1,
     273,   100,   274,  -578,   275,   276,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     2,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,
       0,   277,  -578,     0,  -578,     0,     0,   278,   279,   280,
    -578,  -578,     0,     0,  -578,  -578,  -578,  -578,  -578,  -578,
     281,   282,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,     0,  -578,     0,   283,  -578,  -578,     0,   284,   285,
     286,   287,   288,   289,   290,   291,  -578,  -578,   292,  -578,
    -578,   293,  -578,   294,  -578,  -578,  -578,  -578,   682,  -578,
    -578,   295,   296,  -578,   297,   298,   299,   300,  -578,  -578,
    -578,  -578,  -578,  -586,   272,     0,     1,   273,   100,   274,
    -586,   275,   276,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,     2,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,     0,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,     0,     0,   277,  -586,
       0,  -586,     0,     0,   278,   279,   280,  -586,  -586,     0,
       0,  -586,  -586,  -586,  -586,  -586,  -586,   281,   282,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,     0,  -586,
       0,   283,  -586,  -586,     0,   284,   285,   286,   287,   288,
     289,   290,   291,  -586,  -586,   292,  -586,  -586,   293,  -586,
     294,  -586,  -586,  -586,  -586,   682,  -586,  -586,   295,   296,
    -586,   297,   298,   299,   300,  -586,  -586,  -586,  -586,  -586,
    -579,   272,     0,     1,   273,   100,   274,  -579,   275,   276,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,     2,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,     0,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,     0,     0,   277,  -579,     0,  -579,     0,
       0,   278,   279,   280,  -579,  -579,     0,     0,  -579,  -579,
    -579,  -579,  -579,  -579,   281,   282,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,     0,  -579,     0,   283,  -579,
    -579,     0,   284,   285,   286,   287,   288,   289,   290,   291,
    -579,  -579,   292,  -579,  -579,   293,  -579,   294,  -579,  -579,
    -579,  -579,   682,  -579,  -579,   295,   296,  -579,   297,   298,
     299,   300,  -579,  -579,  -579,  -579,  -579,  -587,   272,     0,
       1,   273,   100,   274,  -587,   275,   276,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,     2,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,     0,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
       0,     0,   277,  -587,     0,  -587,     0,     0,   278,   279,
     280,  -587,  -587,     0,     0,  -587,  -587,  -587,  -587,  -587,
    -587,   281,   282,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,     0,  -587,     0,   283,  -587,  -587,     0,   284,
     285,   286,   287,   288,   289,   290,   291,  -587,  -587,   292,
    -587,  -587,   293,  -587,   294,  -587,  -587,  -587,  -587,   682,
    -587,  -587,   295,   296,  -587,   297,   298,   299,   300,  -587,
    -587,  -587,  -587,  -587,  -580,   272,     0,     1,   273,   100,
     274,  -580,   275,   276,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,     2,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,     0,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,     0,     0,   277,
    -580,     0,  -580,     0,     0,   278,   279,   280,  -580,  -580,
       0,     0,  -580,  -580,  -580,  -580,  -580,  -580,   281,   282,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,     0,
    -580,     0,   283,  -580,  -580,     0,   284,   285,   286,   287,
     288,   289,   290,   291,  -580,  -580,   292,  -580,  -580,   293,
    -580,   294,  -580,  -580,  -580,  -580,   682,  -580,  -580,   295,
     296,  -580,   297,   298,   299,   300,  -580,  -580,  -580,  -580,
    -580,  -588,   272,     0,     1,   273,   100,   274,  -588,   275,
     276,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,     2,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,     0,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,     0,     0,   277,  -588,     0,  -588,
       0,     0,   278,   279,   280,  -588,  -588,     0,     0,  -588,
    -588,  -588,  -588,  -588,  -588,   281,   282,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,  -588,     0,  -588,     0,   283,
    -588,  -588,     0,   284,   285,   286,   287,   288,   289,   290,
     291,  -588,  -588,   292,  -588,  -588,   293,  -588,   294,  -588,
    -588,  -588,  -588,   682,  -588,  -588,   295,   296,  -588,   297,
     298,   299,   300,  -588,  -588,  -588,  -588,  -588,  -581,   272,
       0,     1,   273,   100,   274,  -581,   275,   276,  -581,  -581,
    -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,
    -581,  -581,  -581,  -581,  -581,  -581,     2,  -581,  -581,  -581,
    -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,
    -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,     0,
    -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,
    -581,     0,     0,   277,  -581,     0,  -581,     0,     0,   278,
     279,   280,  -581,  -581,     0,     0,  -581,  -581,  -581,  -581,
    -581,  -581,   281,   282,  -581,  -581,  -581,  -581,  -581,  -581,
    -581,  -581,  -581,     0,  -581,     0,   283,  -581,  -581,     0,
     284,   285,   286,   287,   288,   289,   290,   291,  -581,  -581,
     292,  -581,  -581,   293,  -581,   294,  -581,  -581,  -581,  -581,
     682,  -581,  -581,   295,   296,  -581,   297,   298,   299,   300,
    -581,  -581,  -581,  -581,  -581,  -589,   272,     0,     1,   273,
     100,   274,  -589,   275,   276,  -589,  -589,  -589,  -589,  -589,
    -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,
    -589,  -589,  -589,     2,  -589,  -589,  -589,  -589,  -589,  -589,
    -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,
    -589,  -589,  -589,  -589,  -589,  -589,     0,  -589,  -589,  -589,
    -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,     0,     0,
     277,  -589,     0,  -589,     0,     0,   278,   279,   280,  -589,
    -589,     0,     0,  -589,  -589,  -589,  -589,  -589,  -589,   281,
     282,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,
       0,  -589,     0,   283,  -589,  -589,     0,   284,   285,   286,
     287,   288,   289,   290,   291,  -589,  -589,   292,  -589,  -589,
     293,  -589,   294,  -589,  -589,  -589,  -589,   682,  -589,  -589,
     295,   296,  -589,   297,   298,   299,   300,  -589,  -589,  -589,
    -589,  -589,  -359,  1923,     0,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,     0,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,     0,     0,  -359,  -359,     0,
    -359,     0,     0,  -359,  -359,  -359,  -359,  -359,     0,     0,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,     0,  -359,     0,
    -359,  -359,  -359,     0,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -358,
    1924,     0,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
       0,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,     0,     0,  -358,  -358,     0,  -358,     0,     0,
    -358,  -358,  -358,  -358,  -358,     0,     0,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,     0,  -358,     0,  -358,  -358,  -358,
       0,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -364,   692,     0,  -364,
    -364,  -364,  -364,   693,   694,   695,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,     0,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,     0,
       0,  -364,  -364,     0,  -364,     0,     0,  -364,  -364,  -364,
    -364,  -364,     0,     0,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,     0,  -364,     0,  -364,  -364,  -364,     0,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,   696,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  1058,
    -364,  -364,   698,     0,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,   692,     0,     0,     0,     0,     0,   693,
     694,   695,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -364,     0,
       0,     0,     0,     0,     0,     0,  -364,  -364,     0,     0,
       0,  -364,     0,     0,     0,     0,     0,  -364,  -364,  -364,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -364,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -364,  -364,  -364,  -364,  -364,   696,     0,     0,
    -364,  1449,  -364,  -364,     0,   697,     0,     0,   698,     0,
    -364,  -364,  -364,     0,  -364,  -364,  -364,  -364,  -364,  -471,
    1060,     0,  -471,  -471,  -471,  -471,     0,  -471,  -471,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
       0,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,     0,     0,  -471,  -471,     0,  -471,     0,     0,
    -471,  -471,  -471,  -471,  -471,     0,     0,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,     0,  -471,     0,  -471,  -471,  -471,
       0,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,     0,     0,  -471,  -471,  -471,  -471,     0,  -471,
    -471,  -471,  1061,  -471,  -471,  -471,     0,  -471,  -471,  -471,
    -471, -1062,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1062, -1062, -1062, -1062, -1062, -1062, -1062, -1062, -1062, -1062,
   -1062, -1062, -1062, -1062, -1062, -1062, -1062, -1062, -1062, -1062,
   -1062, -1062,     0, -1062, -1062, -1062, -1062, -1062, -1062, -1062,
   -1062, -1062, -1062, -1062,     0,     0,   277, -1062,     0, -1062,
       0,     0,   278,   279,   280, -1062, -1062,     0,     0, -1062,
   -1062, -1062, -1062, -1062, -1062,   281,   282, -1062, -1062, -1062,
   -1062, -1062, -1062, -1062, -1062, -1062,     0, -1062,     0,   283,
   -1062, -1062,     0,   284,   285,   286,   287,   288,   289,   290,
     291, -1062, -1062,   292,     0,     0,   293,  1067,   294, -1062,
       0,  1068, -1062, -1062,     0, -1062,   295,   296,     0,   297,
     298,   299,   300, -1195,   272,     0,     1,   273,   100,   274,
       0,   275,   276,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195,
   -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195,
   -1195, -1195, -1195, -1195,     0, -1195, -1195, -1195, -1195, -1195,
   -1195, -1195, -1195, -1195, -1195, -1195,     0,     0,   277, -1195,
       0, -1195,     0,     0,   278,   279,   280, -1195, -1195,     0,
       0, -1195, -1195, -1195, -1195, -1195, -1195,   281,   282, -1195,
   -1195, -1195, -1195, -1195, -1195, -1195, -1195, -1195,     0, -1195,
       0,   283, -1195, -1195,     0,   284,   285,   286,   287,   288,
     289,   290,   291, -1195, -1195,   292,     0,     0,   293,  1067,
     294,  1530,     0,  1068, -1195, -1195,     0, -1195,   295,   296,
       0,   297,   298,   299,   300, -1153,   272,     0,     1,   273,
     100,   274,     0,   275,   276,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153,     0, -1153, -1153, -1153,
   -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,     0,     0,
     277, -1153,     0, -1153,     0,     0,   278,   279,   280, -1153,
   -1153,     0,     0, -1153, -1153, -1153, -1153, -1153, -1153,   281,
     282, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153, -1153,
       0, -1153,     0,   283, -1153, -1153,     0,   284,   285,   286,
     287,   288,   289,   290,   291, -1153, -1153,   292,     0,     0,
     293,  1741,   294, -1153,     0,  1068, -1153, -1153,     0, -1153,
     295,   296,     0,   297,   298,   299,   300, -1184,   272,     0,
       1,   273,   100,   274,     0,   275,   276,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,
   -1184, -1184, -1184, -1184, -1184, -1184, -1184, -1184,     0,   569,
     570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
       0,     0,   277, -1184,     0, -1184,     0,     0,   278,   279,
     280, -1184, -1184,     0,     0, -1184,    32, -1184, -1184, -1184,
   -1184,   281,   282,  1032, -1184,   581,   582,   583, -1184, -1184,
   -1184, -1184,     0, -1184,     0,   283, -1184, -1184,     0,   284,
     285,   286,   287,   288,   289,   290,   291,    43,    44,   292,
       0,     0,   293,  1067,   294,   584,     0,  1068, -1184,   224,
       0,   585,   295,   296,     0,   297,   298,   299,   300,  -612,
     272,     0,     1,   273,   100,   274,     0,   275,   276,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
       0,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,     0,     0,   277,  -612,     0,  -612,     0,     0,
     278,   279,   280,  -612,  -612,     0,     0,  -612,  -612,  -612,
    -612,  -612,  -612,   281,   282,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,     0,  -612,     0,   283,  -612,  -612,
       0,   284,   285,   286,   287,   288,   289,   290,   291,  -612,
    -612,   292,     0,     0,   293,  -612,   294,  1062,     0,  1063,
    -612,  -612,     0,  -612,   295,   296,     0,   297,   298,   299,
     300, -1176,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176,
   -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176, -1176,
   -1176, -1176,     0, -1176, -1176, -1176, -1176, -1176, -1176, -1176,
   -1176, -1176, -1176, -1176,     0,     0,   277, -1176,     0, -1176,
       0,     0,   278,   279,   280, -1176, -1176,     0,     0, -1176,
   -1176, -1176, -1176, -1176, -1176,   281,   282, -1176, -1176, -1176,
   -1176, -1176, -1176, -1176, -1176, -1176,     0, -1176,     0,   283,
   -1176, -1176,     0,   284,   285,   286,   287,   288,   289,   290,
     291, -1176, -1176,   292,     0,     0,   293,  1966,   294, -1176,
       0,  1063, -1176, -1176,     0, -1176,   295,   296,     0,   297,
     298,   299,   300, -1177,   272,     0,     1,   273,   100,   274,
       0,   275,   276,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177,
   -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177,
   -1177, -1177, -1177, -1177,     0, -1177, -1177, -1177, -1177, -1177,
   -1177, -1177, -1177, -1177, -1177, -1177,     0,     0,   277, -1177,
       0, -1177,     0,     0,   278,   279,   280, -1177, -1177,     0,
       0, -1177, -1177, -1177, -1177, -1177, -1177,   281,   282, -1177,
   -1177, -1177, -1177, -1177, -1177, -1177, -1177, -1177,     0, -1177,
       0,   283, -1177, -1177,     0,   284,   285,   286,   287,   288,
     289,   290,   291, -1177, -1177,   292,     0,     0,   293,  1067,
     294,  1967,     0,  1068, -1177, -1177,     0, -1177,   295,   296,
       0,   297,   298,   299,   300, -1171,   272,     0,     1,   273,
     100,   274,     0,   275,   276,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171, -1171,
   -1171, -1171, -1171, -1171, -1171, -1171,     0,   569,   570,   571,
     572,   573,   574,   575,   576,   577,   578,   579,     0,     0,
     277, -1171,     0, -1171,     0,     0,   278,   279,   280, -1171,
   -1171,     0,     0, -1171,    32, -1171, -1171, -1171, -1171,   281,
     282,  1032, -1171,   581,   582,   583, -1171, -1171, -1171, -1171,
       0, -1171,     0,   283, -1171, -1171,     0,   284,   285,   286,
     287,   288,   289,   290,   291,    43,    44,   292,     0,     0,
     293,  1067,   294,   584,     0,  1068, -1171,   224,     0,   585,
     295,   296,     0,   297,   298,   299,   300, -1119,   560,     0,
   -1119, -1119, -1119, -1119,     0, -1119, -1119,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1119, -1119, -1119, -1119, -1119,
   -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119,
   -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119,     0, -1119,
   -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119,
       0,     0, -1119, -1119,     0, -1119,     0,     0, -1119, -1119,
   -1119, -1119, -1119,     0,     0, -1119, -1119, -1119, -1119, -1119,
   -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119,
   -1119, -1119,     0, -1119,     0, -1119, -1119, -1119,     0, -1119,
   -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119, -1119,
       0,     0, -1119,     0, -1119,   561,     0, -1119, -1119, -1119,
       0, -1119, -1119, -1119,     0, -1119, -1119, -1119, -1119, -1142,
     272,     0,     1,   273,   100,   274,     0,   275,   276,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   175,   176,
     177,   178,   179,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    18,    19,   218,   219,    22,    23,    24,
       0,   569,   570,   571,   572,   573,   574,   575,   576,   577,
     578,   579,     0,     0,   277,   220,     0, -1142,     0,     0,
     278,   279,   280,    28,    29,     0,     0, -1142,    32, -1142,
   -1142, -1142, -1142,   281,   361,   580,   222,   581,   582,   583,
   -1142, -1142, -1142, -1142,     0, -1142,     0,   283, -1142,   223,
       0,   284,   285,   286,   287,   288,   289,   290,   291,    43,
      44,   292,     0,     0,   293,     0,   294,   584,     0, -1142,
   -1142,   224,     0,   585,   295,   296,     0,   297,   298,   299,
     300, -1120,   560,     0, -1120, -1120, -1120, -1120,     0, -1120,
   -1120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1120,
   -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120,
   -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120,
   -1120, -1120,     0, -1120, -1120, -1120, -1120, -1120, -1120, -1120,
   -1120, -1120, -1120, -1120,     0,     0, -1120, -1120,     0, -1120,
       0,     0, -1120, -1120, -1120, -1120, -1120,     0,     0, -1120,
   -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120, -1120,
   -1120, -1120, -1120, -1120, -1120, -1120,     0, -1120,     0, -1120,
   -1120, -1120,     0, -1120, -1120, -1120, -1120, -1120, -1120, -1120,
   -1120, -1120, -1120, -1120,     0,     0, -1120,     0, -1120,   561,
       0, -1120, -1120, -1120,     0, -1120, -1120, -1120,     0, -1120,
   -1120, -1120, -1120, -1181,   272,     0,     1,   273,   100,   274,
       0,   275,   276,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181, -1181,
   -1181, -1181, -1181, -1181,     0,  1024,  1025,  1026,   572,  1027,
    1028,  1029,  1030,   577,   578,  1031,     0,     0,   277, -1181,
       0, -1181,     0,     0,   278,   279,   280, -1181, -1181,     0,
       0, -1181,    32, -1181, -1181, -1181, -1181,   281,   282,  1032,
   -1181,   581,   582,   583, -1181, -1181, -1181, -1181,     0, -1181,
       0,   283, -1181, -1181,     0,   284,   285,   286,   287,   288,
     289,   290,   291,    43,    44,   292,     0,     0,   293,     0,
     294,   584,     0, -1181, -1181,   224,     0,   585,   295,   296,
       0,   297,   298,   299,   300, -1197,   272,     0,     1,   273,
     100,   274,     0,   275,   276,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2, -1197, -1197, -1197, -1197, -1197, -1197,
   -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197,
   -1197, -1197, -1197, -1197, -1197, -1197,     0, -1197, -1197, -1197,
   -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197,     0,     0,
     277, -1197,     0, -1197,     0,     0,   278,   279,   280, -1197,
   -1197,     0,     0, -1197, -1197, -1197, -1197, -1197, -1197,   281,
     282, -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197, -1197,
       0, -1197,     0,   283, -1197, -1197,     0,   284,   285,   286,
     287,   288,   289,   290,   291, -1197, -1197,   292,     0,     0,
     293,     0,   294,  1043,     0, -1197, -1197,   682,     0, -1197,
     295,   296,     0,   297,   298,   299,   300, -1132,  1070,     0,
       1,   273,   100,   274,     0,   275,   276,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   175,   176,   177,   178,
     179,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    18,    19,   218,   219,    22,    23,    24,     0,   569,
     570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
       0,     0,   277,   220,     0, -1132,     0,     0,   278,   279,
     280,    28,    29,     0,     0, -1132,    32, -1132, -1132, -1132,
   -1132,   281,   361,   580,   222,   581,   582,   583, -1132, -1132,
   -1132, -1132,     0, -1132,     0,   283, -1132,   223,     0,   284,
     285,   286,   287,   288,   289,   290,   291,    43,    44,   292,
       0,     0,   293,     0,   294,   584,     0, -1132, -1132,   224,
       0,   585,   295,   296,     0,   297,   298,   299,   300, -1136,
     272,     0,     1,   273,   100,   274,     0,   275,   276,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   175,   176,
     177,   178,   179,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    18,    19,   218,   219,    22,    23,    24,
       0,   569,   570,   571,   572,   573,   574,   575,   576,   577,
     578,   579,     0,     0,   277,   220,     0, -1136,     0,     0,
     278,   279,   280,    28,    29,     0,     0, -1136,    32, -1136,
   -1136, -1136, -1136,   281,   361,   580,   222,   581,   582,   583,
   -1136, -1136, -1136, -1136,     0, -1136,     0,   283, -1136,   223,
       0,   284,   285,   286,   287,   288,   289,   290,   291,    43,
      44,   292,     0,     0,   293,     0,   294,   584,     0, -1136,
   -1136,   224,     0,   585,   295,   296,     0,   297,   298,   299,
     300, -1131,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     175,   176,   177,   178,   179,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    18,    19,   218,   219,    22,
      23,    24,     0,   569,   570,   571,   572,   573,   574,   575,
     576,   577,   578,   579,     0,     0,   277,   220,     0, -1131,
       0,     0,   278,   279,   280,    28,    29,     0,     0, -1131,
      32, -1131, -1131, -1131, -1131,   281,   361,   580,   222,   581,
     582,   583, -1131, -1131, -1131, -1131,     0, -1131,     0,   283,
   -1131,   223,     0,   284,   285,   286,   287,   288,   289,   290,
     291,    43,    44,   292,     0,     0,   293,     0,   294,   584,
       0, -1131, -1131,   224,     0,   585,   295,   296,     0,   297,
     298,   299,   300, -1135,   272,     0,     1,   273,   100,   274,
       0,   275,   276,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   175,   176,   177,   178,   179,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    18,    19,   218,
     219,    22,    23,    24,     0,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,   579,     0,     0,   277,   220,
       0, -1135,     0,     0,   278,   279,   280,    28,    29,     0,
       0, -1135,    32, -1135, -1135, -1135, -1135,   281,   361,   580,
     222,   581,   582,   583, -1135, -1135, -1135, -1135,     0, -1135,
       0,   283, -1135,   223,     0,   284,   285,   286,   287,   288,
     289,   290,   291,    43,    44,   292,     0,     0,   293,     0,
     294,   584,     0, -1135, -1135,   224,     0,   585,   295,   296,
       0,   297,   298,   299,   300, -1049,  1083,     0, -1049, -1049,
   -1049, -1049,     0, -1049, -1049,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049, -1049,     0, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,     0,     0,
   -1049, -1049,     0, -1049,     0,     0, -1049, -1049, -1049, -1049,
   -1049,     0,     0, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,
       0, -1049,     0, -1049, -1049, -1049,     0, -1049, -1049, -1049,
   -1049, -1049, -1049, -1049, -1049, -1049, -1049, -1049,     0,     0,
   -1049,     0, -1049, -1049,     0, -1049, -1049, -1049,     0, -1049,
   -1049, -1049,     0, -1049, -1049, -1049, -1049, -1051,  1084,     0,
   -1051, -1051, -1051, -1051,     0, -1051, -1051,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1051, -1051, -1051, -1051, -1051,
   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,     0, -1051,
   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
       0,     0, -1051, -1051,     0, -1051,     0,     0, -1051, -1051,
   -1051, -1051, -1051,     0,     0, -1051, -1051, -1051, -1051, -1051,
   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
   -1051, -1051,     0, -1051,     0, -1051, -1051, -1051,     0, -1051,
   -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051, -1051,
       0,     0, -1051,     0, -1051, -1051,     0, -1051, -1051, -1051,
       0, -1051, -1051, -1051,     0, -1051, -1051, -1051, -1051, -1091,
     272,     0,     1,   273,   100,   274,     0,   275,   276,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,
   -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091, -1091,
       0,   569,   570,   571,   572,   573,   574,   575,   576,   577,
     578,   579,     0,     0,   277, -1091,     0, -1091,     0,     0,
     278,   279,   280, -1091, -1091,     0,     0, -1091,    32, -1091,
   -1091, -1091, -1091,   281,   282,  1032, -1091,   581,   582,   583,
   -1091, -1091, -1091, -1091,     0, -1091,     0,   283, -1091, -1091,
       0,   284,   285,   286,   287,   288,   289,   290,   291,    43,
      44,   292,     0,     0,   293,     0,   294,   584,     0, -1091,
   -1091,   224,     0,   585,   295,   296,     0,   297,   298,   299,
     300, -1093,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093,
   -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093, -1093,
   -1093, -1093,     0,   569,   570,   571,   572,   573,   574,   575,
     576,   577,   578,   579,     0,     0,   277, -1093,     0, -1093,
       0,     0,   278,   279,   280, -1093, -1093,     0,     0, -1093,
      32, -1093, -1093, -1093, -1093,   281,   282,  1032, -1093,   581,
     582,   583, -1093, -1093, -1093, -1093,     0, -1093,     0,   283,
   -1093, -1093,     0,   284,   285,   286,   287,   288,   289,   290,
     291,    43,    44,   292,     0,     0,   293,     0,   294,   584,
       0, -1093, -1093,   224,     0,   585,   295,   296,     0,   297,
     298,   299,   300, -1133,   272,     0,     1,   273,   100,   274,
       0,   275,   276,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   175,   176,   177,   178,   179,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    18,    19,   218,
     219,    22,    23,    24,     0,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,   579,     0,     0,   277,   220,
       0, -1133,     0,     0,   278,   279,   280,    28,    29,     0,
       0, -1133,    32, -1133, -1133, -1133, -1133,   281,   361,   580,
     222,   581,   582,   583, -1133, -1133, -1133, -1133,     0, -1133,
       0,   283, -1133,   223,     0,   284,   285,   286,   287,   288,
     289,   290,   291,    43,    44,   292,     0,     0,   293,     0,
     294,   584,     0, -1133, -1133,   224,     0,   585,   295,   296,
       0,   297,   298,   299,   300, -1137,   272,     0,     1,   273,
     100,   274,     0,   275,   276,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   175,   176,   177,   178,   179,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    18,
      19,   218,   219,    22,    23,    24,     0,   569,   570,   571,
     572,   573,   574,   575,   576,   577,   578,   579,     0,     0,
     277,   220,     0, -1137,     0,     0,   278,   279,   280,    28,
      29,     0,     0, -1137,    32, -1137, -1137, -1137, -1137,   281,
     361,   580,   222,   581,   582,   583, -1137, -1137, -1137, -1137,
       0, -1137,     0,   283, -1137,   223,     0,   284,   285,   286,
     287,   288,   289,   290,   291,    43,    44,   292,     0,     0,
     293,     0,   294,   584,     0, -1137, -1137,   224,     0,   585,
     295,   296,     0,   297,   298,   299,   300, -1134,   272,     0,
       1,   273,   100,   274,     0,   275,   276,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   175,   176,   177,   178,
     179,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    18,    19,   218,   219,    22,    23,    24,     0,   569,
     570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
       0,     0,   277,   220,     0, -1134,     0,     0,   278,   279,
     280,    28,    29,     0,     0, -1134,    32, -1134, -1134, -1134,
   -1134,   281,   361,   580,   222,   581,   582,   583, -1134, -1134,
   -1134, -1134,     0, -1134,     0,   283, -1134,   223,     0,   284,
     285,   286,   287,   288,   289,   290,   291,    43,    44,   292,
       0,     0,   293,     0,   294,   584,     0, -1134, -1134,   224,
       0,   585,   295,   296,     0,   297,   298,   299,   300, -1138,
     272,     0,     1,   273,   100,   274,     0,   275,   276,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   175,   176,
     177,   178,   179,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    18,    19,   218,   219,    22,    23,    24,
       0,   569,   570,   571,   572,   573,   574,   575,   576,   577,
     578,   579,     0,     0,   277,   220,     0, -1138,     0,     0,
     278,   279,   280,    28,    29,     0,     0, -1138,    32, -1138,
   -1138, -1138, -1138,   281,   361,   580,   222,   581,   582,   583,
   -1138, -1138, -1138, -1138,     0, -1138,     0,   283, -1138,   223,
       0,   284,   285,   286,   287,   288,   289,   290,   291,    43,
      44,   292,     0,     0,   293,     0,   294,   584,     0, -1138,
   -1138,   224,     0,   585,   295,   296,     0,   297,   298,   299,
     300, -1129,   560,     0, -1129, -1129, -1129, -1129,     0, -1129,
   -1129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129,     0, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129, -1129, -1129,     0,     0, -1129, -1129,     0, -1129,
       0,     0, -1129, -1129, -1129, -1129, -1129,     0,     0, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129, -1129, -1129, -1129, -1129,     0, -1129,     0, -1129,
   -1129, -1129,     0, -1129, -1129, -1129, -1129, -1129, -1129, -1129,
   -1129, -1129, -1129, -1129,     0,     0, -1129,     0, -1129,   561,
       0, -1129, -1129, -1129,     0, -1129, -1129, -1129,     0, -1129,
   -1129, -1129, -1129, -1130,   560,     0, -1130, -1130, -1130, -1130,
       0, -1130, -1130,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130,     0, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130,     0,     0, -1130, -1130,
       0, -1130,     0,     0, -1130, -1130, -1130, -1130, -1130,     0,
       0, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130, -1130, -1130,     0, -1130,
       0, -1130, -1130, -1130,     0, -1130, -1130, -1130, -1130, -1130,
   -1130, -1130, -1130, -1130, -1130, -1130,     0,     0, -1130,     0,
   -1130,   561,     0, -1130, -1130, -1130,     0, -1130, -1130, -1130,
       0, -1130, -1130, -1130, -1130,  -980,   272,     0,     1,   273,
     100,   274,     0,   275,   276,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,  -980,  -980,  -980,  -980,  -980,  -980,
    -980,  -980,  -980,  -980,  -980,  -980,  -980,  -980,  -980,  -980,
    -980,  -980,  -980,  -980,  -980,  -980,     0,  -980,  -980,  -980,
    -980,  -980,  -980,  -980,  -980,  -980,  -980,  -980,     0,     0,
     277,  -980,     0,  -980,     0,     0,   278,   279,   280,  -980,
    -980,     0,     0,  -980,  -980,  -980,  -980,  -980,  -980,   281,
     282,  -980,  -980,  -980,  -980,  -980,  -980,  -980,  -980,  -980,
       0,  -980,     0,   283,  -980,  -980,     0,   284,   285,   286,
     287,   288,   289,   290,   291,  -980,  -980,   292,     0,     0,
     293,     0,   294,  -980,     0,  1718,  1719,   929,     0,  -980,
     295,   296,     0,   297,   298,   299,   300,  -982,   272,     0,
       1,   273,   100,   274,     0,   275,   276,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,  -982,  -982,  -982,  -982,
    -982,  -982,  -982,  -982,  -982,  -982,  -982,  -982,  -982,  -982,
    -982,  -982,  -982,  -982,  -982,  -982,  -982,  -982,     0,  -982,
    -982,  -982,  -982,  -982,  -982,  -982,  -982,  -982,  -982,  -982,
       0,     0,   277,  -982,     0,  -982,     0,     0,   278,   279,
     280,  -982,  -982,     0,     0,  -982,  -982,  -982,  -982,  -982,
    -982,   281,   282,  -982,  -982,  -982,  -982,  -982,  -982,  -982,
    -982,  -982,     0,  -982,     0,   283,  -982,  -982,     0,   284,
     285,   286,   287,   288,   289,   290,   291,  -982,  -982,   292,
       0,     0,   293,     0,   294,  -982,     0,  -982,  1884,   929,
       0,  -982,   295,   296,     0,   297,   298,   299,   300,  -976,
    1887,     0,  -976,  -976,  -976,  -976,     0,  -976,  -976,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -976,  -976,  -976,
    -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,
    -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,
       0,  -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,
    -976,  -976,     0,     0,  -976,  -976,     0,  -976,     0,     0,
    -976,  -976,  -976,  -976,  -976,     0,     0,  -976,  -976,  -976,
    -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,
    -976,  -976,  -976,  -976,     0,  -976,     0,  -976,  -976,  -976,
       0,  -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,  -976,
    -976,  -976,     0,     0,  -976,     0,  -976,  -976,     0,  -976,
    -976,  -976,     0,  -976,  -976,  -976,     0,  -976,  -976,  -976,
    -976, -1178,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
   -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178,
   -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178, -1178,
   -1178, -1178,     0, -1178, -1178, -1178, -1178, -1178, -1178, -1178,
   -1178, -1178, -1178, -1178,     0,     0,   277, -1178,     0, -1178,
       0,     0,   278,   279,   280, -1178, -1178,     0,     0, -1178,
   -1178, -1178, -1178, -1178, -1178,   281,   282, -1178, -1178, -1178,
   -1178, -1178, -1178, -1178, -1178, -1178,     0, -1178,     0,   283,
   -1178, -1178,     0,   284,   285,   286,   287,   288,   289,   290,
     291, -1178, -1178,   292,     0,     0,   293,     0,   294, -1178,
       0, -1178, -1178, -1178,     0, -1178,   295,   296,     0,   297,
     298,   299,   300,  -977,  1958,     0,  -977,  -977,  -977,  -977,
       0,  -977,  -977,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -977,  -977,  -977,  -977,  -977,  -977,  -977,  -977,  -977,
    -977,  -977,  -977,  -977,  -977,  -977,  -977,  -977,  -977,  -977,
    -977,  -977,  -977,  -977,     0,  -977,  -977,  -977,  -977,  -977,
    -977,  -977,  -977,  -977,  -977,  -977,     0,     0,  -977,  -977,
       0,  -977,     0,     0,  -977,  -977,  -977,  -977,  -977,     0,
       0,  -977,  -977,  -977,  -977,  -977,  -977,  -977,  -977,  -977,
    -977,  -977,  -977,  -977,  -977,  -977,  -977,  -977,     0,  -977,
       0,  -977,  -977,  -977,     0,  -977,  -977,  -977,  -977,  -977,
    -977,  -977,  -977,  -977,  -977,  -977,     0,     0,  -977,     0,
    -977,  -977,     0,  -977,  -977,  -977,     0,  -977,  -977,  -977,
       0,  -977,  -977,  -977,  -977,  -893,   528,     0,  -893,  -893,
    -893,  -893,     0,  -893,  -893,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -893,  -893,  -893,  -893,  -893,  -893,  -893,
    -893,  -893,  -893,  -893,  -893,  -893,  -893,  -893,  -893,  -893,
    -893,  -893,  -893,  -893,  -893,  -893,     0,     0,  -893,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -893,  -893,     0,  -893,     0,     0,  -893,  -893,  -893,  -893,
    -893,     0,     0,  -893,  -893,  -893,  -893,  -893,  -893,  -893,
    -893,  -893,  -893,  -893,     0,     0,  -893,  -893,  -893,  -893,
       0,  -893,     0,  -893,  -893,  -893,     0,  -893,  -893,  -893,
    -893,  -893,  -893,  -893,  -893,  -893,  -893,  -893,     0,     0,
    -893,   529,  -893,  -893,     0,   530,  -893,  -893,     0,     0,
    -893,  -893,     0,  -893,  -893,  -893,  -893,   272,     0,     1,
     273,   100,   274,     0,   275,   276,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   175,   176,   177,   178,   179,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      18,    19,   218,   219,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,   220,     0,     0,     0,     0,   278,   279,   280,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     281,   361,    38,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,   223,     0,   284,   285,
     286,   287,   288,   289,   290,   291,    43,    44,   292,     0,
       0,   293,     0,   294,   904,     0,   905,   906,   682,     0,
       0,   295,   296,     0,   297,   298,   299,   300,  1167,     0,
       1,   273,   100,   274,     0,   275,   276,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   175,   176,   177,   178,
     179,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    18,    19,   218,   219,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,   220,     0,     0,     0,     0,   278,   279,
     280,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   281,   361,    38,   222,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   223,     0,   284,
     285,   286,   287,   288,   289,   290,   291,    43,    44,   292,
       0,     0,   293,     0,   294,   904,     0,   905,  -109,   682,
       0,     0,   295,   296,     0,   297,   298,   299,   300,  1174,
       0,     1,   273,   100,   274,     0,   275,   276,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   175,   176,   177,
     178,   179,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    18,    19,   218,   219,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   277,   220,     0,     0,     0,     0,   278,
     279,   280,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   281,   361,    38,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   223,     0,
     284,   285,   286,   287,   288,   289,   290,   291,    43,    44,
     292,     0,     0,   293,     0,   294,   904,     0,   905,   -97,
     682,     0,     0,   295,   296,     0,   297,   298,   299,   300,
    1178,     0,     1,   273,   100,   274,     0,   275,   276,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   175,   176,
     177,   178,   179,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    18,    19,   218,   219,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,   220,     0,     0,     0,     0,
     278,   279,   280,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,   281,   361,    38,   222,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   223,
       0,   284,   285,   286,   287,   288,   289,   290,   291,    43,
      44,   292,     0,     0,   293,     0,   294,   904,     0,   905,
    -101,   682,     0,     0,   295,   296,     0,   297,   298,   299,
     300,   272,     0,     1,   273,   100,   274,     0,   275,   276,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   175,
     176,   177,   178,   179,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    18,    19,   218,   219,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   277,   220,     0,     0,     0,
       0,   278,   279,   280,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   281,   361,    38,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   283,     0,
     223,     0,   284,   285,   286,   287,   288,   289,   290,   291,
      43,    44,   292,     0,     0,   293,     0,   294,  1433,     0,
     905,   -64,   682,     0,     0,   295,   296,     0,   297,   298,
     299,   300,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     175,   176,   177,   178,   179,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    18,    19,   218,   219,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   277,   220,     0,     0,
       0,     0,   278,   279,   280,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   281,   361,    38,   222,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   283,
       0,   223,     0,   284,   285,   286,   287,   288,   289,   290,
     291,    43,    44,   292,     0,     0,   293,     0,   294,  1442,
       0,   905,  1443,   682,     0,     0,   295,   296,     0,   297,
     298,   299,   300,  1490,     0,     1,   273,   100,   274,     0,
     275,   276,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   175,   176,   177,   178,   179,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    18,    19,   218,   219,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   277,   220,     0,
       0,     0,     0,   278,   279,   280,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   281,   361,    38,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     283,     0,   223,     0,   284,   285,   286,   287,   288,   289,
     290,   291,    43,    44,   292,     0,     0,   293,     0,   294,
     904,     0,   905,   -80,   682,     0,     0,   295,   296,     0,
     297,   298,   299,   300,   272,     0,     1,   273,   100,   274,
       0,   275,   276,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   175,   176,   177,   178,   179,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    18,    19,   218,
     219,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   277,   220,
       0,     0,     0,     0,   278,   279,   280,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,   281,   361,    38,
     222,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   283,     0,   223,     0,   284,   285,   286,   287,   288,
     289,   290,   291,    43,    44,   292,     0,     0,   293,     0,
     294,  1442,     0,   905,  -106,   682,     0,     0,   295,   296,
       0,   297,   298,   299,   300,   272,     0,     1,   273,   100,
     274,     0,   275,   276,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   175,   176,   177,   178,   179,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    18,    19,
     218,   219,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   277,
     220,     0,     0,     0,     0,   278,   279,   280,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   281,   361,
      38,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   283,     0,   223,     0,   284,   285,   286,   287,
     288,   289,   290,   291,    43,    44,   292,     0,     0,   293,
       0,   294,  1442,     0,   905,   -96,   682,     0,     0,   295,
     296,     0,   297,   298,   299,   300,   272,     0,     1,   273,
     100,   274,     0,   275,   276,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   175,   176,   177,   178,   179,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    18,
      19,   218,   219,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     277,   220,     0,     0,     0,     0,   278,   279,   280,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   281,
     361,    38,   222,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   283,     0,   223,     0,   284,   285,   286,
     287,   288,   289,   290,   291,    43,    44,   292,     0,     0,
     293,     0,   294,  1442,     0,   905,  -100,   682,     0,     0,
     295,   296,     0,   297,   298,   299,   300,  1683,     0,     1,
     273,   100,   274,     0,   275,   276,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   175,   176,   177,   178,   179,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      18,    19,   218,   219,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,   220,     0,     0,     0,     0,   278,   279,   280,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     281,   361,    38,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,   223,     0,   284,   285,
     286,   287,   288,   289,   290,   291,    43,    44,   292,     0,
       0,   293,     0,   294,   904,     0,   905,   -87,   682,     0,
       0,   295,   296,     0,   297,   298,   299,   300,   272,     0,
       1,   273,   100,   274,     0,   275,   276,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   175,   176,   177,   178,
     179,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    18,    19,   218,   219,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,   220,     0,     0,     0,     0,   278,   279,
     280,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   281,   361,    38,   222,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   283,     0,   223,     0,   284,
     285,   286,   287,   288,   289,   290,   291,    43,    44,   292,
       0,     0,   293,     0,   294,  1442,     0,   905,   -77,   682,
       0,     0,   295,   296,     0,   297,   298,   299,   300,   272,
       0,     1,   273,   100,   274,     0,   275,   276,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   175,   176,   177,
     178,   179,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    18,    19,   218,   219,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   277,   220,     0,     0,     0,     0,   278,
     279,   280,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   281,   361,    38,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   283,     0,   223,     0,
     284,   285,   286,   287,   288,   289,   290,   291,    43,    44,
     292,     0,     0,   293,     0,   294,  1442,     0,   905,   -84,
     682,     0,     0,   295,   296,     0,   297,   298,   299,   300,
     272,     0,     1,   273,   100,   274,     0,   275,   276,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   175,   176,
     177,   178,   179,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    18,    19,   218,   219,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,   220,     0,     0,     0,     0,
     278,   279,   280,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,   281,   361,    38,   222,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,   223,
       0,   284,   285,   286,   287,   288,   289,   290,   291,    43,
      44,   292,     0,     0,   293,   272,   294,     1,   273,   100,
     274,     0,   275,   276,   295,   296,     0,   297,   298,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   175,   176,   177,   178,   179,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    18,    19,
     218,   219,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   788,
     220,     0,     0,     0,     0,   278,   279,   280,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   281,   361,
      38,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   283,     0,   223,     0,   284,   285,   286,   287,
     288,   289,   290,   291,    43,    44,   292,     0,     0,   293,
     272,   294,     1,   273,   100,   274,     0,   275,   276,   295,
     296,     0,   297,   298,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,    27,     0,     0,     0,     0,
     278,   279,   280,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,   281,   386,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,    40,
       0,   284,   285,   286,   287,   288,   289,   290,   291,    43,
      44,   292,     0,     0,   293,   671,   294,     0,     0,     0,
       0,     0,     0,     0,   295,   296,     0,   297,   298,   299,
     300,   272,     0,     1,   273,   100,   274,     0,   275,   276,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1096,    27,     0,     0,     0,
       0,   278,   279,   280,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,   281,   386,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   283,     0,
      40,     0,   284,   285,   286,   287,   288,   289,   290,   291,
      43,    44,   292,     0,     0,   645,   671,   294,     0,     0,
       0,     0,     0,     0,     0,   295,   296,     0,   297,   298,
     299,   300,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   277,    27,     0,     0,
       0,     0,   278,   279,   280,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,   281,   386,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   283,
       0,    40,     0,   284,   285,   286,   287,   288,   289,   290,
     291,    43,    44,   292,     0,     0,   293,   272,   294,     1,
     273,   100,   274,   224,   275,   276,   295,   296,     0,   297,
     298,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,    27,     0,     0,     0,     0,   278,   279,   280,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     281,   386,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,    40,     0,   284,   285,
     286,   287,   288,   289,   290,   291,    43,    44,   292,     0,
       0,   645,   671,   294,     0,     0,     0,     0,     0,     0,
       0,   295,   296,     0,   297,   298,   299,   300,   272,     0,
       1,   273,   100,   274,     0,   275,   276,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,    27,     0,     0,     0,     0,   278,   279,
     280,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,   281,   386,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   283,     0,    40,     0,   284,
     285,   286,   287,   288,   289,   290,   291,    43,    44,   811,
       0,     0,   812,   671,   294,     0,     0,     0,     0,     0,
       0,     0,   295,   296,     0,   297,   298,   299,   300,   272,
       0,     1,   273,   100,   274,     0,   275,   276,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1024,  1025,  1026,   572,  1027,  1028,  1029,  1030,   577,   578,
    1031,     0,     0,   277,     0,     0,     0,     0,     0,   278,
     279,   280,     0,     0,     0,     0,     0,    32,     0,     0,
       0,     0,   281,   282,  1032,     0,   581,   582,   583,     0,
     272,     0,     1,   273,   100,   274,   283,   275,   276,     0,
     284,   285,   286,   287,   288,   289,   290,   291,    43,    44,
     292,     0,     0,   293,  -474,   294,   584,     2,  -474,     0,
     224,     0,   585,   295,   296,     0,   297,   298,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1024,  1025,  1026,   572,  1027,  1028,  1029,  1030,   577,
     578,  1031,     0,     0,   277,     0,     0,     0,     0,     0,
     278,   279,   280,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,   281,   282,  1032,     0,   581,   582,   583,
       0,   272,     0,     1,   273,   100,   274,   283,   275,   276,
       0,   284,   285,   286,   287,   288,   289,   290,   291,    43,
      44,   292,     0,     0,   293,  1067,   294,   584,     2,  1068,
       0,   224,     0,   585,   295,   296,     0,   297,   298,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1024,  1025,  1026,   572,  1027,  1028,  1029,  1030,
     577,   578,  1031,     0,     0,   277,     0,     0,     0,     0,
       0,   278,   279,   280,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,   281,   282,  1032,     0,   581,   582,
     583,     0,   272,     0,     1,   273,   100,   274,   283,   275,
     276,     0,   284,   285,   286,   287,   288,   289,   290,   291,
      43,    44,   292,     0,     0,   293,     0,   294,   584,     2,
       0,     0,   224,     0,   585,   295,   296,     0,   297,   298,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   569,   570,   571,   572,   573,   574,   575,
     576,   577,   578,   579,     0,     0,   277,     0,     0,     0,
       0,     0,   278,   279,   280,     0,     0,     0,     0,     0,
      32,     0,     0,     0,     0,   281,   282,  1032,     0,   581,
     582,   583,     0,  1744,     0,     1,   273,   100,   274,   283,
     275,   276,     0,   284,   285,   286,   287,   288,   289,   290,
     291,    43,    44,   292,     0,     0,   293,     0,   294,   584,
       2,     0,     0,   224,     0,   585,   295,   296,     0,   297,
     298,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1024,  1025,  1026,   572,  1027,  1028,
    1029,  1030,   577,   578,  1031,     0,     0,   277,     0,     0,
       0,     0,     0,   278,   279,   280,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,   281,   282,  1032,     0,
     581,   582,   583,     0,   272,     0,     1,   273,   100,   274,
     283,   275,   276,     0,   284,   285,   286,   287,   288,   289,
     290,   291,    43,    44,   292,     0,     0,   293,     0,   294,
     584,     2,     0,     0,   224,     0,   585,   295,   296,     0,
     297,   298,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   277,     0,
       0,     0,     0,     0,   278,   279,   280,   272,     0,     1,
     273,   100,   274,     0,   275,   276,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   283,     0,     0,     2,   284,   285,   286,   287,   288,
     289,   290,   291,     0,     0,   292,     0,     0,   293,  1067,
     294,     0,     0,  1640,     0,     0,     0,  1664,   295,   296,
       0,   297,   298,   299,   300,     0,     0,     0,     0,     0,
       0,   277,     0,     0,     0,     0,     0,   278,   279,   280,
    1764,     0,     1,   273,   100,   274,     0,   275,   276,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,     0,     2,   284,   285,
     286,   287,   288,   289,   290,   291,     0,     0,   292,     0,
       0,   293,  1067,   294,  1530,     0,  1068,     0,     0,     0,
       0,   295,   296,     0,   297,   298,   299,   300,     0,     0,
       0,     0,     0,     0,   277,     0,     0,     0,     0,     0,
     278,   279,   280,   272,     0,     1,   273,   100,   274,     0,
     275,   276,     0,   281,   282,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,     0,
       2,   284,   285,   286,   287,   288,   289,   290,   291,     0,
       0,   292,     0,     0,   293,  1067,   294,  1765,     0,  1068,
       0,     0,     0,     0,   295,   296,     0,   297,   298,   299,
     300,     0,     0,     0,     0,     0,     0,   277,     0,     0,
       0,     0,     0,   278,   279,   280,   272,     0,     1,   273,
     100,   274,     0,   275,   276,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     283,     0,     0,     2,   284,   285,   286,   287,   288,   289,
     290,   291,     0,     0,   292,     0,     0,   293,  1067,   294,
       0,     0,  1068,     0,     0,     0,     0,   295,   296,  1786,
     297,   298,   299,   300,     0,     0,     0,     0,     0,     0,
     277,     0,     0,     0,     0,     0,   278,   279,   280,   272,
       0,     1,   273,   100,   274,     0,   275,   276,     0,   281,
     282,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   283,     0,     0,     2,   284,   285,   286,
     287,   288,   289,   290,   291,     0,     0,   292,     0,     0,
     293,  1067,   294,     0,     0,  1068,     0,     0,     0,     0,
     295,   296,  1789,   297,   298,   299,   300,     0,     0,     0,
       0,     0,     0,   277,     0,     0,     0,     0,     0,   278,
     279,   280,  1907,     0,     1,   273,   100,   274,     0,   275,
     276,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   283,     0,     0,     2,
     284,   285,   286,   287,   288,   289,   290,   291,     0,     0,
     292,     0,     0,   293,  1067,   294,  1765,     0,  1068,     0,
       0,     0,     0,   295,   296,     0,   297,   298,   299,   300,
       0,     0,     0,     0,     0,     0,   277,     0,     0,     0,
       0,     0,   278,   279,   280,   272,     0,     1,   273,   100,
     274,     0,   275,   276,     0,   281,   282,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   283,
       0,     0,     2,   284,   285,   286,   287,   288,   289,   290,
     291,     0,     0,   292,     0,     0,   293,  1067,   294,  1765,
       0,  1068,     0,     0,     0,     0,   295,   296,     0,   297,
     298,   299,   300,     0,     0,     0,     0,     0,     0,   277,
       0,     0,     0,     0,     0,   278,   279,   280,   272,     0,
       1,   273,   100,   274,     0,   275,   276,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   283,     0,     0,     2,   284,   285,   286,   287,
     288,   289,   290,   291,     0,     0,   292,     0,     0,   293,
    1968,   294,  1969,     0,  1063,     0,     0,     0,     0,   295,
     296,     0,   297,   298,   299,   300,     0,     0,     0,     0,
       0,     0,   277,     0,     0,     0,     0,     0,   278,   279,
     280,   272,     0,     1,   273,   100,   274,     0,   275,   276,
       0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   283,     0,     0,     2,   284,
     285,   286,   287,   288,   289,   290,   291,     0,     0,   292,
       0,     0,   293,     0,   294,     0,     0,  1997,  1998,   929,
       0,     0,   295,   296,     0,   297,   298,   299,   300,     0,
       0,     0,     0,     0,     0,   277,     0,     0,     0,     0,
       0,   278,   279,   280,   272,     0,     1,   273,   100,   274,
       0,   275,   276,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   283,     0,
       0,     2,   284,   285,   286,   287,   288,   289,   290,   291,
       0,     0,   292,     0,     0,   293,  1067,   294,  1967,     0,
    1068,     0,     0,     0,     0,   295,   296,     0,   297,   298,
     299,   300,     0,     0,     0,     0,     0,     0,   277,     0,
       0,     0,     0,     0,   278,   279,   280,   272,     0,     1,
     273,   100,   274,     0,   275,   276,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   283,     0,     0,     2,   284,   285,   286,   287,   288,
     289,   290,   291,     0,     0,   292,     0,     0,   293,  1183,
     294,     0,     0,     0,     0,   682,     0,     0,   295,   296,
       0,   297,   298,   299,   300,     0,     0,     0,     0,     0,
       0,   277,     0,     0,     0,     0,     0,   278,   279,   280,
     272,     0,     1,   273,   100,   274,     0,   275,   276,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,     0,     2,   284,   285,
     286,   287,   288,   289,   290,   291,     0,     0,   292,     0,
       0,   293,  1250,   294,     0,     0,     0,     0,   682,     0,
       0,   295,   296,     0,   297,   298,   299,   300,     0,     0,
       0,     0,     0,     0,   277,     0,     0,     0,     0,     0,
     278,   279,   280,   272,     0,     1,   273,   100,   274,     0,
     275,   276,     0,   281,   282,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,     0,
       2,   284,   285,   286,   287,   288,   289,   290,   291,     0,
       0,   292,     0,     0,   293,     0,   294,  1043,     0,     0,
       0,   682,     0,     0,   295,   296,     0,   297,   298,   299,
     300,     0,     0,     0,     0,     0,     0,   277,     0,     0,
       0,     0,     0,   278,   279,   280,  1519,     0,     1,   273,
     100,   274,     0,   275,   276,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     283,     0,     0,     2,   284,   285,   286,   287,   288,   289,
     290,   291,     0,     0,   292,     0,     0,   293,  1067,   294,
       0,     0,  1068,     0,     0,     0,     0,   295,   296,     0,
     297,   298,   299,   300,     0,     0,     0,     0,     0,     0,
     277,     0,     0,     0,     0,     0,   278,   279,   280,   272,
       0,     1,   273,   100,   274,     0,   275,   276,     0,   281,
     282,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   283,     0,     0,     2,   284,   285,   286,
     287,   288,   289,   290,   291,     0,     0,   292,     0,     0,
     293,  1520,   294,  1521,     0,     0,     0,     0,     0,     0,
     295,   296,     0,   297,   298,   299,   300,     0,     0,     0,
       0,     0,     0,   277,     0,     0,     0,     0,     0,   278,
     279,   280,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   283,     0,     0,     2,
     284,   285,   286,   287,   288,   289,   290,   291,     0,     0,
     292,     0,     0,   293,     0,   294,  1529,     0,  1063,     0,
       0,     0,     0,   295,   296,     0,   297,   298,   299,   300,
       0,     0,     0,     0,     0,     0,   277,     0,     0,     0,
       0,     0,   278,   279,   280,   272,     0,     1,   273,   100,
     274,     0,   275,   276,     0,   281,   282,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   283,
       0,     0,     2,   284,   285,   286,   287,   288,   289,   290,
     291,     0,     0,   292,     0,     0,   293,  1565,   294,     0,
       0,     0,     0,   682,     0,     0,   295,   296,     0,   297,
     298,   299,   300,     0,     0,     0,     0,     0,     0,   277,
       0,     0,     0,     0,     0,   278,   279,   280,   272,     0,
       1,   273,   100,   274,     0,   275,   276,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   283,     0,     0,     2,   284,   285,   286,   287,
     288,   289,   290,   291,     0,     0,   292,     0,     0,   293,
    1574,   294,     0,     0,     0,     0,   682,     0,     0,   295,
     296,     0,   297,   298,   299,   300,     0,     0,     0,     0,
       0,     0,   277,     0,     0,     0,     0,     0,   278,   279,
     280,   272,     0,     1,   273,   100,   274,     0,   275,   276,
       0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   283,     0,     0,     2,   284,
     285,   286,   287,   288,   289,   290,   291,     0,     0,   292,
       0,     0,   293,  1606,   294,     0,     0,  1063,     0,     0,
       0,     0,   295,   296,     0,   297,   298,   299,   300,     0,
       0,     0,     0,     0,     0,   277,     0,     0,     0,     0,
       0,   278,   279,   280,   272,     0,     1,   273,   100,   274,
       0,   275,   276,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   283,     0,
       0,     2,   284,   285,   286,   287,   288,   289,   290,   291,
       0,     0,   292,     0,     0,   293,     0,   294,     0,     0,
    1637,     0,     0,     0,  1638,   295,   296,     0,   297,   298,
     299,   300,     0,     0,     0,     0,     0,     0,   277,     0,
       0,     0,     0,     0,   278,   279,   280,   272,     0,     1,
     273,   100,   274,     0,   275,   276,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   283,     0,     0,     2,   284,   285,   286,   287,   288,
     289,   290,   291,     0,     0,   292,     0,     0,   293,     0,
     294,     0,     0,  1063,     0,     0,     0,     0,   295,   296,
    1644,   297,   298,   299,   300,     0,     0,     0,     0,     0,
       0,   277,     0,     0,     0,     0,     0,   278,   279,   280,
     272,     0,     1,   273,   100,   274,     0,   275,   276,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,     0,     2,   284,   285,
     286,   287,   288,   289,   290,   291,     0,     0,   292,     0,
       0,   293,     0,   294,     0,     0,  1637,     0,     0,     0,
    1646,   295,   296,     0,   297,   298,   299,   300,     0,     0,
       0,     0,     0,     0,   277,     0,     0,     0,     0,     0,
     278,   279,   280,   272,     0,     1,   273,   100,   274,     0,
     275,   276,     0,   281,   282,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,     0,
       2,   284,   285,   286,   287,   288,   289,   290,   291,     0,
       0,   292,     0,     0,   293,     0,   294,     0,     0,  1637,
       0,     0,     0,  1658,   295,   296,     0,   297,   298,   299,
     300,     0,     0,     0,     0,     0,     0,   277,     0,     0,
       0,     0,     0,   278,   279,   280,   272,     0,     1,   273,
     100,   274,     0,   275,   276,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     283,     0,     0,     2,   284,   285,   286,   287,   288,   289,
     290,   291,     0,     0,   292,     0,     0,   293,     0,   294,
       0,     0,  1637,     0,     0,     0,  1662,   295,   296,     0,
     297,   298,   299,   300,     0,     0,     0,     0,     0,     0,
     277,     0,     0,     0,     0,     0,   278,   279,   280,   272,
       0,     1,   273,   100,   274,     0,   275,   276,     0,   281,
     282,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   283,     0,     0,     2,   284,   285,   286,
     287,   288,   289,   290,   291,     0,     0,   292,     0,     0,
     293,  1740,   294,     0,     0,  1063,     0,     0,     0,     0,
     295,   296,     0,   297,   298,   299,   300,     0,     0,     0,
       0,     0,     0,   277,     0,     0,     0,     0,     0,   278,
     279,   280,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   283,     0,     0,     2,
     284,   285,   286,   287,   288,   289,   290,   291,     0,     0,
     292,     0,     0,   293,  1742,   294,     0,     0,  1063,     0,
       0,     0,     0,   295,   296,     0,   297,   298,   299,   300,
       0,     0,     0,     0,     0,     0,   277,     0,     0,     0,
       0,     0,   278,   279,   280,   272,     0,     1,   273,   100,
     274,     0,   275,   276,     0,   281,   282,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   283,
       0,     0,     2,   284,   285,   286,   287,   288,   289,   290,
     291,     0,     0,   292,     0,     0,   293,  1743,   294,     0,
       0,  1068,     0,     0,     0,     0,   295,   296,     0,   297,
     298,   299,   300,     0,     0,     0,     0,     0,     0,   277,
       0,     0,     0,     0,     0,   278,   279,   280,   272,     0,
       1,   273,   100,   274,     0,   275,   276,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   283,     0,     0,     2,   284,   285,   286,   287,
     288,   289,   290,   291,     0,     0,   292,     0,     0,   293,
    1746,   294,     0,     0,  1063,     0,     0,     0,     0,   295,
     296,     0,   297,   298,   299,   300,     0,     0,     0,     0,
       0,     0,   277,     0,     0,     0,     0,     0,   278,   279,
     280,   272,     0,     1,   273,   100,   274,     0,   275,   276,
       0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   283,     0,     0,     2,   284,
     285,   286,   287,   288,   289,   290,   291,     0,     0,   292,
       0,     0,   293,  1520,   294,  1521,     0,     0,     0,     0,
       0,     0,   295,   296,     0,   297,   298,   299,   300,     0,
       0,     0,     0,     0,     0,   277,     0,     0,     0,     0,
       0,   278,   279,   280,  1766,     0,     1,   273,   100,   274,
       0,   275,   276,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   283,     0,
       0,     2,   284,   285,   286,   287,   288,   289,   290,   291,
       0,     0,   292,     0,     0,   293,     0,   294,  1763,     0,
    1063,     0,     0,     0,     0,   295,   296,     0,   297,   298,
     299,   300,     0,     0,     0,     0,     0,     0,   277,     0,
       0,     0,     0,     0,   278,   279,   280,   272,     0,     1,
     273,   100,   274,     0,   275,   276,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   283,     0,     0,     2,   284,   285,   286,   287,   288,
     289,   290,   291,     0,     0,   292,     0,     0,   293,  1767,
     294,  1521,     0,     0,     0,     0,     0,     0,   295,   296,
       0,   297,   298,   299,   300,     0,     0,     0,     0,     0,
       0,   277,     0,     0,     0,     0,     0,   278,   279,   280,
     272,     0,     1,   273,   100,   274,     0,   275,   276,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,     0,     2,   284,   285,
     286,   287,   288,   289,   290,   291,     0,     0,   292,     0,
       0,   293,     0,   294,     0,     0,  1063,     0,     0,     0,
       0,   295,   296,  1785,   297,   298,   299,   300,     0,     0,
       0,     0,     0,     0,   277,     0,     0,     0,     0,     0,
     278,   279,   280,   272,     0,     1,   273,   100,   274,     0,
     275,   276,     0,   281,   282,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,     0,
       2,   284,   285,   286,   287,   288,   289,   290,   291,     0,
       0,   292,     0,     0,   293,     0,   294,     0,     0,  1063,
       0,     0,     0,     0,   295,   296,  1788,   297,   298,   299,
     300,     0,     0,     0,     0,     0,     0,   277,     0,     0,
       0,     0,     0,   278,   279,   280,   272,     0,     1,   273,
     100,   274,     0,   275,   276,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     283,     0,     0,     2,   284,   285,   286,   287,   288,   289,
     290,   291,     0,     0,   292,     0,     0,   293,  1892,   294,
       0,     0,  1063,     0,     0,     0,     0,   295,   296,     0,
     297,   298,   299,   300,     0,     0,     0,     0,     0,     0,
     277,     0,     0,     0,     0,     0,   278,   279,   280,   272,
       0,     1,   273,   100,   274,     0,   275,   276,     0,   281,
     282,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   283,     0,     0,     2,   284,   285,   286,
     287,   288,   289,   290,   291,     0,     0,   292,     0,     0,
     293,  1741,   294,     0,     0,  1068,     0,     0,     0,     0,
     295,   296,     0,   297,   298,   299,   300,     0,     0,     0,
       0,     0,     0,   277,     0,     0,     0,     0,     0,   278,
     279,   280,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   283,     0,     0,     2,
     284,   285,   286,   287,   288,   289,   290,   291,     0,     0,
     292,     0,     0,   293,  1899,   294,     0,     0,  1063,     0,
       0,     0,     0,   295,   296,     0,   297,   298,   299,   300,
       0,     0,     0,     0,     0,     0,   277,     0,     0,     0,
       0,     0,   278,   279,   280,   272,     0,     1,   273,   100,
     274,     0,   275,   276,     0,   281,   282,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   283,
       0,     0,     2,   284,   285,   286,   287,   288,   289,   290,
     291,     0,     0,   292,     0,     0,   293,  1767,   294,  1521,
       0,     0,     0,     0,     0,     0,   295,   296,     0,   297,
     298,   299,   300,     0,     0,     0,     0,     0,     0,   277,
       0,     0,     0,     0,     0,   278,   279,   280,   272,     0,
       1,   273,   100,   274,     0,   275,   276,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   283,     0,     0,     2,   284,   285,   286,   287,
     288,   289,   290,   291,     0,     0,   292,     0,     0,   293,
    1972,   294,     0,     0,  1063,     0,     0,     0,     0,   295,
     296,     0,   297,   298,   299,   300,     0,     0,     0,     0,
       0,     0,   277,     0,     0,     0,     0,     0,   278,   279,
     280,   272,     0,     1,   273,   100,   274,     0,   275,   276,
       0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   283,     0,     0,     2,   284,
     285,   286,   287,   288,   289,   290,   291,     0,     0,   292,
       0,     0,   293,  2004,   294,     0,     0,  1063,     0,     0,
       0,     0,   295,   296,     0,   297,   298,   299,   300,     0,
       0,     0,     0,     0,     0,   277,     0,     0,     0,     0,
       0,   278,   279,   280,   272,     0,     1,   273,   100,   274,
       0,   275,   276,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   283,     0,
       0,     2,   284,   285,   286,   287,   288,   289,   290,   291,
       0,     0,   292,     0,     0,   293,  2005,   294,     0,     0,
    1063,     0,     0,     0,     0,   295,   296,     0,   297,   298,
     299,   300,     0,     0,     0,     0,     0,     0,   277,     0,
       0,     0,     0,     0,   278,   279,   280,   272,     0,     1,
     273,   100,   274,     0,   275,   276,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   283,     0,     0,     2,   284,   285,   286,   287,   288,
     289,   290,   291,     0,     0,   292,     0,     0,   293,     0,
     294,     0,     0,     0,  2032,   929,     0,     0,   295,   296,
       0,   297,   298,   299,   300,     0,     0,     0,     0,     0,
       0,   277,     0,     0,     0,     0,     0,   278,   279,   280,
     272,     0,     1,   273,   100,   274,     0,   275,   276,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,     0,     2,   284,   285,
     286,   287,   288,   289,   290,   291,     0,     0,   292,     0,
       0,   293,  2033,   294,     0,     0,  1063,     0,     0,     0,
       0,   295,   296,     0,   297,   298,   299,   300,     0,     0,
       0,     0,     0,     0,   277,     0,     0,     0,     0,     0,
     278,   279,   280,   272,     0,     1,   273,   100,   274,     0,
     275,   276,     0,   281,   282,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,     0,
       2,   284,   285,   286,   287,   288,   289,   290,   291,     0,
       0,   292,     0,     0,   293,     0,   294,     0,     0,     0,
       0,     0,     0,     0,   295,   296,   499,   297,   298,   299,
     300,     0,     0,     0,     0,     0,     0,   277,     0,     0,
       0,     0,     0,   278,   279,   280,   272,     0,     1,   273,
     100,   274,     0,   275,   276,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     283,     0,     0,     2,   284,   285,   286,   287,   288,   289,
     290,   291,     0,     0,   292,     0,     0,   293,     0,   294,
       0,     0,     0,     0,   682,     0,     0,   295,   296,     0,
     297,   298,   299,   300,     0,     0,     0,     0,     0,     0,
     277,     0,     0,     0,     0,     0,   278,   279,   280,   272,
       0,     1,   273,   100,   274,     0,   275,   276,     0,   281,
     282,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   283,     0,     0,     2,   284,   285,   286,
     287,   288,   289,   290,   291,     0,     0,   292,     0,     0,
     293,     0,   294,     0,     0,     0,     0,   929,     0,     0,
     295,   296,     0,   297,   298,   299,   300,     0,     0,     0,
       0,     0,     0,   277,     0,     0,     0,     0,     0,   278,
     279,   280,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   283,     0,     0,     2,
     284,   285,   286,   287,   288,   289,   290,   291,     0,     0,
     292,     0,     0,   293,     0,   294,     0,     0,     0,     0,
       0,     0,     0,   295,   296,   965,   297,   298,   299,   300,
       0,     0,     0,     0,     0,     0,   277,     0,     0,     0,
       0,     0,   278,   279,   280,   272,     0,     1,   273,   100,
     274,     0,   275,   276,     0,   281,   282,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   283,
       0,     0,     2,   284,   285,   286,   287,   288,   289,   290,
     291,     0,     0,   292,     0,     0,   293,     0,   294,     0,
       0,     0,     0,     0,     0,  1016,   295,   296,     0,   297,
     298,   299,   300,     0,     0,     0,     0,     0,     0,   277,
       0,     0,     0,     0,     0,   278,   279,   280,  1380,     0,
       1,   273,   100,   274,     0,   275,   276,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   283,     0,     0,     2,   284,   285,   286,   287,
     288,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     671,   294,     0,     0,     0,     0,     0,     0,     0,   295,
     296,     0,   297,   298,   299,   300,     0,     0,     0,     0,
       0,     0,   277,     0,     0,     0,     0,     0,   278,   279,
     280,   272,     0,     1,   273,   100,   274,     0,   275,   276,
       0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   283,     0,     0,     2,   284,
     285,   286,   287,   288,   289,   290,   291,     0,     0,   292,
       0,     0,   293,     0,   294,     0,     0,     0,     0,   682,
       0,     0,   295,   296,     0,   297,   298,   299,   300,     0,
       0,     0,     0,     0,     0,   277,     0,     0,     0,     0,
       0,   278,   279,   280,   272,     0,     1,   273,   100,   274,
       0,   275,   276,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   283,     0,
       0,     2,   284,   285,   286,   287,   288,   289,   290,   291,
       0,     0,   292,     0,     0,   293,     0,   294,     0,     0,
       0,     0,     0,     0,     0,   295,   296,  1472,   297,   298,
     299,   300,     0,     0,     0,     0,     0,     0,   277,     0,
       0,     0,     0,     0,   278,   279,   280,   272,     0,     1,
     273,   100,   274,     0,   275,   276,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   283,     0,     0,     2,   284,   285,   286,   287,   288,
     289,   290,   291,     0,     0,   292,     0,     0,   293,  1503,
     294,     0,     0,     0,     0,     0,     0,     0,   295,   296,
       0,   297,   298,   299,   300,     0,     0,     0,     0,     0,
       0,   277,     0,     0,     0,     0,     0,   278,   279,   280,
    1708,     0,     1,   273,   100,   274,     0,   275,   276,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,     0,     2,   284,   285,
     286,   287,   288,   289,   290,   291,     0,     0,   292,     0,
       0,   293,     0,   294,     0,     0,     0,     0,     0,     0,
    1506,   295,   296,     0,   297,   298,   299,   300,     0,     0,
       0,     0,     0,     0,   277,     0,     0,     0,     0,     0,
     278,   279,   280,  1711,     0,     1,   273,   100,   274,     0,
     275,   276,     0,   281,   282,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,     0,
       2,   284,   285,   286,   287,   288,   289,   290,   291,     0,
       0,   292,     0,     0,   293,     0,   294,     0,     0,     0,
       0,   682,     0,     0,   295,   296,     0,   297,   298,   299,
     300,     0,     0,     0,     0,     0,     0,   277,     0,     0,
       0,     0,     0,   278,   279,   280,  1715,     0,     1,   273,
     100,   274,     0,   275,   276,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     283,     0,     0,     2,   284,   285,   286,   287,   288,   289,
     290,   291,     0,     0,   292,     0,     0,   293,     0,   294,
       0,     0,     0,     0,   682,     0,     0,   295,   296,     0,
     297,   298,   299,   300,     0,     0,     0,     0,     0,     0,
     277,     0,     0,     0,     0,     0,   278,   279,   280,   272,
       0,     1,   273,   100,   274,     0,   275,   276,     0,   281,
     282,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   283,     0,     0,     2,   284,   285,   286,
     287,   288,   289,   290,   291,     0,     0,   292,     0,     0,
     293,     0,   294,     0,     0,     0,     0,   682,     0,     0,
     295,   296,     0,   297,   298,   299,   300,     0,     0,     0,
       0,     0,     0,   277,     0,     0,     0,     0,     0,   278,
     279,   280,   272,     0,     1,   273,   100,   274,     0,   275,
     276,     0,   281,   282,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   283,     0,     0,     2,
     284,   285,   286,   287,   288,   289,   290,   291,     0,     0,
     292,     0,     0,   293,  1753,   294,     0,     0,     0,     0,
       0,     0,     0,   295,   296,     0,   297,   298,   299,   300,
       0,     0,     0,     0,     0,     0,   277,     0,     0,     0,
       0,     0,   278,   279,   280,   272,     0,     1,   273,   100,
     274,     0,   275,   276,     0,   281,   282,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   283,
       0,     0,     2,   284,   285,   286,   287,   288,   289,   290,
     291,     0,     0,   292,     0,     0,  1809,     0,   294,     0,
       0,     0,     0,  1810,     0,     0,   295,   296,     0,   297,
     298,   299,   300,     0,     0,     0,     0,     0,     0,   277,
       0,     0,     0,     0,     0,   278,   279,   280,   272,     0,
       1,   273,   100,   274,     0,   275,   276,     0,   281,   282,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   283,     0,     0,     2,   284,   285,   286,   287,
     288,   289,   290,   291,     0,     0,   292,     0,     0,   293,
    1908,   294,     0,     0,     0,     0,     0,     0,     0,   295,
     296,     0,   297,   298,   299,   300,     0,     0,     0,     0,
       0,     0,   277,     0,     0,     0,     0,     0,   278,   279,
     280,   272,     0,     1,   273,   100,   274,     0,   275,   276,
       0,   281,   282,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   283,     0,     0,     2,   284,
     285,   286,   287,   288,   289,   290,   291,     0,     0,   292,
       0,     0,   293,  1963,   294,     0,     0,     0,     0,     0,
       0,     0,   295,   296,     0,   297,   298,   299,   300,     0,
       0,     0,     0,     0,     0,   277,     0,     0,     0,     0,
       0,   278,   279,   280,   272,     0,     1,   273,   100,   274,
       0,   275,   276,     0,   281,   282,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   283,     0,
       0,     2,   284,   285,   286,   287,   288,   289,   290,   291,
       0,     0,   292,     0,     0,   293,     0,   294,     0,     0,
       0,     0,  1810,     0,     0,   295,   296,     0,   297,   298,
     299,   300,     0,     0,     0,     0,     0,     0,   277,     0,
       0,     0,     0,     0,   278,   279,   280,   635,     0,     1,
     273,   100,   274,     0,   275,   276,     0,   281,   282,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   283,     0,     0,     2,   284,   285,   286,   287,   288,
     289,   290,   291,     0,     0,   292,     0,     0,   293,     0,
     294,     0,     0,     0,     0,     0,     0,     0,   295,   296,
       0,   297,   298,   299,   300,     0,     0,     0,     0,     0,
       0,   277,     0,     0,     0,     0,     0,   278,   279,   280,
     272,     0,     1,   273,   100,   274,     0,   275,   276,     0,
     281,   282,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   283,     0,     0,     2,   284,   285,
     286,   287,   288,   289,   290,   291,     0,     0,   292,     0,
       0,   636,     0,   294,     0,     0,     0,     0,     0,     0,
       0,   295,   296,     0,   297,   298,   299,   300,     0,     0,
       0,     0,     0,     0,   277,     0,     0,     0,     0,     0,
     278,   279,   280,   635,     0,     1,   273,   100,   274,     0,
     275,   276,     0,   281,   282,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   283,     0,     0,
       2,   284,   285,   286,   287,   288,   289,   290,   291,     0,
       0,   292,     0,     0,   645,     0,   294,     0,     0,     0,
       0,     0,     0,     0,   295,   296,     0,   297,   298,   299,
     300,     0,     0,     0,     0,     0,     0,   277,     0,     0,
       0,     0,     0,   278,   279,   280,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   281,   282,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     283,     0,     0,     0,   284,   285,   286,   287,   288,   289,
     290,   291,     0,     0,   292,     0,     0,   668,     0,   294,
    -257,   844,     0,     1,   273,   100,     0,   295,   296,     0,
     297,   298,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   175,
     176,   177,   178,   179,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,  -257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   277,    27,     0,   382,     0,
       0,   278,   279,     0,    28,    29,     0,     0,   383,    32,
     384,   385,    35,    36,     0,   386,    38,    39,   387,     0,
       0,   388,   389,   390,   391,     0,   392,     0,   393,   394,
      40,     0,   284,   285,   286,   287,   288,   289,   290,     0,
      43,    44,    45,     0,     0,   395,     0,   396,   397,  -255,
     847,  -257,     1,   273,   100,   295,   296,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   175,   176,
     177,   178,   179,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,  -255,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,    27,     0,   382,     0,     0,
     278,   279,     0,    28,    29,     0,     0,   383,    32,   384,
     385,    35,    36,     0,   386,    38,    39,   387,     0,     0,
     388,   389,   390,   391,     0,   392,     0,   393,   394,    40,
       0,   284,   285,   286,   287,   288,   289,   290,     0,    43,
      44,    45,     0,     0,   395,     0,   396,   397,  -258,   844,
    -255,     1,   273,   100,   295,   296,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   175,   176,   177,
     178,   179,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,  -258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   277,    27,     0,   382,     0,     0,   278,
     279,     0,    28,    29,     0,     0,   383,    32,   384,   385,
      35,    36,     0,   386,    38,    39,   387,     0,     0,   388,
     389,   390,   391,     0,   392,     0,   393,   394,    40,     0,
     284,   285,   286,   287,   288,   289,   290,     0,    43,    44,
      45,     0,     0,   395,     0,   396,   397,  -256,   847,  -258,
       1,   273,   100,   295,   296,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   175,   176,   177,   178,
     179,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
    -256,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,    27,     0,   382,     0,     0,   278,   279,
       0,    28,    29,     0,     0,   383,    32,   384,   385,    35,
      36,     0,   386,    38,    39,   387,     0,     0,   388,   389,
     390,   391,     0,   392,     0,   393,   394,    40,     0,   284,
     285,   286,   287,   288,   289,   290,     0,    43,    44,    45,
       0,     0,   395,     0,   396,   397,     0,   381,  -256,     1,
     273,   100,   295,   296,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   175,   176,   177,   178,   179,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,    27,     0,   382,     0,     0,   278,   279,     0,
      28,    29,     0,     0,   383,    32,   384,   385,    35,    36,
       0,   386,    38,    39,   387,     0,     0,   388,   389,   390,
     391,     0,   392,     0,   393,   394,    40,     0,   284,   285,
     286,   287,   288,   289,   290,     0,    43,    44,    45,     0,
       0,   395,     0,   396,   397,     0,   449,   398,     1,   273,
     100,   295,   296,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   175,   176,   177,   178,   179,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     277,    27,     0,   382,     0,     0,   278,   279,     0,    28,
      29,     0,     0,   383,    32,   384,   385,    35,    36,     0,
     386,    38,    39,   387,     0,     0,   388,   389,   390,   391,
       0,   392,     0,   393,   394,    40,     0,   284,   285,   286,
     287,   288,   289,   290,     0,    43,    44,    45,     0,     0,
     395,     0,   396,   397,     0,   471,   450,     1,   273,   100,
     295,   296,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   175,   176,   177,   178,   179,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   277,
      27,     0,   382,     0,     0,   278,   279,     0,    28,    29,
       0,     0,   383,    32,   384,   385,    35,    36,     0,   386,
      38,    39,   387,     0,     0,   388,   389,   390,   391,     0,
     392,     0,   393,   394,    40,     0,   284,   285,   286,   287,
     288,   289,   290,     0,    43,    44,    45,     0,     0,   395,
       0,   396,   397,     0,   476,   472,     1,   273,   100,   295,
     296,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   175,   176,   177,   178,   179,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   277,    27,
       0,   382,     0,     0,   278,   279,     0,    28,    29,     0,
       0,   383,    32,   384,   385,    35,    36,     0,   386,    38,
      39,   387,     0,     0,   388,   389,   390,   391,     0,   392,
       0,   393,   394,    40,     0,   284,   285,   286,   287,   288,
     289,   290,     0,    43,    44,    45,     0,     0,   395,     0,
     396,   397,     0,   480,   477,     1,   273,   100,   295,   296,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   175,   176,   177,   178,   179,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   277,    27,     0,
     382,     0,     0,   278,   279,     0,    28,    29,     0,     0,
     383,    32,   384,   385,    35,    36,     0,   386,    38,    39,
     387,     0,     0,   388,   389,   390,   391,     0,   392,     0,
     393,   394,    40,     0,   284,   285,   286,   287,   288,   289,
     290,     0,    43,    44,    45,     0,     0,   395,     0,   396,
     397,     0,   844,   481,     1,   273,   100,   295,   296,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     175,   176,   177,   178,   179,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   277,    27,     0,   382,
       0,     0,   278,   279,     0,    28,    29,     0,     0,   383,
      32,   384,   385,    35,    36,     0,   386,    38,    39,   387,
       0,     0,   388,   389,   390,   391,     0,   392,     0,   393,
     394,    40,     0,   284,   285,   286,   287,   288,   289,   290,
       0,    43,    44,    45,     0,     0,   395,     0,   396,   397,
       0,   847,  -762,     1,   273,   100,   295,   296,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   175,
     176,   177,   178,   179,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   277,    27,     0,   382,     0,
       0,   278,   279,     0,    28,    29,     0,     0,   383,    32,
     384,   385,    35,    36,     0,   386,    38,    39,   387,     0,
       0,   388,   389,   390,   391,     0,   392,     0,   393,   394,
      40,     0,   284,   285,   286,   287,   288,   289,   290,     0,
      43,    44,    45,     0,     0,   395,     0,   396,   397,     0,
     844,  -763,     1,   273,   100,   295,   296,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   175,   176,
     177,   178,   179,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,    27,     0,   382,     0,     0,
     278,   279,     0,    28,    29,     0,     0,   383,    32,   384,
     385,    35,    36,     0,   386,    38,    39,   387,     0,     0,
     388,   389,   390,   391,     0,   392,     0,   393,   394,    40,
       0,   284,   285,   286,   287,   288,   289,   290,     0,    43,
      44,    45,     0,     0,   395,     0,   396,   397,     0,   847,
    -759,     1,   273,   100,   295,   296,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   175,   176,   177,
     178,   179,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   277,    27,     0,   382,     0,     0,   278,
     279,     0,    28,    29,     0,     0,   383,    32,   384,   385,
      35,    36,     0,   386,    38,    39,   387,     0,     0,   388,
     389,   390,   391,     0,   392,     0,   393,   394,    40,     0,
     284,   285,   286,   287,   288,   289,   290,     0,    43,    44,
      45,     0,     0,   395,     0,   396,   397,     0,   844,  -760,
       1,   273,   100,   295,   296,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   175,   176,   177,   178,
     179,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,    27,     0,   382,     0,     0,   278,   279,
       0,    28,    29,     0,     0,   383,    32,   384,   385,    35,
      36,     0,   386,    38,    39,   387,     0,     0,   388,   389,
     390,   391,     0,   392,     0,   393,   394,    40,     0,   284,
     285,   286,   287,   288,   289,   290,     0,    43,    44,    45,
       0,     0,   395,     0,   396,   397,     0,   847,  -765,     1,
     273,   100,   295,   296,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   175,   176,   177,   178,   179,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,    27,     0,   382,     0,     0,   278,   279,     0,
      28,    29,     0,     0,   383,    32,   384,   385,    35,    36,
       0,   386,    38,    39,   387,     0,     0,   388,   389,   390,
     391,     0,   392,     0,   393,   394,    40,     0,   284,   285,
     286,   287,   288,   289,   290,     0,    43,    44,    45,     0,
       0,   395,     0,   396,   397,     0,   950,  -766,     1,   273,
     100,   295,   296,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   175,   176,   177,   178,   179,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     277,    27,     0,   382,     0,     0,   278,   279,     0,    28,
      29,     0,     0,   383,    32,   384,   385,    35,    36,     0,
     386,    38,    39,   387,     0,     0,   388,   389,   390,   391,
       0,   392,     0,   393,   394,    40,     0,   284,   285,   286,
     287,   288,   289,   290,     0,    43,    44,    45,     0,     0,
     395,     0,   396,   397,     0,   954,   951,     1,   273,   100,
     295,   296,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   175,   176,   177,   178,   179,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   277,
      27,     0,   382,     0,     0,   278,   279,     0,    28,    29,
       0,     0,   383,    32,   384,   385,    35,    36,     0,   386,
      38,    39,   387,     0,     0,   388,   389,   390,   391,     0,
     392,     0,   393,   394,    40,     0,   284,   285,   286,   287,
     288,   289,   290,     0,    43,    44,    45,     0,     0,   395,
       0,   396,   397,     0,   844,   955,     1,   273,   100,   295,
     296,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   175,   176,   177,   178,   179,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   277,    27,
       0,   382,     0,     0,   278,   279,     0,    28,    29,     0,
       0,   383,    32,   384,   385,    35,    36,     0,   386,    38,
      39,   387,     0,     0,   388,   389,   390,   391,     0,   392,
       0,   393,   394,    40,     0,   284,   285,   286,   287,   288,
     289,   290,     0,    43,    44,    45,     0,     0,   395,     0,
     396,   397,     0,   847,  -745,     1,   273,   100,   295,   296,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   175,   176,   177,   178,   179,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   277,    27,     0,
     382,     0,     0,   278,   279,     0,    28,    29,     0,     0,
     383,    32,   384,   385,    35,    36,     0,   386,    38,    39,
     387,     0,     0,   388,   389,   390,   391,     0,   392,     0,
     393,   394,    40,     0,   284,   285,   286,   287,   288,   289,
     290,     0,    43,    44,    45,     0,     0,   395,     0,   396,
     397,     0,   844,  -746,     1,   273,   100,   295,   296,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     175,   176,   177,   178,   179,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   277,    27,     0,   382,
       0,     0,   278,   279,     0,    28,    29,     0,     0,   383,
      32,   384,   385,    35,    36,     0,   386,    38,    39,   387,
       0,     0,   388,   389,   390,   391,     0,   392,     0,   393,
     394,    40,     0,   284,   285,   286,   287,   288,   289,   290,
       0,    43,    44,    45,     0,     0,   395,     0,   396,   397,
       0,   847,  -748,     1,   273,   100,   295,   296,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   175,
     176,   177,   178,   179,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   277,    27,     0,   382,     0,
       0,   278,   279,     0,    28,    29,     0,     0,   383,    32,
     384,   385,    35,    36,     0,   386,    38,    39,   387,     0,
       0,   388,   389,   390,   391,     0,   392,     0,   393,   394,
      40,     0,   284,   285,   286,   287,   288,   289,   290,     0,
      43,    44,    45,     0,     0,   395,     0,   396,   397,     0,
     844,  -749,     1,   273,   100,   295,   296,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   175,   176,
     177,   178,   179,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,    27,     0,   382,     0,     0,
     278,   279,     0,    28,    29,     0,     0,   383,    32,   384,
     385,    35,    36,     0,   386,    38,    39,   387,     0,     0,
     388,   389,   390,   391,     0,   392,     0,   393,   394,    40,
       0,   284,   285,   286,   287,   288,   289,   290,     0,    43,
      44,    45,     0,     0,   395,     0,   396,   397,     0,   847,
    -673,     1,   273,   100,   295,   296,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   175,   176,   177,
     178,   179,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   277,    27,     0,   382,     0,     0,   278,
     279,     0,    28,    29,     0,     0,   383,    32,   384,   385,
      35,    36,     0,   386,    38,    39,   387,     0,     0,   388,
     389,   390,   391,     0,   392,     0,   393,   394,    40,     0,
     284,   285,   286,   287,   288,   289,   290,     0,    43,    44,
      45,     0,     0,   395,     0,   396,   397,     0,   844,  -674,
       1,   273,   100,   295,   296,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   175,   176,   177,   178,
     179,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,    27,     0,   382,     0,     0,   278,   279,
       0,    28,    29,     0,     0,   383,    32,   384,   385,    35,
      36,     0,   386,    38,    39,   387,     0,     0,   388,   389,
     390,   391,     0,   392,     0,   393,   394,    40,     0,   284,
     285,   286,   287,   288,   289,   290,     0,    43,    44,    45,
       0,     0,   395,     0,   396,   397,     0,   847,  -666,     1,
     273,   100,   295,   296,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   175,   176,   177,   178,   179,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   277,    27,     0,   382,     0,     0,   278,   279,     0,
      28,    29,     0,     0,   383,    32,   384,   385,    35,    36,
       0,   386,    38,    39,   387,     0,     0,   388,   389,   390,
     391,     0,   392,     0,   393,   394,    40,     0,   284,   285,
     286,   287,   288,   289,   290,     0,    43,    44,    45,     0,
       0,   395,     0,   396,   397,     0,   844,  -667,     1,   273,
     100,   295,   296,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   175,   176,   177,   178,   179,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     277,    27,     0,   382,     0,     0,   278,   279,     0,    28,
      29,     0,     0,   383,    32,   384,   385,    35,    36,     0,
     386,    38,    39,   387,     0,     0,   388,   389,   390,   391,
       0,   392,     0,   393,   394,    40,     0,   284,   285,   286,
     287,   288,   289,   290,     0,    43,    44,    45,     0,     0,
     395,     0,   396,   397,     0,   847,  -662,     1,   273,   100,
     295,   296,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   175,   176,   177,   178,   179,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   277,
      27,     0,   382,     0,     0,   278,   279,     0,    28,    29,
       0,     0,   383,    32,   384,   385,    35,    36,     0,   386,
      38,    39,   387,     0,     0,   388,   389,   390,   391,     0,
     392,     0,   393,   394,    40,     0,   284,   285,   286,   287,
     288,   289,   290,     0,    43,    44,    45,     0,     0,   395,
       0,   396,   397,     0,   844,  -663,     1,   273,   100,   295,
     296,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   175,   176,   177,   178,   179,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   277,    27,
       0,   382,     0,     0,   278,   279,     0,    28,    29,     0,
       0,   383,    32,   384,   385,    35,    36,     0,   386,    38,
      39,   387,     0,     0,   388,   389,   390,   391,     0,   392,
       0,   393,   394,    40,     0,   284,   285,   286,   287,   288,
     289,   290,     0,    43,    44,    45,     0,     0,   395,     0,
     396,   397,     0,   847,  -652,     1,   273,   100,   295,   296,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   175,   176,   177,   178,   179,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   277,    27,     0,
     382,     0,     0,   278,   279,     0,    28,    29,     0,     0,
     383,    32,   384,   385,    35,    36,     0,   386,    38,    39,
     387,     0,     0,   388,   389,   390,   391,     0,   392,     0,
     393,   394,    40,     0,   284,   285,   286,   287,   288,   289,
     290,     0,    43,    44,    45,     0,     0,   395,     0,   396,
     397,     0,   844,  -653,     1,   273,   100,   295,   296,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     175,   176,   177,   178,   179,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   277,    27,     0,   382,
       0,     0,   278,   279,     0,    28,    29,     0,     0,   383,
      32,   384,   385,    35,    36,     0,   386,    38,    39,   387,
       0,     0,   388,   389,   390,   391,     0,   392,     0,   393,
     394,    40,     0,   284,   285,   286,   287,   288,   289,   290,
       0,    43,    44,    45,     0,     0,   395,     0,   396,   397,
       0,   847,  -647,     1,   273,   100,   295,   296,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   175,
     176,   177,   178,   179,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   277,    27,     0,   382,     0,
       0,   278,   279,     0,    28,    29,     0,     0,   383,    32,
     384,   385,    35,    36,     0,   386,    38,    39,   387,     0,
       0,   388,   389,   390,   391,     0,   392,     0,   393,   394,
      40,     0,   284,   285,   286,   287,   288,   289,   290,     0,
      43,    44,    45,     0,     0,   395,     0,   396,   397,     0,
     844,  -648,     1,   273,   100,   295,   296,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   175,   176,
     177,   178,   179,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   277,    27,     0,   382,     0,     0,
     278,   279,     0,    28,    29,     0,     0,   383,    32,   384,
     385,    35,    36,     0,   386,    38,    39,   387,     0,     0,
     388,   389,   390,   391,     0,   392,     0,   393,   394,    40,
       0,   284,   285,   286,   287,   288,   289,   290,     0,    43,
      44,    45,     0,     0,   395,     0,   396,   397,     0,   847,
    -664,     1,   273,   100,   295,   296,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   175,   176,   177,
     178,   179,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   277,    27,     0,   382,     0,     0,   278,
     279,     0,    28,    29,     0,     0,   383,    32,   384,   385,
      35,    36,     0,   386,    38,    39,   387,     0,     0,   388,
     389,   390,   391,     0,   392,     0,   393,   394,    40,     0,
     284,   285,   286,   287,   288,   289,   290,     0,    43,    44,
      45,     0,     0,   395,     0,   396,   397,     0,   272,  -665,
       1,   273,   100,   295,   296,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   175,   176,   177,   178,
     179,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   277,    27,     0,   382,     0,     0,   278,   279,
       0,    28,    29,     0,     0,   383,    32,   384,   385,    35,
      36,     0,   386,    38,    39,   387,     0,     0,   388,   389,
     390,   391,     0,   392,     0,   393,   394,    40,     0,   284,
     285,   286,   287,   288,   289,   290,     0,    43,    44,    45,
       0,     0,   395,     0,   396,   397,   381,     0,     1,   273,
     100,     0,   295,   296,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   175,   176,   177,   178,   179,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     277,    27,     0,   382,     0,     0,   278,   279,     0,    28,
      29,     0,     0,   383,    32,   384,   385,    35,    36,     0,
     386,    38,    39,   387,     0,     0,   388,   389,   390,   391,
       0,   392,     0,   393,   394,    40,     0,   284,   285,   286,
     287,   288,   289,   290,     0,    43,    44,    45,     0,     0,
     395,     0,   396,   397,   449,     0,     1,   273,   100,     0,
     295,   296,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   175,   176,   177,   178,   179,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   277,    27,
       0,   382,     0,     0,   278,   279,     0,    28,    29,     0,
       0,   383,    32,   384,   385,    35,    36,     0,   386,    38,
      39,   387,     0,     0,   388,   389,   390,   391,     0,   392,
       0,   393,   394,    40,     0,   284,   285,   286,   287,   288,
     289,   290,     1,    43,    44,    45,     0,     0,   395,     0,
     396,   397,     0,     0,     0,     0,     0,     0,   295,   296,
       0,     0,     0,     0,     0,     0,     0,     2,   175,   176,
     177,   178,   179,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
   -1183,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,   513,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   514,     0,   515,     0, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183,     0, -1183, -1183, -1183, -1183, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183,     0,     0,     0, -1183,     0, -1183,     0,
       0,     0,     0,     0, -1183, -1183,     0,     0, -1183, -1183,
   -1183, -1183, -1183, -1183,     0,     0, -1183, -1183, -1183, -1183,
   -1183, -1183, -1183, -1183, -1183,     0, -1183, -1168,     0, -1183,
   -1183,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1183, -1183,     0,     0,     0,     0,     0,     0, -1183,     0,
       0, -1183, -1183,     0, -1183,     0, -1168, -1168, -1168, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,     0, -1168,
   -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168, -1168,
       0,     0,     0, -1168,     0, -1168,     0,     0,     0,     0,
       0, -1168, -1168,     0,     0, -1168, -1168, -1168, -1168, -1168,
   -1168,     0,     0, -1168, -1168, -1168, -1168, -1168, -1168, -1168,
   -1168, -1168,     0, -1168, -1170,     0, -1168, -1168,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1168, -1168,     0,
       0,     0,     0,     0,     0, -1168,     0,     0, -1168, -1168,
       0, -1168,     0, -1170, -1170, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170, -1170, -1170,     0, -1170, -1170, -1170, -1170,
   -1170, -1170, -1170, -1170, -1170, -1170, -1170,     0,     0,     0,
   -1170,     0, -1170,     0,     0,     0,     0,     0, -1170, -1170,
       0,     0, -1170, -1170, -1170, -1170, -1170, -1170,     0,     0,
   -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170, -1170,     0,
   -1170, -1167,     0, -1170, -1170,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1170, -1170,     0,     0,     0,     0,
       0,     0, -1170,     0,     0, -1170, -1170,     0, -1170,     0,
   -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167,
   -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167, -1167,
   -1167, -1167,     0, -1167, -1167, -1167, -1167, -1167, -1167, -1167,
   -1167, -1167, -1167, -1167,     0,     0,     0, -1167,     0, -1167,
       0,     0,     0,     0,     0, -1167, -1167,     0,     0, -1167,
   -1167, -1167, -1167, -1167, -1167,     0,     0, -1167, -1167, -1167,
   -1167, -1167, -1167, -1167, -1167, -1167,     0, -1167, -1169,     0,
   -1167, -1167,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1167, -1167,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1167, -1167,     0, -1167,     0, -1169, -1169, -1169,
   -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169,     0,
   -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169,     0,     0,     0, -1169,     0, -1169,     0,     0,     0,
       0,     0, -1169, -1169,     0,     0, -1169, -1169, -1169, -1169,
   -1169, -1169,     0,     0, -1169, -1169, -1169, -1169, -1169, -1169,
   -1169, -1169, -1169,     0, -1169,     0,     0, -1169, -1169,     1,
       0,     0,     0,     0,     0,     0,     0,     0, -1169, -1169,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1169,
   -1169,     0, -1169,     0,     2,   175,   176,   177,   178,   179,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      18,    19,   218,   219,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   220,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   221,    38,   222,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   223,     0,     1,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,     0,
       0,   784,     0,     0,     0,     0,     0,     0,  1346,     0,
       0,     0,   514,     2,   175,   176,   177,   178,   179,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    18,
      19,   218,   219,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   220,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     221,    38,   222,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   223,     0,     1,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
     784,     0,     0,     0,     0,     0,     0,  1364,     0,     0,
       0,   514,     2,   175,   176,   177,   178,   179,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    18,    19,
     218,   219,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     220,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,     0,   221,
      38,   222,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   223,     0,     1,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,     0,     0,  1124,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1125,     2,   175,   176,   177,   178,   179,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    18,    19,   218,
     219,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   221,    38,
     222,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   223,     0,     1,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,     0,     0,  1124,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1147,
       2,   175,   176,   177,   178,   179,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    18,    19,   218,   219,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   220,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   221,    38,   222,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   223,     0,     1,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,  1124,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1598,     2,
     175,   176,   177,   178,   179,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    18,    19,   218,   219,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   220,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   221,    38,   222,     0,
       0,     0,     0,     0,     0,     0,     0,     1,     0,     0,
       0,   223,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,     0,     0,  1124,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,  1613,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     1,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,     0,     0,   784,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     514,     2,     3,     4,   243,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,   244,
      31,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     1,     0,     0,     0,    42,     0,
       0,     0,     0,    43,    44,    45,     0,     0,    46,     0,
       0,     0,     0,     0,     0,     0,     0,   245,     0,     2,
     175,   176,   177,   178,   179,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,   382,
       0,     0,     0,     0,     0,    28,    29,     0,     0,   383,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     1,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,     0,     0,   872,     0,   396,     0,
       0,     0,     0,     0,     0,   873,     0,     2,   175,   176,
     177,   178,   179,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       1,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,   852,     0,     0,   853,     0,     0,
       0,     0,     0,   854,     0,     2,   175,   176,   177,   178,
     179,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
       0,     0,   852,     0,     0,  1404,     0,     0,     0,     0,
       0,   854,     0,     2,   175,   176,   177,   178,   179,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1625,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
      46,     0,     0,     0,     0,     0,     0,     0,     0,   854,
       2,   175,   176,   177,   178,   179,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    18,    19,   218,   219,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   220,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   221,    38,   222,
       0,     0,     0,     0,     0,     0,     0,  1629,     0,     0,
       0,     0,   223,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -110,     2,   175,   176,   177,   178,   179,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      18,    19,   218,   219,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   220,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   221,    38,   222,     0,     0,     0,     0,     0,     0,
       0,  1630,     0,     0,     0,     0,   223,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   -94,     2,   175,
     176,   177,   178,   179,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    18,    19,   218,   219,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   220,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   221,    38,   222,     0,     0,
       0,     0,     0,     0,     0,  1735,     0,     0,     0,     0,
     223,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -95,     2,   175,   176,   177,   178,   179,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    18,    19,
     218,   219,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     220,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,     0,   221,
      38,   222,     0,     0,     0,     0,     0,     0,     0,  1873,
       0,     0,     0,     0,   223,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -79,     2,   175,   176,   177,
     178,   179,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    18,    19,   218,   219,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   220,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   221,    38,   222,     0,     0,     0,     0,
       0,     0, -1245,   262,     0,     1,     0,     0,   223,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -86,
       2,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,    25,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,    30,    31,
       0,    32,    33,    34,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,    40,    41,     0,     0,     0,    42,     0,     0,
       0,     0,    43,    44,    45,     0,     0,    46,     0,     0,
      47,     2,   175,   176,   177,   178,   179,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     0,     0,    40,     0,     0,     0,     0,     0,     0,
     768,     0,     0,    43,    44,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1318,     2,   175,   176,   177,   178,
     179,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,     0,    40,     0,     0,
       0,     0,     0,     0,   768,     0,     0,    43,    44,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1656,     2,
     175,   176,   177,   178,   179,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,   150,     0,     1,     0,
       0,    40,     0,     0,     0,     0,     0,     0,   768,     0,
       0,    43,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1657,     2,     3,     4,   151,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,   150,     0,     1,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
      46,     0,     0,   152,     2,     3,     4,   151,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,   549,     0,
       1,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,     0,
       0,    46,     0,     0,   152,     2,   175,   176,   177,   178,
     179,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    18,    19,   218,   219,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   220,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   221,    38,   222,     0,     0,     0,     0,  -902,
       0,  -902,     0,     0,     0,     0,     0,   223,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
       0,     0,    46,     0,     0,   550,  -902,  -902,  -902,  -902,
    -902,  -902,  -902,  -902,  -902,  -902,  -902,  -902,  -902,  -902,
    -902,  -902,  -902,  -902,  -902,  -902,  -902,  -902,  -902,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -902,     0,     0,     0,     0,     0,
       0,     0,  -902,  -902,     0,     0,     0,  -902,     0,     0,
       0,     0,     0,  -902,  -902,  -902,     0,     0,     0,     0,
       0,     0,     1,     0,     0,     0,     0,     0,  -902,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -902,  -902,
    -902,     0,     0,  -902,     0,     0,  -902,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,    25,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    26,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,    30,    31,     0,    32,    33,
      34,    35,    36,     0,    37,    38,    39,     0,     0,     0,
   -1246,   254,     0,     1,     0,     0,     0,     0,     0,    40,
      41,     0,     0,     0,    42,     0,     0,     0,     0,    43,
      44,    45,     0,     0,    46,     0,     0,    47,     2,     3,
       4,   151,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    26,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
      33,    34,    35,    36,     0,    37,    38,    39,     0,   174,
       0,     1,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,     0,     0,    46,     2,   175,   176,   177,
     178,   179,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   180,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,   174,     0,
       1,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,     0,     0,  1124,  1585,     2,   175,   176,   177,   178,
     179,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,   864,     0,     1,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,     0,
       0,     0,     0,   181,     2,   175,   176,   177,   178,   179,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   180,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,   174,     0,     1,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,     0,     0,
       0,     0,   181,     2,   175,   176,   177,   178,   179,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     180,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,   174,     0,     1,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,     0,     0,     0,
       0,  1469,     2,   175,   176,   177,   178,   179,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   180,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,   150,     0,     1,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,     0,
    1799,     2,     3,     4,   151,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,   150,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,     0,     0,    46,     2,
       3,     4,   151,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
     808,     0,     1,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,     0,     0,    46,     2,   175,   176,
     177,   178,   179,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    18,    19,   218,   219,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   220,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   221,    38,   222,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,     0,     0,   223,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,     0,     0,     0,   809,     2,     3,     4,   151,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
       0,     0,    46,     2,   175,   176,   177,   178,   179,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
      46,     2,   175,   176,   177,   178,   179,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     0,     0,   660,     2,
     175,   176,   177,   178,   179,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,  1368,     2,   175,   176,
     177,   178,   179,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    18,    19,   218,   219,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   220,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   221,    38,   222,     0,   978,     0,
       1,     0,     0,     0,     0,     0,     0,     0,     0,   223,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,    46,     2,   175,   176,   177,   178,
     179,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,   979,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   180,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,   984,     0,     1,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,     0,
       0,     0,     2,   175,   176,   177,   178,   179,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,   985,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   180,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,   990,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,     2,
     175,   176,   177,   178,   179,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,   991,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   180,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,   793,
       0,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,     2,   175,   176,   177,
     178,   179,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    18,    19,   218,   219,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   220,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   221,    38,   222,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   223,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     2,   175,   176,   177,   178,   179,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,   943,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   180,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     2,   175,   176,   177,
     178,   179,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,   996,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   180,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     2,   175,   176,   177,   178,   179,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
     768,     0,     0,    43,    44,     0,     2,   175,   176,   177,
     178,   179,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   180,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     2,   175,   176,   177,   178,   179,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    18,    19,   218,
     219,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,   438,   439,     0,     0,     0,   221,    38,
     222,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   223,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     2,   175,   176,   177,
     178,   179,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     2,   175,   176,   177,   178,   179,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    18,    19,   218,
     219,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   463,   220,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   221,    38,
     222,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   223,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     2,   175,   176,   177,
     178,   179,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    18,    19,   218,   219,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   220,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     1,
       0,     0,     0,   221,    38,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   223,     0,
       0,     0,     0,     0,     2,     0,     0,     0,    43,    44,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,     2,   175,
     176,   177,   178,   179,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    18,    19,   218,   219,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   220,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   221,    38,   222,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     223,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,     0,     0,   784,  1582,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   514,     2,   175,   176,
     177,   178,   179,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    18,    19,   218,   219,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   220,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   221,    38,   222,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   223,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,   784,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   514,     2,   175,   176,   177,
     178,   179,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    18,    19,   218,   219,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   220,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   221,    38,   222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   223,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     224,     2,   175,   176,   177,   178,   179,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    18,    19,   218,
     219,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   220,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   221,    38,
     222,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   223,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1439,     2,   175,   176,   177,   178,
     179,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    18,    19,   218,   219,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   220,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   221,    38,   222,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   223,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44
};

static const yytype_int16 yycheck[] =
{
       0,   583,   659,   851,   312,   490,    86,   120,   296,   312,
     513,   523,   851,   525,   139,   742,   142,    77,    77,   490,
     490,   661,   777,    78,   777,     1,   781,   916,   781,   918,
      30,    31,   773,   376,   777,    80,   773,    80,   781,   130,
       3,    41,    77,    78,   917,   513,    46,    87,   916,    86,
     918,   164,   143,    53,   145,   383,   147,   142,    58,   166,
      60,    53,  1513,    94,    58,  1132,   916,  1134,   918,    87,
      77,   696,    94,     1,  1525,   114,    76,    77,    78,   311,
      80,   120,    82,     3,    87,    85,   166,    87,   130,   115,
       1,    94,     3,   325,    94,    95,    30,   329,    98,    77,
       1,   143,   430,   145,   916,   147,   918,   107,    42,    87,
     110,     3,     3,     5,     3,   107,    94,   742,    17,   119,
     120,     5,   122,   433,   434,     1,   126,   127,   128,   166,
     130,     1,     1,   240,   134,     1,   136,     3,     3,   139,
     140,   115,   142,   143,   144,   145,     1,   147,   124,    53,
     903,    77,   259,    17,     5,     1,   156,     3,   238,   194,
     682,    87,   156,   163,   164,     5,   688,   101,   102,   691,
     513,   105,    76,   173,     5,     3,   114,     5,     1,     3,
     235,   173,   120,   183,   883,   185,     1,     3,   248,   248,
     118,     1,   112,   193,   194,   115,   682,     1,   258,   258,
     235,   238,   688,   240,   204,   691,   126,   207,     1,     1,
     121,     3,     3,   248,     5,   116,     5,     5,     3,   120,
     260,   803,   259,     1,   116,   696,   115,   258,   119,   260,
     134,   505,   124,     1,     3,   235,   258,   136,   260,   123,
     240,   248,   260,   356,   244,   121,    17,     1,   248,   118,
       1,   121,   378,   379,   119,   121,   530,   260,   258,   533,
     260,   535,     5,   537,   258,     3,   121,     1,   240,   120,
       1,   742,   136,   785,   786,   121,   116,     1,   278,     1,
    1169,   784,   260,     1,   284,   606,   607,  1176,   116,   193,
      28,  1180,   116,   293,   379,  1168,   124,     3,   121,   240,
     116,  1169,  1175,   118,    17,   120,  1179,  1758,  1176,   317,
     244,   121,  1180,     7,     8,     9,   784,   121,   114,  1169,
     400,   401,   402,   403,   120,   116,  1176,   116,   121,   121,
    1180,   116,   258,   124,   260,   120,   679,   125,   115,   124,
     118,     3,   120,   121,   505,   238,   239,   116,   348,   349,
     118,   120,   120,   121,   114,   124,   356,  1169,   358,   591,
     120,   295,   594,   400,  1176,   136,   403,   121,  1180,   530,
     121,     1,   533,   486,   535,     1,   537,   120,   378,   379,
       3,   506,   382,   383,   122,  1112,   431,   121,   431,   389,
     121,  1118,   392,   393,   394,   395,   396,   121,   114,   121,
       7,     8,     9,   121,   120,    28,   112,   113,   716,   717,
     718,   491,   525,   716,   717,   718,   122,     1,   113,   510,
       1,   512,   710,   136,  1123,   425,   426,   427,     3,   123,
     430,   431,   126,   433,   434,     5,     3,   437,   746,   747,
     748,   784,   442,   746,   747,   748,   446,   447,     3,   737,
     118,   451,   452,    28,   491,   115,   799,   745,   929,   971,
     122,   496,   497,   463,   464,     3,   126,   810,   510,   972,
     512,   121,   800,   473,   474,     3,   807,   765,   478,   479,
     515,   121,   482,   483,  1124,   115,   486,  1112,   488,   115,
     116,  1013,     1,  1118,   120,     1,   496,   497,    65,   122,
      28,   501,  1142,     3,   972,   505,   506,     3,   115,  1149,
     510,     1,   512,   513,   514,   515,   123,   517,     3,   126,
     627,     3,   514,   523,   122,   525,  1593,  1013,    28,     3,
     530,   115,   116,   533,     3,   535,   120,   537,     3,   120,
     112,     3,   446,   115,   544,   112,   113,   122,   118,   859,
     860,   882,   544,     3,   882,   122,     1,   557,     3,   869,
     122,   871,   124,   118,   173,   120,    77,   604,   605,   606,
     607,   631,   631,  1988,   574,     1,   576,    73,   116,   659,
    1321,  1322,     3,   583,  1321,  1322,     1,  1342,  1059,  1342,
     627,   628,  1063,     3,   122,  1066,   924,  1068,   491,  1342,
     631,  1449,   121,  1492,   604,   605,   606,   607,    73,   631,
    1449,   120,   118,   124,   120,   115,     3,   115,  1491,     5,
       0,  1124,   622,   623,  1492,   121,   116,   112,   113,  2044,
     120,   631,   604,   605,   606,   607,   636,   122,     5,     0,
     122,  1112,  1492,   112,   113,    90,  1345,  1118,   122,     3,
     650,   777,    73,   122,   116,   781,  1124,   657,   658,   659,
     660,   661,   662,   604,   605,   606,   607,  1422,   668,  1772,
     279,     1,   122,     3,   731,  1418,   285,  1420,   115,   679,
    1492,   916,   917,   918,   120,   619,   620,    74,   119,   126,
     116,   127,    79,   693,   120,  1016,   115,   697,  1019,    86,
     121,   116,   759,   977,   118,   120,   116,   126,  1407,   983,
     733,   604,   605,   606,   607,   989,    77,   725,   726,   623,
     728,   995,     3,   110,   111,   112,    87,     3,   115,   115,
     664,   665,   666,    94,    95,   628,  1057,   124,   761,   739,
       7,     8,     9,   743,   732,   753,   754,   755,   756,   317,
    1071,  1072,  1073,  1074,   834,   835,   120,   837,   112,   113,
     840,   841,  1105,   734,   890,   891,   735,   514,   768,   769,
     770,   896,   760,   773,   774,   775,   902,   777,     3,  1122,
     780,   781,   112,   113,   784,     7,     8,     9,   788,   789,
     120,   762,   425,   426,   763,     3,  1685,     5,   798,   799,
     800,     3,   114,   803,   895,   890,   891,   807,   120,   809,
     810,  1684,   812,  1916,   814,  1918,   977,  1685,   451,   452,
      28,   120,   569,   948,   949,   764,    28,   907,  1340,   121,
     865,   274,   113,   194,   995,  1685,   112,   118,     3,   115,
     473,   474,     3,   782,   783,   478,   479,   732,   291,   482,
     483,   106,   852,   895,   121,   855,   123,  1165,   971,   859,
     860,   122,  1165,    28,  1386,   865,     3,    28,   121,   869,
     907,   871,   872,  1685,  1977,   760,  1979,     3,  1981,    69,
      70,   881,   882,   883,  1172,    11,   116,   248,   113,   114,
     890,   891,  1591,   893,   798,   895,   896,   258,  1597,   260,
    1386,   123,   902,   903,     1,   514,    12,    13,   274,   116,
       7,     8,     9,   115,   122,   733,  2019,  2020,   173,  2022,
     115,   113,   274,    79,   924,   291,     7,     8,     9,    11,
     122,   121,   293,  1168,  1169,  2038,     1,   238,   239,   291,
    1175,  1176,   113,   761,  1179,  1180,   115,   118,   948,   949,
       3,  2054,   952,   953,   110,   111,   956,   957,  1615,   959,
     569,  1543,    12,    13,   115,     7,     8,     9,   124,  1668,
    1455,   971,   972,   973,   731,   112,   113,   977,   115,  1016,
     980,   973,  1019,   983,  1455,  1455,   986,   121,   114,   989,
       3,   113,   992,   119,   120,   995,   122,   997,   114,  1090,
     122,     3,   759,     5,   120,   734,   119,   113,   114,    74,
     112,  1011,    65,   115,    79,    28,  1016,    77,   115,  1019,
    1057,    86,   119,  1871,   126,     3,   123,     5,  1028,   126,
    1030,    44,   114,   762,  1071,  1072,  1073,  1074,   120,  1039,
     122,   296,   123,   114,  1016,   110,   111,  1019,  1090,   120,
     115,   116,  1052,    31,  1091,   120,   735,  1057,  1058,   112,
     113,    74,    75,   113,   114,     3,   118,     5,   115,   430,
     122,  1071,  1072,  1073,  1074,  1016,   118,   119,  1019,   116,
    1390,   123,  1392,   120,   763,  1057,    11,   124,   122,  1089,
    1090,  1594,   119,    31,     3,   115,  1096,   124,  1098,  1071,
    1072,  1073,  1074,   116,  1096,  1105,   114,   854,  1807,  1109,
     112,   113,   120,  1113,  1048,  1115,  1057,   115,     1,  1119,
     119,     3,  1607,  1123,  1124,   124,  1594,    88,    89,    90,
    1071,  1072,  1073,  1074,     1,  1478,   115,   719,   720,  1882,
    1883,   115,  1142,   112,   114,   892,    28,     3,   115,  1149,
     120,   115,  1809,     7,     8,     9,   115,   725,   726,  1159,
     728,  1632,    44,   132,   133,    74,  1637,   749,   750,  1640,
      79,     7,     8,     9,  1495,  1496,   122,    86,  1071,  1072,
    1073,  1074,   729,   730,  1505,   753,   754,   755,   756,   114,
     491,    74,    74,    75,  1776,   120,    79,   128,  1091,   114,
     112,   110,   111,    86,   134,   120,   115,    74,   721,   722,
     757,   758,    79,   729,   730,   135,  1342,   126,    74,    86,
     132,   133,   122,    79,   124,     3,   973,   110,   111,   484,
      86,   764,  1166,  1718,   116,   118,   119,   120,   751,   752,
     114,   757,   758,   110,   111,   854,   120,  1718,  1718,   782,
     783,   118,   119,   120,   110,   111,  1491,  1492,   122,   514,
     124,   115,   114,    69,    70,   113,   122,   118,   120,   123,
     631,   122,   126,     3,   122,   636,   124,  1024,   118,   115,
     719,   720,   122,   892,    16,    91,     3,   123,   543,    95,
     126,    97,  1418,  1419,  1420,  1421,    74,   116,   659,   721,
     722,    79,   128,   604,   605,   606,   607,   668,    86,   134,
     749,   750,  1312,  1313,   569,   121,  1316,  1317,   679,   952,
     953,  1321,  1322,   956,   957,   135,    11,   628,   116,   751,
     752,   116,   110,   111,   112,   120,   116,   115,   116,  1810,
     120,   122,  1342,   116,    74,  1345,   116,   120,   116,    79,
     120,  1351,   120,   122,  1354,   116,    86,    74,    16,   120,
    1360,  1361,    79,   124,   973,   119,  1366,  1367,   115,    86,
    1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,  1125,   122,
     110,   111,   112,  1317,     1,   115,     3,   116,  1388,   120,
    1390,   120,  1392,   110,   111,  1395,   118,   116,   115,   119,
    1147,   120,   116,  1440,     0,   124,   120,  1407,   663,   770,
    1992,    74,   667,  1413,  1414,  1024,    79,   118,  1418,  1419,
    1420,  1421,   116,    86,  1550,  1746,   120,   682,   116,   114,
     124,   118,   120,   688,   119,   120,   691,   122,   116,   800,
     116,   116,   120,  1478,   120,   120,   807,   110,   111,  1684,
    1685,   812,  1937,   814,   113,   710,   116,   140,  1495,  1496,
     120,   144,     0,   129,   130,    74,  1937,  1937,  1505,   113,
      79,     0,   122,   122,   124,   124,   113,    86,  1478,    10,
      11,    77,   737,   118,   118,   120,   120,     1,   120,     3,
     745,    87,    14,    15,     1,  1495,  1496,   122,    94,    95,
     127,   110,   111,  1503,   865,  1505,  1506,   116,   127,  1509,
     765,  1996,  1997,  1513,   129,   130,  1125,  1517,    10,    11,
    1520,   882,   127,  1495,  1496,    74,  1997,  1997,   122,   118,
      79,   120,   122,  1505,   124,   128,   122,    86,  1147,    77,
     122,   120,   124,  1543,     1,   120,     3,   140,    77,    87,
    1550,   144,    14,    15,  1495,  1496,    94,    95,    87,   832,
     833,   110,   111,   120,  1505,    94,    95,    74,     1,     1,
       3,     3,    79,   122,     1,   118,     3,   120,   118,    86,
     120,   120,  1516,  1871,   832,   833,   122,  1908,   124,  1910,
     128,  1591,  1672,     1,  1594,     3,   851,  1597,  1532,   854,
     496,   497,   140,   110,   111,     1,   144,     3,  1699,   121,
    1701,   118,   119,   120,     1,  1615,     3,  1617,  1618,   122,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
     118,     1,  1723,     3,  1725,   124,   118,   892,   120,   118,
     118,   120,   235,   118,   115,   120,  1393,  1430,   122,  1432,
     124,  1972,   248,  1653,  1430,   115,  1432,  1699,   122,  1701,
     115,   916,   258,   918,   260,   194,   496,   497,  1668,   604,
     605,   604,   605,    94,    95,  1675,   118,  1677,   774,   775,
     115,  1723,   118,  1725,   115,   278,   116,  1687,  1996,   118,
     118,   284,   118,  1996,   113,   113,   121,    44,    45,  1699,
     122,  1701,   118,   118,   118,   122,   118,   118,   121,  1746,
     248,   113,   119,   116,   124,   121,   121,   116,   973,   248,
     258,   119,   260,  1723,   116,  1725,   127,    74,    75,   258,
     127,   260,    79,   127,   116,   115,   124,   116,   116,    86,
    1740,  1741,  1742,  1743,  1105,    56,  1746,   124,   115,   115,
    1750,  1751,   115,  1753,   118,  1755,  1882,  1883,  1013,   118,
     118,   115,   113,   110,   111,   113,   118,  1767,   115,  1024,
    1071,  1072,  1073,  1074,  1746,   116,  1776,   116,   116,  1779,
    1413,  1414,   113,   376,  1393,   115,   115,   383,  1879,   382,
    1091,   126,   113,   116,   116,  1050,  1051,   116,   126,   116,
     120,   394,   120,   116,   116,  1746,   121,  1807,   124,  1809,
     124,    56,   116,   116,   124,   124,   124,   124,   124,   124,
     116,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,   126,   118,   430,   116,  1770,  1879,  1772,   116,
     127,   127,   116,   127,   382,   124,   124,   115,   115,  1596,
     116,  1598,   115,   126,   447,   116,   394,   116,   116,   116,
     116,   116,   116,   127,   113,  1612,  1613,   127,    11,   116,
    1125,  1908,   118,  1910,   127,   127,   126,  1877,  1878,  1879,
    1880,  1881,  1882,  1883,   122,   119,   122,   124,  1888,  1889,
    1890,  1891,  1147,   124,   118,   115,   119,   119,   127,  1899,
     118,   430,   116,   122,    64,  1985,  1986,    64,  1908,   447,
    1910,   127,   127,    80,  1169,   127,   127,  1172,   127,  1919,
    1920,  1176,   127,   127,   116,  1180,   116,   113,   114,   116,
       0,    44,    45,   116,   118,  1972,  1908,   123,  1910,   116,
     118,   116,   128,   129,   130,   127,   132,   133,   134,   135,
     136,   127,   118,   127,  1954,  1955,   127,   118,   122,  1959,
    1960,    74,    75,  1963,   118,  1965,    79,  1908,  1968,  1910,
     116,    41,  1972,    86,   118,  2027,   118,   118,   118,   118,
     118,   118,  1916,    53,  1918,   118,  1986,  1596,  1988,  1598,
      60,   118,  1992,   122,   118,   902,   437,   110,   111,   437,
    1972,   780,   115,  1612,  1613,  2005,   838,    77,   291,   291,
      80,  1388,   893,   437,   437,   258,    86,    87,   258,   394,
     662,  1008,   284,   924,    94,    95,  1810,  2027,  2028,   235,
     668,  1972,  1976,  2033,    94,   631,   431,   107,    87,   240,
     110,    87,  1976,  1977,  2044,  1979,   437,  1981,    95,    87,
    1653,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
     130,  1808,    -1,    -1,   657,   658,    -1,    -1,   661,   662,
     140,  1818,   142,   143,   144,   145,    -1,   147,    -1,    44,
      45,    -1,    -1,    -1,    -1,  2019,  2020,    -1,  2022,    -1,
      -1,    -1,    -1,   631,    -1,    -1,   166,    -1,    -1,    -1,
      -1,    -1,   631,   173,  2038,    -1,    -1,   636,    -1,    74,
      75,    -1,    -1,    -1,    79,   185,    -1,  1478,    -1,    -1,
    2054,    86,    -1,    -1,   194,    -1,    -1,  1874,  1875,    -1,
      -1,  1386,    -1,    -1,    -1,    -1,    -1,    -1,  1393,   668,
      -1,   270,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     279,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   235,    -1,    -1,   238,   239,
     240,    -1,    -1,    -1,    -1,  1430,    -1,  1432,   248,    -1,
      -1,    -1,   349,    -1,    -1,    -1,    -1,    -1,   258,   259,
     260,    -1,    -1,    -1,  1449,    -1,    -1,    -1,    -1,  1808,
      -1,    -1,    -1,    -1,   800,    -1,   799,    -1,   278,  1818,
      -1,    -1,    -1,    -1,   284,    -1,   383,   810,   127,    -1,
      -1,   130,    -1,   293,    -1,    -1,   393,    -1,    -1,   396,
      -1,    -1,    -1,    -1,   143,    -1,   145,  1492,   147,    -1,
      -1,   770,    -1,    -1,  1877,  1878,    -1,  1880,  1881,   378,
      -1,    -1,    -1,    -1,  1615,  1888,  1889,  1890,  1891,    -1,
      -1,   799,    -1,    -1,   431,  1874,  1875,    -1,    -1,    -1,
     437,   800,   810,    -1,    -1,    -1,    -1,    -1,   807,   349,
      -1,    -1,    -1,    -1,    -1,   814,   882,    -1,    -1,    -1,
       7,    -1,    -1,    10,    11,    12,    13,    14,    15,    16,
      17,    -1,   106,    -1,    -1,    -1,   376,    -1,   378,   379,
      -1,    -1,   382,   383,    -1,    -1,    -1,    -1,    -1,   389,
      -1,  1954,  1955,   393,   394,    -1,   396,    -1,   924,    -1,
      -1,   924,    -1,    -1,    -1,    -1,   865,    -1,   505,    -1,
      -1,  1596,    -1,  1598,    -1,    -1,   513,    -1,    -1,    -1,
      -1,    -1,  1607,   882,    86,   425,   426,  1612,  1613,    -1,
     430,   431,    -1,   530,  1619,    -1,   533,   437,   535,    -1,
     537,    -1,   442,    -1,     1,    -1,     3,   447,    -1,    -1,
      -1,   451,   452,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   113,   114,    -1,    -1,
      -1,    -1,    -1,   473,   474,    -1,   123,    -1,   478,   479,
      -1,    -1,   482,   483,   484,   132,   133,   134,   135,   136,
      -1,   491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1685,    -1,    -1,    -1,   166,   505,   240,    -1,    -1,    -1,
     510,    -1,   512,   513,   514,    -1,    -1,    74,  1809,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    -1,    86,
     530,    -1,    -1,   533,    -1,   535,    -1,   537,    -1,    -1,
      -1,    -1,    -1,    -1,   544,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,   118,   296,   120,   121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   632,    -1,    -1,   238,   239,   240,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   425,   426,    -1,    -1,
      -1,    -1,  1777,  1778,    -1,    -1,    -1,   259,    -1,  1122,
      -1,    -1,    -1,    -1,   604,   605,   606,   607,    -1,    -1,
      -1,    -1,   451,   452,    -1,    -1,    -1,    -1,    -1,  1142,
      -1,    -1,    -1,  1808,    -1,    -1,  1149,   627,   628,    -1,
      -1,   631,    -1,  1818,   473,   474,   636,  1096,    -1,   478,
     479,    -1,    -1,   482,   483,    -1,  1105,    -1,    -1,    -1,
     650,    -1,    -1,    -1,    -1,    -1,    -1,   657,   658,   659,
      -1,   661,   662,    -1,    -1,    -1,    -1,    -1,   668,    -1,
      -1,   510,    -1,   512,     0,    -1,   773,   774,   775,   679,
      -1,    -1,   682,    -1,    -1,   425,   426,   784,   688,  1874,
    1875,   691,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   451,   452,    -1,    -1,    -1,    -1,    -1,   777,    -1,
      46,   780,   781,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   473,   474,    -1,    -1,    -1,   478,   479,
      -1,    -1,   482,   483,    -1,    -1,    -1,    -1,    -1,     0,
      -1,    77,    78,    -1,    -1,    -1,   490,    -1,    -1,    85,
      -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
     770,    -1,    -1,   773,   774,   775,    -1,   777,    -1,    -1,
     780,   781,    -1,    -1,   784,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1978,   120,   121,    -1,    -1,    -1,   799,
     800,   127,    -1,    -1,   130,    -1,    -1,   807,    -1,   543,
     810,  1996,   812,    -1,   814,    -1,    -1,   143,    -1,   145,
      -1,   147,   484,    -1,   883,    -1,    77,    -1,    -1,   491,
      -1,    -1,    -1,    -1,    -1,    -1,    87,    -1,   164,   165,
     574,    -1,    -1,    94,    95,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   865,    -1,    -1,   194,    -1,
     604,   605,   606,   607,    -1,   972,    -1,   128,    -1,    -1,
     977,    -1,   882,   883,    -1,    -1,   983,    -1,    -1,   140,
     890,   891,   989,   144,    -1,   895,    -1,    -1,   995,    -1,
      -1,    -1,   902,    -1,    -1,    -1,    -1,    -1,    -1,   235,
      -1,    -1,    -1,    -1,    -1,    -1,   916,   917,   918,    -1,
      -1,    -1,   248,    74,   924,    -1,    -1,    -1,    79,   663,
      -1,    -1,   258,   667,   260,    86,    -1,    -1,    -1,    -1,
      -1,    -1,   604,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   952,   953,    -1,    -1,   956,   957,    -1,   110,
     111,   112,   696,    -1,   115,   627,   628,   118,    -1,   120,
     121,    -1,   972,   973,    -1,    -1,   710,   977,     1,    -1,
       3,     4,     5,   983,    -1,    -1,    -1,    -1,   650,   989,
      -1,    -1,    -1,   832,   833,   995,    -1,   248,    -1,    -1,
      -1,    -1,    -1,   737,    -1,    28,    -1,   258,   742,   260,
      -1,   745,    -1,  1013,    -1,    -1,    -1,    -1,    -1,  1478,
     682,    -1,    -1,    -1,    -1,    -1,   688,  1124,    -1,   691,
     356,   765,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
     376,    -1,    -1,    -1,    -1,    -1,   895,   383,    -1,    -1,
      -1,    -1,    85,    -1,  1123,    -1,    -1,    -1,    -1,   395,
      -1,  1071,  1072,  1073,  1074,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,    -1,    -1,  1089,
    1090,  1091,   115,    -1,    -1,    -1,  1096,    -1,    -1,   425,
     426,    -1,   125,   126,   430,  1105,    -1,    -1,   434,    -1,
      -1,   437,    -1,   952,   953,    -1,    -1,   956,   957,    -1,
      -1,    -1,  1122,  1123,  1124,   451,   452,    -1,    -1,    -1,
      -1,   382,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1142,   394,    -1,    -1,    -1,   473,   474,  1149,
      -1,    -1,   478,   479,    -1,    -1,   482,   483,    -1,    -1,
     486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1168,  1169,
     496,   497,    -1,    -1,    -1,  1175,  1176,    -1,    -1,  1179,
    1180,    -1,    -1,    -1,   510,    -1,   512,   513,    -1,   515,
      -1,    -1,    -1,    -1,    -1,   929,   447,    -1,    -1,   525,
      -1,   527,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    77,   952,   953,    -1,    -1,   956,   957,    -1,    -1,
      -1,    87,    -1,    -1,  1321,  1322,    -1,    -1,    94,    95,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1089,  1090,    -1,    -1,   916,   917,   918,    -1,    -1,    -1,
      -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   140,    -1,    -1,    -1,   144,    -1,
      -1,    -1,  1016,  1342,    -1,  1019,  1345,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1028,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   631,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1050,  1051,    -1,    -1,
      -1,  1321,  1322,  1057,    -1,  1059,    -1,    -1,    -1,  1063,
      -1,   657,  1066,    -1,  1068,   661,    -1,  1071,  1072,  1073,
    1074,    -1,  1342,    -1,    -1,  1345,    -1,    -1,  1407,    -1,
      -1,  1013,    -1,   679,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1422,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1112,   240,
     631,    -1,   248,    -1,  1118,    -1,  1386,    -1,    -1,    -1,
      -1,    -1,   258,    -1,   260,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1407,    -1,  1071,
    1072,  1073,  1074,  1413,  1414,    -1,    -1,    -1,  1418,  1419,
    1420,  1421,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1091,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   784,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   799,   800,    -1,    -1,    -1,  1478,    -1,
      -1,   807,    -1,    -1,   810,    -1,   812,    -1,    -1,    -1,
      -1,  1491,  1492,    -1,    -1,    -1,    -1,  1594,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1168,  1169,    -1,    -1,
      -1,    -1,    -1,  1175,  1176,    -1,   382,  1179,  1180,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   852,    -1,   394,    -1,
      -1,    -1,  1591,    -1,   860,    -1,    -1,    -1,  1597,   865,
      -1,    -1,    -1,    -1,    -1,    -1,   872,    -1,   799,    -1,
    1550,    -1,    -1,    -1,    -1,    -1,   882,    -1,    -1,   810,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   895,
      -1,    -1,    -1,    -1,  1413,  1414,    -1,    -1,    -1,  1638,
    1639,   447,  1641,  1642,    -1,    -1,    -1,  1646,  1647,  1648,
    1649,  1591,    -1,   122,  1594,    -1,    -1,  1597,   924,  1658,
    1659,  1660,  1661,  1662,  1663,  1664,  1665,    -1,    -1,  1668,
      -1,    -1,    -1,    -1,    -1,  1615,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   952,   953,    -1,    -1,
     956,   957,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   969,   127,   971,    -1,   130,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     143,    -1,   145,    -1,   147,    -1,    -1,    -1,  1668,    -1,
      -1,    -1,    -1,  1413,  1414,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1684,  1685,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1699,
      -1,  1701,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   574,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1455,    -1,  1723,  1386,  1725,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   270,    -1,   604,   605,   606,   607,    -1,  1807,    -1,
     279,    -1,    -1,    -1,    -1,    -1,   285,   240,    -1,    -1,
      -1,  1495,  1496,  1089,  1090,   631,    -1,    -1,    -1,  1503,
      -1,  1505,  1506,    -1,    -1,  1509,    -1,    -1,    -1,  1105,
      -1,    -1,    -1,  1517,    -1,    -1,  1520,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1122,    -1,  1124,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1807,    -1,  1809,
      -1,    -1,  1871,    -1,    -1,    -1,  1142,    -1,    -1,    -1,
      -1,    -1,    -1,  1149,    -1,    -1,    -1,    -1,    -1,  1491,
    1492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1699,    -1,  1701,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1607,    -1,    -1,    -1,  1877,  1878,  1879,
    1880,  1881,  1882,  1883,  1723,  1619,  1725,    -1,  1888,  1889,
    1890,  1891,    -1,    -1,    -1,    -1,    -1,    -1,  1632,    -1,
      -1,    -1,    -1,  1637,    -1,    -1,  1640,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   799,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   425,   426,   810,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1954,  1955,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   451,   452,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1718,    -1,    -1,    -1,    -1,    -1,
     473,   474,    -1,    -1,    -1,   478,   479,    -1,    -1,   482,
     483,   484,   863,    -1,    -1,    -1,  1740,  1741,  1742,  1743,
      -1,    -1,  1746,    -1,    -1,    -1,  1750,  1751,    -1,  1753,
      -1,  1755,  1684,  1685,    -1,    -1,    -1,   510,    -1,   512,
      -1,    -1,    -1,  1767,    -1,  1361,    -1,    -1,  1877,  1878,
    1879,  1880,  1881,  1777,  1778,    -1,    -1,    -1,    -1,  1888,
    1889,  1890,  1891,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1388,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1810,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1413,  1414,    -1,
      -1,   574,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   632,    -1,    -1,    -1,    -1,   143,    -1,
     145,    -1,   147,    -1,    -1,  1954,  1955,    -1,    -1,    -1,
      -1,   604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1877,  1878,    -1,
    1880,  1881,    -1,   127,    -1,    -1,   130,    -1,  1888,  1889,
    1890,  1891,  1478,    -1,    -1,  1016,    -1,    -1,  1019,   143,
      -1,   145,    -1,   147,    -1,  1899,    -1,  1028,    -1,    -1,
      -1,    -1,    -1,    -1,  1908,    -1,  1910,    -1,   106,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   122,    -1,  1057,    -1,    -1,   682,
      -1,    -1,    -1,  1937,    -1,   688,    -1,    -1,   691,    -1,
    1071,  1072,  1073,  1074,  1954,  1955,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1959,  1960,    -1,    -1,  1963,
      -1,  1965,    -1,    -1,  1968,    -1,    -1,    -1,  1972,   274,
      -1,    -1,    -1,    -1,  1978,   173,     1,    -1,   777,    -1,
      -1,   780,   781,    -1,    -1,    -1,   291,    -1,    -1,    -1,
      -1,    -1,  1996,  1997,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2005,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,  2033,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   270,    -1,    -1,   100,    -1,   275,   276,   832,
     833,   279,    -1,    -1,   883,   110,   111,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,   296,    -1,
      -1,    -1,    -1,  1699,    -1,  1701,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,   317,
     425,   426,    -1,    -1,    -1,    -1,    -1,  1723,    -1,  1725,
      -1,    -1,   437,    -1,    -1,    -1,  1732,    -1,    -1,    -1,
      -1,    -1,   895,    -1,    -1,    -1,   451,   452,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   916,    -1,   918,    -1,    -1,   473,   474,
      -1,   425,   426,   478,   479,    -1,    -1,   482,   483,    -1,
     378,    -1,    -1,   437,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   451,   452,   952,
     953,    -1,    -1,   956,   957,   510,    -1,   512,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   473,
     474,    -1,    -1,    -1,   478,   479,    -1,    -1,   482,   483,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   510,    -1,   512,    -1,
    1013,    -1,    -1,  1016,    -1,    -1,  1019,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1028,    -1,    -1,    -1,    -1,
      -1,  1877,  1878,  1879,  1880,  1881,   484,    -1,    -1,    -1,
      -1,    -1,  1888,  1889,  1890,  1891,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1057,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,  1071,  1072,
    1073,  1074,    -1,    -1,  1123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1089,  1090,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   543,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1954,  1955,
      -1,    -1,    -1,     1,  1495,  1496,    -1,    -1,    -1,    -1,
      -1,   569,  1503,    -1,  1505,  1506,    -1,    -1,  1509,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1517,    -1,    -1,  1520,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,  1169,    -1,    -1,    -1,
      -1,    -1,    -1,  1176,    -1,    -1,    -1,  1180,    66,    -1,
      -1,    -1,    -1,    -1,   632,    -1,    74,    75,   636,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,   663,    -1,    -1,    -1,   667,
     668,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,   120,   121,   682,    -1,    -1,    -1,    -1,    -1,
     688,    -1,    -1,   691,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   710,    -1,    -1,    -1,    -1,    -1,   716,   717,
     718,   719,   720,   721,   722,    -1,    -1,   725,   726,    -1,
     728,   729,   730,   731,   732,   733,   734,   735,    -1,   737,
      -1,    -1,    -1,  1342,    -1,    -1,  1345,   745,   746,   747,
     748,   749,   750,   751,   752,   753,   754,   755,   756,   757,
     758,   759,   760,   761,   762,   763,    -1,   765,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   777,
      -1,    -1,   780,   781,    -1,    -1,    -1,    -1,    -1,    -1,
     895,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1407,  1740,
    1741,  1742,  1743,    -1,    -1,  1746,    -1,    -1,    -1,  1750,
    1751,    -1,  1753,  1422,  1755,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1386,    -1,    -1,  1767,    -1,    -1,    -1,
      -1,   895,    -1,    -1,    -1,    -1,    -1,   952,   953,    -1,
      -1,   956,   957,   851,    -1,    -1,   854,    -1,    -1,    -1,
    1413,  1414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1430,    -1,  1432,
      -1,    -1,    -1,    -1,    -1,   883,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   892,    -1,    -1,    -1,   952,   953,
      -1,    -1,   956,   957,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,    -1,    -1,    -1,    -1,    -1,    -1,   916,    -1,
     918,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1492,
      -1,    -1,  1495,  1496,    -1,    -1,    -1,    -1,    -1,    -1,
    1503,    -1,  1505,  1506,    -1,    -1,  1509,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1517,    -1,    -1,  1520,  1899,    -1,
      -1,    -1,    -1,    -1,    -1,   973,    -1,  1908,   173,  1910,
      -1,    -1,    -1,    -1,  1089,  1090,    -1,    -1,    -1,    -1,
      -1,    -1,  1591,    -1,    -1,    -1,    -1,    -1,  1597,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1013,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1024,    -1,  1959,  1960,
      -1,    -1,  1963,    -1,  1965,  1089,  1090,  1968,    -1,  1638,
    1639,  1972,  1641,  1642,    -1,    -1,    -1,  1646,  1647,  1648,
    1649,    -1,  1050,  1051,    -1,    -1,    -1,    -1,    -1,  1658,
    1659,  1660,  1661,  1662,  1663,  1664,  1665,    -1,    -1,  1668,
      -1,    -1,    -1,    -1,  2005,   270,    -1,    -1,    -1,    -1,
     275,   276,    -1,    -1,   279,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   296,  2033,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,
      -1,    -1,   317,    -1,    -1,  1123,    -1,  1125,    -1,    -1,
      -1,    -1,  1685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1699,    -1,  1701,  1147,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,  1165,    -1,    -1,
    1723,  1169,  1725,    -1,  1172,    -1,    -1,    -1,  1176,    28,
      -1,    -1,  1180,   378,    -1,    -1,    -1,  1740,  1741,  1742,
    1743,    -1,    -1,  1746,    -1,    -1,    -1,  1750,  1751,    -1,
    1753,    -1,  1755,    -1,    -1,    -1,    -1,    -1,  1807,    -1,
      -1,    -1,    -1,    -1,  1767,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    -1,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,    -1,  1871,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,   484,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1413,  1414,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,
      -1,    -1,    -1,    -1,  1877,  1878,  1879,  1880,  1881,    -1,
      -1,    -1,    -1,    -1,    -1,  1888,  1889,  1890,  1891,    -1,
      -1,    -1,    -1,    -1,  1342,    -1,  1899,  1345,   543,    -1,
      -1,    -1,    -1,    -1,    -1,  1908,    -1,  1910,    -1,  1413,
    1414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   569,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1386,    -1,
      -1,    -1,    -1,    -1,    -1,  1393,    -1,    -1,    -1,    -1,
      -1,  1954,  1955,    -1,    -1,    -1,  1959,  1960,    -1,  1407,
    1963,    -1,  1965,    -1,    -1,  1968,    -1,    -1,    -1,  1972,
      -1,    -1,    -1,    -1,  1422,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1430,    -1,  1432,    -1,    -1,   632,    -1,    -1,
      -1,   636,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1449,  2005,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   663,    -1,
      -1,    -1,   667,   668,    -1,    -1,    -1,    -1,    -1,    -1,
    2033,    -1,    -1,    -1,    -1,    -1,    -1,   682,    -1,    -1,
      -1,    -1,    -1,   688,  1492,    -1,   691,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   710,    -1,    -1,    -1,    -1,
      -1,   716,   717,   718,   719,   720,   721,   722,    -1,    -1,
     725,   726,    -1,   728,   729,   730,   731,   732,   733,   734,
     735,    -1,   737,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,    -1,
     765,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   777,    -1,    -1,   780,   781,    -1,    -1,    -1,
      -1,    -1,    -1,  1591,  1699,    -1,  1701,    -1,  1596,  1597,
    1598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1607,
      -1,    -1,    -1,    -1,  1612,  1613,    -1,    -1,  1723,    -1,
    1725,  1619,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
    1638,  1639,    -1,  1641,  1642,  1699,    -1,  1701,  1646,  1647,
    1648,  1649,    -1,    -1,    -1,    28,   851,    -1,    -1,   854,
    1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,    -1,  1723,
    1668,  1725,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1685,   883,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,   892,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   916,    -1,   918,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1877,  1878,  1879,  1880,  1881,    -1,   973,  1777,
    1778,    -1,    -1,  1888,  1889,  1890,  1891,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1807,
    1808,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1013,    -1,
    1818,    -1,    -1,  1877,  1878,  1879,  1880,  1881,    -1,  1024,
      -1,    -1,    -1,    -1,  1888,  1889,  1890,  1891,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1954,
    1955,    -1,    -1,    -1,    -1,  1050,  1051,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     0,  1871,    -1,    -1,  1874,  1875,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1954,  1955,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1123,    -1,
    1125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,
      78,    -1,  1147,    -1,    82,    -1,    -1,    85,    -1,    87,
      -1,    45,    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,
    1165,    -1,    -1,    -1,  1169,    -1,    -1,  1172,    -1,    -1,
    1978,  1176,    -1,    -1,    -1,  1180,    -1,    -1,    -1,    -1,
      -1,   119,   120,    77,    -1,    -1,    -1,    -1,  1996,    -1,
      -1,    -1,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
      -1,    -1,    -1,    -1,    -1,   163,   164,    -1,   122,    -1,
      -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   140,    -1,   142,    -1,
     144,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   204,    -1,    -1,   207,
      -1,    -1,   166,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   296,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,   312,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     248,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     258,    -1,   260,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1342,    -1,    -1,
    1345,   235,    -1,    -1,   238,   239,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   258,   259,   260,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,  1386,    -1,    -1,   278,    -1,    -1,    -1,  1393,    -1,
     284,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,   293,
      -1,    -1,  1407,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1422,   356,    -1,
     358,    -1,    -1,    -1,    -1,  1430,    -1,  1432,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,  1449,    -1,    -1,    -1,    -1,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   376,   117,   378,   379,   120,  1492,   382,    -1,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
     394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   430,    -1,   574,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,    -1,
     488,    -1,    -1,   447,    -1,    -1,    -1,    -1,   496,   497,
      -1,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,    -1,
     606,   607,    -1,    -1,    -1,   513,    -1,   515,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   523,  1591,   525,    -1,    -1,
     484,  1596,  1597,  1598,    -1,    -1,    -1,   491,    -1,    -1,
      -1,    -1,  1607,    -1,    -1,    -1,    -1,  1612,  1613,    -1,
      -1,    -1,    -1,    -1,  1619,    -1,    -1,    -1,    -1,   557,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1638,  1639,    -1,  1641,  1642,    -1,    -1,
      -1,  1646,  1647,  1648,  1649,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1658,  1659,  1660,  1661,  1662,  1663,  1664,
    1665,    -1,    -1,  1668,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1685,    -1,    -1,   696,    -1,    -1,   580,    -1,    -1,    -1,
      -1,    -1,    -1,   631,    -1,    -1,    -1,   710,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     604,   605,   606,   607,    -1,    -1,   729,   730,   731,   732,
     733,    -1,    -1,   736,   737,    -1,    -1,    -1,    -1,   742,
      -1,    -1,   745,   627,   628,    -1,    -1,   631,    -1,    -1,
      -1,    -1,   636,    -1,   757,   758,   759,   760,   761,    -1,
      86,   764,   765,    -1,    -1,    -1,   650,    -1,    -1,    -1,
      -1,    -1,    -1,   657,   658,   659,    -1,   661,   662,   782,
     783,    -1,  1777,  1778,   668,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   679,   122,    -1,   682,    -1,
      -1,    -1,    -1,    -1,   688,    -1,    -1,   691,    -1,    -1,
      -1,    -1,  1807,  1808,    -1,    -1,   142,    -1,    -1,    -1,
      -1,    -1,    -1,  1818,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     166,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1871,    -1,    -1,  1874,
    1875,    -1,    -1,    -1,   812,    -1,   770,    -1,    -1,    -1,
      -1,    -1,    -1,   777,    -1,    -1,   780,   781,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,
      -1,    -1,   238,   239,   240,   799,   800,    -1,    -1,    -1,
      -1,    -1,    -1,   807,   852,    -1,   810,   811,   812,    -1,
     814,    -1,    -1,   259,    -1,    -1,    -1,   865,    -1,    -1,
      -1,    -1,    -1,    -1,   872,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,   284,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   293,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   865,    -1,  1978,    -1,    -1,    -1,    -1,    -1,    -1,
    1016,    -1,    -1,  1019,    -1,    -1,    -1,    -1,   882,   883,
      -1,  1996,  1028,    -1,    -1,    -1,   890,   891,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,   902,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,  1031,    -1,
      -1,  1057,   916,   917,   918,    -1,    -1,    -1,    -1,    -1,
     924,    -1,    -1,   971,    28,  1071,  1072,  1073,  1074,    -1,
     376,    -1,   378,   379,    -1,    -1,  1059,    -1,    -1,    -1,
      -1,    -1,    -1,  1066,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    85,    -1,    -1,   430,    -1,    -1,    -1,    -1,  1112,
      -1,    -1,    -1,    -1,    98,  1118,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,  1013,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,  1032,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,
      -1,    -1,    -1,    -1,    -1,   491,    -1,    -1,    -1,  1172,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1071,  1072,  1073,
    1074,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1091,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,
      -1,  1105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1122,  1123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,  1142,    -1,
      -1,    -1,    -1,    -1,    -1,  1149,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   142,    -1,    -1,    -1,    -1,   604,   605,
     606,   607,    -1,    -1,  1168,  1169,    -1,    -1,    -1,    -1,
      -1,  1175,  1176,    -1,    -1,  1179,  1180,   166,    -1,    -1,
      -1,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     636,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   650,   194,    -1,    -1,    -1,    -1,
      -1,   657,   658,   659,    -1,   661,   662,    -1,    -1,    -1,
      -1,    -1,   668,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   679,    -1,    -1,   682,    -1,    -1,    -1,
      -1,    -1,   688,    -1,    -1,   691,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     259,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   278,
      -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   293,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   770,    -1,    -1,    -1,    -1,    -1,
      -1,   777,    -1,    -1,   780,   781,    -1,    -1,  1342,    -1,
      -1,  1345,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1495,
    1496,    -1,    -1,    -1,   800,    -1,    -1,  1503,    -1,  1505,
    1506,   807,    -1,  1509,    -1,    -1,   812,    -1,   814,    -1,
      -1,  1517,    -1,    -1,  1520,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1386,    -1,    -1,    -1,    -1,   376,    -1,   378,
     379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1407,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1418,  1419,  1420,  1421,    -1,   865,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1478,    -1,    -1,    -1,    -1,    -1,   882,   883,    -1,    -1,
      -1,   430,    -1,    -1,   890,   891,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   902,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     916,   917,   918,    -1,  1478,    -1,    -1,    -1,   924,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1491,  1492,    -1,
      -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,    -1,    -1,
      -1,    -1,   491,    -1,    -1,    -1,    -1,    -1,    -1,  1632,
      -1,    -1,    -1,    -1,  1637,  1638,  1639,  1640,  1641,  1642,
      -1,    -1,    -1,  1646,  1647,  1648,  1649,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1658,  1659,  1660,  1661,  1662,
    1663,  1664,  1665,    -1,    -1,    -1,  1550,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1013,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1591,    -1,    -1,
      -1,    -1,    -1,  1597,  1740,  1741,  1742,  1743,    -1,    -1,
    1746,    -1,    -1,    -1,  1750,  1751,    -1,  1753,    -1,  1755,
     312,  1615,    -1,    -1,    -1,   604,   605,   606,   607,    -1,
      -1,  1767,    -1,    -1,    -1,  1071,  1072,  1073,  1074,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   627,   628,
      -1,    -1,    -1,    -1,    -1,  1091,    -1,   636,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,    -1,  1105,
      -1,   650,    -1,    -1,  1668,    -1,    -1,    -1,   657,   658,
     659,    -1,   661,   662,    -1,    -1,  1122,  1123,    -1,   668,
    1684,  1685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     679,   122,    -1,   682,    -1,    -1,  1142,   128,    -1,   688,
      -1,    -1,   691,  1149,    -1,    -1,    -1,    -1,    -1,   140,
      -1,   142,    -1,   144,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1168,  1169,    -1,    -1,    -1,    -1,    -1,  1175,
    1176,    -1,    -1,  1179,  1180,   166,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1899,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1908,   194,  1910,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   770,    -1,    -1,    -1,    -1,    -1,    -1,   777,    -1,
      -1,   780,   781,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1807,   235,  1809,    -1,   238,   239,   240,
      -1,   800,    -1,  1959,  1960,    -1,    -1,  1963,   807,  1965,
      -1,    -1,  1968,   812,    -1,   814,  1972,    -1,   259,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   278,    -1,    -1,
      -1,    -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,  2005,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   865,   579,  1882,  1883,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2033,    -1,    -1,
      -1,    -1,    -1,   882,   883,    -1,  1342,    -1,    -1,  1345,
      -1,   890,   891,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   902,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   916,   917,   918,
      -1,    -1,    -1,    -1,    -1,   924,    -1,    -1,    -1,    -1,
    1386,    -1,    -1,    -1,    -1,   376,    -1,   378,   379,    -1,
      -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1407,    -1,   394,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1418,  1419,  1420,  1421,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   696,    -1,    -1,    -1,    -1,   430,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   447,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1013,    -1,    -1,   729,   730,   731,
     732,   733,  1478,    -1,   736,    -1,    -1,    -1,    -1,    -1,
     742,    -1,    -1,    -1,    -1,  1491,  1492,    -1,    -1,    -1,
      -1,    -1,    86,   484,    -1,   757,   758,   759,   760,   761,
     491,    -1,   764,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     782,   783,  1071,  1072,  1073,  1074,    -1,    -1,   122,    -1,
      -1,    -1,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1091,    -1,  1550,    -1,   140,    -1,   142,    -1,
     144,    -1,    -1,    -1,    -1,    -1,  1105,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   166,  1122,  1123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1591,    -1,    -1,    -1,    -1,
      -1,  1597,    -1,  1142,    -1,    -1,    -1,    -1,    -1,    -1,
    1149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1615,
      -1,    -1,    -1,   604,   605,   606,   607,    -1,    -1,  1168,
    1169,    -1,    -1,    -1,    -1,    -1,  1175,  1176,    -1,    -1,
    1179,  1180,    -1,    -1,    -1,    -1,   627,   628,    -1,    -1,
      -1,   235,    -1,    -1,   238,   239,   240,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,   650,
      -1,    -1,  1668,    -1,    -1,   259,   657,   658,    -1,    -1,
     661,   662,    -1,    -1,    28,    -1,    -1,    -1,  1684,  1685,
      -1,    -1,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,
     284,   682,    -1,    -1,    -1,    -1,    -1,   688,    -1,    -1,
     691,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,  1031,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,   770,
      -1,    -1,   376,    -1,   378,   379,   777,    -1,   382,   780,
     781,    -1,    -1,  1342,    -1,    -1,  1345,  1059,    -1,    -1,
     394,  1807,    -1,  1809,  1066,    -1,    -1,    -1,   799,   800,
      -1,    -1,    -1,    -1,    -1,    -1,   807,    -1,    -1,   810,
      -1,    -1,    -1,   814,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1386,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1112,    -1,    -1,   447,    -1,    -1,  1118,    -1,  1407,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1418,
    1419,  1420,  1421,    -1,   865,    -1,  1882,  1883,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     484,   882,   883,    -1,    -1,    -1,    -1,   491,    -1,   890,
     891,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   902,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,    -1,   916,   917,   918,    -1,  1478,
      -1,    -1,    -1,   924,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1491,  1492,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,  1550,    82,    83,    -1,    85,    86,    87,    -1,    -1,
     604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,  1013,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   627,   628,   115,   116,    -1,    -1,    -1,
      -1,    -1,  1591,    -1,    -1,    -1,   126,    -1,  1597,    86,
      -1,    -1,    -1,    -1,    -1,    -1,   650,    -1,    -1,    -1,
      -1,    -1,    -1,   657,   658,    -1,  1615,   661,   662,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1071,  1072,  1073,  1074,    -1,   122,    -1,    -1,   682,    -1,
      -1,   128,    -1,    -1,   688,    -1,    -1,   691,    -1,    -1,
    1091,    -1,    -1,   140,    -1,   142,    -1,   144,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1668,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   166,
      -1,  1122,  1123,    -1,    -1,  1684,  1685,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   240,    -1,    -1,    -1,
      -1,  1142,    -1,    -1,    -1,    -1,    -1,    -1,  1149,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1168,  1169,    -1,
      -1,    -1,    -1,   777,  1175,  1176,   780,   781,  1179,  1180,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,   293,
      -1,   238,   239,   240,    -1,   799,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   810,    -1,    -1,    -1,
      -1,    -1,   259,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   278,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1807,    -1,
    1809,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   883,
      -1,    -1,    -1,    -1,    -1,    -1,   890,   891,    -1,    -1,
      -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,   902,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   916,   917,   918,    -1,    -1,    -1,    -1,    -1,
     924,    -1,    -1,  1882,  1883,    -1,    -1,    -1,    -1,   376,
      -1,   378,   379,    -1,    -1,   382,    -1,    -1,    -1,    -1,
      -1,  1342,    -1,    -1,  1345,    -1,    -1,   394,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1632,    -1,    -1,    -1,    -1,  1637,  1638,  1639,  1640,  1641,
    1642,    -1,    -1,    -1,  1646,  1647,  1648,  1649,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1386,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     447,    -1,    -1,    -1,    -1,    -1,  1407,    -1,    -1,  1013,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1418,  1419,  1420,
    1421,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,
      -1,    -1,    -1,    -1,   491,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1071,  1072,  1073,
    1074,    -1,    -1,    -1,    -1,   579,   122,  1478,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1091,    -1,   593,
    1491,  1492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     604,   605,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1122,  1123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1142,    -1,
      -1,   645,    -1,    -1,    -1,  1149,    -1,    -1,    -1,  1550,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   604,   605,   606,
     607,    -1,    -1,    -1,  1168,  1169,    -1,    -1,    -1,   673,
      -1,  1175,  1176,    -1,    -1,  1179,  1180,    -1,    -1,    -1,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1591,    -1,    -1,    -1,   698,    -1,  1597,    -1,    -1,    -1,
      -1,    -1,    -1,   650,    -1,    -1,    -1,    -1,    -1,    -1,
     657,   658,    -1,    -1,   661,   662,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   736,   279,    -1,   682,    -1,    -1,    -1,   285,
     744,   688,    -1,     1,   691,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     764,    -1,    -1,    -1,    -1,    -1,    -1,  1668,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   782,   783,
      -1,    -1,    -1,  1684,  1685,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,   812,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,    -1,
     777,    -1,   378,   780,   781,    -1,    -1,    -1,  1342,    -1,
      98,  1345,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   799,    -1,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,   810,    -1,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1407,    -1,    -1,  1807,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1418,  1419,  1420,  1421,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   883,    -1,   484,    -1,
      -1,    -1,    -1,   890,   891,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   902,    -1,    -1,    -1,    -1,
     293,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,   916,
     917,   918,    -1,    -1,    -1,    -1,    -1,   924,    -1,    -1,
      -1,  1882,  1883,    -1,    -1,    -1,    -1,  1491,  1492,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1016,    -1,    -1,  1019,  1020,  1021,    -1,  1023,
      -1,    -1,    -1,   569,    -1,    -1,    -1,  1031,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1039,    -1,    -1,    -1,    -1,
      -1,    -1,  1046,    -1,    -1,    -1,  1550,    -1,    -1,    -1,
      -1,    -1,    -1,  1057,    -1,    -1,    -1,    -1,    -1,    -1,
    1064,    -1,   395,    -1,    -1,  1069,  1013,  1071,  1072,  1073,
    1074,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   632,  1591,    -1,    -1,
      -1,    -1,    -1,  1597,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1114,    -1,    -1,    -1,    -1,    -1,  1120,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1071,  1072,  1073,  1074,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   682,    -1,    -1,  1143,
      -1,    -1,   688,    -1,  1091,   691,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1668,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1122,  1123,    -1,    -1,    -1,
    1684,  1685,    -1,    -1,    -1,    -1,  1190,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1142,    -1,    -1,    -1,    -1,
      -1,    -1,  1149,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1168,  1169,    -1,    -1,    -1,    -1,    -1,  1175,  1176,
      -1,   777,  1179,  1180,   780,   781,    77,    78,  1242,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   579,    -1,    -1,    -1,
      -1,  1255,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     593,    -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   119,   120,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1306,  1807,    -1,   851,    -1,    -1,   854,    -1,
      -1,    -1,   645,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   163,   164,    -1,    -1,   659,    -1,  1332,    -1,
      -1,    -1,  1336,    -1,    -1,    -1,    -1,   883,    -1,    -1,
     673,   674,    -1,    -1,    -1,    -1,   892,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   698,    -1,    -1,    -1,    -1,
     916,    -1,   918,    -1,    -1,    -1,    -1,    -1,  1882,  1883,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   235,  1342,    -1,    -1,  1345,    -1,
      -1,    -1,    -1,   736,    -1,    -1,    -1,   248,    -1,    -1,
      -1,   744,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   973,    -1,    -1,
      -1,   764,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1386,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   782,
     783,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1407,    -1,    -1,    -1,    -1,    -1,    -1,  1013,    -1,    -1,
      -1,  1418,  1419,  1420,  1421,    -1,    -1,    -1,  1024,   812,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1495,  1496,    -1,    -1,  1499,    -1,  1501,    -1,    -1,
    1504,  1505,    -1,    -1,    -1,    -1,  1510,  1511,    -1,  1513,
      -1,    -1,    -1,    -1,    -1,   356,    -1,   358,    -1,  1523,
      -1,  1525,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,  1491,  1492,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,  1570,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1579,    -1,  1123,    -1,  1125,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   430,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,  1147,    -1,  1550,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
      -1,    -1,    -1,  1169,    -1,    -1,    -1,    -1,    -1,    -1,
    1176,    -1,    98,    -1,  1180,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,  1591,   486,   112,   488,    -1,   115,
    1597,   117,   118,    -1,   120,   496,   497,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,   513,    -1,   515,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   523,    -1,   525,    -1,    -1,  1020,  1021,    -1,
    1023,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1031,    -1,
      -1,  1034,    -1,    -1,    -1,    -1,  1039,    -1,    -1,    -1,
      -1,    -1,    -1,  1046,  1047,    -1,   557,    -1,    -1,    -1,
      -1,  1668,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1733,
       0,  1064,  1065,    -1,    -1,    -1,  1069,  1684,  1685,    -1,
      -1,    -1,  1746,  1747,    -1,    -1,    -1,    -1,    -1,    -1,
    1754,    -1,    -1,    -1,  1758,    -1,  1760,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1769,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    45,    46,    -1,    -1,    -1,
      -1,  1114,    -1,    -1,    -1,    -1,    -1,  1120,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1342,    -1,    -1,  1345,
      -1,    -1,    -1,    -1,    -1,  1809,    -1,    77,    78,    -1,
    1143,    -1,    82,    -1,    -1,    -1,    -1,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
    1386,    -1,   112,    -1,    -1,    -1,    -1,  1393,    -1,   119,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1190,  1191,    -1,
    1807,  1407,    -1,    -1,    -1,    77,    78,    -1,    -1,    -1,
      82,    -1,    -1,    85,    -1,    -1,  1422,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1430,    -1,  1432,    -1,    -1,    -1,
      -1,    -1,    -1,   163,    -1,    -1,  1900,  1901,    -1,  1903,
      -1,  1905,    -1,  1449,  1908,  1909,  1910,   119,   120,  1242,
      -1,  1244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1255,  1256,   194,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1882,  1883,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1492,    -1,    -1,    -1,
      -1,   163,   164,    -1,    -1,    -1,    -1,  1961,    -1,    -1,
    1964,    -1,    -1,    -1,    -1,   235,   807,    -1,  1972,    -1,
      -1,   812,    -1,  1306,    -1,  1308,    -1,    -1,   248,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,   258,    -1,
     260,    -1,   204,    -1,    -1,   207,    -1,    -1,    -1,  1332,
      -1,  1334,    -1,  1336,  2008,  1338,    -1,    -1,    -1,    -1,
      -1,   852,    -1,    -1,    -1,    -1,    -1,    -1,   859,   860,
      -1,    -1,    -1,   235,   865,    -1,    -1,    -1,    -1,    -1,
      -1,   872,    -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,
      -1,   882,    -1,    -1,    -1,  1591,    -1,    -1,    -1,    -1,
    1596,  1597,  1598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1612,  1613,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   924,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1638,  1639,    -1,  1641,  1642,    -1,    -1,    -1,
    1646,  1647,  1648,  1649,    -1,    -1,   376,    -1,    -1,    -1,
      -1,    -1,  1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,
      -1,    -1,  1668,    -1,    -1,   395,    -1,    -1,    -1,    -1,
     971,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1685,
      -1,    -1,    -1,    -1,   356,    -1,   358,    -1,    -1,    -1,
      -1,  1484,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     430,    -1,    -1,   433,    -1,    -1,  1499,  1500,  1501,  1502,
      -1,  1504,  1505,    -1,    -1,    -1,    -1,  1510,  1511,    -1,
    1513,    -1,  1515,   395,    -1,    -1,    -1,    -1,    -1,    -1,
    1523,  1524,  1525,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   433,   434,    -1,    -1,    -1,   496,   497,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1570,  1571,    -1,
      -1,    -1,    -1,   513,    -1,   515,  1579,  1580,    -1,    -1,
      -1,    -1,     1,   523,     3,     4,     5,     6,    -1,     8,
       9,  1807,  1808,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1818,    -1,   486,    -1,   488,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   496,   497,    -1,   557,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   513,    -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   523,    -1,   525,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,  1871,    -1,    -1,  1874,  1875,
      -1,    -1,    -1,    -1,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   631,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,   657,    -1,    -1,
      -1,   661,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1733,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   679,
      -1,    -1,    -1,     1,  1747,     3,    -1,    -1,    -1,  1752,
      -1,  1754,  1755,    -1,  1757,  1758,    -1,  1760,    -1,  1762,
      -1,    -1,    -1,    -1,    -1,  1768,  1769,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1809,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,   784,   785,    -1,    -1,    -1,  1360,
    1361,    -1,   110,   111,   112,    -1,    -1,   115,   116,   799,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   807,   126,    -1,
     810,   811,   812,    -1,    -1,    -1,    -1,  1388,    -1,  1390,
      -1,  1392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1900,  1901,    -1,
    1903,  1904,  1905,    -1,    -1,    -1,  1909,  1910,    -1,    -1,
      -1,    -1,   852,    -1,    -1,    -1,    -1,    -1,    -1,   859,
      -1,    -1,    -1,    -1,    -1,   865,    -1,    -1,    -1,    -1,
     812,    -1,   872,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   882,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1961,  1962,
      -1,  1964,  1965,    -1,    -1,    -1,  1969,  1478,    -1,    -1,
     852,    -1,    -1,    -1,    -1,    -1,    -1,   859,   860,    -1,
      -1,    -1,    -1,   865,   924,    -1,    -1,   869,    -1,   871,
     872,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2008,    -1,    -1,    -1,    -1,
      -1,    -1,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,   971,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1675,  1105,  1677,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1687,    -1,    -1,    -1,
      -1,    -1,  1122,    -1,  1124,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1142,    -1,    -1,    -1,    -1,     0,     1,  1149,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
    1360,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,  1388,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1390,    -1,
    1392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1478,    -1,
      -1,    -1,    -1,    -1,    -1,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,  1478,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,    -1,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,  1687,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,    -1,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     1,    -1,    -1,    -1,    -1,    -1,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,    -1,    -1,
     118,   119,   120,   121,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,   130,    -1,   132,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,   126,    -1,   128,   129,   130,
     131,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,   116,   117,   118,
      -1,   120,   121,   122,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,   116,
     117,   118,    -1,   120,   121,   122,    -1,   124,   125,   126,
      -1,   128,   129,   130,   131,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,   116,   117,   118,    -1,   120,   121,   122,    -1,   124,
     125,   126,    -1,   128,   129,   130,   131,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,   116,   117,   118,    -1,   120,   121,   122,
      -1,   124,   125,   126,    -1,   128,   129,   130,   131,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,   116,   117,   118,    -1,   120,
     121,   122,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,   116,   117,   118,
      -1,   120,   121,   122,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,   116,
     117,   118,    -1,   120,   121,   122,    -1,   124,   125,   126,
      -1,   128,   129,   130,   131,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,   116,   117,   118,    -1,   120,   121,   122,    -1,   124,
     125,   126,    -1,   128,   129,   130,   131,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,   124,   125,   126,    -1,   128,   129,   130,   131,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,   122,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,   121,   122,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,   121,   122,    -1,   124,   125,   126,
      -1,   128,   129,   130,   131,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,   121,   122,    -1,   124,
     125,   126,    -1,   128,   129,   130,   131,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,   124,   125,   126,    -1,   128,   129,   130,   131,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,   122,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,   121,   122,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,   121,   122,    -1,   124,   125,   126,
      -1,   128,   129,   130,   131,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,   121,   122,    -1,   124,
     125,   126,    -1,   128,   129,   130,   131,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,   124,   125,   126,    -1,   128,   129,   130,   131,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,   122,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,   121,   122,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,   121,   122,    -1,   124,   125,   126,
      -1,   128,   129,   130,   131,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,   121,   122,    -1,   124,
     125,   126,    -1,   128,   129,   130,   131,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,   124,   125,   126,    -1,   128,   129,   130,   131,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,   122,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,   121,   122,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,   121,   122,    -1,   124,   125,   126,
      -1,   128,   129,   130,   131,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,   121,   122,    -1,   124,
     125,   126,    -1,   128,   129,   130,   131,     0,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,   124,   125,   126,    -1,   128,   129,   130,   131,     0,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,   122,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,     0,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,   121,   122,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,     0,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,   121,   122,    -1,   124,   125,   126,
      -1,   128,   129,   130,   131,     0,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,   116,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,   121,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,     1,   117,     3,     4,     5,
       6,    -1,     8,     9,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
       1,   117,     3,     4,     5,     6,    -1,     8,     9,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,     1,   117,     3,
       4,     5,     6,   122,     8,     9,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    -1,    88,    89,    90,    -1,
       1,    -1,     3,     4,     5,     6,    98,     8,     9,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,   118,    28,   120,    -1,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,    90,
      -1,     1,    -1,     3,     4,     5,     6,    98,     8,     9,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,   116,   117,   118,    28,   120,
      -1,   122,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,
      90,    -1,     1,    -1,     3,     4,     5,     6,    98,     8,
       9,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    28,
      -1,    -1,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    -1,    88,
      89,    90,    -1,     1,    -1,     3,     4,     5,     6,    98,
       8,     9,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      28,    -1,    -1,   122,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    -1,
      88,    89,    90,    -1,     1,    -1,     3,     4,     5,     6,
      98,     8,     9,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    28,    -1,    -1,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,   124,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,   118,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,   116,   117,   118,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,   118,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,   118,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,   118,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,    -1,    -1,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,   118,    -1,    -1,
      -1,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
     120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,   120,    -1,    -1,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,   120,
      -1,    -1,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,   120,    -1,    -1,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,   118,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,   121,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,   122,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
       0,     1,    -1,     3,     4,     5,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,     0,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,     0,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,     0,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,     1,    -1,     3,     4,
       5,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,     1,    -1,     3,     4,     5,    -1,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,     3,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
       0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   126,    -1,   128,    -1,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    -1,    66,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    -1,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,     0,    -1,    99,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,   122,    -1,   124,    -1,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    -1,    66,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    -1,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,     0,    -1,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,
      -1,   124,    -1,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    -1,
      66,    -1,    68,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    -1,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,     0,    -1,    99,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,   122,    -1,   124,    -1,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    -1,    66,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    -1,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,     0,    -1,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    -1,    66,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    -1,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    -1,    99,   100,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
      -1,    -1,   126,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,
      -1,   126,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,   126,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    76,
      77,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,     3,    -1,    -1,    -1,   105,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    78,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,    -1,    -1,    -1,   124,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,   118,    -1,    -1,
      -1,    -1,    -1,   124,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,
      -1,   124,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   121,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,     0,     1,    -1,     3,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    76,    77,
      -1,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,   100,   101,    -1,    -1,    -1,   105,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
     107,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,   107,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,   118,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,   118,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,   118,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,   118,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    76,    77,    -1,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
       0,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,   100,
     101,    -1,    -1,    -1,   105,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,   118,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,   116,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,   116,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,
      -1,    -1,   116,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,
      -1,   116,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
     116,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    -1,    -1,    -1,   115,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,   115,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,   115,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
     107,    -1,    -1,   110,   111,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,     3,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,   110,   111,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,   116,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   126,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   126,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     122,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    53,    65,    66,    74,    75,
      76,    77,    79,    80,    81,    82,    83,    85,    86,    87,
     100,   101,   105,   110,   111,   112,   115,   118,   138,   139,
     140,   142,   167,   204,   205,   206,   207,   208,   209,   264,
     267,   268,   271,   272,   273,   274,   275,   276,   277,   279,
     283,   286,   287,   288,   289,   290,   291,   296,   297,   305,
     306,   307,   310,   311,   315,   318,   322,   349,   352,   353,
     371,   372,   374,   375,   376,   377,   378,   379,    77,   124,
       5,    31,   209,   373,   209,   115,   115,   115,   142,   209,
     373,   277,   278,   310,   318,   209,   305,   307,   309,   310,
     318,   321,   113,   118,   139,   140,   209,   122,   124,   118,
     122,   121,   112,   113,   204,   209,   122,   142,   209,   122,
     124,   121,   113,   122,   124,   122,   121,   122,   140,   209,
       1,    31,   118,   138,   206,   208,   209,   264,   274,   275,
     277,   279,   307,   310,   318,   321,   322,   330,   331,   332,
     333,   332,   115,   126,     1,    29,    30,    31,    32,    33,
      65,   116,   138,   209,   263,   267,   269,   270,   277,   279,
     283,   284,   285,   291,   295,   303,   304,   336,   337,   338,
     339,   340,   341,   307,   318,   115,   307,   310,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    46,    47,
      66,    85,    87,   100,   122,   142,   163,   164,   263,   268,
     269,   277,   280,   284,   286,   294,   351,   354,   355,   356,
     361,   362,   363,    31,    76,   124,   206,   208,   296,   352,
     353,   371,   372,   379,     1,   206,   273,   290,   296,   322,
     349,   375,     1,   374,   375,     0,   209,   373,   373,     5,
     119,   373,     1,     4,     6,     8,     9,    65,    71,    72,
      73,    84,    85,    98,   102,   103,   104,   105,   106,   107,
     108,   109,   112,   115,   117,   125,   126,   128,   129,   130,
     131,   142,   168,   169,   209,   210,   211,   212,   215,   216,
     220,   221,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   241,   243,   244,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   373,   385,   386,   387,   388,   139,   209,   122,
     142,   209,   277,   318,   305,   307,   318,   309,   310,   116,
     310,    85,   142,   193,   194,   196,   198,   202,   203,   209,
     221,   235,   236,   244,   256,   261,   294,   118,   113,   113,
     118,     1,    68,    78,    80,    81,    85,    88,    91,    92,
      93,    94,    96,    98,    99,   115,   117,   118,   121,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   165,   166,
     168,   169,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   185,   189,   190,   191,   192,   209,   216,   241,
     295,   306,   308,   310,   318,   322,   323,   350,    80,    81,
     209,   263,   267,   277,   280,   283,   291,   298,   299,     1,
     121,   191,   192,   140,   209,     1,   209,   265,   266,     1,
     121,   266,   299,    65,   193,   195,   197,   199,   200,   201,
     209,     1,   121,   191,   192,   299,     1,   121,   191,   192,
       1,   121,   191,   192,   122,   307,   318,   307,   310,     1,
     119,   355,   362,   363,     1,   118,   120,   120,   118,   127,
     139,   209,   257,   261,   262,   120,   122,   142,   209,   121,
     122,   121,   122,   115,   126,   128,   138,   209,   263,   269,
     277,   279,   284,   310,   316,   318,   319,   321,     1,   116,
     120,     1,   116,   120,     1,   120,     1,   120,   116,   116,
     307,   115,   307,   115,   115,     1,   118,     1,   121,     1,
     118,   209,   263,   269,   277,   280,   284,   310,   332,   333,
       1,   118,     1,   351,   354,   362,   363,   351,   354,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      86,    88,    89,    90,   118,   124,   186,   187,   188,   209,
     216,   221,   237,   239,   244,   257,   258,   259,   315,   342,
     343,   346,   347,   348,   355,   356,   357,   358,   359,   360,
     362,   363,   365,   366,   367,   368,   369,   370,   121,    31,
     209,   373,   209,   204,   205,   207,   208,   322,   355,   363,
     206,   296,   119,   236,   116,     1,   115,   169,   212,   217,
     220,   222,   242,   243,   245,   115,   221,   244,   221,   244,
     115,   209,   263,   269,   277,   280,   284,   302,   261,   115,
     115,   302,   261,   115,   115,   115,   115,   115,   115,   222,
     245,   116,   237,   239,   259,   269,   277,   279,   284,   292,
     334,   373,   122,   170,   171,   213,   218,   237,   122,     1,
     121,   122,     1,     7,     8,     9,   115,   123,   126,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,   119,
     238,   171,   213,   214,   224,   246,   112,   132,   133,   129,
     130,    10,    11,   227,   249,    12,    13,   113,   114,    14,
      15,   128,   134,   135,    16,    17,   136,   238,   116,     7,
       8,     9,   115,   123,   126,   238,   112,   132,   133,   129,
     130,    10,    11,    12,    13,   113,   114,    14,    15,   128,
     134,   135,    16,    17,   136,   238,   116,   116,   107,   209,
     295,   380,   383,   384,   122,   122,   309,   119,    11,   114,
     120,   119,   136,   136,   115,   310,   318,   319,    65,   193,
     201,   209,   201,     1,   209,   263,   277,   280,   291,   300,
     295,   322,   323,   115,   142,   209,   209,   295,     1,   115,
     300,   112,   115,   209,   295,   118,   362,   363,   362,   363,
     362,   118,   362,   363,   118,   118,     1,   121,   118,     1,
       1,   118,   120,   120,    69,    70,    91,    95,    97,   121,
      69,    70,   121,   118,     1,   189,   190,     1,   189,   190,
       1,   119,   115,   118,   124,   209,   281,   282,   305,   310,
     318,   322,   323,   324,     1,   295,   303,   338,   308,   318,
     308,   310,   115,   124,   149,   150,   165,   166,   168,   169,
     178,   209,   295,   113,   142,   209,   209,   263,   277,   280,
     113,   113,   119,   120,     1,   118,   122,    28,   141,   209,
     209,   114,   120,   119,   118,   120,   121,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   213,
     214,   216,   236,   257,   294,   327,   328,   307,   307,   122,
     237,   258,   325,   326,   362,   363,   330,   331,   330,   331,
     127,   127,   127,    51,   336,   337,     1,   266,   122,   122,
       1,   121,   191,   192,     1,   121,   191,   192,   116,   209,
     303,   304,   319,   340,   341,   127,   139,   261,   262,   321,
     316,   318,   115,   126,   316,     1,     1,   120,     1,    51,
     209,   336,   337,   120,     1,    51,   209,   336,   337,   120,
       1,    51,   209,   336,   337,   120,    51,   209,   336,   337,
       3,    28,    44,    74,    75,   116,   312,   313,   314,   237,
     139,   209,   121,   122,   118,   118,   124,   261,   262,   124,
     115,   115,     1,   115,    52,    53,    54,    56,    57,    58,
      59,    62,    86,   209,   259,   315,   342,   365,   369,   115,
     209,   118,   118,   118,   213,   214,   239,   259,   115,   277,
     115,   115,   182,   209,   118,   118,   118,   124,   123,   238,
       1,   123,   118,   120,   239,   259,   238,   116,   120,   239,
       1,   357,   358,   357,   358,   342,   343,   351,   354,   342,
     343,   351,   354,     1,     1,   373,   373,   140,   209,   122,
     122,   355,   363,   363,   236,   118,    65,   138,   209,   221,
     244,   269,   277,   279,   284,   293,   335,     1,     1,     7,
       8,     9,   115,   123,   126,     7,     8,     9,   115,   123,
     126,   209,   294,   113,   115,   126,   209,   263,   269,   277,
     280,   284,   310,   317,   318,   320,   209,   263,   269,   277,
     280,   284,   301,   239,   334,   362,   209,   126,   320,   301,
     237,   373,   373,   373,   237,   221,   244,   335,   116,   209,
     269,   277,   279,   284,   319,   116,   123,     1,   161,   162,
       1,   121,   120,   127,     1,   161,   162,   121,     1,   161,
     162,     1,   209,   116,   214,   218,   219,   258,     1,   209,
     239,   259,   213,   237,     1,   224,   246,   224,   246,   224,
     246,   225,   247,   225,   247,   226,   248,   226,   248,   227,
     249,   227,   249,   227,   249,   213,   214,   229,   250,   213,
     214,   229,   250,   213,   214,   230,   251,   213,   214,   231,
     252,   213,   214,   232,   253,   233,   254,   234,   255,   124,
     213,   214,   239,   240,   259,   260,   213,   237,     1,   209,
     116,   218,   219,     1,   209,   239,   259,   213,   237,   224,
     246,   224,   246,   224,   246,   225,   247,   225,   247,   226,
     248,   226,   248,   227,   249,   227,   249,   227,   249,   227,
     249,   213,   214,   229,   250,   213,   214,   229,   250,   213,
     214,   230,   251,   213,   214,   231,   252,   213,   214,   232,
     253,   233,   254,   234,   255,   124,   239,   240,   259,   260,
     213,   237,   113,   114,   209,   381,   382,   209,   121,   380,
     383,   384,   384,   193,   194,   196,   198,   209,   202,   194,
     196,   198,   239,   240,   259,   260,   239,   240,   259,   260,
     318,   114,   119,   114,   122,   113,   122,   209,   263,   277,
     280,   319,   322,   323,   182,   118,   118,   118,   282,   305,
     310,   318,   122,   209,   122,   209,   319,   209,   115,   121,
     172,   173,   172,   173,   362,   362,   362,   211,   362,   362,
       1,   327,   328,   116,   261,   262,   122,   118,   120,   305,
     318,   305,   310,   124,   315,   209,   115,   308,   308,   209,
     118,     1,   118,     1,   118,   282,   203,   113,   201,   201,
     261,   262,   265,   191,   192,     1,   121,   266,   119,   124,
     119,   124,   119,   200,   196,   209,   362,   363,     1,   118,
     120,   118,   120,   118,   153,   154,   157,   158,   159,   121,
     151,   154,   118,   121,   153,   154,   157,   158,   159,   119,
     322,   323,   324,   325,   326,   329,     1,   121,   266,     1,
     121,   266,   116,   116,   116,   127,   127,   127,   316,   116,
     340,   341,   127,   139,   261,   262,   336,   337,   295,   336,
     336,   336,   337,   116,   115,   116,   313,   116,   116,   116,
       1,   161,   162,   342,   343,   124,   124,   342,   343,   239,
     259,   239,   259,   116,   239,   259,   124,   261,   262,   124,
     115,   115,   342,   115,   214,   259,   115,   124,    56,     1,
     116,   118,   209,   239,   259,   364,   118,   118,   118,   118,
     118,   373,   115,   237,   237,   209,   342,   343,    90,   214,
     258,    88,    89,    90,   237,   258,   214,   258,   237,   258,
     113,   363,   118,   138,   139,   116,   138,   269,   277,   279,
     284,   319,   116,     1,   209,   116,   218,   219,     1,   209,
     239,   259,     1,   209,   116,   218,   219,     1,   209,   239,
     259,   116,   116,   319,   203,   116,   320,   340,   341,   261,
     262,   113,   317,   318,   115,   317,   126,   113,   126,   209,
     263,   269,   277,   280,   284,   320,   116,   116,   116,   116,
     261,   262,   126,   126,   320,   120,   116,   120,   120,   120,
     116,   116,   224,   246,   373,     1,   121,   213,   237,     1,
       1,   116,   120,   116,   127,   127,     1,   120,   124,   124,
     120,   124,   124,   116,   127,   127,   124,   124,   124,   124,
     209,   209,   118,   120,   209,   373,   121,   121,   124,   124,
     124,   124,   124,   124,   124,   124,   196,   203,   113,   122,
     122,   209,   116,   118,   305,   318,   305,   310,   116,   122,
     122,   209,   116,     1,   161,   162,   281,   310,   305,   305,
     261,   262,   115,   116,   118,   114,   203,   114,   114,   118,
       1,   118,   194,   209,   193,   194,   193,   198,     1,   155,
     156,     1,   155,   156,   363,     1,   327,   328,   120,   121,
     325,   326,     1,   118,     1,   118,   116,   116,   127,   127,
     127,   319,   321,   239,   116,     1,   342,   343,   342,   343,
     116,   116,   116,   116,     1,   342,   116,   239,   342,   343,
     124,   124,   259,   116,   239,   259,    56,   259,   364,   373,
     115,   342,   124,   118,     1,   118,     1,   116,   259,   364,
       3,   116,   124,   373,   116,   116,   120,   115,   115,   182,
     116,   116,     1,   116,   116,   127,   127,   116,   127,   127,
     116,   114,   116,   116,   116,   127,   127,   203,   317,   116,
     340,   341,   261,   262,   203,   261,   262,   113,   126,   115,
     122,   325,   127,   127,   261,   262,   261,   262,   126,   334,
     209,   209,   237,     1,   214,   258,   213,   214,   213,   214,
     236,   256,   213,   214,   236,   256,   213,   214,   213,   214,
     236,   256,   213,   214,   236,   256,   213,   214,   236,   256,
     213,   214,   236,   256,   213,   214,   236,   256,   213,   214,
     236,   256,   381,   118,   118,   114,   203,   122,   362,   305,
     305,   119,   122,     1,   124,   124,   114,   191,   192,   118,
     191,   192,   119,   119,   121,   325,   326,     1,   191,   192,
     191,   192,   116,   342,   342,   342,   342,   342,   343,   116,
     115,   364,   116,   239,   259,   239,   342,     1,   116,   239,
     259,   344,   345,   373,   118,   345,     3,   116,   124,   122,
     182,   237,   237,     1,     1,   114,   116,   116,   127,   127,
     114,   127,   127,   203,   261,   262,   334,   329,   127,   127,
     127,   127,   261,   262,   116,   116,   116,   116,   114,   327,
     261,   262,   261,   262,   191,   192,   194,   194,     1,    64,
      64,   239,   259,   116,   239,   259,   116,   118,   116,   118,
     342,   343,   116,   342,   343,   116,   120,   124,   115,     3,
     116,   124,   345,   118,   345,    73,   182,   183,   184,   116,
     116,   116,   120,   114,   127,   127,   116,   120,   121,   127,
     127,   118,   342,   342,   116,   116,   118,   342,   239,   342,
     343,   118,   344,   345,   237,   345,   118,   345,   116,   124,
       3,   116,   124,   362,   362,   121,   183,   122,   182,   224,
     246,   325,   121,   116,   116,   116,   116,   116,   124,   118,
     345,   345,   118,   345,   184,   116,   342,   118,   118,   118,
     345,   116,   116,   116,   124,   121,   116,   118,   118,   118,
     345,   118,   116,   118
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 138: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10407 "grammar.ec"
	break;
      case 139: /* "type" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10416 "grammar.ec"
	break;
      case 140: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10425 "grammar.ec"
	break;
      case 141: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 10434 "grammar.ec"
	break;
      case 142: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10443 "grammar.ec"
	break;
      case 143: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10452 "grammar.ec"
	break;
      case 144: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10461 "grammar.ec"
	break;
      case 145: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10470 "grammar.ec"
	break;
      case 146: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10479 "grammar.ec"
	break;
      case 147: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10488 "grammar.ec"
	break;
      case 148: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10497 "grammar.ec"
	break;
      case 149: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10506 "grammar.ec"
	break;
      case 150: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10515 "grammar.ec"
	break;
      case 151: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10524 "grammar.ec"
	break;
      case 152: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10533 "grammar.ec"
	break;
      case 153: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10542 "grammar.ec"
	break;
      case 154: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10551 "grammar.ec"
	break;
      case 155: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 10560 "grammar.ec"
	break;
      case 156: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 10569 "grammar.ec"
	break;
      case 157: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 10578 "grammar.ec"
	break;
      case 158: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 10587 "grammar.ec"
	break;
      case 159: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 10596 "grammar.ec"
	break;
      case 160: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 10605 "grammar.ec"
	break;
      case 161: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 10614 "grammar.ec"
	break;
      case 162: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 10623 "grammar.ec"
	break;
      case 163: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 10632 "grammar.ec"
	break;
      case 164: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 10641 "grammar.ec"
	break;
      case 168: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 10650 "grammar.ec"
	break;
      case 169: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 10659 "grammar.ec"
	break;
      case 172: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 10668 "grammar.ec"
	break;
      case 173: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 10677 "grammar.ec"
	break;
      case 174: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 10686 "grammar.ec"
	break;
      case 175: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 10695 "grammar.ec"
	break;
      case 178: /* "property" */

/* Line 1009 of yacc.c  */
#line 241 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 10704 "grammar.ec"
	break;
      case 189: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 239 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 10713 "grammar.ec"
	break;
      case 190: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 239 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 10722 "grammar.ec"
	break;
      case 191: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 10731 "grammar.ec"
	break;
      case 192: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 10740 "grammar.ec"
	break;
      case 193: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 10749 "grammar.ec"
	break;
      case 194: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 10758 "grammar.ec"
	break;
      case 195: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 10767 "grammar.ec"
	break;
      case 196: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 10776 "grammar.ec"
	break;
      case 197: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 10785 "grammar.ec"
	break;
      case 198: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 10794 "grammar.ec"
	break;
      case 199: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 10803 "grammar.ec"
	break;
      case 200: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 10812 "grammar.ec"
	break;
      case 201: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 10821 "grammar.ec"
	break;
      case 202: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 10830 "grammar.ec"
	break;
      case 203: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 10839 "grammar.ec"
	break;
      case 204: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 10848 "grammar.ec"
	break;
      case 205: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 237 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 10857 "grammar.ec"
	break;
      case 206: /* "class" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 10866 "grammar.ec"
	break;
      case 207: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 10875 "grammar.ec"
	break;
      case 208: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 10884 "grammar.ec"
	break;
      case 209: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 193 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 10893 "grammar.ec"
	break;
      case 210: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 10902 "grammar.ec"
	break;
      case 211: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 10911 "grammar.ec"
	break;
      case 215: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 10920 "grammar.ec"
	break;
      case 216: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 10929 "grammar.ec"
	break;
      case 218: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 10938 "grammar.ec"
	break;
      case 219: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 10947 "grammar.ec"
	break;
      case 221: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 10956 "grammar.ec"
	break;
      case 224: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 10965 "grammar.ec"
	break;
      case 225: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 10974 "grammar.ec"
	break;
      case 226: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 10983 "grammar.ec"
	break;
      case 227: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 10992 "grammar.ec"
	break;
      case 229: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11001 "grammar.ec"
	break;
      case 230: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11010 "grammar.ec"
	break;
      case 231: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11019 "grammar.ec"
	break;
      case 232: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11028 "grammar.ec"
	break;
      case 233: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11037 "grammar.ec"
	break;
      case 234: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11046 "grammar.ec"
	break;
      case 235: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11055 "grammar.ec"
	break;
      case 236: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11064 "grammar.ec"
	break;
      case 237: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11073 "grammar.ec"
	break;
      case 239: /* "expression" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11082 "grammar.ec"
	break;
      case 241: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11091 "grammar.ec"
	break;
      case 244: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11100 "grammar.ec"
	break;
      case 246: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11109 "grammar.ec"
	break;
      case 247: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11118 "grammar.ec"
	break;
      case 248: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11127 "grammar.ec"
	break;
      case 249: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11136 "grammar.ec"
	break;
      case 250: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11145 "grammar.ec"
	break;
      case 251: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11154 "grammar.ec"
	break;
      case 252: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11163 "grammar.ec"
	break;
      case 253: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11172 "grammar.ec"
	break;
      case 254: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11181 "grammar.ec"
	break;
      case 255: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11190 "grammar.ec"
	break;
      case 256: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11199 "grammar.ec"
	break;
      case 257: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11208 "grammar.ec"
	break;
      case 258: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11217 "grammar.ec"
	break;
      case 259: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11226 "grammar.ec"
	break;
      case 261: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11235 "grammar.ec"
	break;
      case 262: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11244 "grammar.ec"
	break;
      case 263: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11253 "grammar.ec"
	break;
      case 264: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11262 "grammar.ec"
	break;
      case 265: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 211 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 11271 "grammar.ec"
	break;
      case 266: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 11280 "grammar.ec"
	break;
      case 268: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11289 "grammar.ec"
	break;
      case 269: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11298 "grammar.ec"
	break;
      case 270: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11307 "grammar.ec"
	break;
      case 272: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11316 "grammar.ec"
	break;
      case 273: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11325 "grammar.ec"
	break;
      case 274: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11334 "grammar.ec"
	break;
      case 275: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11343 "grammar.ec"
	break;
      case 276: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11352 "grammar.ec"
	break;
      case 277: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11361 "grammar.ec"
	break;
      case 278: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11370 "grammar.ec"
	break;
      case 279: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11379 "grammar.ec"
	break;
      case 280: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11388 "grammar.ec"
	break;
      case 281: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11397 "grammar.ec"
	break;
      case 282: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 11406 "grammar.ec"
	break;
      case 283: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11415 "grammar.ec"
	break;
      case 284: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11424 "grammar.ec"
	break;
      case 285: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11433 "grammar.ec"
	break;
      case 286: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11442 "grammar.ec"
	break;
      case 287: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11451 "grammar.ec"
	break;
      case 288: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11460 "grammar.ec"
	break;
      case 289: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11469 "grammar.ec"
	break;
      case 290: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 206 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11478 "grammar.ec"
	break;
      case 292: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11487 "grammar.ec"
	break;
      case 293: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11496 "grammar.ec"
	break;
      case 294: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11505 "grammar.ec"
	break;
      case 295: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11514 "grammar.ec"
	break;
      case 296: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11523 "grammar.ec"
	break;
      case 297: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11532 "grammar.ec"
	break;
      case 298: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11541 "grammar.ec"
	break;
      case 299: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11550 "grammar.ec"
	break;
      case 303: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 11559 "grammar.ec"
	break;
      case 304: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 11568 "grammar.ec"
	break;
      case 305: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11577 "grammar.ec"
	break;
      case 306: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11586 "grammar.ec"
	break;
      case 307: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11595 "grammar.ec"
	break;
      case 308: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11604 "grammar.ec"
	break;
      case 309: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11613 "grammar.ec"
	break;
      case 310: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 11622 "grammar.ec"
	break;
      case 312: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 11631 "grammar.ec"
	break;
      case 313: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 11640 "grammar.ec"
	break;
      case 314: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 11649 "grammar.ec"
	break;
      case 315: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 11658 "grammar.ec"
	break;
      case 316: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11667 "grammar.ec"
	break;
      case 317: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11676 "grammar.ec"
	break;
      case 318: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 194 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 11685 "grammar.ec"
	break;
      case 319: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11694 "grammar.ec"
	break;
      case 320: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11703 "grammar.ec"
	break;
      case 321: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11712 "grammar.ec"
	break;
      case 322: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11721 "grammar.ec"
	break;
      case 323: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11730 "grammar.ec"
	break;
      case 324: /* "declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 212 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11739 "grammar.ec"
	break;
      case 325: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 11748 "grammar.ec"
	break;
      case 326: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 11757 "grammar.ec"
	break;
      case 327: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 11766 "grammar.ec"
	break;
      case 328: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 217 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 11775 "grammar.ec"
	break;
      case 329: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 11784 "grammar.ec"
	break;
      case 330: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 218 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 11793 "grammar.ec"
	break;
      case 331: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 218 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 11802 "grammar.ec"
	break;
      case 332: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 11811 "grammar.ec"
	break;
      case 333: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 11820 "grammar.ec"
	break;
      case 334: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 11829 "grammar.ec"
	break;
      case 335: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 11838 "grammar.ec"
	break;
      case 336: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 11847 "grammar.ec"
	break;
      case 337: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 11856 "grammar.ec"
	break;
      case 338: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 11865 "grammar.ec"
	break;
      case 339: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 11874 "grammar.ec"
	break;
      case 340: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 11883 "grammar.ec"
	break;
      case 341: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 11892 "grammar.ec"
	break;
      case 342: /* "statement" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 11901 "grammar.ec"
	break;
      case 343: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 11910 "grammar.ec"
	break;
      case 347: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 11919 "grammar.ec"
	break;
      case 348: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 11928 "grammar.ec"
	break;
      case 349: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 11937 "grammar.ec"
	break;
      case 351: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 11946 "grammar.ec"
	break;
      case 355: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 11955 "grammar.ec"
	break;
      case 356: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 11964 "grammar.ec"
	break;
      case 357: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 11973 "grammar.ec"
	break;
      case 358: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 11982 "grammar.ec"
	break;
      case 359: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 11991 "grammar.ec"
	break;
      case 360: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12000 "grammar.ec"
	break;
      case 361: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 12009 "grammar.ec"
	break;
      case 362: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12018 "grammar.ec"
	break;
      case 363: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12027 "grammar.ec"
	break;
      case 364: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12036 "grammar.ec"
	break;
      case 365: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12045 "grammar.ec"
	break;
      case 366: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12054 "grammar.ec"
	break;
      case 367: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12063 "grammar.ec"
	break;
      case 368: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12072 "grammar.ec"
	break;
      case 369: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12081 "grammar.ec"
	break;
      case 370: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12090 "grammar.ec"
	break;
      case 371: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 12099 "grammar.ec"
	break;
      case 372: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 225 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 12108 "grammar.ec"
	break;
      case 373: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12117 "grammar.ec"
	break;
      case 374: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 12126 "grammar.ec"
	break;
      case 375: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 12135 "grammar.ec"
	break;
      case 376: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 12144 "grammar.ec"
	break;
      case 377: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 12153 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 275 "grammar.y"
    {
      (yyval.specifier) = null;
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 304 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 362 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 364 "grammar.y"
    {
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);
      FreeIdentifier((yyvsp[(1) - (2)].id));
      FreeIdentifier((yyvsp[(2) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #else
      Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]); 
      Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);      
      yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 463 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 467 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 471 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 473 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start); 
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 522 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 524 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 529 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(1) - (3)].list), FreeSpecifier); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 534 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(2) - (4)].list), FreeSpecifier) ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 539 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 541 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 546 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 548 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 553 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 555 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 560 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 562 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 564 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 566 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 568 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 572 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 577 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 579 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 581 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 583 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 585 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 591 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 593 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 598 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 603 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 608 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 610 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 612 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 616 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 617 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 621 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 623 "grammar.y"
    { 
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; 

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 633 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 637 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 639 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 641 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 645 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 647 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 649 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 652 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end; 
         { 
            Initializer dummy = MkInitializerAssignment(MkExpDummy()); 
            MemberInit memberInit = MkMemberInit(null, dummy); 
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end; 
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end; 
            ListAdd((yyvsp[(1) - (3)].list), memberInit); 
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 664 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end; 
         { 
            Initializer dummy = MkInitializerAssignment(MkExpDummy()); 
            MemberInit memberInit = MkMemberInit(null, dummy); 
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end; 
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end; 
            ListAdd((yyvsp[(1) - (3)].list), memberInit); 
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 675 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy); 
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start; 
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start; 

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit); 

         dummy = MkInitializerAssignment(MkExpDummy()); 
         memberInit = MkMemberInit(null, dummy); 
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end; 
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end; 
         ListAdd((yyval.list), memberInit); 
      ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 694 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 696 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 700 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 701 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 702 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 703 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 704 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 705 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 706 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 63:

/* Line 1464 of yacc.c  */
#line 708 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 65:

/* Line 1464 of yacc.c  */
#line 713 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 714 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 715 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 719 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 720 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 721 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 722 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 723 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 724 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 725 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 730 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 732 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 737 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 739 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 741 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 743 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 745 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 775 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 777 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 782 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 784 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 786 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 788 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 790 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 819 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 821 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 823 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 828 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 830 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 835 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 837 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 841 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 843 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 845 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 847 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 852 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 855 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 858 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 861 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 926 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 928 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 933 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 935 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 937 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 939 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 941 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 971 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 975 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 976 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 977 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 981 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 982 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 983 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 987 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 988 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 989 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 122:

/* Line 1464 of yacc.c  */
#line 995 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 998 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 1001 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 1004 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 1007 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 128:

/* Line 1464 of yacc.c  */
#line 1013 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 1015 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 1017 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 1019 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 1021 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 1025 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 1030 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1033 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1036 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1039 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1042 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 140:

/* Line 1464 of yacc.c  */
#line 1048 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1050 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1054 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1059 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1061 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1066 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1068 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1073 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1075 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1080 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1085 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1087 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1092 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1094 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1098 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1103 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1105 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1107 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1109 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1114 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1116 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (4)].declMode); ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1123 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1127 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1128 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1129 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1130 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (2)].propertyWatch)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1131 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (3)].id).string); FreeIdentifier((yyvsp[(2) - (3)].id)); ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1133 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (3)].specifier).name); FreeSpecifier((yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1134 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1135 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1136 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (3)].id)); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1137 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1139 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1140 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1142 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1146 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1147 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1148 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1149 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (1)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1150 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (1)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1152 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1153 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1155 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1156 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1158 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1162 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1163 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 1164 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 200:

/* Line 1464 of yacc.c  */
#line 1168 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1171 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1172 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1176 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1177 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype(MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)), null); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1182 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument((yyvsp[(1) - (1)].templateDatatype)); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1186 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1187 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1188 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1189 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1190 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1191 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1192 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1193 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1197 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1201 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1202 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1206 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 1210 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (2)].id), (yyvsp[(1) - (2)].templateDatatype), null); ;}
    break;

  case 222:

/* Line 1464 of yacc.c  */
#line 1211 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(1) - (4)].templateDatatype), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 1221 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 227:

/* Line 1464 of yacc.c  */
#line 1222 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1229 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1230 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1231 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1233 "grammar.y"
    {
      (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); 
      if((yyvsp[(1) - (3)].templateDatatype).specifiers && (yyvsp[(1) - (3)].templateDatatype).specifiers->first)
      {
         Specifier spec = (yyvsp[(1) - (3)].templateDatatype).specifiers->first;
         if(spec.type == nameSpecifier)
            (yyval.templateArgument).name = MkIdentifier(spec.name);
      }
      FreeTemplateDataType((yyvsp[(1) - (3)].templateDatatype));
      (yyval.templateArgument).loc = (yyloc);
   ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1245 "grammar.y"
    {
      (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); 
      if((yyvsp[(1) - (3)].templateDatatype).specifiers && (yyvsp[(1) - (3)].templateDatatype).specifiers->first)
      {
         Specifier spec = (yyvsp[(1) - (3)].templateDatatype).specifiers->first;
         if(spec.type == nameSpecifier)
            (yyval.templateArgument).name = MkIdentifier(spec.name);
      }
      FreeTemplateDataType((yyvsp[(1) - (3)].templateDatatype));
      (yyval.templateArgument).loc = (yyloc);
   ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1257 "grammar.y"
    {
      (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); 
      if((yyvsp[(1) - (3)].templateDatatype).specifiers && (yyvsp[(1) - (3)].templateDatatype).specifiers->first)
      {
         Specifier spec = (yyvsp[(1) - (3)].templateDatatype).specifiers->first;
         if(spec.type == nameSpecifier)
            (yyval.templateArgument).name = MkIdentifier(spec.name);
      }
      FreeTemplateDataType((yyvsp[(1) - (3)].templateDatatype));
      (yyval.templateArgument).loc = (yyloc);
   ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1271 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1272 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1277 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1284 "grammar.y"
    { (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1286 "grammar.y"
    { 
      (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); 
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); 
      FreeSpecifier((yyvsp[(2) - (2)].specifier)); 
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1293 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1294 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1296 "grammar.y"
    { (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1298 "grammar.y"
    { 
      (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); 
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); 
      FreeSpecifier((yyvsp[(2) - (5)].specifier)); 
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1306 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1307 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1312 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class); 
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1319 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1326 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1332 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1339 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace(0, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1345 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass(0, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1354 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1361 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1367 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1373 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 258:

/* Line 1464 of yacc.c  */
#line 1379 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1385 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1391 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1402 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1408 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1412 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1413 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1414 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1418 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1419 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1420 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 1421 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1422 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 272:

/* Line 1464 of yacc.c  */
#line 1423 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1424 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1426 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1427 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1428 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1429 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1430 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1431 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1432 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1433 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1434 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1435 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1436 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1437 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1438 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 293:

/* Line 1464 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 294:

/* Line 1464 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 295:

/* Line 1464 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 296:

/* Line 1464 of yacc.c  */
#line 1448 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1454 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1458 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 1462 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1466 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 305:

/* Line 1464 of yacc.c  */
#line 1467 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1473 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1474 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1475 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1476 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1477 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1478 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1479 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1480 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1481 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1483 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1500 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1501 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1502 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1503 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1504 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1506 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1507 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1508 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1509 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1510 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1511 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1512 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1513 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1517 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 1518 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 344:

/* Line 1464 of yacc.c  */
#line 1519 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 345:

/* Line 1464 of yacc.c  */
#line 1520 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1524 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1525 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1526 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1528 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1532 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1533 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 354:

/* Line 1464 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 356:

/* Line 1464 of yacc.c  */
#line 1537 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1538 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1539 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1540 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 360:

/* Line 1464 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 361:

/* Line 1464 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 362:

/* Line 1464 of yacc.c  */
#line 1544 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1558 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 368:

/* Line 1464 of yacc.c  */
#line 1559 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1560 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1561 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1562 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 372:

/* Line 1464 of yacc.c  */
#line 1563 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 373:

/* Line 1464 of yacc.c  */
#line 1564 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 374:

/* Line 1464 of yacc.c  */
#line 1565 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 376:

/* Line 1464 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1575 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1576 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1577 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 381:

/* Line 1464 of yacc.c  */
#line 1578 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 382:

/* Line 1464 of yacc.c  */
#line 1579 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 383:

/* Line 1464 of yacc.c  */
#line 1580 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1585 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 386:

/* Line 1464 of yacc.c  */
#line 1586 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1587 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 388:

/* Line 1464 of yacc.c  */
#line 1588 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 390:

/* Line 1464 of yacc.c  */
#line 1593 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1594 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 392:

/* Line 1464 of yacc.c  */
#line 1595 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1596 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 394:

/* Line 1464 of yacc.c  */
#line 1601 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1609 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 397:

/* Line 1464 of yacc.c  */
#line 1610 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1611 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1612 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1613 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 401:

/* Line 1464 of yacc.c  */
#line 1614 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 402:

/* Line 1464 of yacc.c  */
#line 1615 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 403:

/* Line 1464 of yacc.c  */
#line 1616 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1621 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1622 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 407:

/* Line 1464 of yacc.c  */
#line 1623 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 408:

/* Line 1464 of yacc.c  */
#line 1624 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 410:

/* Line 1464 of yacc.c  */
#line 1627 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 411:

/* Line 1464 of yacc.c  */
#line 1628 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 412:

/* Line 1464 of yacc.c  */
#line 1629 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1634 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 415:

/* Line 1464 of yacc.c  */
#line 1635 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 417:

/* Line 1464 of yacc.c  */
#line 1638 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1643 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 420:

/* Line 1464 of yacc.c  */
#line 1644 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1646 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 422:

/* Line 1464 of yacc.c  */
#line 1647 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1652 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 425:

/* Line 1464 of yacc.c  */
#line 1653 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 426:

/* Line 1464 of yacc.c  */
#line 1655 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 427:

/* Line 1464 of yacc.c  */
#line 1656 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 429:

/* Line 1464 of yacc.c  */
#line 1661 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 430:

/* Line 1464 of yacc.c  */
#line 1662 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1667 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 433:

/* Line 1464 of yacc.c  */
#line 1668 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1673 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1674 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1675 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1676 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1678 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1679 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1680 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1681 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1683 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1684 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 448:

/* Line 1464 of yacc.c  */
#line 1689 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 450:

/* Line 1464 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 453:

/* Line 1464 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1701 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 457:

/* Line 1464 of yacc.c  */
#line 1702 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1703 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 459:

/* Line 1464 of yacc.c  */
#line 1704 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1708 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1709 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1710 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1712 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1713 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1715 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1716 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1717 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1718 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 471:

/* Line 1464 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 473:

/* Line 1464 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 475:

/* Line 1464 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 476:

/* Line 1464 of yacc.c  */
#line 1730 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 477:

/* Line 1464 of yacc.c  */
#line 1731 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 479:

/* Line 1464 of yacc.c  */
#line 1736 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1738 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 482:

/* Line 1464 of yacc.c  */
#line 1740 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1741 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1743 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1744 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1749 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 487:

/* Line 1464 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 488:

/* Line 1464 of yacc.c  */
#line 1756 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 489:

/* Line 1464 of yacc.c  */
#line 1760 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1762 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1764 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1765 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 494:

/* Line 1464 of yacc.c  */
#line 1767 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1768 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1773 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1775 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1780 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 499:

/* Line 1464 of yacc.c  */
#line 1784 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1785 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1786 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1787 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1788 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1789 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1790 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 506:

/* Line 1464 of yacc.c  */
#line 1791 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 507:

/* Line 1464 of yacc.c  */
#line 1792 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 508:

/* Line 1464 of yacc.c  */
#line 1793 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 509:

/* Line 1464 of yacc.c  */
#line 1794 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 510:

/* Line 1464 of yacc.c  */
#line 1795 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 516:

/* Line 1464 of yacc.c  */
#line 1811 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 1816 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 1817 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 1818 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 521:

/* Line 1464 of yacc.c  */
#line 1819 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 522:

/* Line 1464 of yacc.c  */
#line 1820 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 523:

/* Line 1464 of yacc.c  */
#line 1821 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 1826 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 526:

/* Line 1464 of yacc.c  */
#line 1830 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 527:

/* Line 1464 of yacc.c  */
#line 1834 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 528:

/* Line 1464 of yacc.c  */
#line 1838 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 1846 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 531:

/* Line 1464 of yacc.c  */
#line 1847 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 532:

/* Line 1464 of yacc.c  */
#line 1848 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 533:

/* Line 1464 of yacc.c  */
#line 1849 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 535:

/* Line 1464 of yacc.c  */
#line 1855 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         if((yyvsp[(1) - (2)].exp).identifier._class && !(yyvsp[(1) - (2)].exp).identifier._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(1) - (2)].exp).identifier.string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));
         
         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*         
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      } 
      skipErrors = false;
   ;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 1905 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 1906 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 538:

/* Line 1464 of yacc.c  */
#line 1907 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 1908 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 540:

/* Line 1464 of yacc.c  */
#line 1909 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 542:

/* Line 1464 of yacc.c  */
#line 1911 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 1916 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 1917 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 1918 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 1919 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 1926 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 549:

/* Line 1464 of yacc.c  */
#line 1927 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 1928 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 551:

/* Line 1464 of yacc.c  */
#line 1929 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 1934 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 554:

/* Line 1464 of yacc.c  */
#line 1935 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 1937 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 556:

/* Line 1464 of yacc.c  */
#line 1938 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 1943 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 559:

/* Line 1464 of yacc.c  */
#line 1944 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 560:

/* Line 1464 of yacc.c  */
#line 1946 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 561:

/* Line 1464 of yacc.c  */
#line 1947 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 1952 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 564:

/* Line 1464 of yacc.c  */
#line 1953 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 565:

/* Line 1464 of yacc.c  */
#line 1955 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 566:

/* Line 1464 of yacc.c  */
#line 1956 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 568:

/* Line 1464 of yacc.c  */
#line 1961 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 569:

/* Line 1464 of yacc.c  */
#line 1962 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 571:

/* Line 1464 of yacc.c  */
#line 1967 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 572:

/* Line 1464 of yacc.c  */
#line 1968 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 1973 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 1974 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 1975 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 1976 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 1977 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 581:

/* Line 1464 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 582:

/* Line 1464 of yacc.c  */
#line 1982 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 583:

/* Line 1464 of yacc.c  */
#line 1983 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 584:

/* Line 1464 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 1986 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 1992 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 1996 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 1997 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 597:

/* Line 1464 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2002 "grammar.y"
    { 
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); 
         (yyval.exp).loc = (yyloc); 
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); 
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]); 
      ;}
    break;

  case 599:

/* Line 1464 of yacc.c  */
#line 2009 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 600:

/* Line 1464 of yacc.c  */
#line 2013 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 601:

/* Line 1464 of yacc.c  */
#line 2017 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 603:

/* Line 1464 of yacc.c  */
#line 2024 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 604:

/* Line 1464 of yacc.c  */
#line 2028 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2033 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2034 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2038 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2039 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2040 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2041 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2047 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2048 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 613:

/* Line 1464 of yacc.c  */
#line 2049 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 614:

/* Line 1464 of yacc.c  */
#line 2053 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 615:

/* Line 1464 of yacc.c  */
#line 2054 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 616:

/* Line 1464 of yacc.c  */
#line 2055 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 617:

/* Line 1464 of yacc.c  */
#line 2056 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2066 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2067 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2068 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2069 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2070 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); declMode = defaultAccess; ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2075 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2076 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); declMode = staticAccess; ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2077 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2078 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 630:

/* Line 1464 of yacc.c  */
#line 2082 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2083 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 632:

/* Line 1464 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 633:

/* Line 1464 of yacc.c  */
#line 2088 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 634:

/* Line 1464 of yacc.c  */
#line 2089 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 636:

/* Line 1464 of yacc.c  */
#line 2094 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2098 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 638:

/* Line 1464 of yacc.c  */
#line 2099 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2103 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2104 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2105 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 642:

/* Line 1464 of yacc.c  */
#line 2109 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 643:

/* Line 1464 of yacc.c  */
#line 2110 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 644:

/* Line 1464 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 645:

/* Line 1464 of yacc.c  */
#line 2113 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2114 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2115 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 649:

/* Line 1464 of yacc.c  */
#line 2118 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 650:

/* Line 1464 of yacc.c  */
#line 2119 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 651:

/* Line 1464 of yacc.c  */
#line 2120 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 652:

/* Line 1464 of yacc.c  */
#line 2121 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 653:

/* Line 1464 of yacc.c  */
#line 2122 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2131 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2132 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2133 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2137 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2138 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2139 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2140 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2142 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 665:

/* Line 1464 of yacc.c  */
#line 2143 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 666:

/* Line 1464 of yacc.c  */
#line 2144 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 667:

/* Line 1464 of yacc.c  */
#line 2145 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 670:

/* Line 1464 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 671:

/* Line 1464 of yacc.c  */
#line 2151 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 672:

/* Line 1464 of yacc.c  */
#line 2152 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 673:

/* Line 1464 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 674:

/* Line 1464 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 679:

/* Line 1464 of yacc.c  */
#line 2168 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended(MkExtDeclString(CopyString(yytext))); ;}
    break;

  case 680:

/* Line 1464 of yacc.c  */
#line 2169 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 681:

/* Line 1464 of yacc.c  */
#line 2173 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2174 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2175 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2180 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2181 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2185 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2186 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2187 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2188 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2189 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 691:

/* Line 1464 of yacc.c  */
#line 2190 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 692:

/* Line 1464 of yacc.c  */
#line 2191 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 693:

/* Line 1464 of yacc.c  */
#line 2192 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 694:

/* Line 1464 of yacc.c  */
#line 2193 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 695:

/* Line 1464 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 696:

/* Line 1464 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 697:

/* Line 1464 of yacc.c  */
#line 2196 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 698:

/* Line 1464 of yacc.c  */
#line 2197 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 702:

/* Line 1464 of yacc.c  */
#line 2201 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 703:

/* Line 1464 of yacc.c  */
#line 2202 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 704:

/* Line 1464 of yacc.c  */
#line 2203 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 705:

/* Line 1464 of yacc.c  */
#line 2204 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2205 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2212 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2213 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2214 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2215 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 715:

/* Line 1464 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 716:

/* Line 1464 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 717:

/* Line 1464 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 718:

/* Line 1464 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 719:

/* Line 1464 of yacc.c  */
#line 2221 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 720:

/* Line 1464 of yacc.c  */
#line 2222 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 724:

/* Line 1464 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 725:

/* Line 1464 of yacc.c  */
#line 2227 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 726:

/* Line 1464 of yacc.c  */
#line 2228 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 727:

/* Line 1464 of yacc.c  */
#line 2229 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 728:

/* Line 1464 of yacc.c  */
#line 2236 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 729:

/* Line 1464 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2254 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2259 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2264 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2270 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2278 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2279 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2280 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2284 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2285 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2286 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2288 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2289 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2290 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2294 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2299 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2307 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2316 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2324 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2326 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2327 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2328 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2333 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2340 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2347 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2350 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2363 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2377 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2380 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2382 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2384 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2388 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2389 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2393 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2394 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2395 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2396 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2397 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2398 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2399 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2400 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2404 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2405 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2406 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2407 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2408 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2409 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2410 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2411 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2412 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2413 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2417 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2418 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2419 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2420 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2421 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2422 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2423 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2424 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2425 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2426 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2430 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2431 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2432 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2433 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2434 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2435 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2436 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2437 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2439 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2440 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2441 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2445 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2446 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2447 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2448 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 814:

/* Line 1464 of yacc.c  */
#line 2449 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2450 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2451 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2452 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2453 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 821:

/* Line 1464 of yacc.c  */
#line 2459 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 822:

/* Line 1464 of yacc.c  */
#line 2463 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2464 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 824:

/* Line 1464 of yacc.c  */
#line 2465 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 826:

/* Line 1464 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2468 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2469 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2470 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2472 "grammar.y"
    { _DeclClass(0, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass(0, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2476 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2494 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2512 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 836:

/* Line 1464 of yacc.c  */
#line 2516 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 837:

/* Line 1464 of yacc.c  */
#line 2517 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2518 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2519 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 840:

/* Line 1464 of yacc.c  */
#line 2520 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2521 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2522 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2523 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2525 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2543 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 846:

/* Line 1464 of yacc.c  */
#line 2559 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2560 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 848:

/* Line 1464 of yacc.c  */
#line 2561 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2562 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 850:

/* Line 1464 of yacc.c  */
#line 2563 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2564 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2565 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2566 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2567 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2568 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2569 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2570 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2572 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2590 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2606 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 861:

/* Line 1464 of yacc.c  */
#line 2607 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2608 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2609 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2610 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2611 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2612 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2613 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 868:

/* Line 1464 of yacc.c  */
#line 2614 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 869:

/* Line 1464 of yacc.c  */
#line 2615 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2616 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 871:

/* Line 1464 of yacc.c  */
#line 2617 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2619 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 873:

/* Line 1464 of yacc.c  */
#line 2637 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2653 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2654 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2658 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2659 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2660 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2661 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2662 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 881:

/* Line 1464 of yacc.c  */
#line 2666 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2667 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 883:

/* Line 1464 of yacc.c  */
#line 2668 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 884:

/* Line 1464 of yacc.c  */
#line 2669 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2670 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2671 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 888:

/* Line 1464 of yacc.c  */
#line 2679 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 889:

/* Line 1464 of yacc.c  */
#line 2680 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2681 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 891:

/* Line 1464 of yacc.c  */
#line 2682 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 892:

/* Line 1464 of yacc.c  */
#line 2683 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 893:

/* Line 1464 of yacc.c  */
#line 2689 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list)); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2698 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 895:

/* Line 1464 of yacc.c  */
#line 2707 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); 
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2716 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 899:

/* Line 1464 of yacc.c  */
#line 2732 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 900:

/* Line 1464 of yacc.c  */
#line 2734 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 901:

/* Line 1464 of yacc.c  */
#line 2778 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 902:

/* Line 1464 of yacc.c  */
#line 2779 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 903:

/* Line 1464 of yacc.c  */
#line 2781 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 904:

/* Line 1464 of yacc.c  */
#line 2792 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 905:

/* Line 1464 of yacc.c  */
#line 2793 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 2794 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 907:

/* Line 1464 of yacc.c  */
#line 2799 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 2800 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 2801 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 910:

/* Line 1464 of yacc.c  */
#line 2802 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 911:

/* Line 1464 of yacc.c  */
#line 2803 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 912:

/* Line 1464 of yacc.c  */
#line 2807 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 913:

/* Line 1464 of yacc.c  */
#line 2808 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 914:

/* Line 1464 of yacc.c  */
#line 2812 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 915:

/* Line 1464 of yacc.c  */
#line 2813 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 916:

/* Line 1464 of yacc.c  */
#line 2817 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 917:

/* Line 1464 of yacc.c  */
#line 2818 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 918:

/* Line 1464 of yacc.c  */
#line 2823 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 919:

/* Line 1464 of yacc.c  */
#line 2825 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 2827 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 2829 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 2831 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 923:

/* Line 1464 of yacc.c  */
#line 2833 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 924:

/* Line 1464 of yacc.c  */
#line 2835 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 925:

/* Line 1464 of yacc.c  */
#line 2837 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 926:

/* Line 1464 of yacc.c  */
#line 2839 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 927:

/* Line 1464 of yacc.c  */
#line 2841 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 928:

/* Line 1464 of yacc.c  */
#line 2843 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 929:

/* Line 1464 of yacc.c  */
#line 2845 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 930:

/* Line 1464 of yacc.c  */
#line 2847 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 2849 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 2851 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 2856 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 2858 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 935:

/* Line 1464 of yacc.c  */
#line 2860 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 936:

/* Line 1464 of yacc.c  */
#line 2862 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 937:

/* Line 1464 of yacc.c  */
#line 2864 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 938:

/* Line 1464 of yacc.c  */
#line 2866 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 939:

/* Line 1464 of yacc.c  */
#line 2868 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 940:

/* Line 1464 of yacc.c  */
#line 2872 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 2873 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 2874 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 2875 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 2879 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 2881 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 2882 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 2883 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 2884 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 2888 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 2890 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 953:

/* Line 1464 of yacc.c  */
#line 2891 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 2892 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 2893 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 2899 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 958:

/* Line 1464 of yacc.c  */
#line 2901 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 2903 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 961:

/* Line 1464 of yacc.c  */
#line 2908 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 962:

/* Line 1464 of yacc.c  */
#line 2909 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 963:

/* Line 1464 of yacc.c  */
#line 2910 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 2911 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 966:

/* Line 1464 of yacc.c  */
#line 2916 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 967:

/* Line 1464 of yacc.c  */
#line 2917 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 968:

/* Line 1464 of yacc.c  */
#line 2918 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 969:

/* Line 1464 of yacc.c  */
#line 2919 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 971:

/* Line 1464 of yacc.c  */
#line 2924 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 972:

/* Line 1464 of yacc.c  */
#line 2925 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 973:

/* Line 1464 of yacc.c  */
#line 2926 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 974:

/* Line 1464 of yacc.c  */
#line 2927 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 975:

/* Line 1464 of yacc.c  */
#line 2931 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 976:

/* Line 1464 of yacc.c  */
#line 2932 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 977:

/* Line 1464 of yacc.c  */
#line 2934 "grammar.y"
    { 
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); 
         (yyval.initializer).loc = (yyloc); 

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init); 
         }
      ;}
    break;

  case 978:

/* Line 1464 of yacc.c  */
#line 2949 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 979:

/* Line 1464 of yacc.c  */
#line 2950 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 980:

/* Line 1464 of yacc.c  */
#line 2951 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 981:

/* Line 1464 of yacc.c  */
#line 2953 "grammar.y"
    { 
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list)); 
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init); 
         }
      ;}
    break;

  case 982:

/* Line 1464 of yacc.c  */
#line 2966 "grammar.y"
    { 
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); 
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init); 
         }
      ;}
    break;

  case 983:

/* Line 1464 of yacc.c  */
#line 2981 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 984:

/* Line 1464 of yacc.c  */
#line 2983 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 985:

/* Line 1464 of yacc.c  */
#line 2987 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 986:

/* Line 1464 of yacc.c  */
#line 2988 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 987:

/* Line 1464 of yacc.c  */
#line 2992 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 2993 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 989:

/* Line 1464 of yacc.c  */
#line 2994 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 990:

/* Line 1464 of yacc.c  */
#line 2995 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 991:

/* Line 1464 of yacc.c  */
#line 2998 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 992:

/* Line 1464 of yacc.c  */
#line 2999 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 993:

/* Line 1464 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 994:

/* Line 1464 of yacc.c  */
#line 3004 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 995:

/* Line 1464 of yacc.c  */
#line 3008 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 996:

/* Line 1464 of yacc.c  */
#line 3012 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 997:

/* Line 1464 of yacc.c  */
#line 3016 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 998:

/* Line 1464 of yacc.c  */
#line 3017 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 999:

/* Line 1464 of yacc.c  */
#line 3018 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1000:

/* Line 1464 of yacc.c  */
#line 3022 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1001:

/* Line 1464 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1002:

/* Line 1464 of yacc.c  */
#line 3024 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1003:

/* Line 1464 of yacc.c  */
#line 3025 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1004:

/* Line 1464 of yacc.c  */
#line 3029 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1005:

/* Line 1464 of yacc.c  */
#line 3030 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1006:

/* Line 1464 of yacc.c  */
#line 3034 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1007:

/* Line 1464 of yacc.c  */
#line 3035 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1008:

/* Line 1464 of yacc.c  */
#line 3040 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1009:

/* Line 1464 of yacc.c  */
#line 3041 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1010:

/* Line 1464 of yacc.c  */
#line 3042 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1011:

/* Line 1464 of yacc.c  */
#line 3043 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1012:

/* Line 1464 of yacc.c  */
#line 3044 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1013:

/* Line 1464 of yacc.c  */
#line 3046 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3064 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1015:

/* Line 1464 of yacc.c  */
#line 3065 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3069 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1017:

/* Line 1464 of yacc.c  */
#line 3070 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3071 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1019:

/* Line 1464 of yacc.c  */
#line 3072 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3073 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1021:

/* Line 1464 of yacc.c  */
#line 3074 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3076 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1023:

/* Line 1464 of yacc.c  */
#line 3077 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3078 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3079 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3083 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3084 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3085 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3086 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3087 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3089 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3090 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3091 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3096 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3097 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3098 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3099 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3100 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3105 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3112 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3114 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3115 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3116 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3127 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3128 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3129 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3130 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1060:

/* Line 1464 of yacc.c  */
#line 3131 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1061:

/* Line 1464 of yacc.c  */
#line 3132 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1062:

/* Line 1464 of yacc.c  */
#line 3133 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1063:

/* Line 1464 of yacc.c  */
#line 3137 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3138 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1065:

/* Line 1464 of yacc.c  */
#line 3142 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3143 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1067:

/* Line 1464 of yacc.c  */
#line 3144 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1068:

/* Line 1464 of yacc.c  */
#line 3148 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1069:

/* Line 1464 of yacc.c  */
#line 3149 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1070:

/* Line 1464 of yacc.c  */
#line 3150 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1071:

/* Line 1464 of yacc.c  */
#line 3151 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1072:

/* Line 1464 of yacc.c  */
#line 3153 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1073:

/* Line 1464 of yacc.c  */
#line 3154 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1074:

/* Line 1464 of yacc.c  */
#line 3155 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1075:

/* Line 1464 of yacc.c  */
#line 3157 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1076:

/* Line 1464 of yacc.c  */
#line 3158 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1077:

/* Line 1464 of yacc.c  */
#line 3159 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1078:

/* Line 1464 of yacc.c  */
#line 3160 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1079:

/* Line 1464 of yacc.c  */
#line 3162 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1080:

/* Line 1464 of yacc.c  */
#line 3163 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1081:

/* Line 1464 of yacc.c  */
#line 3164 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1082:

/* Line 1464 of yacc.c  */
#line 3168 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1083:

/* Line 1464 of yacc.c  */
#line 3169 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1084:

/* Line 1464 of yacc.c  */
#line 3170 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1085:

/* Line 1464 of yacc.c  */
#line 3171 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1086:

/* Line 1464 of yacc.c  */
#line 3172 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1087:

/* Line 1464 of yacc.c  */
#line 3176 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1088:

/* Line 1464 of yacc.c  */
#line 3177 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1089:

/* Line 1464 of yacc.c  */
#line 3178 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1090:

/* Line 1464 of yacc.c  */
#line 3179 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1091:

/* Line 1464 of yacc.c  */
#line 3180 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1092:

/* Line 1464 of yacc.c  */
#line 3181 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1093:

/* Line 1464 of yacc.c  */
#line 3182 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1094:

/* Line 1464 of yacc.c  */
#line 3186 "grammar.y"
    { (yyval.declMode) = declMode = publicAccess; ;}
    break;

  case 1095:

/* Line 1464 of yacc.c  */
#line 3187 "grammar.y"
    { (yyval.declMode) = declMode = privateAccess; ;}
    break;

  case 1096:

/* Line 1464 of yacc.c  */
#line 3188 "grammar.y"
    { (yyval.declMode) = declMode = defaultAccess; ;}
    break;

  case 1097:

/* Line 1464 of yacc.c  */
#line 3192 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1098:

/* Line 1464 of yacc.c  */
#line 3193 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1099:

/* Line 1464 of yacc.c  */
#line 3197 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1100:

/* Line 1464 of yacc.c  */
#line 3198 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1101:

/* Line 1464 of yacc.c  */
#line 3199 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1102:

/* Line 1464 of yacc.c  */
#line 3200 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); ;}
    break;

  case 1103:

/* Line 1464 of yacc.c  */
#line 3204 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1104:

/* Line 1464 of yacc.c  */
#line 3205 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1105:

/* Line 1464 of yacc.c  */
#line 3206 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1106:

/* Line 1464 of yacc.c  */
#line 3208 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1107:

/* Line 1464 of yacc.c  */
#line 3209 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1108:

/* Line 1464 of yacc.c  */
#line 3210 "grammar.y"
    { declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1109:

/* Line 1464 of yacc.c  */
#line 3214 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1110:

/* Line 1464 of yacc.c  */
#line 3218 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1111:

/* Line 1464 of yacc.c  */
#line 3219 "grammar.y"
    {;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3221 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3222 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3223 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3227 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3228 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3229 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3230 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3234 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3235 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3239 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3240 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3241 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3245 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3246 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3247 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3248 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3249 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3250 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3251 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3255 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3256 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3257 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3258 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3262 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3263 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3264 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3265 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3269 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3273 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3278 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3280 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3283 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3288 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3289 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3290 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3294 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3295 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3296 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3297 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3298 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3299 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3303 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3308 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3309 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3310 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3312 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3313 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3315 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3316 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3317 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3318 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3319 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3321 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3322 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3326 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3327 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3328 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3333 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3334 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3335 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3336 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3338 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3339 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3340 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3341 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3343 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3344 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3347 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3351 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3352 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1185:

/* Line 1464 of yacc.c  */
#line 3356 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3357 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3361 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3362 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3363 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3364 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3365 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1192:

/* Line 1464 of yacc.c  */
#line 3366 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1193:

/* Line 1464 of yacc.c  */
#line 3367 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1194:

/* Line 1464 of yacc.c  */
#line 3368 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3372 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1196:

/* Line 1464 of yacc.c  */
#line 3373 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1197:

/* Line 1464 of yacc.c  */
#line 3374 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3375 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1199:

/* Line 1464 of yacc.c  */
#line 3381 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3385 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3389 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3390 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3391 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1206:

/* Line 1464 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3396 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3398 "grammar.y"
    { 
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3409 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3411 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3414 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3417 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3418 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3419 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3421 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess); 
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror(); 
   ;}
    break;

  case 1216:

/* Line 1464 of yacc.c  */
#line 3430 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3432 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1218:

/* Line 1464 of yacc.c  */
#line 3434 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3435 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3436 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); declMode = defaultDeclMode; ;}
    break;

  case 1221:

/* Line 1464 of yacc.c  */
#line 3437 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); declMode = defaultDeclMode; ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3439 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();  
   ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3448 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3449 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3450 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3451 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3452 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3453 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3457 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3459 "grammar.y"
    {
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      declMode = defaultDeclMode;
   ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3466 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3468 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3469 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3472 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3473 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3477 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3478 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3479 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3485 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3486 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3488 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3490 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3496 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3500 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3501 "grammar.y"
    { Symbol symbol = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3502 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3506 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3510 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3511 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3512 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3516 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3517 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3521 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3526 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3527 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3528 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3529 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3533 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3537 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3541 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3545 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 21208 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3548 "grammar.y"


