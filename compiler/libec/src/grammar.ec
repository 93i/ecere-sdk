/* Code generated from Bison source file: grammar.y */
/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define C89_DECL_WARNING   "eC expects all declarations to precede statements in the block (C89 style)\n"

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 107 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     LONG = 294,
     SIGNED = 295,
     UNSIGNED = 296,
     FLOAT = 297,
     DOUBLE = 298,
     CONST = 299,
     VOLATILE = 300,
     VOID = 301,
     VALIST = 302,
     STRUCT = 303,
     UNION = 304,
     ENUM = 305,
     ELLIPSIS = 306,
     CASE = 307,
     DEFAULT = 308,
     IF = 309,
     SWITCH = 310,
     WHILE = 311,
     DO = 312,
     FOR = 313,
     GOTO = 314,
     CONTINUE = 315,
     BREAK = 316,
     RETURN = 317,
     IFX = 318,
     ELSE = 319,
     CLASS = 320,
     THISCLASS = 321,
     CLASS_NAME = 322,
     PROPERTY = 323,
     SETPROP = 324,
     GETPROP = 325,
     NEWOP = 326,
     RENEW = 327,
     DELETE = 328,
     EXT_DECL = 329,
     EXT_STORAGE = 330,
     IMPORT = 331,
     DEFINE = 332,
     VIRTUAL = 333,
     ATTRIB = 334,
     PUBLIC = 335,
     PRIVATE = 336,
     TYPED_OBJECT = 337,
     ANY_OBJECT = 338,
     _INCREF = 339,
     EXTENSION = 340,
     ASM = 341,
     TYPEOF = 342,
     WATCH = 343,
     STOPWATCHING = 344,
     FIREWATCHERS = 345,
     WATCHABLE = 346,
     CLASS_DESIGNER = 347,
     CLASS_NO_EXPANSION = 348,
     CLASS_FIXED = 349,
     ISPROPSET = 350,
     CLASS_DEFAULT_PROPERTY = 351,
     PROPERTY_CATEGORY = 352,
     CLASS_DATA = 353,
     CLASS_PROPERTY = 354,
     SUBCLASS = 355,
     NAMESPACE = 356,
     NEW0OP = 357,
     RENEW0 = 358,
     VAARG = 359,
     DBTABLE = 360,
     DBFIELD = 361,
     DBINDEX = 362,
     DATABASE_OPEN = 363,
     ALIGNOF = 364,
     ATTRIB_DEP = 365,
     __ATTRIB = 366
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 37 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;
   
   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 299 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 324 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  283
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   39120

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  137
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  260
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1313
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2184

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   366

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   131,     2,     2,   125,   133,   128,     2,
     115,   116,   112,   129,   120,   130,   123,   132,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   124,   118,
     113,   119,   114,   136,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   126,     2,   127,   134,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   122,   135,   121,   117,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    84,    86,
      89,    91,    94,    97,   100,   103,   106,   109,   111,   113,
     117,   119,   123,   127,   129,   131,   135,   139,   141,   145,
     149,   153,   157,   159,   162,   165,   167,   169,   172,   175,
     178,   181,   183,   186,   189,   191,   193,   196,   199,   201,
     204,   207,   210,   213,   215,   218,   221,   225,   230,   236,
     241,   245,   250,   253,   257,   262,   268,   273,   277,   282,
     288,   294,   299,   302,   306,   310,   314,   318,   321,   326,
     330,   334,   337,   342,   346,   349,   353,   356,   360,   363,
     365,   368,   372,   376,   380,   383,   385,   389,   393,   395,
     399,   403,   406,   411,   417,   421,   426,   430,   432,   436,
     440,   444,   447,   451,   454,   459,   465,   469,   474,   478,
     480,   484,   488,   491,   493,   496,   499,   502,   504,   507,
     513,   521,   531,   538,   547,   552,   559,   561,   564,   568,
     573,   576,   579,   581,   583,   586,   589,   591,   593,   595,
     597,   605,   607,   610,   615,   617,   619,   622,   626,   629,
     632,   635,   639,   641,   644,   647,   650,   652,   654,   656,
     659,   662,   665,   669,   673,   675,   677,   680,   683,   685,
     688,   691,   694,   697,   699,   702,   704,   706,   709,   714,
     719,   726,   729,   734,   739,   746,   748,   750,   754,   756,
     759,   764,   766,   768,   770,   772,   776,   778,   780,   782,
     786,   790,   794,   798,   802,   806,   808,   812,   814,   817,
     820,   824,   828,   834,   840,   847,   854,   857,   860,   864,
     868,   872,   876,   880,   884,   888,   892,   896,   900,   904,
     906,   908,   912,   914,   917,   922,   924,   926,   931,   936,
     942,   951,   953,   955,   958,   965,   972,   978,   984,   991,
     998,  1004,  1010,  1018,  1026,  1033,  1040,  1048,  1056,  1063,
    1070,  1075,  1081,  1086,  1093,  1098,  1100,  1102,  1104,  1106,
    1110,  1112,  1115,  1118,  1121,  1123,  1128,  1133,  1137,  1142,
    1147,  1151,  1155,  1158,  1161,  1166,  1171,  1175,  1180,  1184,
    1188,  1191,  1194,  1196,  1201,  1206,  1210,  1215,  1220,  1224,
    1228,  1231,  1234,  1239,  1244,  1248,  1253,  1257,  1261,  1264,
    1267,  1269,  1271,  1275,  1279,  1281,  1283,  1287,  1291,  1294,
    1297,  1300,  1303,  1306,  1311,  1314,  1319,  1325,  1331,  1336,
    1339,  1344,  1346,  1348,  1350,  1352,  1354,  1356,  1358,  1360,
    1362,  1364,  1366,  1368,  1370,  1375,  1377,  1381,  1385,  1389,
    1393,  1397,  1401,  1403,  1407,  1411,  1415,  1419,  1421,  1425,
    1429,  1433,  1437,  1440,  1442,  1445,  1449,  1453,  1457,  1461,
    1465,  1469,  1473,  1475,  1479,  1483,  1487,  1491,  1495,  1499,
    1503,  1507,  1509,  1513,  1517,  1521,  1525,  1527,  1531,  1535,
    1539,  1543,  1545,  1549,  1553,  1557,  1561,  1563,  1567,  1571,
    1573,  1577,  1581,  1583,  1589,  1595,  1601,  1607,  1613,  1619,
    1625,  1631,  1637,  1643,  1649,  1655,  1661,  1667,  1673,  1679,
    1681,  1685,  1689,  1693,  1697,  1701,  1705,  1709,  1713,  1715,
    1717,  1719,  1721,  1723,  1725,  1727,  1729,  1731,  1733,  1735,
    1737,  1741,  1745,  1748,  1750,  1754,  1758,  1760,  1762,  1765,
    1768,  1772,  1776,  1780,  1784,  1788,  1792,  1796,  1798,  1801,
    1804,  1808,  1812,  1816,  1820,  1824,  1828,  1832,  1835,  1838,
    1841,  1844,  1848,  1851,  1857,  1864,  1871,  1875,  1878,  1884,
    1886,  1888,  1890,  1892,  1894,  1899,  1901,  1905,  1909,  1913,
    1917,  1921,  1925,  1927,  1931,  1935,  1939,  1943,  1945,  1949,
    1953,  1957,  1961,  1963,  1966,  1970,  1974,  1978,  1982,  1986,
    1990,  1994,  1996,  2000,  2004,  2008,  2012,  2016,  2020,  2024,
    2028,  2030,  2034,  2038,  2042,  2046,  2048,  2052,  2056,  2060,
    2064,  2066,  2070,  2074,  2078,  2082,  2084,  2088,  2092,  2094,
    2098,  2102,  2104,  2110,  2116,  2122,  2128,  2133,  2138,  2143,
    2148,  2154,  2160,  2166,  2172,  2177,  2182,  2187,  2192,  2198,
    2204,  2210,  2216,  2222,  2228,  2234,  2240,  2244,  2248,  2251,
    2254,  2256,  2260,  2264,  2268,  2272,  2274,  2277,  2281,  2285,
    2288,  2291,  2294,  2296,  2299,  2303,  2307,  2309,  2311,  2313,
    2315,  2317,  2319,  2321,  2323,  2325,  2327,  2329,  2331,  2333,
    2337,  2341,  2343,  2347,  2350,  2352,  2355,  2358,  2361,  2366,
    2371,  2375,  2379,  2384,  2390,  2395,  2402,  2409,  2414,  2420,
    2425,  2432,  2439,  2442,  2445,  2448,  2454,  2458,  2464,  2471,
    2477,  2485,  2493,  2502,  2511,  2519,  2527,  2531,  2535,  2539,
    2544,  2548,  2554,  2560,  2562,  2564,  2566,  2568,  2570,  2572,
    2574,  2576,  2578,  2581,  2583,  2585,  2587,  2589,  2591,  2593,
    2595,  2597,  2599,  2601,  2603,  2605,  2607,  2609,  2611,  2613,
    2618,  2623,  2628,  2630,  2632,  2634,  2636,  2638,  2640,  2642,
    2644,  2646,  2648,  2650,  2652,  2654,  2656,  2658,  2660,  2662,
    2664,  2666,  2671,  2676,  2681,  2683,  2685,  2688,  2691,  2695,
    2701,  2704,  2708,  2714,  2720,  2726,  2728,  2732,  2735,  2738,
    2742,  2746,  2749,  2753,  2757,  2762,  2766,  2770,  2774,  2778,
    2782,  2786,  2791,  2796,  2801,  2803,  2805,  2810,  2814,  2817,
    2821,  2825,  2829,  2833,  2837,  2841,  2845,  2849,  2853,  2857,
    2861,  2865,  2867,  2869,  2871,  2874,  2876,  2879,  2881,  2884,
    2886,  2889,  2891,  2894,  2896,  2899,  2901,  2904,  2906,  2909,
    2911,  2914,  2916,  2919,  2921,  2924,  2926,  2929,  2931,  2934,
    2936,  2939,  2941,  2944,  2946,  2949,  2951,  2954,  2956,  2959,
    2961,  2964,  2966,  2969,  2971,  2974,  2976,  2979,  2981,  2984,
    2986,  2989,  2991,  2994,  2996,  2999,  3001,  3003,  3005,  3008,
    3010,  3013,  3015,  3018,  3020,  3023,  3028,  3034,  3036,  3038,
    3040,  3043,  3045,  3048,  3050,  3053,  3055,  3058,  3063,  3069,
    3071,  3074,  3076,  3079,  3081,  3084,  3086,  3089,  3091,  3094,
    3096,  3099,  3104,  3110,  3112,  3115,  3117,  3120,  3122,  3125,
    3127,  3130,  3132,  3135,  3137,  3140,  3145,  3151,  3155,  3159,
    3161,  3165,  3169,  3173,  3177,  3179,  3181,  3183,  3188,  3193,
    3198,  3202,  3207,  3212,  3217,  3221,  3223,  3227,  3232,  3236,
    3241,  3246,  3251,  3256,  3260,  3263,  3267,  3271,  3275,  3279,
    3282,  3285,  3288,  3292,  3297,  3299,  3301,  3304,  3308,  3312,
    3316,  3320,  3323,  3326,  3329,  3333,  3338,  3340,  3342,  3344,
    3346,  3348,  3353,  3355,  3357,  3359,  3361,  3363,  3365,  3367,
    3369,  3371,  3376,  3378,  3381,  3385,  3392,  3398,  3402,  3407,
    3410,  3414,  3418,  3422,  3426,  3431,  3436,  3441,  3444,  3448,
    3452,  3456,  3461,  3466,  3470,  3475,  3478,  3482,  3486,  3490,
    3495,  3500,  3502,  3505,  3508,  3512,  3514,  3516,  3519,  3522,
    3526,  3528,  3530,  3533,  3536,  3540,  3542,  3545,  3549,  3552,
    3555,  3557,  3560,  3564,  3567,  3569,  3572,  3576,  3580,  3582,
    3585,  3589,  3593,  3595,  3598,  3602,  3606,  3608,  3611,  3615,
    3619,  3621,  3624,  3628,  3632,  3634,  3638,  3643,  3645,  3650,
    3653,  3659,  3663,  3665,  3667,  3669,  3671,  3673,  3675,  3679,
    3683,  3686,  3689,  3691,  3693,  3697,  3700,  3704,  3706,  3710,
    3714,  3718,  3722,  3726,  3728,  3731,  3735,  3739,  3741,  3744,
    3746,  3749,  3752,  3755,  3758,  3762,  3764,  3766,  3770,  3774,
    3776,  3780,  3785,  3789,  3794,  3798,  3802,  3807,  3811,  3816,
    3818,  3822,  3826,  3831,  3835,  3839,  3843,  3848,  3850,  3854,
    3858,  3862,  3866,  3870,  3872,  3876,  3879,  3881,  3883,  3885,
    3887,  3889,  3892,  3894,  3896,  3898,  3900,  3903,  3906,  3909,
    3911,  3913,  3915,  3917,  3919,  3922,  3924,  3926,  3931,  3933,
    3937,  3938,  3945,  3954,  3965,  3978,  3987,  3998,  4009,  4015,
    4023,  4033,  4045,  4053,  4063,  4073,  4077,  4082,  4087,  4091,
    4095,  4099,  4104,  4109,  4113,  4116,  4120,  4123,  4125,  4127,
    4129,  4131,  4133,  4136,  4140,  4143,  4146,  4149,  4153,  4157,
    4160,  4166,  4173,  4176,  4179,  4182,  4185,  4188,  4191,  4193,
    4196,  4199,  4203,  4205,  4208,  4210,  4213,  4216,  4218,  4221,
    4224,  4227,  4230,  4233,  4236,  4238,  4240,  4243,  4246,  4248,
    4250,  4253,  4256,  4258,  4261,  4264,  4266,  4269,  4271,  4274,
    4277,  4283,  4289,  4297,  4305,  4311,  4317,  4321,  4324,  4330,
    4335,  4340,  4348,  4355,  4362,  4368,  4376,  4383,  4388,  4396,
    4406,  4410,  4415,  4420,  4426,  4432,  4439,  4447,  4454,  4461,
    4467,  4473,  4478,  4482,  4485,  4487,  4490,  4495,  4499,  4505,
    4510,  4514,  4517,  4520,  4523,  4527,  4531,  4535,  4539,  4542,
    4545,  4547,  4549,  4554,  4558,  4563,  4567,  4571,  4574,  4579,
    4583,  4588,  4592,  4596,  4599,  4601,  4604,  4606,  4608,  4611,
    4613,  4616,  4620,  4624,  4626,  4629,  4632,  4635,  4639,  4644,
    4649,  4652,  4655,  4658,  4661,  4663,  4666,  4668,  4671,  4673,
    4676,  4679,  4681,  4684,  4686,  4689,  4692,  4695,  4698,  4700,
    4703,  4706,  4710,  4712,  4714,  4715,  4722,  4729,  4735,  4740,
    4742,  4745,  4748,  4750,  4754,  4758,  4763,  4765,  4767,  4770,
    4773,  4780,  4787,  4794
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     386,     0,    -1,   209,   112,    -1,   209,   113,    -1,   142,
      -1,   209,   209,    -1,    28,    -1,    28,    -1,   140,    -1,
     140,   113,   203,   114,    -1,   140,   113,   203,    11,    -1,
     295,   330,    -1,   328,    -1,   295,   115,   116,    -1,   117,
     295,   115,   116,    -1,    78,   295,   330,    -1,    78,   328,
      -1,   295,   331,    -1,   329,    -1,    78,   295,   331,    -1,
      78,   329,    -1,   143,   370,    -1,   146,   370,    -1,   146,
     118,    -1,   144,   370,    -1,   145,   370,    -1,   143,   118,
      -1,   143,   371,    -1,   147,    -1,   146,   371,    -1,   148,
      -1,   148,   118,    -1,   294,   330,    -1,   294,   332,    -1,
     294,   331,    -1,   151,   370,    -1,   151,   371,    -1,   152,
      -1,   151,    -1,   216,   119,   335,    -1,   335,    -1,   216,
     119,   336,    -1,   216,   119,     1,    -1,   336,    -1,   155,
      -1,   157,   120,   155,    -1,   158,   120,   155,    -1,   156,
      -1,   157,   120,   156,    -1,   158,   120,   156,    -1,   157,
     120,     1,    -1,   158,   120,     1,    -1,   120,    -1,   157,
     118,    -1,   158,   118,    -1,   159,    -1,   153,    -1,   162,
     159,    -1,   162,   153,    -1,   160,   159,    -1,   160,   153,
      -1,   118,    -1,   162,   118,    -1,   160,   118,    -1,   160,
      -1,   157,    -1,   160,   157,    -1,   162,   157,    -1,   154,
      -1,   161,   154,    -1,   162,   154,    -1,   160,   154,    -1,
     160,   158,    -1,   158,    -1,   157,     1,    -1,   164,   121,
      -1,   164,     1,   121,    -1,   294,   209,   122,   162,    -1,
     294,   209,   122,   161,     1,    -1,   294,   209,   122,   161,
      -1,   294,   209,   122,    -1,   294,   209,   122,     1,    -1,
     166,   121,    -1,   166,     1,   121,    -1,   295,   209,   122,
     162,    -1,   295,   209,   122,   161,     1,    -1,   295,   209,
     122,   161,    -1,   295,   209,   122,    -1,   295,   209,   122,
       1,    -1,   296,   209,   122,   161,   121,    -1,   296,   209,
     122,   162,   121,    -1,   296,   209,   122,   121,    -1,   169,
     121,    -1,   169,     1,   121,    -1,   142,   122,   161,    -1,
     209,   122,   161,    -1,   142,   122,   162,    -1,   142,   122,
      -1,   142,   122,   161,     1,    -1,   142,   122,     1,    -1,
     209,   122,   162,    -1,   209,   122,    -1,   209,   122,   161,
       1,    -1,   209,   122,     1,    -1,   171,   121,    -1,   171,
       1,   121,    -1,   122,   162,    -1,   122,   161,     1,    -1,
     122,     1,    -1,   122,    -1,   122,   161,    -1,   216,   119,
     335,    -1,   216,   119,   336,    -1,   216,   119,     1,    -1,
     216,     1,    -1,   172,    -1,   174,   120,   172,    -1,   175,
     120,   172,    -1,   173,    -1,   174,   120,   173,    -1,   175,
     120,   173,    -1,   174,     1,    -1,    68,   300,   209,   122,
      -1,    68,   300,   324,   209,   122,    -1,    68,   300,   122,
      -1,    68,   300,   324,   122,    -1,    68,     1,   122,    -1,
     176,    -1,   177,    69,   370,    -1,   177,    70,   370,    -1,
     177,    95,   370,    -1,   177,    91,    -1,   177,    97,   211,
      -1,   177,   121,    -1,    99,   300,   209,   122,    -1,    99,
     300,   324,   209,   122,    -1,    99,   300,   122,    -1,    99,
     300,   324,   122,    -1,    99,     1,   122,    -1,   179,    -1,
     180,    69,   370,    -1,   180,    70,   370,    -1,   180,   121,
      -1,   209,    -1,   182,   209,    -1,   182,   370,    -1,    73,
     370,    -1,   183,    -1,   184,   183,    -1,    88,   115,   182,
     116,   370,    -1,    88,   115,   237,   116,   122,   184,   121,
      -1,   237,   123,    88,   115,   237,   116,   122,   184,   121,
      -1,    89,   115,   237,   120,   182,   116,    -1,   237,   123,
      89,   115,   237,   120,   182,   116,    -1,    89,   115,   237,
     116,    -1,   237,   123,    89,   115,   237,   116,    -1,    90,
      -1,    90,   182,    -1,   216,   123,    90,    -1,   237,   123,
      90,   182,    -1,   190,   118,    -1,   174,   118,    -1,   149,
      -1,   178,    -1,   358,   149,    -1,   358,   178,    -1,   181,
      -1,    91,    -1,    93,    -1,    94,    -1,    99,   115,   209,
     116,   119,   335,   118,    -1,   118,    -1,   358,   124,    -1,
     358,   115,   209,   116,    -1,   150,    -1,   295,    -1,   295,
     282,    -1,   358,   295,   282,    -1,   358,   295,    -1,   358,
     168,    -1,   358,   165,    -1,    98,   295,   282,    -1,   185,
      -1,    92,   209,    -1,    92,   142,    -1,    96,   209,    -1,
     168,    -1,   165,    -1,   174,    -1,   166,     1,    -1,   169,
       1,    -1,   358,   150,    -1,   358,   166,     1,    -1,   358,
     169,     1,    -1,   175,    -1,   189,    -1,   191,   189,    -1,
     192,   189,    -1,   190,    -1,   191,     1,    -1,   192,     1,
      -1,   191,   190,    -1,   192,   190,    -1,   294,    -1,   294,
     324,    -1,   209,    -1,   193,    -1,    65,   209,    -1,    65,
     209,   119,   194,    -1,    65,   209,   124,   193,    -1,    65,
     209,   124,   193,   119,   194,    -1,    65,   141,    -1,    65,
     141,   119,   194,    -1,    65,   141,   124,   193,    -1,    65,
     141,   124,   193,   119,   194,    -1,   209,    -1,   209,    -1,
     209,   119,   196,    -1,   261,    -1,   193,   209,    -1,   193,
     209,   119,   198,    -1,   195,    -1,   197,    -1,   199,    -1,
     200,    -1,   201,   120,   200,    -1,   198,    -1,   196,    -1,
     194,    -1,   209,   119,   198,    -1,   209,   119,   196,    -1,
     209,   119,   194,    -1,   193,   119,   198,    -1,   193,   119,
     196,    -1,   193,   119,   194,    -1,   202,    -1,   203,   120,
     202,    -1,    65,    -1,   204,   209,    -1,   204,   140,    -1,
     209,   204,   209,    -1,   209,   204,   140,    -1,   204,   209,
     113,   201,   114,    -1,   204,   140,   113,   201,   114,    -1,
     209,   204,   209,   113,   201,   114,    -1,   209,   204,   140,
     113,   201,   114,    -1,   208,   121,    -1,   207,   118,    -1,
     205,   122,   121,    -1,   207,   122,   121,    -1,   204,   209,
     118,    -1,   204,   139,   118,    -1,   205,   124,   299,    -1,
     205,   122,   192,    -1,   207,   122,   192,    -1,   205,   122,
     191,    -1,   207,   122,   191,    -1,   205,   122,     1,    -1,
     207,   122,     1,    -1,     3,    -1,   212,    -1,   115,   239,
     116,    -1,   381,    -1,   125,   381,    -1,   125,   381,   123,
     381,    -1,   209,    -1,   168,    -1,    85,   115,   370,   116,
      -1,    85,   115,   239,   116,    -1,    85,   115,   342,   116,
     333,    -1,    85,   115,   342,   116,   115,   342,   116,   333,
      -1,     4,    -1,   211,    -1,   115,   116,    -1,    71,   302,
     325,   126,   261,   127,    -1,    71,   302,   325,   126,   262,
     127,    -1,    71,   302,   126,   261,   127,    -1,    71,   302,
     126,   262,   127,    -1,   102,   302,   325,   126,   261,   127,
      -1,   102,   302,   325,   126,   262,   127,    -1,   102,   302,
     126,   261,   127,    -1,   102,   302,   126,   262,   127,    -1,
      72,   261,   301,   325,   126,   261,   127,    -1,    72,   261,
     301,   325,   126,   262,   127,    -1,    72,   261,   301,   126,
     261,   127,    -1,    72,   261,   301,   126,   262,   127,    -1,
     103,   261,   301,   325,   126,   261,   127,    -1,   103,   261,
     301,   325,   126,   262,   127,    -1,   103,   261,   301,   126,
     261,   127,    -1,   103,   261,   301,   126,   262,   127,    -1,
      65,   115,   294,   116,    -1,    65,   115,   294,   324,   116,
      -1,    65,   115,   209,   116,    -1,   104,   115,   237,   120,
     342,   116,    -1,    98,   115,   209,   116,    -1,   393,    -1,
     394,    -1,   395,    -1,   396,    -1,   126,   218,   127,    -1,
     170,    -1,   171,     1,    -1,   115,   239,    -1,   115,   259,
      -1,   210,    -1,   216,   126,   239,   127,    -1,   216,   126,
     259,   127,    -1,   216,   115,   116,    -1,   216,   115,   218,
     116,    -1,   216,   115,   219,   116,    -1,   216,   123,   209,
      -1,   216,     7,   209,    -1,   216,     8,    -1,   216,     9,
      -1,   241,   126,   239,   127,    -1,   241,   126,   259,   127,
      -1,   241,   115,   116,    -1,   241,   115,   218,   116,    -1,
     241,   123,   209,    -1,   241,     7,   209,    -1,   241,     8,
      -1,   241,     9,    -1,   212,    -1,   217,   126,   239,   127,
      -1,   217,   126,   259,   127,    -1,   217,   115,   116,    -1,
     217,   115,   218,   116,    -1,   217,   115,   219,   116,    -1,
     217,   123,   209,    -1,   217,     7,   209,    -1,   217,     8,
      -1,   217,     9,    -1,   242,   126,   239,   127,    -1,   242,
     126,   259,   127,    -1,   242,   115,   116,    -1,   242,   115,
     218,   116,    -1,   242,   123,   209,    -1,   242,     7,   209,
      -1,   242,     8,    -1,   242,     9,    -1,   237,    -1,   213,
      -1,   218,   120,   237,    -1,   218,   120,   213,    -1,   258,
      -1,   214,    -1,   218,   120,   258,    -1,   218,   120,   214,
      -1,   218,   120,    -1,     8,   221,    -1,     9,   221,    -1,
     223,   224,    -1,   223,   213,    -1,     6,   115,   221,   116,
      -1,     6,   222,    -1,     6,   115,   343,   116,    -1,     6,
     115,    65,   139,   116,    -1,     6,   115,    65,   138,   116,
      -1,   109,   115,   221,   116,    -1,   109,   222,    -1,   109,
     115,   343,   116,    -1,   220,    -1,   216,    -1,   220,    -1,
     217,    -1,   128,    -1,   112,    -1,   129,    -1,   130,    -1,
     117,    -1,   131,    -1,    73,    -1,    84,    -1,   221,    -1,
     115,   342,   116,   224,    -1,   224,    -1,   225,   112,   224,
      -1,   225,   132,   224,    -1,   225,   133,   224,    -1,   247,
     112,   224,    -1,   247,   132,   224,    -1,   247,   133,   224,
      -1,   225,    -1,   226,   129,   225,    -1,   226,   130,   225,
      -1,   248,   129,   225,    -1,   248,   130,   225,    -1,   226,
      -1,   227,    10,   226,    -1,   227,    11,   226,    -1,   249,
      10,   226,    -1,   249,    11,   226,    -1,   229,   113,    -1,
     227,    -1,   228,   227,    -1,   229,   114,   227,    -1,   229,
      12,   227,    -1,   229,    13,   227,    -1,   250,   113,   227,
      -1,   250,   114,   227,    -1,   250,    12,   227,    -1,   250,
      13,   227,    -1,   229,    -1,   230,    14,   229,    -1,   230,
      15,   229,    -1,   251,    14,   229,    -1,   251,    15,   229,
      -1,   230,    14,   213,    -1,   230,    15,   213,    -1,   251,
      14,   213,    -1,   251,    15,   213,    -1,   230,    -1,   231,
     128,   230,    -1,   252,   128,   230,    -1,   231,   128,   213,
      -1,   252,   128,   213,    -1,   231,    -1,   232,   134,   231,
      -1,   253,   134,   231,    -1,   232,   134,   213,    -1,   253,
     134,   213,    -1,   232,    -1,   233,   135,   232,    -1,   254,
     135,   232,    -1,   233,   135,   213,    -1,   254,   135,   213,
      -1,   233,    -1,   234,    16,   233,    -1,   255,    16,   233,
      -1,   234,    -1,   235,    17,   234,    -1,   256,    17,   234,
      -1,   235,    -1,   235,   136,   239,   124,   236,    -1,   235,
     136,   259,   124,   236,    -1,   256,   136,   239,   124,   236,
      -1,   256,   136,   259,   124,   236,    -1,   235,   136,   240,
     124,   236,    -1,   235,   136,   260,   124,   236,    -1,   256,
     136,   240,   124,   236,    -1,   256,   136,   260,   124,   236,
      -1,   235,   136,   239,   124,   213,    -1,   235,   136,   259,
     124,   213,    -1,   256,   136,   239,   124,   213,    -1,   256,
     136,   259,   124,   213,    -1,   235,   136,   240,   124,   213,
      -1,   235,   136,   260,   124,   213,    -1,   256,   136,   240,
     124,   213,    -1,   256,   136,   260,   124,   213,    -1,   236,
      -1,   221,   238,   237,    -1,   244,   238,   237,    -1,   236,
     238,   237,    -1,   257,   238,   237,    -1,   221,   238,   213,
      -1,   244,   238,   213,    -1,   236,   238,   213,    -1,   257,
     238,   213,    -1,   119,    -1,    18,    -1,    19,    -1,    20,
      -1,    21,    -1,    22,    -1,    23,    -1,    24,    -1,    25,
      -1,    26,    -1,    27,    -1,   237,    -1,   239,   120,   237,
      -1,   259,   120,   237,    -1,   259,   116,    -1,   213,    -1,
     239,   120,   213,    -1,   259,   120,   213,    -1,   215,    -1,
       1,    -1,   216,     1,    -1,   169,     1,    -1,   216,     7,
       1,    -1,   241,     7,     1,    -1,   216,   115,   218,    -1,
     216,   115,   219,    -1,   216,   123,     1,    -1,   241,   115,
     219,    -1,   241,   123,     1,    -1,     1,    -1,   217,     1,
      -1,   169,     1,    -1,   217,     7,     1,    -1,   242,     7,
       1,    -1,   217,   115,   218,    -1,   217,   115,   219,    -1,
     217,   123,     1,    -1,   242,   115,   219,    -1,   242,   123,
       1,    -1,     8,   244,    -1,     9,   244,    -1,   223,   246,
      -1,   223,   214,    -1,     6,   115,   244,    -1,     6,   245,
      -1,     6,   115,   343,   116,     1,    -1,     6,   115,    65,
     139,   116,     1,    -1,     6,   115,    65,   138,   116,     1,
      -1,   109,   115,   244,    -1,   109,   245,    -1,   109,   115,
     343,   116,     1,    -1,   243,    -1,   241,    -1,   243,    -1,
     242,    -1,   244,    -1,   115,   342,   116,   246,    -1,   246,
      -1,   225,   112,   246,    -1,   225,   132,   246,    -1,   225,
     133,   246,    -1,   247,   112,   246,    -1,   247,   132,   246,
      -1,   247,   133,   246,    -1,   247,    -1,   226,   129,   247,
      -1,   226,   130,   247,    -1,   248,   129,   247,    -1,   248,
     130,   247,    -1,   248,    -1,   227,    10,   248,    -1,   227,
      11,   248,    -1,   249,    10,   248,    -1,   249,    11,   248,
      -1,   249,    -1,   228,   249,    -1,   229,   114,   249,    -1,
     229,    12,   249,    -1,   229,    13,   249,    -1,   250,   113,
     249,    -1,   250,   114,   249,    -1,   250,    12,   249,    -1,
     250,    13,   249,    -1,   250,    -1,   230,    14,   250,    -1,
     230,    15,   250,    -1,   251,    14,   250,    -1,   251,    15,
     250,    -1,   230,    14,   214,    -1,   230,    15,   214,    -1,
     251,    14,   214,    -1,   251,    15,   214,    -1,   251,    -1,
     231,   128,   251,    -1,   252,   128,   251,    -1,   231,   128,
     214,    -1,   252,   128,   214,    -1,   252,    -1,   232,   134,
     252,    -1,   253,   134,   252,    -1,   232,   134,   214,    -1,
     253,   134,   214,    -1,   253,    -1,   233,   135,   253,    -1,
     254,   135,   253,    -1,   233,   135,   214,    -1,   254,   135,
     214,    -1,   254,    -1,   234,    16,   254,    -1,   255,    16,
     254,    -1,   255,    -1,   235,    17,   255,    -1,   256,    17,
     255,    -1,   256,    -1,   235,   136,   239,   124,   256,    -1,
     235,   136,   259,   124,   256,    -1,   256,   136,   239,   124,
     256,    -1,   256,   136,   259,   124,   256,    -1,   235,   136,
     239,   124,    -1,   235,   136,   259,   124,    -1,   256,   136,
     239,   124,    -1,   256,   136,   259,   124,    -1,   235,   136,
     240,   124,   256,    -1,   235,   136,   260,   124,   256,    -1,
     256,   136,   240,   124,   256,    -1,   256,   136,   260,   124,
     256,    -1,   235,   136,   240,   124,    -1,   235,   136,   260,
     124,    -1,   256,   136,   240,   124,    -1,   256,   136,   260,
     124,    -1,   235,   136,   239,   124,   214,    -1,   235,   136,
     259,   124,   214,    -1,   256,   136,   239,   124,   214,    -1,
     256,   136,   259,   124,   214,    -1,   235,   136,   240,   124,
     214,    -1,   235,   136,   260,   124,   214,    -1,   256,   136,
     240,   124,   214,    -1,   256,   136,   260,   124,   214,    -1,
     235,   136,   124,    -1,   256,   136,   124,    -1,   235,   136,
      -1,   256,   136,    -1,   257,    -1,   221,   238,   258,    -1,
     244,   238,   258,    -1,   221,   238,   214,    -1,   244,   238,
     214,    -1,   258,    -1,   237,     1,    -1,   239,   120,   258,
      -1,   259,   120,   258,    -1,   239,   239,    -1,   259,   239,
      -1,   239,   259,    -1,   214,    -1,   213,     1,    -1,   239,
     120,   214,    -1,   259,   120,   214,    -1,   236,    -1,   257,
      -1,    29,    -1,    30,    -1,    31,    -1,    32,    -1,    33,
      -1,    29,    -1,    30,    -1,    31,    -1,    32,    -1,    33,
      -1,   209,    -1,   209,   119,   261,    -1,   209,   119,   262,
      -1,   265,    -1,   266,   120,   265,    -1,   266,   120,    -1,
      50,    -1,   267,   209,    -1,   267,   142,    -1,   270,   121,
      -1,   267,   209,   122,   121,    -1,   267,   142,   122,   121,
      -1,   267,   122,   266,    -1,   267,   122,     1,    -1,   267,
     209,   122,   266,    -1,   267,   209,   122,   266,     1,    -1,
     267,   209,   122,     1,    -1,   267,   209,   122,   266,   118,
     191,    -1,   267,   209,   122,   266,   118,   192,    -1,   267,
     142,   122,   266,    -1,   267,   142,   122,   266,     1,    -1,
     267,   142,   122,     1,    -1,   267,   142,   122,   266,   118,
     191,    -1,   267,   142,   122,   266,   118,   192,    -1,   267,
     209,    -1,   267,   142,    -1,   273,   121,    -1,   271,   124,
     299,   122,   121,    -1,   271,   122,   121,    -1,   271,   124,
     299,   122,   266,    -1,   271,   124,   299,   122,   266,     1,
      -1,   271,   124,   299,   122,     1,    -1,   271,   124,   299,
     122,   266,   118,   191,    -1,   271,   124,   299,   122,   266,
     118,   192,    -1,   271,   124,   299,   122,   266,     1,   118,
     191,    -1,   271,   124,   299,   122,   266,     1,   118,   192,
      -1,   271,   124,   299,   122,     1,   118,   191,    -1,   271,
     124,   299,   122,     1,   118,   192,    -1,   267,   122,   266,
      -1,   267,   122,     1,    -1,   271,   122,   266,    -1,   271,
     122,   266,     1,    -1,   271,   122,     1,    -1,   271,   122,
     266,   118,   191,    -1,   271,   122,   266,   118,   192,    -1,
     272,    -1,   289,    -1,   273,    -1,   290,    -1,   315,    -1,
      44,    -1,    45,    -1,   276,    -1,   277,    -1,   278,   277,
      -1,    46,    -1,    34,    -1,    35,    -1,    36,    -1,    37,
      -1,    38,    -1,    47,    -1,    39,    -1,    42,    -1,    43,
      -1,    40,    -1,    41,    -1,    85,    -1,   286,    -1,   268,
      -1,   139,    -1,    87,   115,   237,   116,    -1,   100,   115,
     139,   116,    -1,   100,   115,   209,   116,    -1,    66,    -1,
      82,    -1,    83,    -1,    46,    -1,    34,    -1,    35,    -1,
      36,    -1,    37,    -1,    38,    -1,    47,    -1,    39,    -1,
      42,    -1,    43,    -1,    40,    -1,    41,    -1,    85,    -1,
     286,    -1,   268,    -1,   142,    -1,    87,   115,   237,   116,
      -1,   100,   115,   139,   116,    -1,   100,   115,   209,   116,
      -1,    66,    -1,   332,    -1,   332,   320,    -1,   124,   261,
      -1,   332,   124,   261,    -1,   332,   124,   261,   124,   261,
      -1,   124,   262,    -1,   332,   124,   262,    -1,   332,   124,
     261,   124,   262,    -1,   332,   124,   262,   124,   262,    -1,
     332,   124,   262,   124,   261,    -1,   281,    -1,   282,   120,
     281,    -1,   291,   209,    -1,   291,   140,    -1,   291,   315,
     209,    -1,   291,   315,   140,    -1,   285,   121,    -1,   283,
     122,   121,    -1,   291,   122,   121,    -1,   291,   315,   122,
     121,    -1,   283,   122,   191,    -1,   283,   122,   192,    -1,
     283,   122,     1,    -1,   291,   122,   191,    -1,   291,   122,
     192,    -1,   291,   122,     1,    -1,   291,   315,   122,   191,
      -1,   291,   315,   122,   192,    -1,   291,   315,   122,     1,
      -1,   283,    -1,   283,    -1,   283,   113,   201,   114,    -1,
     287,   124,   299,    -1,   290,   121,    -1,   288,   122,   121,
      -1,   287,   122,   121,    -1,   291,   122,   121,    -1,   288,
     122,   191,    -1,   288,   122,   192,    -1,   288,   122,     1,
      -1,   287,   122,   191,    -1,   287,   122,   192,    -1,   287,
     122,     1,    -1,   291,   122,   191,    -1,   291,   122,   192,
      -1,   291,   122,     1,    -1,    48,    -1,    49,    -1,   277,
      -1,   292,   277,    -1,   279,    -1,   292,   279,    -1,   269,
      -1,   292,   269,    -1,   284,    -1,   292,   284,    -1,   277,
      -1,   293,   277,    -1,   279,    -1,   293,   279,    -1,   138,
      -1,   293,   138,    -1,   269,    -1,   293,   269,    -1,   284,
      -1,   293,   284,    -1,   263,    -1,   294,   263,    -1,   277,
      -1,   294,   277,    -1,   280,    -1,   294,   280,    -1,   269,
      -1,   294,   269,    -1,   284,    -1,   294,   284,    -1,   263,
      -1,   295,   263,    -1,   277,    -1,   295,   277,    -1,   279,
      -1,   295,   279,    -1,   138,    -1,   295,   138,    -1,   284,
      -1,   295,   284,    -1,   269,    -1,   295,   269,    -1,   264,
      -1,   296,   264,    -1,   277,    -1,   296,   277,    -1,   279,
      -1,   296,   279,    -1,   138,    -1,   296,   138,    -1,   274,
      -1,   296,   274,    -1,   275,    -1,   296,   275,    -1,    81,
      -1,    80,    -1,   263,    -1,   298,   263,    -1,   277,    -1,
     298,   277,    -1,   280,    -1,   298,   280,    -1,   209,    -1,
     298,   209,    -1,   209,   113,   203,   114,    -1,   298,   209,
     113,   203,   114,    -1,   298,    -1,   291,    -1,   263,    -1,
     300,   263,    -1,   277,    -1,   300,   277,    -1,   280,    -1,
     300,   280,    -1,   209,    -1,   300,   209,    -1,   209,   113,
     203,   114,    -1,   300,   209,   113,   203,   114,    -1,   263,
      -1,   301,   263,    -1,   277,    -1,   301,   277,    -1,   280,
      -1,   301,   280,    -1,   284,    -1,   301,   284,    -1,   269,
      -1,   301,   269,    -1,   209,    -1,   301,   209,    -1,   209,
     113,   203,   114,    -1,   301,   209,   113,   203,   114,    -1,
     263,    -1,   302,   263,    -1,   277,    -1,   302,   277,    -1,
     280,    -1,   302,   280,    -1,   284,    -1,   302,   284,    -1,
     269,    -1,   302,   269,    -1,   209,    -1,   302,   209,    -1,
     209,   113,   203,   114,    -1,   302,   209,   113,   203,   114,
      -1,   304,   120,     1,    -1,   303,   120,     1,    -1,   209,
      -1,   304,   120,   209,    -1,   303,   120,   209,    -1,   346,
     120,   209,    -1,   347,   120,   209,    -1,   306,    -1,   140,
      -1,    37,    -1,   140,   126,   261,   127,    -1,   140,   126,
     262,   127,    -1,   140,   126,   139,   127,    -1,   140,   126,
     127,    -1,   305,   126,   261,   127,    -1,   305,   126,   262,
     127,    -1,   305,   126,   139,   127,    -1,   305,   126,   127,
      -1,   209,    -1,   115,   326,   116,    -1,   115,   315,   326,
     116,    -1,   115,   327,   116,    -1,   115,   315,   327,   116,
      -1,   306,   126,   261,   127,    -1,   306,   126,   262,   127,
      -1,   306,   126,   139,   127,    -1,   306,   126,   127,    -1,
     306,   115,    -1,   307,   348,   116,    -1,   307,   349,   116,
      -1,   307,   304,   116,    -1,   307,   303,   116,    -1,   307,
     116,    -1,   307,   303,    -1,   307,     1,    -1,   307,   346,
     115,    -1,   307,   295,   209,   115,    -1,   308,    -1,   306,
      -1,   305,   115,    -1,   311,   348,   116,    -1,   311,   349,
     116,    -1,   311,   304,   116,    -1,   311,   303,   116,    -1,
     311,   116,    -1,   311,   303,    -1,   311,     1,    -1,   311,
     346,   115,    -1,   311,   295,   209,   115,    -1,   312,    -1,
     305,    -1,    74,    -1,    75,    -1,   320,    -1,    86,   115,
     381,   116,    -1,    79,    -1,   110,    -1,   111,    -1,     3,
      -1,    28,    -1,    75,    -1,    74,    -1,    44,    -1,   317,
      -1,   317,   115,   239,   116,    -1,   318,    -1,   319,   318,
      -1,   319,   120,   318,    -1,   316,   115,   115,   319,   116,
     116,    -1,   316,   115,   115,   116,   116,    -1,   115,   324,
     116,    -1,   115,   315,   324,   116,    -1,   126,   127,    -1,
     126,   261,   127,    -1,   126,   262,   127,    -1,   126,   139,
     127,    -1,   321,   126,   127,    -1,   321,   126,   261,   127,
      -1,   321,   126,   139,   127,    -1,   321,   126,   262,   127,
      -1,   115,   116,    -1,   115,   348,   116,    -1,   115,   349,
     116,    -1,   321,   115,   116,    -1,   321,   115,   348,   116,
      -1,   321,   115,   349,   116,    -1,   115,   325,   116,    -1,
     115,   315,   325,   116,    -1,   115,   116,    -1,   115,   348,
     116,    -1,   115,   349,   116,    -1,   322,   115,   116,    -1,
     322,   115,   348,   116,    -1,   322,   115,   349,   116,    -1,
     112,    -1,   112,   278,    -1,   112,   323,    -1,   112,   278,
     323,    -1,   323,    -1,   321,    -1,   323,   321,    -1,   315,
     323,    -1,   315,   323,   321,    -1,   323,    -1,   322,    -1,
     323,   322,    -1,   315,   323,    -1,   315,   323,   322,    -1,
     310,    -1,   323,   310,    -1,   315,   323,   310,    -1,   326,
     315,    -1,   332,   315,    -1,   314,    -1,   323,   314,    -1,
     315,   323,   314,    -1,   327,   315,    -1,   308,    -1,   323,
     308,    -1,   315,   323,   308,    -1,   323,   315,   308,    -1,
     309,    -1,   323,   309,    -1,   315,   323,   309,    -1,   323,
     315,   309,    -1,   312,    -1,   323,   312,    -1,   315,   323,
     312,    -1,   323,   315,   312,    -1,   313,    -1,   323,   313,
      -1,   315,   323,   313,    -1,   323,   315,   313,    -1,   305,
      -1,   323,   305,    -1,   315,   323,   305,    -1,   323,   315,
     305,    -1,   237,    -1,   122,   337,   121,    -1,   122,   337,
     120,   121,    -1,   258,    -1,   122,   337,   121,     1,    -1,
     122,   337,    -1,   122,   337,   120,   121,     1,    -1,   122,
     337,   120,    -1,   236,    -1,   213,    -1,   257,    -1,   214,
      -1,   333,    -1,   334,    -1,   337,   120,   333,    -1,   337,
     120,   334,    -1,   337,   333,    -1,   337,   334,    -1,   326,
      -1,   327,    -1,   326,   119,   333,    -1,   326,     1,    -1,
     326,   119,   334,    -1,   338,    -1,   340,   120,   338,    -1,
      37,   120,   338,    -1,    38,   120,   338,    -1,   140,   120,
     338,    -1,   341,   120,   338,    -1,   339,    -1,   338,     1,
      -1,   340,   120,   339,    -1,   341,   120,   339,    -1,   292,
      -1,   292,   324,    -1,   293,    -1,   293,   324,    -1,   295,
     327,    -1,   295,   324,    -1,   295,   128,    -1,   295,   128,
     327,    -1,   295,    -1,    65,    -1,   295,   327,     1,    -1,
     295,   324,     1,    -1,   344,    -1,   346,   120,   344,    -1,
     346,     1,   120,   344,    -1,   347,   120,   344,    -1,   347,
       1,   120,   344,    -1,     1,   120,   344,    -1,   304,   120,
     344,    -1,   304,     1,   120,   344,    -1,   303,   120,   344,
      -1,   303,     1,   120,   344,    -1,   345,    -1,   346,   120,
     345,    -1,   347,   120,   345,    -1,   347,     1,   120,   345,
      -1,     1,   120,   345,    -1,   304,   120,   345,    -1,   303,
     120,   345,    -1,   303,     1,   120,   345,    -1,   346,    -1,
     346,   120,    51,    -1,   347,   120,    51,    -1,   304,   120,
      51,    -1,   303,   120,    51,    -1,     1,   120,    51,    -1,
     347,    -1,   346,   120,     1,    -1,   347,     1,    -1,   355,
      -1,   320,    -1,   370,    -1,   118,    -1,   124,    -1,   239,
     118,    -1,   373,    -1,   375,    -1,   377,    -1,   354,    -1,
     188,   118,    -1,   187,   118,    -1,   186,   118,    -1,   356,
      -1,   376,    -1,   371,    -1,   374,    -1,   378,    -1,   377,
       1,    -1,   259,    -1,   381,    -1,   381,   115,   237,   116,
      -1,   352,    -1,   353,   120,   352,    -1,    -1,    86,   277,
     115,   381,   116,   118,    -1,    86,   277,   115,   381,   124,
     353,   116,   118,    -1,    86,   277,   115,   381,   124,   353,
     124,   353,   116,   118,    -1,    86,   277,   115,   381,   124,
     353,   124,   353,   124,   353,   116,   118,    -1,    86,   277,
     115,   381,     3,   353,   116,   118,    -1,    86,   277,   115,
     381,     3,   353,   124,   353,   116,   118,    -1,    86,   277,
     115,   381,   124,   353,     3,   353,   116,   118,    -1,    86,
     115,   381,   116,   118,    -1,    86,   115,   381,   124,   353,
     116,   118,    -1,    86,   115,   381,   124,   353,   124,   353,
     116,   118,    -1,    86,   115,   381,   124,   353,   124,   353,
     124,   353,   116,   118,    -1,    86,   115,   381,     3,   353,
     116,   118,    -1,    86,   115,   381,     3,   353,   124,   353,
     116,   118,    -1,    86,   115,   381,   124,   353,     3,   353,
     116,   118,    -1,   209,   124,   350,    -1,    52,   261,   124,
     350,    -1,    52,   262,   124,   350,    -1,    52,   124,   350,
      -1,    53,   124,   350,    -1,   209,   124,   351,    -1,    52,
     261,   124,   351,    -1,    52,   262,   124,   351,    -1,    52,
     124,   351,    -1,    52,   124,    -1,    53,   124,   351,    -1,
      53,   124,    -1,    80,    -1,    81,    -1,    53,    -1,    80,
      -1,    81,    -1,   294,   118,    -1,   294,   340,   118,    -1,
     163,   118,    -1,   362,   118,    -1,   296,   118,    -1,   296,
     340,   118,    -1,   297,   340,   118,    -1,   167,   118,    -1,
      77,   209,   119,   236,   118,    -1,    31,    77,   209,   119,
     236,   118,    -1,   296,     1,    -1,   294,     1,    -1,   362,
       1,    -1,   164,     1,    -1,   163,     1,    -1,   294,   341,
      -1,   359,    -1,   363,   359,    -1,   364,   359,    -1,   363,
       1,   118,    -1,   362,    -1,   363,   362,    -1,   350,    -1,
     365,   350,    -1,   366,   350,    -1,   351,    -1,   365,   351,
      -1,   366,   351,    -1,   365,   359,    -1,   366,   359,    -1,
     365,   362,    -1,   366,   362,    -1,   365,    -1,   363,    -1,
     363,   365,    -1,   364,   365,    -1,   366,    -1,   364,    -1,
     363,   366,    -1,   364,   366,    -1,   122,    -1,   371,   121,
      -1,   369,   368,    -1,   369,    -1,   369,   367,    -1,   118,
      -1,   239,   118,    -1,   259,   118,    -1,    54,   115,   239,
     116,   350,    -1,    54,   115,   259,   116,   350,    -1,    54,
     115,   239,   116,   350,    64,   350,    -1,    54,   115,   259,
     116,   350,    64,   350,    -1,    55,   115,   239,   116,   350,
      -1,    55,   115,   259,   116,   350,    -1,    54,   115,   259,
      -1,   373,     1,    -1,    56,   115,   239,   116,   350,    -1,
      56,   115,   259,   350,    -1,    56,   115,   116,   350,    -1,
      57,   350,    56,   115,   239,   116,   118,    -1,    57,   350,
      56,   115,   259,   118,    -1,    58,   115,   372,   372,   116,
     350,    -1,    58,   115,   372,   116,   350,    -1,    58,   115,
     372,   372,   239,   116,   350,    -1,    58,   115,   372,   372,
     259,   350,    -1,    58,   115,   116,   350,    -1,    58,   115,
     209,   124,   239,   116,   350,    -1,    58,   115,   209,   124,
     239,   118,   239,   116,   350,    -1,    58,   115,     1,    -1,
      58,   115,   259,     1,    -1,    58,   115,   372,     1,    -1,
      58,   115,   372,   259,     1,    -1,    58,   115,   372,   372,
     259,    -1,    58,   115,   372,   372,   116,   351,    -1,    58,
     115,   372,   372,   239,   116,   351,    -1,    58,   115,   372,
     372,   259,   351,    -1,    57,   350,    56,   115,   239,   116,
      -1,    57,   350,    56,   115,   239,    -1,    57,   350,    56,
     115,   259,    -1,    57,   350,    56,   115,    -1,    57,   350,
      56,    -1,    57,   350,    -1,    57,    -1,    56,     1,    -1,
      56,   115,   116,     1,    -1,    56,   115,   259,    -1,    56,
     115,   239,   116,   351,    -1,    56,   115,   259,   351,    -1,
      59,   209,   118,    -1,    60,   118,    -1,    61,   118,    -1,
      62,   118,    -1,    62,   239,   118,    -1,    62,   259,   118,
      -1,    62,   213,   118,    -1,    62,   214,   118,    -1,    62,
     259,    -1,    62,   214,    -1,    62,    -1,    59,    -1,   296,
     328,   363,   370,    -1,   296,   328,   370,    -1,   296,   330,
     363,   370,    -1,   296,   330,   370,    -1,   328,   363,   370,
      -1,   328,   370,    -1,   296,   328,   363,   371,    -1,   296,
     328,   371,    -1,   296,   330,   363,   371,    -1,   296,   330,
     371,    -1,   328,   363,   371,    -1,   328,   371,    -1,     5,
      -1,   381,     5,    -1,   379,    -1,   206,    -1,   296,   206,
      -1,   360,    -1,    76,   381,    -1,    76,    31,   381,    -1,
      76,   209,   381,    -1,   118,    -1,   357,   379,    -1,   357,
     206,    -1,   357,   360,    -1,   357,    76,   381,    -1,   357,
      76,    31,   381,    -1,   357,    76,   209,   381,    -1,   357,
     124,    -1,    31,   124,    -1,   101,   209,    -1,   101,   142,
      -1,   387,    -1,   357,   387,    -1,   208,    -1,   296,   208,
      -1,   380,    -1,   357,   208,    -1,   357,   380,    -1,   361,
      -1,   357,   361,    -1,   383,    -1,   385,   383,    -1,   384,
     383,    -1,   385,     1,    -1,   384,     1,    -1,   382,    -1,
     385,   382,    -1,   384,   206,    -1,   384,   357,   206,    -1,
     385,    -1,   384,    -1,    -1,   105,   381,   209,   122,   392,
     121,    -1,   105,   381,   142,   122,   392,   121,    -1,   105,
     381,   122,   392,   121,    -1,   295,   209,   381,   118,    -1,
     209,    -1,   114,   209,    -1,   113,   209,    -1,   389,    -1,
     390,   120,   389,    -1,   107,   390,   118,    -1,   107,   390,
     209,   118,    -1,   388,    -1,   391,    -1,   392,   388,    -1,
     392,   391,    -1,   108,   115,   237,   120,   237,   116,    -1,
     106,   115,   381,   120,   209,   116,    -1,   107,   115,   381,
     120,   209,   116,    -1,   105,   115,   381,   116,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   278,   278,   307,   366,   367,   467,   471,   474,   475,
     476,   525,   527,   532,   537,   542,   544,   549,   551,   556,
     558,   563,   565,   567,   569,   571,   575,   580,   582,   584,
     586,   588,   594,   596,   601,   606,   611,   613,   615,   620,
     621,   625,   626,   637,   641,   642,   644,   649,   650,   652,
     655,   667,   678,   697,   699,   704,   705,   706,   707,   708,
     709,   710,   711,   712,   716,   717,   718,   719,   723,   724,
     725,   726,   727,   728,   729,   733,   735,   740,   742,   744,
     746,   748,   778,   780,   785,   787,   789,   791,   793,   822,
     824,   826,   831,   833,   838,   840,   844,   846,   848,   850,
     855,   858,   861,   864,   929,   931,   936,   938,   940,   942,
     944,   975,   979,   980,   981,   985,   986,   987,   991,   992,
     993,   994,   998,  1001,  1004,  1007,  1010,  1015,  1016,  1018,
    1020,  1022,  1024,  1029,  1033,  1036,  1039,  1042,  1045,  1050,
    1051,  1053,  1058,  1062,  1064,  1069,  1071,  1076,  1078,  1083,
    1088,  1090,  1095,  1097,  1099,  1101,  1106,  1108,  1110,  1112,
    1117,  1118,  1119,  1120,  1121,  1122,  1123,  1124,  1125,  1126,
    1127,  1129,  1130,  1132,  1136,  1139,  1140,  1141,  1142,  1143,
    1144,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,  1154,
    1155,  1159,  1160,  1161,  1165,  1169,  1170,  1171,  1175,  1176,
    1177,  1178,  1179,  1183,  1184,  1185,  1189,  1193,  1194,  1195,
    1196,  1197,  1198,  1199,  1200,  1204,  1208,  1209,  1213,  1217,
    1218,  1222,  1223,  1224,  1228,  1229,  1233,  1234,  1235,  1236,
    1237,  1238,  1239,  1251,  1263,  1278,  1279,  1283,  1291,  1292,
    1300,  1301,  1303,  1304,  1313,  1314,  1318,  1325,  1332,  1338,
    1345,  1351,  1360,  1367,  1373,  1379,  1385,  1391,  1397,  1408,
    1413,  1414,  1419,  1420,  1421,  1425,  1426,  1427,  1428,  1429,
    1430,  1431,  1432,  1433,  1434,  1435,  1436,  1437,  1438,  1439,
    1440,  1441,  1442,  1443,  1444,  1445,  1446,  1447,  1448,  1449,
    1450,  1451,  1452,  1453,  1455,  1456,  1457,  1458,  1459,  1461,
    1465,  1469,  1473,  1474,  1478,  1480,  1481,  1482,  1483,  1484,
    1485,  1486,  1487,  1488,  1490,  1491,  1492,  1493,  1494,  1495,
    1496,  1497,  1501,  1503,  1504,  1505,  1506,  1507,  1508,  1509,
    1510,  1511,  1513,  1514,  1515,  1516,  1517,  1518,  1519,  1520,
    1524,  1525,  1526,  1527,  1531,  1532,  1533,  1534,  1535,  1539,
    1540,  1541,  1542,  1543,  1544,  1545,  1546,  1547,  1549,  1550,
    1551,  1555,  1556,  1560,  1561,  1565,  1566,  1567,  1568,  1569,
    1570,  1571,  1572,  1576,  1577,  1581,  1582,  1583,  1584,  1585,
    1586,  1587,  1591,  1592,  1593,  1594,  1595,  1599,  1600,  1601,
    1602,  1603,  1607,  1615,  1616,  1617,  1618,  1619,  1620,  1621,
    1622,  1623,  1627,  1628,  1629,  1630,  1631,  1633,  1634,  1635,
    1636,  1640,  1641,  1642,  1644,  1645,  1649,  1650,  1651,  1653,
    1654,  1658,  1659,  1660,  1662,  1663,  1667,  1668,  1669,  1673,
    1674,  1675,  1679,  1680,  1681,  1682,  1683,  1685,  1686,  1687,
    1688,  1690,  1691,  1692,  1693,  1695,  1696,  1697,  1698,  1702,
    1703,  1704,  1705,  1706,  1708,  1709,  1710,  1711,  1715,  1716,
    1717,  1718,  1719,  1720,  1721,  1722,  1723,  1724,  1725,  1729,
    1730,  1731,  1732,  1736,  1737,  1738,  1742,  1743,  1744,  1745,
    1747,  1748,  1750,  1751,  1756,  1758,  1763,  1767,  1768,  1769,
    1771,  1772,  1774,  1775,  1780,  1782,  1787,  1791,  1792,  1793,
    1794,  1795,  1796,  1797,  1798,  1799,  1800,  1801,  1802,  1806,
    1807,  1811,  1812,  1817,  1818,  1822,  1823,  1824,  1825,  1826,
    1827,  1828,  1832,  1833,  1837,  1841,  1845,  1852,  1853,  1854,
    1855,  1856,  1860,  1861,  1912,  1913,  1914,  1915,  1916,  1917,
    1918,  1922,  1923,  1924,  1925,  1926,  1933,  1934,  1935,  1936,
    1940,  1941,  1942,  1944,  1945,  1949,  1950,  1951,  1953,  1954,
    1958,  1959,  1960,  1962,  1963,  1967,  1968,  1969,  1973,  1974,
    1975,  1979,  1980,  1981,  1982,  1983,  1984,  1985,  1986,  1987,
    1989,  1990,  1991,  1992,  1993,  1994,  1995,  1996,  1998,  1999,
    2000,  2001,  2003,  2004,  2005,  2006,  2008,  2015,  2019,  2023,
    2030,  2031,  2035,  2040,  2041,  2045,  2046,  2047,  2048,  2054,
    2055,  2056,  2060,  2061,  2062,  2063,  2067,  2069,  2073,  2074,
    2075,  2076,  2077,  2081,  2082,  2083,  2084,  2085,  2089,  2090,
    2091,  2095,  2096,  2097,  2101,  2105,  2106,  2110,  2111,  2112,
    2116,  2117,  2119,  2120,  2121,  2122,  2123,  2125,  2126,  2127,
    2128,  2129,  2133,  2134,  2138,  2139,  2140,  2144,  2145,  2146,
    2147,  2148,  2149,  2150,  2151,  2152,  2154,  2155,  2157,  2158,
    2159,  2160,  2161,  2165,  2166,  2170,  2171,  2175,  2179,  2180,
    2181,  2186,  2187,  2191,  2192,  2193,  2194,  2195,  2196,  2197,
    2198,  2199,  2200,  2201,  2202,  2203,  2204,  2205,  2206,  2207,
    2208,  2209,  2210,  2211,  2212,  2216,  2217,  2218,  2219,  2220,
    2221,  2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,
    2231,  2232,  2233,  2234,  2235,  2241,  2243,  2245,  2247,  2249,
    2251,  2253,  2255,  2257,  2259,  2264,  2265,  2269,  2275,  2281,
    2288,  2298,  2299,  2300,  2301,  2305,  2306,  2307,  2309,  2310,
    2311,  2313,  2314,  2315,  2319,  2323,  2331,  2340,  2349,  2350,
    2352,  2353,  2357,  2364,  2371,  2374,  2387,  2401,  2404,  2406,
    2408,  2413,  2414,  2418,  2419,  2420,  2421,  2422,  2423,  2424,
    2425,  2429,  2430,  2431,  2432,  2433,  2434,  2435,  2436,  2437,
    2438,  2442,  2443,  2444,  2445,  2446,  2447,  2448,  2449,  2450,
    2451,  2455,  2456,  2457,  2458,  2459,  2460,  2461,  2462,  2463,
    2464,  2465,  2466,  2470,  2471,  2472,  2473,  2474,  2475,  2476,
    2477,  2478,  2479,  2483,  2484,  2488,  2489,  2490,  2491,  2492,
    2493,  2494,  2495,  2496,  2498,  2500,  2518,  2536,  2537,  2541,
    2542,  2543,  2544,  2545,  2546,  2547,  2548,  2549,  2567,  2584,
    2585,  2586,  2587,  2588,  2589,  2590,  2591,  2592,  2593,  2594,
    2595,  2596,  2614,  2631,  2632,  2633,  2634,  2635,  2636,  2637,
    2638,  2639,  2640,  2641,  2642,  2643,  2661,  2678,  2679,  2683,
    2684,  2685,  2686,  2687,  2691,  2692,  2699,  2701,  2710,  2719,
    2728,  2737,  2738,  2739,  2740,  2744,  2745,  2746,  2747,  2748,
    2749,  2750,  2751,  2752,  2756,  2760,  2761,  2762,  2763,  2764,
    2769,  2778,  2787,  2796,  2810,  2811,  2816,  2820,  2821,  2822,
    2823,  2824,  2829,  2838,  2847,  2856,  2870,  2871,  2920,  2921,
    2922,  2923,  2935,  2936,  2937,  2942,  2943,  2944,  2945,  2946,
    2950,  2951,  2955,  2956,  2957,  2961,  2962,  2966,  2967,  2968,
    2969,  2970,  2971,  2972,  2973,  2974,  2975,  2976,  2977,  2978,
    2979,  2980,  2981,  2985,  2986,  2987,  2988,  2989,  2990,  2991,
    2992,  2996,  2997,  2998,  2999,  3003,  3004,  3005,  3006,  3007,
    3011,  3012,  3013,  3014,  3015,  3019,  3020,  3022,  3024,  3026,
    3031,  3032,  3034,  3036,  3041,  3042,  3043,  3044,  3048,  3049,
    3050,  3051,  3055,  3056,  3057,  3058,  3062,  3063,  3064,  3065,
    3069,  3070,  3071,  3072,  3076,  3077,  3078,  3094,  3095,  3096,
    3097,  3110,  3126,  3127,  3132,  3133,  3137,  3138,  3139,  3140,
    3143,  3144,  3148,  3149,  3150,  3154,  3158,  3162,  3163,  3164,
    3165,  3166,  3175,  3184,  3185,  3186,  3187,  3191,  3192,  3196,
    3197,  3202,  3203,  3204,  3205,  3206,  3207,  3226,  3227,  3231,
    3232,  3233,  3234,  3235,  3236,  3238,  3239,  3240,  3241,  3245,
    3246,  3247,  3248,  3249,  3251,  3252,  3253,  3257,  3258,  3259,
    3260,  3261,  3262,  3266,  3267,  3268,  3273,  3274,  3275,  3276,
    3277,  3278,  3279,  3280,  3281,  3282,  3283,  3284,  3285,  3289,
    3290,  3291,  3292,  3293,  3294,  3295,  3299,  3300,  3304,  3305,
    3306,  3310,  3311,  3312,  3313,  3315,  3316,  3317,  3319,  3320,
    3321,  3322,  3324,  3325,  3326,  3330,  3331,  3332,  3333,  3334,
    3338,  3339,  3340,  3341,  3342,  3343,  3344,  3348,  3349,  3350,
    3354,  3355,  3359,  3360,  3361,  3362,  3366,  3367,  3368,  3370,
    3371,  3372,  3376,  3380,  3381,  3383,  3384,  3385,  3389,  3390,
    3391,  3392,  3396,  3397,  3401,  3402,  3403,  3407,  3408,  3409,
    3410,  3411,  3412,  3413,  3417,  3418,  3419,  3420,  3424,  3425,
    3426,  3427,  3431,  3435,  3439,  3441,  3444,  3450,  3451,  3452,
    3456,  3457,  3458,  3459,  3460,  3461,  3465,  3466,  3470,  3471,
    3472,  3474,  3475,  3477,  3478,  3479,  3480,  3481,  3483,  3484,
    3488,  3489,  3490,  3491,  3495,  3496,  3497,  3498,  3500,  3501,
    3502,  3503,  3504,  3505,  3506,  3509,  3513,  3514,  3518,  3519,
    3523,  3524,  3525,  3526,  3527,  3528,  3529,  3530,  3534,  3535,
    3536,  3537,  3543,  3544,  3546,  3547,  3550,  3551,  3554,  3555,
    3556,  3557,  3558,  3559,  3563,  3564,  3576,  3577,  3580,  3583,
    3585,  3586,  3587,  3597,  3599,  3600,  3602,  3603,  3604,  3605,
    3615,  3616,  3617,  3618,  3619,  3620,  3624,  3625,  3633,  3635,
    3636,  3638,  3640,  3644,  3645,  3646,  3647,  3648,  3652,  3653,
    3654,  3656,  3661,  3662,  3663,  3667,  3668,  3669,  3673,  3677,
    3678,  3679,  3683,  3684,  3688,  3689,  3693,  3694,  3695,  3696,
    3700,  3704,  3708,  3712
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "LONG", "SIGNED", "UNSIGNED", "FLOAT",
  "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST", "STRUCT", "UNION",
  "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH", "WHILE", "DO",
  "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX", "ELSE", "CLASS",
  "THISCLASS", "CLASS_NAME", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "'*'",
  "'<'", "'>'", "'('", "')'", "'~'", "';'", "'='", "','", "'}'", "'{'",
  "'.'", "':'", "'$'", "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'",
  "'%'", "'^'", "'|'", "'?'", "$accept", "guess_type", "type",
  "base_strict_type", "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "simple_postfix_expression", "argument_expression_list",
  "argument_expression_list_error", "common_unary_expression",
  "unary_expression", "simple_unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "simple_postfix_expression_error", "common_unary_expression_error",
  "unary_expression_error", "simple_unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    42,    60,    62,    40,    41,   126,    59,    61,
      44,   125,   123,    46,    58,    36,    91,    93,    38,    43,
      45,    33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   137,   138,   138,   139,   139,   140,   141,   142,   142,
     142,   143,   143,   144,   145,   146,   146,   147,   147,   148,
     148,   149,   149,   149,   149,   149,   149,   150,   150,   150,
     150,   150,   151,   151,   152,   153,   154,   154,   154,   155,
     155,   156,   156,   156,   157,   157,   157,   158,   158,   158,
     158,   158,   158,   159,   159,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   161,   161,   161,   161,   162,   162,
     162,   162,   162,   162,   162,   163,   163,   164,   164,   164,
     164,   164,   165,   165,   166,   166,   166,   166,   166,   167,
     167,   167,   168,   168,   169,   169,   169,   169,   169,   169,
     169,   169,   169,   169,   170,   170,   171,   171,   171,   171,
     171,   172,   173,   173,   173,   174,   174,   174,   175,   175,
     175,   175,   176,   176,   176,   176,   176,   177,   177,   177,
     177,   177,   177,   178,   179,   179,   179,   179,   179,   180,
     180,   180,   181,   182,   182,   183,   183,   184,   184,   185,
     186,   186,   187,   187,   187,   187,   188,   188,   188,   188,
     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   189,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   191,   191,   191,   192,   192,
     192,   192,   192,   193,   193,   193,   194,   195,   195,   195,
     195,   195,   195,   195,   195,   196,   197,   197,   198,   199,
     199,   200,   200,   200,   201,   201,   202,   202,   202,   202,
     202,   202,   202,   202,   202,   203,   203,   204,   205,   205,
     205,   205,   205,   205,   205,   205,   206,   206,   206,   206,
     206,   206,   207,   208,   208,   208,   208,   208,   208,   209,
     210,   210,   211,   211,   211,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     213,   214,   215,   215,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     218,   218,   218,   218,   219,   219,   219,   219,   219,   220,
     220,   220,   220,   220,   220,   220,   220,   220,   220,   220,
     220,   221,   221,   222,   222,   223,   223,   223,   223,   223,
     223,   223,   223,   224,   224,   225,   225,   225,   225,   225,
     225,   225,   226,   226,   226,   226,   226,   227,   227,   227,
     227,   227,   228,   229,   229,   229,   229,   229,   229,   229,
     229,   229,   230,   230,   230,   230,   230,   230,   230,   230,
     230,   231,   231,   231,   231,   231,   232,   232,   232,   232,
     232,   233,   233,   233,   233,   233,   234,   234,   234,   235,
     235,   235,   236,   236,   236,   236,   236,   236,   236,   236,
     236,   236,   236,   236,   236,   236,   236,   236,   236,   237,
     237,   237,   237,   237,   237,   237,   237,   237,   238,   238,
     238,   238,   238,   238,   238,   238,   238,   238,   238,   239,
     239,   239,   239,   240,   240,   240,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   242,   242,   242,
     242,   242,   242,   242,   242,   242,   242,   243,   243,   243,
     243,   243,   243,   243,   243,   243,   243,   243,   243,   244,
     244,   245,   245,   246,   246,   247,   247,   247,   247,   247,
     247,   247,   248,   248,   248,   248,   248,   249,   249,   249,
     249,   249,   250,   250,   250,   250,   250,   250,   250,   250,
     250,   251,   251,   251,   251,   251,   251,   251,   251,   251,
     252,   252,   252,   252,   252,   253,   253,   253,   253,   253,
     254,   254,   254,   254,   254,   255,   255,   255,   256,   256,
     256,   257,   257,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
     258,   258,   258,   258,   258,   259,   259,   259,   259,   259,
     259,   259,   260,   260,   260,   260,   261,   262,   263,   263,
     263,   263,   263,   264,   264,   264,   264,   264,   265,   265,
     265,   266,   266,   266,   267,   268,   268,   269,   269,   269,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   271,   271,   272,   272,   272,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   274,   274,   275,   275,   276,   277,   277,
     277,   278,   278,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   281,   281,   281,   281,   281,
     281,   281,   281,   281,   281,   282,   282,   283,   283,   283,
     283,   284,   284,   284,   284,   285,   285,   285,   285,   285,
     285,   285,   285,   285,   286,   287,   287,   288,   289,   289,
     289,   289,   290,   290,   290,   290,   290,   290,   290,   290,
     290,   291,   291,   292,   292,   292,   292,   292,   292,   292,
     292,   293,   293,   293,   293,   293,   293,   293,   293,   293,
     293,   294,   294,   294,   294,   294,   294,   294,   294,   294,
     294,   295,   295,   295,   295,   295,   295,   295,   295,   295,
     295,   295,   295,   296,   296,   296,   296,   296,   296,   296,
     296,   296,   296,   297,   297,   298,   298,   298,   298,   298,
     298,   298,   298,   298,   298,   298,   298,   299,   299,   300,
     300,   300,   300,   300,   300,   300,   300,   300,   300,   301,
     301,   301,   301,   301,   301,   301,   301,   301,   301,   301,
     301,   301,   301,   302,   302,   302,   302,   302,   302,   302,
     302,   302,   302,   302,   302,   302,   302,   303,   303,   304,
     304,   304,   304,   304,   305,   305,   305,   305,   305,   305,
     305,   305,   305,   305,   305,   306,   306,   306,   306,   306,
     306,   306,   306,   306,   307,   308,   308,   308,   308,   308,
     309,   309,   309,   309,   310,   310,   311,   312,   312,   312,
     312,   312,   313,   313,   313,   313,   314,   314,   315,   315,
     315,   315,   316,   316,   316,   317,   317,   317,   317,   317,
     318,   318,   319,   319,   319,   320,   320,   321,   321,   321,
     321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
     321,   321,   321,   322,   322,   322,   322,   322,   322,   322,
     322,   323,   323,   323,   323,   324,   324,   324,   324,   324,
     325,   325,   325,   325,   325,   326,   326,   326,   326,   326,
     327,   327,   327,   327,   328,   328,   328,   328,   329,   329,
     329,   329,   330,   330,   330,   330,   331,   331,   331,   331,
     332,   332,   332,   332,   333,   333,   333,   334,   334,   334,
     334,   334,   335,   335,   336,   336,   337,   337,   337,   337,
     337,   337,   338,   338,   338,   339,   339,   340,   340,   340,
     340,   340,   340,   341,   341,   341,   341,   342,   342,   343,
     343,   344,   344,   344,   344,   344,   344,   345,   345,   346,
     346,   346,   346,   346,   346,   346,   346,   346,   346,   347,
     347,   347,   347,   347,   347,   347,   347,   348,   348,   348,
     348,   348,   348,   349,   349,   349,   350,   350,   350,   350,
     350,   350,   350,   350,   350,   350,   350,   350,   350,   351,
     351,   351,   351,   351,   351,   351,   352,   352,   353,   353,
     353,   354,   354,   354,   354,   354,   354,   354,   354,   354,
     354,   354,   354,   354,   354,   355,   355,   355,   355,   355,
     356,   356,   356,   356,   356,   356,   356,   357,   357,   357,
     358,   358,   359,   359,   359,   359,   360,   360,   360,   360,
     360,   360,   361,   362,   362,   362,   362,   362,   363,   363,
     363,   363,   364,   364,   365,   365,   365,   366,   366,   366,
     366,   366,   366,   366,   367,   367,   367,   367,   368,   368,
     368,   368,   369,   370,   371,   371,   371,   372,   372,   372,
     373,   373,   373,   373,   373,   373,   374,   374,   375,   375,
     375,   375,   375,   375,   375,   375,   375,   375,   375,   375,
     376,   376,   376,   376,   376,   376,   376,   376,   376,   376,
     376,   376,   376,   376,   376,   376,   376,   376,   376,   376,
     377,   377,   377,   377,   377,   377,   377,   377,   378,   378,
     378,   378,   379,   379,   379,   379,   379,   379,   380,   380,
     380,   380,   380,   380,   381,   381,   382,   382,   382,   382,
     382,   382,   382,   382,   382,   382,   382,   382,   382,   382,
     382,   382,   382,   382,   382,   382,   383,   383,   383,   383,
     383,   383,   383,   384,   384,   384,   384,   384,   385,   385,
     385,   385,   386,   386,   386,   387,   387,   387,   388,   389,
     389,   389,   390,   390,   391,   391,   392,   392,   392,   392,
     393,   394,   395,   396
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     2,
       1,     2,     2,     2,     2,     2,     2,     1,     1,     3,
       1,     3,     3,     1,     1,     3,     3,     1,     3,     3,
       3,     3,     1,     2,     2,     1,     1,     2,     2,     2,
       2,     1,     2,     2,     1,     1,     2,     2,     1,     2,
       2,     2,     2,     1,     2,     2,     3,     4,     5,     4,
       3,     4,     2,     3,     4,     5,     4,     3,     4,     5,
       5,     4,     2,     3,     3,     3,     3,     2,     4,     3,
       3,     2,     4,     3,     2,     3,     2,     3,     2,     1,
       2,     3,     3,     3,     2,     1,     3,     3,     1,     3,
       3,     2,     4,     5,     3,     4,     3,     1,     3,     3,
       3,     2,     3,     2,     4,     5,     3,     4,     3,     1,
       3,     3,     2,     1,     2,     2,     2,     1,     2,     5,
       7,     9,     6,     8,     4,     6,     1,     2,     3,     4,
       2,     2,     1,     1,     2,     2,     1,     1,     1,     1,
       7,     1,     2,     4,     1,     1,     2,     3,     2,     2,
       2,     3,     1,     2,     2,     2,     1,     1,     1,     2,
       2,     2,     3,     3,     1,     1,     2,     2,     1,     2,
       2,     2,     2,     1,     2,     1,     1,     2,     4,     4,
       6,     2,     4,     4,     6,     1,     1,     3,     1,     2,
       4,     1,     1,     1,     1,     3,     1,     1,     1,     3,
       3,     3,     3,     3,     3,     1,     3,     1,     2,     2,
       3,     3,     5,     5,     6,     6,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       1,     3,     1,     2,     4,     1,     1,     4,     4,     5,
       8,     1,     1,     2,     6,     6,     5,     5,     6,     6,
       5,     5,     7,     7,     6,     6,     7,     7,     6,     6,
       4,     5,     4,     6,     4,     1,     1,     1,     1,     3,
       1,     2,     2,     2,     1,     4,     4,     3,     4,     4,
       3,     3,     2,     2,     4,     4,     3,     4,     3,     3,
       2,     2,     1,     4,     4,     3,     4,     4,     3,     3,
       2,     2,     4,     4,     3,     4,     3,     3,     2,     2,
       1,     1,     3,     3,     1,     1,     3,     3,     2,     2,
       2,     2,     2,     4,     2,     4,     5,     5,     4,     2,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     2,     1,     2,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     1,
       3,     3,     1,     5,     5,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     2,     1,     3,     3,     1,     1,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     1,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     2,
       2,     3,     2,     5,     6,     6,     3,     2,     5,     1,
       1,     1,     1,     1,     4,     1,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     2,     3,     3,     3,     3,     3,     3,
       3,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     3,     3,     3,     3,     1,     3,     3,     1,     3,
       3,     1,     5,     5,     5,     5,     4,     4,     4,     4,
       5,     5,     5,     5,     4,     4,     4,     4,     5,     5,
       5,     5,     5,     5,     5,     5,     3,     3,     2,     2,
       1,     3,     3,     3,     3,     1,     2,     3,     3,     2,
       2,     2,     1,     2,     3,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     1,     3,     2,     1,     2,     2,     2,     4,     4,
       3,     3,     4,     5,     4,     6,     6,     4,     5,     4,
       6,     6,     2,     2,     2,     5,     3,     5,     6,     5,
       7,     7,     8,     8,     7,     7,     3,     3,     3,     4,
       3,     5,     5,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       4,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     4,     4,     1,     1,     2,     2,     3,     5,
       2,     3,     5,     5,     5,     1,     3,     2,     2,     3,
       3,     2,     3,     3,     4,     3,     3,     3,     3,     3,
       3,     4,     4,     4,     1,     1,     4,     3,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     1,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     1,     1,     1,     2,     1,
       2,     1,     2,     1,     2,     4,     5,     1,     1,     1,
       2,     1,     2,     1,     2,     1,     2,     4,     5,     1,
       2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
       2,     4,     5,     1,     2,     1,     2,     1,     2,     1,
       2,     1,     2,     1,     2,     4,     5,     3,     3,     1,
       3,     3,     3,     3,     1,     1,     1,     4,     4,     4,
       3,     4,     4,     4,     3,     1,     3,     4,     3,     4,
       4,     4,     4,     3,     2,     3,     3,     3,     3,     2,
       2,     2,     3,     4,     1,     1,     2,     3,     3,     3,
       3,     2,     2,     2,     3,     4,     1,     1,     1,     1,
       1,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     1,     2,     3,     6,     5,     3,     4,     2,
       3,     3,     3,     3,     4,     4,     4,     2,     3,     3,
       3,     4,     4,     3,     4,     2,     3,     3,     3,     4,
       4,     1,     2,     2,     3,     1,     1,     2,     2,     3,
       1,     1,     2,     2,     3,     1,     2,     3,     2,     2,
       1,     2,     3,     2,     1,     2,     3,     3,     1,     2,
       3,     3,     1,     2,     3,     3,     1,     2,     3,     3,
       1,     2,     3,     3,     1,     3,     4,     1,     4,     2,
       5,     3,     1,     1,     1,     1,     1,     1,     3,     3,
       2,     2,     1,     1,     3,     2,     3,     1,     3,     3,
       3,     3,     3,     1,     2,     3,     3,     1,     2,     1,
       2,     2,     2,     2,     3,     1,     1,     3,     3,     1,
       3,     4,     3,     4,     3,     3,     4,     3,     4,     1,
       3,     3,     4,     3,     3,     3,     4,     1,     3,     3,
       3,     3,     3,     1,     3,     2,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     1,     2,     1,     1,     4,     1,     3,
       0,     6,     8,    10,    12,     8,    10,    10,     5,     7,
       9,    11,     7,     9,     9,     3,     4,     4,     3,     3,
       3,     4,     4,     3,     2,     3,     2,     1,     1,     1,
       1,     1,     2,     3,     2,     2,     2,     3,     3,     2,
       5,     6,     2,     2,     2,     2,     2,     2,     1,     2,
       2,     3,     1,     2,     1,     2,     2,     1,     2,     2,
       2,     2,     2,     2,     1,     1,     2,     2,     1,     1,
       2,     2,     1,     2,     2,     1,     2,     1,     2,     2,
       5,     5,     7,     7,     5,     5,     3,     2,     5,     4,
       4,     7,     6,     6,     5,     7,     6,     4,     7,     9,
       3,     4,     4,     5,     5,     6,     7,     6,     6,     5,
       5,     4,     3,     2,     1,     2,     4,     3,     5,     4,
       3,     2,     2,     2,     3,     3,     3,     3,     2,     2,
       1,     1,     4,     3,     4,     3,     3,     2,     4,     3,
       4,     3,     3,     2,     1,     2,     1,     1,     2,     1,
       2,     3,     3,     1,     2,     2,     2,     3,     4,     4,
       2,     2,     2,     2,     1,     2,     1,     2,     1,     2,
       2,     1,     2,     1,     2,     2,     2,     2,     1,     2,
       2,     3,     1,     1,     0,     6,     6,     5,     4,     1,
       2,     2,     1,     3,     3,     4,     1,     1,     2,     2,
       6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1294,   259,     6,   623,   624,   625,   626,   627,   684,   685,
     686,   687,   688,   690,   693,   694,   691,   692,   678,   679,
     683,   689,   771,   772,   634,  1139,   237,   702,   928,   929,
       0,     0,   932,  1137,  1138,   703,   704,   695,     0,     0,
       0,     0,     0,   933,   934,   971,     0,  1263,   819,   698,
       8,     4,     0,     0,     0,  1257,     0,  1276,   895,   813,
       0,   697,     0,   673,   675,   821,   823,   680,   815,   817,
     754,   696,     0,     0,   674,   676,     0,     0,     0,     0,
       0,   994,   677,     0,   930,     0,     0,     0,  1259,  1281,
    1256,  1278,  1288,  1283,     0,     0,     0,  1274,     0,  1271,
    1254,     0,     0,  1260,     0,     0,     0,     0,  1273,  1272,
       0,   681,   972,   677,   973,   886,   885,   895,   927,   884,
     914,   985,     0,   926,   990,     0,     0,     0,     0,     0,
       0,  1149,     0,   239,   238,     0,     0,   247,     0,   246,
       2,     3,     0,     5,     0,   636,   635,     0,     0,   654,
       0,     0,     0,     0,   758,     0,   738,   737,     0,  1152,
     625,   687,   688,  1146,   820,     8,  1258,  1277,   895,   814,
     822,   824,   816,   818,   994,  1002,   677,     0,     0,  1033,
       0,     0,     0,  1043,     0,     0,   886,     0,   885,     0,
       0,   904,     0,     0,   618,   619,   620,   621,   622,  1056,
     909,   807,   879,   801,     0,   811,     0,   803,   805,   754,
     809,     0,     0,  1055,     0,     0,  1059,  1069,     0,     0,
       0,     0,     0,     0,   995,     0,   706,   707,   708,   709,
     710,   712,   715,   716,   713,   714,   705,   711,   724,   717,
       0,     0,  1182,   720,     0,     0,   791,   719,   797,   793,
     795,   799,   718,     0,  1158,     0,     0,     0,     0,  1247,
    1253,   625,     0,  1270,  1265,  1279,     0,  1266,  1282,  1264,
    1280,  1275,  1287,  1290,     0,     0,     0,     0,     0,  1285,
    1286,  1289,  1284,     1,     0,  1261,  1262,  1255,     0,     0,
     477,   271,     0,     0,     0,     0,     0,     0,   371,   372,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     366,     0,   369,     0,     0,   365,   367,   368,   370,     0,
     266,     0,   265,   304,   272,   260,   476,     0,   361,   373,
       0,   375,   382,   387,   393,     0,   402,   411,   416,   421,
     426,   429,   432,   449,     0,   510,   509,   513,   515,   522,
     527,   532,   541,   550,   555,   560,   565,   568,   571,     0,
     262,   295,   296,   297,   298,     0,     0,     0,     0,     0,
     682,   974,     0,   916,     0,   921,     0,     0,     0,     0,
       0,     0,     0,   927,   986,   991,     0,   896,   988,   898,
     993,   989,   717,   720,   206,   228,   227,   226,   235,     0,
     265,   373,   432,   616,   513,     0,   218,   203,   251,     0,
       0,   250,   257,     0,     0,  1140,  1141,   695,     0,   167,
       0,   168,   169,     0,     0,     0,     0,     0,   171,   248,
       4,     0,     0,     0,     0,    28,    30,   162,   174,   187,
       0,   186,     0,   115,   118,     0,   194,   127,     0,   163,
     139,     0,   166,   182,   195,   198,     0,     0,   265,     0,
       0,   175,     0,   998,   677,     0,    12,    18,     0,   826,
     825,   833,   827,     0,   829,   831,   754,   838,   837,   252,
     258,   249,     0,     0,   241,   240,   667,   628,   631,   666,
     670,   656,     0,     0,     0,     0,   221,   222,   223,   224,
       0,   216,   767,   760,     0,     0,   757,   764,   759,     0,
       0,   770,   761,     0,     0,   740,   739,     0,     0,     0,
       0,     0,   995,  1003,     0,  1035,     0,     0,  1243,  1249,
       0,  1245,  1251,  1044,  1147,     0,     0,     0,  1148,   903,
       0,   265,   617,     0,     0,     0,     0,   636,   635,   637,
       0,   741,     0,     0,   687,     0,     0,  1053,   808,     8,
     895,   802,   812,   804,   806,   810,   927,   884,   677,   976,
     975,     0,     0,     0,   908,     0,     0,   907,     0,     0,
       0,  1085,     0,   905,   906,   996,     0,   997,     0,     0,
    1156,  1144,  1155,    75,  1153,   709,   710,  1142,   895,   792,
     798,   794,   796,   800,   677,     0,  1157,  1154,  1145,     0,
    1159,     0,  1246,  1252,  1160,     0,     0,     0,     0,     0,
       0,     0,     0,  1241,     0,     0,     0,     0,     0,     0,
     156,  1089,  1090,     0,     0,     0,   265,     0,   373,     0,
       0,   513,   600,   605,     0,  1087,  1164,  1167,  1095,  1086,
    1099,     0,     0,     0,     0,  1186,  1184,  1088,  1101,     0,
    1102,  1093,  1100,     0,  1103,  1183,     0,     0,  1267,   895,
       0,     0,     0,  1277,     0,   884,  1002,   677,     0,     0,
       0,     0,  1253,  1291,     0,     0,     0,   931,   487,     0,
       0,   322,     0,   363,   354,   512,   511,   502,     0,   349,
     497,   350,   498,     0,   873,   863,   871,   865,   867,   869,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   359,   507,   273,     0,     0,     0,   777,   773,
     775,   779,  1047,     0,   263,     0,   300,     0,   341,     0,
     340,     0,   479,    92,     0,   478,     0,   312,   313,     0,
       0,     0,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   458,     0,     0,   352,   500,   351,   499,     0,
       0,     0,     0,     0,     0,     0,   394,   533,     0,     0,
     392,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   699,     0,   320,   321,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   700,
     701,     0,     0,     0,  1306,  1307,     0,     0,     0,   890,
       0,     0,     0,   894,     0,     0,     0,   920,   919,   917,
     918,   927,   986,   991,   897,   899,  1013,     0,    10,     9,
       0,     0,     0,     0,     0,   677,   975,   204,     0,   206,
       0,   265,     0,     0,   845,   839,   841,   843,     0,     0,
       0,    16,    20,     0,   184,   183,   185,     0,     0,     0,
       0,   366,     0,   265,     0,    26,    21,    27,    24,     0,
      25,    23,    22,    29,    31,   189,    82,   190,   121,   161,
       0,     0,     0,     0,   131,     0,     0,   133,     0,     0,
     142,   160,   199,   196,   201,   200,   197,   202,   114,     0,
       0,     0,   895,   735,   176,  1010,     0,  1006,   677,     0,
      11,    17,   725,   911,  1055,     0,     0,     0,   999,     0,
       0,   172,   164,   191,   180,     0,   179,     0,   165,   895,
     178,     0,   636,   635,   834,   828,   830,   832,     0,     0,
       0,   633,   669,     0,     0,     7,   211,   207,   219,   756,
       0,     0,  1032,  1039,  1040,  1041,    61,    52,    91,    38,
      37,    56,    68,    44,    47,     0,    73,    55,     0,     0,
       0,  1023,  1025,     0,  1022,  1024,     0,    40,    43,   927,
     996,   987,  1004,   992,  1013,  1005,     0,  1014,  1017,  1034,
    1036,  1242,  1248,  1244,  1250,  1038,  1045,  1042,  1046,   902,
     900,   901,  1082,  1064,  1073,   641,   640,     0,     0,   477,
     742,     0,     0,   477,   743,     0,     0,     0,   957,   895,
       0,     0,   677,   975,     0,     0,     0,   949,     0,     0,
       0,     0,     0,  1054,   978,     0,     0,   977,  1058,  1057,
       0,   878,  1081,   881,  1067,  1075,     0,   877,  1080,   880,
    1065,  1074,     0,  1084,  1078,   882,  1060,  1070,     0,  1079,
     883,  1062,  1071,   935,   936,   939,   938,   937,     0,   940,
     942,     0,     0,     0,     0,    76,     0,  1143,  1161,     0,
       0,     0,     0,     0,     0,  1225,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   265,     0,  1087,  1223,
    1092,  1094,     0,     0,  1231,  1232,  1233,     0,  1239,     0,
       0,     0,     0,     0,     0,   157,   143,  1098,  1097,  1096,
       0,     0,     0,   606,     0,  1091,     0,     0,     0,     0,
     472,     0,     0,   477,     0,     0,     0,     0,  1165,  1168,
    1170,     0,  1166,  1169,  1171,     0,  1197,  1104,  1268,  1269,
     239,   238,     0,     0,     0,  1003,     0,     0,  1249,     0,
    1251,  1252,     0,  1150,     0,   785,   265,     0,   501,   787,
     781,   783,   789,  1049,     0,   489,   488,     0,   330,   331,
       0,     0,     0,     0,   338,   339,     0,     0,     0,     0,
       0,     0,     0,     0,   874,   864,   872,   866,   868,   870,
     677,   981,   980,     0,   859,   849,   857,   851,   853,   855,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   506,     0,   261,     0,   778,   774,
     776,   780,  1048,     0,     0,   477,     0,     0,     0,   104,
       0,   299,   477,     0,     0,    93,   477,     0,     0,   480,
     311,   307,   345,   482,   483,   344,   484,   310,     0,     0,
     454,   450,   301,   376,   516,   377,   517,   378,   518,   383,
     523,   384,   524,   388,   528,   389,   529,   396,   535,   397,
     536,   395,   534,   407,   546,   403,   542,   408,   547,   404,
     543,   414,   553,   412,   551,   419,   558,   417,   556,   424,
     563,   422,   561,   427,   566,   430,   569,   596,     0,   612,
       0,     0,     0,     0,   456,   452,   481,   319,   316,     0,
     485,   486,   318,     0,     0,   455,   451,   379,   519,   380,
     520,   381,   521,   385,   525,   386,   526,   390,   530,   391,
     531,   400,   539,   401,   540,   398,   537,   399,   538,   409,
     548,   405,   544,   410,   549,   406,   545,   415,   554,   413,
     552,   420,   559,   418,   557,   425,   564,   423,   562,   428,
     567,   431,   570,   597,     0,     0,     0,     0,   457,   453,
       0,     0,  1299,  1302,     0,     0,  1297,  1308,  1309,     0,
       0,   889,   887,   888,   893,   891,   892,   206,   234,   233,
     232,   265,   236,   231,   230,   229,     0,     0,     0,     0,
       0,     0,     0,     0,   677,   978,   243,     0,   242,   126,
       0,   124,   846,   840,   842,   844,     0,   677,     0,    15,
      19,     0,   181,  1010,   677,     0,   138,     0,   136,   846,
       0,   265,   677,     0,    83,   116,   119,   117,   120,   128,
     129,   130,   132,   140,   141,   113,   111,   112,    13,   727,
     730,     0,     0,   923,  1055,     0,     0,     0,  1011,  1007,
       0,     0,   726,   895,   912,  1000,  1001,   895,   192,   193,
     177,     0,     0,     0,     0,   629,   630,   632,     0,     0,
     659,   655,     0,     0,     0,     0,     0,     0,   225,   217,
     215,     0,    35,    36,    74,    53,     0,    54,     0,    63,
      60,    71,    66,    72,    59,    89,    38,    69,    62,    90,
      58,    70,    67,     0,    57,     0,   709,    32,    34,    33,
    1026,  1027,     0,   649,   639,     0,   644,   638,     0,   477,
     744,     0,     0,     0,   975,     0,   947,   958,   959,   952,
     950,   951,     0,   979,   960,     0,     0,   953,     0,     0,
       0,  1068,  1076,  1055,  1066,  1061,  1063,  1072,   946,     0,
       0,     0,   943,   721,   722,   723,   477,     0,     0,  1128,
    1133,     0,     0,  1129,  1135,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1222,   477,     0,  1187,   265,     0,
       0,     0,  1230,  1236,  1237,  1234,  1235,     0,     0,     0,
       0,   144,  1125,  1130,   158,   603,   601,     0,     0,     0,
     470,   607,   604,   602,   471,   608,     0,  1004,  1248,  1250,
    1151,     0,     0,   353,   786,   788,   782,   784,   790,  1050,
       0,   490,   329,   325,   492,   493,   494,   328,     0,     0,
     491,   337,   334,     0,   495,   496,   336,     0,     0,   292,
     290,     0,     0,   965,   677,     0,     0,     0,     0,     0,
       0,   983,     0,   982,     0,     0,     0,   860,   850,   858,
     852,   854,   856,     0,   268,     0,   267,   294,     0,     0,
       0,     0,     0,     0,  1313,     0,     0,     0,   358,     0,
     374,   514,   264,   107,   105,   343,   342,    98,   102,   308,
       0,   309,   305,   306,   613,     0,     0,     0,     0,     0,
       0,   317,   314,   315,     0,     0,     0,     0,  1301,  1300,
    1304,     0,     0,     0,  1296,  1295,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   975,   217,     0,     0,   122,
     125,     0,     0,     0,     0,     0,  1011,     0,   134,   137,
       0,    14,   477,     0,     0,   736,     0,   895,   924,  1012,
    1008,  1009,   728,   731,   913,   173,   835,     0,   245,   244,
       0,   658,     0,   212,   205,   213,   208,   209,   220,     0,
      50,    45,    48,    51,    46,    49,    36,    42,    39,    41,
       0,     0,  1030,  1031,   648,     0,   643,     0,   978,   977,
     948,   961,   962,   955,   954,   956,  1052,  1051,     0,   945,
     944,    78,  1126,  1131,  1127,  1132,     0,     0,     0,     0,
     477,  1200,     0,     0,  1199,  1229,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1207,     0,  1188,
     477,  1189,   477,     0,     0,     0,  1110,   931,  1110,     0,
       0,   154,     0,     0,     0,   159,     0,     0,   503,   326,
     327,   323,   324,   335,   332,   333,   291,   875,     0,   980,
       0,   963,   966,   967,   276,   277,     0,   984,   968,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   269,
     280,   281,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   508,   347,   346,   474,   614,   441,   588,   433,   572,
     445,   592,   437,   580,   475,   615,   442,   589,   434,   573,
     446,   593,   438,   581,   443,   590,   435,   574,   447,   594,
     439,   582,   444,   591,   436,   575,   448,   595,   440,   583,
    1303,  1305,  1298,   847,     0,   123,   149,  1012,     0,   135,
      85,   925,     0,     0,   836,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1028,  1029,  1018,     0,     0,     0,
       0,   941,  1190,  1191,  1194,  1195,  1198,  1228,     0,     0,
       0,     0,     0,     0,     0,  1204,   477,     0,     0,     0,
    1108,     0,  1106,  1118,     0,  1110,     0,  1110,     0,     0,
       0,     0,   505,   504,   982,   964,   876,   969,   970,   274,
     275,   861,   284,   285,     0,     0,     0,     0,   278,   279,
     288,   289,     0,     0,   293,  1311,  1312,  1310,   848,     0,
     729,   732,   734,   733,     0,     0,   214,   210,     0,  1015,
    1020,     0,     0,     0,     0,     0,     0,     0,  1218,  1202,
       0,     0,  1203,  1215,     0,  1206,  1217,     0,     0,  1110,
       0,  1110,     0,  1110,     0,  1111,     0,     0,     0,   147,
       0,   152,     0,   155,     0,   862,   282,   283,     0,   286,
     287,   170,  1016,  1192,  1193,     0,     0,  1201,  1208,     0,
    1205,  1216,  1122,  1109,     0,     0,     0,  1119,     0,     0,
    1110,  1110,     0,  1110,   146,   145,   150,   148,     0,     0,
     374,   514,   270,     0,     0,  1107,     0,     0,  1110,  1115,
       0,     0,  1112,     0,     0,   153,  1209,  1123,  1124,  1120,
       0,     0,     0,     0,  1110,   151,     0,  1116,  1117,  1113,
       0,  1121,     0,  1114
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   201,    49,    50,   966,   319,   431,   432,   433,   434,
     435,   436,   437,   438,   979,   980,   981,   982,   983,   984,
     985,   986,   987,   988,   989,   990,   244,   245,   439,   440,
      52,   320,   321,   736,   764,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,  2108,  2109,  2110,   453,   633,
     634,   635,   454,   455,   456,   457,   394,   395,   496,   396,
     497,   397,   498,   499,   860,   398,   399,    53,    54,    55,
      56,    57,   322,   323,   324,   325,   991,   992,   326,   327,
     692,   739,  1274,   328,   638,   694,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     725,   818,   640,  1331,   345,   695,   346,   641,   697,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     642,   643,  1117,  1333,   406,   544,   203,    59,   488,   489,
     204,    61,   205,   206,    62,    63,    64,    65,    66,    67,
     207,   112,   208,   250,   923,   924,   209,   210,   211,    71,
      72,    73,    74,    75,   212,   732,  1193,   407,   461,    77,
      78,   478,   479,   869,  1230,   710,  1040,  1041,   118,    79,
     462,    81,   463,   121,   122,   123,   927,   124,   113,    83,
    1089,  1090,  1091,    84,   569,  1221,   465,   571,  1223,   127,
     179,   466,   467,   181,   931,   129,  1009,  1551,   997,   998,
    1552,   182,   183,   184,   185,   733,  1194,   216,   217,   218,
     219,   220,   221,   646,   647,  2030,  2031,   648,   649,   650,
      87,   468,   254,    88,    89,   255,   256,   257,   653,   654,
     655,   656,   258,   657,   889,  1631,  1120,   660,   661,   662,
    1121,   664,    90,    91,   360,    92,    93,    94,    95,    96,
      97,   824,  1403,  1404,   825,   826,   361,   362,   363,   364
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1754
static const int yypact[] =
{
   36003, -1754, -1754, -1754, -1754,   536, -1754, -1754, -1754, -1754,
   -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754,
   -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754,
    1205,    40, -1754, -1754, -1754, -1754, -1754, -1754,   -41,   -10,
      31,   541,   159, -1754, -1754,  2174,  2357, -1754, -1754, -1754,
      36, -1754,    54,   541,  1180, -1754,    -3,   189,  1017, -1754,
      99, -1754,  1235, -1754,   208, -1754, -1754, -1754, -1754, -1754,
    1183, -1754,  1242,   175, -1754,   238,  1332, 35639,  2244,   863,
   36271, -1754,   265,   293, -1754,  1641, 38820, 34311, -1754, -1754,
   -1754, -1754, -1754, -1754, 36094, 35266,   459, -1754,    40, -1754,
   -1754,   159,   159,   507,   460,   159, 28012,   541, -1754, -1754,
     370, -1754,  2174, -1754, -1754, -1754,   408, -1754,  1053,  1276,
   -1754, -1754, 36360, -1754, -1754,  2357,  2177,  1262,  1822,  2316,
   22800, -1754,   514,   887,   546, 29079, 38283, -1754, 29198, -1754,
   -1754, -1754,   541, -1754,  1583,  1467,  1470,    90, 38283, -1754,
   38453, 29317, 38283, 29436, -1754, 29555, -1754, -1754,   541, -1754,
   -1754,   941,   567, -1754, -1754,  1072, -1754,   189,   660, -1754,
   -1754, -1754, -1754, -1754,  1146,  1845,   265,  2177,  1279,  2316,
   38820, 38820,   335, -1754,  1479,   570,   582,   567,   989,   265,
    1485, -1754, 26552,   603, -1754, -1754, -1754, -1754, -1754, -1754,
   -1754, -1754,   928, -1754,   348, -1754,   624, -1754, -1754,   626,
   -1754,   646,  1942, 33229,   542,   718, -1754, -1754,   751,   765,
     672,   675,   272,   695, -1754,   272, -1754, -1754, -1754, -1754,
   -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754,
     703,   747, -1754, -1754,   260,   144, -1754, -1754, -1754, -1754,
   -1754, -1754, -1754, 35821, -1754, 17798, 10704, 39009, 17930, -1754,
     770,   817,  1258, -1754, -1754,   189, 35730, -1754, -1754, -1754,
   -1754, -1754, -1754, -1754,   208,   238, 36805, 38820, 37069, -1754,
   -1754, -1754, -1754, -1754,   788,   507,   507, -1754, 28012,   138,
   -1754, -1754, 28085, 28158, 28158,   850, 38538, 28012, -1754, -1754,
     859,   877, 38538, 28012,   898,   911,   914,   934,   947, 28231,
   -1754, 23030, -1754,   159, 26625, -1754, -1754, -1754, -1754,   801,
   -1754,   158,   835, -1754, -1754, -1754, -1754, 12911, -1754,  2590,
   26625, -1754,   926,   490,  1405, 28012,  1064,  1539,   963,   973,
    1048,  1123,    34,  2590,  1030,   786, -1754,  2590, -1754,  1185,
    1492,  1632,  1114,  1679,  1025,  1057,  1079,  1189,    50,  2590,
     507, -1754, -1754, -1754, -1754,  1129,   249, 38113,  1102,  1133,
   -1754, -1754, 26698, -1754, 26771, -1754,   767,   836,  1144,  1158,
    2177,  1956,  2263,  1053, -1754, -1754,   705, -1754, -1754, -1754,
   -1754, -1754,   859,   801,  1176, -1754, -1754, -1754, -1754,   902,
    1220, -1754,    91, -1754, -1754,   168, -1754, 38721, -1754, 22915,
   38453, -1754,   346, 37858, 37157, -1754, -1754,   859,  1194, -1754,
     541, -1754, -1754,    40, 37333, 36981,  3053, 38368, -1754, -1754,
     801,   367,  1228,  1228,  1140, -1754,  1267, -1754, -1754, -1754,
     177,  1076,   199, -1754, -1754, 28476,  1255, -1754,  1317, -1754,
   -1754,   720, -1754, -1754, -1754,  1270, 28603, 28722,   886,   237,
     786, 34507, 36449, -1754,   265,  1641, -1754, -1754, 34409, -1754,
   -1754,  1283, -1754,   541, -1754, -1754, -1754,  2431, 38538, -1754,
     346, -1754, 28841, 28960,  1312,  1334, -1754,  1338, -1754,  1350,
   -1754, -1754,  1729,  1364,   846,    40, -1754, -1754, -1754, -1754,
    1018,   270,   791, -1754, 29674, 29793, -1754,   791, -1754, 29912,
   30031,   791, -1754, 30150, 30269, -1754, -1754,  2357,  2357,  2357,
   21097,   705,  1146,  1845,   705, -1754, 26844, 10704, -1754,   770,
   10704, -1754,   770, -1754, -1754,  2357,  2357,   705, -1754, -1754,
    1362,   172, -1754,  1372,  1379, 37943,  1613,  1396,  1404, -1754,
   30388, -1754, 30507,   483, -1754,  9426, 26917,  2357, -1754,  1087,
     928, -1754, -1754, -1754, -1754, -1754,  1053,  1410,   265,  1108,
     232,   400,  1554,  1411, -1754, 37597,  1421, -1754, 37684,  1427,
   37771,  1440, 38028, -1754, -1754, -1754,  1178, -1754, 28012,   541,
   -1754, -1754,  1445, -1754, -1754,   941,   567, -1754,  1455, -1754,
   -1754, -1754, -1754, -1754,   265,  1512,   570, -1754, -1754,  1451,
   -1754, 18062, -1754,   770, -1754,   281, 26990,  1457,  1473,  1478,
     292, 18194,  1495,    40,  1482,  1489, 18326,  2583,  1516,  1519,
      40, -1754, -1754,  1529,  1532,  1544,  1514, 16605,  2590, 13361,
   24070,  2590,  2590, -1754, 16742, 35912, -1754, -1754, -1754, -1754,
   -1754, 18458, 18590, 18722, 18854, -1754, -1754, -1754,   770, 18986,
   -1754, -1754, -1754, 19118, -1754, -1754,   159,   159,   507,   890,
     541,  1515,  1463, -1754,  1053,   863, -1754,   265,  2177, 38820,
   38820, 10704, -1754, -1754, 36893, 28012,  1549, -1754, -1754, 23161,
     204, -1754, 13591, -1754, -1754,   895, -1754, -1754, 27063, -1754,
   -1754, -1754, -1754, 38538,  1576, -1754, -1754, -1754, -1754, -1754,
   12591, 38538, 23292,    40, 34014, 38538, 28012,   159,   159,   159,
   28012, 23407, -1754, -1754, -1754, 13728, 13865, 14002, -1754, -1754,
   -1754, -1754, 12270,  1556,   126, 21228, -1754,   240, -1754,   497,
   -1754, 21359,  1587, -1754, 21490, -1754,  1650, -1754, -1754, 24143,
    1657, 28012, -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754,
   -1754, -1754, -1754, 26625,   276, -1754, -1754, -1754, -1754, 28012,
   28012, 28012, 28012, 28012, 28012, 28012,  1405,  1632, 28012, 28012,
   -1754, 28012, 26625, 26625, 26625, 26625, 26625, 28012, 28012, 14139,
   26625, -1754,  1674, -1754, -1754, 24216,  1675, 28012, 26625, 28012,
   28012, 28012, 28012, 28012, 28012, 28012, 28012, 28012, 28012, 28012,
   26625, 26625, 26625, 26625, 26625, 28012, 28012, 14276, 26625, -1754,
   -1754,   415,   928, 38368, -1754, -1754, 35357, 38113, 38113, -1754,
    1570,  1574,  1584, -1754,  1597,  1604,  1614, -1754, -1754, -1754,
   -1754,  1053, -1754, -1754, -1754, -1754,  1622, 22800, -1754, -1754,
   22800, 22800, 26625, 26625, 12132,   265,  1193, -1754,   376,   347,
    1055,   853,  1212,  1636,  1631, -1754, -1754, -1754,  2431, 33816,
   37245, -1754, -1754,    40, -1754, -1754, -1754, 34605,  1651,    40,
   33915,  1580, 23538,  1685, 37421, -1754, -1754,   770, -1754,   770,
   -1754, -1754, -1754,   770, -1754,  1656, -1754,   620, -1754, -1754,
    3513,  3513,  1228,  1228, -1754,  1228,   123, -1754,  1228,  1228,
   -1754, -1754,   753, -1754,  1270,   753, -1754,  1270,   777, 27136,
    2097, 28012,   912, -1754,  1661,  1053, 36538, -1754,   265,  2177,
   -1754, -1754,   940,   603, 33229, 28349,   615,   272, -1754,   272,
    2357, -1754, -1754, -1754, -1754,   298, -1754,   311, -1754,   886,
   34507, 22800, -1754, -1754,  1671, -1754, -1754, -1754, 38453, 38453,
   28012,    40, -1754, 32887,   103, -1754,  1046,  1085,  1680, -1754,
   38453,    40,  1446, -1754, -1754, -1754, -1754, -1754, -1754,  1228,
   -1754, -1754, -1754, -1754, -1754, 34702,  1562, -1754, 21621, 38915,
   21752, -1754, -1754, 13050, -1754, -1754, 37509, -1754, -1754,  1053,
    1146, -1754,  1845, -1754,  1053, -1754, 26844, -1754, -1754, -1754,
   -1754, -1754,   770, -1754,   770, -1754, -1754, -1754, -1754, -1754,
   -1754, -1754, -1754, -1754, -1754, -1754,  1350,   110,   136,  1673,
   -1754, 30626, 30745,  1681, -1754, 30864, 30983, 31102, -1754,   691,
     242,   314,   643,  1624,  1690,  1693,  1698, -1754,  1691,  1692,
    1696,   265,   705,  2316,   232, 36627, 27209,  1108, -1754, -1754,
   38198, -1754, -1754,   928, -1754, -1754, 38198, -1754, -1754,   928,
   -1754, -1754, 38198, -1754, -1754,   928, -1754, -1754, 38198, -1754,
     928, -1754, -1754, -1754, -1754, -1754, -1754, -1754,  1708,  1710,
   -1754,  2058,  1714,  1715,   325, -1754, 21883, -1754, -1754, 19250,
    1709,  1712, 19382, 28012, 28012, -1754, 27282, 27355,  1718,  1719,
    1728, 12707,  1730,    40, 24289,  2705,  1559, 24362, -1754,  1771,
   -1754, -1754, 24435,  1734, -1754, -1754, -1754,  1742,  1743, 24508,
   16874,   159,  1733, 28012, 28012,    40, -1754, -1754, -1754, -1754,
   23669,   852, 26625, -1754,  1346, -1754, 28012, 14413, 14550, 26625,
   -1754, 28012, 14687,  1451, 19514, 19646, 19778, 19910, -1754, -1754,
   -1754, 20042, -1754, -1754, -1754, 20174, -1754, -1754,   507,   507,
    1750,  1751, 33005, 33123,   705, -1754,   705, 10704, -1754, 10704,
   -1754, -1754,  1754, -1754,   721, -1754,   886,  1752, -1754, -1754,
   -1754, -1754, -1754, 12270,  1759,  1587, -1754,  1683, -1754, -1754,
   24581,  1703, 28012,  1706, -1754, -1754, 24654,  1711, 28012,  1766,
   38622, 22800, 36182, 28012,  1775, -1754, -1754, -1754, -1754, -1754,
     265,  1783,  1785,  1776,  1791, -1754, -1754, -1754, -1754, -1754,
   34113, 24727,  1790,  1793,  1794, 28012,  1786, 34212,  1795,   377,
     210,   224,  1797,  1798, -1754,  1806, -1754,    40, -1754, -1754,
   -1754, -1754, -1754, 28012,   159,   318, 34796, 22014,  1792, -1754,
   26625, -1754,   321, 34890, 22145, -1754,   322, 34984, 22276, -1754,
   -1754, -1754, -1754,  1297,  1809, -1754, -1754, -1754, 24800,  4985,
   -1754, -1754,  1792, -1754, -1754, -1754, -1754, -1754, -1754,   926,
    1185,   926,  1185,   490,  1492,   490,  1492,  1405,  1632,  1405,
    1632,  1405,  1632, -1754, -1754,  1064,  1114, -1754, -1754,  1064,
    1114, -1754, -1754,  1539,  1679, -1754, -1754,   963,  1025, -1754,
   -1754,   973,  1057,  1048,  1079,  1123,  1189, -1754,    85, -1754,
   24873,  1787,  5884,  1803, -1754, -1754, -1754, -1754, -1754,  1336,
   -1754, -1754, -1754, 24946,  6497, -1754, -1754, -1754, -1754, -1754,
   -1754, -1754, -1754,   926,  1185,   926,  1185,   490,  1492,   490,
    1492,  1405,  1632,  1405,  1632,  1405,  1632,  1405,  1632, -1754,
   -1754,  1064,  1114, -1754, -1754,  1064,  1114, -1754, -1754,  1539,
    1679, -1754, -1754,   963,  1025, -1754, -1754,   973,  1057,  1048,
    1079,  1123,  1189, -1754, 25019,  1805,  6741,  1811, -1754, -1754,
      40,    40, -1754, -1754,   313,  1004, -1754, -1754, -1754, 35451,
   35545, -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754,
   -1754,  1068, -1754, -1754, -1754, -1754, 25092,  1815,  7337,  1818,
   25165,  1823,  7630,  1825,  2743,  1193, -1754, 22800, -1754, -1754,
   22800, -1754,   808, -1754, -1754, -1754,   381,   265,  2177, -1754,
   -1754,   435,  1661,  1622,   265,  2177, -1754,  1814, -1754,  1011,
     485,   665,  2357,  1834, -1754, -1754, -1754, -1754, -1754, -1754,
   -1754, -1754, -1754, -1754, -1754,  2674, -1754, -1754, -1754, -1754,
   -1754, 22407,  1862,   603, 33229, 20966,   715,   705,  1053, -1754,
     705, 28012, -1754,   991, -1754, -1754, -1754,  1835,  1656,  1587,
    1661,  1213, 22800,  1224,  1229, -1754, -1754, -1754, 31221, 31340,
    1836, -1754,  2715, 38538, 38538, 38538, 38538, 28012, -1754, -1754,
   -1754, 27428, -1754,   770, -1754, -1754, 27501, -1754, 27574, -1754,
   -1754, -1754,  1599,  1562, -1754, -1754,  1228, -1754, -1754, -1754,
   -1754, -1754,  1599,  1562, -1754, 27647,  8646, -1754, -1754, -1754,
   -1754, -1754, 20306, -1754, -1754,   273, -1754, -1754,   285,  1831,
   -1754, 31459, 31578,   265,  1624,  1837, -1754, -1754, -1754, -1754,
   -1754, -1754,   705,  1108, -1754,  1841,  1842, -1754,  1840,  1844,
    1848, -1754, -1754, 33229, -1754, -1754, -1754, -1754, -1754, 28012,
    1852,  1070, -1754, -1754, -1754, -1754,   326, 35078, 22538, -1754,
   -1754, 23669, 23669, -1754, -1754, 25238, 17006, 25311, 25384, 23760,
   25457, 17138, 12707,  1854,  1856, 12707, 28012, 27720,  1905, 25530,
    1743,  8206,   159, 12707,  1849, 33621, 12707, -1754,  1618, 25603,
    8778, 25676, -1754, -1754, -1754, -1754, -1754,    67,   159,  1853,
    1353, -1754, -1754, -1754, -1754, -1754, -1754,  1866,  1867,    40,
   -1754, -1754, -1754, -1754, -1754, -1754, 38453, -1754, -1754, -1754,
   -1754,  1869,  1871, -1754, -1754, -1754, -1754, -1754, -1754, -1754,
   14824, -1754, -1754, -1754,  1385,  1872, -1754, -1754, 25749, 10353,
   -1754, -1754, -1754,  1391, -1754, -1754, -1754, 25822, 11250, -1754,
   -1754,  1875,  1257, -1754,  2338,  1877,  1878,  1886,  1876,  1879,
   22800,  1785, 36716,  1783, 28012, 22800, 28012,  1891, -1754, -1754,
   -1754, -1754, -1754,  1885, -1754, 27793, -1754, -1754,  1892,  1893,
   28012, 28012,  1896,  7071, -1754,    40,    40, 28012, -1754, 14961,
   -1754, -1754,   507, -1754, -1754, -1754, -1754, -1754, -1754, -1754,
   15098, -1754, -1754, -1754, -1754, 26625, 15235, 15372, 26625, 15509,
   15646, -1754, -1754, -1754, 15783, 15920, 16057, 16194, -1754, -1754,
   -1754,   415,  1887,   482, -1754, -1754, 26625, 26625, 26625, 26625,
   26625, 26625, 26625, 26625,   265,  1193,  2001,  1330, 22800, -1754,
   -1754,  1901,   705,   705,  1228,   705,  1622,  1907, -1754, -1754,
    1902, -1754,   333, 35172, 22669, -1754,   265,  1008, -1754,  1053,
   -1754, -1754,  1908,  1909, -1754, -1754, -1754,  1351, -1754, -1754,
   32887,  1916, 32887, -1754, -1754,  1917, -1754,  1921, -1754, 26844,
    1416, -1754, -1754,  1416, -1754, -1754, -1754,  1416, -1754, -1754,
   20438, 20570, -1754, -1754, -1754, 32887, -1754, 32887,   232,  1108,
   -1754, -1754, -1754, -1754, -1754, -1754, -1754,  2316, 25895, -1754,
   -1754, -1754, -1754, -1754, -1754, -1754, 12707,  7939, 12707,  7939,
   33330, -1754, 23669, 17270, -1754, -1754, 12707, 12707, 25968, 12707,
   26041, 12449,  1928, 11591, 26114,   176, 20702, -1754, 28012, -1754,
   33427, -1754, 33718, 12707, 13205, 27866,   159,  1932,   159,   179,
    1933, -1754,    40, 28012, 28012,    40, 16331, 16468, -1754, -1754,
   -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754,   265,  1785,
    1941, -1754, -1754, -1754, -1754, -1754,  1371,  1783, -1754,  1943,
    1944,  1935,  1936,  1380,  1938,  1946, 22800, 28012, 23030, -1754,
   -1754, -1754,  1949,  1950,  1952,  1953, 28012,  1954,  1967,  1968,
    1972, -1754, -1754, -1754, -1754, -1754, -1754, -1754, -1754,   168,
   -1754, -1754, -1754,   168, -1754, -1754, -1754, -1754, -1754,   168,
   -1754, -1754, -1754,   168, -1754, -1754, -1754,   168, -1754, -1754,
   -1754,   168, -1754, -1754, -1754,   168, -1754, -1754, -1754,   168,
   -1754, -1754, -1754, -1754,  1383, -1754, -1754,  1622, 26625, -1754,
   -1754, -1754, 28012, 28012, -1754, 31697, 31816, 32887, 31935, 32054,
   38538, 38538, 23851, 20834, -1754, -1754, -1754, 32173, 32292, 32411,
   32530, -1754,  2004,  2029, -1754, -1754, -1754, -1754, 12707, 28012,
   27939,  1932, 17402, 17534, 23924, -1754, 33524, 23669, 26187, 17666,
   -1754,  1126,   417, -1754,    41,   159,  1977,   159,   593,   499,
    1980,  1403, -1754, -1754,  1783, -1754, -1754, -1754, -1754, -1754,
   -1754, -1754, -1754, -1754,  1384,  1974,  1985,  1983, -1754, -1754,
   -1754, -1754,  1986,  1988, -1754, -1754, -1754, -1754, -1754,  1989,
   -1754, -1754, -1754, -1754, 32649, 32768, -1754, -1754, 26260, -1754,
   -1754, 12707, 12707, 26333, 23997, 12707, 26406, 12449,  1998, -1754,
   12707, 28012, -1754, -1754, 23669, -1754, -1754,  2003,   159,   159,
   28012,   159,  2005,   159,  1329, -1754,   185,  1228,   578, -1754,
     269, -1754,  1997, -1754,    40, -1754, -1754, -1754, 27428, -1754,
   -1754, -1754, -1754, -1754, -1754,  1998, 12707, -1754, -1754, 26479,
   -1754, -1754, -1754, -1754,  1408,  2008,  1417, -1754,  1343,  2009,
     159,   159,  2012,   159, -1754, -1754, -1754, -1754,   593,   590,
   -1754, -1754, -1754, 12707,  2021, -1754,  2022,  2023,   159, -1754,
    1418,  1447, -1754,  1348,   653, -1754, -1754, -1754, -1754, -1754,
    1458,  2024,  2025,  2026,   159, -1754,  2032, -1754, -1754, -1754,
    1459, -1754,  2033, -1754
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1754,  2990,   -26, 11733, -1754,  2051, -1754, -1754, -1754, -1754,
   -1754, -1754,  1684,  1689,  -930, -1754,  -933,  -950,   221,   244,
    -919,  -828,  -607, -1754,  -538,  -534, -1754, -1754,  1700,  1701,
   -1754,  4111,   842, -1754,  -292,   868,   875, -1754, -1754, -1754,
   -1754,  1707, -1754, -1754, -1754,  -602, -1753,    -1, -1754, -1754,
   -1754, -1754,  2910,  3697,    16,    81,  -146,  -838, -1754,  -763,
   -1754,  -826, -1754,  1196,  -142,  1335,  -795,     8,  1903,   143,
    1906,    13,     0, -1754,  1278,   516, 10327,  5273, -1754,  3704,
   -1754,  -608,  -699,   556,  4662,  1881, -1754,  -325,   182,   296,
     470, -1754,   461,  -384,  -710,  -238,  -132,    44,  2149, 10076,
    2669,  -246, 10521,   -89,  4711, -1754,   677,  5524,  1882,  -320,
     364,   465,   522,   510,    17,   140,   122,   145,   174,  2597,
    1002,  -507,  9877,   129,   385,   -33,  8411,   -48,  1227,  -131,
    1889,  9072,  7243, -1754, -1754, -1754,   -80,   -43,   -40, -1754,
    6671, -1754,  1668,  2235,   710,  -513,  2163,  7839, -1754,  9443,
   -1754, -1754, -1754,   -62,  2368, -1754, -1754,  4874,  3754,   -31,
   -1754, -1754,  1428,  1769,  1480,  1894,   -74,   -60,  4801, 11804,
    6127,  6678,  -342,  -125,  -362,  1419,  -884,   -37,  3200, -1754,
   -1754, -1049, -1754,  2854,  -516, -1205,  9958,  -315,  -690,    55,
       4,   531,  1784,  -194,  -797,  -425,  -843,  -519,  -907,  -908,
     378,   844,  1218,   -14,  1947,  -709,  1490,  -295,  -466,  -429,
   -1754,  -120,  -107,  6552,  -459,   112,  -495, -1754, -1754, -1754,
    2122, -1754,   -67,  2130,   -22,   892,    -7,  1962,  1128,  1135,
   -1754, -1754, -1754,   -63,   634, -1584,   127, -1754, -1754, -1754,
     730, -1754,  2135,   -19,    19,  2128,  1722, -1754, -1754, -1754,
    2137,  -808,   464, -1754,  -800,   994, -1754, -1754, -1754, -1754
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1294
static const yytype_int16 yytable[] =
{
      58,   384,   378,  1232,   495,   767,   214,  1010,   500,  1418,
     768,  1477,  1476,  1423,   274,   379,   492,  1703,  1407,  1008,
     215,  1420,   737,   259,  1236,  1425,  1408,   132,  1135,   169,
     102,   104,   275,   936,   170,  1874,   932,   171,  1531,  1537,
    1541,   109,  1592,     1,  2101,  1489,   117,  1885,   376,   103,
     128,   788,   384,   134,  1057,  1530,   266,  1540,   143,  1536,
     146,   110,   377,   276,   190,   268,   142,   816,   270,  1532,
    1886,  1542,   287,  1450,   105,  1317,   157,   168,   117,  1024,
     202,   365,   680,   763,  1419,   117,  1744,    58,  1424,   385,
     167,   490,   857,     1,    58,    58,  1340,   790,   284,   926,
     265,   798,     1,  1383,  1510,   106,     1,   366,   788,  1065,
     369,  1553,  1071,     1,  1077,   137,  1082,   528,   531,   138,
     285,   286,   202,   938,   289,   117,   117,     2,   100,   382,
     400,   287,   178,   178,   143,   458,   471,  1556,   458,     1,
     385,  1273,   485,   287,   487,   592,   107,   487,   471,   130,
     501,   458,   471,   458,   482,   458,  1501,  2102,   516,   742,
    1533,  2098,  1543,  1550,   100,  2103,   540,   504,   143,   509,
     789,   513,   131,   527,   530,     1,   142,   117,   895,  1886,
     381,   287,  2035,  1887,   287,   816,   817,  1339,  2141,   610,
     614,  1888,   541,   612,  1159,  1163,   274,  1256,   274,  1548,
     897,  1257,   143,  1263,   548,  1195,  1267,  1264,  1519,  -473,
    1268,   491,   157,   560,   275,   287,   275,   572,   169,   483,
     166,   144,   117,   170,  1511,   117,   171,   852,   169,   287,
     264,  1554,   505,   170,   510,     1,   514,   273,   918,   605,
    1044,  1258,  1275,   573,   746,   747,   748,   684,   313,  1254,
    1023,   651,     1,   598,   687,   842,   268,  1557,   636,   270,
       2,   590,   667,   859,   495,   593,   669,   930,   862,   115,
     681,  1451,     1,  -205,  1834,     1,    58,  1282,    58,   743,
    1064,   668,   607,  1070,   670,  1076,  1836,  1081,  1275,   673,
    2020,   265,  2021,  1105,   744,  2036,   704,   153,   896,  1498,
    1888,  2142,   704,  2037,   853,  2098,  1537,  1541,   178,  2143,
     139,   541,  1499,  1537,  1541,   576,     1,  1537,  1541,  -108,
     743,   178,   -99,  -103,  1540,   743,  1536,   -81,     1,   149,
    1725,  1540,   734,  1536,   -88,  1540,   533,  1536,  1542,   832,
    1057,   836,  2107,   843,  1726,  1542,   830,   555,   834,  1542,
       1,     1,   749,  -477,  -477,  -477,   919,  2147,   556,   154,
     750,  1259,   575,   751,  1452,   820,   143,   822,   886,   888,
     890,   892,   541,     1,   541,   287,     2,    45,   591,     1,
     117,  1534,   287,  1544,     1,   659,   117,    46,   935,   971,
    2146,  1835,  1142,   961,  -647,  1149,  1001,  1259,     2,   608,
    1313,  1058,   215,  1837,   965,   961,  -642,  1106,   223,   861,
     501,  2147,  1001,   864,   560,  1026,  1692,  1252,     1,   896,
     875,   683,   287,   876,   822,   864,   883,   822,  1379,  1543,
     128,  1760,   743,  1761,   578,  1045,  1543,  1500,     1,  -108,
    1543,  1595,   -99,  -103,  1283,  1285,  1287,   -81,  1046,  1284,
    1286,  1288,   932, -1037,   -88, -1037,   458,   458,   143,   283,
     610,   922,   202,   610,  1011,   117,   847,  1013,   949,  -477,
     546,   737,  -477,   953,  1347,  1349,  1351,   157,   954,  1348,
    1350,  1352,   458,   458,  1003,   885,     1,   287,     1,   242,
     680,   703,   367,  1724,   967,   968,  1917,  1486,   737,  1008,
    1003,  1675,     1,  1780,   458,   458,   737,  1684,   926,   458,
     458,     2,   287,   458,   458, -1052, -1052,   117,   117,   117,
   -1052,   117,  1695,  1050,   117,   932,   737,  1057,  1400,  1401,
    1048,    86,  2100,   385,   372,   117,   117,   117,  1573,  1044,
    1713,   143,  1850,   573,     1,   822,   487,  1722,  1321,     1,
     458,  1784,   458,   516,  1446,  1039,   541,   117,  1597,   128,
     143,  1053,  1598,  1093,  1489,  1460,  1031,   926,  1035,     2,
     117,  1549,   972,   972,   972,  1063,  1387,   543,  1069,   288,
    1075,     1,  1080,  1101,   610,   614,  1160,  1164,   926,  1094,
     178,   178,  1674,     1,  1582,  1495,     1,  1496,  1683,  1423,
    1982,  1407,  1407,  1800,   274,  1037,  1801,  1789,   180,  1408,
    1408,  1425,  1587,    98,   610,  2111,   579,  1260,    86,   772,
     773,  1116,   275,  1123,  1261,   277,    86,  -479,  -479,  -479,
    1136,  1032,   408,  1036,   926,  1646,   169,  1829,  1828,  1651,
    1600,   170,  1653,  1604,  1655,  1777,     1,  1537,  1541,  1233,
    1544,   636,   636,   636,   636,  1323,     1,  1544,   574,   410,
      99,  1544,   575,     1,   411,  1540,  2107,  1536,     1,   143,
    1171,     2,  1177,  1179,  1776,  1813,  1449,  1816,   117,  1542,
     115,  1643,   711,  1389,   560,  1168,  1169,   518,   715,  1186,
     536,  1818,  -879,  1275,     1,  1159,  1163,  1159,  1163,  1275,
     242,  1417,   517,  1209,  2044,  1417,  2165,  1807,     1,  1832,
    1214,  1224,   541,  1234,  1214,  1224,   579,    28,    29,   576,
     260,  1186,    32,   545,     1,    26,  2107,  1565,  1395,    38,
    1494, -1077,  1247,     2,  1045,   580,  1239,  1240,  1241,  -895,
    -895,  1265,   115,  -479,  -895,   549,  1270,  1046,   550,     2,
    1277,  -895,   579,    43,    44,    45,   930,   831,   555,   835,
    -477,  -477,  -477,  1427,  1431,  1581,   581,   551,   573,   556,
    1543,  1584,   140,   141,  2175,  -895,  -895,  1585,   659,   659,
     659,   659,   520,  1586,  -478,  -478,  -478,   744,   583,   908,
     909,   584,  1337,   792,   793,   794,  1342,   180,  -477,  -477,
    -477,  1314,  1547,   140,   141,   776,   378,   679,   691,   277,
     586,  -879,   495,   495,   529,   532,  1503,  1504,   588,   379,
      46,  1402,   143,  1405,   495,   691,   822,   822,   822,  1380,
    1798, -1077,  1325,  1512,   577,   580,   703,   576,   578,  1469,
    1470,   910,  1471,  1537,  1541,  1473,  1474,  1421,   693,     1,
     400,  1421,  1485,  1276,   202,     1,  -205,   777,   967,   968,
    1391,  1540,   589,  1536,  -205,   693,   377, -1077,   157,  1442,
     560,   580,  1929,  1136,   965,  1542,  -477,   560,  1669,  1457,
    1459, -1083,  1461,   837,   822,   582,   128,   575,  1480,     1,
     613,   665,   658,     1,    98,  1691,  1555,  1558,  1800,  1801,
    -478,   795,  1203,  1204,  1205,  1916,  -477,   685,  1322,   796,
    1923,   682,   797,   848,  -477,     1,  1522,  -477,   384,  1573,
     117,  1778,   143,   741,   128,  1318,   202,  1506,  1730,   117,
    1779,     1,  1324,  1731,  1493,  1575,  1388,   117,   572,   117,
    1497,  1049,  1644,  1793,   128,   871,  1397,  1794,  1576,   143,
     922,   400,   838,  1384,  1289,  1291,   578,   744,   501,   501,
    1390,   487,  1326,   458,   487,   703,  1543,  -205,   737,   696,
     501,  1520,  1437,  -205,   712,   744,  1550,   442,   191,  1508,
     442,  1429,  1433,  1984,  1353,  1355,   696,  2004,   663,   192,
    1392,  1544,   713,   442,     1,   442,   117,   442,   140,   141,
     409,  1100,   140,   141,  1910,    -8,   385,     1,   744,   100,
    1206,     1,   520,   716,  1937,   385,   849,  1003,  1207,    32,
       1,  1208,   850,  1580,   140,   141,   717,   487,   487,   718,
    1578,   458,   458,  1833,  1481,   458,   458,   458,   769,   143,
     140,   141,   117,   117,  1509,  1008,   382,  1895,  1839,   719,
      43,    44,   117,  1561,   117,   202,   541,   932,   770,   771,
     822,   517,   720,   143,  1491,   887,   822,  -886,   893,   143,
    1293,  1295,   822,  1083,  1614,   143,   778,   779,   822,  -205,
     143,  2069,    26,  -266,  -266,  -266,   926,  1160,  1164,  1160,
    1164,   784,  1696,  -885,   143,  -885,  -885,   381,  1084,   636,
    1357,  1359,   636,   140,   141,  1697,  1804,   785,   359,   519,
     610,  1116,   610,  1123,  1085,   372,   140,   141,  1562,  1565,
     140,   141,  1628,  1991,  1778,   926,   806,   807,   926,   140,
     141,  2054,   969,  1788,   690,  1641,  1290,  1292,   970,   787,
     636,  1277,  1853,  1855,  1086,  1087,   791,  -914,   611,   615,
    1637,   690,  1865,   812,   636,   636,   636,   636,  1662,  1832,
    -885,  1012,  2076,  2077,  1014,  1513,  1354,  1356,   373,  1436,
    1514,  -885,   458,   458,   117,   970,   117,   780,   781,   374,
    1699,  1083,  -205,   786,   822,   130,   143,  1544,  -205,   482,
     744,   813,   519,   822,   542,  -266,  -885,  1672,   372,  -266,
     130,  1677,  1719,  1681,  1515,   815,  1084,  1686,     1,  1516,
     100,   400,   202,   372,   814,   679,  -885,  -885,  -885,  2057,
    -914,  -914,  1085,  1055,   827,  -914,   659,   808,   809,   659,
    1707,  -205,  -914,  1943,  1056,  2004,   101,  1707,  1651,  1294,
    1296,  1655,  2097,  1305,  1309,   819,  2098,   143,  1297,  1299,
    2099,  1301,  1086,  1087,   483,   828,  -914,  -914,   891,  1839,
     839,     1,   242,   100,  -914,  -914,  -914,   659,  1846,  1358,
    1360,  1371,  1375,  1732,   840,  2152,  1361,  1363,  1365,  1367,
     525,   659,   659,   659,   659,   658,   658,   658,   658,   666,
    2039,  1417,  1306,  1310,  1088,   847,   150,   799,   442,   442,
    1298,  1300,   135,  1302,   136,  -755,  1479,  -755,   854,   873,
     947,  2005,  1008,  1178,  1180,  1181,   359,   800,   801,   556,
    1372,  1376,  1573,  1008,   442,   442,  1438,  1806,  1362,  1364,
    1366,  1368,   970,   850,  -205,     1,    28,    29,  1808,   851,
    -205,    32,   744,  1809,   970,  1505,   442,   442,    38,   970,
     242,   442,   442,    28,    29,   442,   442,   147,    32,   148,
       2,   973,   974,   975,   151,    38,   152,  1417,  1815,  1417,
    1817,  1907,    43,    44,   542,   901,   542,   850,   387,  1015,
    1017,   663,   663,   663,   663,   894,   902,   903,   911,    43,
      44,   191,   442,  2034,   442,  -915,   951, -1032,   526, -1032,
    1758,  1759,   192,  2017,  1762,   143,    28,    29,   904,   822,
     822,    32,   905,  1739,   906,   774,   775,  1740,    38,   611,
     926,   926,   611,  -477,  1763,   958,  -477,  -477,  -477,  -477,
    -477,  -477,  -477,  -477,  1647,  1648,  1649,  1421,   907,   842,
     400,  1579,    43,    44,  1983,  2139,  1781,   959,   117,  2098,
     850,  1641,  1751,  2140,   155,   117,  1740,   960,  1803,  2157,
    1790,   143,   117,  2098,  2173,  1994,   382,  2158,  2098,  1891,
     961,   850,  2174,  1892,   737,   737,   737,   737,   737,   737,
     737,   737,   117,  1833,  1797,  2046,   964,   117,   572,  1019,
     117,   850,  1613,   143,  2051,  1008,   175,  2068,  2115,  1020,
     850,  1899,   400,   850,   850,  1740,  1021,  1903,   458,   458,
     495,  1740,  2149,  1814,  1814,  1814,  1814,   381,  1027,  2113,
      28,    29,   995,  2114,  2154,    32,  1028,   843,  2098,  -477,
    -477,  1060,    38,  2156,  2171,  1003,   192,  2098,  2098,  -477,
    2104,  1066,  2106,   611,   615,  1161,  1165,  1072,  -477,  -477,
    -477,  -477,  -477,   782,   783,  1059,    43,    44,   542,  2005,
    1078,   458,   458,  2172,   117,  1521,  1095,  2098,  2093,  1098,
    2096,  1008,   117,   611,  2176,  2182,   493,  1096,  2098,  2098,
     506,  1102,  1919,   560,   486,  1173,     1,  1847,  1103,  -653,
     359,  -653,  -652,  1104,  -652,  1920,   523,   534,  1698,   535,
    1124,   636,   636,   538,  2134,   535,  2136,  1125,  2138,  1116,
    1122,   636,  1116,  1523,  1025,  1116,     1,  -971,   542,  1628,
    1718,   802,   803,  1116,    18,    19,  1116,     1,    28,    29,
    1097,  1133,   535,    32,  1134,  2131,   744,  1172,  1140,   136,
      38,  1875,   804,   805,     1,  2160,  2161,  1137,  2163,  1136,
    1138,  1269,     2,     1,    28,    29,   501,  1889,  1276,    32,
       1,   115,  1139,  2170,    43,    44,    38,  1183,    69, -1051,
   -1051,  1922,  1253,  1925, -1051,  1336,  1341,     1,     1,  2180,
    1527,   744,  1528,  1623,  1671,   175,     1,  1933,  1935,  1211,
      43,    44,    45,   810,   811,   676,   737,  1411,    28,    29,
     400,  1412,   202,    32,  1676,   400,     1,  1680,  1265,     1,
      38,  1413,  1685,  1001,     1,    28,    29,  1525,   359,  1526,
      32,  1986,   359,  1247,  1414,  1938,  1939,    38,   659,   659,
     962,  1415,  -668,   658,    43,    44,   658,   995,   659,   555,
     744,  1416,  1878,   995,  1440,   173,   995,  1821,   374,  1824,
     556,    43,    44,  1016,  1018,    69,    46,  -668,  1439,  -895,
    -895,  1402,    69,    69,  -895,   359,  -668,  -668,  1465,  1467,
    1822,  -895,  1825,  1456,   658,  1466,  1468,  1464,   400,  1154,
    1156,  1482,   117,   117,  1502,   117,  1155,  1157,   658,   658,
     658,   658,   359,  2150,  -747,  -895,  -895,   143,  2151,  1517,
     359,  1003,  -750,  -668,  -668,   442,  1566,   744,  -668,  1567,
     458,  1658,   458,  1659,  1568,  -668,   279,   282,  1569,  1570,
     359,  1409,  1410,  1571,  1588,  1589,  1995,  1624,  1998,   663,
    1593,  1594,   663,  1601,  1616,   458,  1602,   458,   117,  -668,
    -668,  -668,  1615,  1617,  -668,  1619,  -926,   963,  1638,   961,
    -668,  2007,  1632,  2009,  1417,  1417,  1116,  1116,  1116,  1116,
    1633,  1634,   636,  1656,   410,     1,  1116,  1116,  1663,  1116,
     663,  1116,  1660,   442,   442,  1670,  1802,   442,   442,   442,
     676,   564,  1689,  1116,   663,   663,   663,   663,  1700,    60,
       2,  1996,  1136,  1999,  2056,  1641,    28,    29,  1702,   115,
    1212,    32,  1704,  2063,  1705,  2032,  1715,  2032,    38,  1716,
    1717,  1747,  1720,  1734,  1728,  1723,  2008,  1727,  2010,  -926,
    -926,   995,  1729,   542,  -926,  1741,   400,  1750,   541,  1755,
    1787,  -926,    43,    44,   173,  1757,    28,    29,   389,  1767,
    1002,    32,  1769,  1005,   173,     1,    69,  1771,    38,  1773,
    1791,  1805,  -753,  1840,  1810,  -926,  -926,  1841,  1842,  2071,
    2073,  1872,   542,  -926,  1876,  -926,    60,  1843,  1849,  1890,
       2,  1844,    43,    44,    45,  1845,    60,    46,  1866,   730,
    1867,  1893,  1894,    60,    60,  1896,   921,  1897,  1900,   659,
     995,  1906,   995,  1911,  1912,   458,   458,   458,   458,   458,
    1814,  1814,  1913,  1914,  1926,  1981,  1915,   458,   458,   458,
     458,  1927,  -230,  2074,   442,   442,    28,    29,  1116,  1930,
    1931,    32,  1936,  1985,  1989,   473,  1988,   636,    38,   636,
      28,    29,  1992,  1993,  1997,    32,  2000,   473,  1136,  1641,
    2001,   473,    38,  2019,  2144,  2145,  1161,  1165,  1161,  1165,
    2033,    51,    43,    44,  2032,  2038,  2032,  2045,   542,  2047,
    2048,  1083,  2049,  2050,   552,  2052,    43,    44,  2081,   611,
    2064,   611,   844,  2053,   458,   458,  2058,  2059,  2075,  2060,
    2061,  1116,  1116,  2065,  2066,  1116,  1084,  1116,  2067,  1921,
    1116,  1924,   108,  2082,   636,  2105,  2112,  1175,   995,  2118,
       1,  2116,  1085,   676,    51,  1932,  1934,  2121,  1641,   542,
    1136,   145,  2117,  2119,  1136,  2120,  2127,  2032,  2032,  2148,
    2032,  2132,  2032,  2137,  2155,     2,  1116,  2159,    51,   564,
    2162,    51,  1086,  1087,   115,   359,   359,   243,    51,  2167,
    2168,  2169,  2177,  2178,  2179,    51,    51,  2164,  1136,  1641,
    2181,  2183,   942,  1116,   659,    60,   659,   943,    51,  2032,
    2032,   368,  2032,    70,  1136,    60,  1518,    60,   944,   945,
    1826,    28,    29,    51,  1590,   948,    32,  2032,  1591,   671,
       1,   393,   672,    38,  1472,  1422,   430,   243,  1507,   430,
     722,   723,  1795,  2032,   880,  1237,   714,  2002,   872,   243,
     606,   243,   430,   243,   430,     2,   430,    43,    44,    45,
    2133,  1245,    46,  1478,   115,   542,   278,   267,    18,    19,
     652,   659,   269,   281,   271,  1980,     0,     0,     0,     0,
       0,   243,   243,     0,     0,   658,   658,   542,     0,     0,
      70,     0,     0,   430,     0,   658,     0,     1,    28,    29,
      70,    28,    29,    32,     0,   547,    32,    70,    70,   995,
      38,     0,   359,    38,    51,     0,   995,     0,     0,     0,
     995,     0,     2,     0,     0,     0,     0,     0,     0,   402,
       0,   186,   187,     0,    43,    44,    45,    43,    44,   676,
       0,     0,    46,     0,     0,     0,     0,     0,     0,   476,
       0,     0,   473,     0,   243,     0,     0,   243,   243,   393,
       0,   476,  2055,     0,   473,   476,     0,    51,    28,    29,
       0,  2062,     0,    32,     0,     0,     0,    51,   243,    51,
      38,   663,   663,     0,     0,     0,     0,    28,    29,     0,
       0,   663,    32,     0,     0,     0,     0,   243,  1175,    38,
     442,   442,   173,   243,    43,    44,    45,  1191,     0,    46,
       1,     0,   430,     0,     0,     0,     0,   473,    76,   676,
       0,   475,     0,    43,    44,     0,     0,  2070,  2072,   845,
     730,     0,     0,   475,     0,     2,     0,   475,     0,  1191,
      28,    29,     0,     0,   115,    32,     0,     0,     0,     0,
    1250,     0,    38,   442,   442,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,   676,     0,    32,    51,     0,
       0,     0,     0,   430,    38,   430,    43,    44,     0,    70,
       0,    28,    29,     0,     1,     0,    32,   402,     0,    70,
       0,    70,     0,    38,     0,    76,   402,     0,    43,    44,
      45,     0,   402,  1212,     0,    76,     0,     0,   243,     2,
     393,   243,    76,    76,   243,    51,     0,    43,    44,    45,
       0,   874,    46,     0,     0,    51,   243,     0,    51,     0,
       0,     0,     0,   995,     0,     0,     0,     0,   602,     0,
       0,   564,     0,   542,     0,     0,   658,     0,     0,     0,
       0,     0,     0,     0,   477,    28,    29,   430,   430,     0,
      32,     0,    51,    51,     0,     0,   477,    38,     0,   430,
     477,     0,     0,   359,   952,     0,     0,     0,   995,   243,
     995,   708,     0,   430,   430,     0,     0,   708,   564,     0,
       0,    43,    44,     0,     0,   564,     0,   995,     0,     0,
     730,     0,   564,     0,     0,   430,   430,     0,   402,     0,
     430,   430,     0,     0,   430,   430,     0,     0,     0,     0,
       0,   393,     0,    60,     0,     0,   476,     0,   243,     0,
       0,   243,     0,     0,     0,     0,     0,     0,   476,     0,
       0,     0,   663,  1657,     0,  1005,    51,     0,     0,     0,
     995,   430,   564,   430,     0,     0,    51,   430,   752,   753,
     754,   755,   756,   757,   758,   759,   760,   761,   564,     0,
       0,     0,     0,     0,     0,     0,    51,    18,    19,    51,
       0,    51,     0,    51,    76,     0,     0,     0,     0,     0,
      51,   476,   602,     0,    76,     0,    76,     0,   867,     0,
       0,     0,   442,     0,   442,     0,     0,    28,    29,     0,
     867,   658,    32,   658,     0,     0,     0,     0,     0,    38,
       0,     0,     0,     0,     0,     0,     0,   442,     0,   442,
       0,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,  -477,
    -477,  -477,     0,    43,    44,     0,     0,     0,  1131,     0,
       0,     0,   393,   393,   393,   393,   542,     0,   542,   762,
       0,     0,     0,   957,     0,     0,  1811,   359,  -657,     0,
       0,     0,   542,   542,     0,     0,     0,   405,   658,   359,
     243,   243,   243,     0,     0,    51,     0,     0,     0,     0,
     430,     0,     0,  -657,     0,     0,     0,     0,     0,    18,
      19,     0,  -657,  -657,   243,     0,     0,   663,   473,   663,
       0,   243,   243,   430,     0,   243,   243,     0,     0,   473,
       0,     0,   430,     0,     0,   344,     0,     0,     0,    28,
      29,   868,     0,    51,    32,     0,   393,  -477,  -477,  -657,
    -657,    38,   393,   868,  -657,   393,   995,  -477,     0,     0,
       0,  -657,  -477,  -477,  -477,     0,  -477,  -477,  -477,  -477,
    -477,     0,     0,     0,     0,    43,    44,    28,    29,     0,
    1622,     0,    32,     0,   663,  -657,  -657,  -657,     0,    38,
    -657,     0,     0,  1812,   402,   961,  -657,   442,   442,   442,
     442,   442,     0,     0,     0,     0,   868,    70,     0,   442,
     442,   442,   442,    43,    44,    45,     0,     0,   854,     0,
       0,  1667,     0,     0,     0,     0,     0,  1175,     0,   556,
       0,     0,     0,     0,    51,     0,     0,    51,    51,    51,
       0,     0,     0,     0,     0,   405,     0,     0,     0,     0,
       0,     0,     0,     0,   405,   359,   359,     0,   393,     0,
     405,   393,   393,     0,     0,    51,  1657,     0,     0,  1005,
       0,     0,     0,     0,     0,     0,   442,   442,     0,     0,
     243,    51,     0,     0,     0,     0,     0,   639,    51,   542,
       0,   243,     0,   430,     0,    51,     0,     0,   542,     0,
       0,     0,     0,     0,     0,  1218,  1228,     0,     0,  1218,
    1228,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    51,     0,     0,
       0,     0,     0,   740,     0,    51,     0,     0,     0,     0,
      48,     0,     0,     0,   542,   542,   402,     0,     0,   402,
     402,    51,   393,     0,     0,     0,   405,     0,     0,   243,
     243,     0,     0,     0,   430,     0,     0,     0,     0,     0,
       0,   243,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   476,     0,     0,     0,     0,     0,     0,   393,
     243,   393,     0,   476,     0,     0,     0,   243,     0,     0,
       0,     0,    76,     0,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,     0,     0,     0,   164,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    48,     0,     0,
       0,     2,   430,   430,    48,    48,   430,   430,   430,     0,
     115,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     402,     0,   359,     0,  1445,     0,    51,   430,     0,     0,
       0,    51,   645,     0,     0,  1445,     0,    51,   295,     0,
     359,     0,     0,    51,   296,   297,   298,    28,    29,    51,
       0,     0,    32,     0,     0,     0,     0,   299,   300,    38,
       0,     0,     0,     0,     0,     0,     0,   393,     0,     0,
       0,   301,   564,     0,     0,   302,   303,   304,   305,   306,
     307,   308,   309,    43,    44,   881,     0,     0,   882,   724,
     312,     0,     0,     0,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1007,     0,     0,     0,     0,
      82,  1657,  1005,   558,     0,   393,   393,   393,   393,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   430,   430,     0,     0,     0,   243,     0,
     243,   602,     0,     0,     0,    51,     0,   868,     0,     0,
       0,     0,     0,     0,    51,     0,   125,     0,   868,     0,
       0,   564,     0,     0,     0,     0,   164,  1092,     0,     0,
       0,   243,   393,    51,     0,     0,   164,     0,    48,     0,
       0,     0,     0,     0,     0,     0,   158,   176,   189,     0,
       0,   243,   405,     0,     0,   225,     0,    82,   243,     0,
     639,     0,     0,     0,    82,    82,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   243,   393,     0,
       0,     0,     0,     0,   243,   393,     0,     0,   243,   393,
     639,   639,   639,   639,     0,   189,   386,   388,   390,   391,
       0,     0,     0,     0,     0,   464,     0,     0,   464,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   464,     0,   464,     0,   464,     0,     0,     0,     0,
     402,     0,     0,     0,     0,     0,   913,   916,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   524,   388,   390,
       0,     0,     0,     0,     0,  1238,     0,     0,     0,  1242,
       0,   730,   913,   916,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   553,   568,   913,   916,     0,     0,   740,   913,
     916,     0,     0,   913,   916,     0,     0,     0,     0,     0,
       0,     0,  1281,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   405,   602,     0,   405,   405,     0,
       0,   558,     0,   604,     0,     0,     0,     0,     0,  1335,
      51,    51,     0,     0,   740,  1711,   176,  1346,     0,     0,
       0,     0,  1711,     0,     0,  1118,   677,     0,    82,     0,
       0,     0,     0,     0,     0,     0,     0,  1399,   393,     0,
       0,   393,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   645,   645,   645,   645,     0,
       0,     0,     0,     0,   290,     0,     1,   291,   100,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   393,     0,     0,    51,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     0,   405,     0,
       0,     0,     0,   393,     0,     0,     0,     0,     0,   430,
     430,     0,     0,     0,   243,   243,   243,   243,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,     0,
     386,   388,   390,     0,   296,   297,   402,     0,     0,   402,
       0,     0,     0,     0,     0,     0,   730,     0,   300,     0,
       0,     0,     0,     0,     0,     0,     0,   855,     0,     0,
       0,   301,   430,   430,   464,   302,   303,   304,   305,   306,
     307,   308,     0,     0,     0,     0,   125,     0,   698,     0,
       0,     0,     0,     0,    51,     0,     0,     0,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,   243,   393,
       0,   402,     0,     0,     0,     0,   464,   464,     0,     0,
       0,   928,     0,     0,     0,   939,   402,     0,   464,     0,
       0,     0,     0,     0,   164,  1007,     0,   158,     0,  1185,
       0,     0,   464,   464,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   464,   464,     0,   243,     0,   464,
     464,  1185,     0,   464,   464,     0,     0,   189,   189,   189,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   189,   189,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     464,   393,   464,    51,     0,  1042,   393,  1051,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   639,     0,
       0,   639,   390,     0,    51,     0,     0,     0,     0,     0,
     639,     0,     0,     0,     0,     0,  1492,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1639,  1640,     0,     0,     0,     0,   405,   639,
       0,  1281,     0,   558,     0,  1650,     0,     0,  1346,     0,
    1654,     0,     0,   639,   639,   639,   639,     0,     0,   393,
       0,     0,     0,     0,   213,     0,     0,     0,     0,   459,
       0,     0,   459,     0,   243,   393,     0,     0,     0,   402,
       0,     0,     0,     0,   402,   459,     0,   459,     0,   459,
     558,   430,     0,   430,     0,     0,     0,   558,     0,   740,
       0,     0,     0,     0,   558,   740,   213,     0,  1176,     0,
       0,     0,     0,     0,   677,     0,   430,     0,   430,     0,
       0,     0,     0,     0,     0,   402,   402,     0,   402,   402,
       0,     0,     0,   402,   402,   402,   402,     0,     0,     0,
    1220,     0,     0,     0,  1220,   402,   402,   402,   402,   402,
     402,   402,   402,     0,   558,     0,     0,   402,     0,  1736,
       0,     0,   855,     0,     0,     0,     0,     0,     0,     0,
     558,   913,   916,     0,     0,   913,   916,     0,     0,     0,
       0,     0,     0,  1118,     0,     0,  1118,     0,     0,     0,
       0,     0,   637,     0,     0,  1118,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   393,     0,   430,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1118,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   645,   645,
     645,   645,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   405,     0,     0,   405,     0,     0,
       0,     0,     0,     0,     0,     0,   430,   430,   430,   430,
     430,   243,   243,     0,  1434,     0,     0,     0,   430,   430,
     430,   430,     0,     0,     0,     0,     0,     0,   158,   855,
    1447,     0,     0,     0,     0,   402,     0,  1454,     0,     0,
     855,     0,  1462,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   405,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   405,     0,     0,     0,     0,     0,
     125,   823,     0,     0,     0,   430,   430,     0,     0,  1490,
       0,     0,     0,     0,   568,     0,     0,   402,     0,     0,
     125,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     928,     0,     0,   914,   917,     0,     0,     0,     0,     0,
     459,   459,     0,   464,     0,     0,     0,     0,   870,     0,
       0,     0,   388,     0,  1661,     0,     0,     0,   877,   914,
     917,   884,     0,  1664,     0,     0,   459,   459,     0,     0,
    1007,     0,     0,     0,     0,     0,   928,     0,     0,     0,
       0,   914,   917,     0,     0,     0,   914,   917,   459,   459,
     914,   917,     0,   459,   459,     0,   934,   459,   459,     0,
       0,  1007,   950,     0,   993,     0,     0,     0,     0,     0,
       0,   464,   464,     0,     0,   464,   464,   464,     0,     0,
       0,     0,  1563,   386,     0,     0,   441,     0,     0,   441,
       0,     0,     0,   390,   459,     0,   459,     0,     0,     0,
       0,     0,   441,     0,   441,     0,   441,     0,     0,     0,
     639,   639,     0,     0,     0,     0,     0,     0,   639,     0,
     639,   639,     0,     0,   639,     0,     0,     0,     0,     0,
       0,     0,   639,     0,     0,   639,     0,   405,     0,   213,
       0,     0,   405,     0,     0,     0,     0,     0,     0,   213,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   637,     0,     0,     0,   213,
       0,     0,   213,     0,   213,     0,   213,     0,     0,     0,
       0,     0,     0,  1949,  1953,     0,  1959,  1963,     0,     0,
       0,  1967,  1971,  1975,  1979,   637,   637,   637,   637,     0,
       0,     0,     0,   405,   405,   405,   405,   405,   405,   405,
     405,     0,   464,   464,     0,   405,     0,     0,     0,     0,
       0,     0,     0,     0,  1007,     0,     0,     0,     0,     0,
       0,     0,     0,   855,     0,     0,  1940,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1736,
     855,     0,  1694,     0,  1650,     0,     0,  1654,   913,   916,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1220,     0,     0,     0,     0,     0,     0,  1220,     0,   993,
       0,     0,     0,     0,     0,   993,     0,     0,   993,     0,
       0,     0,     0,     0,     0,  1118,  1118,     0,     0,     0,
       0,     0,     0,  1118,     0,  1118,  1118,     0,     0,  1118,
       0,   913,   916,     0,   558,     0,     0,  1118,     0,     0,
    1118,     0,     0,     0,     0,     0,     0,     0,  1007,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1007,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   405,     0,   639,   639,   639,   639,     0,
       0,   639,     0,     0,     0,   639,   639,     0,   639,     0,
     639,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   639,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2040,  2041,     0,     0,     0,   441,   441,     0,
       0,     0,     0,   558,     0,     0,     0,     0,     0,   946,
     823,   823,   823,     0,     0,   405,     0,     0,     0,     0,
       0,     0,     0,   441,   441,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   459,   459,     0,     0,   213,     0,
       0,     0,     0,     0,     0,   441,   441,     0,     0,     0,
     441,   441,     0,     0,   441,   441,     0,     0,     0,     0,
       0,     0,     0,     0,  1774,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1783,     0,
       0,     0,     0,     0,     0,   386,     0,     0,     0,     0,
       0,   441,   189,   441,     0,     0,     0,   459,     0,     0,
       0,  1007,     0,     0,     0,     0,     0,     0,     0,     0,
    1484,     0,  1796,     0,   568,     0,     0,   639,     0,     0,
       0,     0,   993,     0,   993,     0,   639,     0,   639,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   464,   464,
    1118,  1118,  1118,  1118,     0,     0,  1118,     0,     0,     0,
    1118,  1118,     0,  1118,     0,  1118,     0,     0,   914,   917,
       0,     0,   914,   917,     0,   459,   459,  1118,     0,   459,
     459,   459,     0,     0,     0,     0,     0,  1007,     0,     0,
     639,   639,     0,     0,   639,     0,   639,     0,     0,   639,
       0,   464,   464,   639,   386,     0,     0,     0,   329,  2135,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   568,     0,     0,     0,  1007,     0,     0,
       0,     0,   401,     0,     0,   639,     0,     0,     0,     0,
     993,     0,     0,   637,     0,     0,   637,     0,     0,   213,
       0,     0,     0,     0,   213,   637,     0,     0,     0,     0,
    1583,     0,   639,     0,     0,     0,  1583,     0,     0,     0,
       0,     0,   213,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   637,     0,   460,     0,     0,   460,
       0,     0,     0,     0,   401,     0,     0,     0,   637,   637,
     637,   637,   460,     0,   460,     0,   460,     0,     0,     0,
       0,     0,  1118,     0,     0,     0,   459,   459,     0,     0,
       0,  1118,     0,  1118,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1908,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   913,   916,     0,   913,   916,
       0,     0,     0,     0,     0,     0,     0,   913,   916,   913,
     916,     0,     0,     0,     0,     0,     0,   383,     0,     0,
       0,     0,     0,     0,     0,  1118,  1118,     0,     0,  1118,
       0,  1118,     0,     0,  1118,     0,     0,     0,  1118,     0,
     401,     0,     0,     0,     0,   699,   701,     0,     0,   401,
     253,   993,     0,     0,     0,   401,   213,     0,   993,     0,
       0,     0,   993,     0,     0,     0,   329,     0,   383,     0,
    1118,     0,     0,     0,   913,   916,   290,     0,     1,   291,
     100,   292,   401,   293,   294,     0,     0,   401,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1118,     0,     0,
     464,     0,   464,     2,   566,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   401,   464,   401,   464,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   390,     0,     0,
     295,     0,     0,     0,   253,   253,   296,   297,   298,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   299,
     300,   401,     0,     0,   441,     0,     0,   674,     0,     0,
       0,     0,     0,   301,     0,     0,     0,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  1150,   312,     0,     0,  1151,     0,     0,     0,     0,
     313,   314,  1743,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     253,   253,   253,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   441,   441,     0,     0,   441,   441,   441,     0,
       0,   253,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   823,   823,     0,     0,   460,   460,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   841,   401,     0,     0,   993,     0,   846,     0,     0,
       0,     0,     0,   460,   460,   464,   464,   464,   464,   464,
       0,     0,     0,     0,     0,   914,   917,   464,   464,   464,
     464,     0,   459,   459,     0,   460,   460,     0,   401,     0,
     460,   460,     0,     0,   460,   460,     0,     0,     0,     0,
     993,     0,   993,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,     0,     0,     0,     0,     0,     0,     0,   914,   917,
       0,   460,   925,   460,     0,   459,   459,     0,     0,     0,
       0,     0,     0,     0,   464,   464,     0,     0,   401,     0,
       0,     0,     0,   441,   441,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   993,     0,     0,   637,   637,     0,     0,     0,
       0,     0,     0,   637,     0,   637,   637,     0,     0,   637,
       0,     0,   999,     0,     0,  1004,     0,   637,     0,     0,
     637,     0,     0,     0,     0,     0,     0,     0,   999,     0,
       0,     0,     0,     0,     0,     0,     0,   401,     0,     0,
       0,  1187,     0,     0,     0,     0,     0,     0,   566,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   566,     0,     0,     0,     0,     0,     0,   329,     0,
       0,     0,   329,  1243,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   996,     0,     0,   401,     0,     0,
       0,   253,     0,   401,   253,     0,   401,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,     0,     0,     0,     0,
       0,   401,   401,   401,   401,   401,   401,   401,     0,     0,
     401,   401,     0,   401,   401,   401,   401,   401,   401,   401,
     401,     0,   329,     0,     0,     0,   213,     0,     0,     0,
     329,   401,   401,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   401,   401,   401,   401,   401,   401,   401,   674,
     329,     0,     0,     0,     0,   674,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   993,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   401,
       0,     0,   401,   401,   459,     0,   459,     0,     0,     0,
       0,     0,     0,     0,     0,   253,   253,   253,   253,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   459,
       0,   459,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   253,   253,   253,     0,     0,     0,     0,
     637,   637,   637,   637,     0,     0,   637,     0,     0,     0,
     637,   637,     0,   637,     0,   637,     0,  1210,     0,     0,
       0,   401,     0,   401,     0,     0,     0,   637,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   766,     0,     0,     0,     0,     0,   996,
       0,   460,   460,   401,     0,   996,     0,     0,   996,   441,
     441,     0,   401,     0,     0,     0,     0,     0,     0,     0,
     347,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     401,     0,   401,     0,   404,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   674,   441,   441,   460,     0,     0,     0,  1453,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   914,   917,     0,   914,   917,     0,     0,   459,
     459,   459,   459,   459,   914,   917,   914,   917,     0,     0,
       0,   459,   459,   459,   459,     0,   404,     0,   401,     0,
       0,     0,   637,     0,     0,     0,     0,     0,     0,     0,
    1488,   637,     0,   637,     0,   566,     0,     0,     0,     0,
       0,     0,   460,   460,     0,     0,   460,   460,   460,     0,
       0,   925,     0,     0,     0,     0,     0,     0,   401,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   401,
       0,   914,   917,     0,     0,     0,     0,     0,   459,   459,
       0,     0,     0,     0,     0,   637,   637,     0,     0,   637,
       0,   637,     0,     0,   637,   329,   329,   925,   637,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   404,     0,     0,     0,     0,   700,   702,     0,
       0,   404,     0,     0,     0,     0,     0,   404,     0,     0,
     637,     0,     0,     0,     0,     0,     0,     0,   347,     0,
       0,     0,     0,     0,   383,     0,     0,     0,     0,     0,
       0,     0,     0,   566,   404,   566,     0,   637,     0,   404,
       0,     0,   996,   996,   996,     0,     0,     0,     0,     0,
       0,     0,     0,   401,     0,   401,     0,     0,     0,     0,
       0,     0,     0,   460,   460,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,   404,   401,   404,  1128,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,   401,     0,     0,     0,   401,
       0,   441,   329,   441,     0,     0,   401,     0,     0,     0,
     401,     0,     0,   404,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   441,     0,   441,   295,
       0,     0,     0,     0,     0,   296,   297,   298,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   299,   300,
     996,     0,     0,     0,     0,   674,     0,   674,     0,     0,
       0,     0,   301,     0,     0,     0,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1150,   312,     0,     0,  1748,     0,     0,     0,  1749,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,  1272,     0,     0,     0,     0,     0,   253,   253,
     253,   253,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   404,     0,     0,     0,     0,     0,
       0,   253,     0,   253,     0,  1304,  1308,  1312,  1316,  1320,
       0,     0,  1329,     0,     0,     0,     0,     0,  1272,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     404,     0,     0,  1370,  1374,  1378,  1382,  1386,     0,     0,
    1329,     0,     0,     0,     0,     0,     0,     0,     0,   401,
       0,     0,   401,     0,     0,     0,   441,   441,   441,   441,
     441,     0,   347,     0,     0,     0,     0,     0,   441,   441,
     441,   441,     0,     0,     0,  1329,  1329,    80,     0,     0,
     996,   996,     0,     0,     0,     0,     0,   996,   996,     0,
     404,   996,   996,   401,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   401,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   401,     0,     0,     0,     0,     0,
       0,     0,     0,    80,     0,     0,     0,     0,     0,   401,
       0,     0,     0,   329,     0,   441,   441,     0,   401,     0,
     401,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    80,    80,     0,   401,     0,   404,
       0,     0,    80,  1188,    80,     0,     0,     0,     0,   460,
     460,    80,    80,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     347,     0,     0,     0,   347,  1244,     0,     0,     0,   674,
       0,     0,    80,    80,     0,     0,  1786,     0,     0,   404,
     401,     0,     0,     0,     0,   404,     0,     0,   404,     0,
       0,     0,   460,   460,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1453,     0,   566,     0,   347,  1799,     0,
       0,  1004,     0,   404,   404,   404,   404,   404,   404,   404,
       0,     0,   404,   404,    80,   404,   404,   404,   404,   404,
     404,   404,   404,     0,   347,     0,     0,     0,     0,     0,
       0,     0,   347,   404,   404,   404,   404,   404,   404,   404,
     404,   404,   404,   404,   404,   404,   404,   404,   404,   404,
     404,     0,   347,     0,     0,     0,     0,     0,     0,    80,
       0,     0,    80,     0,     0,   996,     0,     0,     0,     0,
       0,     0,   401,     0,     0,   841,   401,   401,   401,     0,
       0,   404,     0,   566,   404,   404,     0,   329,     0,     0,
      80,     0,   401,   401,   566,     0,     0,  1620,     0,   329,
       0,     0,     0,    80,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    80,     0,    80,     0,     0,   401,   401,
       0,   401,   401,     0,     0,  1645,   401,   401,   401,   401,
       0,     0,  1652,     0,     0,     0,     0,     0,   401,   401,
     401,   401,   401,   401,   401,   401,     0,     0,     0,     0,
     401,     0,     0,   404,     0,   404,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   401,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   996,   996,  1272,     0,   404,     0,     0,     0,  1272,
       0,     0,     0,     0,   404,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   290,     0,
       1,   291,   100,   292,     0,   293,   294,    80,     0,     0,
       0,     0,   404,     0,   404,     0,     0,     0,     0,     0,
       0,   460,     0,   460,     0,     2,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   460,     0,   460,     0,
       0,     0,     0,    80,     0,   329,   329,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     404,   299,   300,   674,   674,     0,  1987,     0,   401,   401,
       0,     0,     0,     0,     0,   301,     0,     0,   401,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1150,   312,     0,     0,  1151,     0,     0,
     404,     0,   313,   314,  1753,   315,   316,   317,   318,     0,
       0,   404,     0,     0,     0,     0,     0,     0,     0,   999,
       0,     0,     0,     0,    80,    80,    80,     0,    80,     0,
     401,    80,     0,     0,   401,   401,     0,   347,   347,     0,
       0,     0,    80,    80,    80,     0,     0,   996,   996,     0,
       0,    68,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    80,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   460,   460,   460,   460,
     460,     0,     0,     0,     0,     0,   111,     0,   460,   460,
     460,   460,     0,     0,   120,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   404,     0,   404,     0,     0,
       0,     0,   290,     0,     1,   291,   100,   292,   172,   293,
     294,     0,     0,     0,     0,   174,   120,   249,    68,   404,
       0,     0,   329,   224,     0,    68,    68,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,   404,     0,     0,
     329,   404,     0,   370,   347,   460,   460,     0,   404,     0,
       0,     0,   404,     0,     0,     0,     0,     0,     0,     0,
       0,   249,     0,   120,   120,    80,   295,   474,     0,     0,
       0,    80,   296,   297,   298,     0,     0,     0,     0,   474,
       0,   249,     0,   474,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     0,   302,   303,   304,   305,   306,   307,   308,
     309,   249,   249,   310,     0,   522,   311,  1150,   312,     0,
       0,  1748,     0,     0,     0,  1756,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   563,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     585,     0,     0,   587,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   601,     0,     0,   249,   249,   249,
       0,   120,     0,     0,     0,     0,     0,   172,     0,     0,
       0,     0,     0,     0,   174,     0,     0,   172,   249,    68,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   404,     0,     0,   404,     0,     0,   707,     0,     0,
       0,     0,     0,   707,     0,     0,     0,     0,     0,     0,
       0,     0,   729,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   404,     0,     0,     0,    80,
       0,     0,     0,  1942,     0,   404,     0,     0,  1945,  1947,
    1951,  1955,  1957,  1961,     0,     0,   404,  1965,  1969,  1973,
    1977,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   404,     0,     0,     0,   347,     0,    80,     0,     0,
     404,     0,   404,     0,     0,     0,     0,     0,   120,     0,
       0,     0,     0,     0,     0,     0,     0,    80,     0,   404,
       0,     0,     0,     0,     1,     0,     0,     0,   601,     0,
     249,   249,     0,     0,   866,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   866,     0,     0,     2,
       0,     0,     0,     0,   120,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,   404,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   563,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,   224,     0,    28,    29,     0,     0,   956,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    80,
      80,    40,     0,  1119,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,     0,     0,     0,     0,
       0,   249,     0,     0,     0,   120,   120,   120,   249,  1000,
       0,   249,   587,     0,     0,  1158,  1162,     0,     0,     0,
       0,     0,     0,   120,   120,   120,     0,     0,     0,     0,
       0,     0,     0,     0,   404,     0,     0,     0,   404,   404,
     404,     0,     0,   120,     0,     0,     0,     0,     0,   347,
       0,     0,     0,     0,   404,   404,     0,     0,     0,     0,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     404,   404,     0,   404,   404,     0,     0,     0,   404,   404,
     404,   404,     0,     0,     0,     0,     0,     0,     0,     0,
     404,   404,   404,   404,   404,   404,   404,   404,  1132,     0,
       0,    80,   404,    80,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   404,     0,
       0,     0,   249,   249,   249,   249,     0,     0,     0,   248,
       0,     0,     0,     0,     0,     0,     0,     0,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
     249,   249,   249,     0,     0,   172,   224,     0,     0,     0,
    1190,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     0,     0,   248,   249,     0,     0,     0,     0,     0,
       0,  1217,  1227,   729,     0,  1217,  1227,     0,     0,     0,
       0,     0,  1190,   248,     0,     0,     0,     0,     0,     0,
       0,     0,   295,  1249,     0,     0,   249,     0,   296,   297,
     298,     0,   249,     0,     0,   249,     0,   347,   347,     0,
       0,   299,   300,   248,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     0,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
     404,   404,   311,  1150,   312,     0,   562,  1748,     0,     0,
     404,  1768,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   563,     0,   600,     0,     0,   248,
     248,   248,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   404,     0,     0,     0,   404,   404,   249,     0,
     248,   249,   249,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   706,
    1444,   563,     0,     0,     0,   706,     0,     0,   563,     0,
       0,  1444,   111,   729,   728,   563,     0,     0,     0,     0,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    80,
       0,     0,     0,     0,     0,     0,     0,     0,   120,     0,
       0,     0,     0,     0,     0,   563,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   585,     0,   587,   120,     0,
       0,   563,   249,     0,   347,     0,     0,     0,     0,   249,
     249,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   249,   347,     0,     0,     0,     0,     0,     0,     0,
     600,  1599,   248,   248,  1603,     0,     0,     0,     2,   249,
     249,   249,     0,  1618,     0,     0,     0,   601,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    80,  1642,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   562,     0,  1158,  1162,  1158,  1162,
       0,     0,     0,     0,   299,   300,     0,     0,     0,     0,
     120,   120,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     0,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  1150,   312,     0,     0,
    1748,     0,     0,     0,  1772,   313,   314,     0,   315,   316,
     317,   318,     0,   248,     0,     0,     0,   249,     0,     0,
     248,     0,     0,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1132,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   249,   249,   249,   249,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,     0,
     249,     0,   585,     0,   587,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1666,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   601,   249,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   248,   248,   248,   248,     0,     0,
       0,  1710,     0,     0,     0,     0,     0,     0,  1710,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   248,   248,   248,   251,     0,   249,   249,     0,
       0,     0,  1189,     0,   249,   249,     0,     0,   249,   249,
     290,     0,     1,   291,   100,   292,   248,   293,   294,     0,
       0,     0,     0,  1216,  1226,   728,     0,  1216,  1226,     0,
       0,     0,     0,     0,  1189,    80,     0,     2,     0,   251,
       0,     0,     0,     0,     0,  1248,     0,     0,   248,     0,
       0,     0,     0,     0,   248,     0,     0,   248,     0,   251,
       0,  1107,  1108,  1109,   619,  1110,  1111,  1112,  1113,   624,
     625,  1114,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,     0,     0,     0,     0,     0,    32,   251,
     251,     0,     0,   299,   300,  1115,     0,   628,   629,   630,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       0,   302,   303,   304,   305,   306,   307,   308,   309,    43,
      44,   310,   565,     0,   311,  -472,   312,   631,     0,  -472,
       0,   242,     0,   632,   313,   314,   562,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     248,     0,   603,   248,   248,   251,   251,   251,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,     0,
       0,   249,     0,   562,     0,     0,   251,     0,     0,     0,
     562,     0,     0,     0,     0,   728,     0,   562,     0,     0,
       0,     0,     0,     0,     0,   709,     0,     0,     0,     0,
     120,   709,     0,     0,     0,     0,     0,     0,     0,     0,
     731,     0,   249,  1852,  1854,   563,     0,     0,     0,     0,
       0,  1861,     0,  1864,  1599,     0,     0,  1603,     0,     0,
       0,     0,     0,   249,     0,  1642,     0,   562,  1877,     0,
       0,     0,     0,     0,   249,   249,   249,   249,     0,     0,
       0,     0,     0,   562,   248,     0,     0,     0,     0,     0,
       0,   248,   248,     0,     0,     0,     0,   290,     0,     1,
     291,   100,   292,   248,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   248,   248,   248,     2,     0,     0,     0,     0,   600,
       0,     0,   120,     0,     0,     0,   603,     0,   251,   251,
       0,     0,     0,     0,   563,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   249,   249,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
     565,     0,     0,     0,   301,     0,     0,     0,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  1150,   312,  1636,     0,  1151,   249,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   251,
       0,     0,     0,     0,     0,     0,   251,     0,     0,   251,
       0,   249,     0,     0,     0,     0,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   729,     0,     0,   248,   248,   248,
     248,     0,     0,     0,     0,     0,     0,     0,  2012,  2013,
    2014,  2015,     0,     0,  2016,     0,     0,     0,  1852,  1854,
     248,  1861,   248,  1864,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2025,  1665,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   249,
       0,     0,     0,   600,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   249,   249,     0,     0,     0,     0,
       0,     0,     0,  1709,     0,     0,     0,     0,     0,     0,
    1709,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     251,   251,   251,   251,     0,     0,     0,   246,     0,   248,
     248,     0,     0,     0,     0,     0,   248,   248,     0,     0,
     248,   248,     0,     0,     0,     0,   120,     0,   251,   251,
     251,     0,     0,     0,     0,     0,     0,     0,  1192,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   246,   251,     0,     0,     0,     0,   472,     0,  1219,
    1229,   731,     0,  1219,  1229,     0,     0,     0,     0,   472,
    1192,   246,     0,   472,     0,     0,     0,     0,     0,     0,
    2016,  1251,     0,     0,   251,     0,     0,     0,     0,  2092,
     251,  2095,     0,   251,     0,     0,     0,     0,     0,     0,
       0,   246,   246,     0,     0,     0,     0,   249,     0,   729,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   561,     0,     0,     0,     0,     0,
       0,     0,     0,  2123,  2124,     0,     0,  2092,     0,  2095,
       0,     0,  2128,     0,     0,     0,  2130,  -886,     0,     0,
    -886,  -886,  -886,     0,  -886,  -886,     0,     0,     0,     0,
       0,     0,   565,     0,   599,     0,     0,   246,   246,   246,
       0,   249,   249,     0,     0,     0,     0,     0,  2130,     0,
     248,     0,     0,   248,     0,     0,   251,     0,   246,   251,
     251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2166,     0,   705,     0,   565,
       0,  -886,     0,   705,     0,     0,   565,  -886,  -886,  -886,
       0,   731,     0,   565,   248,     0,     0,   562,     0,     0,
    -886,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -886,   248,     0,     0,  -886,  -886,
    -886,  -886,  -886,  -886,  -886,  -886,   248,   248,   248,   248,
       0,     0,     0,  -886,  -886,     0,  -886,  -886,  -886,     0,
       0,  -886,  -886,   565,  -886,  -886,  -886,  -886,     0,  1880,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   565,
     251,     0,     0,     0,     0,     0,     0,   251,   251,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,   251,
       0,     0,     0,     0,     0,     0,     0,     0,   599,     0,
     246,   246,     0,     0,   865,     0,   562,   251,   251,   251,
       0,     0,     0,     0,     0,   603,   865,     0,     0,     0,
     248,   248,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,   561,     0,     0,     0,   301,     0,     0,     0,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   955,
     310,     0,     0,   311,  1150,   312,  1881,     0,  1151,   248,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   246,     0,     0,     0,   251,     0,     0,   246,     0,
       0,   246,     0,   248,     0,     0,     0,     0,   248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   728,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   251,   251,   251,   251,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   251,     0,   251,     0,
       0,   248,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1668,     0,     0,     0,   248,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   603,
     251,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,   246,   246,   246,     0,     0,     0,  1712,
       0,     0,     0,     0,     0,     0,  1712,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     246,   246,   246,     0,     0,   251,   251,     0,     0,     0,
       0,     0,   251,   251,     0,     0,   251,   251,     0,     0,
       0,     0,     0,     0,   246,     0,     0,     0,     0,     0,
       0,  1215,  1225,     0,     0,  1215,  1225,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,   246,     0,     0,   246,     0,     0,   247,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   248,
       0,   728,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   247,     0,     0,     0,     0,     0,   247,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     247,     0,   247,     0,   247,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   561,     0,     0,     0,     0,     0,
       0,     0,     0,   248,   248,     0,     0,     0,     0,     0,
       0,     0,   247,   247,     0,     0,     0,     0,   246,     0,
       0,   246,   246,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   251,     0,     0,   251,
    1443,   561,     0,     0,     0,     0,     0,     0,   561,     0,
       0,  1443,     0,     0,     0,   561,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     251,     0,     0,   565,     0,   247,     0,     0,   247,   247,
     247,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   251,     0,     0,     0,   561,     0,     0,     0,   247,
       0,     0,   251,   251,   251,   251,     0,     0,     0,     0,
       0,   561,   246,     0,     0,     0,     0,     0,   247,   246,
     246,     0,     0,     0,   247,     0,     0,     0,     0,     0,
       0,   246,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   246,
     246,   246,     0,     0,     0,     0,     0,   599,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   565,     0,     0,     0,     0,   193,     0,     1,
       0,     0,     0,     0,     0,     0,   251,   251,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,   554,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,   247,
       0,   247,   247,     0,     0,   247,     0,     0,     0,     0,
       0,   199,    27,     0,     0,   251,     0,   247,     0,     0,
      28,    29,     0,     0,     0,    32,     0,   246,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,   252,
       0,     0,     0,     0,     0,     0,    43,    44,    45,   251,
       0,   555,  1038,     0,   251,     0,     0,     0,     0,     0,
     247,     0,   556,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   731,     0,     0,   246,   246,   246,   246,     0,
       0,     0,     0,   252,     0,     0,     0,     0,     0,   252,
       0,     0,     0,     0,     0,     0,     0,     0,   246,     0,
     246,   252,   247,   252,     0,   252,     0,     0,     0,   247,
       0,     0,   247,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   251,     0,     0,
       0,   599,   246,   252,   252,     0,     0,     0,     0,     0,
       0,     0,   251,   251,     0,     0,     0,     0,     0,     0,
       0,  1708,     0,     0,     0,     0,     0,     0,  1708,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   246,   246,     0,
       0,     0,     0,     0,   246,   246,     0,     0,   246,   246,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   252,     0,     0,   252,
     252,   252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     252,     0,     0,   247,   247,   247,   247,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   252,
       0,     0,     0,     0,     0,   252,     0,     0,     0,     0,
       0,   247,   247,   247,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   251,     0,   731,     0,     0,
       0,     0,     0,     0,     0,   247,     0,     0,     0,     0,
       0,     0,   247,   247,     0,     0,   247,   247,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   247,     0,     0,
       0,     0,     0,   247,     0,     0,   247,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   251,
     251,     0,     0,     0,     0,     0,     0,     0,   246,     0,
     252,   246,   252,   252,     0,     0,   252,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   246,     0,     0,   561,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   246,     0,     0,     0,     0,     0,   247,
       0,   252,   247,   247,   246,   246,   246,   246,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   247,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   247,     0,     0,     0,     0,     0,    85,     0,
       0,     0,     0,   252,     0,     0,     0,     0,     0,     0,
     252,     0,     0,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   561,     0,     0,     0,     0,     0,
       0,     0,     0,   114,   126,     0,     0,     0,   246,   246,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   247,     0,     0,     0,     0,     0,     0,
     247,   247,     0,     0,     0,   177,   126,     0,     0,     0,
     222,     0,   247,     0,     0,    85,     0,     0,     0,     0,
       0,     0,    85,    85,     0,     0,     0,     0,     0,     0,
     247,   247,   247,     0,     0,     0,     0,   246,   247,     0,
     371,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   380,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   252,   252,   252,   252,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   246,     0,     0,     0,     0,   246,     0,     0,     0,
       0,     0,   252,   252,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   521,   644,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   252,   537,     0,     0,
       0,     0,     0,   252,   252,     0,     0,   252,   252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   247,     0,
       0,   570,     0,     0,     0,     0,     0,     0,   252,     0,
       0,     0,     0,     0,   252,     0,     0,   252,   727,   246,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   246,   246,   403,     0,     0,     0,
       0,   126,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   177,     0,   247,   247,   247,   247,
       0,     0,     0,     0,   678,     0,    85,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   247,
       0,   247,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   403,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   247,   247,     0,     0,     0,     0,     0,     0,
     252,     0,     0,   252,   252,     0,     0,     0,     0,     0,
       0,     0,   247,   727,     0,     0,     0,     0,     0,   247,
       0,     0,   252,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   252,     0,     0,     0,     0,   247,   247,
       0,     0,     0,     0,     0,   247,   247,   246,     0,   247,
     247,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   686,   856,     0,     0,     0,     0,
       0,     0,     0,   403,     0,     0,     0,     0,     0,   403,
       0,     2,     0,     0,   126,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   252,     0,     0,     0,     0,     0,
       0,   252,   252,     0,     0,     0,     0,     0,     0,     0,
       0,   246,   246,   252,     0,     0,     0,     0,   295,   929,
       0,     0,   937,     0,   296,   297,   298,     0,     0,     0,
       0,   252,   252,   252,     0,     0,     0,   299,   300,   252,
       0,     0,     0,     0,     0,     0,     0,     0,   403,     0,
     403,   301,     0,     0,     0,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  1150,
     312,     0,     0,  1151,     0,   126,   126,   126,   313,   314,
    1902,   315,   316,   317,   318,   403,     0,     0,     0,     0,
       0,     0,     0,   126,   126,     0,     0,     0,     0,     0,
       0,     0,     0,  1130,     0,     0,     0,     0,     0,   247,
       0,     0,   247,  1043,     0,  1052,     0,  1148,     0,     0,
       0,     0,     0,     0,     0,     0,  1054,     0,   644,   644,
     644,   644,     0,     0,     0,     0,     0,     0,     0,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   247,     0,     0,     0,     0,     0,     0,
       0,     0,   537,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   247,   727,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   247,   247,   247,   247,     0,
       0,     0,     0,     0,     0,     0,   994,   252,   252,   252,
     252,     0,     0,  1148,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     252,     0,   252,     0,     0,     0,     0,     0,  1279,     0,
       0,     0,   403,     0,     0,  1174,     0,     0,     0,     0,
       0,   738,   678,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   252,   252,     0,     0,   765,     0,     0,
       0,     0,     0,     0,     0,     0,  1332,     0,  1222,   247,
     247,     0,  1222,   252,  1344,     0,     0,     0,     0,     0,
     252,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     856,     0,   403,     0,  1396,     0,     0,     0,     0,   252,
     252,     0,     0,     0,     0,   609,   252,   252,     0,     0,
     252,   252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   247,  1428,
    1432,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,   727,
       0,  1182,     0,     0,     0,     0,     0,     0,     0,     0,
     238,     0,   247,     0,     0,     0,     0,   247,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,     0,   239,
      38,   240,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   241,     0,     0,     0,     0,     0,
       0,   994,   856,  1435,    43,    44,     0,   994,     0,     0,
     994,     0,     0,     0,     0,     0,   242,   856,  1448,     0,
       0,     0,   726,     0,     0,  1455,     0,     0,   856,   114,
     126,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     247,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   247,   247,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   126,     0,
     252,     0,     0,   252,     0,     0,  1487,     0,     0,     0,
       0,     0,   570,     0,     0,     0,     0,     0,   126,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   929,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   403,   252,     0,   403,   403,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   252,     0,   726,     0,     0,
       0,     0,     0,  1127,   929,     0,   252,   252,   252,   252,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   644,     0,     0,   644,
    1606,  1608,     0,  1611,     0,     0,     0,     0,     0,     0,
       0,  1621,     0,     0,     0,   994,     0,   403,   247,  1630,
    1564,     0,     0,     0,     0,     0,  1148,     0,     0,  1572,
       0,     0,     0,     0,     0,     0,     0,   644,     0,     0,
       0,     0,     0,     0,  1148,     0,     0,   403,     0,  1148,
       0,   644,   644,   644,   644,     0,   403,     0,     0,     0,
     252,   252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   994,     0,   994,     0,     0,     0,
       0,     0,   247,   247,     0,     0,   738,     0,     0,  1679,
       0,     0,     0,     0,     0,  1688,     0,     0,     0,     0,
    1280,     0,     0,     0,     0,     0,     0,     0,     0,   252,
       0,     0,     0,     0,     0,     0,     0,     0,  1148,  1303,
    1307,  1311,  1315,  1319,     0,     0,  1328,  1334,     0,     0,
       0,     0,   738,     0,     0,  1345,     0,     0,     0,     0,
       0,     0,   403,     0,     0,     0,     0,  1369,  1373,  1377,
    1381,  1385,     0,   252,  1328,  1398,     0,  1129,   252,     0,
       0,   856,     0,     0,     0,  1148,     0,     0,     0,     0,
       0,  1147,     0,     0,     0,  1152,     0,     0,   856,     0,
    1222,     0,   994,     0,     0,     0,     0,     0,  1701,  1328,
    1328,     0,     0,   403,     0,     0,     0,     0,  1222,     0,
       0,     0,     0,     0,     0,  1222,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1148,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   726,
    1148,   252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1231,     0,     0,   252,   252,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1147,  1152,     0,
       0,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1148,  1278,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     0,     0,     0,   403,     0,   403,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1148,     0,     0,     0,  1148,     0,     0,
    1330,   403,     0,     0,     0,   295,     0,     0,  1343,     0,
       0,   296,   297,   298,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   994,   299,   300,     0,     0,  1394,     0,
     994,     0,     0,     0,   994,     0,     0,     0,   301,     0,
       0,     0,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  1150,   312,     0,   252,
    1151,     0,     0,  1426,  1430,   313,   314,  1905,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1775,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   726,     0,  1782,     0,     0,     0,     0,
       0,     0,  1785,     0,     0,     0,     0,     0,     0,     0,
     380,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1455,  1127,   570,   252,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1280,
       0,     0,     0,     0,     0,     0,  1345,     0,   644,   644,
       0,     0,  1148,     0,  1148,     0,     0,  1148,   644,     0,
       0,     0,     0,  1868,  1871,     0,  1873,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1148,     0,  1884,     0,
       0,     0,     0,   403,     0,     0,   403,     0,     0,     0,
       0,  1838,     0,     0,     0,     0,     0,   738,     0,     0,
       0,     0,     0,   738,     0,     0,     0,     0,     0,     0,
       0,   570,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1148,     0,   994,     0,     0,
       0,     0,     0,     0,  1148,     0,     0,   403,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   403,     0,
       0,     0,     0,     0,     0,     0,     0,  1735,     0,     0,
       0,     0,   290,   403,     1,   291,   100,   292,     0,   293,
     294,     0,   994,     0,   994,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,   994,     0,     0,  1605,  1607,     0,  1610,     0,     0,
       0,     0,     0,     0,     0,  1129,     0,     0,  1152,     0,
       0,     0,     0,  1629,     0,     0,     0,     0,     0,     0,
    1147,  1152,  1909,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,     0,     0,     0,  1147,  1152,
       0,     0,     0,  1147,   994,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     0,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  1150,   312,  1881,
       0,  1151,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,  1678,     0,  1148,     0,     0,     0,  1687,
       0,     0,  1435,     0,     0,     0,     0,     0,     0,   644,
    1148,     0,     0,     0,     0,     0,     0,  1148,     0,     0,
       0,  1873,  1147,  2023,  1785,     0,     0,     0,     0,     0,
       0,     0,  2029,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   403,     0,     0,   116,
     403,   403,   403,     0,     0,     0,   133,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   403,   403,     0,  1147,
    1152,     0,     0,     0,     0,   727,     0,     0,     0,   156,
     165,   188,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1948,  1952,     0,  1958,  1962,     0,     0,     0,
    1966,  1970,  1974,  1978,     0,     0,     0,     0,     0,     0,
       0,     0,  1948,  1952,  1958,  1962,  1966,  1970,  1974,  1978,
     119,  1147,     0,  1152,   403,     0,     0,     0,   116,   116,
       0,     0,     0,     0,  1147,  1152,  1701,     0,     0,     0,
     994,     0,     0,     0,     0,   484,     0,     0,     0,     0,
       0,   119,   119,     0,     0,     0,     0,     0,     0,     0,
       0,   515,     0,     0,     0,     0,  2084,  2087,     0,  1148,
       0,  1148,     0,     0,   644,  1148,   644,     0,     0,     0,
     116,     0,     0,     0,     0,  1147,     0,  1152,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     119,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   156,   559,  1147,     0,  1152,
       0,  1147,     0,  1152,     0,     0,     0,     0,     0,     0,
    1148,     0,     0,  1148,     0,     0,     0,     0,     0,     0,
       0,   644,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,     0,     0,     0,     0,   165,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   165,
       0,     0,   403,   403,     0,     0,  1148,     0,     0,   559,
       0,     0,   403,     0,     0,     0,     0,   567,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,     0,     0,
       0,     0,     0,     0,   994,     0,     0,  1735,   403,   403,
     119,     0,  1944,  1946,  1950,  1954,  1956,  1960,     0,     0,
     675,  1964,  1968,  1972,  1976,     0,     0,     0,     0,     0,
       0,     0,     0,  1946,  1950,  1956,  1960,  1964,  1968,  1972,
    1976,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1848,     0,     0,   116,     0,     0,     0,     0,     0,   116,
       0,     0,     0,     0,     0,     0,  1147,  1152,  1147,  1152,
       0,  1147,  1863,   193,     0,     1,     0,  1605,  1870,     0,
    1629,     0,  1152,     0,     0,     0,     0,     0,     0,     0,
    1147,  1152,  1629,     0,     0,     0,     0,     0,     0,   559,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,   119,     0,     0,     0,     0,     0,
     567,     0,     0,     0,   559,     0,     0,   199,    27,  1147,
    1152,     0,     0,     0,     0,     0,    28,    29,  1147,  1152,
     156,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,   854,  1038,     0,
     116,   116,   116,     0,   116,     0,     0,   116,   556,     0,
       0,     0,     0,     0,     0,   567,     0,     0,   116,   116,
     116,     0,     0,     1,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   515,     0,   559,     0,
     116,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,   116,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,   119,   119,   119,     0,   119,     0,     0,   675,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,   119,
     119,   119,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,   119,
       0,   567,     0,     0,     0,     0,     0,     0,     0,  1147,
      40,     0,     0,     0,   567,     0,     0,     0,     0,     0,
      43,    44,    45,     0,  1147,   854,     0,     0,     0,  1152,
       0,  1147,  1863,     0,  1152,  1629,   556,  2022,     0,  2024,
       0,     0,     0,  1170,     0,  1152,  2028,     0,     0,     0,
       0,   116,     0,     0,     0,     0,     0,   559,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   726,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,   675,     0,     0,     0,     0,     0,   675,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1107,  1108,  1109,   619,  1110,  1111,  1112,  1113,   624,
     625,  1114,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,   299,   300,  1115,     0,   628,   629,   630,
    2083,  2086,     0,  1147,  1152,  1147,     0,   301,     0,  1147,
    1863,   302,   303,   304,   305,   306,   307,   308,   309,    43,
      44,   310,     0,     0,   311,  1150,   312,   631,     0,  1151,
       0,   242,     0,   632,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,   156,     0,   559,  1147,  1152,     0,  1147,  1863,     0,
     559,     0,  2129,     0,     0,   559,     0,     0,     0,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
    1147,     0,     0,   116,     0,     0,     0,   238,     0,     0,
       0,     0,   116,     0,     0,    28,    29,   559,     0,     0,
      32,     0,     0,   116,   567,     0,   239,    38,   240,     0,
       0,   567,     0,   559,     0,     0,   119,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,     0,     0,  1212,     0,   290,     0,
       1,   291,   100,   292,     0,   293,   294,  1213,     0,     0,
       0,     0,     0,     0,   119,     0,     0,     0,     0,   559,
       0,     0,     0,   567,     0,     2,     0,     0,   567,     0,
       0,     0,     0,     0,   119,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   567,     0,     0,     0,     0,  1107,
    1108,  1109,   619,  1110,  1111,  1112,  1113,   624,   625,  1114,
       0,     0,   295,     0,     0,   116,   116,     0,   296,   297,
     298,     0,     0,     0,     0,   116,    32,   116,     0,     0,
       0,   299,   300,  1115,     0,   628,   629,   630,     0,     0,
     567,     0,     0,     0,     0,   301,     0,     0,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   311,     0,   312,   631,     0,     0,     0,   242,
       0,   632,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,     0,   119,   119,     0,     0,
       0,     0,     0,     0,     0,     0,   567,     0,   567,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   116,     0,   116,
       0,  -362,   745,     0,  -362,  -362,  -362,  -362,   746,   747,
     748,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,     0,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,     0,     0,  -362,  -362,   675,  -362,
     675,     0,  -362,  -362,  -362,  -362,  -362,     0,     0,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,     0,  -362,     0,  -362,
    -362,  -362,     0,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,   749,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,   750,  -362,  -362,   751,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,     0,     0,
       0,   745,     0,     0,     0,     0,     0,   746,   747,   748,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -362,     0,     0,     0,
       0,     0,     0,     0,  -362,  -362,     0,     0,     0,  -362,
       0,     0,     0,     0,     0,  -362,  -362,  -362,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -362,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -362,  -362,  -362,  -362,  -362,   749,     0,     0,  -362,  1545,
    -362,  -362,     0,   750,     0,     0,   751,     0,  -362,  -362,
    -362,   116,  -362,  -362,  -362,  -362,  -362,     0,   116,     0,
       0,     0,     0,     0,     0,   116,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2026,     0,     1,   291,
     100,   292,     0,   293,   294,   116,     0,   559,     0,     0,
     116,     0,     0,   116,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   567,     0,     0,     0,     0,     0,     0,   567,
       0,     0,     0,     0,     0,     0,   119,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,     0,
       0,     0,     0,     0,     0,     0,   567,     0,   567,   299,
     300,   567,     0,     0,   567,     0,     0,   116,     0,     0,
       0,     0,     0,   301,     0,   116,     0,   302,   303,   304,
     305,   306,   307,   308,   309,     0,   559,   310,     0,     0,
     311,  1150,   312,  1881,     0,  1151,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -469,  1143,     0,  -469,  -469,  -469,  -469,   119,  -469,
    -469,     0,     0,     0,     0,     0,   567,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   567,     0,  -469,
    -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,     0,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,  -469,     0,     0,  -469,  -469,     0,  -469,
       0,     0,  -469,  -469,  -469,  -469,  -469,     0,     0,  -469,
    -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,  -469,  -469,  -469,     0,  -469,     0,  -469,
    -469,  -469,     0,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,  -469,     0,     0,  -469,  -469,  -469,  -469,
       0,  -469,  -469,  -469,  1144,  -469,  -469,  -469,     0,  -469,
    -469,  -469,  -469,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   116,   116,     0,   116,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   116,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   567,   567,     0,   567,
       0,  -364,  1196,     0,  -364,  -364,  -364,  -364,  1197,  1198,
    1199,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,   119,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,     0,     0,  -364,  -364,     0,  -364,
       0,     0,  -364,  -364,  -364,  -364,  -364,     0,     0,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,     0,  -364,     0,  -364,
    -364,  -364,     0,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  1200,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  1201,  -364,  -364,  1202,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -469,  1143,
       0,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,     0,
    -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,     0,     0,  -469,  -469,     0,  -469,     0,     0,  -469,
    -469,  -469,  -469,  -469,     0,     0,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,     0,  -469,     0,  -469,  -469,  -469,     0,
    -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,  -469,
    -469,  -469,  -469,  -469,  -469,  -302,   290,     0,     1,   291,
     100,   292,  -302,   293,   294,  -302,  -302,  -302,  -302,  -302,
    -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,
    -302,  -302,  -302,     2,  -302,  -302,  -302,  -302,  -302,  -302,
    -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,
    -302,  -302,  -302,  -302,  -302,  -302,     0,  -302,  -302,  -302,
    -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,     0,     0,
     295,  -302,     0,  -302,     0,     0,   296,   297,   298,  -302,
    -302,     0,     0,  -302,  -302,  -302,  -302,  -302,  -302,   299,
     300,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,  -302,
       0,  -302,     0,   301,  -302,  -302,     0,   302,   303,   304,
     305,   306,   307,   308,   309,  -302,  -302,   310,  -302,  -302,
     311,  1246,   312,  -302,  -302,  1146,  -302,  -302,  -302,  -302,
     313,   314,  -302,   315,   316,   317,   318,  -302,  -302,  -302,
    -302,  -302,  -303,   290,     0,     1,   291,   100,   292,  -303,
     293,   294,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
       2,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,     0,  -303,  -303,  -303,  -303,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,     0,     0,   295,  -303,     0,
    -303,     0,     0,   296,   297,   298,  -303,  -303,     0,     0,
    -303,  -303,  -303,  -303,  -303,  -303,   299,   300,  -303,  -303,
    -303,  -303,  -303,  -303,  -303,  -303,  -303,     0,  -303,     0,
     301,  -303,  -303,     0,   302,   303,   304,   305,   306,   307,
     308,   309,  -303,  -303,   310,  -303,  -303,   311,  1150,   312,
    -303,  -303,  1151,  -303,  -303,  -303,  -303,   313,   314,  -303,
     315,   316,   317,   318,  -303,  -303,  -303,  -303,  -303,  -598,
     290,     0,     1,   291,   100,   292,  -598,   293,   294,  -598,
    -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
    -598,  -598,  -598,  -598,  -598,  -598,  -598,     2,  -598,  -598,
    -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
    -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
       0,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,  -598,
    -598,  -598,     0,     0,   295,  -598,     0,  -598,     0,     0,
     296,   297,   298,  -598,  -598,     0,     0,  -598,  -598,  -598,
    -598,  -598,  -598,   299,   300,  -598,  -598,  -598,  -598,  -598,
    -598,  -598,  -598,  -598,     0,  -598,     0,   301,  -598,  -598,
       0,   302,   303,   304,   305,   306,   307,   308,   309,  -598,
    -598,   310,  -598,  -598,   311,  -598,   312,  -598,  -598,  -598,
    -598,   735,  -598,  1327,   313,   314,  -598,   315,   316,   317,
     318,  -598,  -598,  -598,  -598,  -598,  -599,   290,     0,     1,
     291,   100,   292,  -599,   293,   294,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,  -599,     2,  -599,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,
    -599,  -599,  -599,  -599,  -599,  -599,  -599,     0,  -599,  -599,
    -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,     0,
       0,   295,  -599,     0,  -599,     0,     0,   296,   297,   298,
    -599,  -599,     0,     0,  -599,  -599,  -599,  -599,  -599,  -599,
     299,   300,  -599,  -599,  -599,  -599,  -599,  -599,  -599,  -599,
    -599,     0,  -599,     0,   301,  -599,  -599,     0,   302,   303,
     304,   305,   306,   307,   308,   309,  -599,  -599,   310,  -599,
    -599,   311,  -599,   312,  -599,  -599,  -599,  -599,   735,  -599,
    1393,   313,   314,  -599,   315,   316,   317,   318,  -599,  -599,
    -599,  -599,  -599,  -609,   290,     0,     1,   291,   100,   292,
    -609,   293,   294,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,     2,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,     0,  -609,  -609,  -609,  -609,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,     0,     0,   295,  -609,
       0,  -609,     0,     0,   296,   297,   298,  -609,  -609,     0,
       0,  -609,  -609,  -609,  -609,  -609,  -609,   299,   300,  -609,
    -609,  -609,  -609,  -609,  -609,  -609,  -609,  -609,     0,  -609,
       0,   301,  -609,  -609,     0,   302,   303,   304,   305,   306,
     307,   308,   309,  -609,  -609,   310,  -609,  -609,   311,  -609,
     312,  -609,  -609,  1146,  -609,  -609,  -609,  -609,   313,   314,
    -609,   315,   316,   317,   318,  -609,  -609,  -609,  -609,  -609,
    -611,   290,     0,     1,   291,   100,   292,  -611,   293,   294,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,     2,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,     0,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,     0,     0,   295,  -611,     0,  -611,     0,
       0,   296,   297,   298,  -611,  -611,     0,     0,  -611,  -611,
    -611,  -611,  -611,  -611,   299,   300,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,     0,  -611,     0,   301,  -611,
    -611,     0,   302,   303,   304,   305,   306,   307,   308,   309,
    -611,  -611,   310,  -611,  -611,   311,  1150,   312,  -611,  -611,
    1151,  -611,  -611,  -611,  -611,   313,   314,  -611,   315,   316,
     317,   318,  -611,  -611,  -611,  -611,  -611,  -610,   290,     0,
       1,   291,   100,   292,  -610,   293,   294,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,     2,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,     0,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
       0,     0,   295,  -610,     0,  -610,     0,     0,   296,   297,
     298,  -610,  -610,     0,     0,  -610,  -610,  -610,  -610,  -610,
    -610,   299,   300,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,     0,  -610,     0,   301,  -610,  -610,     0,   302,
     303,   304,   305,   306,   307,   308,   309,  -610,  -610,   310,
    -610,  -610,   311,  -610,   312,  -610,  -610,  1146,  -610,  -610,
    -610,  -610,   313,   314,  -610,   315,   316,   317,   318,  -610,
    -610,  -610,  -610,  -610,  -355,  1898,     0,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,     0,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,     0,     0,  -355,
    -355,     0,  -355,     0,     0,  -355,  -355,  -355,  -355,  -355,
       0,     0,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,     0,
    -355,     0,  -355,  -355,  -355,     0,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,  -355,
    -355,  -360,  1941,     0,  -360,  -360,  -360,  -360,  -360,  -360,
    -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,
    -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,
    -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,
    -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,
    -360,  -360,     0,  -360,  -360,  -360,  -360,  -360,  -360,  -360,
    -360,  -360,  -360,  -360,     0,     0,  -360,  -360,     0,  -360,
       0,     0,  -360,  -360,  -360,  -360,  -360,     0,     0,  -360,
    -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,
    -360,  -360,  -360,  -360,  -360,  -360,     0,  -360,     0,  -360,
    -360,  -360,     0,  -360,  -360,  -360,  -360,  -360,  -360,  -360,
    -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,
    -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,
    -360,  -360,  -360,  -360,  -360,  -360,  -360,  -360,  -348,   290,
       0,     1,   291,   100,   292,  -348,   293,   294,  -348,  -348,
    -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,
    -348,  -348,  -348,  -348,  -348,  -348,     2,  -348,  -348,  -348,
    -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,
    -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,     0,
    -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,
    -348,     0,     0,   295,  -348,     0,  -348,     0,     0,   296,
     297,   298,  -348,  -348,     0,     0,  -348,  -348,  -348,  -348,
    -348,  -348,   299,   300,  -348,  -348,  -348,  -348,  -348,  -348,
    -348,  -348,  -348,     0,  -348,     0,   301,  -348,  -348,     0,
     302,   303,   304,   305,   306,   307,   308,   309,  -348,  -348,
     310,  -348,  -348,   311,  -348,   312,  -348,  -348,  -348,  -348,
     735,  -348,  -348,   313,   314,  -348,   315,   316,   317,   318,
    -348,  -348,  -348,  -348,  -348,  -576,   290,     0,     1,   291,
     100,   292,  -576,   293,   294,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,     2,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,     0,  -576,  -576,  -576,
    -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,     0,     0,
     295,  -576,     0,  -576,     0,     0,   296,   297,   298,  -576,
    -576,     0,     0,  -576,  -576,  -576,  -576,  -576,  -576,   299,
     300,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,  -576,
       0,  -576,     0,   301,  -576,  -576,     0,   302,   303,   304,
     305,   306,   307,   308,   309,  -576,  -576,   310,  -576,  -576,
     311,  -576,   312,  -576,  -576,  -576,  -576,   735,  -576,  -576,
     313,   314,  -576,   315,   316,   317,   318,  -576,  -576,  -576,
    -576,  -576,  -584,   290,     0,     1,   291,   100,   292,  -584,
     293,   294,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
       2,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,     0,  -584,  -584,  -584,  -584,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,     0,     0,   295,  -584,     0,
    -584,     0,     0,   296,   297,   298,  -584,  -584,     0,     0,
    -584,  -584,  -584,  -584,  -584,  -584,   299,   300,  -584,  -584,
    -584,  -584,  -584,  -584,  -584,  -584,  -584,     0,  -584,     0,
     301,  -584,  -584,     0,   302,   303,   304,   305,   306,   307,
     308,   309,  -584,  -584,   310,  -584,  -584,   311,  -584,   312,
    -584,  -584,  -584,  -584,   735,  -584,  -584,   313,   314,  -584,
     315,   316,   317,   318,  -584,  -584,  -584,  -584,  -584,  -577,
     290,     0,     1,   291,   100,   292,  -577,   293,   294,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,     2,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
       0,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,     0,     0,   295,  -577,     0,  -577,     0,     0,
     296,   297,   298,  -577,  -577,     0,     0,  -577,  -577,  -577,
    -577,  -577,  -577,   299,   300,  -577,  -577,  -577,  -577,  -577,
    -577,  -577,  -577,  -577,     0,  -577,     0,   301,  -577,  -577,
       0,   302,   303,   304,   305,   306,   307,   308,   309,  -577,
    -577,   310,  -577,  -577,   311,  -577,   312,  -577,  -577,  -577,
    -577,   735,  -577,  -577,   313,   314,  -577,   315,   316,   317,
     318,  -577,  -577,  -577,  -577,  -577,  -585,   290,     0,     1,
     291,   100,   292,  -585,   293,   294,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,     2,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,     0,  -585,  -585,
    -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,     0,
       0,   295,  -585,     0,  -585,     0,     0,   296,   297,   298,
    -585,  -585,     0,     0,  -585,  -585,  -585,  -585,  -585,  -585,
     299,   300,  -585,  -585,  -585,  -585,  -585,  -585,  -585,  -585,
    -585,     0,  -585,     0,   301,  -585,  -585,     0,   302,   303,
     304,   305,   306,   307,   308,   309,  -585,  -585,   310,  -585,
    -585,   311,  -585,   312,  -585,  -585,  -585,  -585,   735,  -585,
    -585,   313,   314,  -585,   315,   316,   317,   318,  -585,  -585,
    -585,  -585,  -585,  -578,   290,     0,     1,   291,   100,   292,
    -578,   293,   294,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,     2,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     0,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,     0,     0,   295,  -578,
       0,  -578,     0,     0,   296,   297,   298,  -578,  -578,     0,
       0,  -578,  -578,  -578,  -578,  -578,  -578,   299,   300,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,     0,  -578,
       0,   301,  -578,  -578,     0,   302,   303,   304,   305,   306,
     307,   308,   309,  -578,  -578,   310,  -578,  -578,   311,  -578,
     312,  -578,  -578,  -578,  -578,   735,  -578,  -578,   313,   314,
    -578,   315,   316,   317,   318,  -578,  -578,  -578,  -578,  -578,
    -586,   290,     0,     1,   291,   100,   292,  -586,   293,   294,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,     2,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,     0,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,     0,     0,   295,  -586,     0,  -586,     0,
       0,   296,   297,   298,  -586,  -586,     0,     0,  -586,  -586,
    -586,  -586,  -586,  -586,   299,   300,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,     0,  -586,     0,   301,  -586,
    -586,     0,   302,   303,   304,   305,   306,   307,   308,   309,
    -586,  -586,   310,  -586,  -586,   311,  -586,   312,  -586,  -586,
    -586,  -586,   735,  -586,  -586,   313,   314,  -586,   315,   316,
     317,   318,  -586,  -586,  -586,  -586,  -586,  -579,   290,     0,
       1,   291,   100,   292,  -579,   293,   294,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,     2,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,     0,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
       0,     0,   295,  -579,     0,  -579,     0,     0,   296,   297,
     298,  -579,  -579,     0,     0,  -579,  -579,  -579,  -579,  -579,
    -579,   299,   300,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,     0,  -579,     0,   301,  -579,  -579,     0,   302,
     303,   304,   305,   306,   307,   308,   309,  -579,  -579,   310,
    -579,  -579,   311,  -579,   312,  -579,  -579,  -579,  -579,   735,
    -579,  -579,   313,   314,  -579,   315,   316,   317,   318,  -579,
    -579,  -579,  -579,  -579,  -587,   290,     0,     1,   291,   100,
     292,  -587,   293,   294,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,     2,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,     0,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,     0,     0,   295,
    -587,     0,  -587,     0,     0,   296,   297,   298,  -587,  -587,
       0,     0,  -587,  -587,  -587,  -587,  -587,  -587,   299,   300,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,     0,
    -587,     0,   301,  -587,  -587,     0,   302,   303,   304,   305,
     306,   307,   308,   309,  -587,  -587,   310,  -587,  -587,   311,
    -587,   312,  -587,  -587,  -587,  -587,   735,  -587,  -587,   313,
     314,  -587,   315,   316,   317,   318,  -587,  -587,  -587,  -587,
    -587,  -357,  2042,     0,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,     0,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,     0,     0,  -357,  -357,     0,  -357,
       0,     0,  -357,  -357,  -357,  -357,  -357,     0,     0,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,     0,  -357,     0,  -357,
    -357,  -357,     0,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -356,  2043,
       0,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,     0,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,     0,     0,  -356,  -356,     0,  -356,     0,     0,  -356,
    -356,  -356,  -356,  -356,     0,     0,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,     0,  -356,     0,  -356,  -356,  -356,     0,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,  -356,
    -356,  -356,  -356,  -356,  -356,  -362,   745,     0,  -362,  -362,
    -362,  -362,   746,   747,   748,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,     0,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,     0,     0,
    -362,  -362,     0,  -362,     0,     0,  -362,  -362,  -362,  -362,
    -362,     0,     0,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
       0,  -362,     0,  -362,  -362,  -362,     0,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
     749,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  1141,  -362,
    -362,   751,     0,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362, -1105,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105,     0, -1105, -1105, -1105, -1105, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105,     0,     0,   295, -1105,     0,
   -1105,     0,     0,   296,   297,   298, -1105, -1105,     0,     0,
   -1105, -1105, -1105, -1105, -1105, -1105,   299,   300, -1105, -1105,
   -1105, -1105, -1105, -1105, -1105, -1105, -1105,     0, -1105,     0,
     301, -1105, -1105,     0,   302,   303,   304,   305,   306,   307,
     308,   309, -1105, -1105,   310,     0,     0,   311,  1150,   312,
   -1105,     0,  1151, -1105, -1105,     0, -1105,   313,   314,     0,
     315,   316,   317,   318, -1238,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1238, -1238, -1238, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238, -1238, -1238,     0, -1238, -1238, -1238, -1238,
   -1238, -1238, -1238, -1238, -1238, -1238, -1238,     0,     0,   295,
   -1238,     0, -1238,     0,     0,   296,   297,   298, -1238, -1238,
       0,     0, -1238, -1238, -1238, -1238, -1238, -1238,   299,   300,
   -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238, -1238,     0,
   -1238,     0,   301, -1238, -1238,     0,   302,   303,   304,   305,
     306,   307,   308,   309, -1238, -1238,   310,     0,     0,   311,
    1150,   312,  1636,     0,  1151, -1238, -1238,     0, -1238,   313,
     314,     0,   315,   316,   317,   318, -1196,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1196, -1196, -1196, -1196, -1196,
   -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196,
   -1196, -1196, -1196, -1196, -1196, -1196, -1196,     0, -1196, -1196,
   -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196,     0,
       0,   295, -1196,     0, -1196,     0,     0,   296,   297,   298,
   -1196, -1196,     0,     0, -1196, -1196, -1196, -1196, -1196, -1196,
     299,   300, -1196, -1196, -1196, -1196, -1196, -1196, -1196, -1196,
   -1196,     0, -1196,     0,   301, -1196, -1196,     0,   302,   303,
     304,   305,   306,   307,   308,   309, -1196, -1196,   310,     0,
       0,   311,  1857,   312, -1196,     0,  1151, -1196, -1196,     0,
   -1196,   313,   314,     0,   315,   316,   317,   318, -1227,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1227, -1227, -1227,
   -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227,
   -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227, -1227,     0,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,     0,     0,   295, -1227,     0, -1227,     0,     0,   296,
     297,   298, -1227, -1227,     0,     0, -1227,    32, -1227, -1227,
   -1227, -1227,   299,   300,  1115, -1227,   628,   629,   630, -1227,
   -1227, -1227, -1227,     0, -1227,     0,   301, -1227, -1227,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,  1150,   312,   631,     0,  1151, -1227,
     242,     0,   632,   313,   314,     0,   315,   316,   317,   318,
    -610,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,     0,  -610,  -610,  -610,  -610,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,     0,     0,   295,  -610,     0,  -610,     0,
       0,   296,   297,   298,  -610,  -610,     0,     0,  -610,  -610,
    -610,  -610,  -610,  -610,   299,   300,  -610,  -610,  -610,  -610,
    -610,  -610,  -610,  -610,  -610,     0,  -610,     0,   301,  -610,
    -610,     0,   302,   303,   304,   305,   306,   307,   308,   309,
    -610,  -610,   310,     0,     0,   311,  -610,   312,  1145,     0,
    1146,  -610,  -610,     0,  -610,   313,   314,     0,   315,   316,
     317,   318, -1219,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219,
   -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219, -1219,
   -1219, -1219, -1219,     0, -1219, -1219, -1219, -1219, -1219, -1219,
   -1219, -1219, -1219, -1219, -1219,     0,     0,   295, -1219,     0,
   -1219,     0,     0,   296,   297,   298, -1219, -1219,     0,     0,
   -1219, -1219, -1219, -1219, -1219, -1219,   299,   300, -1219, -1219,
   -1219, -1219, -1219, -1219, -1219, -1219, -1219,     0, -1219,     0,
     301, -1219, -1219,     0,   302,   303,   304,   305,   306,   307,
     308,   309, -1219, -1219,   310,     0,     0,   311,  2088,   312,
   -1219,     0,  1146, -1219, -1219,     0, -1219,   313,   314,     0,
     315,   316,   317,   318, -1220,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1220, -1220, -1220, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220,     0, -1220, -1220, -1220, -1220,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220,     0,     0,   295,
   -1220,     0, -1220,     0,     0,   296,   297,   298, -1220, -1220,
       0,     0, -1220, -1220, -1220, -1220, -1220, -1220,   299,   300,
   -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220, -1220,     0,
   -1220,     0,   301, -1220, -1220,     0,   302,   303,   304,   305,
     306,   307,   308,   309, -1220, -1220,   310,     0,     0,   311,
    1150,   312,  2089,     0,  1151, -1220, -1220,     0, -1220,   313,
     314,     0,   315,   316,   317,   318, -1214,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1214, -1214, -1214, -1214, -1214,
   -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214,
   -1214, -1214, -1214, -1214, -1214, -1214, -1214,     0,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,     0,
       0,   295, -1214,     0, -1214,     0,     0,   296,   297,   298,
   -1214, -1214,     0,     0, -1214,    32, -1214, -1214, -1214, -1214,
     299,   300,  1115, -1214,   628,   629,   630, -1214, -1214, -1214,
   -1214,     0, -1214,     0,   301, -1214, -1214,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,  1150,   312,   631,     0,  1151, -1214,   242,     0,
     632,   313,   314,     0,   315,   316,   317,   318, -1162,   607,
       0, -1162, -1162, -1162, -1162,     0, -1162, -1162,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1162, -1162, -1162, -1162,
   -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162,
   -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162,     0,
   -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162,
   -1162,     0,     0, -1162, -1162,     0, -1162,     0,     0, -1162,
   -1162, -1162, -1162, -1162,     0,     0, -1162, -1162, -1162, -1162,
   -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162,
   -1162, -1162, -1162,     0, -1162,     0, -1162, -1162, -1162,     0,
   -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162, -1162,
   -1162,     0,     0, -1162,     0, -1162,   608,     0, -1162, -1162,
   -1162,     0, -1162, -1162, -1162,     0, -1162, -1162, -1162, -1162,
   -1185,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,     0,     0,   295,   238,     0, -1185,     0,
       0,   296,   297,   298,    28,    29,     0,     0, -1185,    32,
   -1185, -1185, -1185, -1185,   299,   392,   627,   240,   628,   629,
     630, -1185, -1185, -1185, -1185,     0, -1185,     0,   301, -1185,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   631,     0,
   -1185, -1185,   242,     0,   632,   313,   314,     0,   315,   316,
     317,   318, -1163,   607,     0, -1163, -1163, -1163, -1163,     0,
   -1163, -1163,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1163, -1163, -1163, -1163, -1163, -1163, -1163, -1163, -1163, -1163,
   -1163, -1163, -1163, -1163, -1163, -1163, -1163, -1163, -1163, -1163,
   -1163, -1163, -1163,     0, -1163, -1163, -1163, -1163, -1163, -1163,
   -1163, -1163, -1163, -1163, -1163,     0,     0, -1163, -1163,     0,
   -1163,     0,     0, -1163, -1163, -1163, -1163, -1163,     0,     0,
   -1163, -1163, -1163, -1163, -1163, -1163, -1163, -1163, -1163, -1163,
   -1163, -1163, -1163, -1163, -1163, -1163, -1163,     0, -1163,     0,
   -1163, -1163, -1163,     0, -1163, -1163, -1163, -1163, -1163, -1163,
   -1163, -1163, -1163, -1163, -1163,     0,     0, -1163,     0, -1163,
     608,     0, -1163, -1163, -1163,     0, -1163, -1163, -1163,     0,
   -1163, -1163, -1163, -1163, -1224,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1224, -1224, -1224, -1224, -1224, -1224, -1224,
   -1224, -1224, -1224, -1224, -1224, -1224, -1224, -1224, -1224, -1224,
   -1224, -1224, -1224, -1224, -1224,     0,  1107,  1108,  1109,   619,
    1110,  1111,  1112,  1113,   624,   625,  1114,     0,     0,   295,
   -1224,     0, -1224,     0,     0,   296,   297,   298, -1224, -1224,
       0,     0, -1224,    32, -1224, -1224, -1224, -1224,   299,   300,
    1115, -1224,   628,   629,   630, -1224, -1224, -1224, -1224,     0,
   -1224,     0,   301, -1224, -1224,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,   631,     0, -1224, -1224,   242,     0,   632,   313,
     314,     0,   315,   316,   317,   318, -1240,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240,     0, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,     0,
       0,   295, -1240,     0, -1240,     0,     0,   296,   297,   298,
   -1240, -1240,     0,     0, -1240, -1240, -1240, -1240, -1240, -1240,
     299,   300, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240,     0, -1240,     0,   301, -1240, -1240,     0,   302,   303,
     304,   305,   306,   307,   308,   309, -1240, -1240,   310,     0,
       0,   311,     0,   312,  1126,     0, -1240, -1240,   735,     0,
   -1240,   313,   314,     0,   315,   316,   317,   318, -1175,  1153,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,     0,     0,   295,   238,     0, -1175,     0,     0,   296,
     297,   298,    28,    29,     0,     0, -1175,    32, -1175, -1175,
   -1175, -1175,   299,   392,   627,   240,   628,   629,   630, -1175,
   -1175, -1175, -1175,     0, -1175,     0,   301, -1175,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   631,     0, -1175, -1175,
     242,     0,   632,   313,   314,     0,   315,   316,   317,   318,
   -1179,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,     0,     0,   295,   238,     0, -1179,     0,
       0,   296,   297,   298,    28,    29,     0,     0, -1179,    32,
   -1179, -1179, -1179, -1179,   299,   392,   627,   240,   628,   629,
     630, -1179, -1179, -1179, -1179,     0, -1179,     0,   301, -1179,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   631,     0,
   -1179, -1179,   242,     0,   632,   313,   314,     0,   315,   316,
     317,   318, -1174,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,     0,     0,   295,   238,     0,
   -1174,     0,     0,   296,   297,   298,    28,    29,     0,     0,
   -1174,    32, -1174, -1174, -1174, -1174,   299,   392,   627,   240,
     628,   629,   630, -1174, -1174, -1174, -1174,     0, -1174,     0,
     301, -1174,   241,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,     0,   312,
     631,     0, -1174, -1174,   242,     0,   632,   313,   314,     0,
     315,   316,   317,   318, -1178,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,     0,     0,   295,
     238,     0, -1178,     0,     0,   296,   297,   298,    28,    29,
       0,     0, -1178,    32, -1178, -1178, -1178, -1178,   299,   392,
     627,   240,   628,   629,   630, -1178, -1178, -1178, -1178,     0,
   -1178,     0,   301, -1178,   241,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,   631,     0, -1178, -1178,   242,     0,   632,   313,
     314,     0,   315,   316,   317,   318, -1092,  1166,     0, -1092,
   -1092, -1092, -1092,     0, -1092, -1092,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1092, -1092, -1092, -1092, -1092, -1092,
   -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092,
   -1092, -1092, -1092, -1092, -1092, -1092, -1092,     0, -1092, -1092,
   -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092,     0,
       0, -1092, -1092,     0, -1092,     0,     0, -1092, -1092, -1092,
   -1092, -1092,     0,     0, -1092, -1092, -1092, -1092, -1092, -1092,
   -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092,
   -1092,     0, -1092,     0, -1092, -1092, -1092,     0, -1092, -1092,
   -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092, -1092,     0,
       0, -1092,     0, -1092, -1092,     0, -1092, -1092, -1092,     0,
   -1092, -1092, -1092,     0, -1092, -1092, -1092, -1092, -1094,  1167,
       0, -1094, -1094, -1094, -1094,     0, -1094, -1094,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,     0,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094,     0,     0, -1094, -1094,     0, -1094,     0,     0, -1094,
   -1094, -1094, -1094, -1094,     0,     0, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094,     0, -1094,     0, -1094, -1094, -1094,     0,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094,     0,     0, -1094,     0, -1094, -1094,     0, -1094, -1094,
   -1094,     0, -1094, -1094, -1094,     0, -1094, -1094, -1094, -1094,
   -1134,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1134,
   -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,
   -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134, -1134,
   -1134,     0,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,     0,     0,   295, -1134,     0, -1134,     0,
       0,   296,   297,   298, -1134, -1134,     0,     0, -1134,    32,
   -1134, -1134, -1134, -1134,   299,   300,  1115, -1134,   628,   629,
     630, -1134, -1134, -1134, -1134,     0, -1134,     0,   301, -1134,
   -1134,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   631,     0,
   -1134, -1134,   242,     0,   632,   313,   314,     0,   315,   316,
     317,   318, -1136,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136,
   -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136,
   -1136, -1136, -1136,     0,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,     0,     0,   295, -1136,     0,
   -1136,     0,     0,   296,   297,   298, -1136, -1136,     0,     0,
   -1136,    32, -1136, -1136, -1136, -1136,   299,   300,  1115, -1136,
     628,   629,   630, -1136, -1136, -1136, -1136,     0, -1136,     0,
     301, -1136, -1136,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,     0,   312,
     631,     0, -1136, -1136,   242,     0,   632,   313,   314,     0,
     315,   316,   317,   318, -1176,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,     0,     0,   295,
     238,     0, -1176,     0,     0,   296,   297,   298,    28,    29,
       0,     0, -1176,    32, -1176, -1176, -1176, -1176,   299,   392,
     627,   240,   628,   629,   630, -1176, -1176, -1176, -1176,     0,
   -1176,     0,   301, -1176,   241,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,   631,     0, -1176, -1176,   242,     0,   632,   313,
     314,     0,   315,   316,   317,   318, -1180,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,     0,
       0,   295,   238,     0, -1180,     0,     0,   296,   297,   298,
      28,    29,     0,     0, -1180,    32, -1180, -1180, -1180, -1180,
     299,   392,   627,   240,   628,   629,   630, -1180, -1180, -1180,
   -1180,     0, -1180,     0,   301, -1180,   241,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,   631,     0, -1180, -1180,   242,     0,
     632,   313,   314,     0,   315,   316,   317,   318, -1177,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,     0,     0,   295,   238,     0, -1177,     0,     0,   296,
     297,   298,    28,    29,     0,     0, -1177,    32, -1177, -1177,
   -1177, -1177,   299,   392,   627,   240,   628,   629,   630, -1177,
   -1177, -1177, -1177,     0, -1177,     0,   301, -1177,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   631,     0, -1177, -1177,
     242,     0,   632,   313,   314,     0,   315,   316,   317,   318,
   -1181,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,     0,     0,   295,   238,     0, -1181,     0,
       0,   296,   297,   298,    28,    29,     0,     0, -1181,    32,
   -1181, -1181, -1181, -1181,   299,   392,   627,   240,   628,   629,
     630, -1181, -1181, -1181, -1181,     0, -1181,     0,   301, -1181,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   631,     0,
   -1181, -1181,   242,     0,   632,   313,   314,     0,   315,   316,
     317,   318, -1172,   607,     0, -1172, -1172, -1172, -1172,     0,
   -1172, -1172,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172,     0, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172, -1172, -1172,     0,     0, -1172, -1172,     0,
   -1172,     0,     0, -1172, -1172, -1172, -1172, -1172,     0,     0,
   -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172, -1172, -1172, -1172, -1172,     0, -1172,     0,
   -1172, -1172, -1172,     0, -1172, -1172, -1172, -1172, -1172, -1172,
   -1172, -1172, -1172, -1172, -1172,     0,     0, -1172,     0, -1172,
     608,     0, -1172, -1172, -1172,     0, -1172, -1172, -1172,     0,
   -1172, -1172, -1172, -1172, -1173,   607,     0, -1173, -1173, -1173,
   -1173,     0, -1173, -1173,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173,
   -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173,
   -1173, -1173, -1173, -1173, -1173,     0, -1173, -1173, -1173, -1173,
   -1173, -1173, -1173, -1173, -1173, -1173, -1173,     0,     0, -1173,
   -1173,     0, -1173,     0,     0, -1173, -1173, -1173, -1173, -1173,
       0,     0, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173,
   -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173, -1173,     0,
   -1173,     0, -1173, -1173, -1173,     0, -1173, -1173, -1173, -1173,
   -1173, -1173, -1173, -1173, -1173, -1173, -1173,     0,     0, -1173,
       0, -1173,   608,     0, -1173, -1173, -1173,     0, -1173, -1173,
   -1173,     0, -1173, -1173, -1173, -1173, -1019,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019,     0, -1019, -1019,
   -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,     0,
       0,   295, -1019,     0, -1019,     0,     0,   296,   297,   298,
   -1019, -1019,     0,     0, -1019, -1019, -1019, -1019, -1019, -1019,
     299,   300, -1019, -1019, -1019, -1019, -1019, -1019, -1019, -1019,
   -1019,     0, -1019,     0,   301, -1019, -1019,     0,   302,   303,
     304,   305,   306,   307,   308,   309, -1019, -1019,   310,     0,
       0,   311,     0,   312, -1019,     0,  1830,  1831,  1006,     0,
   -1019,   313,   314,     0,   315,   316,   317,   318, -1021,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,     0,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021,     0,     0,   295, -1021,     0, -1021,     0,     0,   296,
     297,   298, -1021, -1021,     0,     0, -1021, -1021, -1021, -1021,
   -1021, -1021,   299,   300, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021,     0, -1021,     0,   301, -1021, -1021,     0,
     302,   303,   304,   305,   306,   307,   308,   309, -1021, -1021,
     310,     0,     0,   311,     0,   312, -1021,     0, -1021,  2003,
    1006,     0, -1021,   313,   314,     0,   315,   316,   317,   318,
   -1015,  2006,     0, -1015, -1015, -1015, -1015,     0, -1015, -1015,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,
   -1015,     0, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015,     0,     0, -1015, -1015,     0, -1015,     0,
       0, -1015, -1015, -1015, -1015, -1015,     0,     0, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015, -1015, -1015,     0, -1015,     0, -1015, -1015,
   -1015,     0, -1015, -1015, -1015, -1015, -1015, -1015, -1015, -1015,
   -1015, -1015, -1015,     0,     0, -1015,     0, -1015, -1015,     0,
   -1015, -1015, -1015,     0, -1015, -1015, -1015,     0, -1015, -1015,
   -1015, -1015, -1221,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221, -1221, -1221,     0, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221, -1221, -1221, -1221, -1221,     0,     0,   295, -1221,     0,
   -1221,     0,     0,   296,   297,   298, -1221, -1221,     0,     0,
   -1221, -1221, -1221, -1221, -1221, -1221,   299,   300, -1221, -1221,
   -1221, -1221, -1221, -1221, -1221, -1221, -1221,     0, -1221,     0,
     301, -1221, -1221,     0,   302,   303,   304,   305,   306,   307,
     308,   309, -1221, -1221,   310,     0,     0,   311,     0,   312,
   -1221,     0, -1221, -1221, -1221,     0, -1221,   313,   314,     0,
     315,   316,   317,   318, -1016,  2080,     0, -1016, -1016, -1016,
   -1016,     0, -1016, -1016,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016,     0, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016,     0,     0, -1016,
   -1016,     0, -1016,     0,     0, -1016, -1016, -1016, -1016, -1016,
       0,     0, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016, -1016,     0,
   -1016,     0, -1016, -1016, -1016,     0, -1016, -1016, -1016, -1016,
   -1016, -1016, -1016, -1016, -1016, -1016, -1016,     0,     0, -1016,
       0, -1016, -1016,     0, -1016, -1016, -1016,     0, -1016, -1016,
   -1016,     0, -1016, -1016, -1016, -1016,  -922,   573,     0,  -922,
    -922,  -922,  -922,     0,  -922,  -922,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,     0,     0,  -922,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -922,  -922,     0,  -922,     0,     0,  -922,  -922,  -922,
    -922,  -922,     0,     0,  -922,  -922,  -922,  -922,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,     0,     0,  -922,  -922,  -922,
    -922,     0,  -922,     0,  -922,  -922,  -922,     0,  -922,  -922,
    -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,  -922,     0,
       0,  -922,   837,  -922,  -922,     0,   575,  -922,  -922,     0,
       0,  -922,  -922,     0,  -922,  -922,  -922,  -922,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,    18,    19,   236,   237,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,   238,     0,     0,     0,     0,   296,   297,
     298,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   299,   392,    38,   240,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,   241,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   311,     0,   312,   976,     0,   977,   978,   735,
       0,     0,   313,   314,     0,   315,   316,   317,   318,  1255,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,   238,     0,     0,     0,     0,   296,
     297,   298,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   299,   392,    38,   240,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   976,     0,   977,  -109,
     735,     0,     0,   313,   314,     0,   315,   316,   317,   318,
    1262,     0,     1,   291,   100,   292,     0,   293,   294,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,   238,     0,     0,     0,     0,
     296,   297,   298,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,   299,   392,    38,   240,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,   241,
       0,   302,   303,   304,   305,   306,   307,   308,   309,    43,
      44,   310,     0,     0,   311,     0,   312,   976,     0,   977,
     -97,   735,     0,     0,   313,   314,     0,   315,   316,   317,
     318,  1266,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,   238,     0,     0,     0,
       0,   296,   297,   298,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   299,   392,    38,   240,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   976,     0,
     977,  -101,   735,     0,     0,   313,   314,     0,   315,   316,
     317,   318,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,   238,     0,     0,
       0,     0,   296,   297,   298,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   299,   392,    38,   240,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,   241,     0,   302,   303,   304,   305,   306,   307,   308,
     309,    43,    44,   310,     0,     0,   311,     0,   312,  1529,
       0,   977,   -64,   735,     0,     0,   313,   314,     0,   315,
     316,   317,   318,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,   238,     0,
       0,     0,     0,   296,   297,   298,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   299,   392,    38,   240,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,   241,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,     0,   312,
    1538,     0,   977,  1539,   735,     0,     0,   313,   314,     0,
     315,   316,   317,   318,  1596,     0,     1,   291,   100,   292,
       0,   293,   294,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,   238,
       0,     0,     0,     0,   296,   297,   298,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,   299,   392,    38,
     240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,   241,     0,   302,   303,   304,   305,   306,
     307,   308,   309,    43,    44,   310,     0,     0,   311,     0,
     312,   976,     0,   977,   -80,   735,     0,     0,   313,   314,
       0,   315,   316,   317,   318,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
     238,     0,     0,     0,     0,   296,   297,   298,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   299,   392,
      38,   240,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,   241,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,  1538,     0,   977,  -106,   735,     0,     0,   313,
     314,     0,   315,   316,   317,   318,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,   238,     0,     0,     0,     0,   296,   297,   298,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   299,
     392,    38,   240,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,   241,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   310,     0,     0,
     311,     0,   312,  1538,     0,   977,   -96,   735,     0,     0,
     313,   314,     0,   315,   316,   317,   318,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,   238,     0,     0,     0,     0,   296,   297,   298,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     299,   392,    38,   240,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,   241,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,  1538,     0,   977,  -100,   735,     0,
       0,   313,   314,     0,   315,   316,   317,   318,  1792,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,    18,    19,   236,   237,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,   238,     0,     0,     0,     0,   296,   297,
     298,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   299,   392,    38,   240,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,   241,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   311,     0,   312,   976,     0,   977,   -87,   735,
       0,     0,   313,   314,     0,   315,   316,   317,   318,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,   238,     0,     0,     0,     0,   296,
     297,   298,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   299,   392,    38,   240,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,  1538,     0,   977,   -77,
     735,     0,     0,   313,   314,     0,   315,   316,   317,   318,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,   238,     0,     0,     0,     0,
     296,   297,   298,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,   299,   392,    38,   240,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,   241,
       0,   302,   303,   304,   305,   306,   307,   308,   309,    43,
      44,   310,     0,     0,   311,     0,   312,  1538,     0,   977,
     -84,   735,     0,     0,   313,   314,     0,   315,   316,   317,
     318,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,   238,     0,     0,     0,
       0,   296,   297,   298,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   299,   392,    38,   240,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,   290,   312,     1,   291,
     100,   292,     0,   293,   294,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     858,   238,     0,     0,     0,     0,   296,   297,   298,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   299,
     392,    38,   240,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,   241,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   310,     0,     0,
     311,   290,   312,     1,   291,   100,   292,     0,   293,   294,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     0,
       0,     0,     0,     0,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,     0,     0,
       0,   296,   297,   298,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,   299,   417,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
      40,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,   724,   312,     0,     0,
       0,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1184,    27,     0,     0,
       0,     0,   296,   297,   298,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,   299,   417,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,    40,     0,   302,   303,   304,   305,   306,   307,   308,
     309,    43,    44,   310,     0,     0,   698,   724,   312,     0,
       0,     0,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
       0,     0,     0,   296,   297,   298,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,   299,   417,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,    40,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,   290,   312,
       1,   291,   100,   292,   242,   293,   294,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,     0,     0,     0,   296,   297,
     298,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,   299,   417,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,    40,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   698,   724,   312,     0,     0,     0,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     8,     9,    10,   554,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,     0,     0,     0,   296,
     297,   298,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,   299,   417,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,    40,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     881,     0,     0,   882,   724,   312,     0,     0,     0,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,   299,   300,  1115,     0,   628,   629,   630,
       0,  1860,     0,     1,   291,   100,   292,   301,   293,   294,
       0,   302,   303,   304,   305,   306,   307,   308,   309,    43,
      44,   310,     0,     0,   311,     0,   312,   631,     2,     0,
       0,   242,     0,   632,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1107,  1108,  1109,   619,  1110,  1111,  1112,  1113,
     624,   625,  1114,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,   299,   300,  1115,     0,   628,   629,
     630,     0,   290,     0,     1,   291,   100,   292,   301,   293,
     294,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   631,     2,
       0,     0,   242,     0,   632,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,     0,   312,     0,
       0,  2078,  2079,  1006,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    2090,   312,  2091,     0,  1146,     0,     0,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1150,   312,  2089,     0,  1151,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,     0,   312,  1145,     0,
    1146,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  1271,
     312,     0,     0,     0,     0,   735,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  1338,   312,     0,     0,     0,     0,   735,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,  1126,     0,     0,
       0,   735,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,  1625,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,  1150,   312,
       0,     0,  1151,     0,     0,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  1626,   312,  1627,     0,     0,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,     0,   312,  1635,     0,  1146,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  1673,   312,     0,
       0,     0,     0,   735,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1682,   312,     0,     0,     0,     0,   735,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1714,   312,     0,     0,  1146,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,     0,   312,     0,     0,
    1146,     0,     0,     0,     0,   313,   314,  1742,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,     0,
     312,     0,     0,  1745,     0,     0,     0,  1746,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,     0,   312,     0,     0,  1146,     0,     0,     0,
       0,   313,   314,  1752,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,     0,     0,  1745,
       0,     0,     0,  1754,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,  1745,     0,     0,     0,  1766,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,     0,   312,     0,     0,  1745,     0,     0,     0,  1770,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  1856,   312,     0,     0,  1146,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  1858,   312,     0,
       0,  1146,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1859,   312,     0,     0,  1151,     0,     0,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1862,   312,     0,     0,  1146,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  1626,   312,  1627,     0,
       0,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,  1882,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,     0,
     312,  1879,     0,  1146,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  1883,   312,  1627,     0,     0,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,     0,     0,  1146,
       0,     0,     0,     0,   313,   314,  1901,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,  1146,     0,     0,     0,     0,   313,   314,  1904,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  2011,   312,     0,     0,  1146,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  1857,   312,     0,     0,  1151,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  2018,   312,     0,
       0,  1146,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1883,   312,  1627,     0,     0,     0,     0,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  2094,   312,     0,     0,  1146,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,     0,   312,     0,     0,
       0,  2122,  1006,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  2125,
     312,     0,     0,  1146,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  2126,   312,     0,     0,  1146,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,  2153,   312,     0,     0,  1146,
       0,     0,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,     0,     0,     0,     0,     0,   313,   314,   539,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,     0,   312,     0,     0,     0,     0,   735,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,     0,   312,     0,     0,     0,     0,
       0,     0,     0,   313,   314,   829,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,     0,   312,     0,
       0,     0,     0,     0,     0,     0,   313,   314,   833,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
       0,   312,     0,     0,     0,     0,  1006,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,     0,   312,     0,     0,     0,     0,     0,
       0,     0,   313,   314,  1047,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,     0,   312,     0,     0,
       0,     0,     0,     0,  1099,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,  1475,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,   724,
     312,     0,     0,     0,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,     0,   312,     0,     0,     0,     0,   735,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,     0,     0,     0,
       0,     0,     0,     0,   313,   314,  1577,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,  1609,   312,
       0,     0,     0,     0,     0,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,     0,   312,     0,     0,     0,     0,     0,     0,  1612,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,  1820,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,     0,   312,     0,     0,     0,     0,
    1819,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,  1823,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,     0,   312,     0,
       0,     0,     0,   735,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,  1827,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
       0,   312,     0,     0,     0,     0,   735,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,     0,   312,     0,     0,     0,     0,   735,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  1869,   312,     0,     0,
       0,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,  1928,     0,
     312,     0,     0,     0,     0,  1819,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  2027,   312,     0,     0,     0,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,  2085,   312,     0,     0,     0,
       0,     0,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   688,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,     0,     0,     0,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     689,     0,   312,     0,     0,     0,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   688,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   698,     0,   312,     0,     0,     0,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     0,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   721,     0,   312,  -910,
     573,     0,  -910,  -910,  -910,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -910,  -910,  -910,
    -910,  -910,  -910,  -910,  -910,  -910,  -910,  -910,  -910,  -910,
    -910,  -910,  -910,  -910,  -910,  -910,  -910,  -910,  -910,  -910,
       0,     0,  -910,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -910,  -910,     0,  -910,     0,     0,
    -910,  -910,     0,  -910,  -910,     0,     0,  -910,  -910,  -910,
    -910,  -910,  -910,     0,  -910,  -910,  -910,  -910,     0,     0,
    -910,  -910,  -910,  -910,     0,  -910,     0,  -910,  -910,  -910,
       0,  -910,  -910,  -910,  -910,  -910,  -910,  -910,     0,  -910,
    -910,  -910,     0,     0,  -910,   574,  -910,  -910,     0,   575,
    -910,     0,     0,     0,  -910,  -910,  -188,   898,     0,  -188,
    -188,  -188,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -188,  -188,  -188,  -188,  -188,  -188,
    -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,  -188,
    -188,  -188,  -188,  -188,  -188,  -188,  -188,     0,     0,  -188,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -188,  -188,     0,  -188,     0,     0,  -188,  -188,     0,
    -188,  -188,     0,     0,  -188,  -188,  -188,  -188,  -188,  -188,
       0,  -188,  -188,  -188,  -188,     0,     0,  -188,  -188,  -188,
    -188,     0,  -188,     0,  -188,  -188,  -188,     0,  -188,  -188,
    -188,  -188,  -188,  -188,  -188,     0,  -188,  -188,  -188,     0,
       0,  -188,     0,  -188,   899,     0,   900,  -188,     0,     0,
       0,  -188,  -188,  -255,   912,     0,     1,   291,   100,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,  -255,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   413,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   414,    32,   415,   416,    35,    36,     0,   417,    38,
      39,   418,     0,     0,   419,   420,   421,   422,     0,   423,
       0,   424,   425,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   426,     0,
     427,   428,  -253,   915,  -255,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,  -253,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     413,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     414,    32,   415,   416,    35,    36,     0,   417,    38,    39,
     418,     0,     0,   419,   420,   421,   422,     0,   423,     0,
     424,   425,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   426,     0,   427,
     428,  -256,   912,  -253,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,  -256,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   413,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   414,
      32,   415,   416,    35,    36,     0,   417,    38,    39,   418,
       0,     0,   419,   420,   421,   422,     0,   423,     0,   424,
     425,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   426,     0,   427,   428,
    -254,   915,  -256,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,  -254,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   413,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   414,    32,
     415,   416,    35,    36,     0,   417,    38,    39,   418,     0,
       0,   419,   420,   421,   422,     0,   423,     0,   424,   425,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   426,     0,   427,   428,     0,
     412,  -254,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   413,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   414,    32,   415,
     416,    35,    36,     0,   417,    38,    39,   418,     0,     0,
     419,   420,   421,   422,     0,   423,     0,   424,   425,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   426,     0,   427,   428,     0,   480,
     429,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   413,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   414,    32,   415,   416,
      35,    36,     0,   417,    38,    39,   418,     0,     0,   419,
     420,   421,   422,     0,   423,     0,   424,   425,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   426,     0,   427,   428,     0,   502,   481,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   413,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   414,    32,   415,   416,    35,
      36,     0,   417,    38,    39,   418,     0,     0,   419,   420,
     421,   422,     0,   423,     0,   424,   425,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   426,     0,   427,   428,     0,   507,   503,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   413,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   414,    32,   415,   416,    35,    36,
       0,   417,    38,    39,   418,     0,     0,   419,   420,   421,
     422,     0,   423,     0,   424,   425,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   426,     0,   427,   428,     0,   511,   508,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   413,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   414,    32,   415,   416,    35,    36,     0,
     417,    38,    39,   418,     0,     0,   419,   420,   421,   422,
       0,   423,     0,   424,   425,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     426,     0,   427,   428,     0,   912,   512,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   413,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   414,    32,   415,   416,    35,    36,     0,   417,
      38,    39,   418,     0,     0,   419,   420,   421,   422,     0,
     423,     0,   424,   425,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   426,
       0,   427,   428,     0,   915,  -765,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   413,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   414,    32,   415,   416,    35,    36,     0,   417,    38,
      39,   418,     0,     0,   419,   420,   421,   422,     0,   423,
       0,   424,   425,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   426,     0,
     427,   428,     0,   912,  -766,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     413,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     414,    32,   415,   416,    35,    36,     0,   417,    38,    39,
     418,     0,     0,   419,   420,   421,   422,     0,   423,     0,
     424,   425,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   426,     0,   427,
     428,     0,   915,  -762,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   413,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   414,
      32,   415,   416,    35,    36,     0,   417,    38,    39,   418,
       0,     0,   419,   420,   421,   422,     0,   423,     0,   424,
     425,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   426,     0,   427,   428,
       0,   912,  -763,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   413,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   414,    32,
     415,   416,    35,    36,     0,   417,    38,    39,   418,     0,
       0,   419,   420,   421,   422,     0,   423,     0,   424,   425,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   426,     0,   427,   428,     0,
     915,  -768,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   413,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   414,    32,   415,
     416,    35,    36,     0,   417,    38,    39,   418,     0,     0,
     419,   420,   421,   422,     0,   423,     0,   424,   425,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   426,     0,   427,   428,     0,  1029,
    -769,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   413,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   414,    32,   415,   416,
      35,    36,     0,   417,    38,    39,   418,     0,     0,   419,
     420,   421,   422,     0,   423,     0,   424,   425,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   426,     0,   427,   428,     0,  1033,  1030,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   413,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   414,    32,   415,   416,    35,
      36,     0,   417,    38,    39,   418,     0,     0,   419,   420,
     421,   422,     0,   423,     0,   424,   425,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   426,     0,   427,   428,     0,   912,  1034,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   413,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   414,    32,   415,   416,    35,    36,
       0,   417,    38,    39,   418,     0,     0,   419,   420,   421,
     422,     0,   423,     0,   424,   425,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   426,     0,   427,   428,     0,   915,  -745,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   413,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   414,    32,   415,   416,    35,    36,     0,
     417,    38,    39,   418,     0,     0,   419,   420,   421,   422,
       0,   423,     0,   424,   425,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     426,     0,   427,   428,     0,   912,  -746,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   413,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   414,    32,   415,   416,    35,    36,     0,   417,
      38,    39,   418,     0,     0,   419,   420,   421,   422,     0,
     423,     0,   424,   425,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   426,
       0,   427,   428,     0,   915,  -748,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   413,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   414,    32,   415,   416,    35,    36,     0,   417,    38,
      39,   418,     0,     0,   419,   420,   421,   422,     0,   423,
       0,   424,   425,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   426,     0,
     427,   428,     0,  1559,  -749,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     413,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     414,    32,   415,   416,    35,    36,     0,   417,    38,    39,
     418,     0,     0,   419,   420,   421,   422,     0,   423,     0,
     424,   425,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   426,     0,   427,
     428,     0,   912,  1560,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   413,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   414,
      32,   415,   416,    35,    36,     0,   417,    38,    39,   418,
       0,     0,   419,   420,   421,   422,     0,   423,     0,   424,
     425,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   426,     0,   427,   428,
       0,   915,  -671,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   413,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   414,    32,
     415,   416,    35,    36,     0,   417,    38,    39,   418,     0,
       0,   419,   420,   421,   422,     0,   423,     0,   424,   425,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   426,     0,   427,   428,     0,
     912,  -672,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   413,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   414,    32,   415,
     416,    35,    36,     0,   417,    38,    39,   418,     0,     0,
     419,   420,   421,   422,     0,   423,     0,   424,   425,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   426,     0,   427,   428,     0,   915,
    -751,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   413,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   414,    32,   415,   416,
      35,    36,     0,   417,    38,    39,   418,     0,     0,   419,
     420,   421,   422,     0,   423,     0,   424,   425,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   426,     0,   427,   428,     0,   912,  -752,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   413,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   414,    32,   415,   416,    35,
      36,     0,   417,    38,    39,   418,     0,     0,   419,   420,
     421,   422,     0,   423,     0,   424,   425,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   426,     0,   427,   428,     0,   915,  -664,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   413,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   414,    32,   415,   416,    35,    36,
       0,   417,    38,    39,   418,     0,     0,   419,   420,   421,
     422,     0,   423,     0,   424,   425,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   426,     0,   427,   428,     0,   912,  -665,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   413,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   414,    32,   415,   416,    35,    36,     0,
     417,    38,    39,   418,     0,     0,   419,   420,   421,   422,
       0,   423,     0,   424,   425,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     426,     0,   427,   428,     0,   915,  -660,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   413,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   414,    32,   415,   416,    35,    36,     0,   417,
      38,    39,   418,     0,     0,   419,   420,   421,   422,     0,
     423,     0,   424,   425,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   426,
       0,   427,   428,     0,   912,  -661,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   413,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   414,    32,   415,   416,    35,    36,     0,   417,    38,
      39,   418,     0,     0,   419,   420,   421,   422,     0,   423,
       0,   424,   425,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   426,     0,
     427,   428,     0,   915,  -650,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     413,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     414,    32,   415,   416,    35,    36,     0,   417,    38,    39,
     418,     0,     0,   419,   420,   421,   422,     0,   423,     0,
     424,   425,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   426,     0,   427,
     428,     0,   912,  -651,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   413,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   414,
      32,   415,   416,    35,    36,     0,   417,    38,    39,   418,
       0,     0,   419,   420,   421,   422,     0,   423,     0,   424,
     425,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   426,     0,   427,   428,
       0,   915,  -645,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   413,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   414,    32,
     415,   416,    35,    36,     0,   417,    38,    39,   418,     0,
       0,   419,   420,   421,   422,     0,   423,     0,   424,   425,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   426,     0,   427,   428,     0,
     912,  -646,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   413,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   414,    32,   415,
     416,    35,    36,     0,   417,    38,    39,   418,     0,     0,
     419,   420,   421,   422,     0,   423,     0,   424,   425,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   426,     0,   427,   428,     0,   915,
    -662,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   413,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   414,    32,   415,   416,
      35,    36,     0,   417,    38,    39,   418,     0,     0,   419,
     420,   421,   422,     0,   423,     0,   424,   425,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   426,     0,   427,   428,     0,   290,  -663,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   413,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   414,    32,   415,   416,    35,
      36,     0,   417,    38,    39,   418,     0,     0,   419,   420,
     421,   422,     0,   423,     0,   424,   425,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   426,     0,   427,   428,   412,     0,     1,   291,
     100,     0,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   413,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   414,    32,   415,   416,    35,    36,     0,
     417,    38,    39,   418,     0,     0,   419,   420,   421,   422,
       0,   423,     0,   424,   425,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     426,     0,   427,   428,   480,     0,     1,   291,   100,     0,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   413,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   414,    32,   415,   416,    35,    36,     0,   417,    38,
      39,   418,     0,     0,   419,   420,   421,   422,     0,   423,
       0,   424,   425,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     1,    43,    44,    45,     0,     0,   426,     0,
     427,   428,     0,     0,     0,     0,     0,     0,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,   554,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
   -1226,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,   555,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   556,     0,   557,     0, -1226,
   -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226,
   -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226,
   -1226,     0, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226,
   -1226, -1226, -1226,     0,     0,     0, -1226,     0, -1226,     0,
       0,     0,     0,     0, -1226, -1226,     0,     0, -1226, -1226,
   -1226, -1226, -1226, -1226,     0,     0, -1226, -1226, -1226, -1226,
   -1226, -1226, -1226, -1226, -1226,     0, -1226, -1211,     0, -1226,
   -1226,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1226, -1226,     0,     0,     0,     0,     0,     0, -1226,     0,
       0, -1226, -1226,     0, -1226,     0, -1211, -1211, -1211, -1211,
   -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211,
   -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211,     0, -1211,
   -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211, -1211,
       0,     0,     0, -1211,     0, -1211,     0,     0,     0,     0,
       0, -1211, -1211,     0,     0, -1211, -1211, -1211, -1211, -1211,
   -1211,     0,     0, -1211, -1211, -1211, -1211, -1211, -1211, -1211,
   -1211, -1211,     0, -1211, -1213,     0, -1211, -1211,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1211, -1211,     0,
       0,     0,     0,     0,     0, -1211,     0,     0, -1211, -1211,
       0, -1211,     0, -1213, -1213, -1213, -1213, -1213, -1213, -1213,
   -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213,
   -1213, -1213, -1213, -1213, -1213,     0, -1213, -1213, -1213, -1213,
   -1213, -1213, -1213, -1213, -1213, -1213, -1213,     0,     0,     0,
   -1213,     0, -1213,     0,     0,     0,     0,     0, -1213, -1213,
       0,     0, -1213, -1213, -1213, -1213, -1213, -1213,     0,     0,
   -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213,     0,
   -1213, -1210,     0, -1213, -1213,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1213, -1213,     0,     0,     0,     0,
       0,     0, -1213,     0,     0, -1213, -1213,     0, -1213,     0,
   -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210,
   -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210, -1210,
   -1210, -1210,     0, -1210, -1210, -1210, -1210, -1210, -1210, -1210,
   -1210, -1210, -1210, -1210,     0,     0,     0, -1210,     0, -1210,
       0,     0,     0,     0,     0, -1210, -1210,     0,     0, -1210,
   -1210, -1210, -1210, -1210, -1210,     0,     0, -1210, -1210, -1210,
   -1210, -1210, -1210, -1210, -1210, -1210,     0, -1210, -1212,     0,
   -1210, -1210,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1210, -1210,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1210, -1210,     0, -1210,     0, -1212, -1212, -1212,
   -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212,
   -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212,     0,
   -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212,
   -1212,     0,     0,     0, -1212,     0, -1212,     0,     0,     0,
       0,     0, -1212, -1212,     0,     0, -1212, -1212, -1212, -1212,
   -1212, -1212,     0,     0, -1212, -1212, -1212, -1212, -1212, -1212,
   -1212, -1212, -1212,     0, -1212,     0,     0, -1212, -1212,     1,
       0,     0,     0,     0,     0,     0,     0,     0, -1212, -1212,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1212,
   -1212,     0, -1212,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   238,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   239,    38,   240,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   241,     0,     1,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,     0,
       0,   854,     0,     0,     0,     0,     0,     0,  1441,     0,
       0,     0,   556,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   238,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     239,    38,   240,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   241,     0,     1,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
     854,     0,     0,     0,     0,     0,     0,  1458,     0,     0,
       0,   556,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     238,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,     0,   239,
      38,   240,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   241,     0,     1,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,     0,     0,  1212,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1235,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   238,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   239,    38,
     240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   241,     0,     1,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,     0,     0,  1212,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1706,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   238,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   239,    38,   240,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   241,     0,     1,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,  1212,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1721,     2,
       3,     4,   261,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    26,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,   262,    31,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     1,     0,     0,     0,    42,     0,     0,     0,
       0,    43,    44,    45,     0,     0,    46,     0,     0,     0,
       0,     0,     0,     0,     0,   263,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,   413,     0,     0,
       0,     0,     0,    28,    29,     0,     0,   414,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       1,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,   940,     0,   427,     0,     0,     0,
       0,     0,     0,   941,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,   554,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
       0,     0,   920,     0,     0,     0,     0,     0,     0,     0,
       0,   921,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,   554,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1524,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
      46,     0,     0,     0,     0,     0,     0,     0,     0,   921,
     -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,
     -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,
     -65,   -65,   -65,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   -65,     0,
       0,     0,     0,     0,     0,     0,   -65,   -65,     0,     0,
       0,   -65,     0,     0,     0,     0,     0,   -65,   -65,   -65,
       0,     0,     0,     0,     0,     0,     0,  1733,     0,     0,
       0,     0,   -65,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -65,   -65,     0,     0,     0,     0,     0,     0,
    1525,     0,  1526,   -65,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   238,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   239,    38,   240,     0,     0,     0,     0,     0,     0,
       0,  1737,     0,     0,     0,     0,   241,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -110,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   238,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   239,    38,   240,     0,     0,
       0,     0,     0,     0,     0,  1738,     0,     0,     0,     0,
     241,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -94,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     238,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,     0,   239,
      38,   240,     0,     0,     0,     0,     0,     0,     0,  1851,
       0,     0,     0,     0,   241,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -95,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   238,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   239,    38,   240,     0,     0,     0,     0,
       0,     0,     0,  1990,     0,     0,     0,     0,   241,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -79,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   238,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   239,    38,   240,
       0,     0,     0,     0,     0,     0, -1292,   280,     0,     1,
       0,     0,   241,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   -86,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,    25,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    26,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,    30,    31,     0,    32,    33,    34,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       1,     0,     0,     0,     0,     0,    40,    41,     0,     0,
       0,    42,     0,     0,     0,     0,    43,    44,    45,     0,
       0,    46,     0,     0,    47,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,     0,    40,     0,     0,
       0,     0,     0,     0,   821,     0,     0,    43,    44,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1406,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
       0,    40,     0,     0,     0,     0,     0,     0,   821,     0,
       0,    43,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1764,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
     159,     0,     1,     0,     0,    40,     0,     0,     0,     0,
       0,     0,   821,     0,     0,    43,    44,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1765,     2,     3,     4,
     160,     6,     7,     8,     9,    10,   161,   162,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    26,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       0,   159,     0,     1,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,    46,     0,     0,   163,     2,     3,
       4,   160,     6,     7,     8,     9,    10,   161,   162,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,   594,     0,     1,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,     0,     0,    46,     0,     0,   163,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   595,   596,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
       0,     0,     0,  -930,     0,  -930,     0,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,     0,     0,    46,     0,     0,   597,
    -930,  -930,  -930,  -930,  -930,  -930,  -930,  -930,  -930,  -930,
    -930,  -930,  -930,  -930,  -930,  -930,  -930,  -930,  -930,  -930,
    -930,  -930,  -930,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -930,     0,
       0,     0,     0,     0,     0,     0,  -930,  -930,     0,     0,
       0,  -930,     0,     0,     0,     0,     0,  -930,  -930,  -930,
       0,     0,     0,     0,     0,     0,     1,     0,     0,     0,
       0,     0,  -930,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -930,  -930,  -930,     0,     0,  -930,     0,     0,
    -930,     2,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,    25,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    26,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,    30,
      31,     0,    32,    33,    34,    35,    36,     0,    37,    38,
      39,     0,     0,     0, -1293,   272,     0,     1,     0,     0,
       0,     0,     0,    40,    41,     0,     0,     0,    42,     0,
       0,     0,     0,    43,    44,    45,     0,     0,    46,     0,
       0,    47,     2,     3,     4,   160,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,    25,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,    33,    34,    35,    36,     0,    37,
      38,    39,     0,   193,     0,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,     0,     0,    46,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   199,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,   193,     0,     1,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,  1212,  1693,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   199,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,   193,     0,     1,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,     0,   200,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   199,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
     933,     0,     1,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,     0,     0,     0,     0,   375,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   199,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,  1483,
       0,     1,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,     0,     0,     0,     0,   200,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   199,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,   193,     0,
       1,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     0,     0,     0,   375,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   199,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,   193,     0,     1,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,     0,
       0,     0,     0,  1574,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   199,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,   159,     0,     1,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,     0,     0,
       0,     0,  1918,     2,     3,     4,   160,     6,     7,     8,
       9,    10,   554,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,   159,     0,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
      46,     2,     3,     4,   160,     6,     7,     8,     9,    10,
     554,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,   878,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,     0,     0,    46,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,   879,     2,     3,     4,
     160,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    26,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,    46,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
       0,     0,    46,     2,   194,   195,   196,   197,   198,     8,
       9,    10,   554,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     1,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
      46,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     0,     0,   713,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,     0,     1,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,  1463,     2,   194,   195,
     196,   197,   198,   226,   227,   228,  1546,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   239,    38,   240,     0,  1061,     0,
       1,     0,     0,     0,     0,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,    45,     0,     0,    46,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,  1062,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   199,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,  1067,     0,     1,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,  1068,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   199,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,  1073,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,  1074,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   199,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,   863,
       0,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   238,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   239,    38,   240,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   241,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,  1022,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   199,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,  1079,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   199,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
     821,     0,     0,    43,    44,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   199,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   238,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,   469,   470,     0,     0,     0,   239,    38,
     240,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   241,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     1,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       0,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   494,   238,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   239,    38,
     240,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   241,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   238,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,     0,   239,    38,   240,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   241,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   238,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   239,    38,   240,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   241,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,   854,  1690,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   556,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,    45,     0,     0,   854,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   556,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   238,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,     0,   239,    38,   240,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     241,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   242,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   238,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     239,    38,   240,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   241,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1535,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   239,    38,   240,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44
};

static const yytype_int16 yycheck[] =
{
       0,   126,   122,   712,   150,   330,    80,   526,   150,   847,
     330,   919,   919,   851,    94,   122,   147,  1222,   826,   526,
      80,   847,   314,    86,   714,   851,   826,    53,   630,    77,
      30,    31,    94,   462,    77,  1619,   461,    77,   988,   989,
     990,    41,  1091,     3,     3,   929,    46,  1631,   122,    30,
      46,    17,   177,    53,   570,   988,    87,   990,    58,   989,
      60,    42,   122,    94,    78,    87,    58,    17,    87,   988,
       3,   990,     5,   870,   115,   785,    76,    77,    78,   545,
      80,   107,   276,   329,   847,    85,     1,    87,   851,   126,
      77,     1,   407,     3,    94,    95,   795,   343,    98,   461,
      87,   347,     3,   813,     1,   115,     3,   107,    17,   575,
     110,     1,   578,     3,   580,   118,   582,   180,   181,   122,
     101,   102,   122,   465,   105,   125,   126,    28,     5,   125,
     130,     5,    77,    78,   134,   135,   136,     1,   138,     3,
     177,   749,   142,     5,   144,     1,   115,   147,   148,   113,
     150,   151,   152,   153,   138,   155,   951,   116,   158,     1,
     988,   120,   990,  1006,     5,   124,   192,   151,   168,   153,
     136,   155,   118,   180,   181,     3,   168,   177,     1,     3,
     125,     5,     3,   116,     5,    17,   136,   795,     3,   256,
     257,   124,   192,   256,   653,   654,   276,   735,   278,   996,
       1,   735,   202,   741,   204,     1,   744,   741,   971,   124,
     744,   121,   212,   213,   276,     5,   278,   213,   266,   138,
      77,   122,   222,   266,   121,   225,   266,   136,   276,     5,
      87,   121,   151,   276,   153,     3,   155,    94,     1,   253,
     555,     1,   749,     1,     7,     8,     9,   278,   125,   123,
     545,   258,     3,   253,   116,   380,   278,   121,   258,   278,
      28,     1,   262,   409,   410,   121,   266,   461,   410,    37,
     277,   873,     3,     3,     1,     3,   276,     1,   278,   121,
     575,   262,     1,   578,   276,   580,     1,   582,   795,   276,
    1874,   278,   116,     1,   122,   116,   296,   122,   121,     1,
     124,   116,   302,   124,   136,   120,  1256,  1257,   253,   124,
     121,   311,     1,  1263,  1264,     1,     3,  1267,  1268,     1,
     121,   266,     1,     1,  1257,   121,  1256,     1,     3,   121,
     120,  1264,   313,  1263,     1,  1268,     1,  1267,  1257,   372,
     856,   374,    73,   380,   120,  1264,   372,   115,   374,  1268,
       3,     3,   115,     7,     8,     9,   119,  2110,   126,   121,
     123,   121,   120,   126,   877,   116,   366,   367,   431,   432,
     433,   434,   372,     3,   374,     5,    28,   112,   118,     3,
     380,   988,     5,   990,     3,   258,   386,   115,   462,   119,
     121,   118,   638,   120,   121,   641,   521,   121,    28,   118,
     784,     1,   462,   118,    28,   120,   121,   115,   115,   409,
     410,  2164,   537,   413,   414,   546,  1211,   732,     3,   121,
     420,   278,     5,   423,   424,   425,   426,   427,   812,  1257,
     426,   118,   121,   120,   120,   555,  1264,   950,     3,   121,
    1268,   116,   121,   121,   769,   770,   771,   121,   555,   769,
     770,   771,   877,   118,   121,   120,   456,   457,   458,     0,
     527,   461,   462,   530,   527,   465,   119,   530,   468,   123,
     122,   763,   126,   473,   799,   800,   801,   477,   478,   799,
     800,   801,   482,   483,   521,   118,     3,     5,     3,   122,
     684,   115,   122,   116,   494,   495,  1701,   926,   790,  1006,
     537,  1200,     3,   122,   504,   505,   798,  1206,   870,   509,
     510,    28,     5,   513,   514,   115,   116,   517,   518,   519,
     120,   521,  1212,   556,   524,   950,   818,  1043,   113,   114,
     556,     0,   115,   570,   126,   535,   536,   537,  1054,   854,
    1230,   541,  1591,     1,     3,   545,   546,  1237,   786,     3,
     550,   116,   552,   553,   869,   555,   556,   557,  1096,   555,
     560,   557,  1096,   589,  1448,   880,   550,   929,   552,    28,
     570,   996,   517,   518,   519,   575,   814,   192,   578,   119,
     580,     3,   582,   616,   651,   652,   653,   654,   950,   589,
     535,   536,  1200,     3,  1060,   937,     3,   939,  1206,  1437,
     118,  1409,  1410,  1487,   684,   122,  1490,   122,    77,  1409,
    1410,  1437,  1078,    77,   681,   116,     1,   120,    87,   129,
     130,   621,   684,   623,   127,    94,    95,     7,     8,     9,
     630,   550,   118,   552,   996,  1142,   684,  1545,  1545,  1146,
    1099,   684,  1149,  1102,  1151,  1440,     3,  1597,  1598,   712,
    1257,   651,   652,   653,   654,   787,     3,  1264,   116,   113,
     124,  1268,   120,     3,   118,  1598,    73,  1597,     3,   669,
     670,    28,   679,   680,  1437,  1513,   870,  1515,   678,  1598,
      37,  1140,   297,   815,   684,   666,   667,   120,   303,   689,
     120,  1517,     1,  1200,     3,  1154,  1155,  1156,  1157,  1206,
     122,   847,   120,   703,  1909,   851,   116,  1502,     3,  1552,
     710,   711,   712,   713,   714,   715,     1,    74,    75,     1,
      86,   721,    79,   120,     3,    65,    73,  1042,   817,    86,
     115,   116,   732,    28,   854,   120,   717,   718,   719,    74,
      75,   121,    37,   123,    79,   121,   746,   854,   122,    28,
     750,    86,     1,   110,   111,   112,   950,   372,   115,   374,
       7,     8,     9,   852,   853,  1060,     1,   121,     1,   126,
    1598,  1066,   112,   113,   121,   110,   111,  1072,   651,   652,
     653,   654,   122,  1078,     7,     8,     9,   122,   116,    69,
      70,   116,   792,     7,     8,     9,   796,   266,     7,     8,
       9,   784,   996,   112,   113,   335,   926,   276,   292,   278,
     115,   120,   958,   959,   180,   181,   958,   959,   115,   926,
     115,   821,   822,   823,   970,   309,   826,   827,   828,   812,
     115,   116,   788,   964,   116,   120,   115,     1,   120,   902,
     903,   121,   905,  1793,  1794,   908,   909,   847,   292,     3,
     850,   851,   926,     1,   854,     3,     3,   335,   858,   859,
     816,  1794,   115,  1793,    11,   309,   926,   116,   868,   869,
     870,   120,  1715,   873,    28,  1794,   123,   877,  1193,   879,
     880,   116,   882,   116,   884,   120,   882,   120,   921,     3,
     256,   121,   258,     3,    77,  1210,  1027,  1028,  1782,  1783,
     123,   115,     7,     8,     9,  1700,   115,   119,   786,   123,
    1705,   277,   126,    11,   123,     3,   979,   126,  1043,  1435,
     920,   113,   922,   122,   920,   785,   926,   960,  1253,   929,
     122,     3,   787,  1253,   934,  1055,   814,   937,   934,   939,
     940,   556,    90,  1481,   940,   414,   817,  1481,  1055,   949,
     950,   951,   116,   813,   772,   773,   120,   122,   958,   959,
     815,   961,   788,   963,   964,   115,  1794,   114,  1260,   292,
     970,   971,   119,   120,   115,   122,  1819,   135,   115,   963,
     138,   852,   853,  1778,   802,   803,   309,  1830,   258,   126,
     816,  1598,   115,   151,     3,   153,   996,   155,   112,   113,
     113,   616,   112,   113,  1694,   118,  1043,     3,   122,     5,
     115,     3,   122,   115,  1723,  1052,   114,  1054,   123,    79,
       3,   126,   120,  1056,   112,   113,   115,  1027,  1028,   115,
    1056,  1031,  1032,  1552,   122,  1035,  1036,  1037,   112,  1039,
     112,   113,  1042,  1043,   963,  1552,  1042,  1649,  1564,   115,
     110,   111,  1052,  1037,  1054,  1055,  1056,  1482,   132,   133,
    1060,   120,   115,  1063,   124,   431,  1066,   126,   434,  1069,
     774,   775,  1072,     3,  1107,  1075,    12,    13,  1078,    11,
    1080,  1988,    65,     7,     8,     9,  1448,  1154,  1155,  1156,
    1157,   128,  1212,     6,  1094,     8,     9,  1042,    28,  1099,
     804,   805,  1102,   112,   113,  1212,   115,   134,   106,   120,
    1177,  1111,  1179,  1113,    44,   126,   112,   113,  1037,  1434,
     112,   113,  1122,   115,   113,  1487,    12,    13,  1490,   112,
     113,  1926,   114,   122,   292,  1135,   772,   773,   120,    16,
    1140,  1141,  1601,  1602,    74,    75,   116,     1,   256,   257,
    1131,   309,  1611,   128,  1154,  1155,  1156,  1157,  1184,  2002,
      73,   527,  2000,  2001,   530,   119,   802,   803,   115,   114,
     124,    84,  1172,  1173,  1174,   120,  1176,   113,   114,   126,
    1213,     3,   114,   135,  1184,   113,  1186,  1794,   120,  1173,
     122,   134,   120,  1193,   192,   119,   109,  1197,   126,   123,
     113,  1201,  1235,  1203,   119,    16,    28,  1207,     3,   124,
       5,  1211,  1212,   126,   135,   684,   129,   130,   131,  1928,
      74,    75,    44,   115,   122,    79,  1099,   113,   114,  1102,
    1230,    11,    86,  1740,   126,  2078,    31,  1237,  1745,   774,
     775,  1748,   116,   782,   783,   116,   120,  1247,   778,   779,
     124,   781,    74,    75,  1173,   122,   110,   111,   118,  1775,
     116,     3,   122,     5,   118,   119,   120,  1140,  1583,   804,
     805,   810,   811,  1254,   116,  2118,   806,   807,   808,   809,
       1,  1154,  1155,  1156,  1157,   651,   652,   653,   654,    31,
    1892,  1437,   782,   783,   116,   119,   113,   112,   456,   457,
     778,   779,   122,   781,   124,   122,   921,   124,   115,   115,
     468,  1830,  1819,   679,   680,   681,   314,   132,   133,   126,
     810,   811,  1838,  1830,   482,   483,   114,   114,   806,   807,
     808,   809,   120,   120,   114,     3,    74,    75,   114,   119,
     120,    79,   122,   114,   120,   960,   504,   505,    86,   120,
     122,   509,   510,    74,    75,   513,   514,   122,    79,   124,
      28,   517,   518,   519,   122,    86,   124,  1513,  1514,  1515,
    1516,   114,   110,   111,   372,   120,   374,   120,   116,   535,
     536,   651,   652,   653,   654,   118,    69,    70,   118,   110,
     111,   115,   550,  1888,   552,   119,   113,   118,   119,   120,
    1400,  1401,   126,  1862,  1404,  1405,    74,    75,    91,  1409,
    1410,    79,    95,   116,    97,    10,    11,   120,    86,   527,
    1782,  1783,   530,     7,  1405,   113,    10,    11,    12,    13,
      14,    15,    16,    17,    88,    89,    90,  1437,   121,  1564,
    1440,  1056,   110,   111,   114,   116,  1446,   113,  1448,   120,
     120,  1451,   116,   124,   122,  1455,   120,   119,  1491,   116,
    1460,  1461,  1462,   120,   116,   114,  1462,   124,   120,   116,
     120,   120,   124,   120,  1766,  1767,  1768,  1769,  1770,  1771,
    1772,  1773,  1482,  2002,  1484,   114,   122,  1487,  1484,   127,
    1490,   120,  1107,  1493,   114,  2002,    77,   114,   114,   127,
     120,   116,  1502,   120,   120,   120,   127,   116,  1508,  1509,
    1656,   120,  2114,  1513,  1514,  1515,  1516,  1462,   122,   116,
      74,    75,   520,   120,   116,    79,   122,  1564,   120,   113,
     114,   120,    86,   116,   116,  1572,   126,   120,   120,   123,
    2035,   120,  2037,   651,   652,   653,   654,   120,   132,   133,
     134,   135,   136,    14,    15,     1,   110,   111,   556,  2078,
     120,  1561,  1562,   116,  1564,   119,   121,   120,  2027,   118,
    2029,  2078,  1572,   681,   116,   116,   148,   122,   120,   120,
     152,   124,  1702,  1583,     1,   122,     3,  1583,   115,   122,
     588,   124,   122,   115,   124,  1702,   177,   118,  1213,   120,
     118,  1601,  1602,   118,  2099,   120,  2101,   118,  2103,  1609,
     115,  1611,  1612,   979,     1,  1615,     3,    37,   616,  1619,
    1235,   129,   130,  1623,    44,    45,  1626,     3,    74,    75,
     118,   115,   120,    79,   115,  2094,   122,   122,   124,   124,
      86,  1622,    10,    11,     3,  2140,  2141,   118,  2143,  1649,
     118,     1,    28,     3,    74,    75,  1656,  1638,     1,    79,
       3,    37,   118,  2158,   110,   111,    86,   118,     0,   115,
     116,  1704,   116,  1706,   120,     1,     1,     3,     3,  2174,
     118,   122,   120,   124,     1,   266,     3,  1720,  1721,   113,
     110,   111,   112,    14,    15,   276,  1988,   127,    74,    75,
    1700,   127,  1702,    79,     1,  1705,     3,     1,   121,     3,
      86,   127,     1,  1838,     3,    74,    75,   118,   716,   120,
      79,  1784,   720,  1723,   127,  1725,  1726,    86,  1601,  1602,
       1,   127,     3,  1099,   110,   111,  1102,   735,  1611,   115,
     122,   127,   124,   741,   113,    77,   744,  1526,   126,  1528,
     126,   110,   111,   535,   536,    87,   115,    28,   122,    74,
      75,  1761,    94,    95,    79,   763,    37,    38,   900,   901,
    1526,    86,  1528,   122,  1140,   900,   901,   121,  1778,   651,
     652,   120,  1782,  1783,   113,  1785,   651,   652,  1154,  1155,
    1156,  1157,   790,  2118,   121,   110,   111,  1797,  2118,   119,
     798,  1838,   121,    74,    75,   963,   116,   122,    79,   116,
    1810,  1177,  1812,  1179,   116,    86,    94,    95,   127,   127,
     818,   827,   828,   127,   116,   115,  1810,    56,  1812,  1099,
     116,   116,  1102,   124,   115,  1835,   124,  1837,  1838,   110,
     111,   112,   124,   115,   115,   115,     1,   118,   115,   120,
     121,  1835,   118,  1837,  2000,  2001,  1856,  1857,  1858,  1859,
     118,   118,  1862,   113,   113,     3,  1866,  1867,   116,  1869,
    1140,  1871,   118,  1031,  1032,   116,  1491,  1035,  1036,  1037,
     461,   213,   116,  1883,  1154,  1155,  1156,  1157,   113,     0,
      28,  1810,  1892,  1812,  1927,  1895,    74,    75,   115,    37,
     115,    79,   126,  1936,   113,  1886,   116,  1888,    86,   116,
     116,   124,   126,   121,   116,   120,  1835,   120,  1837,    74,
      75,   919,   116,   921,    79,   116,  1926,   124,  1928,   124,
     116,    86,   110,   111,   266,   124,    74,    75,   116,   124,
     521,    79,   124,   524,   276,     3,   278,   124,    86,   124,
     116,   116,   121,   116,   118,   110,   111,   116,   116,  1992,
    1993,    56,   960,   118,   115,   120,    77,   127,   116,   116,
      28,   127,   110,   111,   112,   127,    87,   115,   124,   311,
     124,   115,   115,    94,    95,   116,   124,   116,   116,  1862,
     988,   116,   990,   116,   116,  1995,  1996,  1997,  1998,  1999,
    2000,  2001,   116,   127,   113,   118,   127,  2007,  2008,  2009,
    2010,   126,    11,  1997,  1172,  1173,    74,    75,  2018,   127,
     127,    79,   126,   122,   122,   136,   119,  2027,    86,  2029,
      74,    75,   124,   124,   118,    79,   119,   148,  2038,  2039,
     119,   152,    86,   115,  2107,  2108,  1154,  1155,  1156,  1157,
     118,     0,   110,   111,  2035,   122,  2037,   116,  1056,   116,
     116,     3,   127,   127,   122,   127,   110,   111,    64,  1177,
     116,  1179,   116,   127,  2074,  2075,   127,   127,  1997,   127,
     127,  2081,  2082,   116,   116,  2085,    28,  2087,   116,  1704,
    2090,  1706,    41,    64,  2094,   118,   116,   678,  1096,   116,
       3,   127,    44,   684,    53,  1720,  1721,   118,  2108,  1107,
    2110,    60,   127,   127,  2114,   127,   118,  2098,  2099,   122,
    2101,   118,  2103,   118,   116,    28,  2126,   118,    77,   461,
     118,    80,    74,    75,    37,  1133,  1134,    86,    87,   118,
     118,   118,   118,   118,   118,    94,    95,  2148,  2148,  2149,
     118,   118,   468,  2153,  2027,   266,  2029,   468,   107,  2140,
    2141,   110,  2143,     0,  2164,   276,   970,   278,   468,   468,
    1536,    74,    75,   122,   116,   468,    79,  2158,   120,   276,
       3,   130,   276,    86,   906,   850,   135,   136,   961,   138,
     309,   309,  1482,  2174,   425,   715,   302,  1819,   414,   148,
     253,   150,   151,   152,   153,    28,   155,   110,   111,   112,
    2098,   721,   115,   116,    37,  1213,    94,    87,    44,    45,
     258,  2094,    87,    95,    87,  1761,    -1,    -1,    -1,    -1,
      -1,   180,   181,    -1,    -1,  1601,  1602,  1235,    -1,    -1,
      77,    -1,    -1,   192,    -1,  1611,    -1,     3,    74,    75,
      87,    74,    75,    79,    -1,   204,    79,    94,    95,  1257,
      86,    -1,  1260,    86,   213,    -1,  1264,    -1,    -1,    -1,
    1268,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,   130,
      -1,    37,    38,    -1,   110,   111,   112,   110,   111,   870,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   136,
      -1,    -1,   413,    -1,   253,    -1,    -1,   256,   257,   258,
      -1,   148,  1927,    -1,   425,   152,    -1,   266,    74,    75,
      -1,  1936,    -1,    79,    -1,    -1,    -1,   276,   277,   278,
      86,  1601,  1602,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,  1611,    79,    -1,    -1,    -1,    -1,   296,   929,    86,
    1508,  1509,   684,   302,   110,   111,   112,   689,    -1,   115,
       3,    -1,   311,    -1,    -1,    -1,    -1,   478,     0,   950,
      -1,   136,    -1,   110,   111,    -1,    -1,  1992,  1993,   116,
     712,    -1,    -1,   148,    -1,    28,    -1,   152,    -1,   721,
      74,    75,    -1,    -1,    37,    79,    -1,    -1,    -1,    -1,
     732,    -1,    86,  1561,  1562,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,   996,    -1,    79,   367,    -1,
      -1,    -1,    -1,   372,    86,   374,   110,   111,    -1,   266,
      -1,    74,    75,    -1,     3,    -1,    79,   288,    -1,   276,
      -1,   278,    -1,    86,    -1,    77,   297,    -1,   110,   111,
     112,    -1,   303,   115,    -1,    87,    -1,    -1,   407,    28,
     409,   410,    94,    95,   413,   414,    -1,   110,   111,   112,
      -1,   420,   115,    -1,    -1,   424,   425,    -1,   427,    -1,
      -1,    -1,    -1,  1481,    -1,    -1,    -1,    -1,   253,    -1,
      -1,   823,    -1,  1491,    -1,    -1,  1862,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   136,    74,    75,   456,   457,    -1,
      79,    -1,   461,   462,    -1,    -1,   148,    86,    -1,   468,
     152,    -1,    -1,  1521,   473,    -1,    -1,    -1,  1526,   478,
    1528,   296,    -1,   482,   483,    -1,    -1,   302,   870,    -1,
      -1,   110,   111,    -1,    -1,   877,    -1,  1545,    -1,    -1,
     882,    -1,   884,    -1,    -1,   504,   505,    -1,   409,    -1,
     509,   510,    -1,    -1,   513,   514,    -1,    -1,    -1,    -1,
      -1,   520,    -1,   684,    -1,    -1,   413,    -1,   527,    -1,
      -1,   530,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,
      -1,    -1,  1862,  1174,    -1,  1176,   545,    -1,    -1,    -1,
    1598,   550,   934,   552,    -1,    -1,   555,   556,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,   950,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   575,    44,    45,   578,
      -1,   580,    -1,   582,   266,    -1,    -1,    -1,    -1,    -1,
     589,   478,   407,    -1,   276,    -1,   278,    -1,   413,    -1,
      -1,    -1,  1810,    -1,  1812,    -1,    -1,    74,    75,    -1,
     425,  2027,    79,  2029,    -1,    -1,    -1,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1835,    -1,  1837,
      -1,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    -1,   110,   111,    -1,    -1,    -1,   115,    -1,
      -1,    -1,   651,   652,   653,   654,  1704,    -1,  1706,   119,
      -1,    -1,    -1,   478,    -1,    -1,     1,  1715,     3,    -1,
      -1,    -1,  1720,  1721,    -1,    -1,    -1,   130,  2094,  1727,
     679,   680,   681,    -1,    -1,   684,    -1,    -1,    -1,    -1,
     689,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    44,
      45,    -1,    37,    38,   703,    -1,    -1,  2027,   869,  2029,
      -1,   710,   711,   712,    -1,   714,   715,    -1,    -1,   880,
      -1,    -1,   721,    -1,    -1,   106,    -1,    -1,    -1,    74,
      75,   413,    -1,   732,    79,    -1,   735,   113,   114,    74,
      75,    86,   741,   425,    79,   744,  1794,   123,    -1,    -1,
      -1,    86,   128,   129,   130,    -1,   132,   133,   134,   135,
     136,    -1,    -1,    -1,    -1,   110,   111,    74,    75,    -1,
     115,    -1,    79,    -1,  2094,   110,   111,   112,    -1,    86,
     115,    -1,    -1,   118,   685,   120,   121,  1995,  1996,  1997,
    1998,  1999,    -1,    -1,    -1,    -1,   478,   684,    -1,  2007,
    2008,  2009,  2010,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,  1193,    -1,    -1,    -1,    -1,    -1,  1448,    -1,   126,
      -1,    -1,    -1,    -1,   823,    -1,    -1,   826,   827,   828,
      -1,    -1,    -1,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   297,  1893,  1894,    -1,   847,    -1,
     303,   850,   851,    -1,    -1,   854,  1487,    -1,    -1,  1490,
      -1,    -1,    -1,    -1,    -1,    -1,  2074,  2075,    -1,    -1,
     869,   870,    -1,    -1,    -1,    -1,    -1,   258,   877,  1927,
      -1,   880,    -1,   882,    -1,   884,    -1,    -1,  1936,    -1,
      -1,    -1,    -1,    -1,    -1,   710,   711,    -1,    -1,   714,
     715,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   926,    -1,    -1,
      -1,    -1,    -1,   314,    -1,   934,    -1,    -1,    -1,    -1,
       0,    -1,    -1,    -1,  1992,  1993,   847,    -1,    -1,   850,
     851,   950,   951,    -1,    -1,    -1,   409,    -1,    -1,   958,
     959,    -1,    -1,    -1,   963,    -1,    -1,    -1,    -1,    -1,
      -1,   970,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   869,    -1,    -1,    -1,    -1,    -1,    -1,   988,
     989,   990,    -1,   880,    -1,    -1,    -1,   996,    -1,    -1,
      -1,    -1,   684,    -1,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    87,    -1,    -1,
      -1,    28,  1031,  1032,    94,    95,  1035,  1036,  1037,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     951,    -1,  2100,    -1,   869,    -1,  1055,  1056,    -1,    -1,
      -1,  1060,   258,    -1,    -1,   880,    -1,  1066,    65,    -1,
    2118,    -1,    -1,  1072,    71,    72,    73,    74,    75,  1078,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1096,    -1,    -1,
      -1,    98,  1484,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   526,    -1,    -1,    -1,    -1,
       0,  1782,  1783,   213,    -1,  1154,  1155,  1156,  1157,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1172,  1173,    -1,    -1,    -1,  1177,    -1,
    1179,   996,    -1,    -1,    -1,  1184,    -1,   869,    -1,    -1,
      -1,    -1,    -1,    -1,  1193,    -1,    46,    -1,   880,    -1,
      -1,  1583,    -1,    -1,    -1,    -1,   266,   588,    -1,    -1,
      -1,  1210,  1211,  1212,    -1,    -1,   276,    -1,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    76,    77,    78,    -1,
      -1,  1230,   685,    -1,    -1,    85,    -1,    87,  1237,    -1,
     621,    -1,    -1,    -1,    94,    95,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1256,  1257,    -1,
      -1,    -1,    -1,    -1,  1263,  1264,    -1,    -1,  1267,  1268,
     651,   652,   653,   654,    -1,   125,   126,   127,   128,   129,
      -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,   138,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   151,    -1,   153,    -1,   155,    -1,    -1,    -1,    -1,
    1211,    -1,    -1,    -1,    -1,    -1,   456,   457,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,   178,   179,
      -1,    -1,    -1,    -1,    -1,   716,    -1,    -1,    -1,   720,
      -1,  1723,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   212,   213,   504,   505,    -1,    -1,   749,   509,
     510,    -1,    -1,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   763,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   847,  1210,    -1,   850,   851,    -1,
      -1,   461,    -1,   253,    -1,    -1,    -1,    -1,    -1,   790,
    1409,  1410,    -1,    -1,   795,  1230,   266,   798,    -1,    -1,
      -1,    -1,  1237,    -1,    -1,   621,   276,    -1,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   818,  1437,    -1,
      -1,  1440,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,   654,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1481,    -1,    -1,  1484,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,   951,    -1,
      -1,    -1,    -1,  1502,    -1,    -1,    -1,    -1,    -1,  1508,
    1509,    -1,    -1,    -1,  1513,  1514,  1515,  1516,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
     380,   381,   382,    -1,    71,    72,  1437,    -1,    -1,  1440,
      -1,    -1,    -1,    -1,    -1,    -1,  1928,    -1,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   407,    -1,    -1,
      -1,    98,  1561,  1562,   414,   102,   103,   104,   105,   106,
     107,   108,    -1,    -1,    -1,    -1,   426,    -1,   115,    -1,
      -1,    -1,    -1,    -1,  1583,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1597,  1598,
      -1,  1502,    -1,    -1,    -1,    -1,   456,   457,    -1,    -1,
      -1,   461,    -1,    -1,    -1,   465,  1517,    -1,   468,    -1,
      -1,    -1,    -1,    -1,   684,  1006,    -1,   477,    -1,   689,
      -1,    -1,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,   505,    -1,  1656,    -1,   509,
     510,   721,    -1,   513,   514,    -1,    -1,   517,   518,   519,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   535,   536,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     550,  1700,   552,  1702,    -1,   555,  1705,   557,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1099,    -1,
      -1,  1102,   572,    -1,  1723,    -1,    -1,    -1,    -1,    -1,
    1111,    -1,    -1,    -1,    -1,    -1,   932,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1133,  1134,    -1,    -1,    -1,    -1,  1211,  1140,
      -1,  1142,    -1,   823,    -1,  1146,    -1,    -1,  1149,    -1,
    1151,    -1,    -1,  1154,  1155,  1156,  1157,    -1,    -1,  1778,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,   135,
      -1,    -1,   138,    -1,  1793,  1794,    -1,    -1,    -1,  1700,
      -1,    -1,    -1,    -1,  1705,   151,    -1,   153,    -1,   155,
     870,  1810,    -1,  1812,    -1,    -1,    -1,   877,    -1,  1200,
      -1,    -1,    -1,    -1,   884,  1206,   122,    -1,   678,    -1,
      -1,    -1,    -1,    -1,   684,    -1,  1835,    -1,  1837,    -1,
      -1,    -1,    -1,    -1,    -1,  1746,  1747,    -1,  1749,  1750,
      -1,    -1,    -1,  1754,  1755,  1756,  1757,    -1,    -1,    -1,
     710,    -1,    -1,    -1,   714,  1766,  1767,  1768,  1769,  1770,
    1771,  1772,  1773,    -1,   934,    -1,    -1,  1778,    -1,  1260,
      -1,    -1,   732,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     950,  1031,  1032,    -1,    -1,  1035,  1036,    -1,    -1,    -1,
      -1,    -1,    -1,  1099,    -1,    -1,  1102,    -1,    -1,    -1,
      -1,    -1,   258,    -1,    -1,  1111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1926,    -1,  1928,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1140,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1154,  1155,
    1156,  1157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1437,    -1,    -1,  1440,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1995,  1996,  1997,  1998,
    1999,  2000,  2001,    -1,   854,    -1,    -1,    -1,  2007,  2008,
    2009,  2010,    -1,    -1,    -1,    -1,    -1,    -1,   868,   869,
     870,    -1,    -1,    -1,    -1,  1926,    -1,   877,    -1,    -1,
     880,    -1,   882,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1502,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1517,    -1,    -1,    -1,    -1,    -1,
     920,   367,    -1,    -1,    -1,  2074,  2075,    -1,    -1,   929,
      -1,    -1,    -1,    -1,   934,    -1,    -1,  1988,    -1,    -1,
     940,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     950,    -1,    -1,   456,   457,    -1,    -1,    -1,    -1,    -1,
     456,   457,    -1,   963,    -1,    -1,    -1,    -1,   414,    -1,
      -1,    -1,   972,    -1,  1184,    -1,    -1,    -1,   424,   482,
     483,   427,    -1,  1193,    -1,    -1,   482,   483,    -1,    -1,
    1521,    -1,    -1,    -1,    -1,    -1,   996,    -1,    -1,    -1,
      -1,   504,   505,    -1,    -1,    -1,   509,   510,   504,   505,
     513,   514,    -1,   509,   510,    -1,   462,   513,   514,    -1,
      -1,  1552,   468,    -1,   520,    -1,    -1,    -1,    -1,    -1,
      -1,  1031,  1032,    -1,    -1,  1035,  1036,  1037,    -1,    -1,
      -1,    -1,  1042,  1043,    -1,    -1,   135,    -1,    -1,   138,
      -1,    -1,    -1,  1053,   550,    -1,   552,    -1,    -1,    -1,
      -1,    -1,   151,    -1,   153,    -1,   155,    -1,    -1,    -1,
    1601,  1602,    -1,    -1,    -1,    -1,    -1,    -1,  1609,    -1,
    1611,  1612,    -1,    -1,  1615,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1623,    -1,    -1,  1626,    -1,  1700,    -1,   545,
      -1,    -1,  1705,    -1,    -1,    -1,    -1,    -1,    -1,   555,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   621,    -1,    -1,    -1,   575,
      -1,    -1,   578,    -1,   580,    -1,   582,    -1,    -1,    -1,
      -1,    -1,    -1,  1746,  1747,    -1,  1749,  1750,    -1,    -1,
      -1,  1754,  1755,  1756,  1757,   651,   652,   653,   654,    -1,
      -1,    -1,    -1,  1766,  1767,  1768,  1769,  1770,  1771,  1772,
    1773,    -1,  1172,  1173,    -1,  1778,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1715,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1193,    -1,    -1,  1727,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1740,
    1210,    -1,  1212,    -1,  1745,    -1,    -1,  1748,  1508,  1509,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1230,    -1,    -1,    -1,    -1,    -1,    -1,  1237,    -1,   735,
      -1,    -1,    -1,    -1,    -1,   741,    -1,    -1,   744,    -1,
      -1,    -1,    -1,    -1,    -1,  1601,  1602,    -1,    -1,    -1,
      -1,    -1,    -1,  1609,    -1,  1611,  1612,    -1,    -1,  1615,
      -1,  1561,  1562,    -1,  1484,    -1,    -1,  1623,    -1,    -1,
    1626,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1819,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1830,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1926,    -1,  1856,  1857,  1858,  1859,    -1,
      -1,  1862,    -1,    -1,    -1,  1866,  1867,    -1,  1869,    -1,
    1871,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1883,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1893,  1894,    -1,    -1,    -1,   456,   457,    -1,
      -1,    -1,    -1,  1583,    -1,    -1,    -1,    -1,    -1,   468,
     826,   827,   828,    -1,    -1,  1988,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   482,   483,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   900,   901,    -1,    -1,   854,    -1,
      -1,    -1,    -1,    -1,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,    -1,    -1,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1434,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1448,    -1,
      -1,    -1,    -1,    -1,    -1,  1455,    -1,    -1,    -1,    -1,
      -1,   550,  1462,   552,    -1,    -1,    -1,   963,    -1,    -1,
      -1,  2002,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     926,    -1,  1482,    -1,  1484,    -1,    -1,  2018,    -1,    -1,
      -1,    -1,   988,    -1,   990,    -1,  2027,    -1,  2029,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1508,  1509,
    1856,  1857,  1858,  1859,    -1,    -1,  1862,    -1,    -1,    -1,
    1866,  1867,    -1,  1869,    -1,  1871,    -1,    -1,  1031,  1032,
      -1,    -1,  1035,  1036,    -1,  1031,  1032,  1883,    -1,  1035,
    1036,  1037,    -1,    -1,    -1,    -1,    -1,  2078,    -1,    -1,
    2081,  2082,    -1,    -1,  2085,    -1,  2087,    -1,    -1,  2090,
      -1,  1561,  1562,  2094,  1564,    -1,    -1,    -1,   106,  2100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1583,    -1,    -1,    -1,  2118,    -1,    -1,
      -1,    -1,   130,    -1,    -1,  2126,    -1,    -1,    -1,    -1,
    1096,    -1,    -1,  1099,    -1,    -1,  1102,    -1,    -1,  1055,
      -1,    -1,    -1,    -1,  1060,  1111,    -1,    -1,    -1,    -1,
    1066,    -1,  2153,    -1,    -1,    -1,  1072,    -1,    -1,    -1,
      -1,    -1,  1078,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1140,    -1,   135,    -1,    -1,   138,
      -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,  1154,  1155,
    1156,  1157,   151,    -1,   153,    -1,   155,    -1,    -1,    -1,
      -1,    -1,  2018,    -1,    -1,    -1,  1172,  1173,    -1,    -1,
      -1,  2027,    -1,  2029,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1694,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1995,  1996,    -1,  1998,  1999,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2007,  2008,  2009,
    2010,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2081,  2082,    -1,    -1,  2085,
      -1,  2087,    -1,    -1,  2090,    -1,    -1,    -1,  2094,    -1,
     288,    -1,    -1,    -1,    -1,   293,   294,    -1,    -1,   297,
      86,  1257,    -1,    -1,    -1,   303,  1212,    -1,  1264,    -1,
      -1,    -1,  1268,    -1,    -1,    -1,   314,    -1,   177,    -1,
    2126,    -1,    -1,    -1,  2074,  2075,     1,    -1,     3,     4,
       5,     6,   330,     8,     9,    -1,    -1,   335,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2153,    -1,    -1,
    1810,    -1,  1812,    28,   213,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   372,  1835,   374,  1837,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1847,    -1,    -1,
      65,    -1,    -1,    -1,   180,   181,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      85,   409,    -1,    -1,   963,    -1,    -1,   276,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     256,   257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1031,  1032,    -1,    -1,  1035,  1036,  1037,    -1,
      -1,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1409,  1410,    -1,    -1,   456,   457,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,   520,    -1,    -1,  1481,    -1,   386,    -1,    -1,
      -1,    -1,    -1,   482,   483,  1995,  1996,  1997,  1998,  1999,
      -1,    -1,    -1,    -1,    -1,  1508,  1509,  2007,  2008,  2009,
    2010,    -1,  1508,  1509,    -1,   504,   505,    -1,   556,    -1,
     509,   510,    -1,    -1,   513,   514,    -1,    -1,    -1,    -1,
    1526,    -1,  1528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1561,  1562,
      -1,   550,   461,   552,    -1,  1561,  1562,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2074,  2075,    -1,    -1,   616,    -1,
      -1,    -1,    -1,  1172,  1173,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1598,    -1,    -1,  1601,  1602,    -1,    -1,    -1,
      -1,    -1,    -1,  1609,    -1,  1611,  1612,    -1,    -1,  1615,
      -1,    -1,   521,    -1,    -1,   524,    -1,  1623,    -1,    -1,
    1626,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   685,    -1,    -1,
      -1,   689,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   570,    -1,    -1,    -1,    -1,    -1,    -1,   716,    -1,
      -1,    -1,   720,   721,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,   735,    -1,    -1,
      -1,   527,    -1,   741,   530,    -1,   744,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   763,    -1,    -1,    -1,    -1,
      -1,   769,   770,   771,   772,   773,   774,   775,    -1,    -1,
     778,   779,    -1,   781,   782,   783,   784,   785,   786,   787,
     788,    -1,   790,    -1,    -1,    -1,  1702,    -1,    -1,    -1,
     798,   799,   800,   801,   802,   803,   804,   805,   806,   807,
     808,   809,   810,   811,   812,   813,   814,   815,   816,   678,
     818,    -1,    -1,    -1,    -1,   684,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1794,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   847,
      -1,    -1,   850,   851,  1810,    -1,  1812,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,   654,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1835,
      -1,  1837,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   679,   680,   681,    -1,    -1,    -1,    -1,
    1856,  1857,  1858,  1859,    -1,    -1,  1862,    -1,    -1,    -1,
    1866,  1867,    -1,  1869,    -1,  1871,    -1,   703,    -1,    -1,
      -1,   919,    -1,   921,    -1,    -1,    -1,  1883,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,   735,
      -1,   900,   901,   951,    -1,   741,    -1,    -1,   744,  1508,
    1509,    -1,   960,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     988,    -1,   990,    -1,   130,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   870,  1561,  1562,   963,    -1,    -1,    -1,   877,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1995,  1996,    -1,  1998,  1999,    -1,    -1,  1995,
    1996,  1997,  1998,  1999,  2007,  2008,  2009,  2010,    -1,    -1,
      -1,  2007,  2008,  2009,  2010,    -1,   192,    -1,  1056,    -1,
      -1,    -1,  2018,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     929,  2027,    -1,  2029,    -1,   934,    -1,    -1,    -1,    -1,
      -1,    -1,  1031,  1032,    -1,    -1,  1035,  1036,  1037,    -1,
      -1,   950,    -1,    -1,    -1,    -1,    -1,    -1,  1096,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1107,
      -1,  2074,  2075,    -1,    -1,    -1,    -1,    -1,  2074,  2075,
      -1,    -1,    -1,    -1,    -1,  2081,  2082,    -1,    -1,  2085,
      -1,  2087,    -1,    -1,  2090,  1133,  1134,   996,  2094,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,    -1,    -1,    -1,   293,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,    -1,   303,    -1,    -1,
    2126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   314,    -1,
      -1,    -1,    -1,    -1,  1043,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1052,   330,  1054,    -1,  2153,    -1,   335,
      -1,    -1,   988,   989,   990,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1211,    -1,  1213,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1172,  1173,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,   372,  1235,   374,   626,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,  1253,    -1,    -1,    -1,  1257,
      -1,  1810,  1260,  1812,    -1,    -1,  1264,    -1,    -1,    -1,
    1268,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1835,    -1,  1837,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
    1096,    -1,    -1,    -1,    -1,  1174,    -1,  1176,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,   749,    -1,    -1,    -1,    -1,    -1,  1154,  1155,
    1156,  1157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   520,    -1,    -1,    -1,    -1,    -1,
      -1,  1177,    -1,  1179,    -1,   782,   783,   784,   785,   786,
      -1,    -1,   789,    -1,    -1,    -1,    -1,    -1,   795,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     556,    -1,    -1,   810,   811,   812,   813,   814,    -1,    -1,
     817,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1437,
      -1,    -1,  1440,    -1,    -1,    -1,  1995,  1996,  1997,  1998,
    1999,    -1,   588,    -1,    -1,    -1,    -1,    -1,  2007,  2008,
    2009,  2010,    -1,    -1,    -1,   852,   853,     0,    -1,    -1,
    1256,  1257,    -1,    -1,    -1,    -1,    -1,  1263,  1264,    -1,
     616,  1267,  1268,  1481,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1491,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1502,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,  1517,
      -1,    -1,    -1,  1521,    -1,  2074,  2075,    -1,  1526,    -1,
    1528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    77,    78,    -1,  1545,    -1,   685,
      -1,    -1,    85,   689,    87,    -1,    -1,    -1,    -1,  1508,
    1509,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     716,    -1,    -1,    -1,   720,   721,    -1,    -1,    -1,  1448,
      -1,    -1,   125,   126,    -1,    -1,  1455,    -1,    -1,   735,
    1598,    -1,    -1,    -1,    -1,   741,    -1,    -1,   744,    -1,
      -1,    -1,  1561,  1562,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1482,    -1,  1484,    -1,   763,  1487,    -1,
      -1,  1490,    -1,   769,   770,   771,   772,   773,   774,   775,
      -1,    -1,   778,   779,   177,   781,   782,   783,   784,   785,
     786,   787,   788,    -1,   790,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   798,   799,   800,   801,   802,   803,   804,   805,
     806,   807,   808,   809,   810,   811,   812,   813,   814,   815,
     816,    -1,   818,    -1,    -1,    -1,    -1,    -1,    -1,   222,
      -1,    -1,   225,    -1,    -1,  1481,    -1,    -1,    -1,    -1,
      -1,    -1,  1700,    -1,    -1,  1564,  1704,  1705,  1706,    -1,
      -1,   847,    -1,  1572,   850,   851,    -1,  1715,    -1,    -1,
     253,    -1,  1720,  1721,  1583,    -1,    -1,  1114,    -1,  1727,
      -1,    -1,    -1,   266,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   276,    -1,   278,    -1,    -1,  1746,  1747,
      -1,  1749,  1750,    -1,    -1,  1142,  1754,  1755,  1756,  1757,
      -1,    -1,  1149,    -1,    -1,    -1,    -1,    -1,  1766,  1767,
    1768,  1769,  1770,  1771,  1772,  1773,    -1,    -1,    -1,    -1,
    1778,    -1,    -1,   919,    -1,   921,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1794,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1597,  1598,  1200,    -1,   951,    -1,    -1,    -1,  1206,
      -1,    -1,    -1,    -1,   960,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,   380,    -1,    -1,
      -1,    -1,   988,    -1,   990,    -1,    -1,    -1,    -1,    -1,
      -1,  1810,    -1,  1812,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1835,    -1,  1837,    -1,
      -1,    -1,    -1,   426,    -1,  1893,  1894,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1056,    84,    85,  1782,  1783,    -1,  1785,    -1,  1926,  1927,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,  1936,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
    1096,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,  1107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1838,
      -1,    -1,    -1,    -1,   517,   518,   519,    -1,   521,    -1,
    1988,   524,    -1,    -1,  1992,  1993,    -1,  1133,  1134,    -1,
      -1,    -1,   535,   536,   537,    -1,    -1,  1793,  1794,    -1,
      -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1995,  1996,  1997,  1998,
    1999,    -1,    -1,    -1,    -1,    -1,    45,    -1,  2007,  2008,
    2009,  2010,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1211,    -1,  1213,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    77,     8,
       9,    -1,    -1,    -1,    -1,    77,    78,    86,    87,  1235,
      -1,    -1,  2100,    85,    -1,    94,    95,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1253,    -1,    -1,
    2118,  1257,    -1,   112,  1260,  2074,  2075,    -1,  1264,    -1,
      -1,    -1,  1268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,    -1,   125,   126,   678,    65,   136,    -1,    -1,
      -1,   684,    71,    72,    73,    -1,    -1,    -1,    -1,   148,
      -1,   150,    -1,   152,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   180,   181,   112,    -1,   177,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     222,    -1,    -1,   225,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   253,    -1,    -1,   256,   257,   258,
      -1,   253,    -1,    -1,    -1,    -1,    -1,   266,    -1,    -1,
      -1,    -1,    -1,    -1,   266,    -1,    -1,   276,   277,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1437,    -1,    -1,  1440,    -1,    -1,   296,    -1,    -1,
      -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   311,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1481,    -1,    -1,    -1,   882,
      -1,    -1,    -1,  1740,    -1,  1491,    -1,    -1,  1745,  1746,
    1747,  1748,  1749,  1750,    -1,    -1,  1502,  1754,  1755,  1756,
    1757,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1517,    -1,    -1,    -1,  1521,    -1,   920,    -1,    -1,
    1526,    -1,  1528,    -1,    -1,    -1,    -1,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   940,    -1,  1545,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,   407,    -1,
     409,   410,    -1,    -1,   413,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    28,
      -1,    -1,    -1,    -1,   426,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,  1598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   461,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,   465,    -1,    74,    75,    -1,    -1,   478,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1042,
    1043,   100,    -1,   621,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,    -1,   517,   518,   519,   527,   521,
      -1,   530,   524,    -1,    -1,   653,   654,    -1,    -1,    -1,
      -1,    -1,    -1,   535,   536,   537,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1700,    -1,    -1,    -1,  1704,  1705,
    1706,    -1,    -1,   555,    -1,    -1,    -1,    -1,    -1,  1715,
      -1,    -1,    -1,    -1,  1720,  1721,    -1,    -1,    -1,    -1,
      -1,  1727,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1746,  1747,    -1,  1749,  1750,    -1,    -1,    -1,  1754,  1755,
    1756,  1757,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1766,  1767,  1768,  1769,  1770,  1771,  1772,  1773,   627,    -1,
      -1,  1174,  1778,  1176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1794,    -1,
      -1,    -1,   651,   652,   653,   654,    -1,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     679,   680,   681,    -1,    -1,   684,   678,    -1,    -1,    -1,
     689,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,   703,    -1,    -1,    -1,    -1,    -1,
      -1,   710,   711,   712,    -1,   714,   715,    -1,    -1,    -1,
      -1,    -1,   721,   150,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,   732,    -1,    -1,   735,    -1,    71,    72,
      73,    -1,   741,    -1,    -1,   744,    -1,  1893,  1894,    -1,
      -1,    84,    85,   180,   181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
    1926,  1927,   115,   116,   117,    -1,   213,   120,    -1,    -1,
    1936,   124,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   823,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1988,    -1,    -1,    -1,  1992,  1993,   847,    -1,
     277,   850,   851,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     869,   870,    -1,    -1,    -1,   302,    -1,    -1,   877,    -1,
      -1,   880,   881,   882,   311,   884,    -1,    -1,    -1,    -1,
     882,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1462,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   920,    -1,
      -1,    -1,    -1,    -1,    -1,   934,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   937,    -1,   939,   940,    -1,
      -1,   950,   951,    -1,  2100,    -1,    -1,    -1,    -1,   958,
     959,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,   970,  2118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     407,  1099,   409,   410,  1102,    -1,    -1,    -1,    28,   988,
     989,   990,    -1,  1111,    -1,    -1,    -1,   996,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1564,  1140,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,   461,    -1,  1154,  1155,  1156,  1157,
      -1,    -1,    -1,    -1,    84,    85,    -1,    -1,    -1,    -1,
    1042,  1043,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,    -1,   520,    -1,    -1,    -1,  1096,    -1,    -1,
     527,    -1,    -1,   530,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1115,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1154,  1155,  1156,  1157,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1177,    -1,
    1179,    -1,  1174,    -1,  1176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1193,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1210,  1211,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   651,   652,   653,   654,    -1,    -1,
      -1,  1230,    -1,    -1,    -1,    -1,    -1,    -1,  1237,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   679,   680,   681,    86,    -1,  1256,  1257,    -1,
      -1,    -1,   689,    -1,  1263,  1264,    -1,    -1,  1267,  1268,
       1,    -1,     3,     4,     5,     6,   703,     8,     9,    -1,
      -1,    -1,    -1,   710,   711,   712,    -1,   714,   715,    -1,
      -1,    -1,    -1,    -1,   721,  1838,    -1,    28,    -1,   130,
      -1,    -1,    -1,    -1,    -1,   732,    -1,    -1,   735,    -1,
      -1,    -1,    -1,    -1,   741,    -1,    -1,   744,    -1,   150,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,   180,
     181,    -1,    -1,    84,    85,    86,    -1,    88,    89,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   213,    -1,   115,   116,   117,   118,    -1,   120,
      -1,   122,    -1,   124,   125,   126,   823,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     847,    -1,   253,   850,   851,   256,   257,   258,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1437,    -1,
      -1,  1440,    -1,   870,    -1,    -1,   277,    -1,    -1,    -1,
     877,    -1,    -1,    -1,    -1,   882,    -1,   884,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   296,    -1,    -1,    -1,    -1,
    1462,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     311,    -1,  1481,  1601,  1602,  1484,    -1,    -1,    -1,    -1,
      -1,  1609,    -1,  1611,  1612,    -1,    -1,  1615,    -1,    -1,
      -1,    -1,    -1,  1502,    -1,  1623,    -1,   934,  1626,    -1,
      -1,    -1,    -1,    -1,  1513,  1514,  1515,  1516,    -1,    -1,
      -1,    -1,    -1,   950,   951,    -1,    -1,    -1,    -1,    -1,
      -1,   958,   959,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,   970,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   988,   989,   990,    28,    -1,    -1,    -1,    -1,   996,
      -1,    -1,  1564,    -1,    -1,    -1,   407,    -1,   409,   410,
      -1,    -1,    -1,    -1,  1583,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1597,  1598,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     461,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,   118,    -1,   120,  1656,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,  1096,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,
      -1,    -1,    -1,    -1,    -1,    -1,   527,    -1,    -1,   530,
      -1,  1700,    -1,    -1,    -1,    -1,  1705,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1723,    -1,    -1,  1154,  1155,  1156,
    1157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1856,  1857,
    1858,  1859,    -1,    -1,  1862,    -1,    -1,    -1,  1866,  1867,
    1177,  1869,  1179,  1871,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1883,  1193,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1778,
      -1,    -1,    -1,  1210,  1211,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1793,  1794,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1230,    -1,    -1,    -1,    -1,    -1,    -1,
    1237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     651,   652,   653,   654,    -1,    -1,    -1,    86,    -1,  1256,
    1257,    -1,    -1,    -1,    -1,    -1,  1263,  1264,    -1,    -1,
    1267,  1268,    -1,    -1,    -1,    -1,  1838,    -1,   679,   680,
     681,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   689,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   130,   703,    -1,    -1,    -1,    -1,   136,    -1,   710,
     711,   712,    -1,   714,   715,    -1,    -1,    -1,    -1,   148,
     721,   150,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,
    2018,   732,    -1,    -1,   735,    -1,    -1,    -1,    -1,  2027,
     741,  2029,    -1,   744,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   180,   181,    -1,    -1,    -1,    -1,  1926,    -1,  1928,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2081,  2082,    -1,    -1,  2085,    -1,  2087,
      -1,    -1,  2090,    -1,    -1,    -1,  2094,     1,    -1,    -1,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,   823,    -1,   253,    -1,    -1,   256,   257,   258,
      -1,  2000,  2001,    -1,    -1,    -1,    -1,    -1,  2126,    -1,
    1437,    -1,    -1,  1440,    -1,    -1,   847,    -1,   277,   850,
     851,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2153,    -1,   296,    -1,   870,
      -1,    65,    -1,   302,    -1,    -1,   877,    71,    72,    73,
      -1,   882,    -1,   884,  1481,    -1,    -1,  1484,    -1,    -1,
      84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,  1502,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,  1513,  1514,  1515,  1516,
      -1,    -1,    -1,   117,   118,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   934,   128,   129,   130,   131,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,   950,
     951,    -1,    -1,    -1,    -1,    -1,    -1,   958,   959,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,   970,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   407,    -1,
     409,   410,    -1,    -1,   413,    -1,  1583,   988,   989,   990,
      -1,    -1,    -1,    -1,    -1,   996,   425,    -1,    -1,    -1,
    1597,  1598,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   461,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,   478,
     112,    -1,    -1,   115,   116,   117,   118,    -1,   120,  1656,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   520,    -1,    -1,    -1,  1096,    -1,    -1,   527,    -1,
      -1,   530,    -1,  1700,    -1,    -1,    -1,    -1,  1705,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1723,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1154,  1155,  1156,  1157,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1177,    -1,  1179,    -1,
      -1,  1778,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1193,    -1,    -1,    -1,  1793,  1794,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1210,
    1211,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   651,   652,   653,   654,    -1,    -1,    -1,  1230,
      -1,    -1,    -1,    -1,    -1,    -1,  1237,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     679,   680,   681,    -1,    -1,  1256,  1257,    -1,    -1,    -1,
      -1,    -1,  1263,  1264,    -1,    -1,  1267,  1268,    -1,    -1,
      -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,    -1,    -1,
      -1,   710,   711,    -1,    -1,   714,   715,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   735,    -1,    -1,    -1,
      -1,    -1,   741,    -1,    -1,   744,    -1,    -1,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1926,
      -1,  1928,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,   136,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     148,    -1,   150,    -1,   152,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   823,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2000,  2001,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   180,   181,    -1,    -1,    -1,    -1,   847,    -1,
      -1,   850,   851,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1437,    -1,    -1,  1440,
     869,   870,    -1,    -1,    -1,    -1,    -1,    -1,   877,    -1,
      -1,   880,    -1,    -1,    -1,   884,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1481,    -1,    -1,  1484,    -1,   253,    -1,    -1,   256,   257,
     258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1502,    -1,    -1,    -1,   934,    -1,    -1,    -1,   277,
      -1,    -1,  1513,  1514,  1515,  1516,    -1,    -1,    -1,    -1,
      -1,   950,   951,    -1,    -1,    -1,    -1,    -1,   296,   958,
     959,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,    -1,
      -1,   970,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   988,
     989,   990,    -1,    -1,    -1,    -1,    -1,   996,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1583,    -1,    -1,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,  1597,  1598,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,   407,
      -1,   409,   410,    -1,    -1,   413,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,  1656,    -1,   425,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,  1096,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,  1700,
      -1,   115,   116,    -1,  1705,    -1,    -1,    -1,    -1,    -1,
     478,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1723,    -1,    -1,  1154,  1155,  1156,  1157,    -1,
      -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1177,    -1,
    1179,   148,   520,   150,    -1,   152,    -1,    -1,    -1,   527,
      -1,    -1,   530,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1778,    -1,    -1,
      -1,  1210,  1211,   180,   181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1793,  1794,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1230,    -1,    -1,    -1,    -1,    -1,    -1,  1237,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1256,  1257,    -1,
      -1,    -1,    -1,    -1,  1263,  1264,    -1,    -1,  1267,  1268,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,    -1,   651,   652,   653,   654,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
      -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,    -1,    -1,
      -1,   679,   680,   681,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1926,    -1,  1928,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,    -1,
      -1,    -1,   710,   711,    -1,    -1,   714,   715,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   735,    -1,    -1,
      -1,    -1,    -1,   741,    -1,    -1,   744,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2000,
    2001,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1437,    -1,
     407,  1440,   409,   410,    -1,    -1,   413,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1481,    -1,    -1,  1484,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1502,    -1,    -1,    -1,    -1,    -1,   847,
      -1,   478,   850,   851,  1513,  1514,  1515,  1516,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   869,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   880,    -1,    -1,    -1,    -1,    -1,     0,    -1,
      -1,    -1,    -1,   520,    -1,    -1,    -1,    -1,    -1,    -1,
     527,    -1,    -1,   530,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1583,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    45,    46,    -1,    -1,    -1,  1597,  1598,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   951,    -1,    -1,    -1,    -1,    -1,    -1,
     958,   959,    -1,    -1,    -1,    77,    78,    -1,    -1,    -1,
      82,    -1,   970,    -1,    -1,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,
     988,   989,   990,    -1,    -1,    -1,    -1,  1656,   996,    -1,
     112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   651,   652,   653,   654,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1700,    -1,    -1,    -1,    -1,  1705,    -1,    -1,    -1,
      -1,    -1,   679,   680,   681,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,   258,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   703,   189,    -1,    -1,
      -1,    -1,    -1,   710,   711,    -1,    -1,   714,   715,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1096,    -1,
      -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,   735,    -1,
      -1,    -1,    -1,    -1,   741,    -1,    -1,   744,   311,  1778,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1793,  1794,   130,    -1,    -1,    -1,
      -1,   253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,    -1,  1154,  1155,  1156,  1157,
      -1,    -1,    -1,    -1,   276,    -1,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1177,
      -1,  1179,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1210,  1211,    -1,    -1,    -1,    -1,    -1,    -1,
     847,    -1,    -1,   850,   851,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1230,   426,    -1,    -1,    -1,    -1,    -1,  1237,
      -1,    -1,   869,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   880,    -1,    -1,    -1,    -1,  1256,  1257,
      -1,    -1,    -1,    -1,    -1,  1263,  1264,  1926,    -1,  1267,
    1268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,   288,   407,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   297,    -1,    -1,    -1,    -1,    -1,   303,
      -1,    28,    -1,    -1,   426,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   951,    -1,    -1,    -1,    -1,    -1,
      -1,   958,   959,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2000,  2001,   970,    -1,    -1,    -1,    -1,    65,   461,
      -1,    -1,   464,    -1,    71,    72,    73,    -1,    -1,    -1,
      -1,   988,   989,   990,    -1,    -1,    -1,    84,    85,   996,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   372,    -1,
     374,    98,    -1,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,   517,   518,   519,   125,   126,
     127,   128,   129,   130,   131,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   535,   536,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   626,    -1,    -1,    -1,    -1,    -1,  1437,
      -1,    -1,  1440,   555,    -1,   557,    -1,   640,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   568,    -1,   651,   652,
     653,   654,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1096,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1481,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   604,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1502,   698,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1513,  1514,  1515,  1516,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,  1154,  1155,  1156,
    1157,    -1,    -1,   726,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1177,    -1,  1179,    -1,    -1,    -1,    -1,    -1,   751,    -1,
      -1,    -1,   556,    -1,    -1,   677,    -1,    -1,    -1,    -1,
      -1,   314,   684,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1210,  1211,    -1,    -1,   330,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   789,    -1,   710,  1597,
    1598,    -1,   714,  1230,   797,    -1,    -1,    -1,    -1,    -1,
    1237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     732,    -1,   616,    -1,   817,    -1,    -1,    -1,    -1,  1256,
    1257,    -1,    -1,    -1,    -1,     1,  1263,  1264,    -1,    -1,
    1267,  1268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1656,   852,
     853,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,   882,
      -1,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,  1700,    -1,    -1,    -1,    -1,  1705,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,   735,   854,   855,   110,   111,    -1,   741,    -1,    -1,
     744,    -1,    -1,    -1,    -1,    -1,   122,   869,   870,    -1,
      -1,    -1,   311,    -1,    -1,   877,    -1,    -1,   880,   881,
     882,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1778,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1793,  1794,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   920,    -1,
    1437,    -1,    -1,  1440,    -1,    -1,   928,    -1,    -1,    -1,
      -1,    -1,   934,    -1,    -1,    -1,    -1,    -1,   940,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   950,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   847,  1481,    -1,   850,   851,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1502,    -1,   426,    -1,    -1,
      -1,    -1,    -1,   626,   996,    -1,  1513,  1514,  1515,  1516,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1099,    -1,    -1,  1102,
    1103,  1104,    -1,  1106,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1114,    -1,    -1,    -1,   919,    -1,   921,  1926,  1122,
    1042,    -1,    -1,    -1,    -1,    -1,  1129,    -1,    -1,  1051,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1140,    -1,    -1,
      -1,    -1,    -1,    -1,  1147,    -1,    -1,   951,    -1,  1152,
      -1,  1154,  1155,  1156,  1157,    -1,   960,    -1,    -1,    -1,
    1597,  1598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   988,    -1,   990,    -1,    -1,    -1,
      -1,    -1,  2000,  2001,    -1,    -1,   749,    -1,    -1,  1202,
      -1,    -1,    -1,    -1,    -1,  1208,    -1,    -1,    -1,    -1,
     763,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1656,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1231,   782,
     783,   784,   785,   786,    -1,    -1,   789,   790,    -1,    -1,
      -1,    -1,   795,    -1,    -1,   798,    -1,    -1,    -1,    -1,
      -1,    -1,  1056,    -1,    -1,    -1,    -1,   810,   811,   812,
     813,   814,    -1,  1700,   817,   818,    -1,   626,  1705,    -1,
      -1,  1193,    -1,    -1,    -1,  1278,    -1,    -1,    -1,    -1,
      -1,   640,    -1,    -1,    -1,   644,    -1,    -1,  1210,    -1,
    1212,    -1,  1096,    -1,    -1,    -1,    -1,    -1,  1220,   852,
     853,    -1,    -1,  1107,    -1,    -1,    -1,    -1,  1230,    -1,
      -1,    -1,    -1,    -1,    -1,  1237,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1330,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   698,
    1343,  1778,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   712,    -1,    -1,  1793,  1794,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   726,   727,    -1,
      -1,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1394,   751,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1211,    -1,  1213,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1426,    -1,    -1,    -1,  1430,    -1,    -1,
     789,  1235,    -1,    -1,    -1,    65,    -1,    -1,   797,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1257,    84,    85,    -1,    -1,   817,    -1,
    1264,    -1,    -1,    -1,  1268,    -1,    -1,    -1,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,  1926,
     120,    -1,    -1,   852,   853,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1434,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   882,    -1,  1447,    -1,    -1,    -1,    -1,
      -1,    -1,  1454,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1482,  1114,  1484,  2000,  2001,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1142,
      -1,    -1,    -1,    -1,    -1,    -1,  1149,    -1,  1601,  1602,
      -1,    -1,  1605,    -1,  1607,    -1,    -1,  1610,  1611,    -1,
      -1,    -1,    -1,  1616,  1617,    -1,  1619,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1629,    -1,  1631,    -1,
      -1,    -1,    -1,  1437,    -1,    -1,  1440,    -1,    -1,    -1,
      -1,  1563,    -1,    -1,    -1,    -1,    -1,  1200,    -1,    -1,
      -1,    -1,    -1,  1206,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1583,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1678,    -1,  1481,    -1,    -1,
      -1,    -1,    -1,    -1,  1687,    -1,    -1,  1491,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1502,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1260,    -1,    -1,
      -1,    -1,     1,  1517,     3,     4,     5,     6,    -1,     8,
       9,    -1,  1526,    -1,  1528,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,  1545,    -1,    -1,  1103,  1104,    -1,  1106,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1114,    -1,    -1,  1117,    -1,
      -1,    -1,    -1,  1122,    -1,    -1,    -1,    -1,    -1,    -1,
    1129,  1130,  1694,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,  1147,  1148,
      -1,    -1,    -1,  1152,  1598,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,   118,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,  1202,    -1,  1848,    -1,    -1,    -1,  1208,
      -1,    -1,  1774,    -1,    -1,    -1,    -1,    -1,    -1,  1862,
    1863,    -1,    -1,    -1,    -1,    -1,    -1,  1870,    -1,    -1,
      -1,  1874,  1231,  1876,  1796,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1885,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1700,    -1,    -1,    46,
    1704,  1705,  1706,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1720,  1721,    -1,  1278,
    1279,    -1,    -1,    -1,    -1,  1928,    -1,    -1,    -1,    76,
      77,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1746,  1747,    -1,  1749,  1750,    -1,    -1,    -1,
    1754,  1755,  1756,  1757,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1766,  1767,  1768,  1769,  1770,  1771,  1772,  1773,
      46,  1330,    -1,  1332,  1778,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,  1343,  1344,  1908,    -1,    -1,    -1,
    1794,    -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,    -1,
      -1,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   158,    -1,    -1,    -1,    -1,  2019,  2020,    -1,  2022,
      -1,  2024,    -1,    -1,  2027,  2028,  2029,    -1,    -1,    -1,
     177,    -1,    -1,    -1,    -1,  1394,    -1,  1396,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   212,   213,  1426,    -1,  1428,
      -1,  1430,    -1,  1432,    -1,    -1,    -1,    -1,    -1,    -1,
    2083,    -1,    -1,  2086,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2094,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   177,    -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
      -1,    -1,  1926,  1927,    -1,    -1,  2129,    -1,    -1,   276,
      -1,    -1,  1936,    -1,    -1,    -1,    -1,   213,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,
      -1,    -1,    -1,    -1,  1988,    -1,    -1,  1740,  1992,  1993,
     266,    -1,  1745,  1746,  1747,  1748,  1749,  1750,    -1,    -1,
     276,  1754,  1755,  1756,  1757,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1766,  1767,  1768,  1769,  1770,  1771,  1772,
    1773,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1589,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,   386,
      -1,    -1,    -1,    -1,    -1,    -1,  1605,  1606,  1607,  1608,
      -1,  1610,  1611,     1,    -1,     3,    -1,  1616,  1617,    -1,
    1619,    -1,  1621,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1629,  1630,  1631,    -1,    -1,    -1,    -1,    -1,    -1,   426,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,   380,    -1,    -1,    -1,    -1,    -1,
     386,    -1,    -1,    -1,   461,    -1,    -1,    65,    66,  1678,
    1679,    -1,    -1,    -1,    -1,    -1,    74,    75,  1687,  1688,
     477,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     426,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,   116,    -1,
     517,   518,   519,    -1,   521,    -1,    -1,   524,   126,    -1,
      -1,    -1,    -1,    -1,    -1,   461,    -1,    -1,   535,   536,
     537,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   553,    -1,   555,    -1,
     557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,   570,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,   517,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,   535,
     536,   537,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,   555,
      -1,   557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1848,
     100,    -1,    -1,    -1,   570,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,  1863,   115,    -1,    -1,    -1,  1868,
      -1,  1870,  1871,    -1,  1873,  1874,   126,  1876,    -1,  1878,
      -1,    -1,    -1,   670,    -1,  1884,  1885,    -1,    -1,    -1,
      -1,   678,    -1,    -1,    -1,    -1,    -1,   684,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1928,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,   678,    -1,    -1,    -1,    -1,    -1,   684,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,    90,
    2019,  2020,    -1,  2022,  2023,  2024,    -1,    98,    -1,  2028,
    2029,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,   116,   117,   118,    -1,   120,
      -1,   122,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,   868,    -1,   870,  2083,  2084,    -1,  2086,  2087,    -1,
     877,    -1,  2091,    -1,    -1,   882,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2129,    -1,    -1,   920,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,   929,    -1,    -1,    74,    75,   934,    -1,    -1,
      79,    -1,    -1,   940,   870,    -1,    85,    86,    87,    -1,
      -1,   877,    -1,   950,    -1,    -1,   882,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,   126,    -1,    -1,
      -1,    -1,    -1,    -1,   920,    -1,    -1,    -1,    -1,   996,
      -1,    -1,    -1,   929,    -1,    28,    -1,    -1,   934,    -1,
      -1,    -1,    -1,    -1,   940,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   950,    -1,    -1,    -1,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    -1,    -1,  1042,  1043,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,  1052,    79,  1054,    -1,    -1,
      -1,    84,    85,    86,    -1,    88,    89,    90,    -1,    -1,
     996,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,    -1,    -1,   122,
      -1,   124,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1042,  1043,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1052,    -1,  1054,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1174,    -1,  1176,
      -1,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,  1174,    68,
    1176,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,    -1,    -1,
      -1,     1,    -1,    -1,    -1,    -1,    -1,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,   113,   114,   115,    -1,    -1,   118,   119,
     120,   121,    -1,   123,    -1,    -1,   126,    -1,   128,   129,
     130,  1448,   132,   133,   134,   135,   136,    -1,  1455,    -1,
      -1,    -1,    -1,    -1,    -1,  1462,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,  1482,    -1,  1484,    -1,    -1,
    1487,    -1,    -1,  1490,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1448,    -1,    -1,    -1,    -1,    -1,    -1,  1455,
      -1,    -1,    -1,    -1,    -1,    -1,  1462,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1482,    -1,  1484,    84,
      85,  1487,    -1,    -1,  1490,    -1,    -1,  1564,    -1,    -1,
      -1,    -1,    -1,    98,    -1,  1572,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,  1583,   112,    -1,    -1,
     115,   116,   117,   118,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     0,     1,    -1,     3,     4,     5,     6,  1564,     8,
       9,    -1,    -1,    -1,    -1,    -1,  1572,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1583,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1782,  1783,    -1,  1785,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1838,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1782,  1783,    -1,  1785,
      -1,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,  1838,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,    -1,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,   116,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
     116,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,   116,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,   116,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
     116,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,   118,    -1,   120,   121,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,   121,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,     1,   117,     3,     4,
       5,     6,    -1,     8,     9,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,     1,   117,     3,     4,     5,     6,    -1,     8,     9,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,     1,   117,
       3,     4,     5,     6,   122,     8,     9,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,    90,
      -1,     1,    -1,     3,     4,     5,     6,    98,     8,     9,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    28,    -1,
      -1,   122,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    -1,    88,    89,
      90,    -1,     1,    -1,     3,     4,     5,     6,    98,     8,
       9,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    28,
      -1,    -1,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,   118,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,    -1,    -1,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,   118,    -1,    -1,
      -1,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,   120,    -1,    -1,    -1,   124,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,   120,
      -1,    -1,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,   120,    -1,    -1,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,   120,    -1,    -1,    -1,   124,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,   121,   122,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,    -1,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,    -1,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,     0,
       1,    -1,     3,     4,     5,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,   116,   117,   118,    -1,   120,
     121,    -1,    -1,    -1,   125,   126,     0,     1,    -1,     3,
       4,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,    -1,    -1,
      -1,   125,   126,     0,     1,    -1,     3,     4,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,     0,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,     0,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
       0,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,     1,    -1,     3,     4,
       5,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,     1,    -1,     3,     4,     5,    -1,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,     3,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
       0,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   126,    -1,   128,    -1,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    -1,    66,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    -1,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,     0,    -1,    99,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,   121,   122,    -1,   124,    -1,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    -1,    66,    -1,    68,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    -1,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,     0,    -1,    99,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,   122,
      -1,   124,    -1,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    -1,
      66,    -1,    68,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    -1,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,     0,    -1,    99,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,   118,    -1,    -1,   121,   122,    -1,   124,    -1,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    -1,    66,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    -1,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,     0,    -1,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,   122,    -1,   124,    -1,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    -1,    66,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    -1,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    -1,    99,   100,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
     122,    -1,   124,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
      -1,    -1,   126,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,
      -1,   126,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    76,    77,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,     3,    -1,    -1,    -1,   105,    -1,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   124,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    78,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,    -1,    -1,   124,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   124,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
     118,    -1,   120,   121,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   121,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,     3,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    76,    77,    -1,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,   100,   101,    -1,    -1,
      -1,   105,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,   118,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,   107,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,   107,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,   107,    -1,    -1,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,   118,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,   118,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,   118,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    76,
      77,    -1,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,     0,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,   100,   101,    -1,    -1,    -1,   105,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,   116,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,   116,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    -1,    -1,   116,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    -1,    -1,    -1,    -1,   116,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,   116,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    -1,   116,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,
      -1,    -1,   116,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,   115,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,   115,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,   115,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
     107,    -1,    -1,   110,   111,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    80,    81,    -1,    -1,    -1,    85,    86,
      87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,   116,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   122,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    53,    65,    66,    74,    75,
      76,    77,    79,    80,    81,    82,    83,    85,    86,    87,
     100,   101,   105,   110,   111,   112,   115,   118,   138,   139,
     140,   142,   167,   204,   205,   206,   207,   208,   209,   264,
     267,   268,   271,   272,   273,   274,   275,   276,   277,   279,
     283,   286,   287,   288,   289,   290,   291,   296,   297,   306,
     307,   308,   315,   316,   320,   323,   328,   357,   360,   361,
     379,   380,   382,   383,   384,   385,   386,   387,    77,   124,
       5,    31,   209,   381,   209,   115,   115,   115,   142,   209,
     381,   277,   278,   315,   323,    37,   140,   209,   305,   306,
     308,   310,   311,   312,   314,   315,   323,   326,   327,   332,
     113,   118,   139,   140,   209,   122,   124,   118,   122,   121,
     112,   113,   204,   209,   122,   142,   209,   122,   124,   121,
     113,   122,   124,   122,   121,   122,   140,   209,   315,     1,
      31,    37,    38,   118,   138,   140,   206,   208,   209,   264,
     274,   275,   277,   279,   308,   312,   315,   323,   326,   327,
     328,   330,   338,   339,   340,   341,    37,    38,   140,   315,
     340,   115,   126,     1,    29,    30,    31,    32,    33,    65,
     116,   138,   209,   263,   267,   269,   270,   277,   279,   283,
     284,   285,   291,   295,   303,   304,   344,   345,   346,   347,
     348,   349,   323,   115,   308,   315,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    46,    47,    66,    85,
      87,   100,   122,   142,   163,   164,   263,   268,   269,   277,
     280,   284,   286,   294,   359,   362,   363,   364,   369,   370,
     371,    31,    76,   124,   206,   208,   296,   360,   361,   379,
     380,   387,     1,   206,   273,   290,   296,   328,   357,   383,
       1,   382,   383,     0,   209,   381,   381,     5,   119,   381,
       1,     4,     6,     8,     9,    65,    71,    72,    73,    84,
      85,    98,   102,   103,   104,   105,   106,   107,   108,   109,
     112,   115,   117,   125,   126,   128,   129,   130,   131,   142,
     168,   169,   209,   210,   211,   212,   215,   216,   220,   221,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   241,   243,   244,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     381,   393,   394,   395,   396,   139,   209,   122,   142,   209,
     277,   323,   126,   115,   126,   116,   303,   304,   348,   349,
     323,   326,   327,   305,   310,   314,   315,   116,   315,   116,
     315,   315,    85,   142,   193,   194,   196,   198,   202,   203,
     209,   221,   235,   236,   244,   256,   261,   294,   118,   113,
     113,   118,     1,    68,    78,    80,    81,    85,    88,    91,
      92,    93,    94,    96,    98,    99,   115,   117,   118,   121,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   165,
     166,   168,   169,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   185,   189,   190,   191,   192,   209,   216,
     241,   295,   307,   309,   315,   323,   328,   329,   358,    80,
      81,   209,   263,   267,   277,   280,   283,   291,   298,   299,
       1,   121,   191,   192,   140,   209,     1,   209,   265,   266,
       1,   121,   266,   299,    65,   193,   195,   197,   199,   200,
     201,   209,     1,   121,   191,   192,   299,     1,   121,   191,
     192,     1,   121,   191,   192,   140,   209,   120,   120,   120,
     122,   323,   308,   312,   315,     1,   119,   363,   370,   371,
     363,   370,   371,     1,   118,   120,   120,   323,   118,   127,
     139,   209,   257,   261,   262,   120,   122,   142,   209,   121,
     122,   121,   122,   315,    37,   115,   126,   128,   138,   140,
     209,   263,   269,   277,   279,   284,   305,   306,   315,   321,
     323,   324,   327,     1,   116,   120,     1,   116,   120,     1,
     120,     1,   120,   116,   116,   308,   115,   308,   115,   115,
       1,   118,     1,   121,     1,    37,    38,   118,   209,   263,
     269,   277,   280,   284,   315,   340,   341,     1,   118,     1,
     359,   362,   370,   371,   359,   362,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    86,    88,    89,
      90,   118,   124,   186,   187,   188,   209,   216,   221,   237,
     239,   244,   257,   258,   259,   320,   350,   351,   354,   355,
     356,   363,   364,   365,   366,   367,   368,   370,   371,   373,
     374,   375,   376,   377,   378,   121,    31,   209,   381,   209,
     204,   205,   207,   208,   305,   306,   312,   315,   323,   328,
     330,   363,   371,   206,   296,   119,   236,   116,     1,   115,
     169,   212,   217,   220,   222,   242,   243,   245,   115,   221,
     244,   221,   244,   115,   209,   263,   269,   277,   280,   284,
     302,   261,   115,   115,   302,   261,   115,   115,   115,   115,
     115,   115,   222,   245,   116,   237,   239,   259,   269,   277,
     279,   284,   292,   342,   381,   122,   170,   171,   213,   218,
     237,   122,     1,   121,   122,     1,     7,     8,     9,   115,
     123,   126,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,   119,   238,   171,   213,   214,   224,   246,   112,
     132,   133,   129,   130,    10,    11,   227,   249,    12,    13,
     113,   114,    14,    15,   128,   134,   135,    16,    17,   136,
     238,   116,     7,     8,     9,   115,   123,   126,   238,   112,
     132,   133,   129,   130,    10,    11,    12,    13,   113,   114,
      14,    15,   128,   134,   135,    16,    17,   136,   238,   116,
     116,   107,   209,   295,   388,   391,   392,   122,   122,   127,
     139,   261,   262,   127,   139,   261,   262,   116,   116,   116,
     116,   305,   310,   314,   116,   116,   305,   119,    11,   114,
     120,   119,   136,   136,   115,   315,   323,   324,    65,   193,
     201,   209,   201,     1,   209,   263,   277,   280,   291,   300,
     295,   328,   329,   115,   142,   209,   209,   295,     1,   115,
     300,   112,   115,   209,   295,   118,   370,   371,   370,   371,
     370,   118,   370,   371,   118,     1,   121,     1,     1,   118,
     120,   120,    69,    70,    91,    95,    97,   121,    69,    70,
     121,   118,     1,   189,   190,     1,   189,   190,     1,   119,
     115,   124,   209,   281,   282,   305,   311,   313,   315,   323,
     330,   331,   332,     1,   295,   303,   346,   323,   309,   315,
     115,   124,   149,   150,   165,   166,   168,   169,   178,   209,
     295,   113,   142,   209,   209,   263,   277,   280,   113,   113,
     119,   120,     1,   118,   122,    28,   141,   209,   209,   114,
     120,   119,   326,   338,   338,   338,   118,   120,   121,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   213,   214,   216,   236,   257,   294,   335,   336,   305,
     308,   310,   312,   314,   305,   312,   122,   237,   258,   333,
     334,   370,   371,   370,   371,   338,   339,   338,   339,   127,
     127,   127,    51,   344,   345,     1,   266,   122,   122,     1,
     121,   191,   192,     1,   121,   191,   192,   122,   116,   209,
     303,   304,   315,   323,   324,   348,   349,   127,   139,   261,
     262,   315,   323,   327,   323,   115,   126,   321,     1,     1,
     120,     1,    51,   209,   344,   345,   120,     1,    51,   209,
     344,   345,   120,     1,    51,   209,   344,   345,   120,    51,
     209,   344,   345,     3,    28,    44,    74,    75,   116,   317,
     318,   319,   237,   139,   209,   121,   122,   118,   118,   124,
     261,   262,   124,   115,   115,     1,   115,    52,    53,    54,
      56,    57,    58,    59,    62,    86,   209,   259,   320,   350,
     373,   377,   115,   209,   118,   118,   118,   213,   214,   239,
     259,   115,   277,   115,   115,   182,   209,   118,   118,   118,
     124,   123,   238,     1,   123,   118,   120,   239,   259,   238,
     116,   120,   239,     1,   365,   366,   365,   366,   350,   351,
     359,   362,   350,   351,   359,   362,     1,     1,   381,   381,
     140,   209,   122,   122,   323,   312,   315,   363,   371,   363,
     371,   371,   236,   118,    65,   138,   209,   221,   244,   269,
     277,   279,   284,   293,   343,     1,     1,     7,     8,     9,
     115,   123,   126,     7,     8,     9,   115,   123,   126,   209,
     294,   113,   115,   126,   209,   263,   269,   277,   280,   284,
     315,   322,   323,   325,   209,   263,   269,   277,   280,   284,
     301,   239,   342,   370,   209,   126,   325,   301,   237,   381,
     381,   381,   237,   221,   244,   343,   116,   209,   269,   277,
     279,   284,   324,   116,   123,     1,   161,   162,     1,   121,
     120,   127,     1,   161,   162,   121,     1,   161,   162,     1,
     209,   116,   214,   218,   219,   258,     1,   209,   239,   259,
     213,   237,     1,   224,   246,   224,   246,   224,   246,   225,
     247,   225,   247,   226,   248,   226,   248,   227,   249,   227,
     249,   227,   249,   213,   214,   229,   250,   213,   214,   229,
     250,   213,   214,   230,   251,   213,   214,   231,   252,   213,
     214,   232,   253,   233,   254,   234,   255,   124,   213,   214,
     239,   240,   259,   260,   213,   237,     1,   209,   116,   218,
     219,     1,   209,   239,   259,   213,   237,   224,   246,   224,
     246,   224,   246,   225,   247,   225,   247,   226,   248,   226,
     248,   227,   249,   227,   249,   227,   249,   227,   249,   213,
     214,   229,   250,   213,   214,   229,   250,   213,   214,   230,
     251,   213,   214,   231,   252,   213,   214,   232,   253,   233,
     254,   234,   255,   124,   239,   240,   259,   260,   213,   237,
     113,   114,   209,   389,   390,   209,   121,   388,   391,   392,
     392,   127,   127,   127,   127,   127,   127,   193,   194,   196,
     198,   209,   202,   194,   196,   198,   239,   240,   259,   260,
     239,   240,   259,   260,   315,   323,   114,   119,   114,   122,
     113,   122,   209,   263,   277,   280,   324,   315,   323,   330,
     331,   182,   282,   305,   315,   323,   122,   209,   122,   209,
     324,   209,   315,   115,   121,   172,   173,   172,   173,   370,
     370,   370,   211,   370,   370,     1,   335,   336,   116,   261,
     262,   122,   120,     1,   295,   303,   346,   323,   305,   313,
     315,   124,   320,   209,   115,   309,   309,   209,     1,     1,
     282,   203,   113,   201,   201,   261,   262,   265,   191,   192,
       1,   121,   266,   119,   124,   119,   124,   119,   200,   196,
     209,   119,   370,   371,     1,   118,   120,   118,   120,   118,
     153,   154,   157,   158,   159,   121,   151,   154,   118,   121,
     153,   154,   157,   158,   159,   119,    37,   330,   331,   332,
     333,   334,   337,     1,   121,   266,     1,   121,   266,     1,
     121,   191,   192,   315,   323,   324,   116,   116,   116,   127,
     127,   127,   323,   321,   116,   348,   349,   127,   139,   261,
     262,   344,   345,   295,   344,   344,   344,   345,   116,   115,
     116,   120,   318,   116,   116,   116,     1,   161,   162,   350,
     351,   124,   124,   350,   351,   239,   259,   239,   259,   116,
     239,   259,   124,   261,   262,   124,   115,   115,   350,   115,
     214,   259,   115,   124,    56,     1,   116,   118,   209,   239,
     259,   372,   118,   118,   118,   118,   118,   381,   115,   237,
     237,   209,   350,   351,    90,   214,   258,    88,    89,    90,
     237,   258,   214,   258,   237,   258,   113,   312,   371,   371,
     118,   138,   139,   116,   138,   269,   277,   279,   284,   324,
     116,     1,   209,   116,   218,   219,     1,   209,   239,   259,
       1,   209,   116,   218,   219,     1,   209,   239,   259,   116,
     116,   324,   203,   116,   315,   325,   348,   349,   261,   262,
     113,   323,   115,   322,   126,   113,   126,   209,   263,   269,
     277,   280,   284,   325,   116,   116,   116,   116,   261,   262,
     126,   126,   325,   120,   116,   120,   120,   120,   116,   116,
     224,   246,   381,     1,   121,   213,   237,     1,     1,   116,
     120,   116,   127,   127,     1,   120,   124,   124,   120,   124,
     124,   116,   127,   127,   124,   124,   124,   124,   209,   209,
     118,   120,   209,   381,   121,   121,   124,   124,   124,   124,
     124,   124,   124,   124,   315,   323,   196,   203,   113,   122,
     122,   209,   323,   315,   116,   323,   305,   116,   122,   122,
     209,   116,     1,   161,   162,   281,   315,   209,   115,   305,
     313,   313,   261,   262,   115,   116,   114,   203,   114,   114,
     118,     1,   118,   194,   209,   193,   194,   193,   198,   122,
       1,   155,   156,     1,   155,   156,   371,     1,   335,   336,
     120,   121,   333,   334,     1,   118,     1,   118,   323,   321,
     116,   116,   116,   127,   127,   127,   324,   327,   239,   116,
     318,     1,   350,   351,   350,   351,   116,   116,   116,   116,
       1,   350,   116,   239,   350,   351,   124,   124,   259,   116,
     239,   259,    56,   259,   372,   381,   115,   350,   124,   118,
       1,   118,     1,   116,   259,   372,     3,   116,   124,   381,
     116,   116,   120,   115,   115,   182,   116,   116,     1,   116,
     116,   127,   127,   116,   127,   127,   116,   114,   315,   323,
     325,   116,   116,   116,   127,   127,   203,   322,   116,   348,
     349,   261,   262,   203,   261,   262,   113,   126,   115,   333,
     127,   127,   261,   262,   261,   262,   126,   342,   209,   209,
     237,     1,   214,   258,   213,   214,   213,   214,   236,   256,
     213,   214,   236,   256,   213,   214,   213,   214,   236,   256,
     213,   214,   236,   256,   213,   214,   236,   256,   213,   214,
     236,   256,   213,   214,   236,   256,   213,   214,   236,   256,
     389,   118,   118,   114,   203,   122,   370,   305,   119,   122,
       1,   115,   124,   124,   114,   191,   192,   118,   191,   192,
     119,   119,   337,   121,   333,   334,     1,   191,   192,   191,
     192,   116,   350,   350,   350,   350,   350,   351,   116,   115,
     372,   116,   239,   259,   239,   350,     1,   116,   239,   259,
     352,   353,   381,   118,   353,     3,   116,   124,   122,   182,
     237,   237,     1,     1,   322,   116,   114,   116,   116,   127,
     127,   114,   127,   127,   203,   261,   262,   342,   127,   127,
     127,   127,   261,   262,   116,   116,   116,   116,   114,   335,
     261,   262,   261,   262,   191,   192,   194,   194,   120,   121,
       1,    64,    64,   239,   259,   116,   239,   259,   116,   118,
     116,   118,   350,   351,   116,   350,   351,   116,   120,   124,
     115,     3,   116,   124,   353,   118,   353,    73,   182,   183,
     184,   116,   116,   116,   120,   114,   127,   127,   116,   127,
     127,   118,   121,   350,   350,   116,   116,   118,   350,   239,
     350,   351,   118,   352,   353,   237,   353,   118,   353,   116,
     124,     3,   116,   124,   370,   370,   121,   183,   122,   182,
     224,   246,   333,   116,   116,   116,   116,   116,   124,   118,
     353,   353,   118,   353,   184,   116,   350,   118,   118,   118,
     353,   116,   116,   116,   124,   121,   116,   118,   118,   118,
     353,   118,   116,   118
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 138: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10909 "grammar.ec"
	break;
      case 139: /* "type" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10918 "grammar.ec"
	break;
      case 140: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10927 "grammar.ec"
	break;
      case 141: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 10936 "grammar.ec"
	break;
      case 142: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10945 "grammar.ec"
	break;
      case 143: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10954 "grammar.ec"
	break;
      case 144: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10963 "grammar.ec"
	break;
      case 145: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10972 "grammar.ec"
	break;
      case 146: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10981 "grammar.ec"
	break;
      case 147: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10990 "grammar.ec"
	break;
      case 148: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10999 "grammar.ec"
	break;
      case 149: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11008 "grammar.ec"
	break;
      case 150: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11017 "grammar.ec"
	break;
      case 151: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11026 "grammar.ec"
	break;
      case 152: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11035 "grammar.ec"
	break;
      case 153: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11044 "grammar.ec"
	break;
      case 154: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 236 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 11053 "grammar.ec"
	break;
      case 155: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11062 "grammar.ec"
	break;
      case 156: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11071 "grammar.ec"
	break;
      case 157: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11080 "grammar.ec"
	break;
      case 158: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11089 "grammar.ec"
	break;
      case 159: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11098 "grammar.ec"
	break;
      case 160: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11107 "grammar.ec"
	break;
      case 161: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11116 "grammar.ec"
	break;
      case 162: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11125 "grammar.ec"
	break;
      case 163: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11134 "grammar.ec"
	break;
      case 164: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11143 "grammar.ec"
	break;
      case 168: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11152 "grammar.ec"
	break;
      case 169: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11161 "grammar.ec"
	break;
      case 172: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11170 "grammar.ec"
	break;
      case 173: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11179 "grammar.ec"
	break;
      case 174: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11188 "grammar.ec"
	break;
      case 175: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11197 "grammar.ec"
	break;
      case 178: /* "property" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 11206 "grammar.ec"
	break;
      case 189: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11215 "grammar.ec"
	break;
      case 190: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11224 "grammar.ec"
	break;
      case 191: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11233 "grammar.ec"
	break;
      case 192: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11242 "grammar.ec"
	break;
      case 193: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 11251 "grammar.ec"
	break;
      case 194: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11260 "grammar.ec"
	break;
      case 195: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11269 "grammar.ec"
	break;
      case 196: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11278 "grammar.ec"
	break;
      case 197: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11287 "grammar.ec"
	break;
      case 198: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11296 "grammar.ec"
	break;
      case 199: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11305 "grammar.ec"
	break;
      case 200: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11314 "grammar.ec"
	break;
      case 201: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 11323 "grammar.ec"
	break;
      case 202: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11332 "grammar.ec"
	break;
      case 203: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 11341 "grammar.ec"
	break;
      case 204: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11350 "grammar.ec"
	break;
      case 205: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 241 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11359 "grammar.ec"
	break;
      case 206: /* "class" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11368 "grammar.ec"
	break;
      case 207: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11377 "grammar.ec"
	break;
      case 208: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11386 "grammar.ec"
	break;
      case 209: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 196 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 11395 "grammar.ec"
	break;
      case 210: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11404 "grammar.ec"
	break;
      case 211: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11413 "grammar.ec"
	break;
      case 215: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11422 "grammar.ec"
	break;
      case 216: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11431 "grammar.ec"
	break;
      case 218: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11440 "grammar.ec"
	break;
      case 219: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11449 "grammar.ec"
	break;
      case 221: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11458 "grammar.ec"
	break;
      case 224: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11467 "grammar.ec"
	break;
      case 225: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11476 "grammar.ec"
	break;
      case 226: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11485 "grammar.ec"
	break;
      case 227: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11494 "grammar.ec"
	break;
      case 229: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11503 "grammar.ec"
	break;
      case 230: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11512 "grammar.ec"
	break;
      case 231: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11521 "grammar.ec"
	break;
      case 232: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11530 "grammar.ec"
	break;
      case 233: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11539 "grammar.ec"
	break;
      case 234: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11548 "grammar.ec"
	break;
      case 235: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11557 "grammar.ec"
	break;
      case 236: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11566 "grammar.ec"
	break;
      case 237: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11575 "grammar.ec"
	break;
      case 239: /* "expression" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11584 "grammar.ec"
	break;
      case 241: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11593 "grammar.ec"
	break;
      case 244: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11602 "grammar.ec"
	break;
      case 246: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11611 "grammar.ec"
	break;
      case 247: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11620 "grammar.ec"
	break;
      case 248: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11629 "grammar.ec"
	break;
      case 249: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11638 "grammar.ec"
	break;
      case 250: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11647 "grammar.ec"
	break;
      case 251: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11656 "grammar.ec"
	break;
      case 252: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11665 "grammar.ec"
	break;
      case 253: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11674 "grammar.ec"
	break;
      case 254: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11683 "grammar.ec"
	break;
      case 255: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11692 "grammar.ec"
	break;
      case 256: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11701 "grammar.ec"
	break;
      case 257: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11710 "grammar.ec"
	break;
      case 258: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11719 "grammar.ec"
	break;
      case 259: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11728 "grammar.ec"
	break;
      case 261: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11737 "grammar.ec"
	break;
      case 262: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 198 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11746 "grammar.ec"
	break;
      case 263: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11755 "grammar.ec"
	break;
      case 264: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11764 "grammar.ec"
	break;
      case 265: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 11773 "grammar.ec"
	break;
      case 266: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 248 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 11782 "grammar.ec"
	break;
      case 268: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11791 "grammar.ec"
	break;
      case 269: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11800 "grammar.ec"
	break;
      case 270: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11809 "grammar.ec"
	break;
      case 272: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11818 "grammar.ec"
	break;
      case 273: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11827 "grammar.ec"
	break;
      case 274: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11836 "grammar.ec"
	break;
      case 275: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11845 "grammar.ec"
	break;
      case 276: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11854 "grammar.ec"
	break;
      case 277: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11863 "grammar.ec"
	break;
      case 278: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11872 "grammar.ec"
	break;
      case 279: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11881 "grammar.ec"
	break;
      case 280: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11890 "grammar.ec"
	break;
      case 281: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11899 "grammar.ec"
	break;
      case 282: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 11908 "grammar.ec"
	break;
      case 283: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11917 "grammar.ec"
	break;
      case 284: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11926 "grammar.ec"
	break;
      case 285: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11935 "grammar.ec"
	break;
      case 286: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11944 "grammar.ec"
	break;
      case 287: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11953 "grammar.ec"
	break;
      case 288: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11962 "grammar.ec"
	break;
      case 289: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11971 "grammar.ec"
	break;
      case 290: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 209 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11980 "grammar.ec"
	break;
      case 292: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11989 "grammar.ec"
	break;
      case 293: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11998 "grammar.ec"
	break;
      case 294: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12007 "grammar.ec"
	break;
      case 295: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12016 "grammar.ec"
	break;
      case 296: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12025 "grammar.ec"
	break;
      case 297: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12034 "grammar.ec"
	break;
      case 298: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12043 "grammar.ec"
	break;
      case 299: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 12052 "grammar.ec"
	break;
      case 303: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12061 "grammar.ec"
	break;
      case 304: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12070 "grammar.ec"
	break;
      case 305: /* "direct_declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12079 "grammar.ec"
	break;
      case 306: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12088 "grammar.ec"
	break;
      case 307: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12097 "grammar.ec"
	break;
      case 308: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12106 "grammar.ec"
	break;
      case 309: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12115 "grammar.ec"
	break;
      case 310: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12124 "grammar.ec"
	break;
      case 311: /* "direct_declarator_function_start_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12133 "grammar.ec"
	break;
      case 312: /* "direct_declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12142 "grammar.ec"
	break;
      case 313: /* "direct_declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12151 "grammar.ec"
	break;
      case 314: /* "direct_declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12160 "grammar.ec"
	break;
      case 315: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 12169 "grammar.ec"
	break;
      case 317: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12178 "grammar.ec"
	break;
      case 318: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 270 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 12187 "grammar.ec"
	break;
      case 319: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 271 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 12196 "grammar.ec"
	break;
      case 320: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 12205 "grammar.ec"
	break;
      case 321: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12214 "grammar.ec"
	break;
      case 322: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12223 "grammar.ec"
	break;
      case 323: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 12232 "grammar.ec"
	break;
      case 324: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12241 "grammar.ec"
	break;
      case 325: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12250 "grammar.ec"
	break;
      case 326: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12259 "grammar.ec"
	break;
      case 327: /* "declarator_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12268 "grammar.ec"
	break;
      case 328: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12277 "grammar.ec"
	break;
      case 329: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12286 "grammar.ec"
	break;
      case 330: /* "declarator_function_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12295 "grammar.ec"
	break;
      case 331: /* "declarator_function_error_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12304 "grammar.ec"
	break;
      case 332: /* "declarator_nofunction_type_ok" */

/* Line 1009 of yacc.c  */
#line 215 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12313 "grammar.ec"
	break;
      case 333: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12322 "grammar.ec"
	break;
      case 334: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12331 "grammar.ec"
	break;
      case 335: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12340 "grammar.ec"
	break;
      case 336: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12349 "grammar.ec"
	break;
      case 337: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 12358 "grammar.ec"
	break;
      case 338: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12367 "grammar.ec"
	break;
      case 339: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12376 "grammar.ec"
	break;
      case 340: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12385 "grammar.ec"
	break;
      case 341: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12394 "grammar.ec"
	break;
      case 342: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12403 "grammar.ec"
	break;
      case 343: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12412 "grammar.ec"
	break;
      case 344: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12421 "grammar.ec"
	break;
      case 345: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 223 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12430 "grammar.ec"
	break;
      case 346: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12439 "grammar.ec"
	break;
      case 347: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12448 "grammar.ec"
	break;
      case 348: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12457 "grammar.ec"
	break;
      case 349: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12466 "grammar.ec"
	break;
      case 350: /* "statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12475 "grammar.ec"
	break;
      case 351: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12484 "grammar.ec"
	break;
      case 355: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12493 "grammar.ec"
	break;
      case 356: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12502 "grammar.ec"
	break;
      case 357: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 12511 "grammar.ec"
	break;
      case 359: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 12520 "grammar.ec"
	break;
      case 363: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12529 "grammar.ec"
	break;
      case 364: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12538 "grammar.ec"
	break;
      case 365: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12547 "grammar.ec"
	break;
      case 366: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12556 "grammar.ec"
	break;
      case 367: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12565 "grammar.ec"
	break;
      case 368: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12574 "grammar.ec"
	break;
      case 369: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 12583 "grammar.ec"
	break;
      case 370: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12592 "grammar.ec"
	break;
      case 371: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12601 "grammar.ec"
	break;
      case 372: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12610 "grammar.ec"
	break;
      case 373: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12619 "grammar.ec"
	break;
      case 374: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12628 "grammar.ec"
	break;
      case 375: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12637 "grammar.ec"
	break;
      case 376: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12646 "grammar.ec"
	break;
      case 377: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12655 "grammar.ec"
	break;
      case 378: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 224 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12664 "grammar.ec"
	break;
      case 379: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 12673 "grammar.ec"
	break;
      case 380: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 229 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 12682 "grammar.ec"
	break;
      case 381: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 244 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12691 "grammar.ec"
	break;
      case 382: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 12700 "grammar.ec"
	break;
      case 383: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 12709 "grammar.ec"
	break;
      case 384: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 12718 "grammar.ec"
	break;
      case 385: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 12727 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 279 "grammar.y"
    {
      (yyval.specifier) = null;
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 308 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 366 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 368 "grammar.y"
    {
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);
      FreeIdentifier((yyvsp[(1) - (2)].id));
      FreeIdentifier((yyvsp[(2) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #else
      Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]); 
      Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);      
      yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 467 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 471 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 475 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 477 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start); 
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 526 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 528 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 533 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(1) - (3)].list), FreeSpecifier); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 538 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(2) - (4)].list), FreeSpecifier) ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 543 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 545 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 550 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 552 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 557 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 559 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 564 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 566 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 568 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 570 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 572 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 576 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 581 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 583 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 585 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 587 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 589 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 595 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 597 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 602 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 607 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 612 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 614 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 616 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 620 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 621 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 625 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 627 "grammar.y"
    { 
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; 

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 637 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 641 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 643 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 645 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 649 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 651 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 653 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 656 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end; 
         { 
            Initializer dummy = MkInitializerAssignment(MkExpDummy()); 
            MemberInit memberInit = MkMemberInit(null, dummy); 
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end; 
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end; 
            ListAdd((yyvsp[(1) - (3)].list), memberInit); 
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 668 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end; 
         { 
            Initializer dummy = MkInitializerAssignment(MkExpDummy()); 
            MemberInit memberInit = MkMemberInit(null, dummy); 
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end; 
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end; 
            ListAdd((yyvsp[(1) - (3)].list), memberInit); 
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 679 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy); 
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start; 
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start; 

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit); 

         dummy = MkInitializerAssignment(MkExpDummy()); 
         memberInit = MkMemberInit(null, dummy); 
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end; 
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end; 
         ListAdd((yyval.list), memberInit); 
      ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 698 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 700 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 704 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 705 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 706 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 707 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 708 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 709 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 710 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 63:

/* Line 1464 of yacc.c  */
#line 712 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 65:

/* Line 1464 of yacc.c  */
#line 717 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 718 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 719 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 723 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 724 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 725 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 726 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 727 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 728 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 729 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 734 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 736 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 741 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 743 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 745 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 747 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 749 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 779 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 781 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 786 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 788 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 790 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 792 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 794 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 823 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 825 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 827 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 832 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 834 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 839 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 841 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 845 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 847 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 849 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 851 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 856 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 859 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 862 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 865 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 930 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 932 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 937 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 939 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 941 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 943 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 945 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 975 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 979 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 980 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 981 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 985 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 986 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 987 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 991 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 992 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 993 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 122:

/* Line 1464 of yacc.c  */
#line 999 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 1002 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 1005 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 1008 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 1011 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 128:

/* Line 1464 of yacc.c  */
#line 1017 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 1019 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 1021 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 1023 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 1025 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 1029 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 1034 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1037 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1040 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1043 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1046 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 140:

/* Line 1464 of yacc.c  */
#line 1052 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1054 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1058 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1063 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1065 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1070 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1072 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1077 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1079 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1084 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1089 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1091 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1098 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1100 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1102 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1107 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1109 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1111 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1113 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = (yyvsp[(1) - (2)].classDef); (yyval.classDef).loc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1121 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1123 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1126 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1127 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1129 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1130 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1136 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1139 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (1)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1140 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1141 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1142 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1143 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1144 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1145 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1146 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (1)].propertyWatch)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1147 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1148 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1149 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (2)].id)); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1150 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1151 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1152 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); if((yyvsp[(1) - (1)].list)->last) ((MemberInit)(yyvsp[(1) - (1)].list)->last).loc.end = (yylsp[(1) - (1)]).end; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1155 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1159 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1160 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1161 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1165 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1169 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1170 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1171 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1175 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 201:

/* Line 1464 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 202:

/* Line 1464 of yacc.c  */
#line 1179 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1183 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1184 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1185 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype(MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)), null); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1189 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument((yyvsp[(1) - (1)].templateDatatype)); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1193 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1194 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1195 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1196 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1197 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1198 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1199 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1200 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1204 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1208 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1209 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1213 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1217 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (2)].id), (yyvsp[(1) - (2)].templateDatatype), null); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1218 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(1) - (4)].templateDatatype), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 224:

/* Line 1464 of yacc.c  */
#line 1228 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 225:

/* Line 1464 of yacc.c  */
#line 1229 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 229:

/* Line 1464 of yacc.c  */
#line 1236 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 230:

/* Line 1464 of yacc.c  */
#line 1237 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1238 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1240 "grammar.y"
    {
      (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); 
      if((yyvsp[(1) - (3)].templateDatatype).specifiers && (yyvsp[(1) - (3)].templateDatatype).specifiers->first)
      {
         Specifier spec = (yyvsp[(1) - (3)].templateDatatype).specifiers->first;
         if(spec.type == nameSpecifier)
            (yyval.templateArgument).name = MkIdentifier(spec.name);
      }
      FreeTemplateDataType((yyvsp[(1) - (3)].templateDatatype));
      (yyval.templateArgument).loc = (yyloc);
   ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1252 "grammar.y"
    {
      (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); 
      if((yyvsp[(1) - (3)].templateDatatype).specifiers && (yyvsp[(1) - (3)].templateDatatype).specifiers->first)
      {
         Specifier spec = (yyvsp[(1) - (3)].templateDatatype).specifiers->first;
         if(spec.type == nameSpecifier)
            (yyval.templateArgument).name = MkIdentifier(spec.name);
      }
      FreeTemplateDataType((yyvsp[(1) - (3)].templateDatatype));
      (yyval.templateArgument).loc = (yyloc);
   ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1264 "grammar.y"
    {
      (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); 
      if((yyvsp[(1) - (3)].templateDatatype).specifiers && (yyvsp[(1) - (3)].templateDatatype).specifiers->first)
      {
         Specifier spec = (yyvsp[(1) - (3)].templateDatatype).specifiers->first;
         if(spec.type == nameSpecifier)
            (yyval.templateArgument).name = MkIdentifier(spec.name);
      }
      FreeTemplateDataType((yyvsp[(1) - (3)].templateDatatype));
      (yyval.templateArgument).loc = (yyloc);
   ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1278 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1279 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1284 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1291 "grammar.y"
    { (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1293 "grammar.y"
    { 
      (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); 
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); 
      FreeSpecifier((yyvsp[(2) - (2)].specifier)); 
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1300 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1301 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1303 "grammar.y"
    { (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1305 "grammar.y"
    { 
      (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); 
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); 
      FreeSpecifier((yyvsp[(2) - (5)].specifier)); 
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1313 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1314 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1319 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class); 
      ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1326 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1333 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1339 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1346 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace(0, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1352 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass(0, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1361 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1368 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1374 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1380 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1386 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1392 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 258:

/* Line 1464 of yacc.c  */
#line 1398 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1409 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1415 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 262:

/* Line 1464 of yacc.c  */
#line 1419 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1420 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1421 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1425 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1426 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1427 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1428 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1429 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 1430 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1431 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1433 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 274:

/* Line 1464 of yacc.c  */
#line 1434 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1435 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1436 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1437 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1438 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1447 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1448 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1449 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1451 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1452 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 293:

/* Line 1464 of yacc.c  */
#line 1453 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 294:

/* Line 1464 of yacc.c  */
#line 1455 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 299:

/* Line 1464 of yacc.c  */
#line 1461 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 300:

/* Line 1464 of yacc.c  */
#line 1465 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1469 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1473 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 1474 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 305:

/* Line 1464 of yacc.c  */
#line 1480 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 306:

/* Line 1464 of yacc.c  */
#line 1481 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1482 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1483 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1484 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1491 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1492 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1493 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1494 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1495 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1496 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 1497 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 1503 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 324:

/* Line 1464 of yacc.c  */
#line 1504 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1505 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1506 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1507 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1508 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1509 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1510 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1511 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1513 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1514 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1515 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1516 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1517 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1518 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1519 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1520 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1524 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1525 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1526 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 344:

/* Line 1464 of yacc.c  */
#line 1531 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 345:

/* Line 1464 of yacc.c  */
#line 1532 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1533 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1535 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1539 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1540 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1541 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1543 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 354:

/* Line 1464 of yacc.c  */
#line 1544 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1545 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 356:

/* Line 1464 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1547 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1549 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1550 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 360:

/* Line 1464 of yacc.c  */
#line 1551 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 365:

/* Line 1464 of yacc.c  */
#line 1565 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 366:

/* Line 1464 of yacc.c  */
#line 1566 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1567 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 368:

/* Line 1464 of yacc.c  */
#line 1568 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1569 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1570 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1571 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 372:

/* Line 1464 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 374:

/* Line 1464 of yacc.c  */
#line 1577 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 376:

/* Line 1464 of yacc.c  */
#line 1582 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 377:

/* Line 1464 of yacc.c  */
#line 1583 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1584 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1585 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1586 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 381:

/* Line 1464 of yacc.c  */
#line 1587 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 383:

/* Line 1464 of yacc.c  */
#line 1592 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 384:

/* Line 1464 of yacc.c  */
#line 1593 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1594 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 386:

/* Line 1464 of yacc.c  */
#line 1595 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 388:

/* Line 1464 of yacc.c  */
#line 1600 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 389:

/* Line 1464 of yacc.c  */
#line 1601 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 390:

/* Line 1464 of yacc.c  */
#line 1602 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1603 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 392:

/* Line 1464 of yacc.c  */
#line 1608 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 394:

/* Line 1464 of yacc.c  */
#line 1616 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 395:

/* Line 1464 of yacc.c  */
#line 1617 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1618 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 397:

/* Line 1464 of yacc.c  */
#line 1619 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1620 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1621 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1622 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 401:

/* Line 1464 of yacc.c  */
#line 1623 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 403:

/* Line 1464 of yacc.c  */
#line 1628 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 404:

/* Line 1464 of yacc.c  */
#line 1629 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1630 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1631 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 407:

/* Line 1464 of yacc.c  */
#line 1633 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 408:

/* Line 1464 of yacc.c  */
#line 1634 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1635 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 410:

/* Line 1464 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 412:

/* Line 1464 of yacc.c  */
#line 1641 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 413:

/* Line 1464 of yacc.c  */
#line 1642 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1644 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 415:

/* Line 1464 of yacc.c  */
#line 1645 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 417:

/* Line 1464 of yacc.c  */
#line 1650 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 418:

/* Line 1464 of yacc.c  */
#line 1651 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1653 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 420:

/* Line 1464 of yacc.c  */
#line 1654 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 422:

/* Line 1464 of yacc.c  */
#line 1659 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 423:

/* Line 1464 of yacc.c  */
#line 1660 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1662 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 425:

/* Line 1464 of yacc.c  */
#line 1663 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 427:

/* Line 1464 of yacc.c  */
#line 1668 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 428:

/* Line 1464 of yacc.c  */
#line 1669 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 430:

/* Line 1464 of yacc.c  */
#line 1674 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 431:

/* Line 1464 of yacc.c  */
#line 1675 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 433:

/* Line 1464 of yacc.c  */
#line 1680 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 434:

/* Line 1464 of yacc.c  */
#line 1681 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1682 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1683 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1687 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1692 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1693 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1695 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1696 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1697 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 448:

/* Line 1464 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 450:

/* Line 1464 of yacc.c  */
#line 1703 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 451:

/* Line 1464 of yacc.c  */
#line 1704 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1705 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 453:

/* Line 1464 of yacc.c  */
#line 1706 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1708 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1709 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1710 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 457:

/* Line 1464 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1715 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 459:

/* Line 1464 of yacc.c  */
#line 1716 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1717 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1718 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1719 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1720 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1721 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1722 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1723 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1729 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1730 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 471:

/* Line 1464 of yacc.c  */
#line 1731 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 473:

/* Line 1464 of yacc.c  */
#line 1736 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 474:

/* Line 1464 of yacc.c  */
#line 1737 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 475:

/* Line 1464 of yacc.c  */
#line 1738 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 477:

/* Line 1464 of yacc.c  */
#line 1743 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 479:

/* Line 1464 of yacc.c  */
#line 1745 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 480:

/* Line 1464 of yacc.c  */
#line 1747 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1748 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 482:

/* Line 1464 of yacc.c  */
#line 1750 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1756 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1758 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1763 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 487:

/* Line 1464 of yacc.c  */
#line 1767 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); ;}
    break;

  case 489:

/* Line 1464 of yacc.c  */
#line 1769 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 490:

/* Line 1464 of yacc.c  */
#line 1771 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1772 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1774 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1775 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 494:

/* Line 1464 of yacc.c  */
#line 1780 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1782 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1787 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1791 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1792 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 499:

/* Line 1464 of yacc.c  */
#line 1793 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1794 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1795 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1796 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1797 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1798 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1799 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 506:

/* Line 1464 of yacc.c  */
#line 1800 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 507:

/* Line 1464 of yacc.c  */
#line 1801 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 508:

/* Line 1464 of yacc.c  */
#line 1802 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 514:

/* Line 1464 of yacc.c  */
#line 1818 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 516:

/* Line 1464 of yacc.c  */
#line 1823 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 517:

/* Line 1464 of yacc.c  */
#line 1824 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 1825 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 1826 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 1827 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 521:

/* Line 1464 of yacc.c  */
#line 1828 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 523:

/* Line 1464 of yacc.c  */
#line 1833 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 524:

/* Line 1464 of yacc.c  */
#line 1837 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 1841 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 526:

/* Line 1464 of yacc.c  */
#line 1845 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 528:

/* Line 1464 of yacc.c  */
#line 1853 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 529:

/* Line 1464 of yacc.c  */
#line 1854 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 1855 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 531:

/* Line 1464 of yacc.c  */
#line 1856 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 533:

/* Line 1464 of yacc.c  */
#line 1862 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         if((yyvsp[(1) - (2)].exp).identifier._class && !(yyvsp[(1) - (2)].exp).identifier._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(1) - (2)].exp).identifier.string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));
         
         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*         
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      } 
      skipErrors = false;
   ;}
    break;

  case 534:

/* Line 1464 of yacc.c  */
#line 1912 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 535:

/* Line 1464 of yacc.c  */
#line 1913 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 1914 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 1915 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 538:

/* Line 1464 of yacc.c  */
#line 1916 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 1917 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 540:

/* Line 1464 of yacc.c  */
#line 1918 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 542:

/* Line 1464 of yacc.c  */
#line 1923 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 543:

/* Line 1464 of yacc.c  */
#line 1924 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 1925 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 1926 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 1933 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 1934 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 1935 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 549:

/* Line 1464 of yacc.c  */
#line 1936 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 551:

/* Line 1464 of yacc.c  */
#line 1941 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 552:

/* Line 1464 of yacc.c  */
#line 1942 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 1944 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 554:

/* Line 1464 of yacc.c  */
#line 1945 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 556:

/* Line 1464 of yacc.c  */
#line 1950 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 557:

/* Line 1464 of yacc.c  */
#line 1951 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 1953 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 559:

/* Line 1464 of yacc.c  */
#line 1954 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 561:

/* Line 1464 of yacc.c  */
#line 1959 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 562:

/* Line 1464 of yacc.c  */
#line 1960 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 1962 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 564:

/* Line 1464 of yacc.c  */
#line 1963 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 566:

/* Line 1464 of yacc.c  */
#line 1968 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 567:

/* Line 1464 of yacc.c  */
#line 1969 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 569:

/* Line 1464 of yacc.c  */
#line 1974 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 570:

/* Line 1464 of yacc.c  */
#line 1975 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 572:

/* Line 1464 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 573:

/* Line 1464 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 1982 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 1983 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 1986 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 581:

/* Line 1464 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 582:

/* Line 1464 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 583:

/* Line 1464 of yacc.c  */
#line 1992 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 584:

/* Line 1464 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 1995 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 1996 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 2001 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 2003 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 2004 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 2005 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 2006 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 2009 "grammar.y"
    { 
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); 
         (yyval.exp).loc = (yyloc); 
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); 
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]); 
      ;}
    break;

  case 597:

/* Line 1464 of yacc.c  */
#line 2016 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2020 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 599:

/* Line 1464 of yacc.c  */
#line 2024 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 601:

/* Line 1464 of yacc.c  */
#line 2031 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 602:

/* Line 1464 of yacc.c  */
#line 2035 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 603:

/* Line 1464 of yacc.c  */
#line 2040 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 604:

/* Line 1464 of yacc.c  */
#line 2041 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2045 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2046 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2047 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2048 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2054 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2055 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2056 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2060 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 613:

/* Line 1464 of yacc.c  */
#line 2061 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 614:

/* Line 1464 of yacc.c  */
#line 2062 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 615:

/* Line 1464 of yacc.c  */
#line 2063 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 618:

/* Line 1464 of yacc.c  */
#line 2073 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 619:

/* Line 1464 of yacc.c  */
#line 2074 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2075 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2076 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2077 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2081 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); declMode = defaultAccess; ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2082 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2083 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); declMode = staticAccess; ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2085 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2089 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2090 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 630:

/* Line 1464 of yacc.c  */
#line 2091 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2095 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 632:

/* Line 1464 of yacc.c  */
#line 2096 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 634:

/* Line 1464 of yacc.c  */
#line 2101 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 635:

/* Line 1464 of yacc.c  */
#line 2105 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 636:

/* Line 1464 of yacc.c  */
#line 2106 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2110 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 638:

/* Line 1464 of yacc.c  */
#line 2111 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 642:

/* Line 1464 of yacc.c  */
#line 2119 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 643:

/* Line 1464 of yacc.c  */
#line 2120 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 644:

/* Line 1464 of yacc.c  */
#line 2121 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 645:

/* Line 1464 of yacc.c  */
#line 2122 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2123 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2125 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2126 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 649:

/* Line 1464 of yacc.c  */
#line 2127 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 650:

/* Line 1464 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 651:

/* Line 1464 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 652:

/* Line 1464 of yacc.c  */
#line 2133 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); ;}
    break;

  case 653:

/* Line 1464 of yacc.c  */
#line 2134 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2138 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2139 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2140 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2144 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2145 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2146 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2148 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2149 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2151 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 665:

/* Line 1464 of yacc.c  */
#line 2152 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 666:

/* Line 1464 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 667:

/* Line 1464 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2157 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2158 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 670:

/* Line 1464 of yacc.c  */
#line 2159 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 671:

/* Line 1464 of yacc.c  */
#line 2160 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 672:

/* Line 1464 of yacc.c  */
#line 2161 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 677:

/* Line 1464 of yacc.c  */
#line 2175 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 678:

/* Line 1464 of yacc.c  */
#line 2179 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 679:

/* Line 1464 of yacc.c  */
#line 2180 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 680:

/* Line 1464 of yacc.c  */
#line 2181 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 681:

/* Line 1464 of yacc.c  */
#line 2186 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2187 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2191 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2192 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2193 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2196 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2197 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2198 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 691:

/* Line 1464 of yacc.c  */
#line 2199 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 692:

/* Line 1464 of yacc.c  */
#line 2200 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 693:

/* Line 1464 of yacc.c  */
#line 2201 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 694:

/* Line 1464 of yacc.c  */
#line 2202 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 695:

/* Line 1464 of yacc.c  */
#line 2203 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 699:

/* Line 1464 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 700:

/* Line 1464 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 701:

/* Line 1464 of yacc.c  */
#line 2209 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 702:

/* Line 1464 of yacc.c  */
#line 2210 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 703:

/* Line 1464 of yacc.c  */
#line 2211 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 704:

/* Line 1464 of yacc.c  */
#line 2212 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 705:

/* Line 1464 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2221 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2222 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2223 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2225 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 715:

/* Line 1464 of yacc.c  */
#line 2226 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 716:

/* Line 1464 of yacc.c  */
#line 2227 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 717:

/* Line 1464 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 721:

/* Line 1464 of yacc.c  */
#line 2232 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 722:

/* Line 1464 of yacc.c  */
#line 2233 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 723:

/* Line 1464 of yacc.c  */
#line 2234 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 724:

/* Line 1464 of yacc.c  */
#line 2235 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 725:

/* Line 1464 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 726:

/* Line 1464 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 727:

/* Line 1464 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 728:

/* Line 1464 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 729:

/* Line 1464 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2254 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2256 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2258 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2260 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2264 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2265 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2270 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2276 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2282 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2289 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2298 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2299 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2300 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2301 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2305 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2306 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2307 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2309 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2310 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2311 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2313 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2314 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2315 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2319 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2324 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2332 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2341 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2349 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2351 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2352 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2353 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2358 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2365 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2372 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2375 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2388 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2402 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2405 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2407 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2409 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2413 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2414 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2418 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2419 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2420 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2421 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2422 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2423 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2424 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2425 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2429 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2430 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2431 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2432 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2433 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2434 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2435 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2436 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2437 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2442 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2443 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2444 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2445 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2446 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2447 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2448 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2449 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2450 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2451 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2455 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2456 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2457 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2459 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2460 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2463 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2464 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2465 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2470 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 814:

/* Line 1464 of yacc.c  */
#line 2471 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2472 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2476 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2477 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 821:

/* Line 1464 of yacc.c  */
#line 2478 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 822:

/* Line 1464 of yacc.c  */
#line 2479 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2483 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 824:

/* Line 1464 of yacc.c  */
#line 2484 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 826:

/* Line 1464 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2492 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2493 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2494 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2495 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2497 "grammar.y"
    { _DeclClass(0, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 834:

/* Line 1464 of yacc.c  */
#line 2498 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass(0, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2501 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 836:

/* Line 1464 of yacc.c  */
#line 2519 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2537 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2541 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 840:

/* Line 1464 of yacc.c  */
#line 2542 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2543 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2544 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2545 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2546 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2547 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 846:

/* Line 1464 of yacc.c  */
#line 2548 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2550 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 848:

/* Line 1464 of yacc.c  */
#line 2568 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2584 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 850:

/* Line 1464 of yacc.c  */
#line 2585 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2586 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2587 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2588 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2589 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2590 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2591 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2592 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2593 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2594 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2595 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 861:

/* Line 1464 of yacc.c  */
#line 2597 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2615 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2631 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2632 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2633 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2634 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2635 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 868:

/* Line 1464 of yacc.c  */
#line 2636 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 869:

/* Line 1464 of yacc.c  */
#line 2637 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2638 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 871:

/* Line 1464 of yacc.c  */
#line 2639 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2640 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 873:

/* Line 1464 of yacc.c  */
#line 2641 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2642 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2644 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2662 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2678 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2679 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2683 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2684 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 881:

/* Line 1464 of yacc.c  */
#line 2685 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2686 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 883:

/* Line 1464 of yacc.c  */
#line 2687 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2693 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
   ;}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2699 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); ;}
    break;

  case 887:

/* Line 1464 of yacc.c  */
#line 2702 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 888:

/* Line 1464 of yacc.c  */
#line 2711 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 889:

/* Line 1464 of yacc.c  */
#line 2720 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, (yyvsp[(3) - (4)].specifier));
      ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2729 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (3)].specifier));
         (yyval.declarator) = MkDeclaratorEnumArray(decl, null);
      ;}
    break;

  case 891:

/* Line 1464 of yacc.c  */
#line 2737 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 892:

/* Line 1464 of yacc.c  */
#line 2738 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 893:

/* Line 1464 of yacc.c  */
#line 2739 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2740 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 895:

/* Line 1464 of yacc.c  */
#line 2744 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2745 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 897:

/* Line 1464 of yacc.c  */
#line 2746 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 898:

/* Line 1464 of yacc.c  */
#line 2747 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 899:

/* Line 1464 of yacc.c  */
#line 2748 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 900:

/* Line 1464 of yacc.c  */
#line 2749 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 901:

/* Line 1464 of yacc.c  */
#line 2750 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 902:

/* Line 1464 of yacc.c  */
#line 2751 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 903:

/* Line 1464 of yacc.c  */
#line 2752 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 905:

/* Line 1464 of yacc.c  */
#line 2760 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 2761 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 907:

/* Line 1464 of yacc.c  */
#line 2762 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 2763 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 2764 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 910:

/* Line 1464 of yacc.c  */
#line 2770 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list)); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 911:

/* Line 1464 of yacc.c  */
#line 2779 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 912:

/* Line 1464 of yacc.c  */
#line 2788 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); 
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 913:

/* Line 1464 of yacc.c  */
#line 2797 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 917:

/* Line 1464 of yacc.c  */
#line 2820 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 918:

/* Line 1464 of yacc.c  */
#line 2821 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 919:

/* Line 1464 of yacc.c  */
#line 2822 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 2823 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 2824 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 2830 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list)); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 923:

/* Line 1464 of yacc.c  */
#line 2839 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 924:

/* Line 1464 of yacc.c  */
#line 2848 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); 
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 925:

/* Line 1464 of yacc.c  */
#line 2857 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 928:

/* Line 1464 of yacc.c  */
#line 2920 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 929:

/* Line 1464 of yacc.c  */
#line 2921 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 930:

/* Line 1464 of yacc.c  */
#line 2922 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 2924 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 2935 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 2936 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 2937 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 935:

/* Line 1464 of yacc.c  */
#line 2942 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 936:

/* Line 1464 of yacc.c  */
#line 2943 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 937:

/* Line 1464 of yacc.c  */
#line 2944 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 938:

/* Line 1464 of yacc.c  */
#line 2945 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 939:

/* Line 1464 of yacc.c  */
#line 2946 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 940:

/* Line 1464 of yacc.c  */
#line 2950 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 2951 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 2955 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 2956 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 2957 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 945:

/* Line 1464 of yacc.c  */
#line 2961 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 2962 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 2966 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 2967 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 2968 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 2969 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 951:

/* Line 1464 of yacc.c  */
#line 2970 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 2971 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 953:

/* Line 1464 of yacc.c  */
#line 2972 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 2973 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 2974 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 956:

/* Line 1464 of yacc.c  */
#line 2975 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 2976 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 958:

/* Line 1464 of yacc.c  */
#line 2977 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 2978 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 960:

/* Line 1464 of yacc.c  */
#line 2979 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 961:

/* Line 1464 of yacc.c  */
#line 2980 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 962:

/* Line 1464 of yacc.c  */
#line 2981 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 963:

/* Line 1464 of yacc.c  */
#line 2985 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 2986 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 965:

/* Line 1464 of yacc.c  */
#line 2987 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 966:

/* Line 1464 of yacc.c  */
#line 2988 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 967:

/* Line 1464 of yacc.c  */
#line 2989 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 968:

/* Line 1464 of yacc.c  */
#line 2990 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 969:

/* Line 1464 of yacc.c  */
#line 2991 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 970:

/* Line 1464 of yacc.c  */
#line 2992 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 971:

/* Line 1464 of yacc.c  */
#line 2996 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 972:

/* Line 1464 of yacc.c  */
#line 2997 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 973:

/* Line 1464 of yacc.c  */
#line 2998 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 974:

/* Line 1464 of yacc.c  */
#line 2999 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 975:

/* Line 1464 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 977:

/* Line 1464 of yacc.c  */
#line 3005 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 978:

/* Line 1464 of yacc.c  */
#line 3006 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 979:

/* Line 1464 of yacc.c  */
#line 3007 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 980:

/* Line 1464 of yacc.c  */
#line 3011 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 982:

/* Line 1464 of yacc.c  */
#line 3013 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 983:

/* Line 1464 of yacc.c  */
#line 3014 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 984:

/* Line 1464 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 986:

/* Line 1464 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 987:

/* Line 1464 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 3025 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 989:

/* Line 1464 of yacc.c  */
#line 3027 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 991:

/* Line 1464 of yacc.c  */
#line 3033 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 992:

/* Line 1464 of yacc.c  */
#line 3035 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 993:

/* Line 1464 of yacc.c  */
#line 3037 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 995:

/* Line 1464 of yacc.c  */
#line 3042 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 996:

/* Line 1464 of yacc.c  */
#line 3043 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 997:

/* Line 1464 of yacc.c  */
#line 3044 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 999:

/* Line 1464 of yacc.c  */
#line 3049 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1000:

/* Line 1464 of yacc.c  */
#line 3050 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1001:

/* Line 1464 of yacc.c  */
#line 3051 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1003:

/* Line 1464 of yacc.c  */
#line 3056 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1004:

/* Line 1464 of yacc.c  */
#line 3057 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1005:

/* Line 1464 of yacc.c  */
#line 3058 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1007:

/* Line 1464 of yacc.c  */
#line 3063 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1008:

/* Line 1464 of yacc.c  */
#line 3064 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1009:

/* Line 1464 of yacc.c  */
#line 3065 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1011:

/* Line 1464 of yacc.c  */
#line 3070 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1012:

/* Line 1464 of yacc.c  */
#line 3071 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1013:

/* Line 1464 of yacc.c  */
#line 3072 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3076 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1015:

/* Line 1464 of yacc.c  */
#line 3077 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3079 "grammar.y"
    { 
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); 
         (yyval.initializer).loc = (yyloc); 

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init); 
         }
      ;}
    break;

  case 1017:

/* Line 1464 of yacc.c  */
#line 3094 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3095 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1019:

/* Line 1464 of yacc.c  */
#line 3096 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3098 "grammar.y"
    { 
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list)); 
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init); 
         }
      ;}
    break;

  case 1021:

/* Line 1464 of yacc.c  */
#line 3111 "grammar.y"
    { 
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); 
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init); 
         }
      ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3126 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1023:

/* Line 1464 of yacc.c  */
#line 3128 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3132 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3133 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3137 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3138 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3139 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3140 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3143 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3144 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3148 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3149 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1034:

/* Line 1464 of yacc.c  */
#line 3150 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3154 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3158 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3162 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3163 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3164 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1040:

/* Line 1464 of yacc.c  */
#line 3165 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3167 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
   ;}
    break;

  case 1042:

/* Line 1464 of yacc.c  */
#line 3175 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1043:

/* Line 1464 of yacc.c  */
#line 3184 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3185 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1045:

/* Line 1464 of yacc.c  */
#line 3186 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3187 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3191 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3192 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1049:

/* Line 1464 of yacc.c  */
#line 3196 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1050:

/* Line 1464 of yacc.c  */
#line 3197 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1051:

/* Line 1464 of yacc.c  */
#line 3202 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1052:

/* Line 1464 of yacc.c  */
#line 3203 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1053:

/* Line 1464 of yacc.c  */
#line 3204 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1054:

/* Line 1464 of yacc.c  */
#line 3205 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1055:

/* Line 1464 of yacc.c  */
#line 3206 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3208 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3226 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3227 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3231 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1060:

/* Line 1464 of yacc.c  */
#line 3232 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1061:

/* Line 1464 of yacc.c  */
#line 3233 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1062:

/* Line 1464 of yacc.c  */
#line 3234 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1063:

/* Line 1464 of yacc.c  */
#line 3235 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3236 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1065:

/* Line 1464 of yacc.c  */
#line 3238 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3239 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1067:

/* Line 1464 of yacc.c  */
#line 3240 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1068:

/* Line 1464 of yacc.c  */
#line 3241 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1069:

/* Line 1464 of yacc.c  */
#line 3245 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1070:

/* Line 1464 of yacc.c  */
#line 3246 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1071:

/* Line 1464 of yacc.c  */
#line 3247 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1072:

/* Line 1464 of yacc.c  */
#line 3248 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1073:

/* Line 1464 of yacc.c  */
#line 3249 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1074:

/* Line 1464 of yacc.c  */
#line 3251 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1075:

/* Line 1464 of yacc.c  */
#line 3252 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1076:

/* Line 1464 of yacc.c  */
#line 3253 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1078:

/* Line 1464 of yacc.c  */
#line 3258 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1079:

/* Line 1464 of yacc.c  */
#line 3259 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1080:

/* Line 1464 of yacc.c  */
#line 3260 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1081:

/* Line 1464 of yacc.c  */
#line 3261 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1082:

/* Line 1464 of yacc.c  */
#line 3262 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1084:

/* Line 1464 of yacc.c  */
#line 3267 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1087:

/* Line 1464 of yacc.c  */
#line 3274 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1089:

/* Line 1464 of yacc.c  */
#line 3276 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1090:

/* Line 1464 of yacc.c  */
#line 3277 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1091:

/* Line 1464 of yacc.c  */
#line 3278 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1099:

/* Line 1464 of yacc.c  */
#line 3289 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1100:

/* Line 1464 of yacc.c  */
#line 3290 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1101:

/* Line 1464 of yacc.c  */
#line 3291 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1102:

/* Line 1464 of yacc.c  */
#line 3292 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1103:

/* Line 1464 of yacc.c  */
#line 3293 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1104:

/* Line 1464 of yacc.c  */
#line 3294 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1105:

/* Line 1464 of yacc.c  */
#line 3295 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1106:

/* Line 1464 of yacc.c  */
#line 3299 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1107:

/* Line 1464 of yacc.c  */
#line 3300 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1108:

/* Line 1464 of yacc.c  */
#line 3304 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1109:

/* Line 1464 of yacc.c  */
#line 3305 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1110:

/* Line 1464 of yacc.c  */
#line 3306 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1111:

/* Line 1464 of yacc.c  */
#line 3310 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3311 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3312 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3313 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3315 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3316 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3317 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3319 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3320 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3321 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3322 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3324 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3325 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3326 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3330 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3331 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3332 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3333 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3334 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3338 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3339 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3340 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3341 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3343 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3344 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3348 "grammar.y"
    { (yyval.declMode) = declMode = publicAccess; ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3349 "grammar.y"
    { (yyval.declMode) = declMode = privateAccess; ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3350 "grammar.y"
    { (yyval.declMode) = declMode = defaultAccess; ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3354 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3355 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3359 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3360 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3361 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3362 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3366 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3367 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3368 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3370 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3371 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3372 "grammar.y"
    { declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3376 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3380 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1154:

/* Line 1464 of yacc.c  */
#line 3381 "grammar.y"
    {;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3384 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3385 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3389 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3390 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3391 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3396 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3397 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3401 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3402 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3403 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3407 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3408 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3409 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3410 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3411 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3412 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3413 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); Compiler_Warning(C89_DECL_WARNING); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3417 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3418 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3419 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3420 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3424 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3425 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3426 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3427 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3431 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3435 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3440 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1185:

/* Line 1464 of yacc.c  */
#line 3442 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3445 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3450 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3451 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3452 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3456 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3457 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1192:

/* Line 1464 of yacc.c  */
#line 3458 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1193:

/* Line 1464 of yacc.c  */
#line 3459 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1194:

/* Line 1464 of yacc.c  */
#line 3460 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3461 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1196:

/* Line 1464 of yacc.c  */
#line 3465 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3470 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1199:

/* Line 1464 of yacc.c  */
#line 3471 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3472 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3474 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3475 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3477 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3478 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3479 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1206:

/* Line 1464 of yacc.c  */
#line 3480 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3481 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3483 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3484 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3488 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3489 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3490 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3491 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3495 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3496 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1216:

/* Line 1464 of yacc.c  */
#line 3497 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3498 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1218:

/* Line 1464 of yacc.c  */
#line 3500 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3501 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3502 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1221:

/* Line 1464 of yacc.c  */
#line 3503 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3504 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3505 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3506 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3509 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3513 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3514 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3518 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3519 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3523 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3524 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3525 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3526 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3527 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3528 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3529 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3530 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3534 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1239:

/* Line 1464 of yacc.c  */
#line 3535 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1240:

/* Line 1464 of yacc.c  */
#line 3536 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3537 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3543 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3545 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3546 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1245:

/* Line 1464 of yacc.c  */
#line 3548 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1246:

/* Line 1464 of yacc.c  */
#line 3550 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3554 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3555 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3556 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3557 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3558 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3559 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3563 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3565 "grammar.y"
    { 
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3576 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3578 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3581 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3584 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3585 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3586 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3588 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess); 
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror(); 
   ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3597 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3599 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3601 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3602 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1267:

/* Line 1464 of yacc.c  */
#line 3603 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); declMode = defaultDeclMode; ;}
    break;

  case 1268:

/* Line 1464 of yacc.c  */
#line 3604 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); declMode = defaultDeclMode; ;}
    break;

  case 1269:

/* Line 1464 of yacc.c  */
#line 3606 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();  
   ;}
    break;

  case 1270:

/* Line 1464 of yacc.c  */
#line 3615 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1271:

/* Line 1464 of yacc.c  */
#line 3616 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1272:

/* Line 1464 of yacc.c  */
#line 3617 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1273:

/* Line 1464 of yacc.c  */
#line 3618 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1274:

/* Line 1464 of yacc.c  */
#line 3619 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1275:

/* Line 1464 of yacc.c  */
#line 3620 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1276:

/* Line 1464 of yacc.c  */
#line 3624 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1277:

/* Line 1464 of yacc.c  */
#line 3626 "grammar.y"
    {
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      declMode = defaultDeclMode;
   ;}
    break;

  case 1278:

/* Line 1464 of yacc.c  */
#line 3633 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1279:

/* Line 1464 of yacc.c  */
#line 3635 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1280:

/* Line 1464 of yacc.c  */
#line 3636 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1281:

/* Line 1464 of yacc.c  */
#line 3639 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1282:

/* Line 1464 of yacc.c  */
#line 3640 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1283:

/* Line 1464 of yacc.c  */
#line 3644 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1284:

/* Line 1464 of yacc.c  */
#line 3645 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1285:

/* Line 1464 of yacc.c  */
#line 3646 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1288:

/* Line 1464 of yacc.c  */
#line 3652 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1289:

/* Line 1464 of yacc.c  */
#line 3653 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1290:

/* Line 1464 of yacc.c  */
#line 3655 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1291:

/* Line 1464 of yacc.c  */
#line 3657 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1294:

/* Line 1464 of yacc.c  */
#line 3663 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1295:

/* Line 1464 of yacc.c  */
#line 3667 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1296:

/* Line 1464 of yacc.c  */
#line 3668 "grammar.y"
    { Symbol symbol = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1297:

/* Line 1464 of yacc.c  */
#line 3669 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1298:

/* Line 1464 of yacc.c  */
#line 3673 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1299:

/* Line 1464 of yacc.c  */
#line 3677 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1300:

/* Line 1464 of yacc.c  */
#line 3678 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1301:

/* Line 1464 of yacc.c  */
#line 3679 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1302:

/* Line 1464 of yacc.c  */
#line 3683 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1303:

/* Line 1464 of yacc.c  */
#line 3684 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1304:

/* Line 1464 of yacc.c  */
#line 3688 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1305:

/* Line 1464 of yacc.c  */
#line 3689 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1306:

/* Line 1464 of yacc.c  */
#line 3693 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1307:

/* Line 1464 of yacc.c  */
#line 3694 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1308:

/* Line 1464 of yacc.c  */
#line 3695 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1309:

/* Line 1464 of yacc.c  */
#line 3696 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1310:

/* Line 1464 of yacc.c  */
#line 3700 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1311:

/* Line 1464 of yacc.c  */
#line 3704 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1312:

/* Line 1464 of yacc.c  */
#line 3708 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1313:

/* Line 1464 of yacc.c  */
#line 3712 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 22142 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3715 "grammar.y"


